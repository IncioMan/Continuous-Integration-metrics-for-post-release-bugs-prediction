{"d17f0721a3a82e2f2b0fb424c8076159f9331bf0":{"changes":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/qualityprofile\/QualityProfileDaoTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/qualityprofile\/QualityProfileMapper.xml":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/qualityprofile\/QualityProfileDaoTest.java":[{"add":["151","  public void test_updateLastUsedDate_if_never_been_set_yet() {","152","    QProfileDto initial = QualityProfileTesting.newQualityProfileDto()","153","      .setLastUsed(null);","154","    underTest.insert(dbSession, initial);","155","","156","    int count = underTest.updateLastUsedDate(dbSession, initial, 15_000L);","157","","158","    assertThat(count).isEqualTo(1);","159","    QProfileDto reloaded = underTest.selectByUuid(dbSession, initial.getKee());","160","    assertThat(reloaded.getLastUsed()).isEqualTo(15_000L);","161","  }","162","","163","  @Test","164","  public void test_updateLastUsedDate_if_more_recent() {"],"delete":["151","  public void test_updateLastUsedDate() {"]}],"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/qualityprofile\/QualityProfileMapper.xml":[{"add":["100","      and (last_used is null or last_used &lt; #{lastUsedDate, jdbcType=BIGINT})"],"delete":["100","      and last_used &lt; #{lastUsedDate, jdbcType=BIGINT}"]}]}},"5f81649d5f7f9eb7f620d2ac49ed4b82d8ae3991":{"changes":{"sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/HttpConnector.java":"MODIFY"},"diff":{"sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/HttpConnector.java":[{"add":["134","        bodyBuilder.addFormDataPart(","135","          param.getKey(),","136","          part.getFile().getName(),","248",""],"delete":["27","","31","import okhttp3.Headers;","136","        bodyBuilder.addPart(","137","          Headers.of(\"Content-Disposition\", format(\"form-data; name=\\\"%s\\\"\", param.getKey())),","249","    "]}]}},"f1a6f4027de9d542e438409c53a88d8bb06dfd1a":{"changes":{"build.gradle":"MODIFY"},"diff":{"build.gradle":[{"add":["119","      dependencySet(group: 'com.fasterxml.jackson.core', version: '2.9.8') {"],"delete":["119","      dependencySet(group: 'com.fasterxml.jackson.core', version: '2.9.5') {"]}]}},"ebc43c59ac25a3c75b9ce089f90e9eaac6c74637":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/notification\/NotificationService.java":"MODIFY","\/dev\/null":"DELETE","it\/it-tests\/src\/test\/java\/it\/issue\/IssueNotificationsTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/platformlevel\/PlatformLevel4.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/notification\/NotificationDaemonTest.java":"ADD","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/notification\/NotificationDaemon.java":"ADD"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/notification\/NotificationService.java":[{"add":["32","import org.sonar.api.ce.ComputeEngineSide;","42","public class NotificationService {","49","  public NotificationService(DbClient dbClient, NotificationDispatcher[] dispatchers) {","57","  public NotificationService(DbClient dbClient) {","58","    this(dbClient, new NotificationDispatcher[0]);"],"delete":["26","import com.google.common.util.concurrent.ThreadFactoryBuilder;","32","import java.util.concurrent.Executors;","33","import java.util.concurrent.ScheduledExecutorService;","34","import java.util.concurrent.TimeUnit;","36","import org.picocontainer.Startable;","37","import org.sonar.api.Properties;","38","import org.sonar.api.Property;","39","import org.sonar.api.config.Settings;","42","import org.sonar.api.ce.ComputeEngineSide;","48","@Properties({","49","  @Property(","50","    key = NotificationService.PROPERTY_DELAY,","51","    defaultValue = \"60\",","52","    name = \"Delay of notifications, in seconds\",","53","    project = false,","54","    global = false),","55","  @Property(","56","    key = NotificationService.PROPERTY_DELAY_BEFORE_REPORTING_STATUS,","57","    defaultValue = \"600\",","58","    name = \"Delay before reporting notification status, in seconds\",","59","    project = false,","60","    global = false)","61","})","64","public class NotificationService implements Startable {","65","  private static final String THREAD_NAME_PREFIX = \"sq-notification-service-\";","69","  public static final String PROPERTY_DELAY = \"sonar.notifications.delay\";","70","  public static final String PROPERTY_DELAY_BEFORE_REPORTING_STATUS = \"sonar.notifications.runningDelayBeforeReportingStatus\";","71","","72","  private final long delayInSeconds;","73","  private final long delayBeforeReportingStatusInSeconds;","74","  private final DefaultNotificationManager manager;","78","  private ScheduledExecutorService executorService;","79","  private boolean stopping = false;","80","  private final boolean disabled;","81","","82","  public NotificationService(Settings settings, DefaultNotificationManager manager, DbClient dbClient,","83","    NotificationDispatcher[] dispatchers) {","84","    this.disabled = \"ComputeEngineSettings\".equals(settings.getClass().getSimpleName());","85","    this.delayInSeconds = settings.getLong(PROPERTY_DELAY);","86","    this.delayBeforeReportingStatusInSeconds = settings.getLong(PROPERTY_DELAY_BEFORE_REPORTING_STATUS);","87","    this.manager = manager;","95","  public NotificationService(Settings settings, DefaultNotificationManager manager, DbClient dbClient) {","96","    this(settings, manager, dbClient, new NotificationDispatcher[0]);","97","  }","98","","99","  @Override","100","  public void start() {","101","    if (!disabled) {","102","      executorService =","103","          Executors.newSingleThreadScheduledExecutor(","104","              new ThreadFactoryBuilder()","105","                  .setNameFormat(THREAD_NAME_PREFIX + \"%d\")","106","                  .setPriority(Thread.MIN_PRIORITY)","107","                  .build());","108","      executorService.scheduleWithFixedDelay(new Runnable() {","109","        @Override","110","        public void run() {","111","          try {","112","            processQueue();","113","          } catch (Exception e) {","114","            LOG.error(\"Error in NotificationService\", e);","115","          }","116","        }","117","      }, 0, delayInSeconds, TimeUnit.SECONDS);","118","      LOG.info(\"Notification service started (delay {} sec.)\", delayInSeconds);","119","    }","120","  }","121","","122","  @Override","123","  public void stop() {","124","    if (!disabled) {","125","      try {","126","        stopping = true;","127","        executorService.shutdown();","128","        executorService.awaitTermination(5, TimeUnit.SECONDS);","129","      } catch (InterruptedException e) {","130","        LOG.error(\"Error during stop of notification service\", e);","131","      }","132","      LOG.info(\"Notification service stopped\");","133","    }","134","  }","135","","136","  @VisibleForTesting","137","  synchronized void processQueue() {","138","    long start = now();","139","    long lastLog = start;","140","    long notifSentCount = 0;","141","","142","    Notification notifToSend = manager.getFromQueue();","143","    while (notifToSend != null) {","144","      deliver(notifToSend);","145","      notifSentCount++;","146","      if (stopping) {","147","        break;","148","      }","149","      long now = now();","150","      if (now - lastLog > delayBeforeReportingStatusInSeconds * 1000) {","151","        long remainingNotifCount = manager.count();","152","        lastLog = now;","153","        long spentTimeInMinutes = (now - start) \/ (60 * 1000);","154","        log(notifSentCount, remainingNotifCount, spentTimeInMinutes);","155","      }","156","      notifToSend = manager.getFromQueue();","157","    }","158","  }","159","","160","  @VisibleForTesting","161","  void log(long notifSentCount, long remainingNotifCount, long spentTimeInMinutes) {","162","    LOG.info(\"{} notifications sent during the past {} minutes and {} still waiting to be sent\",","163","      new Object[] {notifSentCount, spentTimeInMinutes, remainingNotifCount});"]}],"\/dev\/null":[{"add":[],"delete":[]}],"it\/it-tests\/src\/test\/java\/it\/issue\/IssueNotificationsTest.java":[{"add":["200","    Thread.sleep(10_000L);"],"delete":["200","    Thread.sleep(10000);"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/platformlevel\/PlatformLevel4.java":[{"add":["137","import org.sonar.server.notification.NotificationDaemon;","581","      NotificationDaemon.class,"],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/notification\/NotificationDaemonTest.java":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/notification\/NotificationDaemon.java":[{"add":[],"delete":[]}]}},"1f4b2123afcb0fb70c8e105a5d9820f7761da875":{"changes":{"sonar-application\/pom.xml":"MODIFY","server\/sonar-dev-cockpit-bridge\/pom.xml":"MODIFY","server\/sonar-process\/pom.xml":"MODIFY","server\/sonar-server-benchmarks\/pom.xml":"MODIFY","sonar-batch\/pom.xml":"MODIFY","sonar-batch-protocol\/pom.xml":"MODIFY","server\/sonar-process-monitor\/pom.xml":"MODIFY","sonar-db\/pom.xml":"MODIFY","sonar-plugin-api-deps\/pom.xml":"MODIFY","server\/sonar-web\/pom.xml":"MODIFY","server\/sonar-views-bridge\/pom.xml":"MODIFY","server\/sonar-search\/pom.xml":"MODIFY","server\/sonar-server\/pom.xml":"MODIFY","sonar-batch-shaded\/pom.xml":"MODIFY","sonar-core\/pom.xml":"MODIFY"},"diff":{"sonar-application\/pom.xml":[{"add":["257","      <properties>","258","        <maven.deploy.skip>true<\/maven.deploy.skip>","259","      <\/properties>"],"delete":["257","      <build>","258","        <plugins>","259","          <plugin>","260","            <artifactId>maven-deploy-plugin<\/artifactId>","261","            <configuration>","262","              <skip>true<\/skip>","263","            <\/configuration>","264","          <\/plugin>","265","        <\/plugins>","266","      <\/build>"]}],"server\/sonar-dev-cockpit-bridge\/pom.xml":[{"add":[],"delete":["40","  <profiles>","41","    <profile>","42","      <id>release<\/id>","43","      <build>","44","        <plugins>","45","          <plugin>","46","            <artifactId>maven-deploy-plugin<\/artifactId>","47","            <configuration>","48","              <skip>true<\/skip>","49","            <\/configuration>","50","          <\/plugin>","51","        <\/plugins>","52","      <\/build>","53","    <\/profile>","54","  <\/profiles>","55","","56",""]}],"server\/sonar-process\/pom.xml":[{"add":[],"delete":["98","","99","  <profiles>","100","    <profile>","101","      <id>release<\/id>","102","      <build>","103","        <plugins>","104","          <plugin>","105","            <artifactId>maven-deploy-plugin<\/artifactId>","106","            <configuration>","107","              <skip>true<\/skip>","108","            <\/configuration>","109","          <\/plugin>","110","        <\/plugins>","111","      <\/build>","112","    <\/profile>","113","  <\/profiles>","114",""]}],"server\/sonar-server-benchmarks\/pom.xml":[{"add":["16","    <maven.install.skip>true<\/maven.install.skip>","17","    <maven.deploy.skip>true<\/maven.deploy.skip>"],"delete":["100","    <profile>","101","      <id>release<\/id>","102","      <build>","103","        <plugins>","104","          <plugin>","105","            <artifactId>maven-deploy-plugin<\/artifactId>","106","            <configuration>","107","              <skip>true<\/skip>","108","            <\/configuration>","109","          <\/plugin>","110","        <\/plugins>","111","      <\/build>","112","    <\/profile>"]}],"sonar-batch\/pom.xml":[{"add":[],"delete":["168","    <profile>","169","      <id>release<\/id>","170","      <build>","171","        <plugins>","172","          <plugin>","173","            <artifactId>maven-deploy-plugin<\/artifactId>","174","            <configuration>","175","              <skip>true<\/skip>","176","            <\/configuration>","177","          <\/plugin>","178","        <\/plugins>","179","      <\/build>","180","    <\/profile>"]}],"sonar-batch-protocol\/pom.xml":[{"add":[],"delete":["110","","111","  <profiles>","112","    <profile>","113","      <id>release<\/id>","114","      <build>","115","        <plugins>","116","          <plugin>","117","            <artifactId>maven-deploy-plugin<\/artifactId>","118","            <configuration>","119","              <skip>true<\/skip>","120","            <\/configuration>","121","          <\/plugin>","122","        <\/plugins>","123","      <\/build>","124","    <\/profile>","125","  <\/profiles>"]}],"server\/sonar-process-monitor\/pom.xml":[{"add":[],"delete":["81","","82","  <profiles>","83","    <profile>","84","      <id>release<\/id>","85","      <build>","86","        <plugins>","87","          <plugin>","88","            <artifactId>maven-deploy-plugin<\/artifactId>","89","            <configuration>","90","              <skip>true<\/skip>","91","            <\/configuration>","92","          <\/plugin>","93","        <\/plugins>","94","      <\/build>","95","    <\/profile>","96","  <\/profiles>","97",""]}],"sonar-db\/pom.xml":[{"add":[],"delete":["177","    <profile>","178","      <id>release<\/id>","179","      <build>","180","        <plugins>","181","          <plugin>","182","            <artifactId>maven-deploy-plugin<\/artifactId>","183","            <configuration>","184","              <skip>true<\/skip>","185","            <\/configuration>","186","          <\/plugin>","187","        <\/plugins>","188","      <\/build>","189","    <\/profile>"]}],"sonar-plugin-api-deps\/pom.xml":[{"add":[],"delete":["166","","167","  <profiles>","168","    <profile>","169","      <id>release<\/id>","170","      <build>","171","        <plugins>","172","          <plugin>","173","            <artifactId>maven-deploy-plugin<\/artifactId>","174","            <configuration>","175","              <skip>true<\/skip>","176","            <\/configuration>","177","          <\/plugin>","178","        <\/plugins>","179","      <\/build>","180","    <\/profile>","181","  <\/profiles>"]}],"server\/sonar-web\/pom.xml":[{"add":[],"delete":["223","          <plugin>","224","            <artifactId>maven-deploy-plugin<\/artifactId>","225","            <configuration>","226","              <skip>true<\/skip>","227","            <\/configuration>","228","          <\/plugin>"]}],"server\/sonar-views-bridge\/pom.xml":[{"add":[],"delete":["40","  <profiles>","41","    <profile>","42","      <id>release<\/id>","43","      <build>","44","        <plugins>","45","          <plugin>","46","            <artifactId>maven-deploy-plugin<\/artifactId>","47","            <configuration>","48","              <skip>true<\/skip>","49","            <\/configuration>","50","          <\/plugin>","51","        <\/plugins>","52","      <\/build>","53","    <\/profile>","54","  <\/profiles>","55","","56",""]}],"server\/sonar-search\/pom.xml":[{"add":[],"delete":["70","  <profiles>","71","    <profile>","72","      <id>release<\/id>","73","      <build>","74","        <plugins>","75","          <plugin>","76","            <artifactId>maven-deploy-plugin<\/artifactId>","77","            <configuration>","78","              <skip>true<\/skip>","79","            <\/configuration>","80","          <\/plugin>","81","        <\/plugins>","82","      <\/build>","83","    <\/profile>","84","  <\/profiles>","85",""]}],"server\/sonar-server\/pom.xml":[{"add":[],"delete":["336","    <profile>","337","      <id>release<\/id>","338","      <build>","339","        <plugins>","340","          <plugin>","341","            <artifactId>maven-deploy-plugin<\/artifactId>","342","            <configuration>","343","              <skip>true<\/skip>","344","            <\/configuration>","345","          <\/plugin>","346","        <\/plugins>","347","      <\/build>","348","    <\/profile>","349",""]}],"sonar-batch-shaded\/pom.xml":[{"add":[],"delete":["64","","65","  <profiles>","66","    <profile>","67","      <id>release<\/id>","68","      <build>","69","        <plugins>","70","          <plugin>","71","            <artifactId>maven-deploy-plugin<\/artifactId>","72","            <configuration>","73","              <skip>true<\/skip>","74","            <\/configuration>","75","          <\/plugin>","76","        <\/plugins>","77","      <\/build>","78","    <\/profile>","79","  <\/profiles>  "]}],"sonar-core\/pom.xml":[{"add":[],"delete":["126","","127","  <profiles>","128","    <profile>","129","      <id>release<\/id>","130","      <build>","131","        <plugins>","132","          <plugin>","133","            <artifactId>maven-deploy-plugin<\/artifactId>","134","            <configuration>","135","              <skip>true<\/skip>","136","            <\/configuration>","137","          <\/plugin>","138","        <\/plugins>","139","      <\/build>","140","    <\/profile>","141","  <\/profiles>"]}]}},"48191a7dd1e630ac53f73418852fc7ea6edd2545":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ce\/ws\/LogsAction.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ce\/ws\/LogsAction.java":[{"add":["63","      .setDescription(\"Logs of a task. Format of response is plain text. HTTP code 404 is returned if the task does not exist or if logs are not available. <br\/>\" +","64","        \"Requires system administration permission or project administration permission.\")"],"delete":["63","      .setDescription(\"Logs of a task. Format of response is plain text. HTTP code 404 is returned if the task does not \" +","64","        \"exist or if logs are not available. Requires system administration permission.\")"]}]}},"6868ebd60bcc61d9ec5c079d9da55c836ba5c154":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/__tests__\/ProjectRowActions-test.tsx":"MODIFY","server\/sonar-webserver-webapi\/src\/test\/resources\/org\/sonar\/server\/ui\/ws\/ComponentActionTest\/return_configuration_with_all_properties.json":"MODIFY","server\/sonar-web\/src\/main\/js\/api\/nav.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/types.d.ts":"MODIFY","server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/ui\/ws\/ComponentActionTest.java":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/resources\/org\/sonar\/server\/ui\/ws\/component-example.json":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/ProjectRowActions.tsx":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/ui\/ws\/ComponentAction.java":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/__tests__\/ProjectRowActions-test.tsx":[{"add":["30","beforeEach(() => {","31","  jest.clearAllMocks();","32","});","33","","43","        canBrowseProject: false,","71","","72","  it('also shows the restore access when browse permission is missing', async () => {","73","    (getComponentNavigation as jest.Mock).mockResolvedValueOnce({","74","      configuration: { canBrowseProject: false, showPermissions: true }","75","    });","76","","77","    const wrapper = shallowRender();","78","    wrapper.instance().handleDropdownOpen();","79","    await waitAndUpdate(wrapper);","80","","81","    expect(getComponentNavigation).toBeCalledWith({ component: 'foo' });","82","    expect(wrapper.find('.js-restore-access').exists()).toBe(true);","83","  });","90","        canBrowseProject: true,"],"delete":["37","    jest.resetAllMocks();","71","    jest.resetAllMocks();"]}],"server\/sonar-webserver-webapi\/src\/test\/resources\/org\/sonar\/server\/ui\/ws\/ComponentActionTest\/return_configuration_with_all_properties.json":[{"add":["10","    \"showBackgroundTasks\": true,","11","    \"canApplyPermissionTemplate\": false,","12","    \"canBrowseProject\": true,","13","    \"canUpdateProjectVisibilityToPrivate\": false,"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/api\/nav.ts":[{"add":["26","type NavComponent = T.Omit<T.Component, 'alm' | 'qualifier' | 'leakPeriodDate' | 'path' | 'tags'>;","27","","30","): Promise<NavComponent> {"],"delete":["28","): Promise<any> {"]}],"server\/sonar-web\/src\/main\/js\/app\/types.d.ts":[{"add":["154","    canBrowseProject?: boolean;"],"delete":[]}],"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/ui\/ws\/ComponentActionTest.java":[{"add":["411","  public void return_configuration_for_private_projects() {","412","    ComponentDto project = insertOrganizationAndProject();","413","    UserSessionRule userSessionRule = userSession.logIn();","414","    init();","415","","416","    userSessionRule.addProjectPermission(UserRole.ADMIN, project);","417","    assertJson(execute(project.getDbKey())).isSimilarTo(\"{\\n\" +","418","      \"  \\\"configuration\\\": {\\n\" +","419","      \"    \\\"showSettings\\\": false,\\n\" +","420","      \"    \\\"showQualityProfiles\\\": true,\\n\" +","421","      \"    \\\"showQualityGates\\\": true,\\n\" +","422","      \"    \\\"showManualMeasures\\\": true,\\n\" +","423","      \"    \\\"showLinks\\\": true,\\n\" +","424","      \"    \\\"showPermissions\\\": false,\\n\" +","425","      \"    \\\"showHistory\\\": false,\\n\" +","426","      \"    \\\"showUpdateKey\\\": false,\\n\" +","427","      \"    \\\"showBackgroundTasks\\\": true,\\n\" +","428","      \"    \\\"canApplyPermissionTemplate\\\": false,\\n\" +","429","      \"    \\\"canBrowseProject\\\": false,\\n\" +","430","      \"    \\\"canUpdateProjectVisibilityToPrivate\\\": false\\n\" +","431","      \"  }\\n\" +","432","      \"}\");","433","","434","    userSessionRule.addProjectPermission(UserRole.USER, project);","435","    assertJson(execute(project.getDbKey())).isSimilarTo(\"{\\n\" +","436","      \"  \\\"configuration\\\": {\\n\" +","437","      \"    \\\"showSettings\\\": false,\\n\" +","438","      \"    \\\"showQualityProfiles\\\": true,\\n\" +","439","      \"    \\\"showQualityGates\\\": true,\\n\" +","440","      \"    \\\"showManualMeasures\\\": true,\\n\" +","441","      \"    \\\"showLinks\\\": true,\\n\" +","442","      \"    \\\"showPermissions\\\": false,\\n\" +","443","      \"    \\\"showHistory\\\": false,\\n\" +","444","      \"    \\\"showUpdateKey\\\": false,\\n\" +","445","      \"    \\\"showBackgroundTasks\\\": true,\\n\" +","446","      \"    \\\"canApplyPermissionTemplate\\\": false,\\n\" +","447","      \"    \\\"canBrowseProject\\\": true,\\n\" +","448","      \"    \\\"canUpdateProjectVisibilityToPrivate\\\": false\\n\" +","449","      \"  }\\n\" +","450","      \"}\");","451","  }","452","","453","  @Test","726","}"],"delete":["683","  }"]}],"server\/sonar-webserver-webapi\/src\/main\/resources\/org\/sonar\/server\/ui\/ws\/component-example.json":[{"add":["46","    \"canBrowseProject\": true,"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/ProjectRowActions.tsx":[{"add":["61","          const hasAccess = Boolean(","62","            configuration && configuration.showPermissions && configuration.canBrowseProject","63","          );"],"delete":["61","          const hasAccess = Boolean(configuration && configuration.showPermissions);"]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/ui\/ws\/ComponentAction.java":[{"add":["309","    boolean canBrowseProject = userSession.hasComponentPermission(USER, component);","321","    json.prop(\"canBrowseProject\", canBrowseProject);"],"delete":[]}]}},"20570f275c8a996939c264bf032615554e784fc5":{"changes":{"sonar-core\/src\/test\/java\/org\/sonar\/core\/util\/DefaultHttpDownloaderTest.java":"MODIFY","sonar-core\/src\/main\/java\/org\/sonar\/core\/util\/DefaultHttpDownloader.java":"MODIFY"},"diff":{"sonar-core\/src\/test\/java\/org\/sonar\/core\/util\/DefaultHttpDownloaderTest.java":[{"add":["24","import java.net.Authenticator;","26","import java.net.PasswordAuthentication;","39","import org.hamcrest.TypeSafeMatcher;","56","","59","import static org.mockito.Matchers.argThat;","61","import static org.mockito.Mockito.never;","62","import static org.mockito.Mockito.verify;","255","","256","  @Test","257","  public void configure_http_proxy() {","258","    DefaultHttpDownloader.ProxySystem system = mock(DefaultHttpDownloader.ProxySystem.class);","259","    Settings settings = new Settings();","260","    settings.setProperty(\"http.proxyHost\", \"1.2.3.4\");","261","    settings.setProperty(\"http.proxyPort\", \"80\");","262","","263","    new DefaultHttpDownloader.BaseHttpDownloader(system, settings, null);","264","","265","    verify(system).setProperty(\"http.proxyHost\", \"1.2.3.4\");","266","    verify(system).setProperty(\"http.proxyPort\", \"80\");","267","    verify(system, never()).setDefaultAuthenticator(any(Authenticator.class));","268","  }","269","","270","  @Test","271","  public void configure_http_proxy_credentials() {","272","    DefaultHttpDownloader.ProxySystem system = mock(DefaultHttpDownloader.ProxySystem.class);","273","    Settings settings = new Settings();","274","    settings.setProperty(\"https.proxyHost\", \"1.2.3.4\");","275","    settings.setProperty(\"http.proxyUser\", \"the_login\");","276","    settings.setProperty(\"http.proxyPassword\", \"the_passwd\");","277","","278","    new DefaultHttpDownloader.BaseHttpDownloader(system, settings, null);","279","","280","    verify(system).setDefaultAuthenticator(argThat(new TypeSafeMatcher<Authenticator>() {","281","      @Override","282","      protected boolean matchesSafely(Authenticator authenticator) {","283","        DefaultHttpDownloader.ProxyAuthenticator a = (DefaultHttpDownloader.ProxyAuthenticator) authenticator;","284","        PasswordAuthentication authentication = a.getPasswordAuthentication();","285","        return authentication.getUserName().equals(\"the_login\") &&","286","          new String(authentication.getPassword()).equals(\"the_passwd\");","287","      }","288","","289","      @Override","290","      public void describeTo(Description description) {","291","      }","292","    }));","293","  }","294",""],"delete":["35",""]}],"sonar-core\/src\/main\/java\/org\/sonar\/core\/util\/DefaultHttpDownloader.java":[{"add":["52","import static org.apache.commons.lang.StringUtils.isNotEmpty;","61","","77","    downloader = new BaseHttpDownloader(new ProxySystem(), settings, server.getVersion());","91","    downloader = new BaseHttpDownloader(new ProxySystem(), settings, null);","159","  static class ProxySystem {","160","    public void setProperty(String key, String value) {","161","      System.setProperty(key, value);","162","    }","163","","164","    public void setDefaultAuthenticator(Authenticator authenticator) {","165","      Authenticator.setDefault(authenticator);","166","    }","167","  }","168","","169","  static class BaseHttpDownloader {","181","    BaseHttpDownloader(ProxySystem system, Settings settings, @Nullable String userAgent) {","182","      initProxy(system, settings);","186","    private void initProxy(ProxySystem system, Settings settings) {","187","      \/\/ propagate system properties","188","      for (String key : PROXY_SETTINGS) {","189","        if (settings.hasKey(key)) {","190","          system.setProperty(key, settings.getString(key));","191","        }","192","      }","193","      \/\/ register credentials","194","      String login = settings.getString(HTTP_PROXY_USER);","195","      if (isNotEmpty(login)) {","196","        system.setDefaultAuthenticator(new ProxyAuthenticator(login, settings.getString(HTTP_PROXY_PASSWORD)));","358","  }","360","  static class ProxyAuthenticator extends Authenticator {","361","    private final PasswordAuthentication auth;","363","    ProxyAuthenticator(String user, @Nullable String password) {","364","      auth = new PasswordAuthentication(user, password == null ? new char[0] : password.toCharArray());","365","    }","367","    @Override","368","    protected PasswordAuthentication getPasswordAuthentication() {","369","      return auth;"],"delete":["21","","43","import java.util.Map;","77","    downloader = new BaseHttpDownloader(settings.getProperties(), server.getVersion());","91","    downloader = new BaseHttpDownloader(settings.getProperties(), null);","159","  public static class BaseHttpDownloader {","171","    public BaseHttpDownloader(Map<String, String> settings, @Nullable String userAgent) {","172","      initProxy(settings);","176","    private void initProxy(Map<String, String> settings) {","177","      propagateProxySystemProperties(settings);","178","      if (requiresProxyAuthentication(settings)) {","179","        registerProxyCredentials(settings);","209","    private static void registerProxyCredentials(Map<String, String> settings) {","210","      Authenticator.setDefault(new ProxyAuthenticator(","211","        settings.get(HTTP_PROXY_USER),","212","        settings.get(HTTP_PROXY_PASSWORD)));","213","    }","214","","215","    private boolean requiresProxyAuthentication(Map<String, String> settings) {","216","      return settings.containsKey(HTTP_PROXY_USER);","217","    }","218","","219","    private void propagateProxySystemProperties(Map<String, String> settings) {","220","      for (String key : PROXY_SETTINGS) {","221","        if (settings.containsKey(key)) {","222","          System.setProperty(key, settings.get(key));","223","        }","224","      }","225","    }","226","","360","    private static class ProxyAuthenticator extends Authenticator {","361","      private final PasswordAuthentication auth;","363","      ProxyAuthenticator(String user, String password) {","364","        auth = new PasswordAuthentication(user, password == null ? new char[0] : password.toCharArray());","365","      }","367","      @Override","368","      protected PasswordAuthentication getPasswordAuthentication() {","369","        return auth;","370","      }"]}]}},"31afeda58d4b373438fc49b95ff15fb17f469a08":{"changes":{"sonar-db\/src\/main\/java\/org\/sonar\/db\/charset\/MssqlCharsetHandler.java":"MODIFY","sonar-db\/src\/test\/java\/org\/sonar\/db\/charset\/MssqlCharsetHandlerTest.java":"MODIFY"},"diff":{"sonar-db\/src\/main\/java\/org\/sonar\/db\/charset\/MssqlCharsetHandler.java":[{"add":["45","  private static final String BIN = \"BIN\";","46","  private static final String BIN2 = \"BIN2\";","67","      if (!isCollationCorrect(column)) {","82","  \/**","83","   * Collation is correct if is contains {@link #CASE_SENSITIVE_ACCENT_SENSITIVE} or {@link #BIN} or {@link #BIN2}.","84","   *\/","85","  private static boolean isCollationCorrect(ColumnDef column) {","86","    String collation = column.getCollation();","87","    return containsIgnoreCase(collation, CASE_SENSITIVE_ACCENT_SENSITIVE)","88","      || containsIgnoreCase(collation, BIN)","89","      || containsIgnoreCase(collation, BIN2);","90","  }","91","","150","  static String toCaseSensitive(String collation) {","152","    return collation"],"delete":["65","      if (!containsIgnoreCase(column.getCollation(), CASE_SENSITIVE_ACCENT_SENSITIVE)) {","138","  static String toCaseSensitive(String ciCollation) {","140","    return ciCollation"]}],"sonar-db\/src\/test\/java\/org\/sonar\/db\/charset\/MssqlCharsetHandlerTest.java":[{"add":["131","    for (String sensitivity : Arrays.asList(\"CI_AI\", \"CI_AS\", \"CS_AI\")) {","132","      for (String suffix : Arrays.asList(\"\", \"_KS_WS\")) {","133","        res.add(new String[] {","134","          format(\"Latin1_General_%s%s\", sensitivity, suffix),","135","          format(\"Latin1_General_CS_AS%s\", suffix)","136","        });","164","  @Test","165","  @UseDataProvider(\"combinationOfBinAndSuffix\")","166","  public void do_not_repair_if_collation_contains_BIN(String collation) throws Exception {","167","    answerColumns(asList(new ColumnDef(TABLE_PROJECTS, COLUMN_NAME, \"Latin1_General\", collation, \"varchar\", 10, false)));","168","","169","    Connection connection = mock(Connection.class);","170","    underTest.handle(connection, immutableEnumSet(AUTO_REPAIR_COLLATION));","171","","172","    verify(selectExecutor, never()).executeUpdate(any(Connection.class), anyString());","173","  }","174","","175","  @DataProvider","176","  public static Object[][] combinationOfBinAndSuffix() {","177","    return Arrays.asList(\"\", \"_KS_WS\")","178","      .stream()","179","      .map(suffix -> new String[] {format(\"Latin1_General_BIN%s\", suffix)})","180","      .toArray(Object[][]::new);","181","  }","182","","183","  @Test","184","  @UseDataProvider(\"combinationOfBin2AndSuffix\")","185","  public void do_not_repair_if_collation_contains_BIN2(String collation) throws Exception {","186","    answerColumns(asList(new ColumnDef(TABLE_PROJECTS, COLUMN_NAME, \"Latin1_General\", collation, \"varchar\", 10, false)));","187","","188","    Connection connection = mock(Connection.class);","189","    underTest.handle(connection, immutableEnumSet(AUTO_REPAIR_COLLATION));","190","","191","    verify(selectExecutor, never()).executeUpdate(any(Connection.class), anyString());","192","  }","193","","194","  @DataProvider","195","  public static Object[][] combinationOfBin2AndSuffix() {","196","    return Arrays.asList(\"\", \"_KS_WS\")","197","      .stream()","198","      .map(suffix -> new String[] {format(\"Latin1_General_BIN2%s\", suffix)})","199","      .toArray(Object[][]::new);","200","  }","201",""],"delete":["131","    for (String caseSensitivity : Arrays.asList(\"CS\", \"CI\")) {","132","      for (String accentSensitivity : Arrays.asList(\"AS\", \"AI\")) {","133","        if (caseSensitivity.equals(\"CI\") || accentSensitivity.equals(\"AI\")) {","134","          for (String suffix : Arrays.asList(\"\", \"_KS_WS\")) {","135","            res.add(new String[] {","136","              format(\"Latin1_General_%s_%s%s\", caseSensitivity, accentSensitivity, suffix),","137","              format(\"Latin1_General_CS_AS%s\", suffix)","138","            });","139","          }","140","        }"]}]}},"560d8e87f9624cc2ad1b7a5c17ac647d2dcc0d54":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/filemove\/FileMoveDetectionStep.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/filemove\/FileMoveDetectionStepTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/filemove\/FileMoveDetectionStep.java":[{"add":["231","    if (dbComponent.getPath() == null) {","232","      return null;","233","    }"],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/filemove\/FileMoveDetectionStepTest.java":[{"add":["31","import java.util.function.Function;","361","  public void execute_detects_no_move_if_content_of_file_has_no_path_in_DB() {","362","    analysisMetadataHolder.setBaseProjectSnapshot(ANALYSIS);","363","","364","    mockComponents(key -> newComponentDto(key).setPath(null), FILE_1.getKey());","365","    mockContentOfFileInDb(FILE_1.getKey(), CONTENT1);","366","    setFilesInReport(FILE_2);","367","    setFileContentInReport(FILE_2_REF, CONTENT1);","368","","369","    underTest.execute();","370","","371","    assertThat(movedFilesRepository.getComponentsWithOriginal()).isEmpty();","372","  }","373","","374","  @Test","525","    return mockComponents(key -> newComponentDto(key), componentKeys);","526","  }","527","","528","  private ComponentDto[] mockComponents(Function<String, ComponentDto> newComponentDto, String... componentKeys) {","530","      .map(newComponentDto)"],"delete":["511","      .map(key -> newComponentDto(key))"]}]}},"8d3f85ca3272be3b99826c86d24dd4ca54ae85ed":{"changes":{"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v60\/PopulateAnalysisUuidOnMeasuresTest.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v60\/PopulateAnalysisUuidOnMeasures.java":"MODIFY"},"diff":{"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v60\/PopulateAnalysisUuidOnMeasuresTest.java":[{"add":["83","  private void insertSnapshot(long id, String uuid, String qualifier, @Nullable Long rootSnapshotId) {"],"delete":["83","  private String insertSnapshot(long id, String uuid, String qualifier, @Nullable Long rootSnapshotId) {","110","    return uuid;"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v60\/PopulateAnalysisUuidOnMeasures.java":[{"add":[],"delete":["46","      \"where m.analysis_uuid is null \" +","47","      \"union \" +","48","      \"select distinct m.snapshot_id as sId, s.root_snapshot_id as rootSid \" +","49","      \"from project_measures m \" +","50","      \"inner join snapshots s on m.snapshot_id=s.id \" +"]}]}},"d414e4e2c2daed9fcb3d6f6eef35dd538e752d76":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/templates\/rule\/coding-rules-profile-activation.hbs":"MODIFY","server\/sonar-web\/src\/main\/less\/components\/modals.less":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/templates\/rule\/coding-rules-profile-activation.hbs":[{"add":["9","  <div class=\"modal-body modal-container\">"],"delete":["9","  <div class=\"modal-body modal-body-select2\">"]}],"server\/sonar-web\/src\/main\/less\/components\/modals.less":[{"add":["115","  width: 120px;","119","  padding-left: 10px;"],"delete":["115","  width: 130px;"]}]}},"bf79ed11bd311395aaf01a0d17f72a835ef0d7fb":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/source-viewer\/app.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/source-viewer\/main.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/source-viewer\/app.js":[{"add":["30","","32","    viewer.open(options.file.uuid, { aroundLine: options.file.line });","38","  } else {","39","    viewer.open(options.file.uuid);"],"delete":["30","  viewer.open(options.file.uuid);"]}],"server\/sonar-web\/src\/main\/js\/components\/source-viewer\/main.js":[{"add":["138","      that.requestSource(opts.aroundLine)","173","  linesLimit (aroundLine) {","174","    if (aroundLine) {","175","      return {","176","        from: Math.max(1, aroundLine - this.LINES_AROUND),","177","        to: aroundLine + this.LINES_LIMIT","178","      };","179","    }","180","    return { from: 1, to: this.LINES_LIMIT };","211","  requestSource (aroundLine) {","214","    const options = _.extend({ uuid: this.model.id }, this.linesLimit(aroundLine));","629","      from: Math.max(1, firstLine - this.LINES_AROUND),"],"delete":["138","      that.requestSource()","173","  linesLimit () {","174","    return {","175","      from: 1,","176","      to: this.LINES_LIMIT","177","    };","208","  requestSource () {","211","    const options = _.extend({ uuid: this.model.id }, this.linesLimit());","626","      from: firstLine - this.LINES_AROUND,"]}]}},"294f80226f7f5c7a255346371680633445bde331":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/queue\/ReportSubmitterTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/queue\/ReportSubmitterTest.java":[{"add":["33","import org.sonar.core.permission.GlobalPermissions;","247","  \/**","248","   * SONAR-8757","249","   *\/","250","  @Test","251","  public void project_branch_must_not_benefit_from_the_scan_permission_on_main_project() {","252","    ComponentDto mainProject = db.components().insertProject();","253","    userSession.addProjectUuidPermissions(GlobalPermissions.SCAN_EXECUTION, mainProject.uuid());","254","","255","    \/\/ user does not have the \"scan\" permission on the branch, so it can't scan it","256","    String branchName = \"branchFoo\";","257","    ComponentDto branchProject = db.components().insertProject(p -> p.setKey(mainProject.getKey() + \":\" + branchName));","258","","259","","260","    thrown.expect(ForbiddenException.class);","261","    underTest.submit(defaultOrganizationKey, mainProject.key(), branchName, PROJECT_NAME, IOUtils.toInputStream(\"{binary}\"));","262","  }","263",""],"delete":[]}]}},"da6a97014a1aba426ca6253623f6ff71281a64ac":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/sidebar\/DomainFacet.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/component-measures\/sidebar\/__tests__\/DomainFacet-test.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/component-measures\/sidebar\/__tests__\/__snapshots__\/DomainFacet-test.js.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/sidebar\/DomainFacet.js":[{"add":["69","    if (measureSelected) {","70","      return [getLocalizedMetricName(measureSelected.metric)];","71","    }","72","    return overviewSelected ? [translate('component_measures.domain_overview')] : [];","83","    let sortedItems = sortMeasures(domain.name, items);","84","","85","    sortedItems = sortedItems.filter((item, index) => {","86","      return (","87","        typeof item !== 'string' ||","88","        (index + 1 !== sortedItems.length && typeof sortedItems[index + 1] !== 'string')","89","      );","90","    });","91","","95","          <span className=\"facet search-navigator-facet facet-category\" key={item}>"],"delete":["69","    return measureSelected","70","      ? [getLocalizedMetricName(measureSelected.metric)]","71","      : overviewSelected ? [translate('component_measures.domain_overview')] : [];","82","    const sortedItems = sortMeasures(domain.name, items);","86","          <span key={item} className=\"facet search-navigator-facet facet-category\">"]}],"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/sidebar\/__tests__\/DomainFacet-test.js":[{"add":["71","","72","it('should not display subtitles of new measures if there is none', () => {","73","  const domain = {","74","    name: 'Reliability',","75","    measures: [","76","      {","77","        metric: { key: 'bugs', type: 'INT', name: 'Bugs', domain: 'Reliability' },","78","        value: '5'","79","      }","80","    ]","81","  };","82","","83","  expect(","84","    shallow(","85","      <DomainFacet","86","        domain={domain}","87","        onChange={() => {}}","88","        onToggle={() => {}}","89","        open={true}","90","        selected={'foo'}","91","      \/>","92","    )","93","  ).toMatchSnapshot();","94","});","95","","96","it('should not display subtitles of new measures if there is none, even on last line', () => {","97","  const domain = {","98","    name: 'Reliability',","99","    measures: [","100","      {","101","        metric: { key: 'new_bugs', type: 'INT', name: 'New Bugs', domain: 'Reliability' },","102","        value: '5'","103","      }","104","    ]","105","  };","106","","107","  expect(","108","    shallow(","109","      <DomainFacet","110","        domain={domain}","111","        onChange={() => {}}","112","        onToggle={() => {}}","113","        open={true}","114","        selected={'foo'}","115","      \/>","116","    )","117","  ).toMatchSnapshot();","118","});"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/sidebar\/__tests__\/__snapshots__\/DomainFacet-test.js.snap":[{"add":["265","","266","exports[`should not display subtitles of new measures if there is none 1`] = `","267","<FacetBox","268","  property=\"Reliability\"","269",">","270","  <FacetHeader","271","    name=\"Reliability\"","272","    onClick={[Function]}","273","    open={true}","274","    values={Array []}","275","  \/>","276","  <FacetItemsList>","277","    <FacetItem","278","      active={false}","279","      disabled={false}","280","      halfWidth={false}","281","      key=\"Reliability\"","282","      name={","283","        <span","284","          id=\"measure-overview-Reliability-name\"","285","        >","286","          component_measures.domain_overview","287","        <\/span>","288","      }","289","      onClick={[Function]}","290","      stat={","291","        <BubblesIcon","292","          size={14}","293","        \/>","294","      }","295","      value=\"Reliability\"","296","    \/>","297","    <span","298","      className=\"facet search-navigator-facet facet-category\"","299","      key=\"overall_category\"","300","    >","301","      <span","302","        className=\"facet-name\"","303","      >","304","        component_measures.facet_category.overall_category","305","      <\/span>","306","    <\/span>","307","    <FacetItem","308","      active={false}","309","      disabled={false}","310","      halfWidth={false}","311","      key=\"bugs\"","312","      name={","313","        <span","314","          className=\"big-spacer-left\"","315","          id=\"measure-bugs-name\"","316","        >","317","          Bugs","318","        <\/span>","319","      }","320","      onClick={[Function]}","321","      stat={","322","        <FacetMeasureValue","323","          measure={","324","            Object {","325","              \"metric\": Object {","326","                \"domain\": \"Reliability\",","327","                \"key\": \"bugs\",","328","                \"name\": \"Bugs\",","329","                \"type\": \"INT\",","330","              },","331","              \"value\": \"5\",","332","            }","333","          }","334","        \/>","335","      }","336","      value=\"bugs\"","337","    \/>","338","  <\/FacetItemsList>","339","<\/FacetBox>","340","`;","341","","342","exports[`should not display subtitles of new measures if there is none, even on last line 1`] = `","343","<FacetBox","344","  property=\"Reliability\"","345",">","346","  <FacetHeader","347","    name=\"Reliability\"","348","    onClick={[Function]}","349","    open={true}","350","    values={Array []}","351","  \/>","352","  <FacetItemsList>","353","    <FacetItem","354","      active={false}","355","      disabled={false}","356","      halfWidth={false}","357","      key=\"Reliability\"","358","      name={","359","        <span","360","          id=\"measure-overview-Reliability-name\"","361","        >","362","          component_measures.domain_overview","363","        <\/span>","364","      }","365","      onClick={[Function]}","366","      stat={","367","        <BubblesIcon","368","          size={14}","369","        \/>","370","      }","371","      value=\"Reliability\"","372","    \/>","373","    <span","374","      className=\"facet search-navigator-facet facet-category\"","375","      key=\"new_code_category\"","376","    >","377","      <span","378","        className=\"facet-name\"","379","      >","380","        component_measures.facet_category.new_code_category","381","      <\/span>","382","    <\/span>","383","    <FacetItem","384","      active={false}","385","      disabled={false}","386","      halfWidth={false}","387","      key=\"new_bugs\"","388","      name={","389","        <span","390","          className=\"big-spacer-left\"","391","          id=\"measure-new_bugs-name\"","392","        >","393","          New Bugs","394","        <\/span>","395","      }","396","      onClick={[Function]}","397","      stat={","398","        <FacetMeasureValue","399","          measure={","400","            Object {","401","              \"metric\": Object {","402","                \"domain\": \"Reliability\",","403","                \"key\": \"new_bugs\",","404","                \"name\": \"New Bugs\",","405","                \"type\": \"INT\",","406","              },","407","              \"value\": \"5\",","408","            }","409","          }","410","        \/>","411","      }","412","      value=\"new_bugs\"","413","    \/>","414","  <\/FacetItemsList>","415","<\/FacetBox>","416","`;"],"delete":[]}]}},"8d3d6716e8221f26040eb81911afffc142fae773":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/project-permissions\/apply-template-view.js":"MODIFY","server\/sonar-web\/src\/main\/js\/api\/permissions.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/project-permissions\/main.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/project-permissions\/apply-template-view.js":[{"add":["21","import { applyTemplateToProject, bulkApplyTemplateToProject } from '..\/..\/api\/permissions';","38","    const permissionTemplate = this.$('#project-permissions-template').val();","41","    if (this.options.project) {","42","      applyTemplateToProject({","43","        data: { projectId: this.options.project.id, templateId: permissionTemplate }","44","      }).done(function () {","45","        that.options.refresh();","46","        that.destroy();","47","      }).fail(function (jqXHR) {","48","        that.enableForm();","49","        that.showErrors(jqXHR.responseJSON.errors, jqXHR.responseJSON.warnings);","51","    } else {","52","      const data = { templateId: permissionTemplate };","53","      if (this.options.query) {","54","        data.q = this.options.query;","55","      }","56","      if (this.options.filter && this.options.filter !== '__ALL__') {","57","        data.qualifier = this.options.filter;","58","      }","60","      bulkApplyTemplateToProject({ data }).done(function () {","61","        that.options.refresh();","62","        that.destroy();","63","      }).fail(function (jqXHR) {","64","        that.enableForm();","65","        that.showErrors(jqXHR.responseJSON.errors, jqXHR.responseJSON.warnings);","66","      });","67","    }"],"delete":["19","import $ from 'jquery';","22","import { applyTemplateToProject } from '..\/..\/api\/permissions';","41","    const projects = this.options.project ? [this.options.project] : this.options.projects;","42","    const permissionTemplate = this.$('#project-permissions-template').val();","43","    let looper = $.Deferred().resolve();","44","","45","    projects.forEach(function (project) {","46","      looper = looper.then(function () {","47","        return applyTemplateToProject({","48","          data: { projectId: project.id, templateId: permissionTemplate }","49","        });","51","    });","53","    looper.done(function () {","54","      that.options.refresh();","55","      that.destroy();","56","    }).fail(function (jqXHR) {","57","      that.enableForm();","58","      that.showErrors(jqXHR.responseJSON.errors, jqXHR.responseJSON.warnings);","59","    });"]}],"server\/sonar-web\/src\/main\/js\/api\/permissions.js":[{"add":["142","","143","export function bulkApplyTemplateToProject (options) {","144","  const url = window.baseUrl + '\/api\/permissions\/bulk_apply_template';","145","  return request(_.extend({ type: 'POST', url }, options));","146","}"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/project-permissions\/main.js":[{"add":["107","      query: this.state.query,","108","      filter: this.state.filter,","110","      refresh: () => this.requestPermissions(1, this.state.query, this.state.filter)"],"delete":["107","      projects: this.state.projects,","109","      refresh: this.requestPermissions"]}]}},"469af3846a5ca3f78b2b190ec4a2b27e3c7fd11f":{"changes":{"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/component\/ConfigurationRepositoryTest.java":"MODIFY","server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/project\/Project.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/project\/RekeyedProjectTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/webhook\/WebhookQGChangeEventListenerTest.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/component\/ComponentTreeBuilderTest.java":"MODIFY","server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/webhook\/WebhookPayloadFactoryImpl.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/project\/ProjectLifeCycleListenersImplTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/organization\/ws\/DeleteActionTest.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/server\/rule\/RuleTagFormat.java":"MODIFY","sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/views\/ViewsService.java":"MODIFY","server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/issue\/IssueFieldsSetter.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/webhook\/WebhookQGChangeEventListener.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/component\/ComponentService.java":"MODIFY","server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/component\/ComponentMapper.xml":"MODIFY","server\/sonar-server-common\/src\/test\/java\/org\/sonar\/server\/webhook\/WebhookPayloadFactoryImplTest.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/ReportPersistComponentsStepTest.java":"MODIFY","sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/server\/rule\/RuleTagFormatTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/organization\/ws\/DeleteAction.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/component\/ComponentDaoTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/component\/ComponentDao.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/component\/ComponentMapper.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/webhook\/WebhookPostTaskTest.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/component\/BranchPersisterImplTest.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/PersistLiveMeasuresStepTest.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/measure\/PostMeasuresComputationChecksStepTest.java":"MODIFY","server\/sonar-server-common\/src\/test\/java\/org\/sonar\/server\/webhook\/ProjectAnalysisTest.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/analysis\/AnalysisMetadataHolderImplTest.java":"MODIFY","sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/views\/SetTagsModeRequest.java":"ADD","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/LoadReportAnalysisMetadataHolderStep.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/component\/ComponentServiceUpdateKeyTest.java":"MODIFY","server\/sonar-server-common\/src\/test\/java\/org\/sonar\/server\/project\/ProjectTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SetTagsActionTest.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/BuildComponentTreeStepTest.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/QualityGateEventsStepTest.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/webhook\/WebhookPostTask.java":"MODIFY","server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/webhook\/Project.java":"ADD","server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/webhook\/ProjectAnalysis.java":"MODIFY"},"diff":{"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/component\/ConfigurationRepositoryTest.java":[{"add":["39","import static org.sonar.db.component.ComponentTesting.newPrivateProjectDto;","40","import static org.sonar.db.organization.OrganizationTesting.newOrganizationDto;","44","  private static Project PROJECT = Project.from(newPrivateProjectDto(newOrganizationDto()));","75","    analysisMetadataHolder.setProject(Project.from(project));","100","    analysisMetadataHolder.setProject(Project.from(project));","110","    analysisMetadataHolder.setProject(Project.from(project));","127","    analysisMetadataHolder","128","      .setProject(Project.from(project))","129","      .setBranch(branch);"],"delete":["42","  private static Project PROJECT = new Project(\"UUID\", \"KEY\", \"NAME\");","73","    analysisMetadataHolder.setProject(new Project(project.uuid(), project.getDbKey(), project.name()));","98","    analysisMetadataHolder.setProject(new Project(project.uuid(), project.getDbKey(), project.name()));","108","    analysisMetadataHolder.setProject(new Project(project.uuid(), project.getDbKey(), project.name()));","125","    analysisMetadataHolder.setProject(new Project(project.uuid(), project.getDbKey(), project.name())).setBranch(branch);"]}],"server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/project\/Project.java":[{"add":["21","import java.util.List;","34","  private final List<String> tags;","36","  public Project(String uuid, String key, String name, @Nullable String description, List<String> tags) {","41","    this.tags = tags;","45","    return new Project(project.uuid(), project.getKey(), project.name(), project.description(), project.getTags());","70","  public List<String> getTags() {","71","    return tags;","72","  }","73",""],"delete":["34","  public Project(String uuid, String key, String name) {","35","    this(uuid, key, name, null);","36","  }","37","","38","  public Project(String uuid, String key, String name, @Nullable String description) {","46","    return new Project(project.uuid(), project.getDbKey(), project.name(), project.description());"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/project\/RekeyedProjectTest.java":[{"add":["25","import static java.util.Collections.emptyList;","28","import static org.sonar.db.component.ComponentTesting.newPrivateProjectDto;","29","import static org.sonar.db.organization.OrganizationTesting.newOrganizationDto;","91","    Project project = new Project(\"A\", \"B\", \"C\", \"D\", emptyList());","99","    return Project.from(newPrivateProjectDto(newOrganizationDto()));"],"delete":["88","    Project project = new Project(\"A\", \"B\", \"C\", \"D\");","96","    return new Project(randomAlphanumeric(3), randomAlphanumeric(4), randomAlphanumeric(5));"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/webhook\/WebhookQGChangeEventListenerTest.java":[{"add":["217","    return new Object[][] {"],"delete":["51","import org.sonar.server.project.Project;","218","    return new Object[][]{"]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/component\/ComponentTreeBuilderTest.java":[{"add":["33","import org.sonar.ce.task.projectanalysis.analysis.Branch;","44","import static org.sonar.ce.task.projectanalysis.component.ComponentVisitor.Order.PRE_ORDER;","45","import static org.sonar.db.component.ComponentTesting.newPrivateProjectDto;","46","import static org.sonar.db.organization.OrganizationTesting.newOrganizationDto;","47","import static org.sonar.scanner.protocol.output.ScannerReport.Component.newBuilder;","70","  private Project projectInDb = Project.from(newPrivateProjectDto(newOrganizationDto(), UUID_SUPPLIER.apply(\"K1\")).setDbKey(\"K1\").setDescription(null));"],"delete":["36","import org.sonar.ce.task.projectanalysis.analysis.Branch;","49","import static org.sonar.scanner.protocol.output.ScannerReport.Component.newBuilder;","50","import static org.sonar.ce.task.projectanalysis.component.ComponentVisitor.Order.PRE_ORDER;","68","  private Project projectInDb = new Project(UUID_SUPPLIER.apply(\"K1\"), \"K1\", \"theProjectName\");"]}],"server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/webhook\/WebhookPayloadFactoryImpl.java":[{"add":[],"delete":["33","import org.sonar.server.project.Project;"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/project\/ProjectLifeCycleListenersImplTest.java":[{"add":["42","import static org.sonar.db.component.ComponentTesting.newPrivateProjectDto;","43","import static org.sonar.db.organization.OrganizationTesting.newOrganizationDto;","300","    return Project.from(newPrivateProjectDto(newOrganizationDto()));","303","  private static int counter = 3_989;","304","","307","    Project project = Project.from(newPrivateProjectDto(newOrganizationDto()));"],"delete":["205","","298","  private static int counter = 3_989;","299","","301","    int base = counter++;","302","    return new Project(base + \"_uuid\", base + \"_key\", base + \"_name\");","307","    Project project = new Project(base + \"_uuid\", base + \"_key\", base + \"_name\");"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/organization\/ws\/DeleteActionTest.java":[{"add":[],"delete":["356","      ComponentDto view = db.components().insertView(organization);","357","      ComponentDto subview1 = db.components().insertComponent(ComponentTesting.newSubView(view, \"v1\" + i, \"ksv1\" + i));","358","      ComponentDto subview2 = db.components().insertComponent(ComponentTesting.newSubView(subview1, \"v2\" + i, \"ksv2\" + i));","359","      ComponentDto application = db.components().insertApplication(organization);","360","      ComponentDto projectCopy = db.components().insertComponent(ComponentTesting.newProjectCopy(\"pc1\" + i, project, subview1));","361","      ComponentDto projectCopyForApplication = db.components().insertComponent(ComponentTesting.newProjectCopy(\"pc2\" + i, project, application));"]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/server\/rule\/RuleTagFormat.java":[{"add":["21","import java.util.Collection;","22","import java.util.Objects;","23","import java.util.Set;","26","import static java.lang.String.format;","27","import static java.lang.String.join;","28","import static java.util.Locale.ENGLISH;","29","import static java.util.stream.Collectors.toSet;","30","","39","  private static final String ERROR_MESSAGE_SUFFIX = \"Rule tags accept only the characters: a-z, 0-9, '+', '-', '#', '.'\";","40","","53","      throw new IllegalArgumentException(format(\"Tag '%s' is invalid. %s\", tag, ERROR_MESSAGE_SUFFIX));","57","","58","  public static Set<String> validate(Collection<String> tags) {","59","    Set<String> sanitizedTags = tags.stream()","60","      .filter(Objects::nonNull)","61","      .filter(tag -> !tag.isEmpty())","62","      .map(tag -> tag.toLowerCase(ENGLISH))","63","      .collect(toSet());","64","    Set<String> invalidTags = sanitizedTags.stream()","65","      .filter(tag -> !isValid(tag))","66","      .collect(toSet());","67","    if (invalidTags.isEmpty()) {","68","      return sanitizedTags;","69","    }","70","    throw new IllegalArgumentException(format(\"Tags '%s' are invalid. %s\", join(\", \", invalidTags), ERROR_MESSAGE_SUFFIX));","71","  }","72",""],"delete":["43","      throw new IllegalArgumentException(String.format(\"Tag '%s' is invalid. Rule tags accept only the characters: a-z, 0-9, '+', '-', '#', '.'\", tag));"]}],"sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/views\/ViewsService.java":[{"add":["21","import java.util.stream.Collectors;","366","   * This is a POST request.","367","   * @see <a href=\"https:\/\/next.sonarqube.com\/sonarqube\/web_api\/api\/views\/set_tags_mode\">Further information about this action online (including a response example)<\/a>","368","   * @since 7.4","369","   *\/","370","  public void setTagsMode(SetTagsModeRequest request) {","371","    call(","372","      new PostRequest(path(\"set_tags_mode\"))","373","        .setParam(\"portfolio\", request.getPortfolio())","374","        .setParam(\"tags\", request.getTags() == null ? null : request.getTags().stream().collect(Collectors.joining(\",\")))","375","        .setMediaType(MediaTypes.JSON)","376","      ).content();","377","  }","378","","379","  \/**","380","   *","381","   * This is part of the internal API."],"delete":[]}],"server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/issue\/IssueFieldsSetter.java":[{"add":["318","    Set<String> newTags = RuleTagFormat.validate(tags);"],"delete":["26","import java.util.Locale;","38","import org.sonar.core.util.stream.MoreCollectors;","320","    Set<String> newTags = tags.stream()","321","      .filter(Objects::nonNull)","322","      .filter(tag -> !tag.isEmpty())","323","      .map(tag -> RuleTagFormat.validate(tag.toLowerCase(Locale.ENGLISH)))","324","      .collect(MoreCollectors.toSet());"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/webhook\/WebhookQGChangeEventListener.java":[{"add":[],"delete":["34","import org.sonar.server.project.Project;"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/component\/ComponentService.java":[{"add":["39","import static java.util.Collections.emptyList;","67","      Project newProject = new Project(projectOrModule.uuid(), newKey, projectOrModule.name(), projectOrModule.description(), projectOrModule.getTags());","99","    Project project = new Project(resource.getUuid(), resource.getKey(), resource.getName(), resource.getDescription(), emptyList());"],"delete":["66","      Project newProject = new Project(projectOrModule.uuid(), newKey, projectOrModule.name(), projectOrModule.description());","98","    Project project = new Project(resource.getUuid(), resource.getKey(), resource.getName(), resource.getDescription());"]}],"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/component\/ComponentMapper.xml":[{"add":["248","  <select id=\"selectProjectsByOrganization\" resultType=\"Component\">","253","      p.enabled=${_true}","254","      and p.scope='PRJ'","255","      and p.qualifier='TRK'"],"delete":["248","  <select id=\"selectAllRootsByOrganization\" resultType=\"Component\">","253","      p.scope='PRJ'","254","    and (p.qualifier='TRK' or p.qualifier='VW' or p.qualifier='APP')"]}],"server\/sonar-server-common\/src\/test\/java\/org\/sonar\/server\/webhook\/WebhookPayloadFactoryImplTest.java":[{"add":[],"delete":["29","import org.sonar.server.project.Project;"]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/ReportPersistComponentsStepTest.java":[{"add":["897","    analysisMetadataHolder.setProject(Project.from(dto));","904","    analysisMetadataHolder.setProject(Project.from(dto));"],"delete":["897","    analysisMetadataHolder.setProject(new Project(dto.uuid(), dto.getDbKey(), dto.name()));","904","    analysisMetadataHolder.setProject(new Project(dto.uuid(), dto.getDbKey(), dto.name()));"]}],"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/server\/rule\/RuleTagFormatTest.java":[{"add":["21","import java.util.Collections;","24","import static java.util.Arrays.asList;","25","import static java.util.Collections.singletonList;","30","","63","","64","  @Test","65","  public void validate_and_sanitize_collection_of_tags() {","66","    assertThat(RuleTagFormat.validate(asList(\"style\", \"coding-style\", \"\"))).containsExactly(\"coding-style\", \"style\");","67","    assertThat(RuleTagFormat.validate(asList(\"style\", \"coding-style\", null))).containsExactly(\"coding-style\", \"style\");","68","    assertThat(RuleTagFormat.validate(asList(\"style\", \"style\", null))).containsExactly(\"style\");","69","    assertThat(RuleTagFormat.validate(singletonList(\"Uppercase\"))).containsExactly(\"uppercase\");","70","    assertThat(RuleTagFormat.validate(Collections.emptyList())).isEmpty();","71","  }","72","","73","  @Test","74","  public void fail_to_validate_collection_of_tags() {","75","    try {","76","      RuleTagFormat.validate(asList(\"coding style\", \"Stylé\", \"valid\"));","77","      fail();","78","    } catch (IllegalArgumentException e) {","79","      assertThat(e).hasMessage(\"Tags 'coding style, stylé' are invalid. Rule tags accept only the characters: a-z, 0-9, '+', '-', '#', '.'\");","80","    }","81","  }"],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/organization\/ws\/DeleteAction.java":[{"add":["130","    List<ComponentDto> roots = dbClient.componentDao().selectProjectsByOrganization(dbSession, organization.getUuid());"],"delete":["130","    List<ComponentDto> roots = dbClient.componentDao().selectAllRootsByOrganization(dbSession, organization.getUuid());"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/component\/ComponentDaoTest.java":[{"add":["701","    return new Object[][] {","930","    return new Object[][] {","1010","  public void select_projects_by_organization() {","1022","    assertThat(underTest.selectProjectsByOrganization(dbSession, organization.getUuid()))","1024","      .containsExactlyInAnyOrder(project1.uuid(), project2.uuid())","1025","      .doesNotContain(view.uuid(), application.uuid());","1029","  public void select_projects_by_organization_does_not_return_branches() {","1034","    assertThat(underTest.selectProjectsByOrganization(dbSession, organization.getUuid()))","1185","","1186","  @Test"],"delete":["701","    return new Object[][]{","930","    return new Object[][]{","1010","  public void select_all_roots_by_organization() {","1022","    assertThat(underTest.selectAllRootsByOrganization(dbSession, organization.getUuid()))","1024","      .containsExactlyInAnyOrder(project1.uuid(), project2.uuid(), view.uuid(), application.uuid());","1028","  public void select_all_roots_by_organization_does_not_return_branches() {","1033","    assertThat(underTest.selectAllRootsByOrganization(dbSession, organization.getUuid()))","1166","","1185","    @Test"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/component\/ComponentDao.java":[{"add":["301","   * Select all projects for a given organization.","305","  public List<ComponentDto> selectProjectsByOrganization(DbSession dbSession, String organizationUuid) {","306","    return mapper(dbSession).selectProjectsByOrganization(organizationUuid);"],"delete":["301","   * Select all root components (projects and views), including disabled ones, for a given organization.","305","  public List<ComponentDto> selectAllRootsByOrganization(DbSession dbSession, String organizationUuid) {","306","    return mapper(dbSession).selectAllRootsByOrganization(organizationUuid);"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/component\/ComponentMapper.java":[{"add":["89","  List<ComponentDto> selectProjectsByOrganization(@Param(\"organizationUuid\") String organizationUuid);"],"delete":["89","  List<ComponentDto> selectAllRootsByOrganization(@Param(\"organizationUuid\") String organizationUuid);"]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/webhook\/WebhookPostTaskTest.java":[{"add":["160","      new org.sonar.server.webhook.Project(project.getUuid(), project.getKey(), project.getName()),"],"delete":["160","      new org.sonar.server.project.Project(project.getUuid(), project.getKey(), project.getName()),"]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/component\/BranchPersisterImplTest.java":[{"add":["73","    analysisMetadataHolder.setProject(Project.from(dto));","94","    analysisMetadataHolder.setProject(Project.from(dto));"],"delete":["73","    analysisMetadataHolder.setProject(new Project(dto.uuid(), dto.getDbKey(), dto.name()));","94","    analysisMetadataHolder.setProject(new Project(dto.uuid(), dto.getKey(), dto.name(), dto.description()));"]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/PersistLiveMeasuresStepTest.java":[{"add":["44","import static java.util.Collections.emptyList;","251","    analysisMetadataHolder.setProject(new Project(project.getUuid(), project.getKey(), project.getName(), project.getDescription(), emptyList()));","276","    analysisMetadataHolder.setProject(Project.from(portfolioDto));"],"delete":["250","    analysisMetadataHolder.setProject(new Project(project.getUuid(), project.getKey(), project.getName()));","275","    analysisMetadataHolder.setProject(new Project(portfolioDto.uuid(), portfolioDto.getDbKey(), portfolioDto.name()));"]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/measure\/PostMeasuresComputationChecksStepTest.java":[{"add":["44","import static org.sonar.db.component.ComponentTesting.newPrivateProjectDto;","45","import static org.sonar.db.organization.OrganizationTesting.newOrganizationDto;","74","    Project project = Project.from(newPrivateProjectDto(newOrganizationDto()));","75","    analysisMetadataHolder.setProject(project);","82","    assertThat(contextArgumentCaptor.getValue().getProjectUuid()).isEqualTo(project.getUuid());"],"delete":["72","    analysisMetadataHolder.setProject(new Project(\"project_uuid\", \"project_key\", \"project_name\"));","79","    assertThat(contextArgumentCaptor.getValue().getProjectUuid()).isEqualTo(\"project_uuid\");"]}],"server\/sonar-server-common\/src\/test\/java\/org\/sonar\/server\/webhook\/ProjectAnalysisTest.java":[{"add":["150","      \"ProjectAnalysis{project=Project{uuid='uuid', key='key', name='name'}, ceTask=CeTask{id='id', status=SUCCESS}, branch=Branch{main=true, name='name', type=SHORT}, qualityGate=EvaluatedQualityGate{qualityGate=QualityGate{id=id, name='name', conditions=[]}, status=WARN, evaluatedConditions=[]}, updatedAt=1, properties={a=b}, analysis=Analysis{uuid='analysis_uuid', date=1500}}\");"],"delete":["27","import org.sonar.server.project.Project;","151","      \"ProjectAnalysis{project=Project{uuid='uuid', key='key', name='name', description=null}, ceTask=CeTask{id='id', status=SUCCESS}, branch=Branch{main=true, name='name', type=SHORT}, qualityGate=EvaluatedQualityGate{qualityGate=QualityGate{id=id, name='name', conditions=[]}, status=WARN, evaluatedConditions=[]}, updatedAt=1, properties={a=b}, analysis=Analysis{uuid='analysis_uuid', date=1500}}\");"]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/analysis\/AnalysisMetadataHolderImplTest.java":[{"add":["32","import static org.sonar.db.component.ComponentTesting.newPrivateProjectDto;","33","import static org.sonar.db.organization.OrganizationTesting.newOrganizationDto;","278","    Project project = Project.from(newPrivateProjectDto(newOrganizationDto()));","295","    underTest.setProject(Project.from(newPrivateProjectDto(newOrganizationDto())));","299","","300","    underTest.setProject(Project.from(newPrivateProjectDto(newOrganizationDto())));"],"delete":["276","    Project project = new Project(\"U\", \"K\", \"N\");","293","    underTest.setProject(new Project(\"U\", \"K\", \"N\"));","297","    underTest.setProject(new Project(\"U\", \"K\", \"N\"));"]}],"sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/views\/SetTagsModeRequest.java":[{"add":[],"delete":[]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/LoadReportAnalysisMetadataHolderStep.java":[{"add":["113","    analysisMetadata.setProject(Project.from(dto));"],"delete":["113","    analysisMetadata.setProject(new Project(dto.uuid(), dto.getDbKey(), dto.name(), dto.description()));"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/component\/ComponentServiceUpdateKeyTest.java":[{"add":["42","import static java.util.Collections.emptyList;","199","      new RekeyedProject(new Project(project.uuid(), \"your_project\", project.name(), project.uuid(), emptyList()), \"my_project\")","216","      new RekeyedProject(new Project(project.uuid(), \"your_project\", project.name(), project.uuid(), emptyList()), \"my_project\")"],"delete":["198","      new RekeyedProject(new Project(project.uuid(), \"your_project\", project.name(), project.uuid()), \"my_project\")","215","      new RekeyedProject(new Project(project.uuid(), \"your_project\", project.name(), project.uuid()), \"my_project\")"]}],"server\/sonar-server-common\/src\/test\/java\/org\/sonar\/server\/project\/ProjectTest.java":[{"add":["23","import static java.util.Collections.emptyList;","29","    Project project1 = new Project(\"U1\", \"K1\", \"N1\", null, emptyList());","30","    Project project2 = new Project(\"U1\", \"K1\", \"N1\", null, emptyList());","44","    Project project1 = new Project(\"U1\", \"K1\", \"N1\", \"D1\", emptyList());","58","    Project project1 = new Project(\"U1\", \"K1\", \"N1\", null, emptyList());","59","    Project project2 = new Project(\"U1\", \"K1\", \"N1\", \"D1\", emptyList());","64","    assertThat(project1).isEqualTo(new Project(\"U1\", \"K1\", \"N1\", null, emptyList()));","65","    assertThat(project1).isNotEqualTo(new Project(\"U1\", \"K2\", \"N1\", null, emptyList()));","66","    assertThat(project1).isNotEqualTo(new Project(\"U1\", \"K1\", \"N2\", null, emptyList()));","72","    assertThat(project1.hashCode()).isEqualTo(new Project(\"U1\", \"K1\", \"N1\", null, emptyList()).hashCode());","73","    assertThat(project1.hashCode()).isNotEqualTo(new Project(\"U1\", \"K2\", \"N1\", null, emptyList()).hashCode());","74","    assertThat(project1.hashCode()).isNotEqualTo(new Project(\"U1\", \"K1\", \"N2\", null, emptyList()).hashCode());"],"delete":["28","    Project project1 = new Project(\"U1\", \"K1\", \"N1\");","29","    Project project2 = new Project(\"U1\", \"K1\", \"N1\", null);","43","    Project project1 = new Project(\"U1\", \"K1\", \"N1\", \"D1\");","57","    Project project1 = new Project(\"U1\", \"K1\", \"N1\");","58","    Project project2 = new Project(\"U1\", \"K1\", \"N1\", \"D1\");","63","    assertThat(project1).isEqualTo(new Project(\"U1\", \"K1\", \"N1\", null));","64","    assertThat(project1).isNotEqualTo(new Project(\"U1\", \"K2\", \"N1\", null));","65","    assertThat(project1).isNotEqualTo(new Project(\"U1\", \"K1\", \"N2\", null));","71","    assertThat(project1.hashCode()).isEqualTo(new Project(\"U1\", \"K1\", \"N1\", null).hashCode());","72","    assertThat(project1.hashCode()).isNotEqualTo(new Project(\"U1\", \"K2\", \"N1\", null).hashCode());","73","    assertThat(project1.hashCode()).isNotEqualTo(new Project(\"U1\", \"K1\", \"N2\", null).hashCode());"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SetTagsActionTest.java":[{"add":["48","import org.sonar.server.issue.WebIssueStorage;","180","  public void fail_when_tag_use_bad_format() {","185","    expectedException.expectMessage(\"Tags 'pol op' are invalid. Rule tags accept only the characters: a-z, 0-9, '+', '-', '#', '.'\");"],"delete":["46","import org.sonar.server.issue.WebIssueStorage;","180","  public void fail_when_bad_tag_format() {","185","    expectedException.expectMessage(\"Tag 'pol op' is invalid. Rule tags accept only the characters: a-z, 0-9, '+', '-', '#', '.'\");"]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/BuildComponentTreeStepTest.java":[{"add":["61","import static org.sonar.db.organization.OrganizationTesting.newOrganizationDto;","217","      .setProject(Project.from(newPrivateProjectDto(newOrganizationDto()).setDbKey(REPORT_PROJECT_KEY)))","259","      .setProject(Project.from(newPrivateProjectDto(newOrganizationDto()).setDbKey(REPORT_PROJECT_KEY)))","279","      .setProject(Project.from(newPrivateProjectDto(newOrganizationDto()).setDbKey(REPORT_PROJECT_KEY)))","477","      .setProject(Project.from(newPrivateProjectDto(newOrganizationDto()).setDbKey(REPORT_PROJECT_KEY)));"],"delete":["216","      .setProject(new Project(\"U1\", REPORT_PROJECT_KEY, REPORT_PROJECT_KEY))","258","      .setProject(new Project(\"U1\", REPORT_PROJECT_KEY, REPORT_PROJECT_KEY))","278","      .setProject(new Project(\"U1\", REPORT_PROJECT_KEY, REPORT_PROJECT_KEY))","476","      .setProject(new Project(\"U1\", REPORT_PROJECT_KEY, REPORT_PROJECT_KEY));"]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/QualityGateEventsStepTest.java":[{"add":["46","import static java.util.Collections.emptyList;","91","    analysisMetadataHolder.setProject(new Project(PROJECT_COMPONENT.getUuid(), PROJECT_COMPONENT.getKey(), PROJECT_COMPONENT.getName(), PROJECT_COMPONENT.getDescription(), emptyList()));"],"delete":["90","    analysisMetadataHolder.setProject(new Project(PROJECT_COMPONENT.getUuid(), PROJECT_COMPONENT.getKey(), PROJECT_COMPONENT.getName()));"]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/webhook\/WebhookPostTask.java":[{"add":["33","import org.sonar.server.webhook.Project;","82","    Project project = new Project(projectAnalysis.getProject().getUuid(), projectAnalysis.getProject().getKey(), projectAnalysis.getProject().getName());"],"delete":["27","import org.sonar.server.project.Project;","59","    Project project = new Project(projectAnalysis.getProject().getUuid(), projectAnalysis.getProject().getKey(), projectAnalysis.getProject().getName());"]}],"server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/webhook\/Project.java":[{"add":[],"delete":[]}],"server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/webhook\/ProjectAnalysis.java":[{"add":[],"delete":["25","import org.sonar.server.project.Project;"]}]}},"0a21ddb780241a6b0ad1ca4394840e479658943c":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/qualitymodel\/RatingSettings.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/qualitymodel\/RatingSettingsTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/qualitymodel\/RatingSettings.java":[{"add":["27","import org.sonar.api.utils.MessageException;","53","      String languageKey = settings.getString(languagePropertyKey);","54","      if (languageKey == null) {","55","        throw MessageException.of(\"Technical debt configuration is corrupted. At least one language specific parameter has no Language key. \" +","56","          \"Contact your administrator to update this configuration in the global administration section of SonarQube.\");","57","      }","58","      builder.put(languageKey, LanguageSpecificConfiguration.create(settings, languageConfigIndex));"],"delete":["52","      builder.put(settings.getString(languagePropertyKey), LanguageSpecificConfiguration.create(settings, languageConfigIndex));"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/qualitymodel\/RatingSettingsTest.java":[{"add":["28","import org.sonar.api.utils.MessageException;","31","import static org.sonar.api.CoreProperties.DEVELOPMENT_COST;","32","import static org.sonar.api.CoreProperties.LANGUAGE_SPECIFIC_PARAMETERS;","33","import static org.sonar.api.CoreProperties.LANGUAGE_SPECIFIC_PARAMETERS_LANGUAGE_KEY;","34","import static org.sonar.api.CoreProperties.LANGUAGE_SPECIFIC_PARAMETERS_MAN_DAYS_KEY;","63","    settings.setProperty(DEVELOPMENT_COST, \"50\");","75","    settings.setProperty(LANGUAGE_SPECIFIC_PARAMETERS, \"0,1\");","76","    settings.setProperty(LANGUAGE_SPECIFIC_PARAMETERS + \".\" + \"0\" + \".\" + LANGUAGE_SPECIFIC_PARAMETERS_LANGUAGE_KEY, aLanguage);","77","    settings.setProperty(LANGUAGE_SPECIFIC_PARAMETERS + \".\" + \"0\" + \".\" + LANGUAGE_SPECIFIC_PARAMETERS_MAN_DAYS_KEY, \"30\");","78","    settings.setProperty(LANGUAGE_SPECIFIC_PARAMETERS + \".\" + \"0\" + \".\" + CoreProperties.LANGUAGE_SPECIFIC_PARAMETERS_SIZE_METRIC_KEY, CoreMetrics.NCLOC_KEY);","79","    settings.setProperty(LANGUAGE_SPECIFIC_PARAMETERS + \".\" + \"1\" + \".\" + LANGUAGE_SPECIFIC_PARAMETERS_LANGUAGE_KEY, anotherLanguage);","80","    settings.setProperty(LANGUAGE_SPECIFIC_PARAMETERS + \".\" + \"1\" + \".\" + LANGUAGE_SPECIFIC_PARAMETERS_MAN_DAYS_KEY, \"40\");","81","    settings.setProperty(LANGUAGE_SPECIFIC_PARAMETERS + \".\" + \"1\" + \".\" + CoreProperties.LANGUAGE_SPECIFIC_PARAMETERS_SIZE_METRIC_KEY, CoreMetrics.COMPLEXITY_KEY);","91","    RatingSettings configurationLoader = new RatingSettings(settings);","103","    settings.setProperty(DEVELOPMENT_COST, \"30\");","104","    settings.setProperty(LANGUAGE_SPECIFIC_PARAMETERS, \"0\");","105","    settings.setProperty(LANGUAGE_SPECIFIC_PARAMETERS + \".\" + \"0\" + \".\" + LANGUAGE_SPECIFIC_PARAMETERS_LANGUAGE_KEY, aLanguage);","106","    settings.setProperty(LANGUAGE_SPECIFIC_PARAMETERS + \".\" + \"0\" + \".\" + LANGUAGE_SPECIFIC_PARAMETERS_MAN_DAYS_KEY, \"40\");","112","","113","  @Test","114","  public void constructor_fails_with_ME_if_language_specific_parameter_language_is_missing() {","115","    settings.setProperty(DEVELOPMENT_COST, \"30\");","116","    settings.setProperty(LANGUAGE_SPECIFIC_PARAMETERS, \"0\");","117","    settings.setProperty(LANGUAGE_SPECIFIC_PARAMETERS + \".\" + \"0\" + \".\" + LANGUAGE_SPECIFIC_PARAMETERS_MAN_DAYS_KEY, \"40\");","118","","119","    throwable.expect(MessageException.class);","120","    throwable.expectMessage(\"Technical debt configuration is corrupted. At least one language specific parameter has no Language key. \" +","121","      \"Contact your administrator to update this configuration in the global administration section of SonarQube.\");","122","","123","    new RatingSettings(settings);","124","  }"],"delete":["58","    settings.setProperty(CoreProperties.DEVELOPMENT_COST, \"50\");","70","    settings.setProperty(CoreProperties.LANGUAGE_SPECIFIC_PARAMETERS, \"0,1\");","71","    settings.setProperty(CoreProperties.LANGUAGE_SPECIFIC_PARAMETERS + \".\" + \"0\" + \".\" + CoreProperties.LANGUAGE_SPECIFIC_PARAMETERS_LANGUAGE_KEY, aLanguage);","72","    settings.setProperty(CoreProperties.LANGUAGE_SPECIFIC_PARAMETERS + \".\" + \"0\" + \".\" + CoreProperties.LANGUAGE_SPECIFIC_PARAMETERS_MAN_DAYS_KEY, \"30\");","73","    settings.setProperty(CoreProperties.LANGUAGE_SPECIFIC_PARAMETERS + \".\" + \"0\" + \".\" + CoreProperties.LANGUAGE_SPECIFIC_PARAMETERS_SIZE_METRIC_KEY, CoreMetrics.NCLOC_KEY);","74","    settings.setProperty(CoreProperties.LANGUAGE_SPECIFIC_PARAMETERS + \".\" + \"1\" + \".\" + CoreProperties.LANGUAGE_SPECIFIC_PARAMETERS_LANGUAGE_KEY, anotherLanguage);","75","    settings.setProperty(CoreProperties.LANGUAGE_SPECIFIC_PARAMETERS + \".\" + \"1\" + \".\" + CoreProperties.LANGUAGE_SPECIFIC_PARAMETERS_MAN_DAYS_KEY, \"40\");","76","    settings.setProperty(CoreProperties.LANGUAGE_SPECIFIC_PARAMETERS + \".\" + \"1\" + \".\" + CoreProperties.LANGUAGE_SPECIFIC_PARAMETERS_SIZE_METRIC_KEY, CoreMetrics.COMPLEXITY_KEY);","89","    RatingSettings configurationLoader = new RatingSettings(settings);","98","    settings.setProperty(CoreProperties.DEVELOPMENT_COST, \"30\");","99","    settings.setProperty(CoreProperties.LANGUAGE_SPECIFIC_PARAMETERS, \"0\");","100","    settings.setProperty(CoreProperties.LANGUAGE_SPECIFIC_PARAMETERS + \".\" + \"0\" + \".\" + CoreProperties.LANGUAGE_SPECIFIC_PARAMETERS_LANGUAGE_KEY, aLanguage);","101","    settings.setProperty(CoreProperties.LANGUAGE_SPECIFIC_PARAMETERS + \".\" + \"0\" + \".\" + CoreProperties.LANGUAGE_SPECIFIC_PARAMETERS_MAN_DAYS_KEY, \"40\");"]}]}},"0a1dc2146dd4b142d044c0f85634869410666ed3":{"changes":{"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v64\/SupportPrivateProjectInDefaultPermissionTemplateTest.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v64\/SupportPrivateProjectInDefaultPermissionTemplate.java":"MODIFY"},"diff":{"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v64\/SupportPrivateProjectInDefaultPermissionTemplateTest.java":[{"add":["36","import static org.assertj.core.api.Assertions.tuple;","50","  private SupportPrivateProjectInDefaultPermissionTemplate underTest = new SupportPrivateProjectInDefaultPermissionTemplate(db.database(),","51","    new DefaultOrganizationUuidProviderImpl());","111","  public void execute_ignores_default_permission_template_for_view_of_default_organization_if_it_does_not_exist_and_removes_the_reference() throws SQLException {","113","    IdAndUuid projectDefPermTemplate = insertPermissionTemplate(DEFAULT_ORGANIZATION_UUID);","114","    setupDefaultOrganization(groupId, projectDefPermTemplate.uuid, \"fooBar\");","117","","118","    assertThat(","119","      db.select(\"select default_perm_template_project as \\\"project\\\", default_perm_template_view as \\\"view\\\" from organizations where uuid='\" + DEFAULT_ORGANIZATION_UUID + \"'\"))","120","        .extracting((row) -> row.get(\"project\"), (row) -> row.get(\"view\"))","121","        .containsOnly(tuple(projectDefPermTemplate.uuid, null));"],"delete":["49","  private SupportPrivateProjectInDefaultPermissionTemplate underTest = new SupportPrivateProjectInDefaultPermissionTemplate(db.database(), new DefaultOrganizationUuidProviderImpl());","109","  public void execute_fails_with_ISE_when_default_permission_template_for_projects_of_default_organization_does_not_exist() throws SQLException {","111","    setupDefaultOrganization(groupId, \"foBar2000\", \"pt2\");","112","","113","    expectedException.expect(IllegalStateException.class);","114","    expectedException.expectMessage(\"Permission template with uuid foBar2000 not found\");"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v64\/SupportPrivateProjectInDefaultPermissionTemplate.java":[{"add":["27","import org.sonar.api.utils.log.Loggers;","101","    Integer projectTemplateId = getPermTemplateId(context, rawProperties.projectUuid);","102","    Integer viewTemplateId = getViewTemplateIdOrClearReference(context, rawProperties.viewUuid, defaultOrganizationUuid);","105","      projectTemplateId,","106","      viewTemplateId);","114","    List<Integer> ids = getTemplateIds(context, permissionTemplateUuid);","120","  @CheckForNull","121","  private static Integer getViewTemplateIdOrClearReference(Context context, @Nullable String permissionTemplateUuid,","122","    String defaultOrganizationUuid) throws SQLException {","123","    if (permissionTemplateUuid == null) {","124","      return null;","125","    }","126","    List<Integer> ids = getTemplateIds(context, permissionTemplateUuid);","127","    if (ids.isEmpty()) {","128","      clearViewTemplateReference(context, defaultOrganizationUuid);","129","      return null;","130","    }","131","    checkState(ids.size() == 1, \"Multiple permission templates found with uuid %s\", permissionTemplateUuid);","132","    return ids.iterator().next();","133","  }","134","","135","  private static void clearViewTemplateReference(Context context, String defaultOrganizationUuid) throws SQLException {","136","    context.prepareUpsert(\"update organizations set default_perm_template_view = null where uuid=?\")","137","      .setString(1, defaultOrganizationUuid)","138","      .execute()","139","      .commit();","140","    Loggers.get(SupportPrivateProjectInDefaultPermissionTemplate.class)","141","      .info(\"Permission template with uuid %s referenced as default permission template for view does not exist. Reference cleared.\");","142","  }","143","","144","  private static List<Integer> getTemplateIds(Context context, @Nullable String permissionTemplateUuid) throws SQLException {","145","    return context.prepareSelect(\"select id from permission_templates where kee=?\")","146","      .setString(1, permissionTemplateUuid)","147","      .list(row -> row.getInt(1));","148","  }","149",""],"delete":["102","      getPermTemplateId(context, rawProperties.projectUuid),","103","      getPermTemplateId(context, rawProperties.viewUuid));","111","    List<Integer> ids = context.prepareSelect(\"select id from permission_templates where kee=?\")","112","      .setString(1, permissionTemplateUuid)","113","      .list(row -> row.getInt(1));"]}]}},"803f745e23dc4ffc4bb232da4ed05c5401c3bd86":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/controller.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/rule\/rule-profiles-view.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/templates\/rule\/coding-rules-rule-profile.hbs":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/controller.js":[{"add":["181","  },","182","","183","  updateActivation(rule, actives) {","184","    const selectedProfile = this.options.app.state.get('query').qprofile;","185","    if (selectedProfile) {","186","      const profile = (actives || []).find(activation => activation.qProfile === selectedProfile);","187","      const listRule = this.app.list.get(rule.id);","188","      if (profile && listRule) {","189","        listRule.set('activation', {","190","          ...listRule.get('activation'),","191","          inherit: profile.inherit,","192","          severity: profile.severity","193","        });","194","      }","195","    }"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/rule\/rule-profiles-view.js":[{"add":["83","      this.options.app.controller.updateActivation(this.model, data.actives);"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/templates\/rule\/coding-rules-rule-profile.hbs":[{"add":["13","        <i class=\"icon-inheritance icon-inheritance-overridden\" title=\"{{tp 'coding_rules.overrides' name parent.name}}\"><\/i>"],"delete":["13","        <i class=\"icon-inheritance\" title=\"{{tp 'coding_rules.overrides' name parent.name}}\"><\/i>"]}]}},"e94172d9ea94c25913b422b332720324275502f1":{"changes":{"server\/sonar-webserver-core\/src\/main\/java\/org\/sonar\/server\/rule\/RegisterRules.java":"MODIFY","server\/sonar-webserver-core\/src\/test\/java\/org\/sonar\/server\/rule\/RegisterRulesTest.java":"MODIFY"},"diff":{"server\/sonar-webserver-core\/src\/main\/java\/org\/sonar\/server\/rule\/RegisterRules.java":[{"add":["171","    Map<RuleKey, RuleDefinitionDto> allRules = dbClient.ruleDao().selectAllDefinitions(dbSession).stream()","178","    return dbClient.ruleDao().selectAllDeprecatedRuleKeys(dbSession).stream()","230","              \"The following deprecated rule keys seem to be referencing a non-existing rule\",","640","      dto.setSystemTags(ruleDef.tags());","641","      changed = true;","642","    }","654","      dto.setSecurityStandards(ruleDef.securityStandards());","655","      changed = true;","656","    }","662","    List<RuleDefinitionDto> customRules = new ArrayList<>();","678","          recorder.updated(customRule);","741","    if (!StringUtils.equals(customRule.getRepositoryKey(), templateRule.getRepositoryKey())) {","742","      customRule.setRepositoryKey(templateRule.getRepositoryKey());","743","      changed = true;","744","    }","815","      lazyToString(() -> String.join(\"\\n\", incorrectRuleKeyMessage)));","857","    list.forEach(t -> {"],"delete":["72","import static com.google.common.collect.Lists.newArrayList;","172","    Map<RuleKey, RuleDefinitionDto> allRules = dbClient.ruleDao().selectAllDefinitions(dbSession)","173","      .stream()","180","    return dbClient.ruleDao().selectAllDeprecatedRuleKeys(dbSession)","181","      .stream()","233","            \"The following deprecated rule keys seem to be referencing a non-existing rule\",","643","        dto.setSystemTags(ruleDef.tags());","644","        \/\/ FIXME this can't be implemented easily with organization support: remove end-user tags that are now declared as system","645","        \/\/ RuleTagHelper.applyTags(dto, ImmutableSet.copyOf(dto.getTags()));","646","        changed = true;","647","      }","659","        dto.setSecurityStandards(ruleDef.securityStandards());","660","        changed = true;","661","      }","667","    List<RuleDefinitionDto> customRules = newArrayList();","815","      lazyToString(() -> incorrectRuleKeyMessage.stream().collect(Collectors.joining(\"\\n\"))));","857","    list.stream().forEach(t -> {"]}],"server\/sonar-webserver-core\/src\/test\/java\/org\/sonar\/server\/rule\/RegisterRulesTest.java":[{"add":["463","  public void update_template_rule_key_should_also_update_custom_rules() {","464","    when(system.now()).thenReturn(DATE1.getTime());","465","    execute(context -> {","466","      NewRepository repo = context.createRepository(\"squid\", \"java\");","467","      repo.createRule(\"rule\")","468","        .setName(\"Name1\")","469","        .setHtmlDescription(\"Description\")","470","        .setTemplate(true);","471","      repo.done();","472","    });","473","","474","    RuleDto rule1 = dbClient.ruleDao().selectOrFailByKey(db.getSession(), defaultOrganization, RuleKey.of(\"squid\", \"rule\"));","475","","476","    \/\/ insert custom rule","477","    dbClient.ruleDao().insert(db.getSession(), new RuleDefinitionDto()","478","      .setRuleKey(RuleKey.of(\"squid\", \"custom\"))","479","      .setLanguage(\"java\")","480","      .setScope(Scope.ALL)","481","      .setTemplateId(rule1.getId())","482","      .setName(\"custom1\"));","483","    db.commit();","484","","485","    \/\/ re-key rule","486","    execute(context -> {","487","      NewRepository repo = context.createRepository(\"java\", \"java\");","488","      repo.createRule(\"rule\")","489","        .setName(\"Name1\")","490","        .setHtmlDescription(\"Description\")","491","        .addDeprecatedRuleKey(\"squid\", \"rule\")","492","        .setTemplate(true);","493","      repo.done();","494","    });","495","","496","    \/\/ template rule and custom rule have been updated","497","    rule1 = dbClient.ruleDao().selectOrFailByKey(db.getSession(), defaultOrganization, RuleKey.of(\"java\", \"rule\"));","498","    RuleDto custom = dbClient.ruleDao().selectOrFailByKey(db.getSession(), defaultOrganization, RuleKey.of(\"java\", \"custom\"));","499","  }","500","","501","  @Test","1098","    verify(metadataIndex).setInitialized(RuleIndexDefinition.TYPE_RULE, true);","1099","    verify(metadataIndex).setInitialized(RuleIndexDefinition.TYPE_RULE_EXTENSION, true);"],"delete":["1059","    verify(metadataIndex).setInitialized(RuleIndexDefinition.TYPE_RULE,true);","1060","    verify(metadataIndex).setInitialized(RuleIndexDefinition.TYPE_RULE_EXTENSION,true);"]}]}},"d4380ccc8fe7783b1b04148c3707e0e93b3bb98e":{"changes":{"tests\/src\/test\/java\/org\/sonarqube\/tests\/ce\/CeTempDirTest.java":"ADD","tests\/src\/test\/java\/org\/sonarqube\/tests\/Category4Suite.java":"MODIFY"},"diff":{"tests\/src\/test\/java\/org\/sonarqube\/tests\/ce\/CeTempDirTest.java":[{"add":[],"delete":[]}],"tests\/src\/test\/java\/org\/sonarqube\/tests\/Category4Suite.java":[{"add":["27","import org.sonarqube.tests.ce.CeTempDirTest;","103","  CeWsTest.class,","104","  CeTempDirTest.class"],"delete":["102","  CeWsTest.class"]}]}},"b6dc9d310b5eeb03eaa1de571f333d47c6b11fcb":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/step\/QualityGateMeasuresStep.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/step\/QualityGateMeasuresStepTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/step\/QualityGateMeasuresStep.java":[{"add":["24","import com.google.common.collect.Multimap;","25","import com.google.common.collect.Ordering;","27","import java.util.Collection;","74","  private static final Ordering<Condition> PERIOD_ORDERING = Ordering.natural().nullsLast()","75","    .onResultOf(ConditionToPeriod.INSTANCE);","171","    Multimap<Metric, Condition> conditionsPerMetric = from(conditions).index(ConditionToMetric.INSTANCE);","172","    for (Map.Entry<Metric, Collection<Condition>> entry : conditionsPerMetric.asMap().entrySet()) {","173","      Metric metric = entry.getKey();","174","      Optional<Measure> measure = measureRepository.getRawMeasure(project, metric);","179","      MetricEvaluationResult metricEvaluationResult = evaluateQualityGate(measure.get(), entry.getValue());","180","      String text = evaluationResultTextConverter.asText(metricEvaluationResult.condition, metricEvaluationResult.evaluationResult);","184","        .setQualityGateStatus(new QualityGateStatus(metricEvaluationResult.evaluationResult.getLevel(), text))","186","      measureRepository.update(project, metric, updatedMeasure);","188","      builder.addEvaluatedCondition(metricEvaluationResult);","192","  private static MetricEvaluationResult evaluateQualityGate(Measure measure, Collection<Condition> conditions) {","193","    ConditionEvaluator conditionEvaluator = new ConditionEvaluator();","194","    MetricEvaluationResult metricEvaluationResult = null;","195","    for (Condition newCondition : PERIOD_ORDERING.immutableSortedCopy(conditions)) {","196","      EvaluationResult newEvaluationResult = conditionEvaluator.evaluate(newCondition, measure);","197","      if (metricEvaluationResult == null || newEvaluationResult.getLevel().ordinal() > metricEvaluationResult.evaluationResult.getLevel().ordinal()) {","198","        metricEvaluationResult = new MetricEvaluationResult(newEvaluationResult, newCondition);","199","      }","200","    }","201","    return metricEvaluationResult;","202","  }","203","","241","    public void addEvaluatedCondition(MetricEvaluationResult metricEvaluationResult) {","242","      Measure.Level level = metricEvaluationResult.evaluationResult.getLevel();","243","      if (Measure.Level.WARN == level && this.globalLevel != Measure.Level.ERROR) {","246","      } else if (Measure.Level.ERROR == level) {","249","      evaluatedConditions.add(","250","        new EvaluatedCondition(metricEvaluationResult.condition, level, metricEvaluationResult.evaluationResult.getValue()));","267","","268","  private static class MetricEvaluationResult {","269","    private final EvaluationResult evaluationResult;","270","    private final Condition condition;","271","","272","    private MetricEvaluationResult(EvaluationResult evaluationResult, Condition condition) {","273","      this.evaluationResult = evaluationResult;","274","      this.condition = condition;","275","    }","276","  }","277","","278","  private enum ConditionToMetric implements Function<Condition, Metric> {","279","    INSTANCE;","280","","281","    @Override","282","    @Nonnull","283","    public Metric apply(@Nonnull Condition input) {","284","      return input.getMetric();","285","    }","286","  }","287","","288","  public enum ConditionToPeriod implements Function<Condition, Integer> {","289","    INSTANCE;","290","","291","    @Override","292","    @Nullable","293","    public Integer apply(@Nonnull Condition input) {","294","      return input.getPeriod();","295","    }","296","  }"],"delete":["166","    for (Condition condition : conditions) {","167","      Optional<Measure> measure = measureRepository.getRawMeasure(project, condition.getMetric());","172","      EvaluationResult evaluationResult = new ConditionEvaluator().evaluate(condition, measure.get());","173","","174","      String text = evaluationResultTextConverter.asText(condition, evaluationResult);","178","        .setQualityGateStatus(new QualityGateStatus(evaluationResult.getLevel(), text))","180","      measureRepository.update(project, condition.getMetric(), updatedMeasure);","182","      builder.addEvaluatedCondition(condition, evaluationResult);","223","    public void addEvaluatedCondition(Condition condition, EvaluationResult evaluationResult) {","224","      if (Measure.Level.WARN == evaluationResult.getLevel() && this.globalLevel != Measure.Level.ERROR) {","227","      } else if (Measure.Level.ERROR == evaluationResult.getLevel()) {","230","      evaluatedConditions.add(new EvaluatedCondition(condition, evaluationResult.getLevel(), evaluationResult.getValue()));"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/step\/QualityGateMeasuresStepTest.java":[{"add":["38","import org.sonar.server.computation.measure.MeasureRepositoryRule;","43","import org.sonar.server.computation.metric.MetricRepositoryRule;","44","import org.sonar.server.computation.period.Period;","59","import static org.sonar.api.measures.CoreMetrics.ALERT_STATUS_KEY;","63","import static org.sonar.server.computation.measure.Measure.newMeasureBuilder;","65","import static org.sonar.server.computation.measure.MeasureVariations.newMeasureVariationsBuilder;","69","  private static final String INT_METRIC_1_KEY = INT_METRIC_1.getKey();","71","  private static final String INT_METRIC_2_KEY = INT_METRIC_2.getKey();","73","  private static final int PROJECT_REF = 1;","74","  private static final ReportComponent PROJECT_COMPONENT = ReportComponent.builder(Component.Type.PROJECT, PROJECT_REF).build();","86","  @Rule","87","  public MetricRepositoryRule metricRepository = new MetricRepositoryRule();","88","  @Rule","89","  public MeasureRepositoryRule measureRepository = MeasureRepositoryRule.create(treeRootHolder, metricRepository);","97","    metricRepository","98","      .add(CoreMetrics.ALERT_STATUS)","99","      .add(CoreMetrics.QUALITY_GATE_DETAILS)","100","      .add(INT_METRIC_1)","101","      .add(INT_METRIC_2);","127","    measureRepository.getAddedRawMeasures(1).isEmpty();","136","    measureRepository.getAddedRawMeasures(PROJECT_COMPONENT).isEmpty();","158","    Optional<Measure> addedRawMeasure = measureRepository.getAddedRawMeasure(PROJECT_COMPONENT, INT_METRIC_1_KEY);","160","    assertThat(addedRawMeasure).isAbsent();","161","    assertThat(getAlertStatusMeasure())","164","    assertThat(getQGDetailsMeasure())","177","    Measure rawMeasure = newMeasureBuilder().create(rawValue, null);","180","    measureRepository.addRawMeasure(PROJECT_REF, INT_METRIC_1_KEY, rawMeasure);","184","    Optional<Measure> addedRawMeasure = measureRepository.getAddedRawMeasure(PROJECT_COMPONENT, INT_METRIC_1_KEY);","186","    assertThat(addedRawMeasure)","189","    assertThat(getAlertStatusMeasure())","192","    assertThat(getQGDetailsMeasure().get())","206","    Measure rawMeasure = newMeasureBuilder().create(rawValue, null);","209","    measureRepository.addRawMeasure(PROJECT_REF, INT_METRIC_1_KEY, rawMeasure);","210","    measureRepository.addRawMeasure(PROJECT_REF, INT_METRIC_2_KEY, rawMeasure);","214","    Optional<Measure> rawMeasure1 = measureRepository.getAddedRawMeasure(PROJECT_REF, INT_METRIC_1_KEY);","215","    Optional<Measure> rawMeasure2 = measureRepository.getAddedRawMeasure(PROJECT_REF, INT_METRIC_2_KEY);","217","    assertThat(rawMeasure1.get())","220","    assertThat(rawMeasure2.get())","223","    assertThat(getAlertStatusMeasure())","227","    assertThat(getQGDetailsMeasure())","244","    Measure rawMeasure = newMeasureBuilder().create(rawValue, null);","247","    measureRepository.addRawMeasure(PROJECT_REF, INT_METRIC_1_KEY, rawMeasure);","248","    measureRepository.addRawMeasure(PROJECT_REF, INT_METRIC_2_KEY, rawMeasure);","252","    Optional<Measure> rawMeasure1 = measureRepository.getAddedRawMeasure(PROJECT_REF, INT_METRIC_1_KEY);","253","    Optional<Measure> rawMeasure2 = measureRepository.getAddedRawMeasure(PROJECT_REF, INT_METRIC_2_KEY);","255","    assertThat(rawMeasure1.get())","258","    assertThat(rawMeasure2.get())","261","    assertThat(getAlertStatusMeasure())","265","    assertThat(getQGDetailsMeasure())","277","  @Test","278","  public void new_measure_has_ERROR_level_of_all_conditions_for_a_specific_metric_if_its_the_worst() {","279","    int rawValue = 1;","280","    Condition fixedCondition = createEqualsCondition(INT_METRIC_1, \"1\", null);","281","    Condition periodCondition = createEqualsCondition(INT_METRIC_1, null, \"2\", 1);","282","","283","    qualityGateHolder.setQualityGate(new QualityGate(SOME_QG_ID, SOME_QG_NAME, of(fixedCondition, periodCondition)));","284","    Measure measure = newMeasureBuilder().create(rawValue, null);","285","    measureRepository.addRawMeasure(PROJECT_REF, INT_METRIC_1_KEY, measure);","286","","287","    underTest.execute();","288","","289","    Optional<Measure> rawMeasure1 = measureRepository.getAddedRawMeasure(PROJECT_REF, INT_METRIC_1_KEY);","290","    assertThat(rawMeasure1.get())","291","      .hasQualityGateLevel(ERROR)","292","      .hasQualityGateText(dumbResultTextAnswer(fixedCondition, ERROR, rawValue));","293","  }","294","","295","  @Test","296","  public void new_measure_has_WARN_level_of_all_conditions_for_a_specific_metric_if_its_the_worst() {","297","    int rawValue = 2;","298","    Condition fixedCondition = createEqualsCondition(INT_METRIC_1, \"1\", null);","299","    Condition periodCondition = createEqualsCondition(INT_METRIC_1, null, \"2\", 1);","300","","301","    qualityGateHolder.setQualityGate(new QualityGate(SOME_QG_ID, SOME_QG_NAME, of(fixedCondition, periodCondition)));","302","    Measure measure = newMeasureBuilder()","303","      .setVariations(newMeasureVariationsBuilder().setVariation(new Period(1, \"mode\", null, 1212, 121), rawValue).build())","304","      .create(rawValue, null);","305","    measureRepository.addRawMeasure(PROJECT_REF, INT_METRIC_1_KEY, measure);","306","","307","    underTest.execute();","308","","309","    Optional<Measure> rawMeasure1 = measureRepository.getAddedRawMeasure(PROJECT_REF, INT_METRIC_1_KEY);","310","    assertThat(rawMeasure1.get())","311","      .hasQualityGateLevel(WARN)","312","      .hasQualityGateText(dumbResultTextAnswer(periodCondition, WARN, rawValue));","313","  }","314","","315","  @Test","316","  public void new_measure_has_condition_on_leak_period_when_all_conditions_on_specific_metric_has_same_QG_level() {","317","    int rawValue = 1;","318","    Condition fixedCondition = createEqualsCondition(INT_METRIC_1, \"1\", null);","319","    Condition periodCondition = createEqualsCondition(INT_METRIC_1, \"1\", null, 1);","320","","321","    qualityGateHolder.setQualityGate(new QualityGate(SOME_QG_ID, SOME_QG_NAME, of(fixedCondition, periodCondition)));","322","    Measure measure = newMeasureBuilder()","323","        .setVariations(newMeasureVariationsBuilder().setVariation(new Period(1, \"mode\", null, 1212, 121), rawValue).build())","324","        .create(rawValue, null);","325","    measureRepository.addRawMeasure(PROJECT_REF, INT_METRIC_1_KEY, measure);","326","","327","    underTest.execute();","328","","329","    Optional<Measure> rawMeasure1 = measureRepository.getAddedRawMeasure(PROJECT_REF, INT_METRIC_1_KEY);","330","    assertThat(rawMeasure1.get())","331","        .hasQualityGateLevel(ERROR)","332","        .hasQualityGateText(dumbResultTextAnswer(periodCondition, ERROR, rawValue));","333","  }","334","","335","  private Measure getAlertStatusMeasure() {","336","    return measureRepository.getAddedRawMeasure(PROJECT_REF, ALERT_STATUS_KEY).get();","337","  }","338","","339","  private Optional<Measure> getQGDetailsMeasure() {","340","    return measureRepository.getAddedRawMeasure(PROJECT_REF, CoreMetrics.QUALITY_GATE_DETAILS_KEY);","341","  }","342","","347","  private static Condition createEqualsCondition(Metric metric, @Nullable String errorThreshold, @Nullable String warningThreshold, @Nullable Integer period) {","348","    return new Condition(metric, Condition.Operator.EQUALS.getDbValue(), errorThreshold, warningThreshold, period);","349","  }","350",""],"delete":["31","import org.mockito.ArgumentCaptor;","39","import org.sonar.server.computation.measure.MeasureRepository;","44","import org.sonar.server.computation.metric.MetricRepository;","57","import static org.mockito.Matchers.same;","59","import static org.mockito.Mockito.verify;","60","import static org.mockito.Mockito.verifyNoMoreInteractions;","71","  private static final ReportComponent PROJECT_COMPONENT = ReportComponent.builder(Component.Type.PROJECT, 1).build();","84","  private static final Metric ALERT_STATUS_METRIC = mock(Metric.class);","85","  private static final Metric QUALITY_GATE_DETAILS_METRIC = mock(Metric.class);","86","","87","  private ArgumentCaptor<Measure> alertStatusMeasureCaptor = ArgumentCaptor.forClass(Measure.class);","88","  private ArgumentCaptor<Measure> qgDetailsMeasureCaptor = ArgumentCaptor.forClass(Measure.class);","89","","90","  private MeasureRepository measureRepository = mock(MeasureRepository.class);","91","  private MetricRepository metricRepository = mock(MetricRepository.class);","100","    when(metricRepository.getByKey(CoreMetrics.ALERT_STATUS_KEY)).thenReturn(ALERT_STATUS_METRIC);","101","    when(metricRepository.getByKey(CoreMetrics.QUALITY_GATE_DETAILS_KEY)).thenReturn(QUALITY_GATE_DETAILS_METRIC);","102","","126","    verifyNoMoreInteractions(measureRepository);","135","    verifyNoMoreInteractions(measureRepository);","154","    when(measureRepository.getRawMeasure(PROJECT_COMPONENT, INT_METRIC_1)).thenReturn(Optional.<Measure>absent());","158","    verify(measureRepository).getRawMeasure(PROJECT_COMPONENT, INT_METRIC_1);","159","    verify(measureRepository).add(same(PROJECT_COMPONENT), same(ALERT_STATUS_METRIC), alertStatusMeasureCaptor.capture());","160","    verify(measureRepository).add(same(PROJECT_COMPONENT), same(QUALITY_GATE_DETAILS_METRIC), qgDetailsMeasureCaptor.capture());","161","    verifyNoMoreInteractions(measureRepository);","163","    assertThat(alertStatusMeasureCaptor.getValue())","166","    assertThat(qgDetailsMeasureCaptor.getValue())","179","    Measure rawMeasure = Measure.newMeasureBuilder().create(rawValue, null);","182","    when(measureRepository.getRawMeasure(PROJECT_COMPONENT, INT_METRIC_1)).thenReturn(Optional.of(rawMeasure));","186","    ArgumentCaptor<Measure> equals2ConditionMeasureCaptor = ArgumentCaptor.forClass(Measure.class);","188","    verify(measureRepository).getRawMeasure(PROJECT_COMPONENT, INT_METRIC_1);","189","    verify(measureRepository).update(same(PROJECT_COMPONENT), same(INT_METRIC_1), equals2ConditionMeasureCaptor.capture());","190","    verify(measureRepository).add(same(PROJECT_COMPONENT), same(ALERT_STATUS_METRIC), alertStatusMeasureCaptor.capture());","191","    verify(measureRepository).add(same(PROJECT_COMPONENT), same(QUALITY_GATE_DETAILS_METRIC), qgDetailsMeasureCaptor.capture());","192","    verifyNoMoreInteractions(measureRepository);","193","","194","    assertThat(equals2ConditionMeasureCaptor.getValue())","197","    assertThat(alertStatusMeasureCaptor.getValue())","200","    assertThat(qgDetailsMeasureCaptor.getValue())","214","    Measure rawMeasure = Measure.newMeasureBuilder().create(rawValue, null);","217","    when(measureRepository.getRawMeasure(PROJECT_COMPONENT, INT_METRIC_1)).thenReturn(Optional.of(rawMeasure));","218","    when(measureRepository.getRawMeasure(PROJECT_COMPONENT, INT_METRIC_2)).thenReturn(Optional.of(rawMeasure));","222","    ArgumentCaptor<Measure> equals1ErrorConditionMeasureCaptor = ArgumentCaptor.forClass(Measure.class);","223","    ArgumentCaptor<Measure> equals1WarningConditionMeasureCaptor = ArgumentCaptor.forClass(Measure.class);","225","    verify(measureRepository).getRawMeasure(PROJECT_COMPONENT, INT_METRIC_1);","226","    verify(measureRepository).getRawMeasure(PROJECT_COMPONENT, INT_METRIC_2);","227","    verify(measureRepository).update(same(PROJECT_COMPONENT), same(INT_METRIC_1), equals1ErrorConditionMeasureCaptor.capture());","228","    verify(measureRepository).update(same(PROJECT_COMPONENT), same(INT_METRIC_2), equals1WarningConditionMeasureCaptor.capture());","229","    verify(measureRepository).add(same(PROJECT_COMPONENT), same(ALERT_STATUS_METRIC), alertStatusMeasureCaptor.capture());","230","    verify(measureRepository).add(same(PROJECT_COMPONENT), same(QUALITY_GATE_DETAILS_METRIC), qgDetailsMeasureCaptor.capture());","231","    verifyNoMoreInteractions(measureRepository);","232","","233","    assertThat(equals1ErrorConditionMeasureCaptor.getValue())","236","    assertThat(equals1WarningConditionMeasureCaptor.getValue())","239","    assertThat(alertStatusMeasureCaptor.getValue())","243","    assertThat(qgDetailsMeasureCaptor.getValue())","260","    Measure rawMeasure = Measure.newMeasureBuilder().create(rawValue, null);","263","    when(measureRepository.getRawMeasure(PROJECT_COMPONENT, INT_METRIC_1)).thenReturn(Optional.of(rawMeasure));","264","    when(measureRepository.getRawMeasure(PROJECT_COMPONENT, INT_METRIC_2)).thenReturn(Optional.of(rawMeasure));","268","    ArgumentCaptor<Measure> equals2ConditionMeasureCaptor = ArgumentCaptor.forClass(Measure.class);","269","    ArgumentCaptor<Measure> equals1WarningConditionMeasureCaptor = ArgumentCaptor.forClass(Measure.class);","271","    verify(measureRepository).getRawMeasure(PROJECT_COMPONENT, INT_METRIC_1);","272","    verify(measureRepository).getRawMeasure(PROJECT_COMPONENT, INT_METRIC_2);","273","    verify(measureRepository).update(same(PROJECT_COMPONENT), same(INT_METRIC_1), equals2ConditionMeasureCaptor.capture());","274","    verify(measureRepository).update(same(PROJECT_COMPONENT), same(INT_METRIC_2), equals1WarningConditionMeasureCaptor.capture());","275","    verify(measureRepository).add(same(PROJECT_COMPONENT), same(ALERT_STATUS_METRIC), alertStatusMeasureCaptor.capture());","276","    verify(measureRepository).add(same(PROJECT_COMPONENT), same(QUALITY_GATE_DETAILS_METRIC), qgDetailsMeasureCaptor.capture());","277","    verifyNoMoreInteractions(measureRepository);","278","","279","    assertThat(equals2ConditionMeasureCaptor.getValue())","282","    assertThat(equals1WarningConditionMeasureCaptor.getValue())","285","    assertThat(alertStatusMeasureCaptor.getValue())","289","    assertThat(qgDetailsMeasureCaptor.getValue())"]}]}},"37a018029bb7382f293d20d81e03a2d5e716dfcd":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/templates\/rule\/coding-rules-profile-activation.hbs":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/rule\/profile-activation-view.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/templates\/rule\/coding-rules-profile-activation.hbs":[{"add":["10","    <div class=\"js-modal-messages\"><\/div>"],"delete":["10","    <div class=\"alert alert-danger\"><\/div>"]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/rule\/profile-activation-view.js":[{"add":["20","  'components\/common\/modal-form',","22","], function (ModalForm) {","26","  return ModalForm.extend({","29","    ui: function () {","30","      return _.extend(this._super(), {","31","        qualityProfileSelect: '#coding-rules-quality-profile-activation-select',","32","        qualityProfileSeverity: '#coding-rules-quality-profile-activation-severity',","33","        qualityProfileActivate: '#coding-rules-quality-profile-activation-activate',","34","        qualityProfileParameters: '[name]'","35","      });","39","      return _.extend(this._super(), {","45","      this._super();","97","      this.disableForm();","113","        that.close();","115","      }).fail(function (jqXHR) {","116","        that.enableForm();","117","        that.showErrors(jqXHR.responseJSON.errors, jqXHR.responseJSON.warnings);","148","      return _.extend(this._super(), {"],"delete":["20","  'components\/common\/modals',","22","], function (Modal) {","26","  return Modal.extend({","29","    ui: {","30","      qualityProfileSelect: '#coding-rules-quality-profile-activation-select',","31","      qualityProfileSeverity: '#coding-rules-quality-profile-activation-severity',","32","      qualityProfileActivate: '#coding-rules-quality-profile-activation-activate',","33","      qualityProfileParameters: '[name]'","37","      return _.extend(Modal.prototype.events.apply(this, arguments), {","43","      Modal.prototype.onRender.apply(this, arguments);","95","      this.close();","112","      }).fail(function () {","113","        that.trigger('profileActivationFailed');","144","      return _.extend(Modal.prototype.serializeData.apply(this, arguments), {"]}]}},"ab64e97deecaf047d85debdd1ba669e1d4071d51":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/main\/Duplications.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/qualityGate\/QualityGate.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/types.js":"ADD","server\/sonar-web\/src\/main\/js\/apps\/overview\/qualityGate\/__tests__\/QualityGateCondition-test.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/shared\/drilldown-link.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/main\/Coverage.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/OverviewApp.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/qualityGate\/QualityGateCondition.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/qualityGate\/QualityGateConditions.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/qualityGate\/__tests__\/__snapshots__\/QualityGateCondition-test.js.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/main\/Duplications.js":[{"add":["82","          <DrilldownLink component={component.key} metric={newDuplicationsMeasure.metric.key}>","96","            metric={newLinesMeasure.metric.key}>"],"delete":["82","          <DrilldownLink","83","            component={component.key}","84","            metric={newDuplicationsMeasure.metric.key}","85","            period={leakPeriod.index}>","99","            metric={newLinesMeasure.metric.key}","100","            period={leakPeriod.index}>"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/qualityGate\/QualityGate.js":[{"add":["19","\/\/@flow","25","import type { Component, MeasuresList } from '..\/types';","27","function parseQualityGateDetails(rawDetails: string) {","31","function isProject(component: Component) {","35","type Props = {","36","  component: Component,","37","  measures: MeasuresList","38","};","39","","40","export default function QualityGate({ component, measures }: Props) {","51","  if (detailsMeasure && detailsMeasure.value) {","63","        <QualityGateConditions component={component} conditions={conditions} \/>}","66","}"],"delete":["22","import { ComponentType, MeasuresListType, PeriodsListType } from '..\/propTypes';","26","function parseQualityGateDetails(rawDetails) {","30","function isProject(component) {","34","const QualityGate = ({ component, measures, periods }) => {","45","  if (detailsMeasure) {","57","        <QualityGateConditions component={component} periods={periods} conditions={conditions} \/>}","60","};","61","","62","QualityGate.propTypes = {","63","  component: ComponentType.isRequired,","64","  measures: MeasuresListType.isRequired,","65","  periods: PeriodsListType.isRequired","66","};","67","","68","export default QualityGate;"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/types.js":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/qualityGate\/__tests__\/QualityGateCondition-test.js":[{"add":["39","const periods = [{ value: '3', index: 1 }];","40","","58","    shallow(<QualityGateCondition component={{ key: 'abcd-key' }} condition={condition} \/>)","73","      periods: [{ value: '10', index: 1 }],","77","    op: 'GT',","78","    period: 1","81","    shallow(<QualityGateCondition component={{ key: 'abcd-key' }} condition={condition} \/>)","88","    shallow(<QualityGateCondition component={{ key: 'abcd-key' }} condition={condition} \/>)","95","    shallow(<QualityGateCondition component={{ key: 'abcd-key' }} condition={condition} \/>)","102","    shallow(<QualityGateCondition component={{ key: 'abcd-key' }} condition={condition} \/>)","108","  condition.period = 1;","109","  condition.measure.periods = periods;","111","    shallow(<QualityGateCondition component={{ key: 'abcd-key' }} condition={condition} \/>)","117","  condition.period = 1;","118","  condition.measure.periods = periods;","120","    shallow(<QualityGateCondition component={{ key: 'abcd-key' }} condition={condition} \/>)","126","  condition.period = 1;","127","  condition.measure.periods = periods;","129","    shallow(<QualityGateCondition component={{ key: 'abcd-key' }} condition={condition} \/>)"],"delete":["56","    shallow(","57","      <QualityGateCondition component={{ key: 'abcd-key' }} periods={[]} condition={condition} \/>","58","    )","76","    op: 'GT'","79","    shallow(","80","      <QualityGateCondition component={{ key: 'abcd-key' }} periods={[]} condition={condition} \/>","81","    )","88","    shallow(","89","      <QualityGateCondition component={{ key: 'abcd-key' }} periods={[]} condition={condition} \/>","90","    )","97","    shallow(","98","      <QualityGateCondition component={{ key: 'abcd-key' }} periods={[]} condition={condition} \/>","99","    )","106","    shallow(","107","      <QualityGateCondition component={{ key: 'abcd-key' }} periods={[]} condition={condition} \/>","108","    )","115","    shallow(","116","      <QualityGateCondition component={{ key: 'abcd-key' }} periods={[]} condition={condition} \/>","117","    )","124","    shallow(","125","      <QualityGateCondition component={{ key: 'abcd-key' }} periods={[]} condition={condition} \/>","126","    )","133","    shallow(","134","      <QualityGateCondition component={{ key: 'abcd-key' }} periods={[]} condition={condition} \/>","135","    )"]}],"server\/sonar-web\/src\/main\/js\/components\/shared\/drilldown-link.js":[{"add":["49","  static propTypes = {","50","    children: React.PropTypes.oneOfType([","51","      React.PropTypes.node,","52","      React.PropTypes.arrayOf(React.PropTypes.node)","53","    ]),","54","    className: React.PropTypes.string,","55","    component: React.PropTypes.string.isRequired,","56","    metric: React.PropTypes.string.isRequired,","57","    sinceLeakPeriod: React.PropTypes.bool","58","  };","66","    if (this.props.sinceLeakPeriod) {","67","      params.sinceLeakPeriod = true;"],"delete":["19","import moment from 'moment';","57","    if (this.props.periodDate) {","58","      params.createdAfter = moment(this.props.periodDate).format('YYYY-MM-DDTHH:mm:ssZZ');"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/main\/Coverage.js":[{"add":["98","          <DrilldownLink component={component.key} metric={newCoverageMeasure.metric.key}>","112","            metric={newLinesToCover.metric.key}>"],"delete":["98","          <DrilldownLink","99","            component={component.key}","100","            metric={newCoverageMeasure.metric.key}","101","            period={leakPeriod.index}>","115","            metric={newLinesToCover.metric.key}","116","            period={leakPeriod.index}>"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/OverviewApp.js":[{"add":["163","            <QualityGate component={component} measures={measures} \/>"],"delete":["163","            <QualityGate component={component} measures={measures} periods={periods} \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/qualityGate\/QualityGateCondition.js":[{"add":["29","import type { Component } from '..\/types';","33","    component: Component,","90","    const { component, condition } = this.props;","95","      { 'overview-quality-gate-condition-leak': condition.period != null }","117","          sinceLeakPeriod={condition.period != null}>","123","    const { condition } = this.props;","151","            condition.period != null &&"],"delete":["27","import { getPeriod, getPeriodDate } from '..\/..\/..\/helpers\/periods';","33","    component: { key: string },","34","    periods: Array<{","35","      index: number,","36","      date: string,","37","      mode: string,","38","      parameter?: string","39","    }>,","96","    const { component, periods, condition } = this.props;","97","","98","    const period = getPeriod(periods, condition.period);","99","    const periodDate = getPeriodDate(period);","104","      { 'overview-quality-gate-condition-leak': period != null }","126","          period={condition.period}","127","          periodDate={periodDate}>","133","    const { periods, condition } = this.props;","144","    const period = getPeriod(periods, condition.period);","162","            period != null &&"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/qualityGate\/QualityGateConditions.js":[{"add":["83","    const { component } = this.props;"],"delete":["83","    const { component, periods } = this.props;","104","            periods={periods}"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/qualityGate\/__tests__\/__snapshots__\/QualityGateCondition-test.js.snap":[{"add":["4","  className=\"overview-quality-gate-condition overview-quality-gate-condition-error overview-quality-gate-condition-leak\"","7","  sinceLeakPeriod={true}","55","  className=\"overview-quality-gate-condition overview-quality-gate-condition-error overview-quality-gate-condition-leak\"","117","  className=\"overview-quality-gate-condition overview-quality-gate-condition-error overview-quality-gate-condition-leak\"","179","  className=\"overview-quality-gate-condition overview-quality-gate-condition-error overview-quality-gate-condition-leak\"","243","  sinceLeakPeriod={false}"],"delete":["4","  className=\"overview-quality-gate-condition overview-quality-gate-condition-error\"","7","  periodDate={null}","55","  className=\"overview-quality-gate-condition overview-quality-gate-condition-error\"","117","  className=\"overview-quality-gate-condition overview-quality-gate-condition-error\"","179","  className=\"overview-quality-gate-condition overview-quality-gate-condition-error\"","243","  periodDate={null}"]}]}},"48f295f8b4720b3e9d53def3d313eeba0aa93f13":{"changes":{"server\/sonar-docs\/src\/pages\/extend\/extend-web-app.md":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/extensions\/__tests__\/ProjectPageExtension-test.tsx":"ADD","server\/sonar-web\/src\/main\/js\/app\/components\/extensions\/ProjectPageExtension.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/extensions\/__tests__\/__snapshots__\/ProjectPageExtension-test.tsx.snap":"ADD"},"diff":{"server\/sonar-docs\/src\/pages\/extend\/extend-web-app.md":[{"add":["100","* (optional) `options.branchLike`: contains the information of the current branch or pull request."],"delete":[]}],"server\/sonar-web\/src\/main\/js\/app\/components\/extensions\/__tests__\/ProjectPageExtension-test.tsx":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/app\/components\/extensions\/ProjectPageExtension.tsx":[{"add":["23","export interface ProjectPageExtensionProps {","24","  branchLike?: T.BranchLike;","33","export default function ProjectPageExtension(props: ProjectPageExtensionProps) {","35","  const { branchLike, component } = props;","40","    <Extension extension={extension} options={{ branchLike, component }} \/>"],"delete":["23","interface Props {","32","export default function ProjectPageExtension(props: Props) {","34","  const { component } = props;","39","    <Extension extension={extension} options={{ component }} \/>"]}],"server\/sonar-web\/src\/main\/js\/app\/components\/extensions\/__tests__\/__snapshots__\/ProjectPageExtension-test.tsx.snap":[{"add":[],"delete":[]}]}},"e92f595ae8795ffc8906d84d95b2cc634ff34b72":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/details\/ProfileRules.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/details\/ProfileRulesRowOfType.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/details\/__tests__\/ProfileRulesSonarWayComparison-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/home\/EvolutionDeprecated.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/details\/ProfileRulesRowTotal.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/home\/EvolutionStagnant.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/details\/ProfileExporters.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/home\/ProfilesListRow.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/utils.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/home\/ProfilesList.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/details\/ProfileHeader.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/details\/ProfilePermissionsFormSelect.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/details\/ProfileRules.tsx":[{"add":["176","                  key={type}","190","                <Link className=\"button js-activate-rules\" to={activateMoreUrl}>","210","              sonarway={compareToSonarWay.profile}"],"delete":["175","                  key={type}","190","                <Link to={activateMoreUrl} className=\"button js-activate-rules\">","209","              sonarway={compareToSonarWay.profile}"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/details\/ProfileRulesRowOfType.tsx":[{"add":["52","          <IssueTypeIcon className=\"little-spacer-right\" query={props.type} \/>","64","            <Link className=\"small text-muted\" to={inactiveRulesUrl}>"],"delete":["52","          <IssueTypeIcon query={props.type} className=\"little-spacer-right\" \/>","64","            <Link to={inactiveRulesUrl} className=\"small text-muted\">"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/details\/__tests__\/ProfileRulesSonarWayComparison-test.tsx":[{"add":["31","        sonarway=\"baz\""],"delete":["30","        sonarway=\"baz\""]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/home\/EvolutionDeprecated.tsx":[{"add":["56","          <li className=\"spacer-top\" key={profile.key}>","70","                className=\"text-muted\"","71","                to={getDeprecatedActiveRulesUrl({ qprofile: profile.key }, props.organization)}>"],"delete":["56","          <li key={profile.key} className=\"spacer-top\">","70","                to={getDeprecatedActiveRulesUrl({ qprofile: profile.key }, props.organization)}","71","                className=\"text-muted\">"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/details\/ProfileRulesRowTotal.tsx":[{"add":["61","            <Link className=\"small text-muted\" to={inactiveRulesUrl}>"],"delete":["61","            <Link to={inactiveRulesUrl} className=\"small text-muted\">"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/home\/EvolutionStagnant.tsx":[{"add":["32","  const outdated = props.profiles.filter(profile => !profile.isBuiltIn && isStagnant(profile));","48","          <li className=\"spacer-top\" key={profile.key}>"],"delete":["32","  \/\/ TODO filter built-in out","33","","34","  const outdated = props.profiles.filter(isStagnant);","50","          <li key={profile.key} className=\"spacer-top\">"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/details\/ProfileExporters.tsx":[{"add":["61","                className={index > 0 ? 'spacer-top' : undefined}","63","                key={exporter.key}>"],"delete":["61","                key={exporter.key}","63","                className={index > 0 ? 'spacer-top' : undefined}>"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/home\/ProfilesListRow.tsx":[{"add":["98","              <Link className=\"badge badge-normal-size badge-danger-light\" to={deprecatedRulesUrl}>","111","    const date = <ProfileDate date={this.props.profile.rulesUpdatedAt} \/>;"],"delete":["98","              <Link to={deprecatedRulesUrl} className=\"badge badge-normal-size badge-danger-light\">","111","    const date = <ProfileDate date={this.props.profile.userUpdatedAt} \/>;"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/utils.ts":[{"add":["69","  if (profile.rulesUpdatedAt) {","70","    const updateDate = parseDate(profile.rulesUpdatedAt);"],"delete":["69","  if (profile.userUpdatedAt) {","70","    const updateDate = parseDate(profile.userUpdatedAt);"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/home\/ProfilesList.tsx":[{"add":["82","      <div className=\"boxed-group boxed-group-inner quality-profiles-table\" key={languageKey}>","83","        <table className=\"data zebra zebra-hover\" data-language={languageKey}>"],"delete":["82","      <div key={languageKey} className=\"boxed-group boxed-group-inner quality-profiles-table\">","83","        <table data-language={languageKey} className=\"data zebra zebra-hover\">"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/details\/ProfileHeader.tsx":[{"add":["46","        {translate('quality_profiles.updated_')} <ProfileDate date={profile.rulesUpdatedAt} \/>","75","          <IndexLink className=\"text-muted\" to={getProfilesPath(organization)}>","80","            className=\"text-muted\"","81","            to={getProfilesForLanguagePath(profile.language, organization)}>","105","                className=\"button\"","106","                to={getProfileChangelogPath(profile.name, profile.language, organization)}>"],"delete":["46","        {translate('quality_profiles.updated_')} <ProfileDate date={profile.userUpdatedAt} \/>","75","          <IndexLink to={getProfilesPath(organization)} className=\"text-muted\">","80","            to={getProfilesForLanguagePath(profile.language, organization)}","81","            className=\"text-muted\">","105","                to={getProfileChangelogPath(profile.name, profile.language, organization)}","106","                className=\"button\">"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/details\/ProfilePermissionsFormSelect.tsx":[{"add":["99","        isLoading={this.state.loading}","103","        optionRenderer={optionRenderer}","104","        options={options}"],"delete":["97","        isLoading={this.state.loading}","101","        optionRenderer={optionRenderer}","102","        options={options}"]}]}},"d7173668ad32a0f19a59f8b9612112c43852c2aa":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/utils-test.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/ComponentSourceSnippetViewer-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/ComponentSourceSnippetViewer.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/CrossComponentSourceViewerWrapper.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/utils.ts":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/utils-test.ts":[{"add":["28","    expect(groupLocationsByComponent(mockIssue(), [], {})).toEqual([]);","33","      mockIssue(),","53","      mockIssue(),"],"delete":["28","    expect(groupLocationsByComponent([], {})).toEqual([]);"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/ComponentSourceSnippetViewer-test.tsx":[{"add":["56","        component: issue.component,","60","        component: issue.component,","64","    ...mockSnippetsByComponent(issue.component, [","65","      ...range(2, 17),","66","      ...range(29, 39),","67","      ...range(69, 79)","68","    ])","77","it('should render correctly with flows', () => {","78","  \/\/ issue with flows but no secondary locations","79","  const issue = mockIssue(true, {","80","    secondaryLocations: [],","81","    textRange: { startLine: 7, endLine: 7, startOffset: 5, endOffset: 10 }","82","  });","83","","84","  const snippetGroup: T.SnippetGroup = {","85","    locations: [","86","      mockFlowLocation({","87","        component: issue.component,","88","        textRange: { startLine: 34, endLine: 34, startOffset: 0, endOffset: 0 }","89","      }),","90","      mockFlowLocation({","91","        component: issue.component,","92","        textRange: { startLine: 74, endLine: 74, startOffset: 0, endOffset: 0 }","93","      })","94","    ],","95","    ...mockSnippetsByComponent(issue.component, [","96","      ...range(2, 17),","97","      ...range(29, 39),","98","      ...range(69, 79)","99","    ])","100","  };","101","  const wrapper = shallowRender({ issue, snippetGroup });","102","  expect(wrapper.state('snippets')).toHaveLength(2);","103","  expect(wrapper.state('snippets')[0]).toEqual({ index: 0, start: 29, end: 39 });","104","  expect(wrapper.state('snippets')[1]).toEqual({ index: 1, start: 69, end: 79 });","105","});","106",""],"delete":["56","        component: 'a',","60","        component: 'a',","64","    ...mockSnippetsByComponent('a', [...range(2, 17), ...range(29, 39), ...range(69, 79)])"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/ComponentSourceSnippetViewer.tsx":[{"add":["90","    const { issue, snippetGroup } = this.props;","91","","93","      locations: snippetGroup.locations,","94","      issue,","95","      addIssueLocation:","96","        issue.secondaryLocations.length > 0 && snippetGroup.component.key === issue.component","359","    const locations =","360","      issue.component === snippetGroup.component.key ? locationsByLine([issue]) : {};","373","    const isFlow = issue.secondaryLocations.length === 0;","374","    const includeIssueLocation = (index: number) =>","375","      isFlow ? last && index === snippets.length - 1 : index === 0;","376","","395","              issuesByLine,","396","              locationsByLine: includeIssueLocation(index) ? locations : {},"],"delete":["91","      locations: this.props.snippetGroup.locations,","92","      issue: this.props.issue,","93","      addIssueLocation: this.props.issue.secondaryLocations.length > 0","356","    const locations = locationsByLine([issue]);","387","              issuesByLine: last ? issuesByLine : {},","388","              locationsByLine: last && index === snippets.length - 1 ? locations : {},"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/CrossComponentSourceViewerWrapper.tsx":[{"add":["33","  duplicationsByLine as getDuplicationsByLine,","101","            duplicationsByLine: getDuplicationsByLine(r.duplications),","225","    const { issue, locations } = this.props;","228","    const locationsByComponent = groupLocationsByComponent(issue, locations, components);","243","              \/\/ eslint-disable-next-line react\/no-array-index-key","244","              key={`${issue.key}-${this.props.selectedFlowIndex || 0}-${i}`}","249","                issue={issue}"],"delete":["33","  duplicationsByLine,","101","            duplicationsByLine: duplicationsByLine(r.duplications),","227","    const locationsByComponent = groupLocationsByComponent(this.props.locations, components);","242","              key={`${this.props.issue.key}-${this.props.selectedFlowIndex || 0}-${i}`}","247","                issue={this.props.issue}"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/utils.ts":[{"add":["44","export function getPrimaryLocation(issue: T.Issue): T.FlowLocation {","130","  issue: T.Issue,","138","  const addGroup = (loc: T.FlowLocation) => {","139","    currentGroup = {","140","      ...(components[loc.component] || unknownComponent(loc.component)),","141","      locations: []","142","    };","143","    groups.push(currentGroup);","144","    currentComponent = loc.component;","145","  };","146","","147","  if (","148","    issue.secondaryLocations.length > 0 &&","149","    locations.every(loc => loc.component !== issue.component)","150","  ) {","151","    addGroup(getPrimaryLocation(issue));","152","  }","153","","156","      addGroup(loc);"],"delete":["44","function getPrimaryLocation(issue: T.Issue): T.FlowLocation {","139","      currentGroup = {","140","        ...(components[loc.component] || unknownComponent(loc.component)),","141","        locations: []","142","      };","143","      groups.push(currentGroup);","144","      currentComponent = loc.component;"]}]}},"4feaaa420f34c2ae4e6d4c9bc09da49d5dd8edbb":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/issue\/components\/IssueCommentLine.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/components\/IssueAssign.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/ui\/Avatar.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/ui\/__tests__\/Avatar-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/popups\/SimilarIssuesPopup.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/issue\/components\/IssueCommentLine.js":[{"add":["91","            name={comment.authorName || comment.author}","94","          {comment.authorName || comment.author}"],"delete":["91","            name={comment.authorName}","94","          {comment.authorName}"]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/components\/IssueAssign.js":[{"add":["60","              name={issue.assigneeName || issue.assignee}","66","          {issue.assignee ? issue.assigneeName || issue.assignee : translate('unassigned')}"],"delete":["60","              name={issue.assigneeName}","66","          {issue.assignee ? issue.assigneeName : translate('unassigned')}"]}],"server\/sonar-web\/src\/main\/js\/components\/ui\/Avatar.tsx":[{"add":["30","  name?: string;","36","    if (!props.name) {","37","      return null;","38","    }","48","      alt={props.name}","50","      height={props.size}"],"delete":["30","  name: string;","48","      height={props.size}","49","      alt={props.name}"]}],"server\/sonar-web\/src\/main\/js\/components\/ui\/__tests__\/Avatar-test.tsx":[{"add":["44","","45","it('do not fail when name is missing', () => {","46","  const avatar = shallow(","47","    <Avatar enableGravatar={false} gravatarServerUrl=\"\" name={undefined} size={30} \/>","48","  );","49","  expect(avatar.getElement()).toBeNull();","50","});"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/popups\/SimilarIssuesPopup.js":[{"add":["102","                  name={issue.assigneeName || issue.assignee}","105","                {issue.assigneeName || issue.assignee}"],"delete":["102","                  name={issue.assigneeName}","105","                {issue.assigneeName}"]}]}},"13213988a1e5a88833cb70c2dedba51e70de154f":{"changes":{"server\/sonar-server-common\/src\/test\/java\/org\/sonar\/server\/platform\/UrlSettingsTest.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/config\/EmailSettings.java":"MODIFY","server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/platform\/UrlSettings.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/platform\/Server.java":"MODIFY","sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/config\/EmailSettingsTest.java":"MODIFY"},"diff":{"server\/sonar-server-common\/src\/test\/java\/org\/sonar\/server\/platform\/UrlSettingsTest.java":[{"add":["60","  public void remove_trailing_slash() {","61","    settings.setProperty(\"sonar.core.serverBaseURL\", \"http:\/\/mydomain.com\/\");","62","","63","    assertThat(underTest().getBaseUrl()).isEqualTo(\"http:\/\/mydomain.com\");","64","  }","65","","66","  @Test"],"delete":[]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/config\/EmailSettings.java":[{"add":["22","import org.apache.commons.lang.StringUtils;","97","    return config.get(SERVER_BASE_URL)","98","      .map(t -> StringUtils.removeEnd(t, \"\/\"))","99","      .orElse(SERVER_BASE_URL_DEFAULT_VALUE);"],"delete":["96","    return get(SERVER_BASE_URL, SERVER_BASE_URL_DEFAULT_VALUE);"]}],"server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/platform\/UrlSettings.java":[{"add":["21","import org.apache.commons.lang.StringUtils;","55","    \/\/ Remove trailing slashes","56","    return StringUtils.removeEnd(url, \"\/\");"],"delete":["54","    return url;"]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/platform\/Server.java":[{"add":["88","   * Return the public root url, without trailing slash, for instance : https:\/\/nemo.sonarqube.org."],"delete":["88","   * Return the public root url, for instance : https:\/\/nemo.sonarqube.org."]}],"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/config\/EmailSettingsTest.java":[{"add":["21","import org.apache.commons.lang.RandomStringUtils;","27","import static org.sonar.api.CoreProperties.SERVER_BASE_URL;","31","  private MapSettings settings = new MapSettings();","32","  private EmailSettings underTest = new EmailSettings(settings.asConfig());","48","  public void getServerBaseUrl_returns_property_value() {","49","    String expected = RandomStringUtils.randomAlphabetic(15);","50","    settings.setProperty(SERVER_BASE_URL, expected);","51","","52","    assertThat(underTest.getServerBaseURL()).isEqualTo(expected);","53","  }","54","","55","  @Test","56","  public void getServerBaseUrl_removes_trailing_slash_from_property_value() {","57","    settings.setProperty(SERVER_BASE_URL, \"http:\/\/www.acme.com\/\");","58","","59","    assertThat(underTest.getServerBaseURL()).isEqualTo(\"http:\/\/www.acme.com\");","60","  }","61","","62","  @Test"],"delete":["29","  private EmailSettings underTest = new EmailSettings(new MapSettings().asConfig());"]}]}},"05087385ee6a3e032febe5f5f3033aa13a534147":{"changes":{"sonar-batch\/src\/main\/resources\/org\/sonar\/batch\/scan\/report\/issuesreport.ftl":"MODIFY"},"diff":{"sonar-batch\/src\/main\/resources\/org\/sonar\/batch\/scan\/report\/issuesreport.ftl":[{"add":["4","  <title>Issues report of ${report.getTitle()?html}<\/title>","22","    var nbResources = ${report.getResourcesWithReport()?size?c};","167","  <div class=\"subtitle\">${report.getTitle()?html} - ${report.getDate()?datetime}<\/div>","368","                <span class=\"rulename\">${issue.message()?html}<\/span>","417","                            <span class=\"rulename\">${issue.message()?html}<\/span>"],"delete":["4","  <title>Issues report of ${report.getTitle()}<\/title>","22","    var nbResources = ${report.getResourcesWithReport()?size};","167","  <div class=\"subtitle\">${report.getTitle()} - ${report.getDate()?datetime}<\/div>","368","                <span class=\"rulename\">${issue.message()}<\/span>","417","                            <span class=\"rulename\">${issue.message()}<\/span>"]}]}},"5e12a8cf6011e4f95405a1f8abeee38c92245141":{"changes":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/account\/_favorites.html.erb":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/account\/_favorites.html.erb":[{"add":["7","      <td>","8","        <%","9","          url = ApplicationController.root_context + '\/dashboard?id=' + url_encode(f.key)","10","        %>","11","        <a href=\"<%= url -%>\" class=\"link-with-icon\">","12","          <%= qualifier_icon f %>","13","          <span><%= h f.name -%><\/span>","14","        <\/a>","15","      <\/td>"],"delete":["7","      <td><%= qualifier_icon f %> <%= link_to_resource f %><\/td>"]}]}},"f1ba685b86d6435ae21960ee6962b83c447dd3da":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/__tests__\/App-test.tsx":"MODIFY","sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/utils.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/App.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/__tests__\/App-test.tsx":[{"add":["306","  const mockDone = (_: T.Issue[], paging: T.Paging) =>"],"delete":["306","  const mockDone = (_lastIssue: T.Issue, paging: T.Paging) =>"]}],"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["669","issues.cannot_open_issue_max_initial_X_fetched=Cannot open selected issue, as it's not part of the initial {0} loaded issues."],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/utils.ts":[{"add":["108","export function getOpen(query: T.RawQuery): string | undefined {"],"delete":["108","export function getOpen(query: T.RawQuery): string {"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/App.tsx":[{"add":["118","  cannotShowOpenIssue?: boolean;","145","const MAX_INITAL_FETCH = 1000;","463","    const openIssueKey = getOpen(this.props.location.query);","464","    let fetchPromise;","465","","467","    if (openIssueKey !== undefined) {","468","      fetchPromise = this.fetchIssuesUntil(1, (pageIssues: T.Issue[], paging: T.Paging) => {","469","        if (","470","          paging.total <= paging.pageIndex * paging.pageSize ||","471","          paging.pageIndex * paging.pageSize >= MAX_INITAL_FETCH","472","        ) {","473","          return true;","474","        }","475","        return pageIssues.some(issue => issue.key === openIssueKey);","476","      });","477","    } else {","478","      fetchPromise = this.fetchIssues({}, true);","479","    }","480","","481","    return fetchPromise.then(","490","            cannotShowOpenIssue: Boolean(openIssueKey && !openIssue),","524","    done: (pageIssues: T.Issue[], paging: T.Paging) => boolean","525","  ): Promise<FetchIssuesPromise> => {","526","    const recursiveFetch = (p: number, prevIssues: T.Issue[]): Promise<FetchIssuesPromise> => {","527","      return this.fetchIssuesPage(p).then(({ issues: pageIssues, paging, ...other }) => {","528","        const issues = [...prevIssues, ...pageIssues];","529","        return done(pageIssues, paging)","530","          ? { issues, paging, ...other }","531","          : recursiveFetch(p + 1, issues);","532","      });","575","    const done = (pageIssues: T.Issue[], paging: T.Paging) => {","576","      const lastIssue = pageIssues[pageIssues.length - 1];","586","    if (done(issues, paging)) {","834","      (issues: T.Issue[]) => {","1121","    const { cannotShowOpenIssue, checkAll, issues, loading, openIssue, paging } = this.state;","1148","            {cannotShowOpenIssue && (","1149","              <Alert className=\"big-spacer-bottom\" variant=\"warning\">","1150","                {translateWithParameters(","1151","                  'issues.cannot_open_issue_max_initial_X_fetched',","1152","                  MAX_INITAL_FETCH","1153","                )}","1154","              <\/Alert>","1155","            )}"],"delete":["462","    return this.fetchIssues({}, true).then(","504","    done: (lastIssue: T.Issue, paging: T.Paging) => boolean","505","  ): Promise<{ issues: T.Issue[]; paging: T.Paging }> => {","506","    const recursiveFetch = (","507","      p: number,","508","      issues: T.Issue[]","509","    ): Promise<{ issues: T.Issue[]; paging: T.Paging }> => {","510","      return this.fetchIssuesPage(p)","511","        .then(response => {","512","          return {","513","            issues: [...issues, ...response.issues],","514","            paging: response.paging","515","          };","516","        })","517","        .then(({ issues, paging }) => {","518","          return done(issues[issues.length - 1], paging)","519","            ? { issues, paging }","520","            : recursiveFetch(p + 1, issues);","521","        });","564","    const done = (lastIssue: T.Issue, paging: T.Paging) => {","574","    if (done(issues[issues.length - 1], paging)) {","822","      issues => {","1109","    const { checkAll, issues, loading, openIssue, paging } = this.state;"]}]}},"d9a8adec352374814382395b87fd034b0d5ab176":{"changes":{"it\/it-tests\/src\/test\/java\/it\/analysis\/ScannerTest.java":"MODIFY","it\/it-tests\/src\/test\/java\/it\/analysis\/ReportDumpTest.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/ReportPublisher.java":"MODIFY"},"diff":{"it\/it-tests\/src\/test\/java\/it\/analysis\/ScannerTest.java":[{"add":[],"delete":["33","import org.junit.Ignore;","380","  \/**","381","   * SONAR-4692","382","   *\/","383","  @Test","384","  @Ignore(\"This test should be moved to a Medium test of the Compute Engine\")","385","  public void prevent_same_module_key_in_two_projects() {","386","    orchestrator.getServer().provisionProject(\"projectAB\", \"project AB\");","387","    orchestrator.getServer().associateProjectToQualityProfile(\"projectAB\", \"xoo\", \"one-issue-per-line\");","388","    scan(\"analysis\/prevent-common-module\/projectAB\");","389","    assertThat(getComponent(orchestrator, \"com.sonarsource.it.samples:moduleA\")).isNotNull();","390","    assertThat(getComponent(orchestrator, \"com.sonarsource.it.samples:moduleB\")).isNotNull();","391","","392","    orchestrator.getServer().provisionProject(\"projectAC\", \"project AC\");","393","    orchestrator.getServer().associateProjectToQualityProfile(\"projectAC\", \"xoo\", \"one-issue-per-line\");","394","","395","    BuildResult result = scanQuietly(\"analysis\/prevent-common-module\/projectAC\");","396","    assertThat(result.getLastStatus()).isNotEqualTo(0);","397","    assertThat(result.getLogs()).contains(\"Module \\\"com.sonarsource.it.samples:moduleA\\\" is already part of project \\\"projectAB\\\"\");","398","  }","399","","400","  \/**","401","   * SONAR-4334","402","   *\/","403","  @Test","404","  @Ignore(\"Should be move to CE IT\/MT\")","405","  public void fail_if_project_date_is_older_than_latest_snapshot() {","406","    orchestrator.getServer().provisionProject(\"sample\", \"xoo-sample\");","407","    orchestrator.getServer().associateProjectToQualityProfile(\"sample\", \"xoo\", \"one-issue-per-line\");","408","    SonarScanner analysis = SonarScanner.create(ItUtils.projectDir(\"shared\/xoo-sample\"));","409","    analysis.setProperty(\"sonar.projectDate\", \"2014-01-01\");","410","    orchestrator.executeBuild(analysis);","411","","412","    analysis.setProperty(\"sonar.projectDate\", \"2000-10-19\");","413","    BuildResult result = orchestrator.executeBuildQuietly(analysis);","414","","415","    assertThat(result.getLastStatus()).isNotEqualTo(0);","416","    assertThat(result.getLogs()).contains(\"'sonar.projectDate' property cannot be older than the date of the last known quality snapshot on this project. Value: '2000-10-19'. \" +","417","      \"Latest quality snapshot: \");","418","    assertThat(result.getLogs()).contains(\"This property may only be used to rebuild the past in a chronological order.\");","419","  }","420",""]}],"it\/it-tests\/src\/test\/java\/it\/analysis\/ReportDumpTest.java":[{"add":["59","    assertThat(props.getProperty(\"serverVersion\")).isEqualTo(orchestrator.getServer().version().toString());"],"delete":["59","    \/\/ FIXME assertThat(props.getProperty(\"serverVersion\")).isEqualTo(orchestrator.getServer().version().toString());"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/ReportPublisher.java":[{"add":["209","      metadata.put(\"serverVersion\", server.getVersion());"],"delete":["23","","202","      String serverVersion = (server.getVersion() != null) ? server.getVersion() : \"\";","211","      metadata.put(\"serverVersion\", serverVersion);"]}]}},"16ef824afc30f2d8e9578abe8ba7422a69de28e2":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/EmptyOverview.tsx":"MODIFY","sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/__tests__\/__snapshots__\/EmptyOverview-test.tsx.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/EmptyOverview.tsx":[{"add":["28","import { ComponentQualifier } from '..\/..\/..\/types\/component';","42","  if (component.qualifier === ComponentQualifier.Application) {","43","    return (","44","      <div className=\"page page-limited\">","45","        <Alert variant=\"warning\">{translate('provisioning.no_analysis.application')}<\/Alert>","46","      <\/div>","47","    );","48","  } else if (!isBranch(branchLike)) {","58","  const showTutorial = isMainBranch(branchLike) && !hasBranches && !hasAnalyses;"],"delete":["41","  if (!isBranch(branchLike)) {","51","  const showTutorial =","52","    isMainBranch(branchLike) && !hasBranches && !hasAnalyses && component.qualifier !== 'APP';"]}],"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["1770","provisioning.no_analysis.application=No analysis has been performed since creation. Analyze a project to see information here."],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/__tests__\/__snapshots__\/EmptyOverview-test.tsx.snap":[{"add":["73",">","74","  <Alert","75","    variant=\"warning\"","76","  >","77","    provisioning.no_analysis.application","78","  <\/Alert>","79","<\/div>"],"delete":["73","\/>"]}]}},"9eb83a4ee9e247c4ab8af35b8e30c2f8c220ca68":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/filemove\/FileMoveDetectionStep.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/filemove\/FileMoveDetectionStep.java":[{"add":["258","        Match match = matchesToValidate.get(0);"],"delete":["258","        Match match = matches.get(0);"]}]}},"61d27599390f01279a25241daa5d361fcb362803":{"changes":{"tests\/plugins\/fake-governance-plugin\/src\/main\/java\/ce\/ComponentBombReportAnalysisComponentProvider.java":"MODIFY","tests\/plugins\/fake-governance-plugin\/src\/main\/java\/ce\/ws\/BombActivatorAction.java":"MODIFY","tests\/plugins\/fake-governance-plugin\/src\/main\/java\/ce\/ws\/SubmitAction.java":"MODIFY","tests\/src\/test\/java\/org\/sonarqube\/tests\/ce\/CeWorkersTest.java":"MODIFY","tests\/plugins\/fake-governance-plugin\/src\/main\/java\/ce\/BombConfig.java":"MODIFY"},"diff":{"tests\/plugins\/fake-governance-plugin\/src\/main\/java\/ce\/ComponentBombReportAnalysisComponentProvider.java":[{"add":["38","    if (bombConfig.isOomStartBomb()) {","39","      return singletonList(OOMFailingStartComponent.class);","40","    }","41","    if (bombConfig.isIseStartBomb()) {","42","      return singletonList(ISEFailingStartComponent.class);","43","    }","54","  public static final class OOMFailingStartComponent implements Startable {","55","","56","    @Override","57","    public void start() {","58","      OOMGenerator.consumeAvailableMemory();","59","    }","60","","61","    @Override","62","    public void stop() {","63","      \/\/ nothing to do","64","    }","65","  }","66","","67","  @EagerStart","68","  public static final class ISEFailingStartComponent implements Startable {","69","","70","    @Override","71","    public void start() {","72","      throw new IllegalStateException(\"Faking an IllegalStateException thrown by a startable component in the Analysis Report processing container\");","73","    }","74","","75","    @Override","76","    public void stop() {","77","      \/\/ nothing to do","78","    }","79","  }","80","","81","  @EagerStart"],"delete":[]}],"tests\/plugins\/fake-governance-plugin\/src\/main\/java\/ce\/ws\/BombActivatorAction.java":[{"add":["22","import java.util.Arrays;","27","import static java.util.stream.Collectors.toList;","28","","46","      .setPossibleValues(Arrays.stream(BombType.values()).map(Enum::toString).collect(toList()));","53","    bombConfig.reset();","55","      case ISE_START:","56","        bombConfig.setIseStartBomb(true);","57","        break;","58","      case OOM_START:","59","        bombConfig.setOomStartBomb(true);","60","        break;","61","      case ISE_STOP:","64","      case OOM_STOP:","77","    NONE, OOM_START, ISE_START, OOM_STOP, ISE_STOP"],"delete":["43","      .setPossibleValues(\"OOM\", \"ISE\", \"NONE\");","50","    bombConfig.setIseStopBomb(false);","51","    bombConfig.setOomStopBomb(false);","53","      case ISE:","56","      case OOM:","69","    NONE, OOM, ISE"]}],"tests\/plugins\/fake-governance-plugin\/src\/main\/java\/ce\/ws\/SubmitAction.java":[{"add":["54","    ceQueue.submit(submit.build());"],"delete":["25","import org.sonar.ce.queue.CeTask;","55","    CeTask ceTask = ceQueue.submit(submit.build());"]}],"tests\/src\/test\/java\/org\/sonarqube\/tests\/ce\/CeWorkersTest.java":[{"add":["40","import org.junit.After;","42","import org.junit.Before;","103","  @Before","104","  public void setup() throws Exception {","105","    unlockWorkersAndResetWorkerCount();","106","  }","107","","108","  @After","109","  public void tearDown() throws Exception {","110","    unlockWorkersAndResetWorkerCount();","111","  }","112","","113","  private void unlockWorkersAndResetWorkerCount() throws IOException {","114","    RandomAccessFile randomAccessFile = null;","115","    try {","116","      randomAccessFile = new RandomAccessFile(sharedMemory, \"rw\");","117","      MappedByteBuffer mappedByteBuffer = initMappedByteBuffer(randomAccessFile);","118","      releaseAnyAnalysisWithFakeGovernancePlugin(mappedByteBuffer);","119","      updateWorkerCount(1);","120","    } finally {","121","      close(randomAccessFile);","122","    }","123","  }","124","","175","  public void ce_worker_is_resilient_to_OOM_and_RuntimeException_when_starting_or_stopping_analysis_report_container() throws IOException {","176","    int initSuccessReportTaskCount = adminWsClient.ce().activity(new ActivityWsRequest()","177","      .setType(\"REPORT\")","178","      .setStatus(ImmutableList.of(\"SUCCESS\")))","179","      .getTasksCount();","180","    int initFailedReportTaskCount = adminWsClient.ce().activity(new ActivityWsRequest()","181","      .setType(\"REPORT\")","182","      .setStatus(ImmutableList.of(\"FAILED\")))","183","      .getTasksCount();","185","    SonarScanner sonarRunner = SonarScanner.create(ItUtils.projectDir(\"shared\/xoo-sample\"));","186","    orchestrator.executeBuild(sonarRunner, true);","188","    enableComponentBomb(\"OOM_STOP\");","190","    orchestrator.executeBuild(sonarRunner, true);","192","    enableComponentBomb(\"NONE\");","194","    orchestrator.executeBuild(sonarRunner, true);","196","    enableComponentBomb(\"ISE_START\");","198","    orchestrator.executeBuild(sonarRunner, true);","200","    enableComponentBomb(\"NONE\");","202","    orchestrator.executeBuild(sonarRunner, true);","204","    enableComponentBomb(\"ISE_STOP\");","206","    orchestrator.executeBuild(sonarRunner, true);","207","","208","    enableComponentBomb(\"NONE\");","209","","210","    orchestrator.executeBuild(sonarRunner, true);","211","","212","    enableComponentBomb(\"OOM_START\");","213","","214","    orchestrator.executeBuild(sonarRunner, true);","215","","216","    enableComponentBomb(\"NONE\");","217","","218","    orchestrator.executeBuild(sonarRunner, true);","219","","220","    \/\/ failure while starting components does fail the tasks","221","    assertThat(adminWsClient.ce().activity(new ActivityWsRequest()","222","      .setType(\"REPORT\")","223","      .setStatus(ImmutableList.of(\"FAILED\")))","224","      .getTasksCount())","225","        .isEqualTo(initFailedReportTaskCount + 2);","226","","227","    \/\/ failure while stopping components does not fail the tasks","228","    assertThat(adminWsClient.ce().activity(new ActivityWsRequest()","229","      .setType(\"REPORT\")","230","      .setStatus(ImmutableList.of(\"SUCCESS\")))","231","      .getTasksCount())","232","        .isEqualTo(initSuccessReportTaskCount + 7);","233","","382","    int delay = 200;","383","    int timeout = 5 * 10; \/\/ 10 seconds","384","    int i = 0;","387","      Thread.sleep(delay);","391","      i++;","392","    } while (i <= timeout && tasksCount > 0);","393","    assertThat(tasksCount).describedAs(\"Failed to get to an empty CE queue in a timely fashion\").isZero();"],"delete":["151","  public void ce_worker_is_resilient_to_OOM_and_RuntimeException_when_stopping_analysis_report_container() throws IOException {","153","    RandomAccessFile randomAccessFile = null;","154","    try {","155","      randomAccessFile = new RandomAccessFile(sharedMemory, \"rw\");","156","      MappedByteBuffer mappedByteBuffer = initMappedByteBuffer(randomAccessFile);","157","      releaseAnyAnalysisWithFakeGovernancePlugin(mappedByteBuffer);","159","      SonarScanner sonarRunner = SonarScanner.create(ItUtils.projectDir(\"shared\/xoo-sample\"));","160","      orchestrator.executeBuild(sonarRunner, true);","162","      enableComponentBomb(\"OOM\");","164","      orchestrator.executeBuild(sonarRunner, true);","166","      enableComponentBomb(\"NONE\");","168","      orchestrator.executeBuild(sonarRunner, true);","170","      enableComponentBomb(\"ISE\");","172","      orchestrator.executeBuild(sonarRunner, true);","174","      enableComponentBomb(\"NONE\");","176","      orchestrator.executeBuild(sonarRunner, true);","178","      assertThat(adminWsClient.ce().activity(new ActivityWsRequest()","179","        .setType(\"REPORT\")","180","        .setStatus(ImmutableList.of(\"SUCCESS\")))","181","        .getTasksCount())","182","          .isEqualTo(5);","183","    } finally {","184","      close(randomAccessFile);","185","    }","336","      Thread.sleep(100);","340","    } while (tasksCount > 0);"]}],"tests\/plugins\/fake-governance-plugin\/src\/main\/java\/ce\/BombConfig.java":[{"add":["29","  private static final String OOM_START_BOMB_KEY = \"oomStartBomb\";","30","  private static final String ISE_START_BOMB_KEY = \"iseStartBomb\";","40","  public void reset() {","41","    try (DbSession dbSession = dbClient.openSession(false)) {","42","      dbClient.internalPropertiesDao().save(dbSession, OOM_START_BOMB_KEY, String.valueOf(false));","43","      dbClient.internalPropertiesDao().save(dbSession, ISE_START_BOMB_KEY, String.valueOf(false));","44","      dbClient.internalPropertiesDao().save(dbSession, OOM_STOP_BOMB_KEY, String.valueOf(false));","45","      dbClient.internalPropertiesDao().save(dbSession, ISE_STOP_BOMB_KEY, String.valueOf(false));","46","      dbSession.commit();","47","    }","48","  }","49","","50","  public boolean isOomStartBomb() {","51","    try (DbSession dbSession = dbClient.openSession(false)) {","52","      return dbClient.internalPropertiesDao().selectByKey(dbSession, OOM_START_BOMB_KEY).map(Boolean::valueOf).orElse(false);","53","    }","54","  }","55","","56","  public void setOomStartBomb(boolean oomStartBomb) {","57","    try (DbSession dbSession = dbClient.openSession(false)) {","58","      dbClient.internalPropertiesDao().save(dbSession, OOM_START_BOMB_KEY, String.valueOf(oomStartBomb));","59","      dbSession.commit();","60","    }","61","  }","62","","63","  public boolean isIseStartBomb() {","64","    try (DbSession dbSession = dbClient.openSession(false)) {","65","      return dbClient.internalPropertiesDao().selectByKey(dbSession, ISE_START_BOMB_KEY).map(Boolean::valueOf).orElse(false);","66","    }","67","  }","68","","69","  public void setIseStartBomb(boolean iseStartBomb) {","70","    try (DbSession dbSession = dbClient.openSession(false)) {","71","      dbClient.internalPropertiesDao().save(dbSession, ISE_START_BOMB_KEY, String.valueOf(iseStartBomb));","72","      dbSession.commit();","73","    }","74","  }","75",""],"delete":[]}]}},"f2bf93dff30ed93fbce24dcf2078801e2544d008":{"changes":{"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/BuildComponentTreeStepTest.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/component\/ComponentTreeBuilder.java":"MODIFY"},"diff":{"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/BuildComponentTreeStepTest.java":[{"add":["196","  \/**","197","   * SONAR-13262","198","   *\/","199","  @Test","200","  public void verify_tree_is_correctly_built_in_prs_with_repeated_names() {","201","    setAnalysisMetadataHolder(true);","202","    reportReader.putComponent(component(ROOT_REF, PROJECT, REPORT_PROJECT_KEY, FILE_1_REF));","203","    reportReader.putComponent(componentWithPath(FILE_1_REF, FILE, REPORT_PROJECT_KEY + \"\/file.js\"));","204","","205","    TestComputationStepContext context = new TestComputationStepContext();","206","    underTest.execute(context);","207","","208","    \/\/ modified root","209","    Component mRoot = treeRootHolder.getRoot();","210","    verifyComponent(mRoot, Component.Type.PROJECT, ROOT_REF, 1);","211","","212","    Component dir = mRoot.getChildren().get(0);","213","    assertThat(dir.getName()).isEqualTo(REPORT_PROJECT_KEY);","214","    assertThat(dir.getShortName()).isEqualTo(REPORT_PROJECT_KEY);","215","","216","    verifyComponent(dir, Component.Type.DIRECTORY, null, 1);","217","  }","218","","298","    setAnalysisMetadataHolder();","519","      .setName(key)","581","      .setProject(Project.from(newPrivateProjectDto(newOrganizationDto()).setDbKey(REPORT_PROJECT_KEY).setName(REPORT_PROJECT_KEY)));"],"delete":["275","    Branch branch = new DefaultBranchImpl();","276","    analysisMetadataHolder.setRootComponentRef(ROOT_REF)","277","      .setAnalysisDate(ANALYSIS_DATE)","278","      .setProject(Project.from(newPrivateProjectDto(newOrganizationDto()).setDbKey(REPORT_PROJECT_KEY)))","279","      .setBranch(branch);","561","      .setProject(Project.from(newPrivateProjectDto(newOrganizationDto()).setDbKey(REPORT_PROJECT_KEY)));"]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/component\/ComponentTreeBuilder.java":[{"add":["215","    return buildChangedComponentTree(project);","219","  private static Component buildChangedComponentTree(Component component) {","224","        return buildChangedDirectory(component);","233","    return changedComponentBuilder(component, \"\")","240","  private static Component buildChangedDirectory(Component component) {","248","      String shortName = component.getShortName() + \"\/\" + child.getShortName();","249","      return changedComponentBuilder(child, shortName)","253","      return changedComponentBuilder(component, component.getShortName())","261","      .map(ComponentTreeBuilder::buildChangedComponentTree)","266","  private static ComponentImpl.Builder changedComponentBuilder(Component component, String newShortName) {","274","      .setShortName(newShortName)"],"delete":["215","    return buildChangedComponentTree(project, \"\");","219","  private static Component buildChangedComponentTree(Component component, String parentPath) {","224","        return buildChangedDirectory(component, parentPath);","233","    return changedComponentBuilder(component, \"\", \"\")","240","  private static Component buildChangedDirectory(Component component, String parentPath) {","248","      return changedComponentBuilder(child, parentPath, child.getName())","252","      return changedComponentBuilder(component, parentPath, component.getName())","260","      .map(c -> ComponentTreeBuilder.buildChangedComponentTree(c, component.getName()))","265","  private static ComponentImpl.Builder changedComponentBuilder(Component component, String parentPath, String path) {","273","      .setShortName(removeStart(removeStart(path, parentPath), \"\/\"))"]}]}},"7f61d01d4fee20274e53f93c8fcbfd29f6f273be":{"changes":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/metric\/MetricDtoTest.java":"MODIFY","\/dev\/null":"DELETE","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/metric\/MetricDto.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/metric\/MetricValidator.java":"ADD"},"diff":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/metric\/MetricDtoTest.java":[{"add":["111","","112","  @Test","113","  public void fail_if_domain_longer_than_64_characters() {","114","    String a65 = repeat(\"a\", 65);","115","","116","    expectedException.expect(IllegalArgumentException.class);","117","    expectedException.expectMessage(\"Metric domain length (65) is longer than the maximum authorized (64). '\" + a65 + \"' was provided.\");","118","","119","    underTest.setDomain(a65);","120","  }"],"delete":[]}],"\/dev\/null":[{"add":[],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/metric\/MetricDto.java":[{"add":["27","import static org.sonar.db.metric.MetricValidator.checkMetricDescription;","28","import static org.sonar.db.metric.MetricValidator.checkMetricDomain;","29","import static org.sonar.db.metric.MetricValidator.checkMetricKey;","30","import static org.sonar.db.metric.MetricValidator.checkMetricName;","80","    this.kee = checkMetricKey(key);","89","    this.shortName = checkMetricName(shortName);","111","    this.description = checkMetricDescription(description);","121","    this.domain = checkMetricDomain(domain);"],"delete":["27","import static org.sonar.db.metric.MetricDtoValidator.validateDescription;","28","import static org.sonar.db.metric.MetricDtoValidator.validateKey;","29","import static org.sonar.db.metric.MetricDtoValidator.validateShortName;","79","    this.kee = validateKey(key);","88","    this.shortName = validateShortName(shortName);","110","    this.description = validateDescription(description);","120","    this.domain = domain;"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/metric\/MetricValidator.java":[{"add":[],"delete":[]}]}},"f19752352309f50f99510a5d44c2c6f3d2f63ec9":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/source-viewer\/measures-overlay.js":"MODIFY","server\/sonar-web\/src\/main\/js\/widgets\/old\/treemap.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/source-viewer\/measures-overlay.js":[{"add":["23","import { getMeasures } from '..\/..\/api\/measures';","24","import { getMetrics } from '..\/..\/api\/metrics';","25","import { formatMeasure } from '..\/..\/helpers\/measures';","32","    this.testsScroll = 0;","37","    Promise.all(requests).then(() => this.render());","123","        (Number(measures.sqale_index_raw) || 0) +","124","        (Number(measures.reliability_remediation_effort_raw) || 0) +","125","        (Number(measures.security_remediation_effort_raw) || 0);","158","    return getMetrics().then(metrics => {","159","      const metricsToRequest = metrics","160","          .filter(metric => metric.type !== 'DATA' && !metric.hidden)","161","          .map(metric => metric.key);","162","","163","      return getMeasures(this.model.key(), metricsToRequest).then(measures => {","164","        let nextMeasures = this.model.get('measures') || {};","165","        measures.forEach(measure => {","166","          const metric = metrics.find(metric => metric.key === measure.metric);","167","          nextMeasures[metric.key] = formatMeasure(measure.value, metric.type);","168","          nextMeasures[metric.key + '_raw'] = measure.value;","169","          metric.value = nextMeasures[metric.key];","170","        });","171","        nextMeasures = this.calcAdditionalMeasures(nextMeasures);","172","        this.model.set({","173","          measures: nextMeasures,","174","          measuresToDisplay: this.prepareMetrics(metrics)","175","        });","181","    return new Promise(resolve => {","182","      const that = this;","183","      const url = window.baseUrl + '\/api\/issues\/search';","184","      const options = {","185","        componentUuids: this.model.id,","186","        resolved: false,","187","        ps: 1,","188","        facets: 'types,severities,tags'","189","      };","191","      $.get(url, options).done(function (data) {","192","        const typesFacet = data.facets.find(facet => facet.property === 'types').values;","193","        const typesOrder = ['BUG', 'VULNERABILITY', 'CODE_SMELL'];","194","        const sortedTypesFacet = _.sortBy(typesFacet, function (v) {","195","          return typesOrder.indexOf(v.val);","196","        });","198","        const severitiesFacet = data.facets.find(facet => facet.property === 'severities').values;","199","        const sortedSeveritiesFacet = _.sortBy(severitiesFacet, facet => window.severityComparator(facet.val));","201","        const tagsFacet = data.facets.find(facet => facet.property === 'tags').values;","202","","203","        that.model.set({","204","          tagsFacet,","205","          typesFacet: sortedTypesFacet,","206","          severitiesFacet: sortedSeveritiesFacet,","207","          issuesCount: data.total","208","        });","209","","210","        resolve();","216","    return new Promise(resolve => {","217","      const that = this;","218","      const url = window.baseUrl + '\/api\/tests\/list';","219","      const options = { testFileId: this.model.id };","220","","221","      $.get(url, options).done(function (data) {","222","        that.model.set({ tests: data.tests });","223","        that.testSorting = 'status';","224","        that.testAsc = true;","225","        that.sortTests(function (test) {","226","          return `${that.testsOrder.indexOf(test.status)}_______${test.name}`;","227","        });","228","        resolve();"],"delete":["29","    const that = this;","34","    this.testsScroll = 0;","35","    $.when.apply($, requests).done(function () {","36","      that.render();","37","    });","123","        (measures.sqale_index_raw || 0) +","124","        (measures.reliability_remediation_effort_raw || 0) +","125","        (measures.security_remediation_effort_raw || 0);","158","    const that = this;","159","    const url = window.baseUrl + '\/api\/resources';","160","    const metrics = this.getMetrics();","161","    const options = {","162","      resource: this.model.key(),","163","      metrics: _.pluck(metrics, 'key').join()","164","    };","165","    return $.get(url, options).done(function (data) {","166","      const measuresList = data[0].msr || [];","167","      let measures = that.model.get('measures') || {};","168","      measuresList.forEach(function (m) {","169","        const metric = _.findWhere(metrics, { key: m.key });","170","        metric.value = m.frmt_val || m.data;","171","        measures[m.key] = m.frmt_val || m.data;","172","        measures[m.key + '_raw'] = m.val;","173","      });","174","      measures = that.calcAdditionalMeasures(measures);","175","      that.model.set({","176","        measures,","177","        measuresToDisplay: that.prepareMetrics(metrics)","183","    const that = this;","184","    const url = window.baseUrl + '\/api\/issues\/search';","185","    const options = {","186","      componentUuids: this.model.id,","187","      resolved: false,","188","      ps: 1,","189","      facets: 'types,severities,tags'","190","    };","191","    return $.get(url, options).done(function (data) {","192","      const typesFacet = data.facets.find(facet => facet.property === 'types').values;","193","      const typesOrder = ['BUG', 'VULNERABILITY', 'CODE_SMELL'];","194","      const sortedTypesFacet = _.sortBy(typesFacet, function (v) {","195","        return typesOrder.indexOf(v.val);","196","      });","198","      const severitiesFacet = data.facets.find(facet => facet.property === 'severities').values;","199","      const sortedSeveritiesFacet = _.sortBy(severitiesFacet, facet => window.severityComparator(facet.val));","201","      const tagsFacet = data.facets.find(facet => facet.property === 'tags').values;","203","      that.model.set({","204","        tagsFacet,","205","        typesFacet: sortedTypesFacet,","206","        severitiesFacet: sortedSeveritiesFacet,","207","        issuesCount: data.total","213","    const that = this;","214","    const url = window.baseUrl + '\/api\/tests\/list';","215","    const options = { testFileId: this.model.id };","216","    return $.get(url, options).done(function (data) {","217","      that.model.set({ tests: data.tests });","218","      that.testSorting = 'status';","219","      that.testAsc = true;","220","      that.sortTests(function (test) {","221","        return `${that.testsOrder.indexOf(test.status)}_______${test.name}`;"]}],"server\/sonar-web\/src\/main\/js\/widgets\/old\/treemap.js":[{"add":["20","","22","import { formatMeasure } from '..\/..\/helpers\/measures';","23","import { getChildren } from '..\/..\/api\/components';","300","  Treemap.prototype.formatComponents = function (components, metrics) {","301","    const nextComponents = components","302","        .filter(component => {","303","          const sizeMeasure = component.measures.find(measure => measure.metric === this.sizeMetric.key);","304","          return sizeMeasure != null;","305","        })","306","        .map(component => {","307","          const measures = component.measures.map(measure => {","308","            const metric = metrics.find(metric => metric.key === measure.metric);","309","            return { ...measure, metricType: metric.type };","310","          });","311","          return { ...component, measures };","313","","314","    if (nextComponents.length > 0) {","315","      return nextComponents.map(component => {","317","","318","        component.measures.forEach(measure => {","319","          measures[measure.metric] = {","320","            val: measure.value,","321","            fval: formatMeasure(measure.value, measure.metricType)","324","","326","          key: component.refKey != null ? component.refKey : component.key,","328","          longName: component.name,","337","    return getChildren(d.key, this.metricsPriority(), { additionalFields: 'metrics' }).then(r => {","338","      let components = this.formatComponents(r.components, r.metrics);","340","        components = _.sortBy(components, component => -this.sizeMetric.value(component));","341","        components = _.initial(components, components.length - this.options().maxItems - 1);","342","        this.updateTreemap(components, components.length > this.options().maxItems);","343","        this.addToBreadcrumbs(_.extend(d, {","345","          maxResultsReached: this.maxResultsReached()"],"delete":["19","import $ from 'jquery';","298","  Treemap.prototype.formatComponents = function (data) {","299","    const that = this;","300","    const components = _.filter(data, function (component) {","301","      const hasSizeMetric = function () {","302","        return _.findWhere(component.msr, {","303","          key: that.sizeMetric.key","305","      };","306","      return _.isArray(component.msr) && component.msr.length > 0 && hasSizeMetric();","307","    });","308","    if (_.isArray(components) && components.length > 0) {","309","      return components.map(function (component) {","311","        component.msr.forEach(function (measure) {","312","          measures[measure.key] = {","313","            val: measure.val,","314","            fval: measure.frmt_val,","315","            text: measure.text,","316","            data: measure.data","320","          key: component.copy != null ? component.copy : component.key,","322","          longName: component.lname,","331","    const that = this;","332","    const metrics = this.metricsPriority().join(',');","333","    const RESOURCES_URL = window.baseUrl + '\/api\/resources\/index';","334","    return $.get(RESOURCES_URL, {","335","      resource: d.key,","336","      depth: 1,","337","      metrics","338","    }).done(function (r) {","339","      let components = that.formatComponents(r);","341","        components = _.sortBy(components, function (component) {","342","          return -that.sizeMetric.value(component);","343","        });","344","        components = _.initial(components, components.length - that.options().maxItems - 1);","345","        that.updateTreemap(components, components.length > that.options().maxItems);","346","        return that.addToBreadcrumbs(_.extend(d, {","348","          maxResultsReached: that.maxResultsReached()"]}]}},"011a9f5a8775fad7400e476577fa4527c234e15a":{"changes":{"it\/it-tests\/src\/test\/java\/it\/analysis\/SSLTest.java":"ADD","it\/it-tests\/src\/test\/resources\/analysis\/SSLTest\/README":"ADD","it\/it-tests\/src\/test\/resources\/analysis\/SSLTest\/clienttruststore.jks":"ADD","it\/it-tests\/src\/test\/resources\/analysis\/SSLTest\/serverkeystore.jks":"ADD","it\/it-tests\/src\/test\/java\/it\/Category3Suite.java":"MODIFY","it\/it-tests\/pom.xml":"MODIFY","it\/it-tests\/src\/test\/resources\/analysis\/SSLTest\/clientkeystore.jks":"ADD","it\/it-tests\/src\/test\/resources\/analysis\/SSLTest\/servertruststore.jks":"ADD","it\/it-tests\/src\/test\/resources\/analysis\/SSLTest\/openssl.cnf":"ADD","sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/HttpConnector.java":"MODIFY"},"diff":{"it\/it-tests\/src\/test\/java\/it\/analysis\/SSLTest.java":[{"add":[],"delete":[]}],"it\/it-tests\/src\/test\/resources\/analysis\/SSLTest\/README":[{"add":[],"delete":[]}],"it\/it-tests\/src\/test\/resources\/analysis\/SSLTest\/clienttruststore.jks":[{"add":[],"delete":[]}],"it\/it-tests\/src\/test\/resources\/analysis\/SSLTest\/serverkeystore.jks":[{"add":[],"delete":[]}],"it\/it-tests\/src\/test\/java\/it\/Category3Suite.java":[{"add":["32","import it.analysis.SSLTest;","58","  SSLTest.class,"],"delete":[]}],"it\/it-tests\/pom.xml":[{"add":["16","    <jetty.version>9.3.11.v20160721<\/jetty.version>","117","    ","118","    <!-- SSL tests -->","119","    <dependency>","120","      <groupId>org.eclipse.jetty<\/groupId>","121","      <artifactId>jetty-server<\/artifactId>","122","      <version>${jetty.version}<\/version>","123","    <\/dependency>","124","    <dependency>","125","      <groupId>org.eclipse.jetty<\/groupId>","126","      <artifactId>jetty-servlet<\/artifactId>","127","      <version>${jetty.version}<\/version>","128","    <\/dependency>","129","    <dependency>","130","      <groupId>org.eclipse.jetty<\/groupId>","131","      <artifactId>jetty-proxy<\/artifactId>","132","      <version>${jetty.version}<\/version>","133","    <\/dependency>","134","    <dependency>","135","      <groupId>org.sonarsource.scanner.cli<\/groupId>","136","      <artifactId>sonar-scanner-cli<\/artifactId>","137","      <version>2.7<\/version>","138","      <type>zip<\/type>","139","    <\/dependency>"],"delete":[]}],"it\/it-tests\/src\/test\/resources\/analysis\/SSLTest\/clientkeystore.jks":[{"add":[],"delete":[]}],"it\/it-tests\/src\/test\/resources\/analysis\/SSLTest\/servertruststore.jks":[{"add":[],"delete":[]}],"it\/it-tests\/src\/test\/resources\/analysis\/SSLTest\/openssl.cnf":[{"add":[],"delete":[]}],"sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/HttpConnector.java":[{"add":["21","import java.io.FileInputStream;","24","import java.security.GeneralSecurityException;","25","import java.security.KeyStore;","26","import java.util.Arrays;","31","import javax.net.ssl.KeyManager;","32","import javax.net.ssl.KeyManagerFactory;","33","import javax.net.ssl.SSLContext;","34","import javax.net.ssl.SSLSocketFactory;","35","import javax.net.ssl.TrustManager;","36","import javax.net.ssl.TrustManagerFactory;","37","import javax.net.ssl.X509TrustManager;","65","  private static final String NONE = \"NONE\";","66","  private static final String P11KEYSTORE = \"PKCS11\";","115","    X509TrustManager systemDefaultTrustManager = systemDefaultTrustManager();","116","    okHttpClientBuilder.sslSocketFactory(systemDefaultSslSocketFactory(systemDefaultTrustManager), systemDefaultTrustManager);","121","  private static X509TrustManager systemDefaultTrustManager() {","122","    try {","123","      TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());","124","      trustManagerFactory.init((KeyStore) null);","125","      TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();","126","      if (trustManagers.length != 1 || !(trustManagers[0] instanceof X509TrustManager)) {","127","        throw new IllegalStateException(\"Unexpected default trust managers:\" + Arrays.toString(trustManagers));","128","      }","129","      return (X509TrustManager) trustManagers[0];","130","    } catch (GeneralSecurityException e) {","131","      \/\/ The system has no TLS. Just give up.","132","      throw new AssertionError(e);","133","    }","134","  }","135","","136","  private static SSLSocketFactory systemDefaultSslSocketFactory(X509TrustManager trustManager) {","137","    KeyManager[] defaultKeyManager;","138","    try {","139","      defaultKeyManager = getDefaultKeyManager();","140","    } catch (Exception e) {","141","      throw new IllegalStateException(\"Unable to get default key manager\", e);","142","    }","143","    try {","144","      SSLContext sslContext = SSLContext.getInstance(\"TLS\");","145","      sslContext.init(defaultKeyManager, new TrustManager[] {trustManager}, null);","146","      return sslContext.getSocketFactory();","147","    } catch (GeneralSecurityException e) {","148","      \/\/ The system has no TLS. Just give up.","149","      throw new AssertionError(e);","150","    }","151","  }","152","","153","  private static void logDebug(String msg) {","154","    boolean debugEnabled = \"all\".equals(System.getProperty(\"javax.net.debug\"));","155","    if (debugEnabled) {","156","      System.out.println(msg);","157","    }","158","  }","159","","160","  \/**","161","   * Inspired from sun.security.ssl.SSLContextImpl#getDefaultKeyManager()","162","   *\/","163","  private static synchronized KeyManager[] getDefaultKeyManager() throws Exception {","164","","165","    final String defaultKeyStore = System.getProperty(\"javax.net.ssl.keyStore\", \"\");","166","    String defaultKeyStoreType = System.getProperty(\"javax.net.ssl.keyStoreType\", KeyStore.getDefaultType());","167","    String defaultKeyStoreProvider = System.getProperty(\"javax.net.ssl.keyStoreProvider\", \"\");","168","","169","    logDebug(\"keyStore is : \" + defaultKeyStore);","170","    logDebug(\"keyStore type is : \" + defaultKeyStoreType);","171","    logDebug(\"keyStore provider is : \" + defaultKeyStoreProvider);","172","","173","    if (P11KEYSTORE.equals(defaultKeyStoreType) && !NONE.equals(defaultKeyStore)) {","174","      throw new IllegalArgumentException(\"if keyStoreType is \" + P11KEYSTORE + \", then keyStore must be \" + NONE);","175","    }","176","","177","    KeyStore ks = null;","178","    String defaultKeyStorePassword = System.getProperty(\"javax.net.ssl.keyStorePassword\", \"\");","179","    char[] passwd = defaultKeyStorePassword.isEmpty() ? null : defaultKeyStorePassword.toCharArray();","180","","181","    \/**","182","     * Try to initialize key store.","183","     *\/","184","    if (!defaultKeyStoreType.isEmpty()) {","185","      logDebug(\"init keystore\");","186","      if (defaultKeyStoreProvider.isEmpty()) {","187","        ks = KeyStore.getInstance(defaultKeyStoreType);","188","      } else {","189","        ks = KeyStore.getInstance(defaultKeyStoreType, defaultKeyStoreProvider);","190","      }","191","      if (!defaultKeyStore.isEmpty() && !NONE.equals(defaultKeyStore)) {","192","        try (FileInputStream fs = new FileInputStream(defaultKeyStore)) {","193","          ks.load(fs, passwd);","194","        }","195","      } else {","196","        ks.load(null, passwd);","197","      }","198","    }","199","","200","    \/*","201","     * Try to initialize key manager.","202","     *\/","203","    logDebug(\"init keymanager of type \" + KeyManagerFactory.getDefaultAlgorithm());","204","    KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());","205","","206","    if (P11KEYSTORE.equals(defaultKeyStoreType)) {","207","      \/\/ do not pass key passwd if using token","208","      kmf.init(ks, null);","209","    } else {","210","      kmf.init(ks, passwd);","211","    }","212","","213","    return kmf.getKeyManagers();","214","  }","215",""],"delete":[]}]}},"5d3d62b840255f41ecb079271f6c3df3187da468":{"changes":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/measures\/app.js":"MODIFY"},"diff":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["569","# MEASURES & MEASURE FILTERS","572","measures.select_components=Please select \"Components\", \"Components of\" or \"Favorites only\" filter to see results."],"delete":["569","# MEASURE FILTERS"]}],"server\/sonar-web\/src\/main\/js\/apps\/measures\/app.js":[{"add":["84","const showAlert = text => {","85","  const alert = document.createElement('div');","86","  alert.classList.add('alert', 'alert-warning');","87","  alert.textContent = text;","88","","89","  const container = document.querySelector('.navigator-details');","90","  container.insertBefore(alert, container.firstChild);","91","};","92","","180","","181","  if (window.queryParams) {","182","    const qualifiersFilter = window.queryParams.find(p => p.key === 'qualifiers[]');","183","    const noQualifiers = !qualifiersFilter || !qualifiersFilter.value || !qualifiersFilter.value.length;","184","","185","    const baseFilter = window.queryParams.find(p => p.key === 'base');","186","    const noBase = !baseFilter || !baseFilter.value || !baseFilter.value.length;","187","","188","    const favoritesFilter = window.queryParams.find(p => p.key === 'onFavourites');","189","    const noFavorites = !favoritesFilter || !favoritesFilter.value;","190","","191","    if (noQualifiers && noBase && noFavorites) {","192","      showAlert(translate('measures.select_components'));","193","    }","194","  }"],"delete":[]}]}},"b8ef8b4f80219e756f9a0f6a84243104b51387c7":{"changes":{"sonar-db\/src\/main\/java\/org\/sonar\/db\/version\/MigrationStepModule.java":"MODIFY","sonar-db\/src\/main\/java\/org\/sonar\/db\/version\/v56\/UpdateUsersExternalIdentityWhenEmpty.java":"ADD","sonar-db\/src\/test\/java\/org\/sonar\/db\/version\/v56\/UpdateUsersExternalIdentityWhenEmptyTest.java":"ADD","sonar-db\/src\/test\/java\/org\/sonar\/db\/version\/MigrationStepModuleTest.java":"MODIFY","server\/sonar-web\/src\/main\/webapp\/WEB-INF\/db\/migrate\/1153_update_users_external_identity_when_empty.rb":"ADD","sonar-db\/src\/main\/java\/org\/sonar\/db\/version\/DatabaseVersion.java":"MODIFY","sonar-db\/src\/test\/resources\/org\/sonar\/db\/version\/v56\/UpdateUsersExternalIdentityWhenEmptyTest\/schema.sql":"ADD","sonar-db\/src\/main\/resources\/org\/sonar\/db\/version\/rows-h2.sql":"MODIFY"},"diff":{"sonar-db\/src\/main\/java\/org\/sonar\/db\/version\/MigrationStepModule.java":[{"add":["85","import org.sonar.db.version.v56.UpdateUsersExternalIdentityWhenEmpty;","168","      FixLengthOfIssuesMessageOnOracle.class,","169","      UpdateUsersExternalIdentityWhenEmpty.class);"],"delete":["167","      FixLengthOfIssuesMessageOnOracle.class);"]}],"sonar-db\/src\/main\/java\/org\/sonar\/db\/version\/v56\/UpdateUsersExternalIdentityWhenEmpty.java":[{"add":[],"delete":[]}],"sonar-db\/src\/test\/java\/org\/sonar\/db\/version\/v56\/UpdateUsersExternalIdentityWhenEmptyTest.java":[{"add":[],"delete":[]}],"sonar-db\/src\/test\/java\/org\/sonar\/db\/version\/MigrationStepModuleTest.java":[{"add":["31","    assertThat(container.size()).isEqualTo(66);"],"delete":["31","    assertThat(container.size()).isEqualTo(65);"]}],"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/db\/migrate\/1153_update_users_external_identity_when_empty.rb":[{"add":[],"delete":[]}],"sonar-db\/src\/main\/java\/org\/sonar\/db\/version\/DatabaseVersion.java":[{"add":["32","  public static final int LAST_VERSION = 1_153;"],"delete":["32","  public static final int LAST_VERSION = 1_152;"]}],"sonar-db\/src\/test\/resources\/org\/sonar\/db\/version\/v56\/UpdateUsersExternalIdentityWhenEmptyTest\/schema.sql":[{"add":[],"delete":[]}],"sonar-db\/src\/main\/resources\/org\/sonar\/db\/version\/rows-h2.sql":[{"add":["408","INSERT INTO SCHEMA_MIGRATIONS(VERSION) VALUES ('1153');"],"delete":[]}]}},"dd51ac2553e1613e7ea3cd5e8c41cce2803f488c":{"changes":{"server\/sonar-web\/src\/main\/js\/helpers\/measures.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/helpers\/measures.js":[{"add":["183","  return value === 100 ? '100%' : numeral(value \/ 100).format('0,0.0%');"],"delete":["183","  return numeral(value \/ 100).format('0,0.0%');"]}]}},"8f24ad80368cc005c78eb9fc83e4f23823048e16":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/ce\/ws\/ActivityActionTest.java":"MODIFY","sonar-db\/src\/main\/java\/org\/sonar\/db\/component\/ComponentTreeQuery.java":"MODIFY","sonar-db\/src\/main\/java\/org\/sonar\/db\/ce\/CeTaskQuery.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/ce\/ws\/ActivityActionTest.java":[{"add":[],"delete":["151","    System.out.println(EXECUTED_AT + \" - \" + today);"]}],"sonar-db\/src\/main\/java\/org\/sonar\/db\/component\/ComponentTreeQuery.java":[{"add":["23","import java.util.ArrayList;","34","import static com.google.common.collect.Lists.newArrayList;","42","  \/\/ SONAR-7681 a public implementation of List must be used in MyBatis - potential concurrency exceptions otherwise","44","  private final ArrayList<String> qualifiers;","56","    this.qualifiers = builder.qualifiers == null ? null : newArrayList(builder.qualifiers);"],"delete":["41","  private final Collection<String> qualifiers;","53","    this.qualifiers = builder.qualifiers;"]}],"sonar-db\/src\/main\/java\/org\/sonar\/db\/ce\/CeTaskQuery.java":[{"add":["21","import java.util.ArrayList;","27","import static com.google.common.collect.Lists.newArrayList;","37","  \/\/ SONAR-7681 a public implementation of List must be used in MyBatis - potential concurrency exceptions otherwise","38","  private ArrayList<String> componentUuids;","39","  private ArrayList<String> statuses;","50","    this.componentUuids = l == null ? null : newArrayList(l);","62","      this.componentUuids = newArrayList(s);","82","    this.statuses = statuses == null ? null : newArrayList(statuses);"],"delete":["26","import static java.util.Collections.singletonList;","36","  private List<String> componentUuids;","37","  private List<String> statuses;","48","    this.componentUuids = l;","60","      this.componentUuids = singletonList(s);","80","    this.statuses = statuses;"]}]}},"527a13d12e2457845d2631e2615181f6173c13bc":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualityprofile\/ws\/ExportAction.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/qualityprofile\/ws\/ExportActionTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualityprofile\/ws\/ExportAction.java":[{"add":["91","      .setDeprecatedKey(\"name\", \"6.6\")"],"delete":["91","      .setDeprecatedKey(\"profileName\", \"6.6\")"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/qualityprofile\/ws\/ExportActionTest.java":[{"add":["51","import static org.sonarqube.ws.client.qualityprofile.QualityProfileWsParameters.PARAM_LANGUAGE;","76","","80","","84","","87","    assertThat(name.deprecatedKey()).isEqualTo(\"name\");","88",""],"delete":["50","import static org.sonarqube.ws.client.qualityprofile.QualityProfileWsParameters.PARAM_LANGUAGE;"]}]}},"fe5472dfe520e0681034fbd9996ccd030627b09b":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/__tests__\/__snapshots__\/RuleListItem-test.tsx.snap":"ADD","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/__tests__\/RuleListItem-test.tsx":"ADD","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/RuleListItem.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/App.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/__tests__\/__snapshots__\/RuleListItem-test.tsx.snap":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/__tests__\/RuleListItem-test.tsx":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/RuleListItem.tsx":[{"add":["35","import { getRuleUrl } from '..\/..\/..\/helpers\/urls';","42","  onOpen: (ruleKey: string) => void;","71","  handleNameClick = (event: React.MouseEvent) => {","72","    \/\/ cmd(ctrl) + click should open a rule permalink in a new tab","73","    const isLeftClickEvent = event.button === 0;","74","    const isModifiedEvent = !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);","75","    if (isModifiedEvent || !isLeftClickEvent) {","76","      return;","77","    }","78","","79","    event.preventDefault();","80","    this.props.onOpen(this.props.rule.key);","81","  };","82","","193","                  <Link","194","                    className=\"link-no-underline\"","195","                    onClick={this.handleNameClick}","196","                    to={getRuleUrl(rule.key, this.props.organization)}>"],"delete":["42","  path: { pathname: string; query: { [x: string]: any } };","180","                  <Link className=\"link-no-underline\" to={this.props.path}>"]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/App.tsx":[{"add":["22","import { withRouter, WithRouterProps } from 'react-router';","70","interface OwnProps extends WithRouterProps {","97","    organizationsEnabled: PropTypes.bool","350","      this.props.router.replace(path);","352","      this.props.router.push(path);","364","    this.props.router.push({","407","  handleRuleOpen = (ruleKey: string) => {","408","    this.props.router.push(this.getRulePath(ruleKey));","409","  };","410","","418","    this.props.router.push({","434","  handleReset = () => this.props.router.push({ pathname: this.props.location.pathname });","588","                      onOpen={this.handleRuleOpen}","641","export default withRouter(connect<StateToProps, {}, OwnProps>(mapStateToProps)(App));"],"delete":["69","interface OwnProps {","70","  location: { pathname: string; query: RawQuery };","97","    organizationsEnabled: PropTypes.bool,","98","    router: PropTypes.object.isRequired","351","      this.context.router.replace(path);","353","      this.context.router.push(path);","365","    this.context.router.push({","415","    this.context.router.push({","431","  handleReset = () => this.context.router.push({ pathname: this.props.location.pathname });","586","                      path={this.getRulePath(rule.key)}","638","export default connect<StateToProps, {}, OwnProps>(mapStateToProps)(App);"]}]}},"2c36adcf2180253e3cd6832d6fb454e580a42cd2":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/background-tasks\/components\/__tests__\/__snapshots__\/TaskComponent-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/background-tasks\/components\/__tests__\/TaskComponent-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/background-tasks\/components\/TaskComponent.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/background-tasks\/components\/__tests__\/__snapshots__\/TaskComponent-test.tsx.snap":[{"add":["2","exports[`renders correctly 1`] = `","35","exports[`renders correctly 2`] = `","48","exports[`renders correctly for branches and pullrequest 1`] = `","50","  <ShortLivingBranchIcon","52","  \/>","62","        \"pathname\": \"\/project\/issues\",","64","          \"branch\": \"feature\",","66","          \"resolved\": \"false\",","94","","95","exports[`renders correctly for branches and pullrequest 2`] = `","96","<td>","97","  <LongLivingBranchIcon","98","    className=\"little-spacer-right\"","99","  \/>","100","  <Connect(Organization)","101","    organizationKey=\"org\"","102","  \/>","103","  <Link","104","    className=\"spacer-right\"","105","    onlyActiveOnIndex={false}","106","    style={Object {}}","107","    to={","108","      Object {","109","        \"pathname\": \"\/dashboard\",","110","        \"query\": Object {","111","          \"branch\": \"branch-6.7\",","112","          \"id\": \"foo\",","113","        },","114","      }","115","    }","116","  >","117","    foo","118","    <span","119","      className=\"text-limited text-text-top\"","120","      title=\"branch-6.7\"","121","    >","122","      <span","123","        style={","124","          Object {","125","            \"marginLeft\": 5,","126","            \"marginRight\": 5,","127","          }","128","        }","129","      >","130","        \/","131","      <\/span>","132","      branch-6.7","133","    <\/span>","134","  <\/Link>","135","  <TaskType","136","    type=\"REPORT\"","137","  \/>","138","<\/td>","139","`;","140","","141","exports[`renders correctly for branches and pullrequest 3`] = `","142","<td>","143","  <PullRequestIcon","144","    className=\"little-spacer-right\"","145","  \/>","146","  <Connect(Organization)","147","    organizationKey=\"org\"","148","  \/>","149","  <Link","150","    className=\"spacer-right\"","151","    onlyActiveOnIndex={false}","152","    style={Object {}}","153","    to={","154","      Object {","155","        \"pathname\": \"\/project\/issues\",","156","        \"query\": Object {","157","          \"id\": \"foo\",","158","          \"pullRequest\": \"pr-89\",","159","          \"resolved\": \"false\",","160","        },","161","      }","162","    }","163","  >","164","    foo","165","    <Tooltip>","166","      <span","167","        className=\"text-limited text-text-top\"","168","      >","169","        <span","170","          style={","171","            Object {","172","              \"marginLeft\": 5,","173","              \"marginRight\": 5,","174","            }","175","          }","176","        >","177","          \/","178","        <\/span>","179","        pr-89","180","      <\/span>","181","    <\/Tooltip>","182","  <\/Link>","183","  <TaskType","184","    type=\"REPORT\"","185","  \/>","186","<\/td>","187","`;"],"delete":["2","exports[`renders 1`] = `","35","exports[`renders 2`] = `","48","exports[`renders 3`] = `","50","  <span","52","  >","53","    <QualifierIcon","54","      qualifier=\"TRK\"","55","    \/>","56","  <\/span>","66","        \"pathname\": \"\/dashboard\","]}],"server\/sonar-web\/src\/main\/js\/apps\/background-tasks\/components\/__tests__\/TaskComponent-test.tsx":[{"add":["23","const TASK = {","24","  componentKey: 'foo',","25","  componentName: 'foo',","26","  componentQualifier: 'TRK',","27","  id: 'bar',","28","  organization: 'org',","29","  status: 'PENDING',","30","  submittedAt: '2017-01-01',","31","  type: 'REPORT'","32","};","33","","34","it('renders correctly', () => {","35","  expect(shallow(<TaskComponent task={TASK} \/>)).toMatchSnapshot();","36","  expect(shallow(<TaskComponent task={{ ...TASK, componentKey: undefined }} \/>)).toMatchSnapshot();","37","});","38","","39","it('renders correctly for branches and pullrequest', () => {","40","  expect(","41","    shallow(<TaskComponent task={{ ...TASK, branch: 'feature', branchType: 'SHORT' }} \/>)","42","  ).toMatchSnapshot();","43","  expect(","44","    shallow(<TaskComponent task={{ ...TASK, branch: 'branch-6.7', branchType: 'LONG' }} \/>)","45","  ).toMatchSnapshot();","46","  expect(shallow(<TaskComponent task={{ ...TASK, pullRequest: 'pr-89' }} \/>)).toMatchSnapshot();"],"delete":["23","it('renders', () => {","24","  const task = {","25","    componentKey: 'foo',","26","    componentName: 'foo',","27","    componentQualifier: 'TRK',","28","    id: 'bar',","29","    organization: 'org',","30","    status: 'PENDING',","31","    submittedAt: '2017-01-01',","32","    type: 'REPORT'","33","  };","34","  expect(shallow(<TaskComponent task={task} \/>)).toMatchSnapshot();","35","  expect(shallow(<TaskComponent task={{ ...task, componentKey: undefined }} \/>)).toMatchSnapshot();","36","  expect(shallow(<TaskComponent task={{ ...task, branch: 'feature' }} \/>)).toMatchSnapshot();"]}],"server\/sonar-web\/src\/main\/js\/apps\/background-tasks\/components\/TaskComponent.tsx":[{"add":["94","  if (task.branch) {","95","    if (task.branchType === 'SHORT') {","96","      return getShortLivingBranchUrl(componentKey, task.branch);","97","    } else if (task.branchType === 'LONG') {","98","      return getLongLivingBranchUrl(componentKey, task.branch);","99","    }","103","  return getProjectUrl(componentKey);"],"delete":["94","  if (task.branch && task.branchType === 'SHORT') {","95","    return getShortLivingBranchUrl(componentKey, task.branchType);","96","  } else if (task.branchType && task.branchType === 'LONG') {","97","    return getLongLivingBranchUrl(componentKey, task.branchType);","100","  } else {","101","    return getProjectUrl(componentKey);"]}]}},"a22bc323f8d43fb243031ead669c5ff876f75c0a":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/App.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/App.tsx":[{"add":["58","const LIMIT_BEFORE_LOAD_MORE = 5;","290","    const { rules, loading, paging } = this.state;","292","    if (selectedIndex !== undefined) {","293","      if (","294","        selectedIndex > rules.length - LIMIT_BEFORE_LOAD_MORE &&","295","        !loading &&","296","        paging &&","297","        rules.length < paging.total","298","      ) {","299","        this.fetchMoreRules();","300","      }","301","      if (rules && selectedIndex < rules.length - 1) {","302","        if (this.state.openRule) {","303","          this.openRule(rules[selectedIndex + 1].key);","304","        } else {","305","          this.setState({ selected: rules[selectedIndex + 1].key });","306","        }"],"delete":["289","    const { rules } = this.state;","291","    if (rules && selectedIndex !== undefined && selectedIndex < rules.length - 1) {","292","      if (this.state.openRule) {","293","        this.openRule(rules[selectedIndex + 1].key);","294","      } else {","295","        this.setState({ selected: rules[selectedIndex + 1].key });"]}]}},"861645c8498ef6b1782fa0b3ad1537d5226f1e41":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/measure\/ws\/ComponentTreeSortTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/measure\/ws\/ComponentTreeSort.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/measures\/Metric.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/measure\/ws\/ComponentTreeSortTest.java":[{"add":["27","import org.sonar.api.measures.CoreMetrics;","29","import org.sonar.api.resources.Qualifiers;","76","    measuresByComponentUuidAndMetric = HashBasedTable.create(components.size(), 2);","140","  public void sort_by_alert_status_ascending() {","141","    components = newArrayList(","142","      newComponentWithoutSnapshotId(\"PROJECT OK 1\", Qualifiers.PROJECT, \"PROJECT_OK_PATH_1\"),","143","      newComponentWithoutSnapshotId(\"PROJECT WARN 1\", Qualifiers.PROJECT, \"PROJECT_WARN_PATH_1\"),","144","      newComponentWithoutSnapshotId(\"PROJECT ERROR 1\", Qualifiers.PROJECT, \"PROJECT_ERROR_PATH_1\"),","145","      newComponentWithoutSnapshotId(\"PROJECT OK 2\", Qualifiers.PROJECT, \"PROJECT_OK_PATH_2\"),","146","      newComponentWithoutSnapshotId(\"PROJECT WARN 2\", Qualifiers.PROJECT, \"PROJECT_WARN_PATH_2\"),","147","      newComponentWithoutSnapshotId(\"PROJECT ERROR 2\", Qualifiers.PROJECT, \"PROJECT_ERROR_PATH_2\"));","148","    metrics = singletonList(newMetricDto()","149","      .setKey(CoreMetrics.ALERT_STATUS_KEY)","150","      .setValueType(ValueType.LEVEL.name()));","151","    measuresByComponentUuidAndMetric = HashBasedTable.create();","152","    List<String> statuses = newArrayList(\"OK\", \"WARN\", \"ERROR\");","153","    for (int i = 0; i < components.size(); i++) {","154","      ComponentDtoWithSnapshotId component = components.get(i);","155","      String alertStatus = statuses.get(i % 3);","156","      measuresByComponentUuidAndMetric.put(component.uuid(), metrics.get(0), new MeasureDto().setData(alertStatus));","157","    }","158","    ComponentTreeWsRequest wsRequest = newRequest(newArrayList(METRIC_SORT, NAME_SORT), true, CoreMetrics.ALERT_STATUS_KEY);","159","","160","    List<ComponentDtoWithSnapshotId> result = sortComponents(wsRequest);","161","","162","    assertThat(result).extracting(\"name\").containsExactly(","163","      \"PROJECT ERROR 1\", \"PROJECT ERROR 2\",","164","      \"PROJECT WARN 1\", \"PROJECT WARN 2\",","165","      \"PROJECT OK 1\", \"PROJECT OK 2\");","166","  }","167","","168","  @Test"],"delete":["74","    measuresByComponentUuidAndMetric = HashBasedTable.create(components.size(), 1);"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/measure\/ws\/ComponentTreeSort.java":[{"add":["32","import org.sonar.api.measures.Metric;","62","  private static final Set<ValueType> TEXTUAL_VALUE_TYPES = EnumSet.of(DATA, DISTRIB, STRING);","131","    } else if (ValueType.LEVEL.equals(ValueType.valueOf(metric.getValueType()))) {","132","      return levelMetricOrdering(isAscending, metric, measuresByComponentUuidAndMetric);","176","  private static Ordering<ComponentDtoWithSnapshotId> levelMetricOrdering(boolean isAscending, @Nullable MetricDto metric,","177","    Table<String, MetricDto, MeasureDto> measuresByComponentUuidAndMetric) {","178","    Ordering<Integer> ordering = Ordering.natural();","179","","180","    \/\/ inverse the order of org.sonar.api.measures.Metric.Level","181","    if (isAscending) {","182","      ordering = ordering.reverse();","183","    }","184","","185","    return ordering.nullsLast().onResultOf(new ComponentDtoWithSnapshotIdToLevelIndex(metric, measuresByComponentUuidAndMetric));","186","  }","187","","209","  private static class ComponentDtoWithSnapshotIdToLevelIndex implements Function<ComponentDtoWithSnapshotId, Integer> {","210","    private final MetricDto metric;","211","    private final Table<String, MetricDto, MeasureDto> measuresByComponentUuidAndMetric;","212","","213","    private ComponentDtoWithSnapshotIdToLevelIndex(@Nullable MetricDto metric,","214","      Table<String, MetricDto, MeasureDto> measuresByComponentUuidAndMetric) {","215","      this.metric = metric;","216","      this.measuresByComponentUuidAndMetric = measuresByComponentUuidAndMetric;","217","    }","218","","219","    @Override","220","    public Integer apply(@Nonnull ComponentDtoWithSnapshotId input) {","221","      MeasureDto measure = measuresByComponentUuidAndMetric.get(input.uuid(), metric);","222","      if (measure == null || measure.getData() == null) {","223","        return null;","224","      }","225","","226","      return Metric.Level.names().indexOf(measure.getData());","227","    }","228","  }","229",""],"delete":["47","import static org.sonar.api.measures.Metric.ValueType.LEVEL;","62","  private static final Set<ValueType> TEXTUAL_VALUE_TYPES = EnumSet.of(DATA, DISTRIB, LEVEL, STRING);"]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/measures\/Metric.java":[{"add":["107","    private static final List<String> NAMES = Lists.transform(Arrays.asList(values()), new Function<Level, String>() {","108","      @Nonnull","109","      @Override","110","      public String apply(@Nonnull Level level) {","111","        return level.name();","112","      }","113","    });","114","","126","      return NAMES;"],"delete":["118","      return Lists.transform(Arrays.asList(values()), new Function<Level, String>() {","119","        @Nonnull","120","        @Override","121","        public String apply(@Nonnull Level level) {","122","          return level.name();","123","        }","124","      });"]}]}},"75ce835beb9f2140bb0fe14b8cb88452520a6946":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/common\/SelectList.js":"MODIFY","server\/sonar-web\/src\/main\/less\/components\/issues.less":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/popups\/SimilarIssuesPopup.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/common\/SelectList.js":[{"add":["23","import classNames from 'classnames';","29","  className?: string,","135","  renderChild = (child \/*: Object *\/) => {","136","    if (child == null) {","137","      return null;","138","    }","139","    \/\/ do not pass extra props to children like `<li className=\"divider\" \/>`","140","    if (child.type !== SelectListItem) {","141","      return child;","142","    }","143","    return React.cloneElement(child, {","144","      active: this.state.active,","145","      onHover: this.handleHover,","146","      onSelect: this.handleSelect","147","    });","148","  };","149","","154","      <ul className={classNames('menu', this.props.className)}>","155","        {hasChildren && React.Children.map(children, this.renderChild)}"],"delete":["137","      <ul className=\"menu\">","138","        {hasChildren &&","139","          React.Children.map(","140","            children,","141","            child =>","142","              child != null &&","143","              React.cloneElement(child, {","144","                active: this.state.active,","145","                onHover: this.handleHover,","146","                onSelect: this.handleSelect","147","              })","148","          )}"]}],"server\/sonar-web\/src\/main\/less\/components\/issues.less":[{"add":["384",".issue .menu:not(.issues-similar-issues-menu) {"],"delete":["384",".issue .menu {"]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/popups\/SimilarIssuesPopup.js":[{"add":["73","        <SelectList","74","          className=\"issues-similar-issues-menu\"","75","          currentItem={items[0]}","76","          items={items}","77","          onSelect={this.handleSelect}>","116","          <li className=\"divider\" \/>","117","","128","          <li className=\"divider\" \/>","129",""],"delete":["73","        <SelectList currentItem={items[0]} items={items} onSelect={this.handleSelect}>"]}]}},"116d1f01a872b83be5aedf8a700be10556c091d8":{"changes":{"sonar-db\/src\/main\/java\/org\/sonar\/db\/qualityprofile\/ActiveRuleParamDtoFunctions.java":"ADD","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/RuleUpdater.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/RuleUpdaterMediumTest.java":"MODIFY","sonar-db\/src\/main\/java\/org\/sonar\/db\/qualityprofile\/ActiveRuleDao.java":"MODIFY"},"diff":{"sonar-db\/src\/main\/java\/org\/sonar\/db\/qualityprofile\/ActiveRuleParamDtoFunctions.java":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/RuleUpdater.java":[{"add":["21","import com.google.common.base.Function;","24","import com.google.common.base.Predicate;","27","import java.util.Collection;","31","import java.util.Map;","33","import javax.annotation.Nonnull;","44","import org.sonar.db.qualityprofile.ActiveRuleDtoFunctions.ActiveRuleDtoToId;","51","import static com.google.common.collect.FluentIterable.from;","53","import static org.sonar.db.qualityprofile.ActiveRuleParamDtoFunctions.ActiveRuleDtoParamToKey;","247","      Multimap<ActiveRuleDto, ActiveRuleParamDto> activeRuleParamsByActiveRule = getActiveRuleParamsByActiveRule(dbSession, customRule);","249","      deleteOrUpdateParameters(dbSession, update, customRule, paramKeys, activeRuleParamsByActiveRule);","253","  private Multimap<ActiveRuleDto, ActiveRuleParamDto> getActiveRuleParamsByActiveRule(DbSession dbSession, RuleDto customRule) {","254","    List<ActiveRuleDto> activeRuleDtos = dbClient.activeRuleDao().selectByRule(dbSession, customRule);","255","    Map<Integer, ActiveRuleDto> activeRuleById = from(activeRuleDtos).uniqueIndex(ActiveRuleDtoToId.INSTANCE);","256","    List<Integer> activeRuleIds = from(activeRuleDtos)","257","      .transform(ActiveRuleDtoToId.INSTANCE)","258","      .toList();","259","    List<ActiveRuleParamDto> activeRuleParamDtos = dbClient.activeRuleDao().selectParamsByActiveRuleIds(dbSession, activeRuleIds);","260","    return from(activeRuleParamDtos)","261","      .index(new ActiveRuleParamToActiveRule(activeRuleById));","262","  }","263","","265","    Multimap<ActiveRuleDto, ActiveRuleParamDto> activeRuleParamsByActiveRule) {","276","        updateOrInsertActiveRuleParams(dbSession, ruleParamDto, activeRuleParamsByActiveRule);","279","        deleteActiveRuleParams(dbSession, key, activeRuleParamsByActiveRule.values());","285","  private void updateOrInsertActiveRuleParams(DbSession dbSession, RuleParamDto ruleParamDto, Multimap<ActiveRuleDto, ActiveRuleParamDto> activeRuleParamsByActiveRule){","286","    from(activeRuleParamsByActiveRule.keySet())","287","      .filter(new UpdateOrInsertActiveRuleParams(dbSession, dbClient, ruleParamDto, activeRuleParamsByActiveRule))","288","      .toList();","289","  }","290","","291","  private void deleteActiveRuleParams(DbSession dbSession, String key, Collection<ActiveRuleParamDto> activeRuleParamDtos){","292","    from(activeRuleParamDtos)","293","      .filter(new DeleteActiveRuleParams(dbSession, dbClient, key))","294","      .toList();","295","  }","296","","297","  private static class ActiveRuleParamToActiveRule implements Function<ActiveRuleParamDto, ActiveRuleDto> {","298","    private final Map<Integer, ActiveRuleDto> activeRuleById;","299","","300","    private ActiveRuleParamToActiveRule(Map<Integer, ActiveRuleDto> activeRuleById) {","301","      this.activeRuleById = activeRuleById;","302","    }","303","","304","    @Override","305","    public ActiveRuleDto apply(@Nonnull ActiveRuleParamDto input) {","306","      return activeRuleById.get(input.getActiveRuleId());","307","    }","308","  }","309","","310","  private static class UpdateOrInsertActiveRuleParams implements Predicate<ActiveRuleDto> {","311","    private final DbSession dbSession;","312","    private final DbClient dbClient;","313","    private final RuleParamDto ruleParamDto;","314","    private final Multimap<ActiveRuleDto, ActiveRuleParamDto> activeRuleParams;","315","","316","    private UpdateOrInsertActiveRuleParams(DbSession dbSession, DbClient dbClient, RuleParamDto ruleParamDto, Multimap<ActiveRuleDto, ActiveRuleParamDto> activeRuleParams) {","317","      this.dbSession = dbSession;","318","      this.dbClient = dbClient;","319","      this.ruleParamDto = ruleParamDto;","320","      this.activeRuleParams = activeRuleParams;","321","    }","322","","323","    @Override","324","    public boolean apply(@Nonnull ActiveRuleDto activeRuleDto) {","325","      Map<String, ActiveRuleParamDto> activeRuleParamByKey = from(activeRuleParams.get(activeRuleDto))","326","        .uniqueIndex(ActiveRuleDtoParamToKey.INSTANCE);","327","      ActiveRuleParamDto activeRuleParamDto = activeRuleParamByKey.get(ruleParamDto.getName());","328","      if (activeRuleParamDto != null) {","329","        dbClient.activeRuleDao().updateParam(dbSession, activeRuleDto, activeRuleParamDto.setValue(ruleParamDto.getDefaultValue()));","330","      } else {","331","        dbClient.activeRuleDao().insertParam(dbSession, activeRuleDto, ActiveRuleParamDto.createFor(ruleParamDto).setValue(ruleParamDto.getDefaultValue()));","332","      }","333","      return true;","334","    }","335","  }","336","","337","  private static class DeleteActiveRuleParams implements Predicate<ActiveRuleParamDto> {","338","    private final DbSession dbSession;","339","    private final DbClient dbClient;","340","    private final String key;","341","","342","    public DeleteActiveRuleParams(DbSession dbSession, DbClient dbClient, String key) {","343","      this.dbSession = dbSession;","344","      this.dbClient = dbClient;","345","      this.key = key;","346","    }","347","","348","    @Override","349","    public boolean apply(@Nonnull ActiveRuleParamDto activeRuleParamDto) {","350","      if (activeRuleParamDto.getKey().equals(key)) {","351","        dbClient.activeRuleDao().deleteParamById(dbSession, activeRuleParamDto.getId());","352","      }","353","      return true;","354","    }","355","  }","356","","362",""],"delete":["24","import com.google.common.collect.ArrayListMultimap;","240","      Multimap<RuleDto, ActiveRuleDto> activeRules = ArrayListMultimap.create();","241","      Multimap<ActiveRuleDto, ActiveRuleParamDto> activeRuleParams = ArrayListMultimap.create();","242","      for (ActiveRuleDto activeRuleDto : dbClient.activeRuleDao().selectByRule(dbSession, customRule)) {","243","        activeRules.put(customRule, activeRuleDto);","244","        for (ActiveRuleParamDto activeRuleParamDto : dbClient.activeRuleDao().selectParamsByActiveRuleId(dbSession, activeRuleDto.getId())) {","245","          activeRuleParams.put(activeRuleDto, activeRuleParamDto);","246","        }","247","      }","248","","250","      deleteOrUpdateParameters(dbSession, update, customRule, paramKeys, activeRules, activeRuleParams);","255","    Multimap<RuleDto, ActiveRuleDto> activeRules, Multimap<ActiveRuleDto, ActiveRuleParamDto> activeRuleParams) {","266","        for (ActiveRuleDto activeRuleDto : activeRules.get(customRule)) {","267","          for (ActiveRuleParamDto activeRuleParamDto : activeRuleParams.get(activeRuleDto)) {","268","            if (activeRuleParamDto.getKey().equals(key)) {","269","              dbClient.activeRuleDao().updateParam(dbSession, activeRuleDto, activeRuleParamDto.setValue(value));","270","            } else {","271","              dbClient.activeRuleDao().insertParam(dbSession, activeRuleDto, ActiveRuleParamDto.createFor(ruleParamDto).setValue(value));","272","            }","273","          }","274","        }","277","        for (ActiveRuleDto activeRuleDto : activeRules.get(customRule)) {","278","          for (ActiveRuleParamDto activeRuleParamDto : activeRuleParams.get(activeRuleDto)) {","279","            if (activeRuleParamDto.getKey().equals(key)) {","280","              dbClient.activeRuleDao().deleteParam(dbSession, activeRuleDto, activeRuleParamDto);","281","            }","282","          }","283","        }"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/RuleUpdaterMediumTest.java":[{"add":["473","    assertThat(activeRuleParams).hasSize(2);"],"delete":["473","    \/\/ FIXME why 4 parameters are returned ??? (This issue already exists in 5.4)","474","    \/\/ assertThat(activeRuleParams).hasSize(2);"]}],"sonar-db\/src\/main\/java\/org\/sonar\/db\/qualityprofile\/ActiveRuleDao.java":[{"add":["152","    deleteParamById(session, activeRuleParam.getId());","153","  }","154","","155","  public void deleteParamById(DbSession session, int id){","156","    mapper(session).deleteParameter(id);"],"delete":["152","    mapper(session).deleteParameter(activeRuleParam.getId());"]}]}},"e28694040e6fea5af0e083cb57f2b88adec2e6dd":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/code\/utils.ts":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/code\/utils.ts":[{"add":["216","    s: 'qualifier,name',"],"delete":[]}]}},"6a75aa3940a17341042dcd031af70eec5dd85dde":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ce\/ws\/ActivityAction.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ce\/ws\/ActivityAction.java":[{"add":["76","  private static final List<String> POSSIBLE_QUALIFIERS = ImmutableList.of(Qualifiers.PROJECT, Qualifiers.VIEW, \"DEV\", Qualifiers.MODULE);"],"delete":["76","  private static final List<String> POSSIBLE_QUALIFIERS = ImmutableList.of(Qualifiers.PROJECT, Qualifiers.VIEW, \"DEV\");"]}]}},"6ea16bffd566b4790f26b492860f01d9f2cda5e9":{"changes":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/batch\/bootstrap\/BatchWsClientTest.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/batch\/bootstrap\/BatchWsClient.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/batch\/bootstrap\/BatchWsClientTest.java":[{"add":["108","  @Test","109","  public void fail_if_bad_request() throws Exception {","110","    expectedException.expect(MessageException.class);","111","    expectedException.expectMessage(\"Boo! bad request! bad!\");","112","","113","    WsRequest request = newRequest();","114","    WsResponse response = newResponse()","115","      .setCode(400)","116","      .setContent(\"{\\\"errors\\\":[{\\\"msg\\\":\\\"Boo! bad request! bad!\\\"}]}\");","117","    when(wsClient.wsConnector().call(request)).thenReturn(response);","118","","119","    new BatchWsClient(wsClient, true).call(request);","120","  }","121",""],"delete":[]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/batch\/bootstrap\/BatchWsClient.java":[{"add":["41","import static java.net.HttpURLConnection.HTTP_BAD_REQUEST;","42","import static java.net.HttpURLConnection.HTTP_FORBIDDEN;","43","import static java.net.HttpURLConnection.HTTP_UNAUTHORIZED;","82","    int code = response.code();","83","    if (code == HTTP_UNAUTHORIZED) {","94","    if (code == HTTP_FORBIDDEN || code == HTTP_BAD_REQUEST) {"],"delete":["27","import java.net.HttpURLConnection;","80","    if (response.code() == HttpURLConnection.HTTP_UNAUTHORIZED) {","91","    if (response.code() == HttpURLConnection.HTTP_FORBIDDEN) {"]}]}},"750fd412e0b11a071c5a3d2677cda289713d82e2":{"changes":{"it\/it-tests\/src\/test\/java\/it\/analysis\/IssuesModeTest.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/repository\/QualityProfileProviderTest.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/repository\/QualityProfileProvider.java":"MODIFY"},"diff":{"it\/it-tests\/src\/test\/java\/it\/analysis\/IssuesModeTest.java":[{"add":["208","  ","209","  \/\/ SONAR-8518","210","  @Test","211","  public void shoud_support_sonar_profile_prop() throws IOException {","212","    restoreProfile(\"one-issue-per-line.xml\");","213","    restoreProfile(\"empty.xml\");","214","    orchestrator.getServer().provisionProject(\"sample\", \"xoo-sample\");","215","    orchestrator.getServer().associateProjectToQualityProfile(\"sample\", \"xoo\", \"empty\");","216","    ","217","    SonarScanner runner = configureRunner(\"shared\/xoo-sample\", ","218","      \"sonar.verbose\", \"true\",","219","      \"sonar.analysis.mode\", \"issues\",","220","      \"sonar.profile\", \"one-issue-per-line\");","221","    BuildResult result = orchestrator.executeBuild(runner);","222","    ItUtils.assertIssuesInJsonReport(result, 17, 0, 0);","223","  }"],"delete":[]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/repository\/QualityProfileProviderTest.java":[{"add":["80","    ModuleQProfiles qps = qualityProfileProvider.provide(key, loader, projectRepo, props);","91","    ModuleQProfiles qps = qualityProfileProvider.provide(key, loader, projectRepo, props);","104","    ModuleQProfiles qps = qualityProfileProvider.provide(key, loader, projectRepo, props);","120","    ModuleQProfiles qps = qualityProfileProvider.provide(key, loader, projectRepo, props);"],"delete":["33","import org.sonar.scanner.analysis.DefaultAnalysisMode;","58","  private DefaultAnalysisMode mode;","59","  @Mock","83","    ModuleQProfiles qps = qualityProfileProvider.provide(key, loader, projectRepo, props, mode);","94","    ModuleQProfiles qps = qualityProfileProvider.provide(key, loader, projectRepo, props, mode);","107","    ModuleQProfiles qps = qualityProfileProvider.provide(key, loader, projectRepo, props, mode);","117","  public void testIgnoreSonarProfileIssuesMode() {","118","    when(mode.isIssues()).thenReturn(true);","119","    when(loader.load(eq(\"project\"), (String) eq(null))).thenReturn(response);","120","    when(props.property(ModuleQProfiles.SONAR_PROFILE_PROP)).thenReturn(\"custom\");","121","","122","    ModuleQProfiles qps = qualityProfileProvider.provide(key, loader, projectRepo, props, mode);","123","    assertResponse(qps);","124","","125","    verify(loader).load(eq(\"project\"), (String) eq(null));","126","    verifyNoMoreInteractions(loader);","127","  }","128","","129","  @Test","136","    ModuleQProfiles qps = qualityProfileProvider.provide(key, loader, projectRepo, props, mode);"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/repository\/QualityProfileProvider.java":[{"add":["37","  public ModuleQProfiles provide(ProjectKey projectKey, QualityProfileLoader loader, ProjectRepositories projectRepositories, AnalysisProperties props) {","42","        profileList = loader.loadDefault(getSonarProfile(props));","44","        profileList = loader.load(projectKey.get(), getSonarProfile(props));","54","  private static String getSonarProfile(AnalysisProperties props) {","56","    if (props.properties().containsKey(ModuleQProfiles.SONAR_PROFILE_PROP)) {"],"delete":["29","import org.sonar.scanner.analysis.DefaultAnalysisMode;","38","  public ModuleQProfiles provide(ProjectKey projectKey, QualityProfileLoader loader, ProjectRepositories projectRepositories, AnalysisProperties props, DefaultAnalysisMode mode) {","43","        profileList = loader.loadDefault(getSonarProfile(props, mode));","45","        profileList = loader.load(projectKey.get(), getSonarProfile(props, mode));","55","  private static String getSonarProfile(AnalysisProperties props, DefaultAnalysisMode mode) {","57","    if (!mode.isIssues() && props.properties().containsKey(ModuleQProfiles.SONAR_PROFILE_PROP)) {"]}]}},"96651c2341184362a22b89fe7a8e24b2a23b4695":{"changes":{"server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/db\/migrations\/v50\/PopulateProjectsUuidColumnsMigrationTest\/not_fail_when_module_has_no_root_id.xml":"ADD","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/db\/migrations\/v50\/PopulateProjectsUuidColumnsMigrationTest.java":"MODIFY","server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/db\/migrations\/v50\/PopulateProjectsUuidColumnsMigrationTest\/not_fail_when_project_has_two_active_snapshots.xml":"ADD","sonar-core\/src\/main\/java\/org\/sonar\/core\/persistence\/migration\/v50\/Component.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/db\/migrations\/v50\/PopulateProjectsUuidColumnsMigration.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/db\/migrations\/v50\/PopulateProjectsUuidColumnsMigrationTest\/not_fail_when_module_has_no_root_id.xml":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/db\/migrations\/v50\/PopulateProjectsUuidColumnsMigrationTest.java":[{"add":["291","  @Test","292","  public void not_fail_when_module_has_no_root_id() throws Exception {","293","    db.prepareDbUnit(getClass(), \"not_fail_when_module_has_no_root_id.xml\");","294","","295","    migration.execute();","296","    session.commit();","297","","298","    \/\/ Root project migrated","299","    Component root = mapper.selectComponentByKey(\"org.struts:struts\");","300","    assertThat(root.getUuid()).isNotNull();","301","    assertThat(root.getProjectUuid()).isEqualTo(root.getUuid());","302","    assertThat(root.getModuleUuid()).isNull();","303","    assertThat(root.getModuleUuidPath()).isEmpty();","304","","305","    \/\/ The module without uuid will be migrated as a standalone component","306","    Component module = mapper.selectComponentByKey(\"org.struts:struts-core\");","307","    assertThat(module.getUuid()).isNotNull();","308","    assertThat(module.getProjectUuid()).isEqualTo(module.getUuid());","309","    assertThat(module.getModuleUuid()).isNull();","310","    assertThat(module.getModuleUuidPath()).isEmpty();","311","  }","312","","313","  @Test","314","  public void not_fail_when_project_has_two_active_snapshots() throws Exception {","315","    db.prepareDbUnit(getClass(), \"not_fail_when_project_has_two_active_snapshots.xml\");","316","","317","    migration.execute();","318","    session.commit();","319","","320","    \/\/ Root project migrated","321","    Component root = mapper.selectComponentByKey(\"org.struts:struts\");","322","    assertThat(root.getUuid()).isNotNull();","323","    assertThat(root.getProjectUuid()).isEqualTo(root.getUuid());","324","    assertThat(root.getModuleUuid()).isNull();","325","    assertThat(root.getModuleUuidPath()).isEmpty();","326","","327","    \/\/ The module linked on second active snapshot should be migrated a standalone component","328","    Component module = mapper.selectComponentByKey(\"org.struts:struts-core\");","329","    assertThat(module.getUuid()).isNotNull();","330","    assertThat(module.getProjectUuid()).isEqualTo(module.getUuid());","331","    assertThat(module.getModuleUuid()).isNull();","332","    assertThat(module.getModuleUuidPath()).isEmpty();","333","  }","334",""],"delete":[]}],"server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/db\/migrations\/v50\/PopulateProjectsUuidColumnsMigrationTest\/not_fail_when_project_has_two_active_snapshots.xml":[{"add":[],"delete":[]}],"sonar-core\/src\/main\/java\/org\/sonar\/core\/persistence\/migration\/v50\/Component.java":[{"add":["36","  private String moduleUuidPath = \"\";"],"delete":["36","  private String moduleUuidPath;"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/db\/migrations\/v50\/PopulateProjectsUuidColumnsMigration.java":[{"add":["28","import org.sonar.api.utils.log.Logger;","29","import org.sonar.api.utils.log.Loggers;","51","  private static final Logger LOG = Loggers.get(PopulateProjectsUuidColumnsMigration.class);","52","","72","          List<Component> components = readSession.getMapper(Migration50Mapper.class).selectComponentChildrenForProjects(project.getId());","73","          MigrationContext migrationContext = new MigrationContext(readSession, writeSession, project, components);","74","          migrateEnabledComponents(migrationContext);","75","          migrateDisabledComponents(migrationContext);","93","  private void migrateEnabledComponents(MigrationContext migrationContext) {","94","    saveComponent(migrationContext.writeSession, migrationContext.project);","95","    for (Component component : migrationContext.componentsToMigrate) {","96","      migrationContext.updateComponent(component);","97","      if (Strings.isNullOrEmpty(component.getModuleUuidPath())) {","98","        LOG.warn(String.format(\"Ignoring component id '%s' because the module uuid path could not be created\", component.getId()));","99","      } else {","100","        migrationContext.updateComponent(component);","101","        saveComponent(migrationContext.writeSession, component);","106","  private void migrateDisabledComponents(MigrationContext migrationContext) {","107","    for (Component component : migrationContext.readSession.getMapper(Migration50Mapper.class).selectDisabledDirectComponentChildrenForProjects(migrationContext.project.getId())) {","108","      migrationContext.updateComponent(component);","109","      saveComponent(migrationContext.writeSession, component);","111","    for (Component component : migrationContext.readSession.getMapper(Migration50Mapper.class).selectDisabledNoneDirectComponentChildrenForProjects(","112","      migrationContext.project.getId())) {","113","      migrationContext.updateComponent(component);","114","      saveComponent(migrationContext.writeSession, component);","123","      saveComponent(writeSession, component);","127","  private void saveComponent(DbSession writeSession, Component component) {","128","    writeSession.getMapper(Migration50Mapper.class).updateComponentUuids(component);","129","    counter.getAndIncrement();","130","  }","131","","132","  private static class MigrationContext {","133","    private final DbSession readSession;","134","    private final DbSession writeSession;","135","    private final Component project;","136","    private final Map<Long, Component> componentsBySnapshotId = newHashMap();","137","    private final Map<Long, String> uuidByComponentId = newHashMap();","138","    private final List<Component> componentsToMigrate = newArrayList();","139","","140","    private MigrationContext(DbSession readSession, DbSession writeSession, Component project, List<Component> components) {","141","      this.readSession = readSession;","142","      this.writeSession = writeSession;","143","      this.project = project;","144","","145","      project.setUuid(getOrCreateUuid(project));","146","      project.setProjectUuid(project.getUuid());","147","","148","      componentsBySnapshotId.put(project.getSnapshotId(), project);","149","      for (Component component : components) {","150","        componentsBySnapshotId.put(component.getSnapshotId(), component);","151","        if (component.getUuid() == null) {","152","          componentsToMigrate.add(component);","153","        }","154","      }","156","","157","    public void updateComponent(Component component) {","158","      component.setUuid(getOrCreateUuid(component));","159","      component.setProjectUuid(getOrCreateUuid(project));","160","","161","      String snapshotPath = component.getSnapshotPath();","162","      StringBuilder moduleUuidPath = new StringBuilder();","163","      String lastModuleUuid = null;","164","      if (!Strings.isNullOrEmpty(snapshotPath)) {","165","        for (String s : Splitter.on(\".\").omitEmptyStrings().split(snapshotPath)) {","166","          Long snapshotId = Long.valueOf(s);","167","          Component currentComponent = componentsBySnapshotId.get(snapshotId);","168","          if (currentComponent != null && currentComponent.getScope().equals(Scopes.PROJECT)) {","169","            lastModuleUuid = getOrCreateUuid(currentComponent);","170","            moduleUuidPath.append(lastModuleUuid).append(\".\");","171","          }","172","        }","173","      }","174","","175","      if (moduleUuidPath.length() > 0 && lastModuleUuid != null) {","176","        \/\/ Remove last '.'","177","        moduleUuidPath.deleteCharAt(moduleUuidPath.length() - 1);","178","","179","        component.setModuleUuidPath(moduleUuidPath.toString());","180","        component.setModuleUuid(lastModuleUuid);","181","      }","182","    }","183","","184","    private String getOrCreateUuid(Component component) {","185","      String existingUuid = component.getUuid();","186","      String uuid = existingUuid == null ? uuidByComponentId.get(component.getId()) : existingUuid;","187","      if (uuid == null) {","188","        String newUuid = Uuids.create();","189","        uuidByComponentId.put(component.getId(), newUuid);","190","        return newUuid;","191","      }","192","      return uuid;","193","    }"],"delete":["68","          Map<Long, String> uuidByComponentId = newHashMap();","69","          migrateEnabledComponents(readSession, writeSession, project, uuidByComponentId);","70","          migrateDisabledComponents(readSession, writeSession, project, uuidByComponentId);","88","  private void migrateEnabledComponents(DbSession readSession, DbSession writeSession, Component project, Map<Long, String> uuidByComponentId) {","89","    Map<Long, Component> componentsBySnapshotId = newHashMap();","90","","91","    List<Component> components = readSession.getMapper(Migration50Mapper.class).selectComponentChildrenForProjects(project.getId());","92","    components.add(project);","93","    List<Component> componentsToMigrate = newArrayList();","94","    for (Component component : components) {","95","      componentsBySnapshotId.put(component.getSnapshotId(), component);","96","","97","      \/\/ Not migrate components already having an UUID","98","      if (component.getUuid() == null) {","99","        component.setUuid(getOrCreateUuid(component, uuidByComponentId));","100","        component.setProjectUuid(getOrCreateUuid(project, uuidByComponentId));","101","        component.setModuleUuidPath(\"\");","102","        componentsToMigrate.add(component);","105","","106","    for (Component component : componentsToMigrate) {","107","      updateComponent(component, project, componentsBySnapshotId, uuidByComponentId);","108","      writeSession.getMapper(Migration50Mapper.class).updateComponentUuids(component);","109","      counter.getAndIncrement();","110","    }","113","  private void migrateDisabledComponents(DbSession readSession, DbSession writeSession, Component project, Map<Long, String> uuidByComponentId) {","114","    String projectUuid = getOrCreateUuid(project, uuidByComponentId);","115","    for (Component component : readSession.getMapper(Migration50Mapper.class).selectDisabledDirectComponentChildrenForProjects(project.getId())) {","116","      component.setUuid(getOrCreateUuid(component, uuidByComponentId));","117","      component.setProjectUuid(projectUuid);","118","      component.setModuleUuidPath(\"\");","119","","120","      writeSession.getMapper(Migration50Mapper.class).updateComponentUuids(component);","121","      counter.getAndIncrement();","123","    for (Component component : readSession.getMapper(Migration50Mapper.class).selectDisabledNoneDirectComponentChildrenForProjects(project.getId())) {","124","      component.setUuid(getOrCreateUuid(component, uuidByComponentId));","125","      component.setProjectUuid(projectUuid);","126","      component.setModuleUuidPath(\"\");","127","","128","      writeSession.getMapper(Migration50Mapper.class).updateComponentUuids(component);","129","      counter.getAndIncrement();","130","    }","131","  }","132","","133","  private void updateComponent(Component component, Component project, Map<Long, Component> componentsBySnapshotId, Map<Long, String> uuidByComponentId) {","134","    String snapshotPath = component.getSnapshotPath();","135","    StringBuilder moduleUuidPath = new StringBuilder();","136","    Component lastModule = null;","137","    if (!Strings.isNullOrEmpty(snapshotPath)) {","138","      for (String s : Splitter.on(\".\").omitEmptyStrings().split(snapshotPath)) {","139","        Long snapshotId = Long.valueOf(s);","140","        Component currentComponent = componentsBySnapshotId.get(snapshotId);","141","        if (currentComponent.getScope().equals(Scopes.PROJECT)) {","142","          lastModule = currentComponent;","143","          moduleUuidPath.append(currentComponent.getUuid()).append(\".\");","144","        }","145","      }","146","    }","147","    if (moduleUuidPath.length() > 0) {","148","      \/\/ Remove last '.'","149","      moduleUuidPath.deleteCharAt(moduleUuidPath.length() - 1);","150","      component.setModuleUuidPath(moduleUuidPath.toString());","151","    }","152","","153","    \/\/ Module UUID contains direct module of a component","154","    if (lastModule != null) {","155","      component.setModuleUuid(getOrCreateUuid(lastModule, uuidByComponentId));","164","      component.setModuleUuidPath(\"\");","165","","166","      writeSession.getMapper(Migration50Mapper.class).updateComponentUuids(component);","167","      counter.getAndIncrement();","171","  private static String getOrCreateUuid(Component component, Map<Long, String> uuidByComponentId) {","172","    String existingUuid = component.getUuid();","173","    String uuid = existingUuid == null ? uuidByComponentId.get(component.getId()) : existingUuid;","174","    if (uuid == null) {","175","      String newUuid = Uuids.create();","176","      uuidByComponentId.put(component.getId(), newUuid);","177","      return newUuid;","179","    return uuid;"]}]}},"4cb268769ddfce3f001a9587218594b65697f1bf":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/docs\/DocMarkdownBlock.css":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/docs\/DocMarkdownBlock.css":[{"add":["20",".markdown-content .alert {","26",".markdown-content .alert.is-inline {","30",".markdown-content .alert:empty {","34",".markdown-content .alert-error {","40",".markdown-content .alert-error .alert-icon {","44",".markdown-content .alert-warning {","50",".markdown-content .alert-warning .alert-icon {","54",".markdown-content .alert-info {","60",".markdown-content .alert-info .alert-icon {","64",".markdown-content .alert-success {","70",".markdown-content .alert-success .alert-icon {"],"delete":["20",".alert {","26",".alert.is-inline {","30",".alert:empty {","34",".alert-error {","40",".alert-error .alert-icon {","44",".alert-warning {","50",".alert-warning .alert-icon {","54",".alert-info {","60",".alert-info .alert-icon {","64",".alert-success {","70",".alert-success .alert-icon {"]}]}},"652bcc1cd8f6cb2d6281694a74300ef3b24fbc11":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/IssueQueryFactory.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionTest.java":[{"add":["153","  \/\/SONAR-10217","154","  @Test","155","  public void empty_search_with_unknown_branch() throws Exception {","156","    TestResponse result = ws.newRequest()","157","      .setParam(\"onComponentOnly\", \"true\")","158","      .setParam(\"componentKeys\", \"foo\")","159","      .setParam(\"branch\", \"bar\")","160","      .execute();","161","","162","    assertThat(result).isNotNull();","163","    result.assertJson(this.getClass(), \"empty_result.json\");","164","  }","165",""],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/IssueQueryFactory.java":[{"add":["396","    builder.mainBranch(branch == null || component.equals(UNKNOWN_COMPONENT) || !branch.equals(component.getBranch()));"],"delete":["396","    builder.mainBranch(branch == null || !branch.equals(component.getBranch()));"]}]}},"79625d0c9161e02c3c718c546a51538d2221bc4b":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/IssueQueryService.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionMediumTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/IssueQueryService.java":[{"add":["70","import static org.sonar.api.utils.DateUtils.parseDateOrDateTime;","72","import static org.sonar.api.utils.DateUtils.parseStartingDateOrDateTime;","195","        .createdAt(parseDateOrDateTime(request.getCreatedAt()))","234","    Date createdAfter = parseStartingDateOrDateTime(request.getCreatedAfter());"],"delete":["51","import org.sonar.api.utils.DateUtils;","52","import org.sonar.api.utils.SonarException;","195","        .createdAt(parseAsDateTime(request.getCreatedAt()))","234","    Date createdAfter = parseAsDateTime(request.getCreatedAfter());","459","  @CheckForNull","460","  private static Date parseAsDateTime(@Nullable String stringDate) {","461","    if (stringDate == null) {","462","      return null;","463","    }","464","","465","    try {","466","      return DateUtils.parseDateTime(stringDate);","467","    } catch (SonarException notDateTime) {","468","      try {","469","        return DateUtils.parseDate(stringDate);","470","      } catch (SonarException notDateEither) {","471","        throw new IllegalArgumentException(String.format(\"'%s' cannot be parsed as either a date or date+time\", stringDate));","472","      }","473","    }","474","  }","475",""]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionMediumTest.java":[{"add":["26","import org.junit.rules.ExpectedException;","58","import static org.sonar.server.issue.ws.IssuesWs.API_ENDPOINT;","59","import static org.sonar.server.issue.ws.SearchAction.SEARCH_ACTION;","62","import static org.sonarqube.ws.client.issue.IssueFilterParameters.CREATED_AFTER;","76","  @Rule","77","  public ExpectedException expectedException = ExpectedException.none();","112","    WsTester.TestRequest request = wsTester.newGetRequest(API_ENDPOINT, SEARCH_ACTION);","143","    WsTester.Result result = wsTester.newGetRequest(API_ENDPOINT, SEARCH_ACTION).execute();","177","    WsTester.Result result = wsTester.newGetRequest(API_ENDPOINT, SEARCH_ACTION)","213","    WsTester.Result result = wsTester.newGetRequest(API_ENDPOINT, SEARCH_ACTION).setParam(HIDE_COMMENTS, \"true\").execute();","235","    WsTester.Result result = wsTester.newGetRequest(API_ENDPOINT, SEARCH_ACTION)","260","    WsTester.Result result = wsTester.newGetRequest(API_ENDPOINT, SEARCH_ACTION)","275","    WsTester.Result result = wsTester.newGetRequest(API_ENDPOINT, SEARCH_ACTION).execute();","292","    WsTester.Result result = wsTester.newGetRequest(API_ENDPOINT, SEARCH_ACTION).setParam(COMPONENTS, file.getKey()).execute();","307","    WsTester.Result result = wsTester.newGetRequest(API_ENDPOINT, SEARCH_ACTION).setParam(ADDITIONAL_FIELDS, \"_all\").execute();","328","    WsTester.Result result = wsTester.newGetRequest(API_ENDPOINT, SEARCH_ACTION)","352","    WsTester.Result result = wsTester.newGetRequest(API_ENDPOINT, SEARCH_ACTION)","377","    WsTester.Result result = wsTester.newGetRequest(API_ENDPOINT, SEARCH_ACTION)","422","    wsTester.newGetRequest(API_ENDPOINT, SEARCH_ACTION)","453","    wsTester.newGetRequest(API_ENDPOINT, SEARCH_ACTION)","496","    wsTester.newGetRequest(API_ENDPOINT, SEARCH_ACTION)","522","    WsTester.Result result = wsTester.newGetRequest(API_ENDPOINT, SEARCH_ACTION)","542","    WsTester.TestRequest request = wsTester.newGetRequest(API_ENDPOINT, SEARCH_ACTION);","563","    WsTester.TestRequest request = wsTester.newGetRequest(API_ENDPOINT, SEARCH_ACTION);","584","    WsTester.TestRequest request = wsTester.newGetRequest(API_ENDPOINT, SEARCH_ACTION);","594","    WsTester.TestRequest request = wsTester.newGetRequest(API_ENDPOINT, SEARCH_ACTION);","617","    WsTester.Result result = wsTester.newGetRequest(API_ENDPOINT, SEARCH_ACTION)","625","  @Test","626","  public void fail_when_invalid_format() throws Exception {","627","    expectedException.expect(IllegalArgumentException.class);","628","    expectedException.expectMessage(\"Date 'wrong-date-input' cannot be parsed as either a date or date+time\");","629","","630","    wsTester.newGetRequest(API_ENDPOINT, SEARCH_ACTION)","631","      .setParam(CREATED_AFTER, \"wrong-date-input\")","632","      .execute();","633","  }","634",""],"delete":["106","    WsTester.TestRequest request = wsTester.newGetRequest(IssuesWs.API_ENDPOINT, SearchAction.SEARCH_ACTION);","137","    WsTester.Result result = wsTester.newGetRequest(IssuesWs.API_ENDPOINT, SearchAction.SEARCH_ACTION).execute();","171","    WsTester.Result result = wsTester.newGetRequest(IssuesWs.API_ENDPOINT, SearchAction.SEARCH_ACTION)","207","    WsTester.Result result = wsTester.newGetRequest(IssuesWs.API_ENDPOINT, SearchAction.SEARCH_ACTION).setParam(HIDE_COMMENTS, \"true\").execute();","229","    WsTester.Result result = wsTester.newGetRequest(IssuesWs.API_ENDPOINT, SearchAction.SEARCH_ACTION)","254","    WsTester.Result result = wsTester.newGetRequest(IssuesWs.API_ENDPOINT, SearchAction.SEARCH_ACTION)","269","    WsTester.Result result = wsTester.newGetRequest(IssuesWs.API_ENDPOINT, SearchAction.SEARCH_ACTION).execute();","286","    WsTester.Result result = wsTester.newGetRequest(IssuesWs.API_ENDPOINT, SearchAction.SEARCH_ACTION).setParam(COMPONENTS, file.getKey()).execute();","301","    WsTester.Result result = wsTester.newGetRequest(IssuesWs.API_ENDPOINT, SearchAction.SEARCH_ACTION).setParam(ADDITIONAL_FIELDS, \"_all\").execute();","322","    WsTester.Result result = wsTester.newGetRequest(IssuesWs.API_ENDPOINT, SearchAction.SEARCH_ACTION)","346","    WsTester.Result result = wsTester.newGetRequest(IssuesWs.API_ENDPOINT, SearchAction.SEARCH_ACTION)","371","    WsTester.Result result = wsTester.newGetRequest(IssuesWs.API_ENDPOINT, SearchAction.SEARCH_ACTION)","416","    wsTester.newGetRequest(IssuesWs.API_ENDPOINT, SearchAction.SEARCH_ACTION)","447","    wsTester.newGetRequest(IssuesWs.API_ENDPOINT, SearchAction.SEARCH_ACTION)","490","    wsTester.newGetRequest(IssuesWs.API_ENDPOINT, SearchAction.SEARCH_ACTION)","516","    WsTester.Result result = wsTester.newGetRequest(IssuesWs.API_ENDPOINT, SearchAction.SEARCH_ACTION)","536","    WsTester.TestRequest request = wsTester.newGetRequest(IssuesWs.API_ENDPOINT, SearchAction.SEARCH_ACTION);","557","    WsTester.TestRequest request = wsTester.newGetRequest(IssuesWs.API_ENDPOINT, SearchAction.SEARCH_ACTION);","578","    WsTester.TestRequest request = wsTester.newGetRequest(IssuesWs.API_ENDPOINT, SearchAction.SEARCH_ACTION);","588","    WsTester.TestRequest request = wsTester.newGetRequest(IssuesWs.API_ENDPOINT, SearchAction.SEARCH_ACTION);","611","    WsTester.Result result = wsTester.newGetRequest(IssuesWs.API_ENDPOINT, SearchAction.SEARCH_ACTION)"]}]}},"f128c2dafa50eff8c5d5c94afef561da4d2f7a73":{"changes":{"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/ce\/CeQueueMapper.xml":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/ce\/CeQueueMapper.xml":[{"add":["17","    order by","18","      cq.created_at asc,","19","      cq.id asc","23","    order by","24","      cq.created_at desc,","25","      cq.id desc","30","      <include refid=\"columns\"\/>","31","    from","32","      ce_queue cq","33","    where","34","      cq.uuid=#{uuid,jdbcType=VARCHAR}","38","    select","39","      count(1)","40","    from","41","      ce_queue","42","    where","43","      status=#{status,jdbcType=VARCHAR}","44","      <if test=\"componentUuid!=null\">","45","        and component_uuid=#{componentUuid,jdbcType=VARCHAR}","46","      <\/if>","50","    select","51","      count(1)","52","    from","53","      ce_queue","58","      <include refid=\"columns\"\/>","59","    from","60","      ce_queue cq","61","    where","62","      cq.component_uuid=#{componentUuid,jdbcType=VARCHAR}","68","      <include refid=\"columns\"\/>","69","    from","70","      ce_queue cq","82","    select","83","      count(1)","88","    from","89","      ce_queue cq","113","    select","114","      cq.uuid","115","    from","116","      ce_queue cq","117","    where","118","      cq.status='PENDING'","119","      and not exists (","120","        select","121","          1","122","        from","123","          ce_queue cq2","124","        where","125","          cq.component_uuid=cq2.component_uuid","126","          and cq2.status &lt;&gt; 'PENDING'","127","      )","133","    (","134","      uuid,","135","      task_type,","136","      component_uuid,","137","      status,","138","      submitter_login,","139","      started_at,","140","      created_at,","141","      updated_at","142","    )","144","      #{uuid,jdbcType=VARCHAR},","145","      #{taskType,jdbcType=VARCHAR},","146","      #{componentUuid,jdbcType=VARCHAR},","147","      #{status,jdbcType=VARCHAR},","148","      #{submitterLogin,jdbcType=VARCHAR},","149","      #{startedAt,jdbcType=BIGINT},","150","      #{createdAt,jdbcType=BIGINT},","151","      #{updatedAt,jdbcType=BIGINT}","156","    update ce_queue set","157","      status='PENDING',","158","      started_at=NULL,","159","      updated_at=#{updatedAt,jdbcType=BIGINT}","160","    where","161","      status &lt;&gt; 'PENDING'","165","    update ce_queue set","166","      status=#{newStatus,jdbcType=VARCHAR},","167","      started_at=#{startedAt,jdbcType=BIGINT},","168","      updated_at=#{updatedAt,jdbcType=BIGINT}","169","    where","170","      uuid=#{uuid,jdbcType=VARCHAR}","171","      and status=#{oldStatus,jdbcType=VARCHAR}","175","    delete from","176","      ce_queue","177","    where","178","      uuid=#{uuid,jdbcType=VARCHAR}"],"delete":["17","    order by cq.created_at asc, cq.id asc","21","    order by cq.created_at desc, cq.id desc","26","    <include refid=\"columns\"\/>","27","    from ce_queue cq","28","    where cq.uuid=#{uuid,jdbcType=VARCHAR}","32","    select count(1)","33","    from ce_queue","34","    where status=#{status,jdbcType=VARCHAR}","35","    <if test=\"componentUuid!=null\">","36","      and component_uuid=#{componentUuid,jdbcType=VARCHAR}","37","    <\/if>","41","    select count(1) from ce_queue","46","    <include refid=\"columns\"\/>","47","    from ce_queue cq","48","    where cq.component_uuid=#{componentUuid,jdbcType=VARCHAR}","54","    <include refid=\"columns\"\/>","55","    from ce_queue cq","67","    select count(1)","72","    from ce_queue cq","96","    select cq.uuid","97","    from ce_queue cq","98","    where cq.status='PENDING'","99","    and not exists(","100","    select 1","101","    from ce_queue cq2","102","    where cq.component_uuid=cq2.component_uuid and cq2.status &lt;&gt; 'PENDING'","103","    )","109","    (uuid, task_type, component_uuid, status, submitter_login, started_at, created_at, updated_at)","111","    #{uuid,jdbcType=VARCHAR},","112","    #{taskType,jdbcType=VARCHAR},","113","    #{componentUuid,jdbcType=VARCHAR},","114","    #{status,jdbcType=VARCHAR},","115","    #{submitterLogin,jdbcType=VARCHAR},","116","    #{startedAt,jdbcType=BIGINT},","117","    #{createdAt,jdbcType=BIGINT},","118","    #{updatedAt,jdbcType=BIGINT}","123","    update ce_queue","124","    set status='PENDING', started_at=NULL, updated_at=#{updatedAt,jdbcType=BIGINT}","125","    where status &lt;&gt; 'PENDING'","129","    update ce_queue","130","    set status=#{newStatus,jdbcType=VARCHAR},","131","    started_at=#{startedAt,jdbcType=BIGINT},","132","    updated_at=#{updatedAt,jdbcType=BIGINT}","133","    where uuid=#{uuid,jdbcType=VARCHAR} and status=#{oldStatus,jdbcType=VARCHAR}","137","    delete from ce_queue where uuid=#{uuid,jdbcType=VARCHAR}"]}]}},"1d8a83568656e0f934d3eee71df5776d411a1fec":{"changes":{"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/ComponentNavMenu.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/__tests__\/ComponentNavMenu-test.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/ComponentNavMenu.tsx":[{"add":["436","    if (this.props.branch && !this.props.branch.isMain) {","437","      return [];","438","    }","445","    if (!extensions.length || (this.props.branch && !this.props.branch.isMain)) {"],"delete":["442","    if (!extensions.length) {"]}],"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/__tests__\/ComponentNavMenu-test.tsx":[{"add":["73","  const component = {","74","    ...baseComponent,","75","    configuration: { showSettings: true },","76","    extensions: [{ key: 'component-foo', name: 'ComponentFoo' }]","77","  };","92","          component={{","93","            ...baseComponent,","94","            configuration: { showSettings },","95","            extensions: [{ key: 'component-foo', name: 'ComponentFoo' }]","96","          }}"],"delete":["73","  const component = { ...baseComponent, configuration: { showSettings: true } };","88","          component={{ ...baseComponent, configuration: { showSettings } }}"]}]}},"bba83de69a5b421c0f31e7c9bf08401dcecc8581":{"changes":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/drilldown\/measures.html.erb":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/drilldown\/measures.html.erb":[{"add":["4","        <form method=\"GET\" action=\"<%= ApplicationController.root_context -%>\/drilldown\/measures\" style=\"display: inline\">","5","          <input type=\"hidden\" name=\"id\" value=\"<%= h @snapshot.project.key -%>\"\/>","6","          <input type=\"hidden\" name=\"metric\" value=\"<%= h params[:metric] -%>\"\/>","7","          <% if params[:highlight] %>","8","            <input type=\"hidden\" name=\"highlight\" value=\"<%= h params[:highlight] -%>\"\/>","9","          <% end -%>"],"delete":["4","        <form method=\"GET\" action=\"<%= url_for :action => 'measures' -%>\" style=\"display: inline\">","5","          <input type=\"hidden\" name=\"metric\" value=\"<%= params[:metric] -%>\"\/>"]}]}}}