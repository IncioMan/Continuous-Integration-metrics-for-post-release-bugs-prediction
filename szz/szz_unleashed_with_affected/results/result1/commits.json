{"9fbe45c366c95b7a933ee36fe8d976f3147f144a":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/ProjectCardMeasures.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/ProjectCard.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/__tests__\/__snapshots__\/ProjectCardMeasures-test.js.snap":"ADD","server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/__tests__\/ProjectCardMeasures-test.js":"ADD"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/ProjectCardMeasures.js":[{"add":["80","                      <CoverageRating value={measures['coverage']}\/>","81","                    <\/span>","95","                {measures['duplicated_lines_density'] != null && (","96","                  <span className=\"spacer-right\">","97","                    <DuplicationsRating value={measures['duplicated_lines_density']}\/>","98","                  <\/span>","99","                )}","109","          {measures['ncloc'] != null && (","110","            <div className=\"project-card-measure\" data-key=\"ncloc\">","111","              <div className=\"project-card-measure-inner\">","112","                <div className=\"project-card-measure-number\">","113","                  <span className=\"spacer-right\">","114","                    <SizeRating value={measures['ncloc']}\/>","115","                  <\/span>","116","                  <Measure measure={{ value: measures['ncloc'] }}","117","                           metric={{ key: 'ncloc', type: 'SHORT_INT' }}\/>","118","                <\/div>","119","                <div className=\"project-card-measure-label\">","120","                  <ProjectCardLanguages distribution={measures['ncloc_language_distribution']}\/>","121","                <\/div>","124","          )}"],"delete":["80","                    <CoverageRating value={measures['coverage']}\/>","81","                  <\/span>","95","                <span className=\"spacer-right\">","96","                  <DuplicationsRating value={measures['duplicated_lines_density']}\/>","97","                <\/span>","107","          <div className=\"project-card-measure\" data-key=\"ncloc\">","108","            <div className=\"project-card-measure-inner\">","109","              <div className=\"project-card-measure-number\">","110","                <span className=\"spacer-right\">","111","                  <SizeRating value={measures['ncloc']}\/>","112","                <\/span>","113","                <Measure measure={{ value: measures['ncloc'] }}","114","                         metric={{ key: 'ncloc', type: 'SHORT_INT' }}\/>","115","              <\/div>","116","              <div className=\"project-card-measure-label\">","117","                <ProjectCardLanguages distribution={measures['ncloc_language_distribution']}\/>","120","          <\/div>"]}],"server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/ProjectCard.js":[{"add":["40","    const isProjectAnalyzed = areProjectMeasuresLoaded &&","41","        (this.props.measures['ncloc'] != null || this.props.measures['sqale_rating'] != null);"],"delete":["40","    const isProjectAnalyzed = areProjectMeasuresLoaded && this.props.measures.ncloc != null;"]}],"server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/__tests__\/__snapshots__\/ProjectCardMeasures-test.js.snap":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/__tests__\/ProjectCardMeasures-test.js":[{"add":[],"delete":[]}]}},"d2dc8046525bb4538ca4d7ba4c5bc91346e31596":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/WorstProjects.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/__tests__\/__snapshots__\/ProjectRow-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/helpers\/__tests__\/urls-test.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/Breadcrumb.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/helpers\/urls.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/search\/Search.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/code\/components\/ComponentName.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/details\/ProfileProjects.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/search\/__tests__\/__snapshots__\/SearchResult-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/ProjectRow.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/search\/SearchResult.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/details\/__tests__\/__snapshots__\/ProfileProjects-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/Menu.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/App.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/search\/__tests__\/Search-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/background-tasks\/components\/TaskComponent.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/types\/component.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/__tests__\/ComponentContainer-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/__tests__\/__snapshots__\/Breadcrumb-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/ComponentContainer.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/code\/components\/__tests__\/__snapshots__\/ComponentName-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/account\/projects\/ProjectCard.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/__tests__\/__snapshots__\/WorstProjects-test.tsx.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/WorstProjects.tsx":[{"add":["27","import { getComponentOverviewUrl } from '..\/..\/..\/helpers\/urls';","28","import { ComponentQualifier } from '..\/..\/..\/types\/component';","82","                  to={getComponentOverviewUrl(","83","                    component.refKey || component.key,","84","                    component.qualifier","85","                  )}>","89","              {component.qualifier === ComponentQualifier.Project"],"delete":["27","import { getProjectUrl } from '..\/..\/..\/helpers\/urls';","81","                  to={getProjectUrl(component.refKey || component.key)}>","85","              {component.qualifier === 'TRK'"]}],"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/__tests__\/__snapshots__\/ProjectRow-test.tsx.snap":[{"add":[],"delete":["26","            \"branch\": undefined,","219","            \"branch\": undefined,"]}],"server\/sonar-web\/src\/main\/js\/helpers\/__tests__\/urls-test.ts":[{"add":["19","import { ComponentQualifier } from '..\/..\/types\/component';","23","  getComponentOverviewUrl,","71","describe('getComponentOverviewUrl', () => {","72","  it('should return a portfolio url for a portfolio', () => {","73","    expect(getComponentOverviewUrl(SIMPLE_COMPONENT_KEY, ComponentQualifier.Portfolio)).toEqual({","74","      pathname: '\/portfolio',","75","      query: { id: SIMPLE_COMPONENT_KEY }","76","    });","77","  });","78","  it('should return a portfolio url for a subportfolio', () => {","79","    expect(getComponentOverviewUrl(SIMPLE_COMPONENT_KEY, ComponentQualifier.SubPortfolio)).toEqual({","80","      pathname: '\/portfolio',","81","      query: { id: SIMPLE_COMPONENT_KEY }","82","    });","83","  });","84","  it('should return a dashboard url for a project', () => {","85","    expect(getComponentOverviewUrl(SIMPLE_COMPONENT_KEY, ComponentQualifier.Project)).toEqual({","86","      pathname: '\/dashboard',","87","      query: { id: SIMPLE_COMPONENT_KEY }","88","    });","89","  });","90","  it('should return a dashboard url for an app', () => {","91","    expect(getComponentOverviewUrl(SIMPLE_COMPONENT_KEY, ComponentQualifier.Application)).toEqual({","92","      pathname: '\/dashboard',","93","      query: { id: SIMPLE_COMPONENT_KEY }","94","    });","95","  });","96","});","97",""],"delete":[]}],"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/Breadcrumb.tsx":[{"add":["24","import { getComponentOverviewUrl } from '..\/..\/..\/..\/helpers\/urls';","55","                to={getComponentOverviewUrl(breadcrumbElement.key, breadcrumbElement.qualifier)}>"],"delete":["24","import { getProjectUrl } from '..\/..\/..\/..\/helpers\/urls';","55","                to={getProjectUrl(breadcrumbElement.key)}>"]}],"server\/sonar-web\/src\/main\/js\/helpers\/urls.ts":[{"add":["21","import { BranchLike, BranchParameters } from '..\/types\/branch-like';","22","import { ComponentQualifier, isPortfolioLike } from '..\/types\/component';","28","export function getComponentOverviewUrl(","29","  componentKey: string,","30","  componentQualifier: ComponentQualifier | string,","31","  branchParameters?: BranchParameters","32",") {","33","  return isPortfolioLike(componentQualifier)","34","    ? getPortfolioUrl(componentKey)","35","    : getProjectQueryUrl(componentKey, branchParameters);","36","}","37","","42","export function getProjectQueryUrl(project: string, branchParameters?: BranchParameters): Location {","43","  return { pathname: '\/dashboard', query: { id: project, ...branchParameters } };","44","}","45",""],"delete":["21","import { BranchLike } from '..\/types\/branch-like';"]}],"server\/sonar-web\/src\/main\/js\/app\/components\/search\/Search.tsx":[{"add":["33","import { getCodeUrl, getComponentOverviewUrl } from '..\/..\/..\/helpers\/urls';","34","import { ComponentQualifier } from '..\/..\/..\/types\/component';","278","    const { results, selected } = this.state;","280","    if (!selected) {","281","      return;","282","    }","283","","284","    if (selected.startsWith('qualifier###')) {","285","      this.searchMore(selected.substr(12));","286","    } else {","287","      const file = this.findFile(selected);","288","      if (file) {","289","        this.props.router.push(getCodeUrl(file.project!, undefined, file.key));","291","        let qualifier = ComponentQualifier.Project;","292","","293","        if ((results[ComponentQualifier.Portfolio] ?? []).find(r => r.key === selected)) {","294","          qualifier = ComponentQualifier.Portfolio;","295","        } else if ((results[ComponentQualifier.SubPortfolio] ?? []).find(r => r.key === selected)) {","296","          qualifier = ComponentQualifier.SubPortfolio;","298","","299","        this.props.router.push(getComponentOverviewUrl(selected, qualifier));","301","      this.closeSearch();"],"delete":["33","import { getCodeUrl, getProjectUrl } from '..\/..\/..\/helpers\/urls';","277","    const { selected } = this.state;","279","    if (selected) {","280","      if (selected.startsWith('qualifier###')) {","281","        this.searchMore(selected.substr(12));","283","        const file = this.findFile(selected);","284","        if (file) {","285","          this.props.router.push(getCodeUrl(file.project!, undefined, file.key));","286","        } else {","287","          this.props.router.push(getProjectUrl(selected));","289","        this.closeSearch();"]}],"server\/sonar-web\/src\/main\/js\/apps\/code\/components\/ComponentName.tsx":[{"add":["26","import { getProjectUrl } from '..\/..\/..\/helpers\/urls';","85","    const branch = rootComponent.qualifier === 'APP' ? component.branch : undefined;","87","      <Link className=\"link-with-icon\" to={getProjectUrl(component.refKey, branch)}>"],"delete":["84","    const branch = rootComponent.qualifier === 'APP' ? { branch: component.branch } : {};","86","      <Link","87","        className=\"link-with-icon\"","88","        to={{ pathname: '\/dashboard', query: { id: component.refKey, ...branch } }}>"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/details\/ProfileProjects.tsx":[{"add":["26","import { getProjectUrl } from '..\/..\/..\/helpers\/urls';","144","              <Link className=\"link-with-icon\" to={getProjectUrl(project.key)}>"],"delete":["143","              <Link","144","                className=\"link-with-icon\"","145","                to={{ pathname: '\/dashboard', query: { id: project.key } }}>"]}],"server\/sonar-web\/src\/main\/js\/app\/components\/search\/__tests__\/__snapshots__\/SearchResult-test.tsx.snap":[{"add":[],"delete":["21","            \"branch\": undefined,","73","            \"branch\": undefined,","124","            \"branch\": undefined,","180","            \"branch\": undefined,","231","            \"branch\": undefined,","287","            \"branch\": undefined,","338","            \"branch\": undefined,","387","            \"branch\": undefined,"]}],"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/ProjectRow.tsx":[{"add":["27","import { getComponentOverviewUrl } from '..\/..\/helpers\/urls';","54","          <Link","55","            className=\"link-with-icon\"","56","            to={getComponentOverviewUrl(project.key, project.qualifier)}>"],"delete":["27","import { getPortfolioUrl, getProjectUrl } from '..\/..\/helpers\/urls';","28","import { ComponentQualifier } from '..\/..\/types\/component';","45","  getComponentUrl(project: Project) {","46","    return project.qualifier === ComponentQualifier.Portfolio","47","      ? getPortfolioUrl(project.key)","48","      : getProjectUrl(project.key);","49","  }","50","","61","          <Link className=\"link-with-icon\" to={this.getComponentUrl(project)}>"]}],"server\/sonar-web\/src\/main\/js\/app\/components\/search\/SearchResult.tsx":[{"add":["25","import { getCodeUrl, getComponentOverviewUrl } from '..\/..\/..\/helpers\/urls';","116","      : getComponentOverviewUrl(component.key, component.qualifier);"],"delete":["25","import { getCodeUrl, getProjectUrl } from '..\/..\/..\/helpers\/urls';","116","      : getProjectUrl(component.key);"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/details\/__tests__\/__snapshots__\/ProfileProjects-test.tsx.snap":[{"add":["71","                \"branch\": undefined,"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/Menu.tsx":[{"add":["31","import { getPortfolioUrl, getProjectQueryUrl } from '..\/..\/..\/..\/helpers\/urls';","33","import { ComponentQualifier, isPortfolioLike } from '..\/..\/..\/..\/types\/component';","98","    return isPortfolioLike(qualifier);","113","  renderDashboardLink = ({ id, ...branchLike }: Query, isPortfolio: boolean) => {","116","        <Link","117","          activeClassName=\"active\"","118","          to={isPortfolio ? getPortfolioUrl(id) : getProjectQueryUrl(id, branchLike)}>"],"delete":["32","import { ComponentQualifier } from '..\/..\/..\/..\/types\/component';","97","    return (","98","      qualifier === ComponentQualifier.Portfolio || qualifier === ComponentQualifier.SubPortfolio","99","    );","114","  renderDashboardLink = (query: Query, isPortfolio: boolean) => {","115","    const pathname = isPortfolio ? '\/portfolio' : '\/dashboard';","118","        <Link activeClassName=\"active\" to={{ pathname, query }}>"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/App.tsx":[{"add":["25","import { isPortfolioLike } from '..\/..\/..\/types\/component';","42","    return isPortfolioLike(this.props.component.qualifier);"],"delete":["25","import { ComponentQualifier } from '..\/..\/..\/types\/component';","42","    return ([ComponentQualifier.Portfolio, ComponentQualifier.SubPortfolio] as string[]).includes(","43","      this.props.component.qualifier","44","    );"]}],"server\/sonar-web\/src\/main\/js\/app\/components\/search\/__tests__\/Search-test.tsx":[{"add":["22","import { mockRouter } from '..\/..\/..\/..\/helpers\/testMocks';","23","import { ComponentQualifier } from '..\/..\/..\/..\/types\/component';","33","      BRC: [component('qwe', ComponentQualifier.SubProject)]","48","it('opens selected project on enter', () => {","49","  const router = mockRouter();","50","  const form = shallowRender({ router });","51","  const selectedKey = 'project';","54","    results: { [ComponentQualifier.Project]: [component(selectedKey)] },","55","    selected: selectedKey","57","","59","  expect(router.push).toBeCalledWith({ pathname: '\/dashboard', query: { id: selectedKey } });","60","});","61","","62","it('opens selected portfolio on enter', () => {","63","  const router = mockRouter();","64","  const form = shallowRender({ router });","65","  const selectedKey = 'portfolio';","66","  form.setState({","67","    open: true,","68","    results: {","69","      [ComponentQualifier.Portfolio]: [component(selectedKey, ComponentQualifier.Portfolio)]","70","    },","71","    selected: selectedKey","72","  });","73","","74","  elementKeydown(form.find('SearchBox'), 13);","75","  expect(router.push).toBeCalledWith({ pathname: '\/portfolio', query: { id: selectedKey } });","76","});","77","","78","it('opens selected subportfolio on enter', () => {","79","  const router = mockRouter();","80","  const form = shallowRender({ router });","81","  const selectedKey = 'sbprtfl';","82","  form.setState({","83","    open: true,","84","    results: {","85","      [ComponentQualifier.SubPortfolio]: [component(selectedKey, ComponentQualifier.SubPortfolio)]","86","    },","87","    selected: selectedKey","88","  });","89","","90","  elementKeydown(form.find('SearchBox'), 13);","91","  expect(router.push).toBeCalledWith({ pathname: '\/portfolio', query: { id: selectedKey } });","113","function component(key: string, qualifier = ComponentQualifier.Project) {"],"delete":["31","      BRC: [component('qwe', 'BRC')]","46","it('opens selected on enter', () => {","47","  const form = shallowRender();","50","    results: { TRK: [component('foo')] },","51","    selected: 'foo'","53","  const openSelected = jest.fn();","54","  (form.instance() as Search).openSelected = openSelected;","56","  expect(openSelected).toBeCalled();","78","function component(key: string, qualifier = 'TRK') {"]}],"server\/sonar-web\/src\/main\/js\/apps\/background-tasks\/components\/TaskComponent.tsx":[{"add":["31","import { isPortfolioLike } from '..\/..\/..\/types\/component';","87","  if (isPortfolioLike(task.componentQualifier)) {"],"delete":["31","import { ComponentQualifier } from '..\/..\/..\/types\/component';","87","  if (task.componentQualifier === ComponentQualifier.Portfolio) {"]}],"server\/sonar-web\/src\/main\/js\/types\/component.ts":[{"add":["19","","32","export function isPortfolioLike(componentQualifier?: string | ComponentQualifier) {","33","  return Boolean(","34","    componentQualifier &&","35","      [","36","        ComponentQualifier.Portfolio.toString(),","37","        ComponentQualifier.SubPortfolio.toString()","38","      ].includes(componentQualifier)","39","  );","40","}","41",""],"delete":[]}],"server\/sonar-web\/src\/main\/js\/app\/components\/__tests__\/ComponentContainer-test.tsx":[{"add":["29","import { ComponentQualifier } from '..\/..\/..\/types\/component';","182","  (getComponentNavigation as jest.Mock).mockRejectedValueOnce({ status: 404 });","189","  (getComponentNavigation as jest.Mock).mockRejectedValueOnce({ status: 403 });","196","it('should redirect if the component is a portfolio', async () => {","197","  const componentKey = 'comp-key';","198","  (getComponentData as jest.Mock<any>).mockResolvedValueOnce({","199","    component: { key: componentKey, breadcrumbs: [{ qualifier: ComponentQualifier.Portfolio }] }","200","  });","201","","202","  const replace = jest.fn();","203","","204","  const wrapper = shallowRender({","205","    location: mockLocation({ pathname: '\/dashboard' }),","206","    router: mockRouter({ replace })","207","  });","208","  await waitAndUpdate(wrapper);","209","  expect(replace).toBeCalledWith({ pathname: '\/portfolio', query: { id: componentKey } });","210","});","211",""],"delete":["28","import { isSonarCloud } from '..\/..\/..\/helpers\/system';","65","jest.mock('..\/..\/..\/helpers\/system', () => ({","66","  isSonarCloud: jest.fn().mockReturnValue(false)","67","}));","68","","125","it('loads organization', async () => {","126","  (isSonarCloud as jest.Mock).mockReturnValue(true);","127","  (getComponentData as jest.Mock<any>).mockResolvedValueOnce({","128","    component: { organization: 'org' }","129","  });","130","","131","  const fetchOrganization = jest.fn();","132","  shallowRender({ fetchOrganization });","133","  await new Promise(setImmediate);","134","  expect(fetchOrganization).toBeCalledWith('org');","135","});","136","","198","  (getComponentNavigation as jest.Mock).mockRejectedValue({ status: 404 });","205","  (getComponentNavigation as jest.Mock).mockRejectedValue({ status: 403 });"]}],"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/__tests__\/__snapshots__\/Breadcrumb-test.tsx.snap":[{"add":["21","          \"pathname\": \"\/portfolio\","],"delete":["21","          \"pathname\": \"\/dashboard\",","23","            \"branch\": undefined,"]}],"server\/sonar-web\/src\/main\/js\/app\/components\/ComponentContainer.tsx":[{"add":["34","import { getPortfolioUrl } from '..\/..\/helpers\/urls';","41","import { isPortfolioLike } from '..\/..\/types\/component';","49","  location: Pick<Location, 'query' | 'pathname'>;","119","        \/*","120","         * There used to be a redirect from \/dashboard to \/portfolio which caused issues.","121","         * Links should be fixed to not rely on this redirect, but:","122","         * This is a fail-safe in case there are still some faulty links remaining.","123","         *\/","124","        if (","125","          this.props.location.pathname.match('dashboard') &&","126","          isPortfolioLike(componentWithQualifier.qualifier)","127","        ) {","128","          this.props.router.replace(getPortfolioUrl(component.key));","130",""],"delete":["34","import { isSonarCloud } from '..\/..\/helpers\/system';","48","  location: Pick<Location, 'query'>;","118","        if (isSonarCloud()) {","119","          this.props.fetchOrganization(componentWithQualifier.organization);"]}],"server\/sonar-web\/src\/main\/js\/apps\/code\/components\/__tests__\/__snapshots__\/ComponentName-test.tsx.snap":[{"add":["189","          \"branch\": undefined,"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/account\/projects\/ProjectCard.tsx":[{"add":["29","import { getProjectUrl } from '..\/..\/..\/helpers\/urls';","85","        <Link to={getProjectUrl(project.key)}>{project.name}<\/Link>"],"delete":["84","        <Link to={{ pathname: '\/dashboard', query: { id: project.key } }}>{project.name}<\/Link>"]}],"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/__tests__\/__snapshots__\/WorstProjects-test.tsx.snap":[{"add":["58","                \"pathname\": \"\/portfolio\","],"delete":["58","                \"pathname\": \"\/dashboard\",","60","                  \"branch\": undefined,","157","                  \"branch\": undefined,","254","                  \"branch\": undefined,"]}]}},"5e424b6e964cf798e7ecb674b2fff82d5fbebef4":{"changes":{"sonar-db\/src\/main\/java\/org\/sonar\/db\/charset\/MssqlCharsetHandler.java":"MODIFY","sonar-db\/src\/test\/java\/org\/sonar\/db\/charset\/ColumnDefTest.java":"ADD","sonar-db\/src\/main\/java\/org\/sonar\/db\/charset\/ColumnDef.java":"MODIFY","sonar-db\/src\/test\/java\/org\/sonar\/db\/charset\/MssqlCharsetHandlerTest.java":"MODIFY","sonar-db\/src\/main\/java\/org\/sonar\/db\/version\/DatabaseVersion.java":"MODIFY","sonar-db\/src\/main\/java\/org\/sonar\/db\/charset\/MysqlCharsetHandler.java":"MODIFY"},"diff":{"sonar-db\/src\/main\/java\/org\/sonar\/db\/charset\/MssqlCharsetHandler.java":[{"add":["29","import static com.google.common.collect.FluentIterable.from;","56","    for (ColumnDef column : from(columns).filter(ColumnDef.IsInSonarQubeTablePredicate.INSTANCE)) {"],"delete":["55","    for (ColumnDef column : columns) {"]}],"sonar-db\/src\/test\/java\/org\/sonar\/db\/charset\/ColumnDefTest.java":[{"add":[],"delete":[]}],"sonar-db\/src\/main\/java\/org\/sonar\/db\/charset\/ColumnDef.java":[{"add":["21","import com.google.common.base.Predicate;","24","import java.util.Locale;","25","import javax.annotation.Nonnull;","27","import org.sonar.db.version.DatabaseVersion;","83","  public boolean isInSonarQubeTable() {","84","    return DatabaseVersion.TABLES.contains(table.toLowerCase(Locale.ENGLISH));","85","  }","86","","99","","100","  public enum IsInSonarQubeTablePredicate implements Predicate<ColumnDef> {","101","    INSTANCE;","102","","103","    @Override","104","    public boolean apply(@Nonnull ColumnDef input) {","105","      return input.isInSonarQubeTable();","106","    }","107","  }"],"delete":[]}],"sonar-db\/src\/test\/java\/org\/sonar\/db\/charset\/MssqlCharsetHandlerTest.java":[{"add":["34","import static org.mockito.Mockito.never;","104","  @Test","105","  public void do_not_repair_system_tables_of_sql_azure() throws Exception {","106","    answerColumns(asList(new ColumnDef(\"sys.sysusers\", COLUMN_NAME, \"Latin1_General\", \"Latin1_General_CI_AI\", \"varchar\", 10, false)));","107","","108","    Connection connection = mock(Connection.class);","109","    underTest.handle(connection, false);","110","","111","    verify(selectExecutor, never()).executeUpdate(any(Connection.class), anyString());","112","  }","113",""],"delete":[]}],"sonar-db\/src\/main\/java\/org\/sonar\/db\/version\/DatabaseVersion.java":[{"add":["22","import com.google.common.collect.ImmutableSet;","25","import java.util.Set;","46","  public static final Set<String> TABLES = ImmutableSet.of("],"delete":["22","import com.google.common.collect.ImmutableList;","45","  public static final List<String> TABLES = ImmutableList.of("]}],"sonar-db\/src\/main\/java\/org\/sonar\/db\/charset\/MysqlCharsetHandler.java":[{"add":["32","import static com.google.common.collect.FluentIterable.from;","69","    for (ColumnDef column : from(columns).filter(ColumnDef.IsInSonarQubeTablePredicate.INSTANCE)) {"],"delete":["68","    for (ColumnDef column : columns) {"]}]}},"b61f2e843c6e1e72a7f1a987b53bd9921eaa69cf":{"changes":{"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/__tests__\/ComponentNavMenu-test.js":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/ComponentNavMenu.js":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/__tests__\/__snapshots__\/ComponentNavMenu-test.js.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/__tests__\/ComponentNavMenu-test.js":[{"add":["26","    qualifier: 'TRK',","27","    extensions: [{ key: 'component-foo', name: 'ComponentFoo' }]","33","  expect(shallow(<ComponentNavMenu component={component} conf={conf} \/>)).toMatchSnapshot();","34","});","35","","36","it('should work with multiple extensions', () => {","37","  const component = {","38","    key: 'foo',","39","    qualifier: 'TRK',","40","    extensions: [","41","      { key: 'component-foo', name: 'ComponentFoo' },","42","      { key: 'component-bar', name: 'ComponentBar' }","43","    ]","44","  };","45","  const conf = {","46","    showSettings: true,","47","    extensions: [{ key: 'foo', name: 'Foo' }, { key: 'bar', name: 'Bar' }]","48","  };","49","  expect(shallow(<ComponentNavMenu component={component} conf={conf} \/>)).toMatchSnapshot();"],"delete":["26","    qualifier: 'TRK'","32","  const wrapper = shallow(<ComponentNavMenu component={component} conf={conf} \/>);","33","  expect(wrapper).toMatchSnapshot();"]}],"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/ComponentNavMenu.js":[{"add":["304","  renderExtension = ({ key, name }, isAdmin) => {","338","          {withoutGovernance.map(e => this.renderExtension(e, false))}"],"delete":["304","  renderExtension = ({ key, name }, isAdmin = false) => {","338","          {withoutGovernance.map(this.renderExtension)}"]}],"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/__tests__\/__snapshots__\/ComponentNavMenu-test.js.snap":[{"add":["165","  <li","166","    className=\"dropdown\"","167","  >","168","    <a","169","      className=\"dropdown-toggle\"","170","      data-toggle=\"dropdown\"","171","      href=\"#\"","172","      id=\"component-navigation-more\"","173","    >","174","      more","175","       ","176","      <i","177","        className=\"icon-dropdown\"","178","      \/>","179","    <\/a>","180","    <ul","181","      className=\"dropdown-menu\"","182","    >","183","      <li>","184","        <Link","185","          activeClassName=\"active\"","186","          onlyActiveOnIndex={false}","187","          style={Object {}}","188","          to={","189","            Object {","190","              \"pathname\": \"\/project\/extension\/component-foo\",","191","              \"query\": Object {","192","                \"id\": \"foo\",","193","              },","194","            }","195","          }","196","        >","197","          ComponentFoo","198","        <\/Link>","199","      <\/li>","200","    <\/ul>","201","  <\/li>","202","<\/ul>","203","`;","204","","205","exports[`should work with multiple extensions 1`] = `","206","<ul","207","  className=\"nav navbar-nav nav-tabs\"","208",">","209","  <li>","210","    <Link","211","      activeClassName=\"active\"","212","      onlyActiveOnIndex={false}","213","      style={Object {}}","214","      to={","215","        Object {","216","          \"pathname\": \"\/dashboard\",","217","          \"query\": Object {","218","            \"id\": \"foo\",","219","          },","220","        }","221","      }","222","    >","223","      <i","224","        className=\"icon-home\"","225","      \/>","226","    <\/Link>","227","  <\/li>","228","  <li>","229","    <Link","230","      activeClassName=\"active\"","231","      onlyActiveOnIndex={false}","232","      style={Object {}}","233","      to={","234","        Object {","235","          \"pathname\": \"\/project\/issues\",","236","          \"query\": Object {","237","            \"id\": \"foo\",","238","            \"resolved\": \"false\",","239","          },","240","        }","241","      }","242","    >","243","      issues.page","244","    <\/Link>","245","  <\/li>","246","  <li>","247","    <Link","248","      activeClassName=\"active\"","249","      onlyActiveOnIndex={false}","250","      style={Object {}}","251","      to={","252","        Object {","253","          \"pathname\": \"\/component_measures\",","254","          \"query\": Object {","255","            \"id\": \"foo\",","256","          },","257","        }","258","      }","259","    >","260","      layout.measures","261","    <\/Link>","262","  <\/li>","263","  <li>","264","    <Link","265","      activeClassName=\"active\"","266","      onlyActiveOnIndex={false}","267","      style={Object {}}","268","      to={","269","        Object {","270","          \"pathname\": \"\/code\",","271","          \"query\": Object {","272","            \"id\": \"foo\",","273","          },","274","        }","275","      }","276","    >","277","      code.page","278","    <\/Link>","279","  <\/li>","280","  <li>","281","    <Link","282","      activeClassName=\"active\"","283","      onlyActiveOnIndex={false}","284","      style={Object {}}","285","      to={","286","        Object {","287","          \"pathname\": \"\/project\/activity\",","288","          \"query\": Object {","289","            \"id\": \"foo\",","290","          },","291","        }","292","      }","293","    >","294","      project_activity.page","295","    <\/Link>","296","  <\/li>","297","  <li","298","    className=\"dropdown\"","299","  >","300","    <a","301","      className=\"dropdown-toggle navbar-admin-link\"","302","      data-toggle=\"dropdown\"","303","      href=\"#\"","304","      id=\"component-navigation-admin\"","305","    >","306","      layout.settings","307","       ","308","      <i","309","        className=\"icon-dropdown\"","310","      \/>","311","    <\/a>","312","    <ul","313","      className=\"dropdown-menu\"","314","    >","315","      <li>","316","        <Link","317","          activeClassName=\"active\"","318","          onlyActiveOnIndex={false}","319","          style={Object {}}","320","          to={","321","            Object {","322","              \"pathname\": \"\/project\/settings\",","323","              \"query\": Object {","324","                \"id\": \"foo\",","325","              },","326","            }","327","          }","328","        >","329","          project_settings.page","330","        <\/Link>","331","      <\/li>","332","      <li>","333","        <Link","334","          activeClassName=\"active\"","335","          onlyActiveOnIndex={false}","336","          style={Object {}}","337","          to={","338","            Object {","339","              \"pathname\": \"\/project\/admin\/extension\/foo\",","340","              \"query\": Object {","341","                \"id\": \"foo\",","342","              },","343","            }","344","          }","345","        >","346","          Foo","347","        <\/Link>","348","      <\/li>","349","      <li>","350","        <Link","351","          activeClassName=\"active\"","352","          onlyActiveOnIndex={false}","353","          style={Object {}}","354","          to={","355","            Object {","356","              \"pathname\": \"\/project\/admin\/extension\/bar\",","357","              \"query\": Object {","358","                \"id\": \"foo\",","359","              },","360","            }","361","          }","362","        >","363","          Bar","364","        <\/Link>","365","      <\/li>","366","      <li>","367","        <Link","368","          activeClassName=\"active\"","369","          onlyActiveOnIndex={false}","370","          style={Object {}}","371","          to={","372","            Object {","373","              \"pathname\": \"\/project\/deletion\",","374","              \"query\": Object {","375","                \"id\": \"foo\",","376","              },","377","            }","378","          }","379","        >","380","          deletion.page","381","        <\/Link>","382","      <\/li>","383","    <\/ul>","384","  <\/li>","385","  <li","386","    className=\"dropdown\"","387","  >","388","    <a","389","      className=\"dropdown-toggle\"","390","      data-toggle=\"dropdown\"","391","      href=\"#\"","392","      id=\"component-navigation-more\"","393","    >","394","      more","395","       ","396","      <i","397","        className=\"icon-dropdown\"","398","      \/>","399","    <\/a>","400","    <ul","401","      className=\"dropdown-menu\"","402","    >","403","      <li>","404","        <Link","405","          activeClassName=\"active\"","406","          onlyActiveOnIndex={false}","407","          style={Object {}}","408","          to={","409","            Object {","410","              \"pathname\": \"\/project\/extension\/component-foo\",","411","              \"query\": Object {","412","                \"id\": \"foo\",","413","              },","414","            }","415","          }","416","        >","417","          ComponentFoo","418","        <\/Link>","419","      <\/li>","420","      <li>","421","        <Link","422","          activeClassName=\"active\"","423","          onlyActiveOnIndex={false}","424","          style={Object {}}","425","          to={","426","            Object {","427","              \"pathname\": \"\/project\/extension\/component-bar\",","428","              \"query\": Object {","429","                \"id\": \"foo\",","430","              },","431","            }","432","          }","433","        >","434","          ComponentBar","435","        <\/Link>","436","      <\/li>","437","    <\/ul>","438","  <\/li>"],"delete":[]}]}},"84d4f441879de01734bb9041fc0cdfbd461386ee":{"changes":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/controllers\/api\/java_ws_controller.rb":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/controllers\/api\/java_ws_controller.rb":[{"add":["51","    (params[:wspath]=='batch' && params[:wsaction]=='index') ||","52","      (params[:wspath]=='batch' && params[:wsaction]=='file') ||","53","      (params[:wspath]=='api\/system' && params[:wsaction]=='db_migration_status') ||","54","      (params[:wspath]=='api\/system' && params[:wsaction]=='status')"],"delete":["51","    (params[:wspath]=='batch' && params[:wsaction]=='index') || (params[:wspath]=='batch' && params[:wsaction]=='file')"]}]}},"33d8f0df151bc7334ce92a705da292bdd2ea4ace":{"changes":{"server\/sonar-web\/src\/main\/js\/app\/styles\/components\/issues.css":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/app\/styles\/components\/issues.css":[{"add":["219","  word-break: break-all;"],"delete":[]}]}},"fa2a913859fd48bf63246d566b5fec250fb4aca8":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/ui\/ws\/ComponentActionTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ui\/ws\/ComponentAction.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/ui\/ws\/ComponentActionTest.java":[{"add":["45","import org.sonar.db.permission.OrganizationPermission;","245","    componentDbTester.insertComponent(project);","254","    componentDbTester.insertComponent(project);"],"delete":["52","import org.sonar.db.permission.OrganizationPermission;","245","    componentDbTester.insertProjectAndSnapshot(project);","254","    componentDbTester.insertProjectAndSnapshot(project);"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ui\/ws\/ComponentAction.java":[{"add":["48","import org.sonar.db.permission.OrganizationPermission;","162","    List<Page> pages = pageRepository.getComponentPages(false, component.qualifier());","163","    writeExtensions(json, component, pages);","165","      json.prop(\"version\", analysis.getVersion()).prop(\"snapshotDate\", DateUtils.formatDateTime(new Date(analysis.getCreatedAt())));"],"delete":["52","import org.sonar.db.permission.OrganizationPermission;","162","","164","      json.prop(\"version\", analysis.getVersion())","165","        .prop(\"snapshotDate\", DateUtils.formatDateTime(new Date(analysis.getCreatedAt())));","166","      List<Page> pages = pageRepository.getComponentPages(false, component.qualifier());","167","      writeExtensions(json, component, pages);"]}]}},"42339a34c4beefc564d6ae7d3e36040624027cef":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/inputs\/InputForPassword.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/inputs\/__tests__\/InputForPassword-test.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/inputs\/InputForPassword.tsx":[{"add":["35","    changing: !this.props.value","38","  componentWillReceiveProps(nextProps: DefaultSpecializedInputProps) {","39","    \/*","40","     * Reset `changing` if:","41","     *  - the value is reset (valueChanged -> !valueChanged)","42","     *     or","43","     *  - the value changes from outside the input (i.e. store update\/reset\/cancel)","44","     *\/","45","    if (","46","      (this.props.hasValueChanged || this.props.value !== nextProps.value) &&","47","      !nextProps.hasValueChanged","48","    ) {","49","      this.setState({ changing: !nextProps.value });","67","          autoFocus={this.state.changing && this.props.value}","72","          value={this.props.value}","79","    if (this.state.changing) {"],"delete":["28","  value: string;","36","    value: '',","37","    changing: false","40","  componentDidUpdate(prevProps: DefaultSpecializedInputProps) {","41","    if (!prevProps.hasValueChanged && this.props.hasValueChanged) {","42","      this.setState({ changing: false, value: '' });","48","    this.setState({ changing: true, value: event.target.value });","61","          autoFocus={this.state.changing}","66","          value={this.state.value}","73","    const hasValue = !!this.props.value;","74","","75","    if (this.state.changing || !hasValue) {"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/inputs\/__tests__\/InputForPassword-test.tsx":[{"add":["53","it('should show form when empty, and enable handle typing', () => {","54","  const input = shallowRender({ value: '' });","55","  const onChange = (value: string) => input.setProps({ hasValueChanged: true, value });","56","  input.setProps({ onChange });","57","","58","  expect(input.find('form').length).toBe(1);","59","  change(input.find('input.js-password-input'), 'hello');","60","  expect(input.find('form').length).toBe(1);","61","  expect(input.find('input.js-password-input').prop('value')).toBe('hello');","62","});","63","","64","it('should handle value reset', () => {","65","  const input = shallowRender({ hasValueChanged: true, value: 'whatever' });","66","  input.setState({ changing: true });","67","","68","  \/\/ reset","69","  input.setProps({ hasValueChanged: false, value: 'original' });","70","","71","  expect(input.state('changing')).toBe(false);","72","});","73","","74","it('should handle value reset to empty', () => {","75","  const input = shallowRender({ hasValueChanged: true, value: 'whatever' });","76","  input.setState({ changing: true });","77","","78","  \/\/ outside change","79","  input.setProps({ hasValueChanged: false, value: '' });","80","","81","  expect(input.state('changing')).toBe(true);","82","});","83","","85","  return shallow<InputForPassword>("],"delete":["54","  return shallow("]}]}},"a340aab5a95c56a1bd196f47ce79de7413bfc5fd":{"changes":{"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/purge\/ProjectCleaner.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/CoreProperties.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/purge\/ProjectCleanerTest.java":"MODIFY"},"diff":{"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/purge\/ProjectCleaner.java":[{"add":["22","import org.sonar.api.CoreProperties;","26","import org.sonar.api.utils.TimeUtils;","27","import org.sonar.api.utils.log.Logger;","28","import org.sonar.api.utils.log.Loggers;","41","  private static final Logger LOG = Loggers.get(ProjectCleaner.class);","42","","56","    long start = System.currentTimeMillis();","65","    logProfiling(start, projectConfig);","68","","69","  private void logProfiling(long start, Configuration config) {","70","    if (config.getBoolean(CoreProperties.PROFILING_LOG_PROPERTY).orElse(false)) {","71","      long duration = System.currentTimeMillis() - start;","72","      LOG.info(\"\");","73","      LOG.info(\" -------- Profiling for purge: \" + TimeUtils.formatDuration(duration) + \" --------\");","74","      LOG.info(\"\");","75","      profiler.dump(duration, LOG);","76","      LOG.info(\"\");","77","      LOG.info(\" -------- End of profiling for purge --------\");","78","      LOG.info(\"\");","79","    }","80","  }"],"delete":[]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/CoreProperties.java":[{"add":["311","   * @since 3.6","312","   * Removed in 8.4 by mistake and reintroduced in 8.5","313","   *\/","314","  String PROFILING_LOG_PROPERTY = \"sonar.showProfiling\";","315","","316","  \/**"],"delete":[]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/purge\/ProjectCleanerTest.java":[{"add":["23","import org.sonar.api.CoreProperties;","37","import static org.mockito.ArgumentMatchers.anyLong;","39","import static org.mockito.Mockito.never;","65","","66","  @Test","67","  public void no_profiling_when_property_is_false() {","68","    settings.setProperty(CoreProperties.PROFILING_LOG_PROPERTY, false);","69","","70","    underTest.purge(mock(DbSession.class), \"root\", \"project\", settings.asConfig(), emptySet());","71","","72","    verify(profiler, never()).dump(anyLong(), any());","73","  }","74","","75","  @Test","76","  public void profiling_when_property_is_true() {","77","    settings.setProperty(CoreProperties.PROFILING_LOG_PROPERTY, true);","78","","79","    underTest.purge(mock(DbSession.class), \"root\", \"project\", settings.asConfig(), emptySet());","80","","81","    verify(profiler).dump(anyLong(), any());","82","  }"],"delete":[]}]}},"34f303b0866eb0d69971878265c0890568befa64":{"changes":{"\/dev\/null":"DELETE","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/UpdateNullValuesFromExternalColumnsAndLoginOfUsers.java":"MODIFY","server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/FixDuplicationInExternalLoginOnUsersTest\/users.sql":"ADD","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/UpdateNullValuesFromExternalColumnsAndLoginOfUsersTest.java":"MODIFY","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/FixDuplicationInExternalLoginOnUsersTest.java":"ADD","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/DbVersion72.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/authentication\/UserRegistrarImpl.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/FixDuplicationInExternalLoginOnUsers.java":"ADD"},"diff":{"\/dev\/null":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/UpdateNullValuesFromExternalColumnsAndLoginOfUsers.java":[{"add":["32"," * Indeed, authentication will search for user by LOGIN but also by using EXTERNAL_ID and EXTERNAL_PROVIDER.","54","    massUpdate.select(\"SELECT id, login, external_login, external_identity_provider FROM users \" +","55","      \"WHERE login IS NULL OR external_login IS NULL OR external_id IS NULL OR external_identity_provider IS NULL\");","56","    massUpdate.update(\"UPDATE users SET login=?, external_login=?, external_id=?, external_identity_provider=?, updated_at=? WHERE id=?\");","66","      String externalLogin = row.getNullableString(3);","67","      externalLogin = externalLogin == null ? login : externalLogin;","68","","69","      String externalIdentityProvider = row.getNullableString(4);","70","","72","      update.setString(2, externalLogin);","73","      update.setString(3, externalLogin);","74","      update.setString(4, externalIdentityProvider == null ? \"sonarqube\" : externalIdentityProvider);","75","      update.setLong(5, now);","76","      update.setLong(6, id);"],"delete":["32"," * Indeed, authentication will search for user but LOGIN but also buy using EXTERNAL_ID and EXTERNAL_PROVIDER.","54","    massUpdate.select(\"SELECT id, login FROM users WHERE login IS NULL OR external_login IS NULL OR external_identity_provider IS NULL\");","55","    massUpdate.update(\"UPDATE users SET login=?, external_login=?, external_identity_provider=?, updated_at=? WHERE id=?\");","66","      update.setString(2, login);","67","      update.setString(3, \"sonarqube\");","68","      update.setLong(4, now);","69","      update.setLong(5, id);"]}],"server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/FixDuplicationInExternalLoginOnUsersTest\/users.sql":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/UpdateNullValuesFromExternalColumnsAndLoginOfUsersTest.java":[{"add":["59","    insertUser(\"USER_1\", \"user1\", \"user1\", \"github\");","60","    insertUser(\"USER_2\", null, null, null);","61","    insertUser(\"USER_3\", \"user\", null, null);","62","    insertUser(\"USER_4\", null, \"user\", null);","63","    insertUser(\"USER_5\", null, null, \"github\");","64","    insertUser(null, \"user\", \"user\", \"bitbucket\");","65","    insertUser(null, null, null, null);","70","      tuple(\"USER_1\", \"user1\", \"user1\", \"github\", PAST),","71","      tuple(\"USER_2\", \"USER_2\", \"USER_2\", \"sonarqube\", NOW),","72","      tuple(\"USER_3\", \"user\", \"user\", \"sonarqube\", NOW),","73","      tuple(\"USER_4\", \"USER_4\", \"USER_4\", \"sonarqube\", NOW),","74","      tuple(\"USER_5\", \"USER_5\", \"USER_5\", \"github\", NOW),","75","      tuple(\"1\", \"user\", \"user\", \"bitbucket\", NOW),","76","      tuple(\"2\", \"2\", \"2\", \"sonarqube\", NOW));","81","    insertUser(null, \"user\", \"user\", \"bitbucket\");","92","    insertUser(\"USER_1\", null, null, null);","97","    assertUsers(tuple(\"USER_1\", \"USER_1\", \"USER_1\", \"sonarqube\", NOW));","101","    assertThat(db.select(\"SELECT LOGIN, EXTERNAL_LOGIN, EXTERNAL_ID, EXTERNAL_IDENTITY_PROVIDER, UPDATED_AT FROM USERS\")","103","      .map(map -> new Tuple(map.get(\"LOGIN\"), map.get(\"EXTERNAL_LOGIN\"), map.get(\"EXTERNAL_ID\"), map.get(\"EXTERNAL_IDENTITY_PROVIDER\"), map.get(\"UPDATED_AT\")))","108","  private void insertUser(@Nullable String login, @Nullable String externalLogin, @Nullable String externalId, @Nullable String externalIdentityProvider) {","112","      \"EXTERNAL_ID\", externalLogin,"],"delete":["59","    insertUser(\"USER_1\", \"user1\", \"github\");","60","    insertUser(\"USER_2\", null, null);","61","    insertUser(\"USER_3\", \"user\", null);","62","    insertUser(\"USER_4\", null, \"github\");","63","    insertUser(null, \"user\", \"bitbucket\");","64","    insertUser(null, null, null);","69","      tuple(\"USER_1\", \"user1\", \"github\", PAST),","70","      tuple(\"USER_2\", \"USER_2\", \"sonarqube\", NOW),","71","      tuple(\"USER_3\", \"USER_3\", \"sonarqube\", NOW),","72","      tuple(\"USER_4\", \"USER_4\", \"sonarqube\", NOW),","73","      tuple(\"1\", \"1\", \"sonarqube\", NOW),","74","      tuple(\"2\", \"2\", \"sonarqube\", NOW));","79","    insertUser(null, \"user\", \"bitbucket\");","90","    insertUser(\"USER_1\", null, null);","95","    assertUsers(tuple(\"USER_1\", \"USER_1\", \"sonarqube\", NOW));","99","    assertThat(db.select(\"SELECT LOGIN, EXTERNAL_LOGIN, EXTERNAL_IDENTITY_PROVIDER, UPDATED_AT FROM USERS\")","101","      .map(map -> new Tuple(map.get(\"LOGIN\"), map.get(\"EXTERNAL_LOGIN\"), map.get(\"EXTERNAL_IDENTITY_PROVIDER\"), map.get(\"UPDATED_AT\")))","106","  private void insertUser(@Nullable String login, @Nullable String externalLogin, @Nullable String externalIdentityProvider) {"]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/FixDuplicationInExternalLoginOnUsersTest.java":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/DbVersion72.java":[{"add":["41","      .add(2112, \"Fix duplication in EXTERNAL_ID and EXTERNAL_LOGIN on table users\", FixDuplicationInExternalLoginOnUsers.class)"],"delete":["41","      .add(2112, \"Populate EXTERNAL_ID on table users\", PopulateExternalIdOnUsers.class)"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/authentication\/UserRegistrarImpl.java":[{"add":["111","    \/\/ Then, try with the external login, for instance when external ID has changed"],"delete":["111","    \/\/ Then, try with the external login, for instance when for instance external ID has changed"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/FixDuplicationInExternalLoginOnUsers.java":[{"add":[],"delete":[]}]}},"bb7e74da6d8a3fdd27317af2e92c4ec106e92956":{"changes":{"server\/sonar-webserver-core\/src\/test\/java\/org\/sonar\/server\/telemetry\/TelemetryDaemonTest.java":"MODIFY","server\/sonar-webserver\/src\/main\/java\/org\/sonar\/server\/platform\/platformlevel\/PlatformLevel1.java":"MODIFY","\/dev\/null":"DELETE","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/property\/InternalPropertiesDaoTest.java":"MODIFY","server\/sonar-webserver-api\/src\/main\/java\/org\/sonar\/server\/util\/GlobalLockManager.java":"MODIFY","server\/sonar-webserver-core\/src\/test\/java\/org\/sonar\/server\/qualitygate\/ProjectsInWarningDaemonTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/property\/InternalPropertiesDao.java":"MODIFY","server\/sonar-webserver-api\/src\/main\/java\/org\/sonar\/server\/util\/GlobalLockManagerImpl.java":"ADD","server\/sonar-webserver-api\/src\/testFixtures\/java\/org\/sonar\/server\/util\/GlobalLockManagerRule.java":"ADD","server\/sonar-webserver-api\/build.gradle":"MODIFY","server\/sonar-webserver-api\/src\/test\/java\/org\/sonar\/server\/util\/GlobalLockManagerImplTest.java":"ADD"},"diff":{"server\/sonar-webserver-core\/src\/test\/java\/org\/sonar\/server\/telemetry\/TelemetryDaemonTest.java":[{"add":["53","import org.sonar.server.util.GlobalLockManagerImpl;","99","  private final GlobalLockManager lockManager = mock(GlobalLockManagerImpl.class);"],"delete":["98","  private final GlobalLockManager lockManager = mock(GlobalLockManager.class);"]}],"server\/sonar-webserver\/src\/main\/java\/org\/sonar\/server\/platform\/platformlevel\/PlatformLevel1.java":[{"add":["31","import org.sonar.server.util.GlobalLockManagerImpl;","131","      GlobalLockManagerImpl.class,"],"delete":["63","import org.sonar.server.util.GlobalLockManager;","131","      GlobalLockManager.class,"]}],"\/dev\/null":[{"add":[],"delete":[]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/property\/InternalPropertiesDaoTest.java":[{"add":["409","    assertThat(underTest.selectByKey(dbSession, propertyKeyOf(A_KEY))).contains(String.valueOf(now));","424","    assertThat(underTest.selectByKey(dbSession, propertyKeyOf(A_KEY))).contains(String.valueOf(now));","434","    assertThat(underTest.selectByKey(dbSession, propertyKeyOf(A_KEY))).contains(String.valueOf(now));","440","    String propertyKey = propertyKeyOf(name);","449","    when(mapperMock.selectAsText(ImmutableList.of(propertyKey)))","451","    doThrow(RuntimeException.class).when(mapperMock).insertAsText(eq(propertyKey), anyString(), anyLong());","455","    assertThat(underTest.selectByKey(dbSession, propertyKey)).contains(String.valueOf(now));","462","    String propertyKey = propertyKeyOf(name);","464","    long now = new Random().nextInt(4_889_989);","474","    dto.setKey(propertyKey);","476","    when(mapperMock.selectAsText(ImmutableList.of(propertyKey)))","481","    assertThat(underTest.selectByKey(dbSession, propertyKey)).contains(String.valueOf(oldTimestamp));","485","  public void tryLock_throws_IAE_if_lock_name_is_empty() {","486","    expectedException.expect(IllegalArgumentException.class);","487","    expectedException.expectMessage(\"lock name can't be empty\");","488","","489","    underTest.tryLock(dbSession, \"\", 60);","490","  }","491","","492","  @Test","493","  public void tryLock_throws_IAE_if_lock_name_length_is_16_or_more() {","494","    String tooLongName = randomAlphabetic(16 + new Random().nextInt(30));","498","","502","  private static String propertyKeyOf(String lockName) {","503","    return \"lock.\" + lockName;"],"delete":["56","import static org.sonar.db.property.InternalPropertiesDao.KEY_MAX_LENGTH;","57","import static org.sonar.db.property.InternalPropertiesDao.LOCK_PREFIX;","411","    assertThat(underTest.selectByKey(dbSession, key(A_KEY))).contains(String.valueOf(now));","426","    assertThat(underTest.selectByKey(dbSession, key(A_KEY))).contains(String.valueOf(now));","436","    assertThat(underTest.selectByKey(dbSession, key(A_KEY))).contains(String.valueOf(now));","442","    String key = key(name);","451","    when(mapperMock.selectAsText(ImmutableList.of(key)))","453","    doThrow(RuntimeException.class).when(mapperMock).insertAsText(eq(key), anyString(), anyLong());","457","    assertThat(underTest.selectByKey(dbSession, key)).contains(String.valueOf(now));","464","    String key = key(name);","466","    long now = 123456;\/\/new Random().nextInt();","476","    dto.setKey(key);","478","    when(mapperMock.selectAsText(ImmutableList.of(key)))","483","    assertThat(underTest.selectByKey(dbSession, key)).contains(String.valueOf(oldTimestamp));","487","  public void tryLock_throws_if_lock_name_would_produce_too_long_key() {","488","    String tooLongName = randomAlphabetic(KEY_MAX_LENGTH - LOCK_PREFIX.length());","495","  private String key(String name) {","496","    return LOCK_PREFIX + '.' + name;"]}],"server\/sonar-webserver-api\/src\/main\/java\/org\/sonar\/server\/util\/GlobalLockManager.java":[{"add":["21","import org.sonar.db.property.InternalPropertiesDao;","23","public interface GlobalLockManager {","25","  int LOCK_NAME_MAX_LENGTH = InternalPropertiesDao.LOCK_NAME_MAX_LENGTH;","26","  int DEFAULT_LOCK_DURATION_SECONDS = 180;","29","   * Try to acquire a lock on the given name for the {@link #DEFAULT_LOCK_DURATION_SECONDS default duration},","31","   *","32","   * @throws IllegalArgumentException if name's length is > {@link #LOCK_NAME_MAX_LENGTH} or empty","34","  boolean tryLock(String name);","36","  \/**","37","   * Try to acquire a lock on the given name for the specified duration,","38","   * using the generic locking mechanism of {@see org.sonar.db.property.InternalPropertiesDao}.","39","   *","40","   * @throws IllegalArgumentException if name's length is > {@link #LOCK_NAME_MAX_LENGTH} or empty","41","   *\/","42","  boolean tryLock(String name, int durationSecond);"],"delete":["21","import org.sonar.api.ce.ComputeEngineSide;","22","import org.sonar.api.server.ServerSide;","23","import org.sonar.db.DbClient;","24","import org.sonar.db.DbSession;","26","\/**","27"," * Provide a simple mechanism to manage global locks across multiple nodes running in a cluster.","28"," * In the target use case multiple nodes try to execute something at around the same time,","29"," * and only the first should succeed, and the rest do nothing.","30"," *\/","31","@ComputeEngineSide","32","@ServerSide","33","public class GlobalLockManager {","35","  static final int DEFAULT_LOCK_DURATION_SECONDS = 180;","36","","37","  private final DbClient dbClient;","38","","39","  public GlobalLockManager(DbClient dbClient) {","40","    this.dbClient = dbClient;","41","  }","44","   * Try to acquire a lock on the given name in the default namespace,","47","  public boolean tryLock(String name) {","48","    return tryLock(name, DEFAULT_LOCK_DURATION_SECONDS);","49","  }","51","  public boolean tryLock(String name, int durationSecond) {","52","    try (DbSession dbSession = dbClient.openSession(false)) {","53","      boolean success = dbClient.internalPropertiesDao().tryLock(dbSession, name, durationSecond);","54","      dbSession.commit();","55","      return success;","56","    }","57","  }"]}],"server\/sonar-webserver-core\/src\/test\/java\/org\/sonar\/server\/qualitygate\/ProjectsInWarningDaemonTest.java":[{"add":["41","import org.sonar.server.util.GlobalLockManagerImpl;","68","  private GlobalLockManager lockManager = mock(GlobalLockManagerImpl.class);"],"delete":["67","  private GlobalLockManager lockManager = mock(GlobalLockManager.class);"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/property\/InternalPropertiesDao.java":[{"add":["48","  private static final String LOCK_PREFIX = \"lock.\";","50","  private static final int KEY_MAX_LENGTH = 20;","51","  public static final int LOCK_NAME_MAX_LENGTH = KEY_MAX_LENGTH - LOCK_PREFIX.length();","52","","194","   *","195","   * @throws IllegalArgumentException if name's length is > {@link #LOCK_NAME_MAX_LENGTH}","196","   * @throws IllegalArgumentException if maxAgeInSeconds is <= 0","199","    if (name.isEmpty()) {","200","      throw new IllegalArgumentException(\"lock name can't be empty\");","201","    }","202","    if (name.length() > LOCK_NAME_MAX_LENGTH) {","205","    if (maxAgeInSeconds <= 0) {","206","      throw new IllegalArgumentException(\"maxAgeInSeconds must be > 0\");","207","    }","209","    String key = LOCK_PREFIX + name;"],"delete":["48","  public static final String LOCK_PREFIX = \"lock.\";","50","  static final int KEY_MAX_LENGTH = 20;","194","    String key = LOCK_PREFIX + '.' + name;","195","    if (key.length() > KEY_MAX_LENGTH) {"]}],"server\/sonar-webserver-api\/src\/main\/java\/org\/sonar\/server\/util\/GlobalLockManagerImpl.java":[{"add":[],"delete":[]}],"server\/sonar-webserver-api\/src\/testFixtures\/java\/org\/sonar\/server\/util\/GlobalLockManagerRule.java":[{"add":[],"delete":[]}],"server\/sonar-webserver-api\/build.gradle":[{"add":["39","","40","  testFixturesApi 'junit:junit'","41","","42","  testFixturesCompileOnly 'com.google.code.findbugs:jsr305'"],"delete":[]}],"server\/sonar-webserver-api\/src\/test\/java\/org\/sonar\/server\/util\/GlobalLockManagerImplTest.java":[{"add":[],"delete":[]}]}},"a79dddadd5038e9d6bbc26d363e39576180c1063":{"changes":{"sonar-application\/src\/test\/java\/org\/sonar\/application\/AppTest.java":"MODIFY","sonar-application\/src\/main\/java\/org\/sonar\/application\/App.java":"MODIFY"},"diff":{"sonar-application\/src\/test\/java\/org\/sonar\/application\/AppTest.java":[{"add":["37","import static org.assertj.core.api.Assertions.entry;","112","  @Test","113","  public void sets_TMPDIR_env_var_of_Web_process() throws Exception {","114","    Monitor monitor = mock(Monitor.class);","115","    App app = new App(monitor);","116","    Props props = initDefaultProps();","117","    String expectedTmpDir = \"expected tmp dir\";","118","    props.set(\"sonar.path.temp\", expectedTmpDir);","119","    app.start(props);","120","","121","    ArgumentCaptor<List<JavaCommand>> argument = newJavaCommandArgumentCaptor();","122","    verify(monitor).start(argument.capture());","123","","124","    assertThat(argument.getValue().get(1).getEnvVariables()).contains(entry(\"TMPDIR\", expectedTmpDir));","125","  }","126",""],"delete":[]}],"sonar-application\/src\/main\/java\/org\/sonar\/application\/App.java":[{"add":["94","      \/\/ ensure JRuby uses SQ's temp directory as temp directory (eg. for temp files used during HTTP uploads)","95","      .setEnvVariable(\"TMPDIR\", props.nonNullValue(ProcessProperties.PATH_TEMP))"],"delete":[]}]}},"46dc0f0590c60abfe479c95f17f11b552ad070a9":{"changes":{"sonar-db\/src\/main\/java\/org\/sonar\/db\/ce\/CeActivityDao.java":"MODIFY"},"diff":{"sonar-db\/src\/main\/java\/org\/sonar\/db\/ce\/CeActivityDao.java":[{"add":["44","    dto.setIsLast(dto.getStatus() != CeActivityDto.Status.CANCELED);","46","    CeActivityMapper ceActivityMapper = mapper(dbSession);","47","    if (dto.getIsLast()) {","48","      ceActivityMapper.updateIsLastToFalseForLastKey(dto.getIsLastKey(), dto.getUpdatedAt());","50","    ceActivityMapper.insert(dto);"],"delete":["25","import org.apache.ibatis.session.RowBounds;","45","    dto.setIsLast(false);","46","    mapper(dbSession).insert(dto);","48","    List<String> uuids = mapper(dbSession).selectUuidsOfRecentlyCreatedByIsLastKey(dto.getIsLastKey(), new RowBounds(0, 1));","49","    \/\/ should never be empty, as a row was just inserted!","50","    if (!uuids.isEmpty()) {","51","      mapper(dbSession).updateIsLastToFalseForLastKey(dto.getIsLastKey(), dto.getUpdatedAt());","52","      mapper(dbSession).updateIsLastToTrueForUuid(uuids.get(0), dto.getUpdatedAt());"]}]}},"08be68fda3cfd859ab412bfa634409d211f79927":{"changes":{"server\/sonar-qa-util\/src\/main\/java\/org\/sonarqube\/qa\/util\/pageobjects\/QualityProfilePage.java":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/components\/__tests__\/ProfileActions-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/components\/__tests__\/__snapshots__\/ProfileActions-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/api\/quality-profiles.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/components\/BuiltInQualityProfileBadge.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/components\/ProfileActions.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/details\/ProfileProjects.tsx":"MODIFY","tests\/src\/test\/java\/org\/sonarqube\/tests\/qualityProfile\/OrganizationQualityProfilesUiTest.java":"MODIFY"},"diff":{"server\/sonar-qa-util\/src\/main\/java\/org\/sonarqube\/qa\/util\/pageobjects\/QualityProfilePage.java":[{"add":["50","    Selenide.$(\"#profile-projects .select-list-list-container\").shouldBe(Condition.visible);","51","    return this;","52","  }","53","","54","  public QualityProfilePage shouldNotAllowToChangeProjects() {","55","    Selenide.$(\".js-change-projects\").shouldNot(Condition.exist);","56","    return this;","57","  }","58","","59","  public QualityProfilePage shouldNotAllowToEdit() {","60","    Selenide.$(\"button.dropdown-toggle\").should(Condition.exist).click();","61","    Selenide.$(\"#quality-profile-rename\").shouldNot(Condition.exist);","62","    Selenide.$(\"#quality-profile-activate-more-rules\").shouldNot(Condition.exist);"],"delete":["50","    Selenide.$(\"#profile-projects .select-list-list\").shouldBe(Condition.visible);"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/components\/__tests__\/ProfileActions-test.tsx":[{"add":["52","it('renders with permission to edit only', () => {","71","        profile={{","72","          ...PROFILE,","73","          actions: {","74","            copy: true,","75","            edit: true,","76","            delete: true,","77","            setAsDefault: true,","78","            associateProjects: true","79","          }","80","        }}"],"delete":["52","it('renders with permission to edit', () => {","71","        profile={{ ...PROFILE, actions: { copy: true, edit: true, setAsDefault: true } }}"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/components\/__tests__\/__snapshots__\/ProfileActions-test.tsx.snap":[{"add":["5","    id=\"quality-profile-activate-more-rules\"","86","exports[`renders with permission to edit only 1`] = `","89","    id=\"quality-profile-activate-more-rules\""],"delete":["85","exports[`renders with permission to edit 1`] = `","119","  <ActionsDropdownDivider \/>","120","  <ActionsDropdownItem","121","    destructive={true}","122","    id=\"quality-profile-delete\"","123","    onClick={[Function]}","124","  >","125","    delete","126","  <\/ActionsDropdownItem>"]}],"server\/sonar-web\/src\/main\/js\/api\/quality-profiles.ts":[{"add":["32","  associateProjects?: boolean;","34","  delete?: boolean;","108","  return getJSON('\/api\/qualityprofiles\/projects', data).catch(throwGlobalError);"],"delete":["106","  return getJSON('\/api\/qualityprofiles\/projects', data);"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/components\/BuiltInQualityProfileBadge.tsx":[{"add":["43","  return tooltip ? (","44","    <Tooltip overlay={overlay} placement=\"right\">","45","      {badge}","46","    <\/Tooltip>","47","  ) : (","48","    badge","49","  );"],"delete":["43","  return tooltip ? <Tooltip overlay={overlay}>{badge}<\/Tooltip> : badge;"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/components\/ProfileActions.tsx":[{"add":["141","        {actions.edit && (","142","          <ActionsDropdownItem to={activateMoreUrl} id=\"quality-profile-activate-more-rules\">","168","        {actions.edit && (","174","        {actions.setAsDefault && (","182","        {actions.delete && <ActionsDropdownDivider \/>}","184","        {actions.delete && ("],"delete":["139","    const canActivateRules = actions.edit && !profile.isBuiltIn;","140","    const canRename = actions.edit && !profile.isBuiltIn;","141","    const canSetAsDefault = actions.setAsDefault && !profile.isDefault;","142","    const canDelete = actions.edit && !profile.isDefault && !profile.isBuiltIn;","143","","146","        {canActivateRules && (","147","          <ActionsDropdownItem to={activateMoreUrl}>","173","        {canRename && (","179","        {canSetAsDefault && (","187","        {canDelete && <ActionsDropdownDivider \/>}","189","        {canDelete && ("]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/details\/ProfileProjects.tsx":[{"add":["71","    getProfileProjects(data).then(","72","      (r: any) => {","73","        if (this.mounted) {","74","          this.setState({","75","            projects: r.results,","76","            more: r.more,","77","            loading: false","78","          });","79","        }","80","      },","81","      () => {}","82","    );","96","    if (this.state.loading) {","97","      return <i className=\"spinner\" \/>;","98","    }","99","","109","    if (this.state.loading) {","110","      return <i className=\"spinner\" \/>;","111","    }","112","","143","          profile.actions.associateProjects && (","156","          {profile.isDefault ? this.renderDefault() : this.renderProjects()}"],"delete":["71","    getProfileProjects(data).then((r: any) => {","72","      if (this.mounted) {","73","        this.setState({","74","          projects: r.results,","75","          more: r.more,","76","          loading: false","77","        });","78","      }","79","    });","132","          profile.actions.edit &&","133","          !profile.isDefault && (","146","          {this.state.loading ? (","147","            <i className=\"spinner\" \/>","148","          ) : profile.isDefault ? (","149","            this.renderDefault()","150","          ) : (","151","            this.renderProjects()","152","          )}"]}],"tests\/src\/test\/java\/org\/sonarqube\/tests\/qualityProfile\/OrganizationQualityProfilesUiTest.java":[{"add":["120","  public void testBuiltIn() {","121","    Navigation nav = tester.openBrowser().logIn().submitCredentials(user.getLogin());","122","    nav.openQualityProfile(\"xoo\", \"Sonar way\", \"test-org\")","123","      .shouldNotAllowToEdit()","124","      .shouldAllowToChangeProjects();","125","    nav.openQualityProfile(\"xoo\", \"Basic\", \"test-org\")","126","      .shouldNotAllowToEdit()","127","      .shouldNotAllowToChangeProjects();","128","  }","129","","130","  @Test"],"delete":[]}]}},"0322e241e02e55e102205ae95e07c4c4cd649eec":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/ProjectCardLanguages.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/ProjectCardLanguages.js":[{"add":["22","import { TooltipsContainer } from '..\/..\/..\/components\/mixins\/tooltips-mixin';","48","        <TooltipsContainer options={{ delay: { show: 500, hide: 0 } }}>","49","          <div className=\"project-card-languages\">","50","            <span title={finalLanguages.join('<br\/>')} data-toggle=\"tooltip\">{finalLanguages.join(', ')}<\/span>","51","          <\/div>","52","        <\/TooltipsContainer>"],"delete":["47","        <div className=\"project-card-languages\">","48","          {finalLanguages.join(', ')}","49","        <\/div>"]}]}},"eb451f2c3aafc231cf05c81ff3e94f73b98ee586":{"changes":{"server\/sonar-db-core\/src\/testFixtures\/java\/org\/sonar\/db\/CoreDbTester.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/projectmeasures\/DropTechIndexOnUuidOfProjectMeasuresTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/groups\/groupsusers\/DropIndexOnGroupIdOfGroupsUsersTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/activerules\/DropIndexOnActiveRuleIdOfActiveRuleParametersTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/users\/fk\/userroles\/AddIndexOnUserUuidOfUserRolesTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/rules\/activerules\/DropIndexOnRuleIdColumnOfActiveRulesTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/users\/fk\/groupsusers\/AddUniqueIndexOnUserUuidAndGroupIdOfGroupsUsersTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/rules\/deprecatedrulekeys\/AddIndexToDeprecatedRuleKeysTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/rules\/rulesparameters\/AddIndexesToRulesParametersTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/projectmeasures\/AddTechIndexOnUuidOfProjectMeasuresTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/groups\/grouproles\/DropIndexOnGroupIdOfGroupRolesTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/rules\/activerules\/AddIndexToActiveRulesTable.java":"MODIFY","server\/sonar-db-core\/src\/test\/java\/org\/sonar\/db\/DatabaseUtilsTest.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/users\/fk\/userroles\/DropIndexOnUserIdOfUserRolesTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/metrics\/projectmeasures\/DropIndexOnMetricIdOfProjectMeasuresTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/issuechanges\/AddIndexOnKeeOfIssueChangesTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/permissiontemplates\/fk\/permtplcharacteristics\/AddUniqueIndexOnTemplateUuidAndPermissionKeyColumnsOfPermTplCharacteristicsTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/rulesprofiles\/DropUniqueIndexOnKeeColumnOfRulesProfilesTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/metrics\/livemeasures\/AddIndexOnMetricUuidOfLiveMeasuresTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/users\/fk\/qprofileeditusers\/AddUniqueIndexOnUserUuidAndQProfileUuidOfQProfileEditUsersTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/rulesprofiles\/fk\/activerules\/DropUniqueIndexOnProfileIdColumnOfActiveRulesTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/def\/Validations.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/metrics\/livemeasures\/AddIndexOnProjectUuidOfLiveMeasuresTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/groups\/grouproles\/AddIndexOnGroupUuidOfGroupRolesTable.java":"MODIFY","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/def\/ValidationsTest.java":"MODIFY","server\/sonar-db-core\/src\/main\/java\/org\/sonar\/db\/DatabaseUtils.java":"MODIFY","server\/sonar-db-core\/src\/test\/resources\/org\/sonar\/db\/DatabaseUtilsTest\/sql.sql":"ADD","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/rules\/rulesparameters\/DropIndexesOnRuleIdColumnOfRulesParametersTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/rules\/deprecatedrulekeys\/DropIndexOnRuleIdColumnOfDeprecatedRuleKeysTable.java":"MODIFY","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/sql\/CreateTableBuilderTest.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/metrics\/projectmeasures\/AddIndexOnMetricUuidOfProjectMeasuresTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/groups\/qprofileeditgroups\/DropIndexOnGroupIdOfQProfileEditGroupsTable.java":"MODIFY","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/sql\/CreateIndexBuilderTest.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/issuechanges\/AddIndexOnIssueKeyOfIssueChangesTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/users\/DropUniqueIndexOnUuidColumnOfUsersTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/users\/fk\/groupsusers\/DropUniqueIndexOnUserIdAndGroupIdOfGroupsUsersTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v82\/AddIndexOnSlugOfProjectAlmSettings.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/groups\/qprofileeditgroups\/AddIndexOnGroupUuidOfQProfileEditGroupsTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/qualitygates\/DropUniqueIndexOnUuidColumnOfQualityGatesTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/sql\/DropIndexBuilder.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/groups\/groupsusers\/AddIndexOnGroupUuidOfGroupsUsersTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/step\/DropIndexChange.java":"ADD","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/users\/fk\/groupsusers\/AddIndexOnUserUuidOfGroupsUsersTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/permissiontemplates\/fk\/permtplcharacteristics\/DropUniqueIndexOnTemplateIdAndPermissionKeyColumnsOfPermTplCharacteristicsTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/users\/fk\/qprofileeditusers\/DropUniqueIndexOnUserIdAndQProfileUuidOfQProfileEditUsersTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/activerules\/AddIndexOnActiveRuleUuidOfActiveRuleParametersTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/rulesprofiles\/fk\/activerules\/AddUniqueIndexOnProfileUuidColumnOfActiveRulesTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/users\/fk\/organizationmembers\/AddIndexOnUserUuidOfOrganizationMembersTable.java":"MODIFY","\/dev\/null":"DELETE","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/users\/fk\/groupsusers\/DropIndexOnUserIdOfGroupsUsersTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/cequeue\/DropUniqueIndexOnUuidColumnOfCeQueueTable.java":"MODIFY","server\/sonar-db-core\/src\/testFixtures\/java\/org\/sonar\/db\/CoreTestDb.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/rules\/issues\/AddIndexesToIssuesTable.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/users\/fk\/organizationmembers\/DropIndexOnUserIdOfOrganizationMembersTable.java":"MODIFY","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/sql\/DropIndexBuilderTest.java":"MODIFY"},"diff":{"server\/sonar-db-core\/src\/testFixtures\/java\/org\/sonar\/db\/CoreDbTester.java":[{"add":["36","    return createForSchema(testClass, filename, true);","37","  }","38","","39","  public static CoreDbTester createForSchema(Class testClass, String filename, boolean databaseToUpper) {","42","    return new CoreDbTester(CoreTestDb.create(schemaPath, databaseToUpper));"],"delete":["38","    return new CoreDbTester(CoreTestDb.create(schemaPath));"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/projectmeasures\/DropTechIndexOnUuidOfProjectMeasuresTable.java":[{"add":["22","import org.sonar.server.platform.db.migration.step.DropIndexChange;","24","public class DropTechIndexOnUuidOfProjectMeasuresTable extends DropIndexChange {","29","    super(db, INDEX_NAME, TABLE_NAME);"],"delete":["21","import java.sql.Connection;","22","import java.sql.SQLException;","24","import org.sonar.db.DatabaseUtils;","25","import org.sonar.server.platform.db.migration.sql.DropIndexBuilder;","26","import org.sonar.server.platform.db.migration.step.DdlChange;","28","public class DropTechIndexOnUuidOfProjectMeasuresTable extends DdlChange {","33","    super(db);","36","  @Override","37","  public void execute(Context context) throws SQLException {","38","    if (indexExists(INDEX_NAME)) {","39","      context.execute(new DropIndexBuilder(getDialect())","40","        .setTable(TABLE_NAME)","41","        .setName(INDEX_NAME)","42","        .build());","43","    }","44","  }","45","","46","  private boolean indexExists(String name) throws SQLException {","47","    try (Connection connection = getDatabase().getDataSource().getConnection()) {","48","      return DatabaseUtils.indexExists(TABLE_NAME, name, connection);","49","    }","50","  }"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/groups\/groupsusers\/DropIndexOnGroupIdOfGroupsUsersTable.java":[{"add":["23","import java.util.Optional;","24","import java.util.function.Consumer;","41","    Consumer<String> dropIndex = idx -> context.execute(new DropIndexBuilder(getDialect())","42","      .setTable(TABLE_NAME)","43","      .setName(idx)","44","      .build());","45","","46","    findExistingIndexName(INDEX_NAME1).ifPresent(dropIndex);","47","    findExistingIndexName(INDEX_NAME2).ifPresent(dropIndex);","50","  private Optional<String> findExistingIndexName(String indexName) throws SQLException {","52","      return DatabaseUtils.findExistingIndex(connection, TABLE_NAME, indexName);"],"delete":["39","    if (indexExists(INDEX_NAME1)) {","40","      context.execute(new DropIndexBuilder(getDialect())","41","        .setTable(TABLE_NAME)","42","        .setName(INDEX_NAME1)","43","        .build());","44","    }","45","    if (indexExists(INDEX_NAME2)) {","46","      context.execute(new DropIndexBuilder(getDialect())","47","        .setTable(TABLE_NAME)","48","        .setName(INDEX_NAME2)","49","        .build());","50","    }","53","  private boolean indexExists(String name) throws SQLException {","55","      return DatabaseUtils.indexExists(TABLE_NAME, name, connection);"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/activerules\/DropIndexOnActiveRuleIdOfActiveRuleParametersTable.java":[{"add":["22","import org.sonar.server.platform.db.migration.step.DropIndexChange;","24","public class DropIndexOnActiveRuleIdOfActiveRuleParametersTable extends DropIndexChange {","29","    super(db, INDEX_NAME, TABLE_NAME);"],"delete":["21","import java.sql.Connection;","22","import java.sql.SQLException;","24","import org.sonar.db.DatabaseUtils;","25","import org.sonar.server.platform.db.migration.sql.DropIndexBuilder;","26","import org.sonar.server.platform.db.migration.step.DdlChange;","28","public class DropIndexOnActiveRuleIdOfActiveRuleParametersTable extends DdlChange {","33","    super(db);","34","  }","35","","36","  @Override","37","  public void execute(Context context) throws SQLException {","38","    if (indexExists()) {","39","      context.execute(new DropIndexBuilder(getDialect())","40","        .setTable(TABLE_NAME)","41","        .setName(INDEX_NAME)","42","        .build());","43","    }","44","  }","45","","46","  private boolean indexExists() throws SQLException {","47","    try (Connection connection = getDatabase().getDataSource().getConnection()) {","48","      return DatabaseUtils.indexExists(TABLE_NAME, INDEX_NAME, connection);","49","    }"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/users\/fk\/userroles\/AddIndexOnUserUuidOfUserRolesTable.java":[{"add":["56","      return DatabaseUtils.indexExistsIgnoreCase(TABLE_NAME, INDEX_NAME, connection);"],"delete":["56","      return DatabaseUtils.indexExists(TABLE_NAME, INDEX_NAME, connection);"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/rules\/activerules\/DropIndexOnRuleIdColumnOfActiveRulesTable.java":[{"add":["22","import org.sonar.server.platform.db.migration.step.DropIndexChange;","24","public class DropIndexOnRuleIdColumnOfActiveRulesTable extends DropIndexChange {","29","    super(db, INDEX_NAME, TABLE_NAME);"],"delete":["21","import java.sql.SQLException;","23","import org.sonar.server.platform.db.migration.sql.DropIndexBuilder;","24","import org.sonar.server.platform.db.migration.step.DdlChange;","26","public class DropIndexOnRuleIdColumnOfActiveRulesTable extends DdlChange {","31","    super(db);","33","","34","  @Override","35","  public void execute(Context context) throws SQLException {","36","    context.execute(new DropIndexBuilder(getDialect())","37","      .setTable(TABLE_NAME)","38","      .setName(INDEX_NAME)","39","      .build());","40","  }","41",""]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/users\/fk\/groupsusers\/AddUniqueIndexOnUserUuidAndGroupIdOfGroupsUsersTable.java":[{"add":["60","      return DatabaseUtils.indexExistsIgnoreCase(TABLE_NAME, INDEX_NAME, connection);"],"delete":["60","      return DatabaseUtils.indexExists(TABLE_NAME, INDEX_NAME, connection);"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/rules\/deprecatedrulekeys\/AddIndexToDeprecatedRuleKeysTable.java":[{"add":["58","      return DatabaseUtils.indexExistsIgnoreCase(TABLE, INDEX_NAME, connection);"],"delete":["58","      return DatabaseUtils.indexExists(TABLE, INDEX_NAME, connection);"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/rules\/rulesparameters\/AddIndexesToRulesParametersTable.java":[{"add":["76","      return !DatabaseUtils.indexExistsIgnoreCase(TABLE, index, connection);"],"delete":["76","      return !DatabaseUtils.indexExists(TABLE, index, connection);"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/projectmeasures\/AddTechIndexOnUuidOfProjectMeasuresTable.java":[{"add":["57","      return DatabaseUtils.indexExistsIgnoreCase(TABLE_NAME, name, connection);"],"delete":["57","      return DatabaseUtils.indexExists(TABLE_NAME, name, connection);"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/groups\/grouproles\/DropIndexOnGroupIdOfGroupRolesTable.java":[{"add":["22","import org.sonar.server.platform.db.migration.step.DropIndexChange;","24","public class DropIndexOnGroupIdOfGroupRolesTable extends DropIndexChange {","29","    super(db, INDEX_NAME, TABLE_NAME);"],"delete":["21","import java.sql.Connection;","22","import java.sql.SQLException;","24","import org.sonar.db.DatabaseUtils;","25","import org.sonar.server.platform.db.migration.sql.DropIndexBuilder;","26","import org.sonar.server.platform.db.migration.step.DdlChange;","28","public class DropIndexOnGroupIdOfGroupRolesTable extends DdlChange {","33","    super(db);","34","  }","35","","36","  @Override","37","  public void execute(Context context) throws SQLException {","38","    if (indexExists()) {","39","      context.execute(new DropIndexBuilder(getDialect())","40","        .setTable(TABLE_NAME)","41","        .setName(INDEX_NAME)","42","        .build());","43","    }","44","  }","45","","46","  private boolean indexExists() throws SQLException {","47","    try (Connection connection = getDatabase().getDataSource().getConnection()) {","48","      return DatabaseUtils.indexExists(TABLE_NAME, INDEX_NAME, connection);","49","    }"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/rules\/activerules\/AddIndexToActiveRulesTable.java":[{"add":["65","      return DatabaseUtils.indexExistsIgnoreCase(TABLE, INDEX_NAME, connection);"],"delete":["65","      return DatabaseUtils.indexExists(TABLE, INDEX_NAME, connection);"]}],"server\/sonar-db-core\/src\/test\/java\/org\/sonar\/db\/DatabaseUtilsTest.java":[{"add":["32","import java.util.Locale;","60","  public CoreDbTester dbTester = CoreDbTester.createForSchema(DatabaseUtilsTest.class, \"sql.sql\", false);","67","  public void find_index_with_lower_case() throws SQLException {","68","    String tableName = \"schema_migrations\";","69","    String indexName = \"lower_case_name\";","70","    try (Connection connection = dbTester.openConnection()) {","71","      assertThat(DatabaseUtils.findExistingIndex(connection, tableName, indexName)).contains(indexName);","72","      assertThat(DatabaseUtils.findExistingIndex(connection, tableName.toLowerCase(Locale.US), indexName)).contains(indexName);","73","    }","74","  }","76","  @Test","77","  public void find_index_with_upper_case() throws SQLException {","78","    String tableName = \"schema_migrations\";","79","    String indexName = \"UPPER_CASE_NAME\";","80","    try (Connection connection = dbTester.openConnection()) {","81","      assertThat(DatabaseUtils.findExistingIndex(connection, tableName, indexName)).contains(indexName);","82","      assertThat(DatabaseUtils.findExistingIndex(connection, tableName, indexName.toLowerCase(Locale.US))).contains(indexName);","83","      assertThat(DatabaseUtils.findExistingIndex(connection, tableName.toLowerCase(Locale.US), indexName.toLowerCase(Locale.US))).contains(indexName);","84","    }","85","  }","86","","87","  @Test","88","  public void should_close_connection() throws Exception {","89","    try (Connection connection = dbTester.openConnection()) {","90","      assertThat(isClosed(connection)).isFalse();","91","","92","      DatabaseUtils.closeQuietly(connection);","93","      assertThat(isClosed(connection)).isTrue();","94","    }","105","    try (Connection connection = dbTester.openConnection(); PreparedStatement statement = connection.prepareStatement(selectDual())) {","188","      .containsExactly(","189","        myComparable(-1), myComparable(2), myComparable(4), myComparable(5), myComparable(10));","312","    assertThat(outputs).containsExactly(1, 2, 3);","313","    assertThat(partitions).containsExactly(asList(1, 2), asList(3));"],"delete":["59","  public CoreDbTester dbTester = CoreDbTester.createForSchema(DatabaseUtilsTest.class, \"just_one_table.sql\");","66","  public void should_close_connection() throws Exception {","67","    Connection connection = dbTester.openConnection();","68","    assertThat(isClosed(connection)).isFalse();","70","    DatabaseUtils.closeQuietly(connection);","71","    assertThat(isClosed(connection)).isTrue();","82","    Connection connection = dbTester.openConnection();","83","    try {","84","      PreparedStatement statement = connection.prepareStatement(selectDual());","92","    } finally {","93","      DatabaseUtils.closeQuietly(connection);","169","        .containsExactly(","170","          myComparable(-1), myComparable(2), myComparable(4), myComparable(5), myComparable(10));","293","    assertThat(outputs).containsExactly(1,2,3);","294","    assertThat(partitions).containsExactly(asList(1,2), asList(3));"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/users\/fk\/userroles\/DropIndexOnUserIdOfUserRolesTable.java":[{"add":["22","import org.sonar.server.platform.db.migration.step.DropIndexChange;","24","public class DropIndexOnUserIdOfUserRolesTable extends DropIndexChange {","29","    super(db, INDEX_NAME, TABLE_NAME);"],"delete":["21","import java.sql.Connection;","22","import java.sql.SQLException;","24","import org.sonar.db.DatabaseUtils;","25","import org.sonar.server.platform.db.migration.sql.DropIndexBuilder;","26","import org.sonar.server.platform.db.migration.step.DdlChange;","28","public class DropIndexOnUserIdOfUserRolesTable extends DdlChange {","33","    super(db);","34","  }","35","","36","  @Override","37","  public void execute(Context context) throws SQLException {","38","    if (indexExists()) {","39","      context.execute(new DropIndexBuilder(getDialect())","40","        .setTable(TABLE_NAME)","41","        .setName(INDEX_NAME)","42","        .build());","43","    }","44","  }","45","","46","  private boolean indexExists() throws SQLException {","47","    try (Connection connection = getDatabase().getDataSource().getConnection()) {","48","      return DatabaseUtils.indexExists(TABLE_NAME, INDEX_NAME, connection);","49","    }"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/metrics\/projectmeasures\/DropIndexOnMetricIdOfProjectMeasuresTable.java":[{"add":["22","import org.sonar.server.platform.db.migration.step.DropIndexChange;","24","public class DropIndexOnMetricIdOfProjectMeasuresTable extends DropIndexChange {","29","    super(db, INDEX_NAME, TABLE_NAME);"],"delete":["21","import java.sql.Connection;","22","import java.sql.SQLException;","24","import org.sonar.db.DatabaseUtils;","25","import org.sonar.server.platform.db.migration.sql.DropIndexBuilder;","26","import org.sonar.server.platform.db.migration.step.DdlChange;","28","public class DropIndexOnMetricIdOfProjectMeasuresTable extends DdlChange {","33","    super(db);","34","  }","35","","36","  @Override","37","  public void execute(Context context) throws SQLException {","38","    if (indexExists()) {","39","      context.execute(new DropIndexBuilder(getDialect())","40","        .setTable(TABLE_NAME)","41","        .setName(INDEX_NAME)","42","        .build());","43","    }","44","  }","45","","46","  private boolean indexExists() throws SQLException {","47","    try (Connection connection = getDatabase().getDataSource().getConnection()) {","48","      return DatabaseUtils.indexExists(TABLE_NAME, INDEX_NAME, connection);","49","    }"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/issuechanges\/AddIndexOnKeeOfIssueChangesTable.java":[{"add":["56","      return DatabaseUtils.indexExistsIgnoreCase(TABLE_NAME, INDEX_NAME, connection);"],"delete":["56","      return DatabaseUtils.indexExists(TABLE_NAME, INDEX_NAME, connection);"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/permissiontemplates\/fk\/permtplcharacteristics\/AddUniqueIndexOnTemplateUuidAndPermissionKeyColumnsOfPermTplCharacteristicsTable.java":[{"add":["63","      return DatabaseUtils.indexExistsIgnoreCase(TABLE_NAME, INDEX_NAME, connection);"],"delete":["63","      return DatabaseUtils.indexExists(TABLE_NAME, INDEX_NAME, connection);"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/rulesprofiles\/DropUniqueIndexOnKeeColumnOfRulesProfilesTable.java":[{"add":["22","import org.sonar.server.platform.db.migration.step.DropIndexChange;","24","public class DropUniqueIndexOnKeeColumnOfRulesProfilesTable extends DropIndexChange {","29","    super(db, INDEX_NAME, TABLE_NAME);"],"delete":["21","import java.sql.Connection;","22","import java.sql.SQLException;","24","import org.sonar.db.DatabaseUtils;","25","import org.sonar.server.platform.db.migration.sql.DropIndexBuilder;","26","import org.sonar.server.platform.db.migration.step.DdlChange;","28","public class DropUniqueIndexOnKeeColumnOfRulesProfilesTable extends DdlChange {","33","    super(db);","34","  }","35","","36","  @Override","37","  public void execute(Context context) throws SQLException {","38","    if (indexExists()) {","39","      context.execute(new DropIndexBuilder(getDialect())","40","        .setTable(TABLE_NAME)","41","        .setName(INDEX_NAME)","42","        .build());","43","    }","44","  }","45","","46","  private boolean indexExists() throws SQLException {","47","    try (Connection connection = getDatabase().getDataSource().getConnection()) {","48","      return DatabaseUtils.indexExists(TABLE_NAME, INDEX_NAME, connection);","49","    }"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/metrics\/livemeasures\/AddIndexOnMetricUuidOfLiveMeasuresTable.java":[{"add":["62","      return DatabaseUtils.indexExistsIgnoreCase(TABLE_NAME, INDEX_NAME, connection);"],"delete":["62","      return DatabaseUtils.indexExists(TABLE_NAME, INDEX_NAME, connection);"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/users\/fk\/qprofileeditusers\/AddUniqueIndexOnUserUuidAndQProfileUuidOfQProfileEditUsersTable.java":[{"add":["60","      return DatabaseUtils.indexExistsIgnoreCase(TABLE_NAME, INDEX_NAME, connection);"],"delete":["60","      return DatabaseUtils.indexExists(TABLE_NAME, INDEX_NAME, connection);"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/rulesprofiles\/fk\/activerules\/DropUniqueIndexOnProfileIdColumnOfActiveRulesTable.java":[{"add":["22","import org.sonar.server.platform.db.migration.step.DropIndexChange;","24","public class DropUniqueIndexOnProfileIdColumnOfActiveRulesTable extends DropIndexChange {","29","    super(db, INDEX_NAME, TABLE_NAME);"],"delete":["21","import java.sql.Connection;","22","import java.sql.SQLException;","24","import org.sonar.db.DatabaseUtils;","25","import org.sonar.server.platform.db.migration.sql.DropIndexBuilder;","26","import org.sonar.server.platform.db.migration.step.DdlChange;","28","public class DropUniqueIndexOnProfileIdColumnOfActiveRulesTable extends DdlChange {","33","    super(db);","34","  }","35","","36","  @Override","37","  public void execute(Context context) throws SQLException {","38","    if (indexExists()) {","39","      context.execute(new DropIndexBuilder(getDialect())","40","        .setTable(TABLE_NAME)","41","        .setName(INDEX_NAME)","42","        .build());","43","    }","44","  }","45","","46","  private boolean indexExists() throws SQLException {","47","    try (Connection connection = getDatabase().getDataSource().getConnection()) {","48","      return DatabaseUtils.indexExists(TABLE_NAME, INDEX_NAME, connection);","49","    }"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/def\/Validations.java":[{"add":["38","  private static final CharMatcher UPPER_CASE_ASCII_LETTERS_CHAR_MATCHER = inRange('A', 'Z');","94","  public static String validateIndexNameIgnoreCase(@Nullable String indexName) {","95","    checkDbIdentifier(indexName, \"Index name\", INDEX_NAME_MAX_SIZE, true);","96","    return indexName;","97","  }","98","","110","    return checkDbIdentifier(identifier, identifierDesc, maxSize, false);","111","  }","112","","113","  static String checkDbIdentifier(@Nullable String identifier, String identifierDesc, int maxSize, boolean ignoreCase) {","119","    if (ignoreCase) {","120","      checkDbIdentifierCharactersIgnoreCase(identifier, identifierDesc);","121","    } else {","122","      checkDbIdentifierCharacters(identifier, identifierDesc);","123","    }","136","","137","  private static void checkDbIdentifierCharactersIgnoreCase(String identifier, String identifierDesc) {","138","    checkArgument(identifier.length() > 0, \"Identifier must not be empty\");","139","    checkArgument(LOWER_CASE_ASCII_LETTERS_CHAR_MATCHER.or(DIGIT_CHAR_MATCHER).or(UPPER_CASE_ASCII_LETTERS_CHAR_MATCHER).or(anyOf(\"_\")).matchesAllOf(identifier),","140","      \"%s must contain only alphanumeric chars or '_', got '%s'\", identifierDesc, identifier);","141","    checkArgument(","142","      DIGIT_CHAR_MATCHER.or(UNDERSCORE_CHAR_MATCHER).matchesNoneOf(identifier.subSequence(0, 1)),","143","      \"%s must not start by a number or '_', got '%s'\", identifierDesc, identifier);","144","  }"],"delete":["65","    requireNonNull(tableName, \"Table name cannot be null\");","78","    requireNonNull(constraintName, \"Constraint name cannot be null\");","91","    requireNonNull(indexName, \"Index name cannot be null\");","112","    checkDbIdentifierCharacters(identifier, identifierDesc);"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/metrics\/livemeasures\/AddIndexOnProjectUuidOfLiveMeasuresTable.java":[{"add":["57","      return DatabaseUtils.indexExistsIgnoreCase(TABLE_NAME, INDEX_NAME, connection);"],"delete":["57","      return DatabaseUtils.indexExists(TABLE_NAME, INDEX_NAME, connection);"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/groups\/grouproles\/AddIndexOnGroupUuidOfGroupRolesTable.java":[{"add":["72","      return DatabaseUtils.indexExistsIgnoreCase(TABLE_NAME, INDEX_NAME, connection);"],"delete":["72","      return DatabaseUtils.indexExists(TABLE_NAME, INDEX_NAME, connection);"]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/def\/ValidationsTest.java":[{"add":["75","    thrown.expectMessage(\"Index name can't be null\");"],"delete":["75","    thrown.expectMessage(\"Index name cannot be null\");"]}],"server\/sonar-db-core\/src\/main\/java\/org\/sonar\/db\/DatabaseUtils.java":[{"add":["41","import java.util.Optional;","285","   * @param table case-insensitive name of table","286","   * @return true if a table exists with this name, otherwise false","287","   * @throws SQLException","288","   *\/","313","  public static boolean indexExistsIgnoreCase(String table, String index, Connection connection) {","314","    return doIndexExistsIgnoreIndexCase(table, index, connection) ||","315","      doIndexExistsIgnoreIndexCase(table.toLowerCase(Locale.ENGLISH), index, connection) ||","316","      doIndexExistsIgnoreIndexCase(table.toUpperCase(Locale.ENGLISH), index, connection);","319","  private static boolean doIndexExistsIgnoreIndexCase(String table, String index, Connection connection) {","320","    return findIndex(connection, table, index).isPresent();","321","  }","322","","323","  \/**","324","   * Finds an index by searching by its lower case or upper case name. If an index is found, it's name is returned with the matching case.","325","   * This is useful when we need to drop an index that could exist with either lower case or upper case name.","326","   * See SONAR-13594","327","   *\/","328","  public static Optional<String> findExistingIndex(Connection connection, String tableName, String indexName) {","329","    Optional<String> result = findIndex(connection, tableName.toLowerCase(Locale.US), indexName);","330","    if (result.isPresent()) {","331","      return result;","332","    }","333","    \/\/ in tests, tables have uppercase name","334","    return findIndex(connection, tableName.toUpperCase(Locale.US), indexName);","335","  }","336","","337","  private static Optional<String> findIndex(Connection connection, String tableName, String indexName) {","340","    try (ResultSet rs = connection.getMetaData().getIndexInfo(connection.getCatalog(), schema, tableName, false, true)) {","342","        String idx = rs.getString(\"INDEX_NAME\");","343","        if (indexName.equalsIgnoreCase(idx)) {","344","          return Optional.of(idx);","347","      return Optional.empty();","349","      throw wrapSqlException(e, \"Can not check that table %s exists\", tableName);"],"delete":["284","    * @param table case-insensitive name of table","285","    * @return true if a table exists with this name, otherwise false","286","    * @throws SQLException","287","    *\/","312","  public static boolean indexExists(String table, String index, Connection connection) {","313","    return doIndexExists(table, index, connection) ||","314","      doIndexExists(table.toLowerCase(Locale.ENGLISH), index, connection) ||","315","      doIndexExists(table.toUpperCase(Locale.ENGLISH), index, connection);","318","  private static boolean doIndexExists(String table, String index, Connection connection) {","321","    try (ResultSet rs = connection.getMetaData().getIndexInfo(connection.getCatalog(), schema, table, false, true)) {","323","        String indexName = rs.getString(\"INDEX_NAME\");","324","        if (index.equalsIgnoreCase(indexName)) {","325","          return true;","328","      return false;","330","      throw wrapSqlException(e, \"Can not check that table %s exists\", table);"]}],"server\/sonar-db-core\/src\/test\/resources\/org\/sonar\/db\/DatabaseUtilsTest\/sql.sql":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/rules\/rulesparameters\/DropIndexesOnRuleIdColumnOfRulesParametersTable.java":[{"add":["21","import java.sql.Connection;","23","import java.util.Optional;","24","import java.util.function.Consumer;","26","import org.sonar.db.DatabaseUtils;","31","  private static final String TABLE_NAME = \"rules_parameters\";","39","    Consumer<String> dropIndex = idx -> context.execute(new DropIndexBuilder(getDialect())","40","      .setTable(TABLE_NAME)","41","      .setName(idx)","43","","44","    findExistingIndexName(\"rules_parameters_rule_id\").ifPresent(dropIndex);","45","    findExistingIndexName(\"rules_parameters_unique\").ifPresent(dropIndex);","48","  private Optional<String> findExistingIndexName(String indexName) throws SQLException {","49","    try (Connection connection = getDatabase().getDataSource().getConnection()) {","50","      return DatabaseUtils.findExistingIndex(connection, TABLE_NAME, indexName);","51","    }","52","  }"],"delete":["34","    context.execute(new DropIndexBuilder(getDialect())","35","      .setTable(\"rules_parameters\")","36","      .setName(\"rules_parameters_rule_id\")","38","    context.execute(new DropIndexBuilder(getDialect())","39","      .setTable(\"rules_parameters\")","40","      .setName(\"rules_parameters_unique\")","41","      .build());"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/rules\/deprecatedrulekeys\/DropIndexOnRuleIdColumnOfDeprecatedRuleKeysTable.java":[{"add":["22","import org.sonar.server.platform.db.migration.step.DropIndexChange;","24","public class DropIndexOnRuleIdColumnOfDeprecatedRuleKeysTable extends DropIndexChange {","25","  private static final String TABLE_NAME = \"deprecated_rule_keys\";","26","  private static final String INDEX_NAME = \"rule_id_deprecated_rule_keys\";","29","    super(db, INDEX_NAME, TABLE_NAME);"],"delete":["21","import java.sql.SQLException;","23","import org.sonar.server.platform.db.migration.sql.DropIndexBuilder;","24","import org.sonar.server.platform.db.migration.step.DdlChange;","26","public class DropIndexOnRuleIdColumnOfDeprecatedRuleKeysTable extends DdlChange {","29","    super(db);","31","","32","  @Override","33","  public void execute(Context context) throws SQLException {","34","    context.execute(new DropIndexBuilder(getDialect())","35","      .setTable(\"deprecated_rule_keys\")","36","      .setName(\"rule_id_deprecated_rule_keys\")","37","      .build());","38","  }","39",""]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/sql\/CreateTableBuilderTest.java":[{"add":["75","    expectedException.expectMessage(\"Table name can't be null\");","294","    expectedException.expectMessage(\"Constraint name can't be null\");"],"delete":["75","    expectedException.expectMessage(\"Table name cannot be null\");","294","    expectedException.expectMessage(\"Constraint name cannot be null\");"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/metrics\/projectmeasures\/AddIndexOnMetricUuidOfProjectMeasuresTable.java":[{"add":["62","      return DatabaseUtils.indexExistsIgnoreCase(TABLE_NAME, INDEX_NAME, connection);"],"delete":["62","      return DatabaseUtils.indexExists(TABLE_NAME, INDEX_NAME, connection);"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/groups\/qprofileeditgroups\/DropIndexOnGroupIdOfQProfileEditGroupsTable.java":[{"add":["22","import org.sonar.server.platform.db.migration.step.DropIndexChange;","24","public class DropIndexOnGroupIdOfQProfileEditGroupsTable extends DropIndexChange {","29","    super(db, INDEX_NAME, TABLE_NAME);"],"delete":["21","import java.sql.Connection;","22","import java.sql.SQLException;","24","import org.sonar.db.DatabaseUtils;","25","import org.sonar.server.platform.db.migration.sql.DropIndexBuilder;","26","import org.sonar.server.platform.db.migration.step.DdlChange;","28","public class DropIndexOnGroupIdOfQProfileEditGroupsTable extends DdlChange {","33","    super(db);","34","  }","35","","36","  @Override","37","  public void execute(Context context) throws SQLException {","38","    if (indexExists(INDEX_NAME)) {","39","      context.execute(new DropIndexBuilder(getDialect())","40","        .setTable(TABLE_NAME)","41","        .setName(INDEX_NAME)","42","        .build());","43","    }","44","  }","45","","46","  private boolean indexExists(String name) throws SQLException {","47","    try (Connection connection = getDatabase().getDataSource().getConnection()) {","48","      return DatabaseUtils.indexExists(TABLE_NAME, name, connection);","49","    }"]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/sql\/CreateIndexBuilderTest.java":[{"add":["86","    expectedException.expectMessage(\"Table name can't be null\");","97","    expectedException.expectMessage(\"Index name can't be null\");"],"delete":["86","    expectedException.expectMessage(\"Table name cannot be null\");","97","    expectedException.expectMessage(\"Index name cannot be null\");"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/issuechanges\/AddIndexOnIssueKeyOfIssueChangesTable.java":[{"add":["56","      return DatabaseUtils.indexExistsIgnoreCase(TABLE_NAME, INDEX_NAME, connection);"],"delete":["56","      return DatabaseUtils.indexExists(TABLE_NAME, INDEX_NAME, connection);"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/users\/DropUniqueIndexOnUuidColumnOfUsersTable.java":[{"add":["22","import org.sonar.server.platform.db.migration.step.DropIndexChange;","24","public class DropUniqueIndexOnUuidColumnOfUsersTable extends DropIndexChange {","30","    super(db, INDEX_NAME, TABLE_NAME);"],"delete":["21","import java.sql.Connection;","22","import java.sql.SQLException;","24","import org.sonar.db.DatabaseUtils;","25","import org.sonar.server.platform.db.migration.sql.DropIndexBuilder;","26","import org.sonar.server.platform.db.migration.step.DdlChange;","28","public class DropUniqueIndexOnUuidColumnOfUsersTable extends DdlChange {","34","    super(db);","35","  }","36","","37","  @Override","38","  public void execute(Context context) throws SQLException {","39","    if (indexExists()) {","40","      context.execute(new DropIndexBuilder(getDialect())","41","        .setTable(TABLE_NAME)","42","        .setName(INDEX_NAME)","43","        .build());","44","    }","45","  }","46","","47","  private boolean indexExists() throws SQLException {","48","    try (Connection connection = getDatabase().getDataSource().getConnection()) {","49","      return DatabaseUtils.indexExists(TABLE_NAME, INDEX_NAME, connection);","50","    }"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/users\/fk\/groupsusers\/DropUniqueIndexOnUserIdAndGroupIdOfGroupsUsersTable.java":[{"add":["22","import org.sonar.server.platform.db.migration.step.DropIndexChange;","24","public class DropUniqueIndexOnUserIdAndGroupIdOfGroupsUsersTable extends DropIndexChange {","29","    super(db, INDEX_NAME, TABLE_NAME);"],"delete":["21","import java.sql.Connection;","22","import java.sql.SQLException;","24","import org.sonar.db.DatabaseUtils;","25","import org.sonar.server.platform.db.migration.sql.DropIndexBuilder;","26","import org.sonar.server.platform.db.migration.step.DdlChange;","28","public class DropUniqueIndexOnUserIdAndGroupIdOfGroupsUsersTable extends DdlChange {","33","    super(db);","36","  @Override","37","  public void execute(Context context) throws SQLException {","38","    if (indexExists()) {","39","      context.execute(new DropIndexBuilder(getDialect())","40","        .setTable(TABLE_NAME)","41","        .setName(INDEX_NAME)","42","        .build());","43","    }","44","  }","45","","46","  private boolean indexExists() throws SQLException {","47","    try (Connection connection = getDatabase().getDataSource().getConnection()) {","48","      return DatabaseUtils.indexExists(TABLE_NAME, INDEX_NAME, connection);","49","    }","50","  }"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v82\/AddIndexOnSlugOfProjectAlmSettings.java":[{"add":["60","      return DatabaseUtils.indexExistsIgnoreCase(TABLE_NAME, INDEX_NAME, connection);"],"delete":["60","      return DatabaseUtils.indexExists(TABLE_NAME, INDEX_NAME, connection);"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/groups\/qprofileeditgroups\/AddIndexOnGroupUuidOfQProfileEditGroupsTable.java":[{"add":["62","      return DatabaseUtils.indexExistsIgnoreCase(TABLE_NAME, INDEX_NAME, connection);"],"delete":["62","      return DatabaseUtils.indexExists(TABLE_NAME, INDEX_NAME, connection);"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/qualitygates\/DropUniqueIndexOnUuidColumnOfQualityGatesTable.java":[{"add":["22","import org.sonar.server.platform.db.migration.step.DropIndexChange;","24","public class DropUniqueIndexOnUuidColumnOfQualityGatesTable extends DropIndexChange {","25","  private static final String INDEX_NAME = \"uniq_quality_gates_uuid\";","26","  private static final String TABLE_NAME = \"quality_gates\";","29","    super(db, INDEX_NAME, TABLE_NAME);"],"delete":["21","import java.sql.SQLException;","23","import org.sonar.server.platform.db.migration.sql.DropIndexBuilder;","24","import org.sonar.server.platform.db.migration.step.DdlChange;","26","public class DropUniqueIndexOnUuidColumnOfQualityGatesTable extends DdlChange {","29","    super(db);","30","  }","31","","32","  @Override","33","  public void execute(Context context) throws SQLException {","34","    context.execute(new DropIndexBuilder(getDialect())","35","      .setTable(\"quality_gates\")","36","      .setName(\"uniq_quality_gates_uuid\")","37","      .build());"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/sql\/DropIndexBuilder.java":[{"add":["29","import static org.sonar.server.platform.db.migration.def.Validations.validateIndexNameIgnoreCase;","54","    validateIndexNameIgnoreCase(indexName);"],"delete":["21","import java.sql.Connection;","22","import java.sql.SQLException;","24","import org.sonar.db.Database;","25","import org.sonar.db.DatabaseUtils;","33","import static org.sonar.server.platform.db.migration.def.Validations.validateIndexName;","58","    validateIndexName(indexName);","75","","76","  public boolean indexExists(Database database) throws SQLException {","77","    validateTableName(tableName);","78","    validateIndexName(indexName);","79","    try (Connection connection = database.getDataSource().getConnection()) {","80","      return DatabaseUtils.indexExists(tableName, indexName, connection);","81","    }","82","  }"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/groups\/groupsusers\/AddIndexOnGroupUuidOfGroupsUsersTable.java":[{"add":["72","      return DatabaseUtils.indexExistsIgnoreCase(TABLE_NAME, name, connection);"],"delete":["72","      return DatabaseUtils.indexExists(TABLE_NAME, name, connection);"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/step\/DropIndexChange.java":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/users\/fk\/groupsusers\/AddIndexOnUserUuidOfGroupsUsersTable.java":[{"add":["56","      return DatabaseUtils.indexExistsIgnoreCase(TABLE_NAME, INDEX_NAME, connection);"],"delete":["56","      return DatabaseUtils.indexExists(TABLE_NAME, INDEX_NAME, connection);"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/permissiontemplates\/fk\/permtplcharacteristics\/DropUniqueIndexOnTemplateIdAndPermissionKeyColumnsOfPermTplCharacteristicsTable.java":[{"add":["22","import org.sonar.server.platform.db.migration.step.DropIndexChange;","24","public class DropUniqueIndexOnTemplateIdAndPermissionKeyColumnsOfPermTplCharacteristicsTable extends DropIndexChange {","29","    super(db, INDEX_NAME, TABLE_NAME);"],"delete":["21","import java.sql.Connection;","22","import java.sql.SQLException;","24","import org.sonar.db.DatabaseUtils;","25","import org.sonar.server.platform.db.migration.sql.DropIndexBuilder;","26","import org.sonar.server.platform.db.migration.step.DdlChange;","28","public class DropUniqueIndexOnTemplateIdAndPermissionKeyColumnsOfPermTplCharacteristicsTable extends DdlChange {","33","    super(db);","34","  }","35","","36","  @Override","37","  public void execute(Context context) throws SQLException {","38","    if (indexExists()) {","39","      context.execute(new DropIndexBuilder(getDialect())","40","        .setTable(TABLE_NAME)","41","        .setName(INDEX_NAME)","42","        .build());","43","    }","44","  }","45","","46","  private boolean indexExists() throws SQLException {","47","    try (Connection connection = getDatabase().getDataSource().getConnection()) {","48","      return DatabaseUtils.indexExists(TABLE_NAME, INDEX_NAME, connection);","49","    }"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/users\/fk\/qprofileeditusers\/DropUniqueIndexOnUserIdAndQProfileUuidOfQProfileEditUsersTable.java":[{"add":["22","import org.sonar.server.platform.db.migration.step.DropIndexChange;","24","public class DropUniqueIndexOnUserIdAndQProfileUuidOfQProfileEditUsersTable extends DropIndexChange {","29","    super(db, INDEX_NAME, TABLE_NAME);"],"delete":["21","import java.sql.Connection;","22","import java.sql.SQLException;","24","import org.sonar.db.DatabaseUtils;","25","import org.sonar.server.platform.db.migration.sql.DropIndexBuilder;","26","import org.sonar.server.platform.db.migration.step.DdlChange;","28","public class DropUniqueIndexOnUserIdAndQProfileUuidOfQProfileEditUsersTable extends DdlChange {","33","    super(db);","34","  }","35","","36","  @Override","37","  public void execute(Context context) throws SQLException {","38","    if (indexExists()) {","39","      context.execute(new DropIndexBuilder(getDialect())","40","        .setTable(TABLE_NAME)","41","        .setName(INDEX_NAME)","42","        .build());","43","    }","44","  }","45","","46","  private boolean indexExists() throws SQLException {","47","    try (Connection connection = getDatabase().getDataSource().getConnection()) {","48","      return DatabaseUtils.indexExists(TABLE_NAME, INDEX_NAME, connection);","49","    }"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/activerules\/AddIndexOnActiveRuleUuidOfActiveRuleParametersTable.java":[{"add":["57","      return DatabaseUtils.indexExistsIgnoreCase(TABLE_NAME, INDEX_NAME, connection);"],"delete":["57","      return DatabaseUtils.indexExists(TABLE_NAME, INDEX_NAME, connection);"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/rulesprofiles\/fk\/activerules\/AddUniqueIndexOnProfileUuidColumnOfActiveRulesTable.java":[{"add":["63","      return DatabaseUtils.indexExistsIgnoreCase(TABLE_NAME, INDEX_NAME, connection);"],"delete":["63","      return DatabaseUtils.indexExists(TABLE_NAME, INDEX_NAME, connection);"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/users\/fk\/organizationmembers\/AddIndexOnUserUuidOfOrganizationMembersTable.java":[{"add":["56","      return DatabaseUtils.indexExistsIgnoreCase(TABLE_NAME, INDEX_NAME, connection);"],"delete":["56","      return DatabaseUtils.indexExists(TABLE_NAME, INDEX_NAME, connection);"]}],"\/dev\/null":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/users\/fk\/groupsusers\/DropIndexOnUserIdOfGroupsUsersTable.java":[{"add":["22","import org.sonar.server.platform.db.migration.step.DropIndexChange;","24","public class DropIndexOnUserIdOfGroupsUsersTable extends DropIndexChange {","29","    super(db, INDEX_NAME, TABLE_NAME);"],"delete":["21","import java.sql.Connection;","22","import java.sql.SQLException;","24","import org.sonar.db.DatabaseUtils;","25","import org.sonar.server.platform.db.migration.sql.DropIndexBuilder;","26","import org.sonar.server.platform.db.migration.step.DdlChange;","28","public class DropIndexOnUserIdOfGroupsUsersTable extends DdlChange {","33","    super(db);","34","  }","35","","36","  @Override","37","  public void execute(Context context) throws SQLException {","38","    if (indexExists()) {","39","      context.execute(new DropIndexBuilder(getDialect())","40","        .setTable(TABLE_NAME)","41","        .setName(INDEX_NAME)","42","        .build());","43","    }","44","  }","45","","46","  private boolean indexExists() throws SQLException {","47","    try (Connection connection = getDatabase().getDataSource().getConnection()) {","48","      return DatabaseUtils.indexExists(TABLE_NAME, INDEX_NAME, connection);","49","    }"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/cequeue\/DropUniqueIndexOnUuidColumnOfCeQueueTable.java":[{"add":["22","import org.sonar.server.platform.db.migration.step.DropIndexChange;","24","public class DropUniqueIndexOnUuidColumnOfCeQueueTable extends DropIndexChange {","25","  private static final String TABLE_NAME = \"ce_queue\";","26","  private static final String INDEX_NAME = \"ce_queue_uuid\";","29","    super(db, INDEX_NAME, TABLE_NAME);"],"delete":["21","import java.sql.SQLException;","23","import org.sonar.server.platform.db.migration.sql.DropIndexBuilder;","24","import org.sonar.server.platform.db.migration.step.DdlChange;","26","public class DropUniqueIndexOnUuidColumnOfCeQueueTable extends DdlChange {","29","    super(db);","31","","32","  @Override","33","  public void execute(Context context) throws SQLException {","34","    context.execute(new DropIndexBuilder(getDialect())","35","      .setTable(\"ce_queue\")","36","      .setName(\"ce_queue_uuid\")","37","      .build());","38","  }","39",""]}],"server\/sonar-db-core\/src\/testFixtures\/java\/org\/sonar\/db\/CoreTestDb.java":[{"add":["32","import org.sonar.api.config.internal.Settings;","64","    return create(schemaPath, true);","65","  }","66","","67","  static CoreTestDb create(String schemaPath, boolean databaseToUpper) {","70","    return new CoreTestDb().init(schemaPath, databaseToUpper);","74","    return new CoreTestDb().init(null, true);","77","  private CoreTestDb init(@Nullable String schemaPath, boolean databaseToUpper) {","88","      String name = \"\\\"h2Tests-\\\" + (schemaPath == null ? \\\"empty\\\" : DigestUtils.md5Hex(schemaPath))\";","89","      if (!databaseToUpper) {","90","        name = name + \";DATABASE_TO_UPPER=FALSE\";","91","      }","92","      return new CoreH2Database(name);"],"delete":["30","import org.apache.commons.codec.digest.DigestUtils;","32","import org.sonar.api.config.internal.Settings;","67","    return new CoreTestDb().init(schemaPath);","71","    return new CoreTestDb().init(null);","74","  private CoreTestDb init(@Nullable String schemaPath) {","85","      return new CoreH2Database(\"h2Tests-\" + (schemaPath == null ? \"empty\" : DigestUtils.md5Hex(schemaPath)));"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/rules\/issues\/AddIndexesToIssuesTable.java":[{"add":["101","      return DatabaseUtils.indexExistsIgnoreCase(TABLE, name, connection);"],"delete":["101","      return DatabaseUtils.indexExists(TABLE, name, connection);"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/users\/fk\/organizationmembers\/DropIndexOnUserIdOfOrganizationMembersTable.java":[{"add":["22","import org.sonar.server.platform.db.migration.step.DropIndexChange;","24","public class DropIndexOnUserIdOfOrganizationMembersTable extends DropIndexChange {","29","    super(db, INDEX_NAME, TABLE_NAME);"],"delete":["21","import java.sql.Connection;","22","import java.sql.SQLException;","24","import org.sonar.db.DatabaseUtils;","25","import org.sonar.server.platform.db.migration.sql.DropIndexBuilder;","26","import org.sonar.server.platform.db.migration.step.DdlChange;","28","public class DropIndexOnUserIdOfOrganizationMembersTable extends DdlChange {","33","    super(db);","34","  }","35","","36","  @Override","37","  public void execute(Context context) throws SQLException {","38","    if (indexExists()) {","39","      context.execute(new DropIndexBuilder(getDialect())","40","        .setTable(TABLE_NAME)","41","        .setName(INDEX_NAME)","42","        .build());","43","    }","44","  }","45","","46","  private boolean indexExists() throws SQLException {","47","    try (Connection connection = getDatabase().getDataSource().getConnection()) {","48","      return DatabaseUtils.indexExists(TABLE_NAME, INDEX_NAME, connection);","49","    }"]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/sql\/DropIndexBuilderTest.java":[{"add":["57","    expectedException.expectMessage(\"Table name can't be null\");","78","    expectedException.expectMessage(\"Index name can't be null\");","88","    expectedException.expectMessage(\"Index name must contain only alphanumeric chars or '_', got '(not valid)'\");"],"delete":["57","    expectedException.expectMessage(\"Table name cannot be null\");","78","    expectedException.expectMessage(\"Index name cannot be null\");","88","    expectedException.expectMessage(\"Index name must be lower case and contain only alphanumeric chars or '_', got '(not valid)'\");"]}]}},"353570feab92e6b24c3081211136526f75478629":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/rule-details-view.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/rule-details-view.js":[{"add":["144","      const { controller } = this.options.app;","145","      if (controller.isRulePermalink()) {","146","        controller.newSearch();","147","      } else {","148","        controller.fetchList();","149","      }"],"delete":["144","      this.options.app.controller.fetchList();"]}]}},"a0d8fee001d9e074da508fc1e04031e239f1c490":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/charts\/AdvancedTimeline.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/charts\/AdvancedTimeline.tsx":[{"add":["200","    const parentBbox = event.currentTarget.getBoundingClientRect();","220","    const parentBbox = event.currentTarget.getBoundingClientRect();"],"delete":["61","  mouseOverlayPos?: ClientRect | DOMRect;","198","  getMouseOverlayPos = (target: SVGElement) => {","199","    if (this.state.mouseOverlayPos) {","200","      return this.state.mouseOverlayPos;","201","    }","202","    const pos = target.getBoundingClientRect();","203","    this.setState({ mouseOverlayPos: pos });","204","    return pos;","205","  };","206","","210","    const parentBbox = this.getMouseOverlayPos(event.currentTarget);","230","    const parentBbox = this.getMouseOverlayPos(event.currentTarget);"]}]}},"f6d3dfaa4195fba63a1e07cfe2764ff33a912403":{"changes":{"server\/sonar-web\/src\/main\/js\/api\/__tests__\/alm-integration-test.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/SourceViewerBase.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/ComponentContainer.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/api\/__tests__\/alm-integration-test.ts":[{"add":["44","    const error = { status: 401 };","50","    (getJSON as jest.Mock).mockRejectedValue({ status: 404 });"],"delete":["44","    const error = { response: { status: 401 } };","50","    (getJSON as jest.Mock).mockRejectedValue({ response: { status: 404 } });"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/SourceViewerBase.tsx":[{"add":["265","    const onFailLoadComponent = (response: Response) => {","356","      const onFailLoadSources = (response: Response) => {"],"delete":["265","    const onFailLoadComponent = ({ response }: { response: Response }) => {","356","      const onFailLoadSources = ({ response }: { response: Response }) => {"]}],"server\/sonar-web\/src\/main\/js\/app\/components\/ComponentContainer.tsx":[{"add":["102","    const onError = (response?: Response) => {"],"delete":["102","    const onError = (param?: any) => {","104","        let response: Response;","105","","106","        if (param && param.response) {","107","          response = param.response;","108","        } else {","109","          response = param;","110","        }","111",""]}]}},"f3825b2d261787f0fee266d32fe2efb5426dd438":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/styles.css":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/styles.css":[{"add":["74",".source-line-filtered.source-line-highlighted .source-line-code,","75",".source-line-filtered.source-line-highlighted:hover .source-line-code {","76","  background-color: #cdd9c4 !important;","77","}","78",""],"delete":[]}]}},"7ea45bd9ad1c485a860cd81b12496fd70373cc4a":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/projectlink\/ws\/SearchActionTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/projectlink\/ws\/SearchAction.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/projectlink\/ws\/SearchActionTest.java":[{"add":["65","  private DbClient dbClient = db.getDbClient();","66","  private DbSession dbSession = db.getSession();","67","  private ComponentDbTester componentDb = new ComponentDbTester(db);","69","  private SearchAction underTest;","70","  private WsActionTester ws;","145","  public void request_does_not_fail_when_link_has_no_name() throws IOException {","146","    ComponentDto project = componentDb.insertProject();","147","    ComponentLinkDto foo = new ComponentLinkDto().setComponentUuid(project.uuid()).setHref(\"foo\").setType(\"type\");","148","    insertLink(foo);","149","","150","    callByKey(project.key());","151","  }","152","","153","  @Test","154","  public void request_does_not_fail_when_link_has_no_type() throws IOException {","155","    ComponentDto project = componentDb.insertProject();","156","    ComponentLinkDto foo = new ComponentLinkDto().setComponentUuid(project.uuid()).setHref(\"foo\").setName(\"name\");","157","    insertLink(foo);","158","","159","    callByKey(project.key());","160","  }","161","","162","  @Test"],"delete":["60","","63","","66","  DbClient dbClient = db.getDbClient();","67","  DbSession dbSession = db.getSession();","68","  ComponentDbTester componentDb = new ComponentDbTester(db);","70","  WsActionTester ws;","72","  SearchAction underTest;"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/projectlink\/ws\/SearchAction.java":[{"add":["110","    Link.Builder builder = Link.newBuilder()","112","      .setUrl(link.getHref());","113","    if (link.getName() != null) {","114","      builder.setName(link.getName());","115","    }","116","    if (link.getType() != null) {","117","      builder.setType(link.getType());","118","    }","119","    return builder.build();"],"delete":["110","    return Link.newBuilder()","112","      .setName(link.getName())","113","      .setType(link.getType())","114","      .setUrl(link.getHref())","115","      .build();"]}]}},"369b4771c0354647c8c54f3e42be742f33e26c7f":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/sessions\/components\/__tests__\/Unauthorized-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/sessions\/components\/Unauthorized.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/sessions\/components\/EmailAlreadyExists.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/sessions\/components\/__tests__\/EmailAlreadyExists-test.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/sessions\/components\/__tests__\/Unauthorized-test.tsx":[{"add":["23","jest.mock('..\/..\/..\/..\/helpers\/cookies', () => ({","24","  getCookie: jest.fn().mockReturnValue('Foo')","25","}));","26","","28","  expect(shallow(<Unauthorized \/>)).toMatchSnapshot();"],"delete":["24","  expect(shallow(<Unauthorized location={{ query: { message: 'Foo' } }} \/>)).toMatchSnapshot();"]}],"server\/sonar-web\/src\/main\/js\/apps\/sessions\/components\/Unauthorized.tsx":[{"add":["22","import { getCookie } from '..\/..\/..\/helpers\/cookies';","24","export default function Unauthorized() {","25","  const message = decodeURIComponent(getCookie('AUTHENTICATION-ERROR') || '');"],"delete":["23","interface Props {","24","  location: {","25","    query: {","26","      message: string;","27","    };","28","  };","29","}","30","","31","export default function Unauthorized(props: Props) {","32","  const { message } = props.location.query;","33",""]}],"server\/sonar-web\/src\/main\/js\/apps\/sessions\/components\/EmailAlreadyExists.tsx":[{"add":["22","import { Alert } from '..\/..\/..\/components\/ui\/Alert';","23","import { getIdentityProviders } from '..\/..\/..\/api\/users';","24","import { getCookie } from '..\/..\/..\/helpers\/cookies';","25","import { getBaseUrl } from '..\/..\/..\/helpers\/urls';","33","export default class EmailAlreadyExists extends React.PureComponent<{}, State> {","35","  state: State = { identityProviders: [] };","50","          this.setState({ identityProviders });","53","      () => {}","57","  getAuthError = (): {","58","    email?: string;","59","    login?: string;","60","    provider?: string;","61","    existingLogin?: string;","62","    existingProvider?: string;","63","  } => {","64","    const cookie = getCookie('AUTHENTICATION-ERROR');","65","    if (cookie) {","66","      return JSON.parse(decodeURIComponent(cookie));","67","    }","68","    return {};","69","  };","70","","71","  renderIdentityProvier = (provider?: string, login?: string) => {","98","    const authError = this.getAuthError();","107","                values={{ email: <strong>{authError.email}<\/strong> }}","110","            {this.renderIdentityProvier(authError.existingProvider, authError.existingLogin)}","115","            {this.renderIdentityProvier(authError.provider, authError.login)}","130","              href={`${getBaseUrl()}\/sessions\/init\/${authError.provider}?allowEmailShift=true`}>"],"delete":["21","import { getIdentityProviders } from '..\/..\/..\/api\/users';","25","import { getBaseUrl } from '..\/..\/..\/helpers\/urls';","26","import { Alert } from '..\/..\/..\/components\/ui\/Alert';","27","","28","interface Props {","29","  location: {","30","    query: {","31","      email: string;","32","      login: string;","33","      provider: string;","34","      existingLogin: string;","35","      existingProvider: string;","36","    };","37","  };","38","}","42","  loading: boolean;","45","export default class EmailAlreadyExists extends React.PureComponent<Props, State> {","47","  state: State = { identityProviders: [], loading: true };","59","    this.setState({ loading: true });","63","          this.setState({ identityProviders, loading: false });","66","      () => {","67","        if (this.mounted) {","68","          this.setState({ loading: false });","69","        }","70","      }","74","  renderIdentityProvier = (provider: string, login: string) => {","101","    const { query } = this.props.location;","102","","111","                values={{ email: <strong>{query.email}<\/strong> }}","114","            {this.renderIdentityProvier(query.existingProvider, query.existingLogin)}","119","            {this.renderIdentityProvier(query.provider, query.login)}","134","              href={`${getBaseUrl()}\/sessions\/init\/${query.provider}?allowEmailShift=true`}>"]}],"server\/sonar-web\/src\/main\/js\/apps\/sessions\/components\/__tests__\/EmailAlreadyExists-test.tsx":[{"add":["44","jest.mock('..\/..\/..\/..\/helpers\/cookies', () => ({","45","  getCookie: jest","46","    .fn()","47","    .mockReturnValue(","48","      '%7B%22email%22%3A%22mail%40example.com%22%2C%22login%22%3A%22foo%22%2C%22provider%22%3A%22github%22%2C%22existingLogin%22%3A%22bar%22%2C%22existingProvider%22%3A%22bitbucket%22%7D'","49","    )","50","}));","51","","53","  const wrapper = shallow(<EmailAlreadyExists \/>);"],"delete":["45","  const query = {","46","    email: 'mail@example.com',","47","    login: 'foo',","48","    provider: 'github',","49","    existingLogin: 'bar',","50","    existingProvider: 'bitbucket'","51","  };","52","  const wrapper = shallow(<EmailAlreadyExists location={{ query }} \/>);"]}]}},"d61b51aaa96a8990ddec641ac4f3e37f4ea73947":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/rule\/rule-profile-view.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/rule\/rule-profile-view.js":[{"add":["137","  enhanceParameters(parent) {","145","        return { ...p, original: parentParam.value };","167","      parameters: this.enhanceParameters(parent),"],"delete":["137","  enhanceParameters() {","138","    const parent = this.getParent();","146","        return { ...p, original: parentParam };","168","      parameters: this.enhanceParameters(),"]}]}},"da80cca3a9fc255e0ebaa1f7ea2ba098725ee7c2":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/home\/CreateProfileForm.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/home\/CreateProfileForm.tsx":[{"add":["178","              {\/* drop me when we stop supporting ie11 *\/}","179","              <input type=\"hidden\" name=\"hello-ie11\" value=\"\" \/>"],"delete":[]}]}},"aafecafc4ea56a6099731ab58572e376d27bd9f9":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/ws\/InfoAction.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/ws\/InfoAction.java":[{"add":["21","import java.io.StringWriter;","22","import java.nio.charset.StandardCharsets;","23","import org.apache.commons.io.IOUtils;","30","import static org.sonarqube.ws.MediaTypes.JSON;","31","","60","    StringWriter stringWriter = new StringWriter();","61","    JsonWriter json = JsonWriter.of(stringWriter);","62","    json.beginObject();","63","    systemInfoWriter.write(json);","64","    json.endObject();","65","    response.stream().setMediaType(JSON);","66","    IOUtils.write(stringWriter.toString(), response.stream().output(), StandardCharsets.UTF_8);"],"delete":["55","    try (JsonWriter json = response.newJsonWriter()) {","56","      json.beginObject();","57","      systemInfoWriter.write(json);","58","      json.endObject();","59","    }"]}]}},"862238b470ddb24df3a6d267c4730e27f33c5e3e":{"changes":{"server\/sonar-web\/src\/main\/js\/main\/nav\/global\/global-nav-search.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/main\/nav\/global\/global-nav-search.js":[{"add":["54","    document.addEventListener('click', this.onClickOutside);","59","    document.removeEventListener('click', this.onClickOutside);"],"delete":["54","    window.addEventListener('click', this.onClickOutside);","59","    window.removeEventListener('click', this.onClickOutside);"]}]}},"2510ba884971b7245445dac69641478a67bfad9d":{"changes":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/bootstrap\/ScannerExtensionDictionnaryTest.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/bootstrap\/ScannerExtensionDictionnary.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/bootstrap\/ScannerExtensionDictionnaryTest.java":[{"add":["42","import org.sonar.api.batch.postjob.PostJobDescriptor;","288","  public void dependsUponPhaseForNewSensors() {","289","    PreSensor pre = new PreSensor();","290","    NormalSensor normal = new NormalSensor();","291","    PostSensor post = new PostSensor();","293","    ScannerExtensionDictionnary selector = newSelector(normal, post, pre);","294","    List<org.sonar.api.batch.sensor.Sensor> extensions = Lists.newArrayList(selector.select(org.sonar.api.batch.sensor.Sensor.class, null, true, null));","295","    assertThat(extensions).containsExactly(pre, normal, post);","297","    List<Sensor> oldExtensions = Lists.newArrayList(selector.select(Sensor.class, null, true, null));","298","    assertThat(oldExtensions).extracting(\"wrappedSensor\").containsExactly(pre, normal, post);","299","  }","300","","301","  @Test","302","  public void dependsUponPhaseForNewPostJob() {","303","    PrePostJob pre = new PrePostJob();","304","    NormalPostJob normal = new NormalPostJob();","305","","306","    ScannerExtensionDictionnary selector = newSelector(normal, pre);","307","    List<org.sonar.api.batch.postjob.PostJob> extensions = Lists.newArrayList(selector.select(org.sonar.api.batch.postjob.PostJob.class, null, true, null));","308","    assertThat(extensions).containsExactly(pre, normal);","309","","310","    List<PostJob> oldExtensions = Lists.newArrayList(selector.select(PostJob.class, null, true, null));","311","    assertThat(oldExtensions).extracting(\"wrappedPostJob\").containsExactly(pre, normal);","316","    PreSensorSubclass pre = new PreSensorSubclass();","317","    NormalSensor normal = new NormalSensor();","318","    PostSensorSubclass post = new PostSensorSubclass();","320","    ScannerExtensionDictionnary selector = newSelector(normal, post, pre);","321","    List extensions = Lists.newArrayList(selector.select(org.sonar.api.batch.sensor.Sensor.class, null, true, null));","323","    assertThat(extensions).containsExactly(pre, normal, post);","443","  class NormalSensor implements org.sonar.api.batch.sensor.Sensor {","444","","445","    @Override","446","    public void describe(SensorDescriptor descriptor) {","447","    }","448","","449","    @Override","450","    public void execute(org.sonar.api.batch.sensor.SensorContext context) {","451","    }","452","","453","  }","454","","456","  class PreSensor implements org.sonar.api.batch.sensor.Sensor {","457","","458","    @Override","459","    public void describe(SensorDescriptor descriptor) {","460","    }","461","","462","    @Override","463","    public void execute(org.sonar.api.batch.sensor.SensorContext context) {","464","    }","473","  class PostSensor implements org.sonar.api.batch.sensor.Sensor {","474","","475","    @Override","476","    public void describe(SensorDescriptor descriptor) {","477","    }","478","","479","    @Override","480","    public void execute(org.sonar.api.batch.sensor.SensorContext context) {","481","    }","505","","506","  class NormalPostJob implements org.sonar.api.batch.postjob.PostJob {","507","","508","    @Override","509","    public void describe(PostJobDescriptor descriptor) {","510","    }","511","","512","    @Override","513","    public void execute(PostJobContext context) {","514","    }","515","","516","  }","517","","518","  @Phase(name = Phase.Name.PRE)","519","  class PrePostJob implements org.sonar.api.batch.postjob.PostJob {","520","","521","    @Override","522","    public void describe(PostJobDescriptor descriptor) {","523","    }","524","","525","    @Override","526","    public void execute(PostJobContext context) {","527","    }","528","","529","  }","530",""],"delete":["287","  public void dependsUponPhase() {","288","    BatchExtension pre = new PreSensor();","289","    BatchExtension analyze = new GeneratesSomething(\"something\");","290","    BatchExtension post = new PostSensor();","292","    ScannerExtensionDictionnary selector = newSelector(analyze, post, pre);","293","    List extensions = Lists.newArrayList(selector.select(BatchExtension.class, null, true, null));","295","    assertThat(extensions).hasSize(3);","296","    assertThat(extensions.get(0)).isEqualTo(pre);","297","    assertThat(extensions.get(1)).isEqualTo(analyze);","298","    assertThat(extensions.get(2)).isEqualTo(post);","303","    BatchExtension pre = new PreSensorSubclass();","304","    BatchExtension analyze = new GeneratesSomething(\"something\");","305","    BatchExtension post = new PostSensorSubclass();","307","    ScannerExtensionDictionnary selector = newSelector(analyze, post, pre);","308","    List extensions = Lists.newArrayList(selector.select(BatchExtension.class, null, true, null));","310","    assertThat(extensions).containsExactly(pre, analyze, post);","431","  class PreSensor implements BatchExtension {","440","  class PostSensor implements BatchExtension {"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/bootstrap\/ScannerExtensionDictionnary.java":[{"add":["103","    } else if (extension instanceof PostJobWrapper) {","104","      extensionToEvaluate = ((PostJobWrapper) extension).wrappedPostJob();","117","    List<Object> candidates = new ArrayList<>();","118","    candidates.addAll(getExtensions(type));","119","    if (org.sonar.api.batch.Sensor.class.equals(type)) {","120","      candidates.addAll(getExtensions(Sensor.class));","121","    }","122","    if (org.sonar.api.batch.PostJob.class.equals(type)) {","123","      candidates.addAll(getExtensions(PostJob.class));","124","    }","125","","126","    for (Object extension : candidates) {","130","      if (org.sonar.api.batch.PostJob.class.equals(type) && extension instanceof PostJob) {","131","        extension = new PostJobWrapper((PostJob) extension, postJobContext, postJobOptimizer);","132","      }"],"delete":["32","","116","    for (Object extension : getExtensions(type)) {","124","    if (org.sonar.api.batch.Sensor.class.equals(type)) {","125","      \/\/ Retrieve new Sensors and wrap then in SensorWrapper","126","      for (Sensor sensor : getExtensions(Sensor.class)) {","127","        org.sonar.api.batch.Sensor extension = new SensorWrapper(sensor, sensorContext, sensorOptimizer);","128","        if (shouldKeep(type, extension, module, matcher)) {","129","          result.add((T) extension);","130","        }","131","      }","132","    }","133","    if (org.sonar.api.batch.PostJob.class.equals(type)) {","134","      \/\/ Retrieve new PostJob and wrap then in PostJobWrapper","135","      for (PostJob postJob : getExtensions(PostJob.class)) {","136","        org.sonar.api.batch.PostJob extension = new PostJobWrapper(postJob, postJobContext, postJobOptimizer);","137","        if (shouldKeep(type, extension, module, matcher)) {","138","          result.add((T) extension);","139","        }","140","      }","141","    }"]}]}},"3adb1969a53fb22066453c36fe9d0acb6902d343":{"changes":{"server\/sonar-webserver-core\/src\/test\/java\/org\/sonar\/server\/issue\/index\/AsyncIssueIndexingImplTest.java":"MODIFY","server\/sonar-webserver-core\/src\/test\/java\/org\/sonar\/server\/issue\/index\/Comparators.java":"ADD","server\/sonar-webserver-core\/src\/main\/java\/org\/sonar\/server\/issue\/index\/AsyncIssueIndexingImpl.java":"MODIFY"},"diff":{"server\/sonar-webserver-core\/src\/test\/java\/org\/sonar\/server\/issue\/index\/AsyncIssueIndexingImplTest.java":[{"add":["21","import java.util.ArrayList;","24","import java.util.HashMap;","27","import java.util.Map;","50","import static org.assertj.core.api.Assertions.assertThatCode;","227","  @Test","228","  public void verify_comparator_transitivity() {","229","    Map<String, SnapshotDto> map = new HashMap<>();","230","    map.put(\"A\", new SnapshotDto().setCreatedAt(1L));","231","    map.put(\"B\", new SnapshotDto().setCreatedAt(2L));","232","    map.put(\"C\", new SnapshotDto().setCreatedAt(-1L));","233","    List<String> uuids = new ArrayList<>(map.keySet());","234","    uuids.add(\"D\");","235","    Comparators.verifyTransitivity(AsyncIssueIndexingImpl.compareBySnapshot(map), uuids);","236","  }","237","","238","  @Test","239","  public void trigger_with_lot_of_not_analyzed_project_should_not_raise_exception() {","240","    for (int i = 0; i < 100; i++) {","241","      BranchDto dto = new BranchDto()","242","        .setBranchType(BRANCH)","243","        .setKey(\"branch_\" + i)","244","        .setUuid(\"branch_uuid\" + i)","245","        .setProjectUuid(\"project_uuid\" + i);","246","      dbClient.branchDao().insert(dbTester.getSession(), dto);","247","      dbTester.commit();","248","      insertSnapshot(\"analysis_\" + i, \"project_uuid\" + i, 1);","249","    }","250","","251","    for (int i = 100; i < 200; i++) {","252","      BranchDto dto = new BranchDto()","253","        .setBranchType(BRANCH)","254","        .setKey(\"branch_\" + i)","255","        .setUuid(\"branch_uuid\" + i)","256","        .setProjectUuid(\"project_uuid\" + i);","257","      dbClient.branchDao().insert(dbTester.getSession(), dto);","258","      dbTester.commit();","259","    }","260","","261","    assertThatCode(underTest::triggerOnIndexCreation).doesNotThrowAnyException();","262","  }","263",""],"delete":[]}],"server\/sonar-webserver-core\/src\/test\/java\/org\/sonar\/server\/issue\/index\/Comparators.java":[{"add":[],"delete":[]}],"server\/sonar-webserver-core\/src\/main\/java\/org\/sonar\/server\/issue\/index\/AsyncIssueIndexingImpl.java":[{"add":["106","  static Comparator<String> compareBySnapshot(Map<String, SnapshotDto> snapshotByProjectUuid) {","110","      if (snapshot1 == null && snapshot2 == null) {","111","        return 0;","112","      }"],"delete":["106","  private static Comparator<String> compareBySnapshot(Map<String, SnapshotDto> snapshotByProjectUuid) {"]}]}},"2fba950fd31175b42a3b097ff58ddda9c76fddfa":{"changes":{"\/dev\/null":"DELETE","server\/sonar-web\/src\/main\/js\/apps\/create\/project\/ManualProjectCreate.tsx":"MODIFY","sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/create\/project\/__tests__\/__snapshots__\/ManualProjectCreate-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/create\/project\/ManualProjectCreate.css":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/create\/project\/__tests__\/ManualProjectCreate-test.tsx":"MODIFY"},"diff":{"\/dev\/null":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/create\/project\/ManualProjectCreate.tsx":[{"add":["20","import { debounce } from 'lodash';","23","import ValidationInput from 'sonar-ui-common\/components\/controls\/ValidationInput';","26","import { createProject, doesComponentExists } from '..\/..\/..\/api\/components';","44","  projectNameError?: string;","46","  projectKeyError?: string;","50","  touched: boolean;","51","  validating: boolean;","66","      submitting: false,","67","      touched: false,","68","      validating: false","70","    this.checkFreeKey = debounce(this.checkFreeKey, 250);","81","  checkFreeKey = (key: string) => {","82","    return doesComponentExists({ component: key })","83","      .then(alreadyExist => {","84","        if (this.mounted && key === this.state.projectKey) {","85","          if (!alreadyExist) {","86","            this.setState({ projectKeyError: undefined, validating: false });","87","          } else {","88","            this.setState({","89","              projectKeyError: translate('onboarding.create_project.project_key.taken'),","90","              touched: true,","91","              validating: false","92","            });","93","          }","94","        }","95","      })","96","      .catch(() => {","97","        if (this.mounted && key === this.state.projectKey) {","98","          this.setState({ projectKeyError: undefined, validating: false });","99","        }","100","      });","101","  };","102","","108","    const {","109","      projectKey,","110","      projectKeyError,","111","      projectName,","112","      projectNameError,","113","      selectedOrganization","114","    } = state;","116","      projectKeyError === undefined &&","117","        projectNameError === undefined &&","118","        projectKey.length > 0 &&","119","        projectName.length > 0 &&","120","        (!isSonarCloud() || selectedOrganization)","193","  handleProjectKeyChange = (event: React.ChangeEvent<HTMLInputElement>) => {","194","    const projectKey = event.currentTarget.value || '';","195","    const projectKeyError = this.validateKey(projectKey);","196","","197","    this.setState(prevState => {","198","      const projectName = prevState.projectNameChanged ? prevState.projectName : projectKey;","199","      return {","200","        projectKey,","201","        projectKeyError,","202","        projectName,","203","        projectNameError: this.validateName(projectName),","204","        touched: true,","205","        validating: projectKeyError === undefined","206","      };","207","    });","208","","209","    if (projectKeyError === undefined) {","210","      this.checkFreeKey(projectKey);","211","    }","214","  handleProjectNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {","215","    const projectName = event.currentTarget.value;","216","    this.setState({","217","      projectName,","218","      projectNameChanged: true,","219","      projectNameError: this.validateName(projectName)","220","    });","227","  validateKey = (projectKey: string) => {","228","    return projectKey.length > 400 || !\/^[\\w-.:]*[a-zA-Z]+[\\w-.:]*$\/.test(projectKey)","229","      ? translate('onboarding.create_project.project_key.error')","230","      : undefined;","231","  };","232","","233","  validateName = (projectName: string) => {","234","    return projectName.length === 0 || projectName.length > 255","235","      ? translate('onboarding.create_project.display_name.error')","236","      : undefined;","237","  };","238","","240","    const {","241","      projectKey,","242","      projectKeyError,","243","      projectName,","244","      projectNameError,","245","      selectedOrganization,","246","      submitting,","247","      touched,","248","      validating","249","    } = this.state;","250","    const projectKeyIsInvalid = touched && projectKeyError !== undefined;","251","    const projectKeyIsValid = touched && !validating && projectKeyError === undefined;","252","    const projectNameIsInvalid = touched && projectNameError !== undefined;","253","    const projectNameIsValid = touched && projectNameError === undefined;","267","","268","            <ValidationInput","270","              description={translate('onboarding.create_project.project_key.description')}","271","              error={projectKeyError}","272","              help={translate('onboarding.create_project.project_key.help')}","273","              id=\"project-key\"","274","              isInvalid={projectKeyIsInvalid}","275","              isValid={projectKeyIsValid}","276","              label={translate('onboarding.create_project.project_key')}","277","              required={true}>","278","              <input","279","                autoFocus={true}","280","                className={classNames('input-super-large', {","281","                  'is-invalid': projectKeyIsInvalid,","282","                  'is-valid': projectKeyIsValid","283","                })}","284","                id=\"project-key\"","285","                maxLength={400}","286","                minLength={1}","287","                onChange={this.handleProjectKeyChange}","288","                type=\"text\"","289","                value={projectKey}","290","              \/>","291","            <\/ValidationInput>","292","","293","            <ValidationInput","294","              className=\"form-field\"","295","              description={translate('onboarding.create_project.display_name.description')}","296","              error={projectNameError}","297","              help={translate('onboarding.create_project.display_name.help')}","298","              id=\"project-name\"","299","              isInvalid={projectNameIsInvalid}","300","              isValid={projectNameIsValid}","301","              label={translate('onboarding.create_project.display_name')}","302","              required={true}>","303","              <input","304","                className={classNames('input-super-large', {","305","                  'is-invalid': projectNameIsInvalid,","306","                  'is-valid': projectNameIsValid","307","                })}","308","                id=\"project-name\"","309","                maxLength={255}","310","                minLength={1}","311","                onChange={this.handleProjectNameChange}","312","                type=\"text\"","313","                value={projectName}","314","              \/>","315","            <\/ValidationInput>","316","","330",""],"delete":["22","import HelpTooltip from 'sonar-ui-common\/components\/controls\/HelpTooltip';","25","import { createProject } from '..\/..\/..\/api\/components';","28","import ProjectKeyInput from '..\/components\/ProjectKeyInput';","62","      submitting: false","80","      state.projectKey && state.projectName && (!isSonarCloud() || state.selectedOrganization)","153","  handleProjectNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {","154","    const projectName = event.currentTarget.value;","155","    this.setState({ projectName, projectNameChanged: true });","158","  handleProjectKeyChange = (projectKey: string) => {","159","    this.setState(state => ({","160","      projectKey,","161","      projectName: state.projectNameChanged ? state.projectName : projectKey || ''","162","    }));","170","    const { selectedOrganization, submitting } = this.state;","184","            <ProjectKeyInput","186","              onChange={this.handleProjectKeyChange}","187","              value={this.state.projectKey}","188","            \/>","189","            <div className=\"form-field\">","190","              <label htmlFor=\"project-name\">","191","                <span className=\"text-middle\">","192","                  <strong>{translate('onboarding.create_project.display_name')}<\/strong>","193","                  <em className=\"mandatory\">*<\/em>","194","                <\/span>","195","                <HelpTooltip","196","                  className=\"spacer-left\"","197","                  overlay={translate('onboarding.create_project.display_name.help')}","198","                \/>","199","              <\/label>","200","              <div className=\"little-spacer-top spacer-bottom\">","201","                <input","202","                  className=\"input-super-large\"","203","                  id=\"project-name\"","204","                  maxLength={255}","205","                  minLength={1}","206","                  onChange={this.handleProjectNameChange}","207","                  type=\"text\"","208","                  value={this.state.projectName}","209","                \/>","210","              <\/div>","211","              <div className=\"note abs-width-400\">","212","                {translate('onboarding.create_project.display_name.description')}","213","              <\/div>","214","            <\/div>"]}],"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["2859","onboarding.create_project.display_name.error=The display name is required."],"delete":["2859","onboarding.create_project.display_name.error=The provided value doesn't match the expected format."]}],"server\/sonar-web\/src\/main\/js\/apps\/create\/project\/__tests__\/__snapshots__\/ManualProjectCreate-test.tsx.snap":[{"add":["30","      <ValidationInput","32","        description=\"onboarding.create_project.project_key.description\"","33","        help=\"onboarding.create_project.project_key.help\"","34","        id=\"project-key\"","35","        isInvalid={false}","36","        isValid={false}","37","        label=\"onboarding.create_project.project_key\"","38","        required={true}","40","        <input","41","          autoFocus={true}","42","          className=\"input-super-large\"","43","          id=\"project-key\"","44","          maxLength={400}","45","          minLength={1}","46","          onChange={[Function]}","47","          type=\"text\"","48","          value=\"\"","49","        \/>","50","      <\/ValidationInput>","51","      <ValidationInput","52","        className=\"form-field\"","53","        description=\"onboarding.create_project.display_name.description\"","54","        help=\"onboarding.create_project.display_name.help\"","55","        id=\"project-name\"","56","        isInvalid={false}","57","        isValid={false}","58","        label=\"onboarding.create_project.display_name\"","59","        required={true}","60","      >","61","        <input","62","          className=\"input-super-large\"","63","          id=\"project-name\"","64","          maxLength={255}","65","          minLength={1}","66","          onChange={[Function]}","67","          type=\"text\"","68","          value=\"\"","69","        \/>","70","      <\/ValidationInput>"],"delete":["30","      <ProjectKeyInput","32","        onChange={[Function]}","33","        value=\"\"","34","      \/>","35","      <div","36","        className=\"form-field\"","38","        <label","39","          htmlFor=\"project-name\"","40","        >","41","          <span","42","            className=\"text-middle\"","43","          >","44","            <strong>","45","              onboarding.create_project.display_name","46","            <\/strong>","47","            <em","48","              className=\"mandatory\"","49","            >","50","              *","51","            <\/em>","52","          <\/span>","53","          <HelpTooltip","54","            className=\"spacer-left\"","55","            overlay=\"onboarding.create_project.display_name.help\"","56","          \/>","57","        <\/label>","58","        <div","59","          className=\"little-spacer-top spacer-bottom\"","60","        >","61","          <input","62","            className=\"input-super-large\"","63","            id=\"project-name\"","64","            maxLength={255}","65","            minLength={1}","66","            onChange={[Function]}","67","            type=\"text\"","68","            value=\"\"","69","          \/>","70","        <\/div>","71","        <div","72","          className=\"note abs-width-400\"","73","        >","74","          onboarding.create_project.display_name.description","75","        <\/div>","76","      <\/div>"]}],"server\/sonar-web\/src\/main\/js\/apps\/create\/project\/ManualProjectCreate.css":[{"add":["20","  max-width: 700px;"],"delete":["20","  max-width: 650px;"]}],"server\/sonar-web\/src\/main\/js\/apps\/create\/project\/__tests__\/ManualProjectCreate-test.tsx":[{"add":["19","\/* eslint-disable sonarjs\/no-duplicate-string *\/","27","  createProject: jest.fn().mockResolvedValue({ project: { key: 'bar', name: 'Bar' } }),","28","  doesComponentExists: jest","29","    .fn()","30","    .mockImplementation(({ component }) => Promise.resolve(component === 'exists'))","38","  jest.clearAllMocks();","42","  expect(shallowRender()).toMatchSnapshot();","47","  const wrapper = shallowRender({ onProjectCreate });","50","  change(wrapper.find('input#project-key'), 'bar');","68","  const wrapper = shallowRender({ onProjectCreate });","71","  change(wrapper.find('input#project-key'), 'bar');","86","it('should not display any status when the key is not defined', () => {","87","  const wrapper = shallowRender();","88","  const projectKeyInput = wrapper.find('ValidationInput').first();","89","  expect(projectKeyInput.prop('isInvalid')).toBe(false);","90","  expect(projectKeyInput.prop('isValid')).toBe(false);","91","});","92","","93","it('should not display any status when the name is not defined', () => {","94","  const wrapper = shallowRender();","95","  const projectKeyInput = wrapper.find('ValidationInput').last();","96","  expect(projectKeyInput.prop('isInvalid')).toBe(false);","97","  expect(projectKeyInput.prop('isValid')).toBe(false);","98","});","99","","100","it('should have an error when the key is invalid', () => {","101","  const wrapper = shallowRender();","102","  change(wrapper.find('input#project-key'), 'KEy-with#speci@l_char');","103","  expect(","104","    wrapper","105","      .find('ValidationInput')","106","      .first()","107","      .prop('isInvalid')","108","  ).toBe(true);","109","});","110","","111","it('should have an error when the key already exists', async () => {","112","  const wrapper = shallowRender();","113","  change(wrapper.find('input#project-key'), 'exists');","114","","115","  await waitAndUpdate(wrapper);","116","  expect(","117","    wrapper","118","      .find('ValidationInput')","119","      .first()","120","      .prop('isInvalid')","121","  ).toBe(true);","122","});","123","","124","it('should ignore promise return if value has been changed in the meantime', async () => {","125","  const wrapper = shallowRender();","126","","127","  change(wrapper.find('input#project-key'), 'exists');","128","  change(wrapper.find('input#project-key'), 'exists%');","129","","130","  await waitAndUpdate(wrapper);","131","","132","  expect(wrapper.state('touched')).toBe(true);","133","  expect(wrapper.state('projectKeyError')).toBe('onboarding.create_project.project_key.error');","134","});","135","","136","it('should autofill the name based on the key', () => {","137","  const wrapper = shallowRender();","138","  change(wrapper.find('input#project-key'), 'bar');","139","  expect(wrapper.find('input#project-name').prop('value')).toBe('bar');","140","});","141","","142","it('should have an error when the name is empty', () => {","143","  const wrapper = shallowRender();","144","  change(wrapper.find('input#project-key'), 'bar');","145","  change(wrapper.find('input#project-name'), '');","146","  expect(","147","    wrapper","148","      .find('ValidationInput')","149","      .last()","150","      .prop('isInvalid')","151","  ).toBe(true);","152","  expect(wrapper.state('projectNameError')).toBe('onboarding.create_project.display_name.error');","153","});","154","","155","function shallowRender(props: Partial<ManualProjectCreate['props']> = {}) {","156","  return shallow<ManualProjectCreate>("],"delete":["26","  createProject: jest.fn().mockResolvedValue({ project: { key: 'bar', name: 'Bar' } })","34","  (createProject as jest.Mock<any>).mockClear();","38","  expect(getWrapper()).toMatchSnapshot();","43","  const wrapper = getWrapper({ onProjectCreate });","46","  change(wrapper.find('ProjectKeyInput'), 'bar');","64","  const wrapper = getWrapper({ onProjectCreate });","67","  change(wrapper.find('ProjectKeyInput'), 'bar');","82","function getWrapper(props = {}) {","83","  return shallow("]}]}},"05087385ee6a3e032febe5f5f3033aa13a534147":{"changes":{"sonar-batch\/src\/main\/resources\/org\/sonar\/batch\/scan\/report\/issuesreport.ftl":"MODIFY"},"diff":{"sonar-batch\/src\/main\/resources\/org\/sonar\/batch\/scan\/report\/issuesreport.ftl":[{"add":["4","  <title>Issues report of ${report.getTitle()?html}<\/title>","22","    var nbResources = ${report.getResourcesWithReport()?size?c};","167","  <div class=\"subtitle\">${report.getTitle()?html} - ${report.getDate()?datetime}<\/div>","368","                <span class=\"rulename\">${issue.message()?html}<\/span>","417","                            <span class=\"rulename\">${issue.message()?html}<\/span>"],"delete":["4","  <title>Issues report of ${report.getTitle()}<\/title>","22","    var nbResources = ${report.getResourcesWithReport()?size};","167","  <div class=\"subtitle\">${report.getTitle()} - ${report.getDate()?datetime}<\/div>","368","                <span class=\"rulename\">${issue.message()}<\/span>","417","                            <span class=\"rulename\">${issue.message()}<\/span>"]}]}},"0546704b7a152de911c3f0000418c14013392d6e":{"changes":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/utils\/ParsingUtils.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/es\/textsearch\/ComponentTextSearchFeatureRepertoire.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/measure\/index\/ProjectsTextSearchQueryFactory.java":"MODIFY"},"diff":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/utils\/ParsingUtils.java":[{"add":["55","    return parseNumber(number, Locale.ENGLISH);"],"delete":["55","    return parseNumber(number, Locale.getDefault());"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/es\/textsearch\/ComponentTextSearchFeatureRepertoire.java":[{"add":["73","      List<String> lowerCaseTokens = tokens.stream().map(t -> t.toLowerCase(Locale.ENGLISH)).collect(MoreCollectors.toList());"],"delete":["73","      List<String> lowerCaseTokens = tokens.stream().map(t -> t.toLowerCase(Locale.getDefault())).collect(MoreCollectors.toList());"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/measure\/index\/ProjectsTextSearchQueryFactory.java":[{"add":["75","        String lowerCaseQueryText = queryText.toLowerCase(Locale.ENGLISH);"],"delete":["75","        String lowerCaseQueryText = queryText.toLowerCase(Locale.getDefault());"]}]}},"e4c01a6e0c962a41b23a4f10f146a9a2a9c01e80":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/notifications\/NotificationService.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/notifications\/NotificationServiceTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/notifications\/NotificationService.java":[{"add":["25","import java.util.ArrayList;","26","import java.util.Collection;","27","import java.util.List;","28","import java.util.Map;","29","import java.util.Set;","30","import java.util.concurrent.Executors;","31","import java.util.concurrent.ScheduledExecutorService;","32","import java.util.concurrent.TimeUnit;","44","import org.sonar.jpa.session.DatabaseSessionFactory;","73","  private final DatabaseSessionFactory databaseSessionFactory;","84","  public NotificationService(Settings settings, DefaultNotificationManager manager, DbClient dbClient, DatabaseSessionFactory databaseSessionFactory, NotificationDispatcher[] dispatchers) {","85","    this.databaseSessionFactory = databaseSessionFactory;","96","  public NotificationService(Settings settings, DefaultNotificationManager manager, DbClient dbClient, DatabaseSessionFactory databaseSessionFactory) {","97","    this(settings, manager, dbClient, databaseSessionFactory, new NotificationDispatcher[0]);","110","        } finally {","111","          \/\/ Free Hibernate session","112","          \/\/ See https:\/\/jira.codehaus.org\/browse\/SONAR-6566","113","          databaseSessionFactory.clear();"],"delete":["38","import java.util.ArrayList;","39","import java.util.Collection;","40","import java.util.List;","41","import java.util.Map;","42","import java.util.Set;","43","import java.util.concurrent.Executors;","44","import java.util.concurrent.ScheduledExecutorService;","45","import java.util.concurrent.TimeUnit;","46","","83","  public NotificationService(Settings settings, DefaultNotificationManager manager, DbClient dbClient, NotificationDispatcher[] dispatchers) {","94","  public NotificationService(Settings settings, DefaultNotificationManager manager, DbClient dbClient) {","95","    this(settings, manager, dbClient, new NotificationDispatcher[0]);"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/notifications\/NotificationServiceTest.java":[{"add":["31","import org.sonar.jpa.session.DatabaseSessionFactory;","72","      dbClient, mock(DatabaseSessionFactory.class),","73","      new NotificationDispatcher[] {commentOnIssueAssignedToMe, commentOnIssueCreatedByMe, qualityGateChange});","209","    service = new NotificationService(settings, manager, dbClient, mock(DatabaseSessionFactory.class));"],"delete":["71","      dbClient, new NotificationDispatcher[] {commentOnIssueAssignedToMe, commentOnIssueCreatedByMe, qualityGateChange});","207","    service = new NotificationService(settings, manager, dbClient);"]}]}},"2205d5242d2d2ebb579f4a20c7c2dc1a17fbe1a8":{"changes":{"sonar-batch\/src\/test\/java\/org\/sonar\/batch\/scan\/ModuleSettingsTest.java":"MODIFY","it\/it-tests\/src\/test\/java\/batch\/BatchTest.java":"MODIFY","sonar-batch\/src\/main\/java\/org\/sonar\/batch\/scan\/ModuleSettings.java":"MODIFY","sonar-batch\/src\/main\/java\/org\/sonar\/batch\/repository\/ProjectRepositories.java":"MODIFY"},"diff":{"sonar-batch\/src\/test\/java\/org\/sonar\/batch\/scan\/ModuleSettingsTest.java":[{"add":["37","import org.sonar.batch.repository.FileData;","39","","82","    GlobalSettings globalSettings = mock(GlobalSettings.class);","83","    when(globalSettings.getDefinitions()).thenReturn(new PropertyDefinitions());","84","    when(globalSettings.getProperties()).thenReturn(ImmutableMap.of(","88","    ProjectRepositories projRepos = createSettings(\"struts-core\", ImmutableMap.of(\"on-module\", \"true\", \"overridding\", \"module\"));","92","    ModuleSettings moduleSettings = new ModuleSettings(globalSettings, module, projRepos, mode, mock(AnalysisContextReportPublisher.class));","100","  \/\/ SONAR-6386","101","  @Test","102","  public void test_loading_of_parent_module_settings_for_new_module() {","103","    GlobalSettings globalSettings = mock(GlobalSettings.class);","104","    when(globalSettings.getDefinitions()).thenReturn(new PropertyDefinitions());","105","    when(globalSettings.getProperties()).thenReturn(ImmutableMap.of(","106","      \"overridding\", \"batch\",","107","      \"on-batch\", \"true\"));","108","","109","    ProjectRepositories projRepos = createSettings(\"struts\", ImmutableMap.of(\"on-module\", \"true\", \"overridding\", \"module\"));","110","","111","    ProjectDefinition module = ProjectDefinition.create().setKey(\"struts-core\");","112","    ProjectDefinition.create().setKey(\"struts\").addSubProject(module);","113","","114","    ModuleSettings moduleSettings = new ModuleSettings(globalSettings, module, projRepos, mode, mock(AnalysisContextReportPublisher.class));","115","","116","    assertThat(moduleSettings.getString(\"overridding\")).isEqualTo(\"module\");","117","    assertThat(moduleSettings.getString(\"on-batch\")).isEqualTo(\"true\");","118","    assertThat(moduleSettings.getString(\"on-module\")).isEqualTo(\"true\");","119","  }","120","","158","        \"Access to the secured property 'sonar.foo.secured' is not possible in issues mode. The SonarQube plugin which requires this property must be deactivated in issues mode.\");"],"delete":["21","import org.sonar.batch.repository.FileData;","22","","27","","30","","84","    GlobalSettings batchSettings = mock(GlobalSettings.class);","85","    when(batchSettings.getDefinitions()).thenReturn(new PropertyDefinitions());","86","    when(batchSettings.getProperties()).thenReturn(ImmutableMap.of(","90","    ProjectRepositories projSettingsRepo = createSettings(\"struts-core\", ImmutableMap.of(\"on-module\", \"true\", \"overridding\", \"module\"));","94","    ModuleSettings moduleSettings = new ModuleSettings(batchSettings, module, projSettingsRepo, mode, mock(AnalysisContextReportPublisher.class));","139","      \"Access to the secured property 'sonar.foo.secured' is not possible in issues mode. The SonarQube plugin which requires this property must be deactivated in issues mode.\");"]}],"it\/it-tests\/src\/test\/java\/batch\/BatchTest.java":[{"add":["76","","148","  \/\/ SONAR-4680","149","  @Test","150","  public void module_should_load_settings_from_parent() {","151","    orchestrator.getServer().provisionProject(\"com.sonarsource.it.samples:multi-modules-sample\", \"Sonar :: Integration Tests :: Multi-modules Sample\");","152","","153","    Sonar sonar = orchestrator.getServer().getAdminWsClient();","154","    String propKey = \"myFakeProperty\";","155","    String rootModuleKey = \"com.sonarsource.it.samples:multi-modules-sample\";","156","    String moduleBKey = rootModuleKey + \":module_b\";","157","","158","    \/\/ Set property on provisionned project","159","    sonar.update(new PropertyUpdateQuery(propKey, \"project\", rootModuleKey));","160","    sonar.delete(new PropertyDeleteQuery(propKey, moduleBKey));","161","","162","    BuildResult result = scan(\"shared\/xoo-multi-modules-sample\", \"sonar.showSettings\", propKey);","163","","164","    assertThat(result.getLogs()).contains(rootModuleKey + \":\" + propKey + \" = project\");","165","    \/\/ Module should inherit from parent","166","    assertThat(result.getLogs()).contains(moduleBKey + \":\" + propKey + \" = project\");","167","  }","168",""],"delete":["76","  ","118","    orchestrator.getServer().associateProjectToQualityProfile(\"com.sonarsource.it.samples:multi-modules-sample\", \"xoo\", \"one-issue-per-line\");"]}],"sonar-batch\/src\/main\/java\/org\/sonar\/batch\/scan\/ModuleSettings.java":[{"add":["37","  private final ProjectRepositories projectRepos;","43","    this.projectRepos = projectSettingsRepo;","59","    ProjectDefinition def = moduleDefinition;","60","    do {","61","      if (projectRepos.moduleExists(def.getKeyWithBranch())) {","62","        addProperties(projectRepos.settings(def.getKeyWithBranch()));","63","        break;","64","      }","65","      def = def.getParent();","66","    } while (def != null);"],"delete":["37","  private final ProjectRepositories projectSettingsRepo;","43","    this.projectSettingsRepo = projectSettingsRepo;","59","    addProperties(projectSettingsRepo.settings(moduleDefinition.getKeyWithBranch()));"]}],"sonar-batch\/src\/main\/java\/org\/sonar\/batch\/repository\/ProjectRepositories.java":[{"add":["25","import javax.annotation.CheckForNull;","26","import javax.annotation.Nullable;","61","  public boolean moduleExists(String moduleKey) {","62","    return settingsByModule.containsRow(moduleKey);","63","  }","64",""],"delete":["23","","24","import javax.annotation.CheckForNull;","25","import javax.annotation.Nullable;","26",""]}]}},"50703788b24aae6096fff89bb4f6f3ced2321029":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/controls\/GlobalMessages.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/controls\/GlobalMessages.js":[{"add":["45","          type=\"button\""],"delete":[]}]}},"7f6004f914450d45aa6d4b3a5e60c21b3e6af53f":{"changes":{"sonar-core\/src\/test\/java\/org\/sonar\/core\/issue\/tracking\/TrackerTest.java":"MODIFY","sonar-core\/src\/main\/java\/org\/sonar\/core\/issue\/tracking\/BlockRecognizer.java":"MODIFY"},"diff":{"sonar-core\/src\/test\/java\/org\/sonar\/core\/issue\/tracking\/TrackerTest.java":[{"add":["253","  \/\/ SONAR-10194","254","  @Test","255","  public void no_match_if_only_same_rulekey() {","256","    FakeInput baseInput = FakeInput.createForSourceLines(","257","      \"package aa;\",","258","      \"\",","259","      \"\/**\",","260","      \" * Hello world\",","261","      \" *\",","262","      \" *\/\",","263","      \"public class App {\",","264","      \"\",","265","      \"    public static void main(String[] args) {\",","266","      \"\",","267","      \"        int magicNumber = 42;\",","268","      \"\",","269","      \"        String s = new String(\\\"Very long line that does not meet our maximum 120 character line length criteria and should be wrapped to avoid SonarQube issues.\\\");\\r\\n\"","270","        +","271","        \"    }\",","272","      \"}\");","273","    Issue base1 = baseInput.createIssueOnLine(11, RuleKey.of(\"squid\", \"S109\"), \"Assign this magic number 42 to a well-named constant, and use the constant instead.\");","274","    Issue base2 = baseInput.createIssueOnLine(13, RuleKey.of(\"squid\", \"S00103\"), \"Split this 163 characters long line (which is greater than 120 authorized).\");","275","","276","    FakeInput rawInput = FakeInput.createForSourceLines(","277","      \"package aa;\",","278","      \"\",","279","      \"\/**\",","280","      \" * Hello world\",","281","      \" *\",","282","      \" *\/\",","283","      \"public class App {\",","284","      \"\",","285","      \"    public static void main(String[] args) {\",","286","      \"        \",","287","      \"        System.out.println(\\\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque vel diam purus. Curabitur ut nisi lacus....\\\");\",","288","      \"        \",","289","      \"        int a = 0;\",","290","      \"        \",","291","      \"        int x = a + 123;\",","292","      \"    }\",","293","      \"}\");","294","    Issue raw1 = rawInput.createIssueOnLine(11, RuleKey.of(\"squid\", \"S00103\"), \"Split this 139 characters long line (which is greater than 120 authorized).\");","295","    Issue raw2 = rawInput.createIssueOnLine(15, RuleKey.of(\"squid\", \"S109\"), \"Assign this magic number 123 to a well-named constant, and use the constant instead.\");","296","","297","    Tracking<Issue, Issue> tracking = tracker.track(rawInput, baseInput);","298","    assertThat(tracking.baseFor(raw1)).isNull();","299","    assertThat(tracking.baseFor(raw2)).isNull();","300","    assertThat(tracking.getUnmatchedBases()).hasSize(2);","301","  }","302",""],"delete":[]}],"sonar-core\/src\/main\/java\/org\/sonar\/core\/issue\/tracking\/BlockRecognizer.java":[{"add":["86","        if (weight > 0) {","87","          possibleLinePairs.add(new LinePair(baseLine, rawLine, weight));","88","        }"],"delete":["86","        possibleLinePairs.add(new LinePair(baseLine, rawLine, weight));"]}]}},"6e4367ab807afdb78fe968424f034657ca3802bf":{"changes":{"sonar-plugin-api\/build.gradle":"MODIFY"},"diff":{"sonar-plugin-api\/build.gradle":[{"add":["51","    'project.buildVersion': project.version.endsWith('SNAPSHOT') ? project.version : on3Digits(project.version) + '.' + (System.getProperty(\"buildNumber\") ?: '0'),"],"delete":["51","    'project.buildVersion': project.version.endsWith('SNAPSHOT') ? project.version : on3Digits(project.version) + '.' + System.getProperty(\"buildNumber\"),"]}]}},"da3753ec1e4490fcee4ad7d1a25cf56176cc1924":{"changes":{"it\/it-tests\/src\/test\/java\/it\/plugins\/PluginsTest.java":"MODIFY"},"diff":{"it\/it-tests\/src\/test\/java\/it\/plugins\/PluginsTest.java":[{"add":["74","    \"maifcobolplugin\",","75","","76","    \/\/ SONAR-7770 Realm plugins cannot be installed as no external configuration is used","77","    \"crowd\",\"ldap\",\"pam\"","78","  );"],"delete":["74","    \"maifcobolplugin\");"]}]}},"191fde8d2cfc1a69b4e981b67e4e0bdbb33bba7c":{"changes":{"plugins\/sonar-xoo-plugin\/src\/main\/java\/org\/sonar\/xoo\/rule\/XooRulesDefinition.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/util\/cache\/ProtobufIssueDiskCache.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/PersistIssuesStepTest.java":"MODIFY"},"diff":{"plugins\/sonar-xoo-plugin\/src\/main\/java\/org\/sonar\/xoo\/rule\/XooRulesDefinition.java":[{"add":["99","      .setHtmlDescription(\"Generate an issue on each line of a file. It requires the metric \\\"lines\\\".\")","100","      .setTags(\"line\");"],"delete":["99","      .setHtmlDescription(\"Generate an issue on each line of a file. It requires the metric \\\"lines\\\".\");"]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/util\/cache\/ProtobufIssueDiskCache.java":[{"add":["117","    defaultIssue.setTags(ImmutableSet.copyOf(TAGS_SPLITTER.split(next.getTags())));"],"delete":["21","import com.google.common.base.Joiner;","118","    defaultIssue.setTags(ImmutableSet.copyOf(TAGS_SPLITTER.split(next.hasTags() ? \"\" : next.getTags())));"]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/PersistIssuesStepTest.java":[{"add":["134","      .setTags(singletonList(\"test\"))","167","    assertThat(result.getTags()).containsExactlyInAnyOrder(\"test\");","176","  public void insert_copied_issue_with_minimal_info() {","177","    RuleDefinitionDto rule = RuleTesting.newRule(RuleKey.of(\"xoo\", \"S01\"));","178","    db.rules().insert(rule);","179","    OrganizationDto organizationDto = db.organizations().insert();","180","    ComponentDto project = db.components().insertPrivateProject(organizationDto);","181","    ComponentDto file = db.components().insertComponent(newFileDto(project, null));","182","    when(system2.now()).thenReturn(NOW);","183","","184","    protoIssueCache.newAppender().append(new DefaultIssue()","185","      .setKey(\"ISSUE\")","186","      .setType(RuleType.CODE_SMELL)","187","      .setRuleKey(rule.getKey())","188","      .setComponentUuid(file.uuid())","189","      .setComponentKey(file.getKey())","190","      .setProjectUuid(project.uuid())","191","      .setProjectKey(project.getKey())","192","      .setSeverity(BLOCKER)","193","      .setStatus(STATUS_OPEN)","194","      .setNew(false)","195","      .setCopied(true)","196","      .setType(RuleType.BUG)","197","      .setCreationDate(new Date(NOW))","198","      .setSelectedAt(NOW))","199","      .close();","200","","201","    TestComputationStepContext context = new TestComputationStepContext();","202","    underTest.execute(context);","203","","204","    IssueDto result = dbClient.issueDao().selectOrFailByKey(session, \"ISSUE\");","205","    assertThat(result.getKey()).isEqualTo(\"ISSUE\");","206","    assertThat(result.getRuleKey()).isEqualTo(rule.getKey());","207","    assertThat(result.getComponentUuid()).isEqualTo(file.uuid());","208","    assertThat(result.getProjectUuid()).isEqualTo(project.uuid());","209","    assertThat(result.getSeverity()).isEqualTo(BLOCKER);","210","    assertThat(result.getStatus()).isEqualTo(STATUS_OPEN);","211","    assertThat(result.getType()).isEqualTo(RuleType.BUG.getDbConstant());","212","    assertThat(result.getTags()).isEmpty();","213","","214","    assertThat(dbClient.issueChangeDao().selectByIssueKeys(session, Arrays.asList(\"ISSUE\"))).isEmpty();","215","    assertThat(context.getStatistics().getAll()).contains(","216","      entry(\"inserts\", \"1\"), entry(\"updates\", \"0\"), entry(\"merged\", \"0\"));","217","  }","218","","219","  @Test"],"delete":[]}]}},"5a0253f2dea14767fc9db008b6ffc4bb77a8c273":{"changes":{"sonar-batch\/src\/main\/java\/org\/sonar\/batch\/scan\/ProjectScanContainer.java":"MODIFY","sonar-core\/src\/main\/java\/org\/sonar\/core\/notification\/DefaultNotificationManager.java":"MODIFY"},"diff":{"sonar-batch\/src\/main\/java\/org\/sonar\/batch\/scan\/ProjectScanContainer.java":[{"add":["192","      DefaultNotificationManager.class,"],"delete":["125","      DefaultNotificationManager.class,"]}],"sonar-core\/src\/main\/java\/org\/sonar\/core\/notification\/DefaultNotificationManager.java":[{"add":["27","import java.io.IOException;","28","import java.io.InvalidClassException;","29","import java.util.Arrays;","30","import java.util.List;","31","import javax.annotation.Nullable;","34","import org.sonar.api.batch.RequiresDB;","47","@RequiresDB"],"delete":["38","import javax.annotation.Nullable;","39","","40","import java.io.IOException;","41","import java.io.InvalidClassException;","42","import java.util.Arrays;","43","import java.util.List;","44",""]}]}},"fede6d0a2378ce959e7cb1afdf221a92e22b8a6f":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/__tests__\/__snapshots__\/RuleDetailsIssues-test.tsx.snap":"ADD","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/RuleDetails.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/__tests__\/RuleDetailsIssues-test.tsx":"ADD","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/RuleDetailsIssues.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/__tests__\/__snapshots__\/RuleDetailsIssues-test.tsx.snap":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/RuleDetails.tsx":[{"add":["256","            <RuleDetailsIssues organization={organization} ruleDetails={ruleDetails} \/>"],"delete":["256","            <RuleDetailsIssues organization={organization} ruleKey={ruleDetails.key} \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/__tests__\/RuleDetailsIssues-test.tsx":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/RuleDetailsIssues.tsx":[{"add":["25","import { RuleDetails } from '..\/..\/..\/app\/types';","32","  ruleDetails: Pick<RuleDetails, 'key' | 'type'>;","62","    if (prevProps.ruleDetails !== this.props.ruleDetails) {","71","  getBaseIssuesQuery = () => ({","72","    resolved: 'false',","73","    rules: this.props.ruleDetails.key,","74","    types:","75","      this.props.ruleDetails.type === 'SECURITY_HOTSPOT'","76","        ? 'VULNERABILITY,SECURITY_HOTSPOT'","77","        : undefined","78","  });","79","","83","      { ...this.getBaseIssuesQuery(), organization: this.props.organization },","112","    const path = getIssuesUrl(this.getBaseIssuesQuery(), this.props.organization);","133","      { ...this.getBaseIssuesQuery(), projects: project.key },"],"delete":["31","  ruleKey: string;","61","    if (prevProps.ruleKey !== this.props.ruleKey) {","73","      { organization: this.props.organization, rules: this.props.ruleKey, resolved: false },","102","    const path = getIssuesUrl(","103","      { resolved: 'false', rules: this.props.ruleKey },","104","      this.props.organization","105","    );","126","      { projects: project.key, resolved: 'false', rules: this.props.ruleKey },"]}]}},"3def9251b81c6fafc75b3129904ad8887490520d":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/conciseIssuesList\/__tests__\/ConciseIssueLocationsNavigator-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/conciseIssuesList\/ConciseIssueLocationsNavigator.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/conciseIssuesList\/ConciseIssueLocationsNavigatorLocation.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/conciseIssuesList\/CrossFileLocationsNavigator.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/conciseIssuesList\/__tests__\/ConciseIssueLocationsNavigatorLocation-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/conciseIssuesList\/__tests__\/CrossFileLocationsNavigator-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/conciseIssuesList\/__tests__\/__snapshots__\/CrossFileLocationsNavigator-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/conciseIssuesList\/__tests__\/__snapshots__\/ConciseIssueLocationsNavigator-test.tsx.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/conciseIssuesList\/__tests__\/ConciseIssueLocationsNavigator-test.tsx":[{"add":["52","  expect(shallowRender({ issue })).toMatchSnapshot();","62","  expect(shallowRender({ issue })).toMatchSnapshot();","72","  expect(shallowRender({ issue, selectedFlowIndex: 0 })).toMatchSnapshot();","82","  expect(shallowRender({ issue })).toMatchSnapshot();","92","  const wrapper = shallowRender({ issue });","93","  expect(wrapper.type()).toBeNull();","94","});","95","","96","it('should render taint analysis issues correctly', () => {","97","  const issue = mockIssue(false, {","98","    component: 'foo',","99","    key: '',","100","    flows: [[location1, location2, location3]],","101","    secondaryLocations: [],","102","    type: 'VULNERABILITY'","103","  });","104","","105","  expect(shallowRender({ issue })).toMatchSnapshot();","106","});","107","","108","function shallowRender(overrides: Partial<ConciseIssueLocationsNavigator['props']> = {}) {","109","  return shallow<ConciseIssueLocationsNavigator>(","111","      issue={mockIssue()}","116","      {...overrides}","119","}"],"delete":["52","  expect(","53","    shallow(","54","      <ConciseIssueLocationsNavigator","55","        issue={issue}","56","        onLocationSelect={jest.fn()}","57","        scroll={jest.fn()}","58","        selectedFlowIndex={undefined}","59","        selectedLocationIndex={undefined}","60","      \/>","61","    )","62","  ).toMatchSnapshot();","72","  expect(","73","    shallow(","74","      <ConciseIssueLocationsNavigator","75","        issue={issue}","76","        onLocationSelect={jest.fn()}","77","        scroll={jest.fn()}","78","        selectedFlowIndex={undefined}","79","        selectedLocationIndex={undefined}","80","      \/>","81","    )","82","  ).toMatchSnapshot();","92","  expect(","93","    shallow(","94","      <ConciseIssueLocationsNavigator","95","        issue={issue}","96","        onLocationSelect={jest.fn()}","97","        scroll={jest.fn()}","98","        selectedFlowIndex={0}","99","        selectedLocationIndex={undefined}","100","      \/>","101","    )","102","  ).toMatchSnapshot();","112","  expect(","113","    shallow(","114","      <ConciseIssueLocationsNavigator","115","        issue={issue}","116","        onLocationSelect={jest.fn()}","117","        scroll={jest.fn()}","118","        selectedFlowIndex={undefined}","119","        selectedLocationIndex={undefined}","120","      \/>","121","    )","122","  ).toMatchSnapshot();","132","  const wrapper = shallow(","134","      issue={issue}","141","  expect(wrapper.type()).toBeNull();","142","});"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/conciseIssuesList\/ConciseIssueLocationsNavigator.tsx":[{"add":["41","    const isTaintAnalysis =","42","      this.props.issue.type === 'VULNERABILITY' && this.props.issue.flows.length > 0;","43","","53","          isTaintAnalysis={isTaintAnalysis}","67","              isTaintAnalysis={isTaintAnalysis}"],"delete":["63","              issueType={this.props.issue.type}"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/conciseIssuesList\/ConciseIssueLocationsNavigatorLocation.tsx":[{"add":["25","  isTaintAnalysis: boolean;","65","    const { index, isTaintAnalysis, message, selected, totalCount } = this.props;","75","            {isTaintAnalysis ? this.prefixMessage(index, message, totalCount) : message}"],"delete":["25","  issueType: T.IssueType;","65","    const { index, issueType, message, selected, totalCount } = this.props;","75","            {issueType === 'VULNERABILITY'","76","              ? this.prefixMessage(index, message, totalCount)","77","              : message}"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/conciseIssuesList\/CrossFileLocationsNavigator.tsx":[{"add":["25","  isTaintAnalysis: boolean;","114","        isTaintAnalysis={this.props.isTaintAnalysis}"],"delete":["113","        issueType={this.props.issue.type}"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/conciseIssuesList\/__tests__\/ConciseIssueLocationsNavigatorLocation-test.tsx":[{"add":["27","  expect(shallowRender({ index: 0, isTaintAnalysis: true, totalCount: 4 })).toMatchSnapshot();","28","  expect(shallowRender({ index: 1, isTaintAnalysis: true, totalCount: 4 })).toMatchSnapshot();","29","  expect(shallowRender({ index: 3, isTaintAnalysis: true, totalCount: 4 })).toMatchSnapshot();","36","      isTaintAnalysis={false}"],"delete":["27","  expect(shallowRender({ index: 0, issueType: 'VULNERABILITY', totalCount: 4 })).toMatchSnapshot();","28","  expect(shallowRender({ index: 1, issueType: 'VULNERABILITY', totalCount: 4 })).toMatchSnapshot();","29","  expect(shallowRender({ index: 3, issueType: 'VULNERABILITY', totalCount: 4 })).toMatchSnapshot();","36","      issueType=\"BUG\""]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/conciseIssuesList\/__tests__\/CrossFileLocationsNavigator-test.tsx":[{"add":["48","      isTaintAnalysis={false}","66","      isTaintAnalysis={false}","80","      isTaintAnalysis={false}","97","      isTaintAnalysis={false}"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/conciseIssuesList\/__tests__\/__snapshots__\/CrossFileLocationsNavigator-test.tsx.snap":[{"add":["23","        isTaintAnalysis={false}","68","        isTaintAnalysis={false}"],"delete":["23","        issueType=\"BUG\"","68","        issueType=\"BUG\""]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/conciseIssuesList\/__tests__\/__snapshots__\/ConciseIssueLocationsNavigator-test.tsx.snap":[{"add":["4","  isTaintAnalysis={false}","100","    isTaintAnalysis={false}","110","    isTaintAnalysis={false}","127","    isTaintAnalysis={false}","137","    isTaintAnalysis={false}","154","    isTaintAnalysis={false}","164","    isTaintAnalysis={false}","174","","175","exports[`should render taint analysis issues correctly 1`] = `","176","<CrossFileLocationsNavigator","177","  isTaintAnalysis={true}","178","  issue={","179","    Object {","180","      \"actions\": Array [],","181","      \"component\": \"foo\",","182","      \"componentLongName\": \"main.js\",","183","      \"componentQualifier\": \"FIL\",","184","      \"componentUuid\": \"foo1234\",","185","      \"creationDate\": \"2017-03-01T09:36:01+0100\",","186","      \"flows\": Array [","187","        Array [","188","          Object {","189","            \"component\": \"foo\",","190","            \"componentName\": \"src\/foo.js\",","191","            \"msg\": \"Do not use foo\",","192","            \"textRange\": Object {","193","              \"endLine\": 7,","194","              \"endOffset\": 8,","195","              \"startLine\": 7,","196","              \"startOffset\": 5,","197","            },","198","          },","199","          Object {","200","            \"component\": \"foo\",","201","            \"componentName\": \"src\/foo.js\",","202","            \"msg\": \"Do not use foo\",","203","            \"textRange\": Object {","204","              \"endLine\": 8,","205","              \"endOffset\": 5,","206","              \"startLine\": 8,","207","              \"startOffset\": 0,","208","            },","209","          },","210","          Object {","211","            \"component\": \"bar\",","212","            \"componentName\": \"src\/bar.js\",","213","            \"msg\": \"Do not use bar\",","214","            \"textRange\": Object {","215","              \"endLine\": 16,","216","              \"endOffset\": 6,","217","              \"startLine\": 15,","218","              \"startOffset\": 4,","219","            },","220","          },","221","        ],","222","      ],","223","      \"fromHotspot\": false,","224","      \"key\": \"\",","225","      \"line\": 25,","226","      \"message\": \"Reduce the number of conditional operators (4) used in the expression\",","227","      \"organization\": \"myorg\",","228","      \"project\": \"myproject\",","229","      \"projectKey\": \"foo\",","230","      \"projectName\": \"Foo\",","231","      \"projectOrganization\": \"org\",","232","      \"rule\": \"javascript:S1067\",","233","      \"ruleName\": \"foo\",","234","      \"secondaryLocations\": Array [],","235","      \"severity\": \"MAJOR\",","236","      \"status\": \"OPEN\",","237","      \"textRange\": Object {","238","        \"endLine\": 26,","239","        \"endOffset\": 15,","240","        \"startLine\": 25,","241","        \"startOffset\": 0,","242","      },","243","      \"transitions\": Array [],","244","      \"type\": \"VULNERABILITY\",","245","    }","246","  }","247","  locations={","248","    Array [","249","      Object {","250","        \"component\": \"foo\",","251","        \"componentName\": \"src\/foo.js\",","252","        \"msg\": \"Do not use foo\",","253","        \"textRange\": Object {","254","          \"endLine\": 7,","255","          \"endOffset\": 8,","256","          \"startLine\": 7,","257","          \"startOffset\": 5,","258","        },","259","      },","260","      Object {","261","        \"component\": \"foo\",","262","        \"componentName\": \"src\/foo.js\",","263","        \"msg\": \"Do not use foo\",","264","        \"textRange\": Object {","265","          \"endLine\": 8,","266","          \"endOffset\": 5,","267","          \"startLine\": 8,","268","          \"startOffset\": 0,","269","        },","270","      },","271","      Object {","272","        \"component\": \"bar\",","273","        \"componentName\": \"src\/bar.js\",","274","        \"msg\": \"Do not use bar\",","275","        \"textRange\": Object {","276","          \"endLine\": 16,","277","          \"endOffset\": 6,","278","          \"startLine\": 15,","279","          \"startOffset\": 4,","280","        },","281","      },","282","    ]","283","  }","284","  onLocationSelect={[MockFunction]}","285","  scroll={[MockFunction]}","286","\/>","287","`;"],"delete":["99","    issueType=\"BUG\"","109","    issueType=\"BUG\"","126","    issueType=\"BUG\"","136","    issueType=\"BUG\"","153","    issueType=\"BUG\"","163","    issueType=\"BUG\""]}]}},"addaff54eadb44912307a5eca033437ab62be143":{"changes":{"sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/permission\/PermissionsService.java":"MODIFY","sonar-ws\/src\/test\/java\/org\/sonarqube\/ws\/client\/permission\/PermissionsServiceTest.java":"MODIFY"},"diff":{"sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/permission\/PermissionsService.java":[{"add":["107","  public void bulkApplyTemplate(BulkApplyTemplateWsRequest request) {","108","    call(new PostRequest(path(\"bulk_apply_template\"))","109","      .setParam(PARAM_TEMPLATE_ID, request.getTemplateId())","110","      .setParam(PARAM_TEMPLATE_NAME, request.getTemplateName())","111","      .setParam(\"q\", request.getQuery())","112","      .setParam(PARAM_QUALIFIER, request.getQualifier())","113","    );","114","  }","115",""],"delete":[]}],"sonar-ws\/src\/test\/java\/org\/sonarqube\/ws\/client\/permission\/PermissionsServiceTest.java":[{"add":["208","  public void bulk_apply_template() {","209","    underTest.bulkApplyTemplate(new BulkApplyTemplateWsRequest()","210","      .setTemplateId(TEMPLATE_ID_VALUE)","211","      .setTemplateName(TEMPLATE_NAME_VALUE)","212","      .setQualifier(QUALIFIER_VALUE)","213","      .setQuery(QUERY_VALUE));","214","","215","    assertThat(serviceTester.getPostParser()).isNull();","216","    PostRequest postRequest = serviceTester.getPostRequest();","217","    serviceTester.assertThat(postRequest)","218","      .hasPath(\"bulk_apply_template\")","219","      .hasParam(PARAM_TEMPLATE_ID, TEMPLATE_ID_VALUE)","220","      .hasParam(PARAM_TEMPLATE_NAME, TEMPLATE_NAME_VALUE)","221","      .hasParam(\"q\", QUERY_VALUE)","222","      .hasParam(PARAM_QUALIFIER, QUALIFIER_VALUE)","223","      .andNoOtherParam();","224","  }","225","","226","  @Test"],"delete":[]}]}},"fedee0f1c5984f069ba09c71db442d2aa44b8105":{"changes":{"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v74\/DropDefaultPermTemplateViewFromOrganizationsTest.java":"ADD","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/organization\/OrganizationDaoTest.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v74\/DropDefaultPermTemplateViewFromOrganizations.java":"ADD","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v74\/DbVersion74Test.java":"MODIFY","server\/sonar-db-core\/src\/main\/resources\/org\/sonar\/db\/version\/schema-h2.ddl":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v74\/DbVersion74.java":"MODIFY","server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v74\/DropDefaultPermTemplateViewFromOrganizationsTest\/organizations.sql":"ADD"},"diff":{"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v74\/DropDefaultPermTemplateViewFromOrganizationsTest.java":[{"add":[],"delete":[]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/organization\/OrganizationDaoTest.java":[{"add":["1223","          \"      default_perm_template_app,\" +","1224","          \"      default_perm_template_port,\" +","1244","          \"      ?,\" +","1252","      preparedStatement.setString(6, view);","1254","      preparedStatement.setBoolean(8, false);","1255","      preparedStatement.setString(9, \"1\");","1256","      preparedStatement.setString(10, FREE.name());","1257","      preparedStatement.setLong(11, 1000L);","1258","      preparedStatement.setLong(12, 2000L);"],"delete":["1223","          \"      default_perm_template_view,\" +","1250","      preparedStatement.setBoolean(6, false);","1252","      preparedStatement.setString(8, \"1\");","1253","      preparedStatement.setString(9, FREE.name());","1254","      preparedStatement.setLong(10, 1000L);","1255","      preparedStatement.setLong(11, 2000L);","1304","      \" default_perm_template_view as \\\"viewDefaultPermTemplate\\\",\" +"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v74\/DropDefaultPermTemplateViewFromOrganizations.java":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v74\/DbVersion74Test.java":[{"add":["37","    verifyMigrationCount(underTest, 23);"],"delete":["37","    verifyMigrationCount(underTest, 22);"]}],"server\/sonar-db-core\/src\/main\/resources\/org\/sonar\/db\/version\/schema-h2.ddl":[{"add":[],"delete":["9","  \"DEFAULT_PERM_TEMPLATE_VIEW\" VARCHAR(40),"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v74\/DbVersion74.java":[{"add":["51","      .add(2329, \"Drop column DEFAULT_PERM_TEMPLATE_VIEW on organizations\", DropDefaultPermTemplateViewFromOrganizations.class)"],"delete":[]}],"server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v74\/DropDefaultPermTemplateViewFromOrganizationsTest\/organizations.sql":[{"add":[],"delete":[]}]}},"a8f14ced18503abb466fefead861ea3d60f7115a":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/sessions\/components\/__tests__\/Unauthorized-test.tsx":"ADD","server\/sonar-web\/src\/main\/js\/apps\/sessions\/components\/__tests__\/__snapshots__\/Unauthorized-test.tsx.snap":"ADD","server\/sonar-web\/src\/main\/js\/apps\/sessions\/components\/Unauthorized.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/sessions\/components\/__tests__\/Unauthorized-test.tsx":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/sessions\/components\/__tests__\/__snapshots__\/Unauthorized-test.tsx.snap":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/sessions\/components\/Unauthorized.tsx":[{"add":["21","import { getBaseUrl } from '..\/..\/..\/helpers\/urls';","35","    <div className=\"page-wrapper-simple\" id=\"bd\">","36","      <div className=\"page-simple\" id=\"nonav\">","40","          {Boolean(message) && (","47","            <a href={getBaseUrl() + '\/'}>{translate('layout.home')}<\/a>"],"delete":["20","import { Link } from 'react-router';","35","    <div id=\"bd\" className=\"page-wrapper-simple\">","36","      <div id=\"nonav\" className=\"page-simple\">","40","          {!!message && (","47","            <Link to=\"\/\">{translate('layout.home')}<\/Link>"]}]}},"6be83fba1622cb8c41f9c1f537815ad801a16843":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/SourceViewerBase.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/SourceViewerBase.tsx":[{"add":["225","","226","    const to = (this.props.aroundLine || 0) + LINES;","228","      this.props.loadIssues(this.props.component, 1, to, this.props.branchLike).then("],"delete":["226","      this.props.loadIssues(this.props.component, 1, LINES, this.props.branchLike).then("]}]}},"a7b91a1668a2ef9b99b35ddfaa1eae35118b4f5d":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/details\/history\/MeasureHistory.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/details\/history\/MeasureHistory.js":[{"add":["114","        y: metric.type === 'LEVEL' ? snapshot.value : Number(snapshot.value)"],"delete":["114","        y: Number(snapshot.value)"]}]}},"f8cd06235249dffbf19efdc6755f550add0539cd":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/taskprocessor\/CeWorkerCallableImpl.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/taskprocessor\/CeWorkerCallableImpl.java":[{"add":["22","import javax.annotation.Nullable;","59","      LOG.error(format(\"An error occurred while executing task with uuid '%s'\", ceTask.get().getUuid()), e);","94","      finalizeTask(task, ceProfiler, status, taskResult, error);","95","    }","96","  }","97","","98","  private void finalizeTask(CeTask task, Profiler ceProfiler, CeActivityDto.Status status,","99","    @Nullable CeTaskResult taskResult, @Nullable Throwable error) {","100","    try {","102","    } catch (Exception e) {","103","      LOG.error(format(\"Failed to finalize task with uuid '%s' and persist its state to db\", task.getUuid()), e);","104","    } finally {"],"delete":["58","      LOG.error(\"An error occurred while managing task \" + ceTask.get().getUuid(), e);"]}]}},"899d9a0a07566b55a2de2434266e4daeb4a65666":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/nav\/NavBar.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/nav\/NavBar.tsx":[{"add":["21","import { throttle } from 'lodash';","32","interface State {","33","  left: number;","34","}","35","","36","export default class NavBar extends React.PureComponent<Props, State> {","37","  throttledFollowHorizontalScroll: (() => void);","38","","39","  constructor(props: Props) {","40","    super(props);","41","    this.state = { left: 0 };","42","    this.throttledFollowHorizontalScroll = throttle(this.followHorizontalScroll, 10);","43","  }","44","","45","  componentDidMount() {","46","    document.addEventListener('scroll', this.throttledFollowHorizontalScroll);","47","  }","48","","49","  componentWillUnmount() {","50","    document.removeEventListener('scroll', this.throttledFollowHorizontalScroll);","51","  }","52","","53","  followHorizontalScroll = () => {","54","    this.setState({ left: -document.documentElement.scrollLeft });","55","  };","56","","57","  render() {","58","    const { children, className, height, notif, ...other } = this.props;","59","    return (","60","      <nav {...other} className={classNames('navbar', className)} style={{ height }}>","61","        <div","62","          className={classNames('navbar-inner', { 'navbar-inner-with-notif': notif != null })}","63","          style={{ height, left: this.state.left }}>","64","          <div className=\"navbar-limited clearfix\">{children}<\/div>","65","          {notif}","66","        <\/div>","67","      <\/nav>","68","    );","69","  }"],"delete":["31","export default function NavBar({ children, className, height, notif, ...other }: Props) {","32","  return (","33","    <nav {...other} className={classNames('navbar', className)} style={{ height }}>","34","      <div","35","        className={classNames('navbar-inner', { 'navbar-inner-with-notif': notif != null })}","36","        style={{ height }}>","37","        <div className=\"navbar-limited clearfix\">{children}<\/div>","38","        {notif}","39","      <\/div>","40","    <\/nav>","41","  );"]}]}},"ae63a6af4780af4527dd453af7ed8923ed6bd07f":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/__tests__\/ProjectRowActions-test.tsx":"ADD","server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/__tests__\/__snapshots__\/ProjectRow-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/Projects.tsx":"MODIFY","sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/ProjectRowActions.tsx":"ADD","server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/__tests__\/App-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/RestoreAccessModal.tsx":"ADD","server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/__tests__\/__snapshots__\/ProjectRowActions-test.tsx.snap":"ADD","server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/App.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/__tests__\/Projects-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/ProjectRow.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/__tests__\/__snapshots__\/Projects-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/__tests__\/ProjectRow-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/AppContainer.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/__tests__\/ProjectRowActions-test.tsx":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/__tests__\/__snapshots__\/ProjectRow-test.tsx.snap":[{"add":["66","    <ProjectRowActions","67","      currentUser={","68","        Object {","69","          \"login\": \"foo\",","70","        }","71","      }","72","      onApplyTemplate={[Function]}","73","      project={","74","        Object {","75","          \"key\": \"project\",","76","          \"name\": \"Project\",","77","          \"qualifier\": \"TRK\",","78","          \"visibility\": \"private\",","79","        }","80","      }","81","    \/>","148","    <ProjectRowActions","149","      currentUser={","150","        Object {","151","          \"login\": \"foo\",","152","        }","153","      }","154","      onApplyTemplate={[Function]}","155","      project={","156","        Object {","157","          \"key\": \"project\",","158","          \"lastAnalysisDate\": \"2017-04-08T00:00:00.000Z\",","159","          \"name\": \"Project\",","160","          \"qualifier\": \"TRK\",","161","          \"visibility\": \"private\",","162","        }","163","      }","164","    \/>"],"delete":["66","    <div","67","      className=\"dropdown\"","68","    >","69","      <button","70","        className=\"dropdown-toggle\"","71","        data-toggle=\"dropdown\"","72","      >","73","        actions","74","         ","75","        <i","76","          className=\"icon-dropdown\"","77","        \/>","78","      <\/button>","79","      <ul","80","        className=\"dropdown-menu dropdown-menu-right\"","81","      >","82","        <li>","83","          <Link","84","            onlyActiveOnIndex={false}","85","            style={Object {}}","86","            to={","87","              Object {","88","                \"pathname\": \"\/project_roles\",","89","                \"query\": Object {","90","                  \"id\": \"project\",","91","                },","92","              }","93","            }","94","          >","95","            edit_permissions","96","          <\/Link>","97","        <\/li>","98","        <li>","99","          <a","100","            className=\"js-apply-template\"","101","            href=\"#\"","102","            onClick={[Function]}","103","          >","104","            projects_role.apply_template","105","          <\/a>","106","        <\/li>","107","      <\/ul>","108","    <\/div>","175","    <div","176","      className=\"dropdown\"","177","    >","178","      <button","179","        className=\"dropdown-toggle\"","180","        data-toggle=\"dropdown\"","181","      >","182","        actions","183","         ","184","        <i","185","          className=\"icon-dropdown\"","186","        \/>","187","      <\/button>","188","      <ul","189","        className=\"dropdown-menu dropdown-menu-right\"","190","      >","191","        <li>","192","          <Link","193","            onlyActiveOnIndex={false}","194","            style={Object {}}","195","            to={","196","              Object {","197","                \"pathname\": \"\/project_roles\",","198","                \"query\": Object {","199","                  \"id\": \"project\",","200","                },","201","              }","202","            }","203","          >","204","            edit_permissions","205","          <\/Link>","206","        <\/li>","207","        <li>","208","          <a","209","            className=\"js-apply-template\"","210","            href=\"#\"","211","            onClick={[Function]}","212","          >","213","            projects_role.apply_template","214","          <\/a>","215","        <\/li>","216","      <\/ul>","217","    <\/div>"]}],"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/Projects.tsx":[{"add":["25","import { translate } from '..\/..\/helpers\/l10n';","28","  currentUser: { login: string };","46","  handleApplyTemplate = (project: Project) => {","58","            <th>{translate('name')}<\/th>","60","            <th>{translate('key')}<\/th>","61","            <th className=\"thin nowrap text-right\">{translate('last_analysis')}<\/th>","68","              currentUser={this.props.currentUser}","70","              onApplyTemplate={this.handleApplyTemplate}"],"delete":["44","  onApplyTemplateClick = (project: Project) => {","56","            <th>Name<\/th>","58","            <th>Key<\/th>","59","            <th className=\"thin nowrap text-right\">Last Analysis<\/th>","67","              onApplyTemplateClick={this.onApplyTemplateClick}"]}],"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["78","last_analysis=Last Analysis","1894","global_permissions.restore_access=Restore Access","1895","global_permissions.restore_access.message=You will receive {browse} and {administer} permissions on the project. Do you want to continue?"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/ProjectRowActions.tsx":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/__tests__\/App-test.tsx":[{"add":["140","      currentUser={{ login: 'foo' }}"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/RestoreAccessModal.tsx":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/__tests__\/__snapshots__\/ProjectRowActions-test.tsx.snap":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/App.tsx":[{"add":["33","  currentUser: { login: string };","194","          currentUser={this.props.currentUser}"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/__tests__\/Projects-test.tsx":[{"add":["61","    .prop<Function>('onApplyTemplate')(projects[0]);","68","      currentUser={{ login: 'foo' }}"],"delete":["61","    .prop<Function>('onApplyTemplateClick')(projects[0]);"]}],"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/ProjectRow.tsx":[{"add":["21","import ProjectRowActions from '.\/ProjectRowActions';","30","  currentUser: { login: string };","31","  onApplyTemplate: (project: Project) => void;","78","          <ProjectRowActions","79","            currentUser={this.props.currentUser}","80","            onApplyTemplate={this.props.onApplyTemplate}","81","            project={project}","82","          \/>"],"delete":["26","import { translate } from '..\/..\/helpers\/l10n';","27","import { getComponentPermissionsUrl } from '..\/..\/helpers\/urls';","31","  onApplyTemplateClick: (project: Project) => void;","42","  handleApplyTemplateClick = (event: React.SyntheticEvent<HTMLAnchorElement>) => {","43","    event.preventDefault();","44","    event.currentTarget.blur();","45","    this.props.onApplyTemplateClick(this.props.project);","46","  };","47","","84","          <div className=\"dropdown\">","85","            <button className=\"dropdown-toggle\" data-toggle=\"dropdown\">","86","              {translate('actions')} <i className=\"icon-dropdown\" \/>","87","            <\/button>","88","            <ul className=\"dropdown-menu dropdown-menu-right\">","89","              <li>","90","                <Link to={getComponentPermissionsUrl(project.key)}>","91","                  {translate('edit_permissions')}","92","                <\/Link>","93","              <\/li>","94","              <li>","95","                <a className=\"js-apply-template\" href=\"#\" onClick={this.handleApplyTemplateClick}>","96","                  {translate('projects_role.apply_template')}","97","                <\/a>","98","              <\/li>","99","            <\/ul>","100","          <\/div>"]}],"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/__tests__\/__snapshots__\/Projects-test.tsx.snap":[{"add":["11","        name","15","        key","20","        last_analysis","27","      currentUser={","28","        Object {","29","          \"login\": \"foo\",","30","        }","31","      }","32","      onApplyTemplate={[Function]}","45","      currentUser={","46","        Object {","47","          \"login\": \"foo\",","48","        }","49","      }","50","      onApplyTemplate={[Function]}"],"delete":["11","        Name","15","        Key","20","        Last Analysis","27","      onApplyTemplateClick={[Function]}","40","      onApplyTemplateClick={[Function]}"]}],"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/__tests__\/ProjectRow-test.tsx":[{"add":["48","      currentUser={{ login: 'foo' }}","49","      onApplyTemplate={jest.fn()}"],"delete":["23","import { click } from '..\/..\/..\/helpers\/testUtils';","46","it('applies permission template', () => {","47","  const onApplyTemplateClick = jest.fn();","48","  const wrapper = shallowRender({ onApplyTemplateClick });","49","  click(wrapper.find('.js-apply-template'));","50","  expect(onApplyTemplateClick).toBeCalledWith(project);","51","});","52","","56","      onApplyTemplateClick={jest.fn()}"]}],"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/AppContainer.tsx":[{"add":["24","import { getAppState, getOrganizationByKey, getCurrentUser } from '..\/..\/store\/rootReducer';","34","  currentUser: { login: string };","67","        currentUser={this.props.currentUser}","79","  currentUser: getCurrentUser(state),"],"delete":["24","import { getAppState, getOrganizationByKey } from '..\/..\/store\/rootReducer';"]}]}},"4e44847179780459b438cebb27c5425df1920a69":{"changes":{"\/dev\/null":"DELETE","server\/sonar-web\/src\/main\/js\/components\/docs\/__tests__\/__snapshots__\/DocMarkdownBlock-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/docs\/plugins\/remark-only-toc.js":"MODIFY","server\/sonar-web\/src\/main\/js\/@types\/rehype-slug.d.ts":"ADD","server\/sonar-web\/package.json":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/docs\/DocMarkdownBlock.tsx":"MODIFY","server\/sonar-web\/yarn.lock":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/docs\/__tests__\/DocMarkdownBlock-test.tsx":"MODIFY"},"diff":{"\/dev\/null":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/components\/docs\/__tests__\/__snapshots__\/DocMarkdownBlock-test.tsx.snap":[{"add":["14","          id=\"lorem-ipsum\"","29","          id=\"sit-amet\"","37","          id=\"maecenas-diam\"","52","          id=\"integer\"","67","          id=\"nam-blandit\""],"delete":[]}],"server\/sonar-web\/src\/main\/js\/components\/docs\/plugins\/remark-only-toc.js":[{"add":[],"delete":["20","import slug from 'remark-slug';","21","","27","  this.use(slug);","28",""]}],"server\/sonar-web\/src\/main\/js\/@types\/rehype-slug.d.ts":[{"add":[],"delete":[]}],"server\/sonar-web\/package.json":[{"add":["37","    \"rehype-slug\": \"3.0.0\","],"delete":["39","    \"remark-slug\": \"5.1.2\","]}],"server\/sonar-web\/src\/main\/js\/components\/docs\/DocMarkdownBlock.tsx":[{"add":["23","import rehypeSlug from 'rehype-slug';","75","      .use(rehypeSlug)","91","      });"],"delete":["26","import slug from 'remark-slug';","90","      })","91","      .use(slug);"]}],"server\/sonar-web\/yarn.lock":[{"add":["5225","github-slugger@^1.1.1, github-slugger@^1.2.1:","5514","hast-util-has-property@^1.0.0:","5515","  version \"1.0.4\"","5516","  resolved \"https:\/\/registry.yarnpkg.com\/hast-util-has-property\/-\/hast-util-has-property-1.0.4.tgz#9f137565fad6082524b382c1e7d7d33ca5059f36\"","5517","  integrity sha512-ghHup2voGfgFoHMGnaLHOjbYFACKrRh9KFttdCzMCbFoBMJXiNi2+XTrPP8+q6cDJM\/RSqlCfVWrjp1H201rZg==","5518","","5519","hast-util-is-element@^1.0.0:","5520","  version \"1.0.4\"","5521","  resolved \"https:\/\/registry.yarnpkg.com\/hast-util-is-element\/-\/hast-util-is-element-1.0.4.tgz#059090a05cc02e275df1ad02caf8cb422fcd2e02\"","5522","  integrity sha512-NFR6ljJRvDcyPP5SbV7MyPBgF47X3BsskLnmw1U34yL+X6YC0MoBx9EyMg8Jtx4FzGH95jw8+c1VPLHaRA0wDQ==","5523","","5561","hast-util-to-string@^1.0.0:","5562","  version \"1.0.3\"","5563","  resolved \"https:\/\/registry.yarnpkg.com\/hast-util-to-string\/-\/hast-util-to-string-1.0.3.tgz#897d4bbd0dc7a9b0765a943a82fa38136277de1f\"","5564","  integrity sha512-3lDgDE5OdpTfP3aFeKRWEwdIZ4vprztvp+AoD+RhF7uGOBs1yBDWZFadxnjcUV4KCoI3vB9A7gdFO98hEXA90w==","5565","","9783","rehype-slug@3.0.0:","9784","  version \"3.0.0\"","9785","  resolved \"https:\/\/registry.yarnpkg.com\/rehype-slug\/-\/rehype-slug-3.0.0.tgz#8416257df9665981894a1f0cd42b13c407bbcc8e\"","9786","  integrity sha512-zFnj5BCEJXV6+URwaz8yW+9BdjDwO5iVzlQui3+7cCJ9MXlIEL0IY8VefcT\/03Gw+2Hutdrx+zXnS7bnOrepZg==","9787","  dependencies:","9788","    github-slugger \"^1.1.1\"","9789","    hast-util-has-property \"^1.0.0\"","9790","    hast-util-is-element \"^1.0.0\"","9791","    hast-util-to-string \"^1.0.0\"","9792","    unist-util-visit \"^2.0.0\"","9793",""],"delete":["5225","github-slugger@^1.0.0:","5226","  version \"1.2.1\"","5227","  resolved \"https:\/\/repox.jfrog.io\/repox\/api\/npm\/npm\/github-slugger\/-\/github-slugger-1.2.1.tgz#47e904e70bf2dccd0014748142d31126cfd49508\"","5228","  integrity sha1-R+kE5wvy3M0AFHSBQtMRJs\/UlQg=","5229","  dependencies:","5230","    emoji-regex \">=6.0.0 <=6.1.1\"","5231","","5232","github-slugger@^1.2.1:","7481","mdast-util-to-string@^1.0.0:","7482","  version \"1.0.6\"","7483","  resolved \"https:\/\/repox.jfrog.io\/repox\/api\/npm\/npm\/mdast-util-to-string\/-\/mdast-util-to-string-1.0.6.tgz#7d85421021343b33de1552fc71cb8e5b4ae7536d\"","7484","  integrity sha1-fYVCECE0OzPeFVL8ccuOW0rnU20=","7485","","9830","remark-slug@5.1.2:","9831","  version \"5.1.2\"","9832","  resolved \"https:\/\/repox.jfrog.io\/repox\/api\/npm\/npm\/remark-slug\/-\/remark-slug-5.1.2.tgz#715ecdef8df1226786204b1887d31ab16aa24609\"","9833","  integrity sha1-cV7N743xImeGIEsYh9MasWqiRgk=","9834","  dependencies:","9835","    github-slugger \"^1.0.0\"","9836","    mdast-util-to-string \"^1.0.0\"","9837","    unist-util-visit \"^1.0.0\"","9838",""]}],"server\/sonar-web\/src\/main\/js\/components\/docs\/__tests__\/DocMarkdownBlock-test.tsx":[{"add":["49","jest.mock('rehype-slug', () => ({ default: jest.requireActual('rehype-slug') }));"],"delete":["49","jest.mock('remark-slug', () => ({ default: jest.requireActual('remark-slug') }));"]}]}},"a9552b07116f378a31600a8ba5ef55241b0beda7":{"changes":{"server\/sonar-docs\/src\/pages\/setup\/upgrade-notes.md":"MODIFY"},"diff":{"server\/sonar-docs\/src\/pages\/setup\/upgrade-notes.md":[{"add":["5","## Release 7.9.1 LTS Upgrade Notes  ","6","**Upgrade on Microsoft SQL Server fixed**  ","7","Upgrade failure and performance issues with Microsoft SQL Server have been fixed ([SONAR-12260](https:\/\/jira.sonarsource.com\/browse\/SONAR-12260), [SONAR-12251](https:\/\/jira.sonarsource.com\/browse\/SONAR-12251)).","8","","9","**Pylint execution on Windows fixed**  ","10","Automatic execution of Pylint during python analysis on Windows has been fixed. Note that automatic execution of pylint during analysis remains deprecated on all OSes. ([SONAR-12274](https:\/\/jira.sonarsource.com\/browse\/SONAR-12274)).","11","","12","[Full Release Notes](https:\/\/jira.sonarsource.com\/secure\/ReleaseNote.jspa?projectId=10930&version=15029)","13","","14","","16","**Upgrade can fail on Microsoft SQL Server**  ","17","Migration from SonarQube v6.7.x to v7.9 fails on Microsoft SQL Server ([SONAR-12260](https:\/\/jira.sonarsource.com\/browse\/SONAR-12260)). ","26","Running Pylint automatically during python analysis has been deprecated. Additionally, it is broken in this version on Windows. If needed, Pylint must be run ahead of time and the resulting report passed in to analysis. "],"delete":["6","[[warning]]","7","| **Risk of slow upgrade with Microsoft SQL Server**  ","8","| A possible performance issue has been detected with SonarQube upgrade on Microsoft SQL Server. Root-cause analysis is ongoing to eliminate any environment-related issue. If an implementation issue is confirmed then a bug fix will be quickly released in a 7.9.1 version. Reference ticket for this investigation is [SONAR-12251](https:\/\/jira.sonarsource.com\/browse\/SONAR-12251).","17","Running Pylint automatically during python analysis has been deprecated, and is broken in this version on Windows. If needed, Pylint must be run ahead of time and the resulting report passed in to analysis. This [will be fixed](https:\/\/jira.sonarsource.com\/browse\/SONARPY-339) in a future version of SonarPython."]}]}},"bdc898f9220f48b5589bf01ef32a5194d8b28dce":{"changes":{"sonar-application\/src\/main\/assembly\/conf\/sonar.properties":"MODIFY"},"diff":{"sonar-application\/src\/main\/assembly\/conf\/sonar.properties":[{"add":["23","#----- Oracle 11g\/12c\/18c\/19c","25","# Only the thin client is supported, and we recommend using the latest Oracle JDBC driver. See"],"delete":["23","#----- Oracle 11g\/12c","25","# Only the thin client is supported, and only the versions 11.2.x or 12.2.x must be used. See"]}]}},"d959cb81e02abbcf8a1201bd5ece9e50bc4ffa2e":{"changes":{"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/qualitygate\/ProjectQgateAssociationMapper.xml":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/qualitygate\/ProjectQgateAssociationMapper.xml":[{"add":["6","    SELECT proj.id as id, proj.kee as \"key\", proj.name as name, prop.text_value as gateId"],"delete":["6","    SELECT proj.id as id, proj.kee as key, proj.name as name, prop.text_value as gateId"]}]}},"2113095efa0eafbec64d4392715efc871d2d5275":{"changes":{"plugins\/sonar-xoo-plugin\/src\/main\/java\/org\/sonar\/xoo\/rule\/InvalidIssueLineSensor.java":"ADD","sonar-batch\/src\/test\/java\/org\/sonar\/batch\/issue\/IssuableFactoryTest.java":"MODIFY","plugins\/sonar-xoo-plugin\/src\/main\/java\/org\/sonar\/xoo\/XooPlugin.java":"MODIFY","sonar-batch\/src\/main\/java\/org\/sonar\/batch\/issue\/DefaultIssuable.java":"MODIFY","sonar-batch\/src\/main\/java\/org\/sonar\/batch\/issue\/ModuleIssues.java":"MODIFY","sonar-batch\/src\/test\/java\/org\/sonar\/batch\/issue\/DefaultIssuableTest.java":"MODIFY","sonar-batch\/src\/main\/java\/org\/sonar\/batch\/issue\/IssuableFactory.java":"MODIFY","sonar-batch\/src\/test\/java\/org\/sonar\/batch\/mediumtest\/issues\/InvalidIssueLineMediumTest.java":"ADD"},"diff":{"plugins\/sonar-xoo-plugin\/src\/main\/java\/org\/sonar\/xoo\/rule\/InvalidIssueLineSensor.java":[{"add":[],"delete":[]}],"sonar-batch\/src\/test\/java\/org\/sonar\/batch\/issue\/IssuableFactoryTest.java":[{"add":["21","import org.sonar.batch.scan.filesystem.InputPathCache;","22","","39","  InputPathCache inputPathCache = mock(InputPathCache.class);","40","  ","44","    IssuableFactory factory = new IssuableFactory(moduleIssues, cache, projectTree, inputPathCache);","55","    IssuableFactory factory = new IssuableFactory(moduleIssues, cache, projectTree, inputPathCache);"],"delete":["29","","41","    IssuableFactory factory = new IssuableFactory(moduleIssues, cache, projectTree);","52","    IssuableFactory factory = new IssuableFactory(moduleIssues, cache, projectTree);"]}],"plugins\/sonar-xoo-plugin\/src\/main\/java\/org\/sonar\/xoo\/XooPlugin.java":[{"add":["66","      InvalidIssueLineSensor.class,"],"delete":[]}],"sonar-batch\/src\/main\/java\/org\/sonar\/batch\/issue\/DefaultIssuable.java":[{"add":["21","import org.sonar.batch.scan.filesystem.InputPathCache;","22","","23","import org.sonar.api.batch.fs.InputFile;","43","  private final InputPathCache inputPathCache;","45","  DefaultIssuable(Component component, Project project, ModuleIssues moduleIssues, IssueCache cache, InputPathCache inputPathCache) {","50","    this.inputPathCache = inputPathCache;","60","    validateIssueLine(issue);","64","  private void validateIssueLine(Issue issue) {","65","    if (issue.line() == null) {","66","      return;","67","    }","68","    String moduleKey = issue.projectKey();","69","    String path = component.path();","70","","71","    InputFile file = inputPathCache.getFile(moduleKey, path);","72","","73","    if (issue.line() <= 0) {","74","      invalidateIssue(issue, \"must be > 0\");","75","    }","76","","77","    if (file != null && issue.line() > file.lines()) {","78","      invalidateIssue(issue, \"must be <= \" + file.lines());","79","    }","80","  }","81","","82","  private void invalidateIssue(Issue issue, String msg) {","83","    throw new IllegalStateException(String.format(\"Invalid line %s (%s) in issue for '%s' created by the rule '%s'\", issue.line(), msg, issue.componentKey(), issue.ruleKey()));","84","  }","85","","91","      if (issue.resolution() != null) {","103","      if (issue.resolution() == null) {"],"delete":["41","  DefaultIssuable(Component component, Project project, ModuleIssues moduleIssues, IssueCache cache) {","63","      if (issue.resolution()!=null) {","75","      if (issue.resolution()==null) {"]}],"sonar-batch\/src\/main\/java\/org\/sonar\/batch\/issue\/ModuleIssues.java":[{"add":["21","import com.google.common.base.Preconditions;","22","import org.sonar.api.batch.fs.InputFile;","23",""],"delete":[]}],"sonar-batch\/src\/test\/java\/org\/sonar\/batch\/issue\/DefaultIssuableTest.java":[{"add":["21","import org.junit.rules.ExpectedException;","22","import org.junit.Rule;","23","import org.sonar.api.rule.RuleKey;","24","import org.sonar.api.batch.fs.InputFile;","25","import org.sonar.batch.scan.filesystem.InputPathCache;","35","import static org.mockito.Mockito.verify;","36","","37","import static org.mockito.Mockito.verifyNoMoreInteractions;","43","  @Rule","44","  public ExpectedException exception = ExpectedException.none();","50","  InputPathCache inputPathCache = mock(InputPathCache.class);","59","    DefaultIssuable perspective = new DefaultIssuable(component, project, moduleIssues, cache, inputPathCache);","66","  public void validateIssueLine() {","67","    InputFile file = mock(InputFile.class);","68","","69","    when(file.lines()).thenReturn(999);","70","    when(component.path()).thenReturn(\"file\");","71","    when(inputPathCache.getFile(\"module\", \"file\")).thenReturn(file);","72","","73","    DefaultIssue issue = new DefaultIssue()","74","      .setLine(1000)","75","      .setProjectKey(\"module\")","76","      .setRuleKey(RuleKey.of(\"repo\", \"rule\"))","77","      .setComponentKey(\"componentKey\");","78","    DefaultIssuable issuable = new DefaultIssuable(component, project, moduleIssues, cache, inputPathCache);","79","","80","    exception.expect(IllegalStateException.class);","81","    exception.expectMessage(\"Invalid line 1000 (must be <= 999) in issue for 'componentKey' created by the rule 'repo:rule'\");","82","    issuable.addIssue(issue);","83","  }","84","","85","  @Test","86","  public void dontValidateNullLine() {","87","    DefaultIssuable issuable = new DefaultIssuable(component, project, moduleIssues, cache, inputPathCache);","88","","89","    DefaultIssue issue = new DefaultIssue()","90","      .setLine(null);","91","    issuable.addIssue(issue);","92","    verifyNoMoreInteractions(inputPathCache);","93","  }","94","","95","  @Test","96","  public void dontValidateUnknownFiles() {","97","    DefaultIssuable issuable = new DefaultIssuable(component, project, moduleIssues, cache, inputPathCache);","98","    when(component.path()).thenReturn(\"file\");","99","","100","    DefaultIssue issue = new DefaultIssue()","101","      .setLine(1505)","102","      .setProjectKey(\"module\");","103","","104","    issuable.addIssue(issue);","105","    verify(inputPathCache).getFile(\"module\", \"file\");","106","  }","107","","108","  @Test","115","    DefaultIssuable perspective = new DefaultIssuable(component, project, moduleIssues, cache, inputPathCache);"],"delete":["48","    DefaultIssuable perspective = new DefaultIssuable(component, project, moduleIssues, cache);","61","    DefaultIssuable perspective = new DefaultIssuable(component, project, moduleIssues, cache);"]}],"sonar-batch\/src\/main\/java\/org\/sonar\/batch\/issue\/IssuableFactory.java":[{"add":["21","import org.sonar.batch.scan.filesystem.InputPathCache;","22","","41","  private final InputPathCache inputPathCache;","43","  public IssuableFactory(ModuleIssues moduleIssues, IssueCache cache, ProjectTree projectTree, InputPathCache inputPathCache) {","48","    this.inputPathCache = inputPathCache;","58","    return supported ? new DefaultIssuable(component, projectTree.getRootProject(), moduleIssues, cache, inputPathCache) : null;"],"delete":["40","  public IssuableFactory(ModuleIssues moduleIssues, IssueCache cache, ProjectTree projectTree) {","54","    return supported ? new DefaultIssuable(component, projectTree.getRootProject(), moduleIssues, cache) : null;"]}],"sonar-batch\/src\/test\/java\/org\/sonar\/batch\/mediumtest\/issues\/InvalidIssueLineMediumTest.java":[{"add":[],"delete":[]}]}},"b50a849b37ac7832f5ebd7e402d1e44f2b11eb20":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/projects\/filters\/SearchableFilterFooter.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projects\/filters\/LanguagesFilter.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projects\/filters\/__tests__\/LanguagesFilter-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projects\/filters\/__tests__\/__snapshots__\/LanguagesFilter-test.tsx.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/projects\/filters\/SearchableFilterFooter.tsx":[{"add":["25","  isFavorite?: boolean;","26","  isLoading?: boolean;","29","  onQueryChange: (change: RawQuery) => void;","30","  options: Array<{ label: string; value: string }>;","32","  property: string;","33","  query: { [x: string]: any };"],"delete":["25","  onQueryChange: (change: RawQuery) => void;","26","  property: string;","27","  query: { [x: string]: any };","28","  options: Array<{ label: string; value: string }>;","31","  isLoading?: boolean;","32","  isFavorite?: boolean;"]}],"server\/sonar-web\/src\/main\/js\/apps\/projects\/filters\/LanguagesFilter.tsx":[{"add":["38","  value?: string[];","43","    const { facet, languages } = this.props;","44","    let languageKeys = Object.keys(languages);","45","    if (facet) {","46","      languageKeys = difference(languageKeys, Object.keys(facet));","48","    return languageKeys.map(key => ({ label: languages[key].name, value: key }));"],"delete":["38","  value?: Array<string>;","41","const LIST_SIZE = 10;","42","","45","    let languageKeys = Object.keys(this.props.languages);","46","    if (this.props.facet) {","47","      languageKeys = difference(languageKeys, Object.keys(this.props.facet));","49","    return languageKeys","50","      .slice(0, LIST_SIZE)","51","      .map(key => ({ label: this.props.languages[key].name, value: key }));"]}],"server\/sonar-web\/src\/main\/js\/apps\/projects\/filters\/__tests__\/LanguagesFilter-test.tsx":[{"add":[],"delete":["59","","60","it('should render maximum 10 languages in the searchbox results', () => {","61","  const manyLanguages = {","62","    ...languages,","63","    c: { key: 'c', name: 'c' },","64","    d: { key: 'd', name: 'd' },","65","    e: { key: 'e', name: 'e' },","66","    f: { key: 'f', name: 'f' },","67","    g: { key: 'g', name: 'g' },","68","    h: { key: 'h', name: 'h' },","69","    i: { key: 'i', name: 'i' },","70","    k: { key: 'k', name: 'k' },","71","    l: { key: 'l', name: 'l' }","72","  };","73","  const wrapper = shallow(","74","    <LanguagesFilter","75","      facet={{ ...languagesFacet, g: 1 }}","76","      languages={manyLanguages}","77","      onQueryChange={jest.fn()}","78","      query={{ languages: ['java', 'g'] }}","79","      value={['java', 'g']}","80","    \/>","81","  );","82","  expect(wrapper).toMatchSnapshot();","83","});"]}],"server\/sonar-web\/src\/main\/js\/apps\/projects\/filters\/__tests__\/__snapshots__\/LanguagesFilter-test.tsx.snap":[{"add":[],"delete":["2","exports[`should render maximum 10 languages in the searchbox results 1`] = `","3","<Filter","4","  facet={","5","    Object {","6","      \"cs\": 4,","7","      \"g\": 1,","8","      \"java\": 39,","9","      \"js\": 1,","10","    }","11","  }","12","  footer={","13","    <SearchableFilterFooter","14","      onQueryChange={[MockFunction]}","15","      options={","16","        Array [","17","          Object {","18","            \"label\": \"Flex\",","19","            \"value\": \"flex\",","20","          },","21","          Object {","22","            \"label\": \"PHP\",","23","            \"value\": \"php\",","24","          },","25","          Object {","26","            \"label\": \"Python\",","27","            \"value\": \"py\",","28","          },","29","          Object {","30","            \"label\": \"c\",","31","            \"value\": \"c\",","32","          },","33","          Object {","34","            \"label\": \"d\",","35","            \"value\": \"d\",","36","          },","37","          Object {","38","            \"label\": \"e\",","39","            \"value\": \"e\",","40","          },","41","          Object {","42","            \"label\": \"f\",","43","            \"value\": \"f\",","44","          },","45","          Object {","46","            \"label\": \"h\",","47","            \"value\": \"h\",","48","          },","49","          Object {","50","            \"label\": \"i\",","51","            \"value\": \"i\",","52","          },","53","          Object {","54","            \"label\": \"k\",","55","            \"value\": \"k\",","56","          },","57","        ]","58","      }","59","      property=\"languages\"","60","      query={","61","        Object {","62","          \"languages\": Array [","63","            \"java\",","64","            \"g\",","65","          ],","66","        }","67","      }","68","    \/>","69","  }","70","  getFacetValueForOption={[Function]}","71","  header={","72","    <FilterHeader","73","      name=\"projects.facets.languages\"","74","    \/>","75","  }","76","  onQueryChange={[MockFunction]}","77","  options={","78","    Array [","79","      \"java\",","80","      \"cs\",","81","      \"g\",","82","      \"js\",","83","    ]","84","  }","85","  property=\"languages\"","86","  query={","87","    Object {","88","      \"languages\": Array [","89","        \"java\",","90","        \"g\",","91","      ],","92","    }","93","  }","94","  renderOption={[Function]}","95","  value={","96","    Array [","97","      \"java\",","98","      \"g\",","99","    ]","100","  }","101","\/>","102","`;","103",""]}]}},"1eb0636088b70e8d744074fc6bccee8561c27c1c":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/step\/PersistFileSourcesStep.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/step\/PersistFileSourcesStepTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/step\/PersistFileSourcesStep.java":[{"add":["167","        String revision = computeRevision(latestChange);"],"delete":["167","        String revision = computeRevision(previousDto, latestChange);","184","    private String computeRevision(FileSourceDto previousDto, @Nullable Changeset latestChange) {","185","      if (latestChange == null) {","186","        return previousDto.getRevision();","187","      }","188","      return latestChange.getRevision();","189","    }","190","","191","    @CheckForNull"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/step\/PersistFileSourcesStepTest.java":[{"add":["433","  @Test","434","  public void clear_revision_when_no_ChangeSet() {","435","    \/\/ Existing sources","436","    long past = 150000L;","437","    dbClient.fileSourceDao().insert(dbTester.getSession(), new FileSourceDto()","438","      .setProjectUuid(PROJECT_UUID)","439","      .setFileUuid(FILE_UUID)","440","      .setDataType(Type.SOURCE)","441","      .setSrcHash(\"137f72c3708c6bd0de00a0e5a69c699b\")","442","      .setLineHashes(\"137f72c3708c6bd0de00a0e5a69c699b\")","443","      .setDataHash(\"8e84c0d961cfe364e43833c4cc4ddef5\")","444","      \/\/ Revision is missing, update will be made","445","      .setSourceData(DbFileSources.Data.newBuilder()","446","        .addLines(DbFileSources.Line.newBuilder()","447","          .setLine(1)","448","          .setSource(\"line\")","449","          .build())","450","        .build())","451","      .setCreatedAt(past)","452","      .setUpdatedAt(past));","453","    dbTester.getSession().commit();","454","","455","    initBasicReport(1);","456","","457","    underTest.execute();","458","","459","    assertThat(dbTester.countRowsOfTable(\"file_sources\")).isEqualTo(1);","460","    FileSourceDto fileSourceDto = dbClient.fileSourceDao().selectSourceByFileUuid(session, FILE_UUID);","461","    assertThat(fileSourceDto.getCreatedAt()).isEqualTo(past);","462","    assertThat(fileSourceDto.getUpdatedAt()).isEqualTo(NOW);","463","    assertThat(fileSourceDto.getRevision()).isNull();","464","  }","465",""],"delete":[]}]}},"1904c96a996c1cba54e2fe7540447fcb031e00d3":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/projectQualityProfiles\/__tests__\/App-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/components\/App.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectQualityProfiles\/App.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/api\/quality-profiles.ts":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/projectQualityProfiles\/__tests__\/App-test.tsx":[{"add":["68","  mount(<App component={{ ...component, configuration: undefined }} \/>);","74","  mount(<App component={component} \/>);","84","  const wrapper = mount(<App component={component} \/>);"],"delete":["68","  mount(<App component={{ ...component, configuration: undefined }} customOrganizations={false} \/>);","74","  mount(<App component={component} customOrganizations={false} \/>);","75","  expect(searchQualityProfiles.mock.calls).toHaveLength(2);","76","  expect(searchQualityProfiles).toBeCalledWith({ organization: undefined });","77","  expect(searchQualityProfiles).toBeCalledWith({ organization: undefined, project: 'foo' });","78","});","79","","80","it('fetches profiles with organization', () => {","81","  searchQualityProfiles.mockClear();","82","  mount(<App component={component} customOrganizations={true} \/>);","92","  const wrapper = mount(<App component={component} customOrganizations={false} \/>);"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/components\/App.tsx":[{"add":["62","    Promise.all([getExporters(), this.fetchProfiles()]).then(","63","      responses => {","64","        if (this.mounted) {","65","          const [exporters, profilesResponse] = responses;","66","          this.setState({","67","            actions: profilesResponse.actions,","68","            exporters,","69","            profiles: sortProfiles(profilesResponse.profiles),","70","            loading: false","71","          });","72","        }","73","      },","74","      () => {","75","        if (this.mounted) {","76","          this.setState({ loading: false });","77","        }","79","    );"],"delete":["62","    Promise.all([getExporters(), this.fetchProfiles()]).then(responses => {","63","      if (this.mounted) {","64","        const [exporters, profilesResponse] = responses;","65","        this.setState({","66","          actions: profilesResponse.actions,","67","          exporters,","68","          profiles: sortProfiles(profilesResponse.profiles),","69","          loading: false","70","        });","72","    });"]}],"server\/sonar-web\/src\/main\/js\/apps\/projectQualityProfiles\/App.tsx":[{"add":["68","    const { key, organization } = this.props.component;","71","      searchQualityProfiles({ organization, project: key }).then(r => r.profiles)"],"delete":["36","  customOrganizations: boolean;","69","    const { component } = this.props;","70","    const organization = this.props.customOrganizations ? component.organization : undefined;","73","      searchQualityProfiles({ organization, project: component.key }).then(r => r.profiles)"]}],"server\/sonar-web\/src\/main\/js\/api\/quality-profiles.ts":[{"add":["99","  return getJSON('\/api\/qualityprofiles\/search', parameters).catch(throwGlobalError);"],"delete":["99","  return getJSON('\/api\/qualityprofiles\/search', parameters);"]}]}},"66def08e9bb337dc79d59279ea417a79366e2ad6":{"changes":{"server\/sonar-ce-task\/src\/main\/java\/org\/sonar\/ce\/task\/step\/ComputationStepExecutor.java":"MODIFY","server\/sonar-ce-task\/src\/test\/java\/org\/sonar\/ce\/task\/step\/ComputationStepExecutorTest.java":"MODIFY"},"diff":{"server\/sonar-ce-task\/src\/main\/java\/org\/sonar\/ce\/task\/step\/ComputationStepExecutor.java":[{"add":["28","import static java.lang.String.format;","68","      executeStep(stepProfiler, context, step);","69","    }","70","  }","71","","72","  private static void executeStep(Profiler stepProfiler, ComputationStep.Context context, ComputationStep step) {","73","    String status = \"FAILED\";","74","    stepProfiler.start();","75","    try {","77","      status = \"SUCCESS\";","78","    } finally {","79","      stepProfiler.addContext(\"status\", status);","109","      requireNonNull(value, () -> format(\"Statistic with key [%s] has null value\", key));"],"delete":["67","      stepProfiler.start();","98","      requireNonNull(value, () -> String.format(\"Statistic with key [%s] has null value\", key));"]}],"server\/sonar-ce-task\/src\/test\/java\/org\/sonar\/ce\/task\/step\/ComputationStepExecutorTest.java":[{"add":["93","      ChangeLogLevel logLevel2 = new ChangeLogLevel(step2.getClass(), LoggerLevel.INFO);","94","      ChangeLogLevel logLevel3 = new ChangeLogLevel(step3.getClass(), LoggerLevel.INFO)) {","99","      assertThat(infoLogs.get(0)).contains(\"Step One | foo=100 | bar=20 | status=SUCCESS | time=\");","100","      assertThat(infoLogs.get(1)).contains(\"Step Two | foo=50 | baz=10 | status=SUCCESS | time=\");","101","      assertThat(infoLogs.get(2)).contains(\"Step Three | status=SUCCESS | time=\");","102","    }","103","  }","104","","105","  @Test","106","  public void execute_logs_end_timing_and_statistics_for_each_ComputationStep_in_INFO_level_even_if_failed() {","107","    RuntimeException expected = new RuntimeException(\"faking step failing with RuntimeException\");","108","    ComputationStep step1 = new StepWithStatistics(\"Step One\", \"foo\", \"100\", \"bar\", \"20\");","109","    ComputationStep step2 = new StepWithStatistics(\"Step Two\", \"foo\", \"50\", \"baz\", \"10\");","110","    ComputationStep step3 = new StepWithStatistics(\"Step Three\", \"donut\", \"crash\") {","111","      @Override","112","      public void execute(Context context) {","113","        super.execute(context);","114","        throw expected;","115","      }","116","    } ;","117","","118","    try (ChangeLogLevel executor = new ChangeLogLevel(ComputationStepExecutor.class, LoggerLevel.INFO);","119","      ChangeLogLevel logLevel1 = new ChangeLogLevel(step1.getClass(), LoggerLevel.INFO);","120","      ChangeLogLevel logLevel2 = new ChangeLogLevel(step2.getClass(), LoggerLevel.INFO);","121","      ChangeLogLevel logLevel3 = new ChangeLogLevel(step3.getClass(), LoggerLevel.INFO)) {","122","","123","      try {","124","        new ComputationStepExecutor(mockComputationSteps(step1, step2, step3)).execute();","125","        fail(\"a RuntimeException should have been thrown\");","126","      } catch (RuntimeException e) {","127","        List<String> infoLogs = logTester.logs(LoggerLevel.INFO);","128","        assertThat(infoLogs).hasSize(3);","129","        assertThat(infoLogs.get(0)).contains(\"Step One | foo=100 | bar=20 | status=SUCCESS | time=\");","130","        assertThat(infoLogs.get(1)).contains(\"Step Two | foo=50 | baz=10 | status=SUCCESS | time=\");","131","        assertThat(infoLogs.get(2)).contains(\"Step Three | donut=crash | status=FAILED | time=\");","132","      }"],"delete":["93","      ChangeLogLevel logLevel2 = new ChangeLogLevel(step1.getClass(), LoggerLevel.INFO);","94","      ChangeLogLevel logLevel3 = new ChangeLogLevel(step2.getClass(), LoggerLevel.INFO)) {","99","      assertThat(infoLogs.get(0)).contains(\"Step One | foo=100 | bar=20 | time=\");","100","      assertThat(infoLogs.get(1)).contains(\"Step Two | foo=50 | baz=10 | time=\");","101","      assertThat(infoLogs.get(2)).contains(\"Step Three | time=\");"]}]}},"f5380b151910ed0cf86bc01fa9cbfccdd64a2adf":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/index\/IssueIndex.java":"MODIFY","server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/securityreport\/ws\/ShowActionTest\/empty.json":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/securityreport\/ws\/ShowActionTest.java":"MODIFY","server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/securityreport\/ws\/ShowActionTest\/sonarsourceSecurityWithCwe.json":"MODIFY","server\/sonar-server\/src\/main\/resources\/org\/sonar\/server\/securityreport\/ws\/show-example.json":"MODIFY","server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/securityreport\/ws\/ShowActionTest\/sansWithCwe.json":"MODIFY","server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/securityreport\/ws\/ShowActionTest\/owaspNoCwe.json":"MODIFY","server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/securityreport\/ws\/ShowActionTest\/sonarsourceSecurityNoCwe.json":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/index\/IssueIndex.java":[{"add":["34","import java.util.Set;","91","import static java.util.stream.Collectors.toList;","154","import static org.sonar.server.security.SecurityStandardHelper.SANS_TOP_25_CWE_MAPPING;","158","import static org.sonar.server.security.SecurityStandardHelper.SONARSOURCE_CWE_MAPPING;","192","  private static final String AGG_VULNERABILITIES = \"vulnerabilities\";","193","  private static final String AGG_SEVERITIES = \"severities\";","194","  private static final String AGG_OPEN_SECURITY_HOTSPOTS = \"openSecurityHotspots\";","195","  private static final String AGG_TO_REVIEW_SECURITY_HOTSPOTS = \"toReviewSecurityHotspots\";","196","  private static final String AGG_WONT_FIX_SECURITY_HOTSPOTS = \"wontFixSecurityHotspots\";","197","  private static final String AGG_CWES = \"cwes\";","198","  private static final BoolQueryBuilder NON_RESOLVED_VULNERABILITIES_FILTER = boolQuery()","199","    .filter(termQuery(FIELD_ISSUE_TYPE, VULNERABILITY.name()))","200","    .mustNot(existsQuery(FIELD_ISSUE_RESOLUTION));","201","  private static final BoolQueryBuilder NON_RESOLVED_HOTSTPOS_FILTER = boolQuery()","202","    .filter(termQuery(FIELD_ISSUE_TYPE, SECURITY_HOTSPOT.name()))","203","    .mustNot(existsQuery(FIELD_ISSUE_RESOLUTION));","204","  private static final BoolQueryBuilder TO_REVIEW_HOTSPOTS_FILTER = boolQuery()","205","    .filter(termQuery(FIELD_ISSUE_TYPE, SECURITY_HOTSPOT.name()))","206","    .filter(termQuery(FIELD_ISSUE_STATUS, Issue.STATUS_RESOLVED))","207","    .filter(termQuery(FIELD_ISSUE_RESOLUTION, Issue.RESOLUTION_FIXED));","208","  private static final BoolQueryBuilder WONT_FIX_HOTSPOTS_FILTER = boolQuery()","209","    .filter(termQuery(FIELD_ISSUE_TYPE, SECURITY_HOTSPOT.name()))","210","    .filter(termQuery(FIELD_ISSUE_STATUS, Issue.STATUS_RESOLVED))","211","    .filter(termQuery(FIELD_ISSUE_RESOLUTION, Issue.RESOLUTION_WONT_FIX));","278","  private static final String AGG_COUNT = \"count\";","386","      query.rules().stream().map(RuleDefinitionDto::getId).collect(toList())));","826","                AggregationBuilders.count(AGG_COUNT).field(FIELD_ISSUE_KEY))","835","          long count = ((InternalValueCount) branchBucket.getAggregations().get(AGG_COUNT)).getValue();","874","    Stream.of(SANS_TOP_25_INSECURE_INTERACTION, SANS_TOP_25_RISKY_RESOURCE, SANS_TOP_25_POROUS_DEFENSES)","875","      .forEach(sansCategory -> request.addAggregation(createAggregation(FIELD_ISSUE_SANS_TOP_25, sansCategory, includeCwe, Optional.of(SANS_TOP_25_CWE_MAPPING))));","881","    SONARSOURCE_CWE_MAPPING.keySet()","882","      .forEach(","883","        sonarsourceCategory -> request.addAggregation(createAggregation(FIELD_ISSUE_SONARSOURCE_SECURITY, sonarsourceCategory, includeCwe, Optional.of(SONARSOURCE_CWE_MAPPING))));","889","    Stream.concat(IntStream.rangeClosed(1, 10).mapToObj(i -> \"a\" + i), Stream.of(UNKNOWN_STANDARD))","890","      .forEach(owaspCategory -> request.addAggregation(createAggregation(FIELD_ISSUE_OWASP_TOP_10, owaspCategory, includeCwe, Optional.empty())));","894","  private static AggregationBuilder createAggregation(String categoryField, String category, boolean includeCwe, Optional<Map<String, Set<String>>> categoryToCwesMap) {","895","    return addSecurityReportSubAggregations(AggregationBuilders","896","      .filter(category, boolQuery()","897","        .filter(termQuery(categoryField, category))),","898","      includeCwe, categoryToCwesMap.map(m -> m.get(category)));","899","  }","900","","911","      Stream<StringTerms.Bucket> stream = ((StringTerms) categoryBucket.getAggregations().get(AGG_CWES)).getBuckets().stream();","912","      children = stream.map(cweBucket -> processSecurityReportCategorySearchResults(cweBucket, cweBucket.getKeyAsString(), null)).collect(toList());","920","    List<StringTerms.Bucket> severityBuckets = ((StringTerms) ((InternalFilter) categoryBucket.getAggregations().get(AGG_VULNERABILITIES)).getAggregations().get(AGG_SEVERITIES))","922","    long vulnerabilities = severityBuckets.stream().mapToLong(b -> ((InternalValueCount) b.getAggregations().get(AGG_COUNT)).getValue()).sum();","925","      .filter(b -> ((InternalValueCount) b.getAggregations().get(AGG_COUNT)).getValue() != 0)","929","    long openSecurityHotspots = ((InternalValueCount) ((InternalFilter) categoryBucket.getAggregations().get(AGG_OPEN_SECURITY_HOTSPOTS)).getAggregations().get(AGG_COUNT))","931","    long toReviewSecurityHotspots = ((InternalValueCount) ((InternalFilter) categoryBucket.getAggregations().get(AGG_TO_REVIEW_SECURITY_HOTSPOTS)).getAggregations().get(AGG_COUNT))","933","    long wontFixSecurityHotspots = ((InternalValueCount) ((InternalFilter) categoryBucket.getAggregations().get(AGG_WONT_FIX_SECURITY_HOTSPOTS)).getAggregations().get(AGG_COUNT))","940","  private static AggregationBuilder addSecurityReportSubAggregations(AggregationBuilder categoriesAggs, boolean includeCwe, Optional<Set<String>> cwesInCategory) {","943","      final TermsAggregationBuilder cwesAgg = AggregationBuilders.terms(AGG_CWES)","944","        .field(FIELD_ISSUE_CWE)","945","        \/\/ 100 should be enough to display all CWEs. If not, the UI will be broken anyway","946","        .size(MAX_FACET_SIZE);","947","      cwesInCategory.ifPresent(set -> {","948","        cwesAgg.includeExclude(new IncludeExclude(set.toArray(new String[0]), new String[0]));","949","      });","951","        .subAggregation(addSecurityReportIssueCountAggregations(cwesAgg));","959","        AggregationBuilders.filter(AGG_VULNERABILITIES, NON_RESOLVED_VULNERABILITIES_FILTER)","961","            AggregationBuilders.terms(AGG_SEVERITIES).field(FIELD_ISSUE_SEVERITY)","963","                AggregationBuilders.count(AGG_COUNT).field(FIELD_ISSUE_KEY))))","964","      .subAggregation(AggregationBuilders.filter(AGG_OPEN_SECURITY_HOTSPOTS, NON_RESOLVED_HOTSTPOS_FILTER)","966","          AggregationBuilders.count(AGG_COUNT).field(FIELD_ISSUE_KEY)))","967","      .subAggregation(AggregationBuilders.filter(AGG_TO_REVIEW_SECURITY_HOTSPOTS, TO_REVIEW_HOTSPOTS_FILTER)","969","          AggregationBuilders.count(AGG_COUNT).field(FIELD_ISSUE_KEY)))","970","      .subAggregation(AggregationBuilders.filter(AGG_WONT_FIX_SECURITY_HOTSPOTS, WONT_FIX_HOTSPOTS_FILTER)","972","          AggregationBuilders.count(AGG_COUNT).field(FIELD_ISSUE_KEY)));","991","          .should(NON_RESOLVED_VULNERABILITIES_FILTER)","992","          .should(NON_RESOLVED_HOTSTPOS_FILTER)","993","          .should(TO_REVIEW_HOTSPOTS_FILTER)","994","          .should(WONT_FIX_HOTSPOTS_FILTER)","995","          .minimumShouldMatch(1))"],"delete":["34","import java.util.stream.Collectors;","84","import org.sonar.server.security.SecurityStandardHelper;","256","  private static final String COUNT = \"count\";","364","      query.rules().stream().map(RuleDefinitionDto::getId).collect(Collectors.toList())));","804","                AggregationBuilders.count(COUNT).field(FIELD_ISSUE_KEY))","813","          long count = ((InternalValueCount) branchBucket.getAggregations().get(COUNT)).getValue();","852","    Stream.of(SANS_TOP_25_INSECURE_INTERACTION, SANS_TOP_25_RISKY_RESOURCE, SANS_TOP_25_POROUS_DEFENSES).forEach(sansCategory -> {","853","      AggregationBuilder sansCategoryAggs = AggregationBuilders","854","        .filter(sansCategory, boolQuery()","855","          .filter(termQuery(FIELD_ISSUE_SANS_TOP_25, sansCategory)));","856","      request.addAggregation(addSecurityReportSubAggregations(sansCategoryAggs, includeCwe));","857","    });","863","    SecurityStandardHelper.SONARSOURCE_CWE_MAPPING.keySet().forEach(sansCategory -> {","864","      AggregationBuilder sansCategoryAggs = AggregationBuilders","865","        .filter(sansCategory, boolQuery()","866","          .filter(termQuery(FIELD_ISSUE_SONARSOURCE_SECURITY, sansCategory)));","867","      request.addAggregation(addSecurityReportSubAggregations(sansCategoryAggs, includeCwe));","868","    });","874","    Stream.concat(IntStream.rangeClosed(1, 10).mapToObj(i -> \"a\" + i), Stream.of(UNKNOWN_STANDARD)).forEach(owaspCategory -> {","875","      AggregationBuilder owaspCategoryAggs = AggregationBuilders","876","        .filter(owaspCategory, boolQuery()","877","          .filter(termQuery(FIELD_ISSUE_OWASP_TOP_10, owaspCategory)));","878","      request.addAggregation(addSecurityReportSubAggregations(owaspCategoryAggs, includeCwe));","879","    });","892","","894","      ((StringTerms) categoryBucket.getAggregations().get(\"cwe\")).getBuckets()","895","        .forEach(cweBucket -> children.add(processSecurityReportCategorySearchResults(cweBucket, cweBucket.getKeyAsString(), null)));","903","    List<StringTerms.Bucket> severityBuckets = ((StringTerms) ((InternalFilter) categoryBucket.getAggregations().get(\"vulnerabilities\")).getAggregations().get(\"severity\"))","905","    long vulnerabilities = severityBuckets.stream().mapToLong(b -> ((InternalValueCount) b.getAggregations().get(COUNT)).getValue()).sum();","908","      .filter(b -> ((InternalValueCount) b.getAggregations().get(COUNT)).getValue() != 0)","912","    long openSecurityHotspots = ((InternalValueCount) ((InternalFilter) categoryBucket.getAggregations().get(\"openSecurityHotspots\")).getAggregations().get(COUNT))","914","    long toReviewSecurityHotspots = ((InternalValueCount) ((InternalFilter) categoryBucket.getAggregations().get(\"toReviewSecurityHotspots\")).getAggregations().get(COUNT))","916","    long wontFixSecurityHotspots = ((InternalValueCount) ((InternalFilter) categoryBucket.getAggregations().get(\"wontFixSecurityHotspots\")).getAggregations().get(COUNT))","923","  private static AggregationBuilder addSecurityReportSubAggregations(AggregationBuilder categoriesAggs, boolean includeCwe) {","927","        .subAggregation(addSecurityReportIssueCountAggregations(AggregationBuilders.terms(\"cwe\").field(FIELD_ISSUE_CWE)));","935","        AggregationBuilders.filter(\"vulnerabilities\", boolQuery()","936","          .filter(termQuery(FIELD_ISSUE_TYPE, VULNERABILITY.name()))","937","          .mustNot(existsQuery(FIELD_ISSUE_RESOLUTION)))","939","            AggregationBuilders.terms(\"severity\").field(FIELD_ISSUE_SEVERITY)","941","                AggregationBuilders.count(COUNT).field(FIELD_ISSUE_KEY))))","942","      .subAggregation(AggregationBuilders.filter(\"openSecurityHotspots\", boolQuery()","943","        .filter(termQuery(FIELD_ISSUE_TYPE, SECURITY_HOTSPOT.name()))","944","        .mustNot(existsQuery(FIELD_ISSUE_RESOLUTION)))","946","          AggregationBuilders.count(COUNT).field(FIELD_ISSUE_KEY)))","947","      .subAggregation(AggregationBuilders.filter(\"toReviewSecurityHotspots\", boolQuery()","948","        .filter(termQuery(FIELD_ISSUE_TYPE, SECURITY_HOTSPOT.name()))","949","        .filter(termQuery(FIELD_ISSUE_STATUS, Issue.STATUS_RESOLVED))","950","        .filter(termQuery(FIELD_ISSUE_RESOLUTION, Issue.RESOLUTION_FIXED)))","952","          AggregationBuilders.count(COUNT).field(FIELD_ISSUE_KEY)))","953","      .subAggregation(AggregationBuilders.filter(\"wontFixSecurityHotspots\", boolQuery()","954","        .filter(termQuery(FIELD_ISSUE_TYPE, SECURITY_HOTSPOT.name()))","955","        .filter(termQuery(FIELD_ISSUE_STATUS, Issue.STATUS_RESOLVED))","956","        .filter(termQuery(FIELD_ISSUE_RESOLUTION, Issue.RESOLUTION_WONT_FIX)))","958","          AggregationBuilders.count(COUNT).field(FIELD_ISSUE_KEY)));","977","          .filter(termsQuery(FIELD_ISSUE_TYPE, SECURITY_HOTSPOT.name(), VULNERABILITY.name()))","978","          .mustNot(termQuery(FIELD_ISSUE_STATUS, Issue.STATUS_CLOSED)))"]}],"server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/securityreport\/ws\/ShowActionTest\/empty.json":[{"add":["109","      \"activeRules\": 1,","110","      \"totalRules\": 2"],"delete":["109","      \"activeRules\": 0,","110","      \"totalRules\": 1"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/securityreport\/ws\/ShowActionTest.java":[{"add":["92","  private RuleDefinitionDto rule5;","102","    rule1 = newRule(newHashSet(\"owaspTop10:a2\", \"cwe:123\", \"cwe:89\"), RuleType.SECURITY_HOTSPOT);","104","    rule2 = newRule(newHashSet(\"owaspTop10:a1\", \"cwe:22\", \"cwe:190\"), RuleType.SECURITY_HOTSPOT);","106","    rule3 = newRule(newHashSet(\"owaspTop10:a3\", \"cwe:759\", \"cwe:000\"), RuleType.SECURITY_HOTSPOT);","107","    \/\/ cwe with unknown, not activated","108","    rule4 = newRule(newHashSet(\"cwe:999\"), RuleType.SECURITY_HOTSPOT);","109","    \/\/ TopSans25 insecure","110","    rule5 = newRule(newHashSet(\"cwe:78\"), RuleType.VULNERABILITY);","113","    db.qualityProfiles().activateRule(qualityProfile, rule5);","248","    IssueDto issue4 = newIssue(rule5, project, file)","252","      .setType(RuleType.VULNERABILITY);","293","    IssueDto issue4 = newIssue(rule5, project1Branch1, fileOnProject1Branch1)","297","      .setType(RuleType.VULNERABILITY);","384","  private RuleDefinitionDto newRule(Set<String> standards, RuleType type) {","386","      .setType(type)","388","      .setSecurityStandards(standards);"],"delete":["101","    rule1 = newRule(newHashSet(\"owaspTop10:a2\", \"cwe:123\", \"cwe:89\"));","103","    rule2 = newRule(newHashSet(\"owaspTop10:a1\", \"cwe:22\", \"cwe:190\"));","105","    rule3 = newRule(newHashSet(\"owaspTop10:a3\", \"cwe:759\", \"cwe:000\"));","106","    \/\/ cwe with unknown","107","    rule4 = newRule(newHashSet(\"cwe:999\"));","244","    IssueDto issue4 = newIssue(rule1, project, file)","248","      .setType(RuleType.SECURITY_HOTSPOT);","289","    IssueDto issue4 = newIssue(rule1, project1Branch1, fileOnProject1Branch1)","293","      .setType(RuleType.SECURITY_HOTSPOT);","380","  private RuleDefinitionDto newRule(Set tags) {","382","      .setType(RuleType.SECURITY_HOTSPOT)","384","      .setSecurityStandards(tags);"]}],"server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/securityreport\/ws\/ShowActionTest\/sonarsourceSecurityWithCwe.json":[{"add":["201","      \"activeRules\": 1,","202","      \"totalRules\": 1"],"delete":["139","        },","140","        {","141","          \"cwe\": \"123\",","142","          \"vulnerabilities\": 1,","143","          \"vulnerabilityRating\": 3,","144","          \"toReviewSecurityHotspots\": 1,","145","          \"openSecurityHotspots\": 1,","146","          \"wontFixSecurityHotspots\": 1,","147","          \"activeRules\": 1,","148","          \"totalRules\": 1","211","      \"activeRules\": 0,","212","      \"totalRules\": 0"]}],"server\/sonar-server\/src\/main\/resources\/org\/sonar\/server\/securityreport\/ws\/show-example.json":[{"add":["131","      \"activeRules\": 1,","132","      \"totalRules\": 2"],"delete":["131","      \"activeRules\": 0,","132","      \"totalRules\": 1"]}],"server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/securityreport\/ws\/ShowActionTest\/sansWithCwe.json":[{"add":["28","      \"wontFixSecurityHotspots\": 0,","36","          \"wontFixSecurityHotspots\": 0,","41","      \"activeRules\": 2,","42","      \"totalRules\": 2"],"delete":["28","      \"wontFixSecurityHotspots\": 1,","36","          \"wontFixSecurityHotspots\": 1,","37","          \"activeRules\": 1,","38","          \"totalRules\": 1","39","        },","40","        {","41","          \"cwe\": \"123\",","42","          \"vulnerabilities\": 1,","43","          \"vulnerabilityRating\": 3,","44","          \"toReviewSecurityHotspots\": 1,","45","          \"openSecurityHotspots\": 1,","46","          \"wontFixSecurityHotspots\": 1,","51","      \"activeRules\": 1,","52","      \"totalRules\": 1"]}],"server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/securityreport\/ws\/ShowActionTest\/owaspNoCwe.json":[{"add":["110","      \"activeRules\": 1,","111","      \"totalRules\": 2"],"delete":["110","      \"activeRules\": 0,","111","      \"totalRules\": 1"]}],"server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/securityreport\/ws\/ShowActionTest\/sonarsourceSecurityNoCwe.json":[{"add":["190","      \"activeRules\": 1,","191","      \"totalRules\": 1"],"delete":["190","      \"activeRules\": 0,","191","      \"totalRules\": 0"]}]}},"b658f0cefa459ef82072c080f0acf92b438fca8e":{"changes":{"sonar-db\/src\/test\/java\/org\/sonar\/db\/purge\/PurgeDaoTest.java":"MODIFY"},"diff":{"sonar-db\/src\/test\/java\/org\/sonar\/db\/purge\/PurgeDaoTest.java":[{"add":["21","import java.util.ArrayList;","25","import org.mockito.ArgumentCaptor;","182","","183","    Class<ArrayList<String>> listClass = (Class<ArrayList<String>>)(Class)ArrayList.class;","184","    ArgumentCaptor<ArrayList<String>> argument = ArgumentCaptor.forClass(listClass);","185","","186","    verify(purgeListener).onIssuesRemoval(argument.capture());","187","    assertThat(argument.getValue()).containsOnly(\"ISSUE-1\", \"ISSUE-2\");"],"delete":["35","import static java.util.Arrays.asList;","181","    verify(purgeListener).onIssuesRemoval(asList(\"ISSUE-1\", \"ISSUE-2\"));"]}]}},"1c870c915125912fec3569cf283b58a2a35281a5":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/__snapshots__\/CrossComponentSourceViewerWrapper-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/api\/issues.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/CrossComponentSourceViewerWrapper-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/CrossComponentSourceViewerWrapper.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/__snapshots__\/CrossComponentSourceViewerWrapper-test.tsx.snap":[{"add":["2","exports[`Should handle no access rights 1`] = `","3","<Alert","4","  className=\"spacer-top\"","5","  variant=\"warning\"","6",">","7","  code_viewer.no_source_code_displayed_due_to_security","8","<\/Alert>","9","`;","10",""],"delete":[]}],"server\/sonar-web\/src\/main\/js\/api\/issues.ts":[{"add":["181","  });"],"delete":["181","  }, throwGlobalError);"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/CrossComponentSourceViewerWrapper-test.tsx":[{"add":["68","it('Should handle no access rights', async () => {","69","  (getIssueFlowSnippets as jest.Mock).mockRejectedValueOnce({ status: 403 });","70","","71","  const wrapper = shallowRender();","72","  await waitAndUpdate(wrapper);","73","","74","  expect(wrapper.state().notAccessible).toBe(true);","75","  expect(wrapper).toMatchSnapshot();","76","});","77",""],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/CrossComponentSourceViewerWrapper.tsx":[{"add":["20","import { Alert } from 'sonar-ui-common\/components\/ui\/Alert';","22","import { translate } from 'sonar-ui-common\/helpers\/l10n';","25","import throwGlobalError from '..\/..\/..\/app\/utils\/throwGlobalError';","64","  notAccessible: boolean;","72","    loading: true,","73","    notAccessible: false","129","      (response: Response) => {","130","        if (response.status !== 403) {","131","          throwGlobalError(response);","132","        }","134","          this.setState({ loading: false, notAccessible: response.status === 403 });","207","    const { loading, notAccessible } = this.state;","217","    if (notAccessible) {","218","      return (","219","        <Alert className=\"spacer-top\" variant=\"warning\">","220","          {translate('code_viewer.no_source_code_displayed_due_to_security')}","221","        <\/Alert>","222","      );","223","    }","224",""],"delete":["68","    loading: true","124","      () => {","126","          this.setState({ loading: false });","199","    const { loading } = this.state;"]}]}},"437bf3bf7259b5f6f1f914c3fc0dcd2c2cc0b6df":{"changes":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/batch\/scm\/DefaultBlameOutput.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/batch\/scm\/ScmSensor.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/batch\/scan\/ProjectScanContainer.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/batch\/report\/ReportPublisher.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/batch\/scm\/DefaultBlameOutput.java":[{"add":["42","import org.sonar.scanner.protocol.output.ScannerReportWriter;","136","  public void finish(boolean success) {","138","    if (success && !allFilesToBlame.isEmpty()) {"],"delete":["41","import org.sonar.scanner.protocol.output.ScannerReportWriter;","136","  public void finish() {","138","    if (!allFilesToBlame.isEmpty()) {"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/batch\/scm\/ScmSensor.java":[{"add":["83","      } catch (Exception e) {","84","        output.finish(false);","85","        throw e;","87","      output.finish(true);"],"delete":["83","      } finally {","84","        output.finish();"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/batch\/scan\/ProjectScanContainer.java":[{"add":["110","    ProjectLock lock = getComponentByType(ProjectLock.class);"],"delete":["101","  private ProjectLock lock;","111","    lock = getComponentByType(ProjectLock.class);","124","  @Override","125","  public ComponentContainer startComponents() {","126","    try {","127","      return super.startComponents();","128","    } catch (Exception e) {","129","      \/\/ ensure that lock is released","130","      if (lock != null) {","131","        lock.stop();","132","      }","133","      throw e;","134","    }","135","  }","136",""]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/batch\/report\/ReportPublisher.java":[{"add":["104","    if (!shouldKeepReport()) {","122","      if (shouldKeepReport()) {","123","        LOG.info(\"Analysis report generated in \" + reportDir);","124","      }","132","  private boolean shouldKeepReport() {","133","    return settings.getBoolean(KEEP_REPORT_PROP_KEY) || settings.getBoolean(VERBOSE_KEY);","134","  }","135",""],"delete":["104","    if (!settings.getBoolean(KEEP_REPORT_PROP_KEY) && !settings.getBoolean(VERBOSE_KEY)) {","106","    } else {","107","      LOG.info(\"Analysis report generated in \" + reportDir);"]}]}},"b37fcd78ff36d2f10d97632f494d08c0f10f3114":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/ws\/SearchAction.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/ws\/SearchAction.java":[{"add":["167","      .setDescription(\"Comma-separated list of coding rule keys. Format is &lt;repository&gt;:&lt;rule&gt;\")"],"delete":["167","      .setDescription(\"Comma-separated list of coding rule keys. Format is <repository>:<rule>\")"]}]}}}