{"e5a7b62cb7ceef25cf656d9423e4a4b46fec8afa":{"changes":{"sonar-batch\/src\/test\/java\/org\/sonar\/batch\/util\/ProgressReportTest.java":"ADD","sonar-batch\/src\/main\/java\/org\/sonar\/batch\/util\/ProgressReport.java":"MODIFY"},"diff":{"sonar-batch\/src\/test\/java\/org\/sonar\/batch\/util\/ProgressReportTest.java":[{"add":[],"delete":[]}],"sonar-batch\/src\/main\/java\/org\/sonar\/batch\/util\/ProgressReport.java":[{"add":["36","    thread.setDaemon(true);","46","        break;"],"delete":["45","        thread.interrupt();"]}]}},"47fe6783ed4a60118230ae81d2e95619e7be2080":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ce\/ws\/ComponentAction.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/ce\/ws\/ComponentActionTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ce\/ws\/ComponentAction.java":[{"add":["32","import org.sonar.db.component.ComponentDto;","33","import org.sonar.server.component.ComponentFinder;","46","  private final ComponentFinder componentFinder;","48","  public ComponentAction(UserSession userSession, DbClient dbClient, TaskFormatter formatter, ComponentFinder componentFinder) {","52","    this.componentFinder = componentFinder;","74","      ComponentDto component = componentFinder.getByUuid(dbSession, wsRequest.mandatoryParam(PARAM_COMPONENT_UUID));","75","      userSession.checkComponentUuidPermission(UserRole.USER, component.uuid());","76","      List<CeQueueDto> queueDtos = dbClient.ceQueueDao().selectByComponentUuid(dbSession, component.uuid());","78","        .setComponentUuid(component.uuid())"],"delete":["45","  public ComponentAction(UserSession userSession, DbClient dbClient, TaskFormatter formatter) {","68","    String componentUuid = wsRequest.mandatoryParam(PARAM_COMPONENT_UUID);","69","    userSession.checkComponentUuidPermission(UserRole.USER, componentUuid);","70","","73","      List<CeQueueDto> queueDtos = dbClient.ceQueueDao().selectByComponentUuid(dbSession, componentUuid);","75","        .setComponentUuid(componentUuid)"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/ce\/ws\/ComponentActionTest.java":[{"add":["23","import org.junit.rules.ExpectedException;","31","import org.sonar.db.component.ComponentDbTester;","32","import org.sonar.server.component.ComponentFinder;","33","import org.sonar.server.exceptions.NotFoundException;","41","import static org.sonar.db.component.ComponentTesting.newProjectDto;","46","  public ExpectedException expectedException = ExpectedException.none();","47","","48","  @Rule","54","  ComponentDbTester componentDbTester = new ComponentDbTester(dbTester);","56","  ComponentAction underTest = new ComponentAction(userSession, dbTester.getDbClient(), formatter, new ComponentFinder(dbTester.getDbClient()));","61","    componentDbTester.insertComponent(newProjectDto(\"PROJECT_1\"));","76","    componentDbTester.insertComponent(newProjectDto(\"PROJECT_1\"));","100","    componentDbTester.insertComponent(newProjectDto(\"PROJECT_1\"));","120","  @Test","121","  public void fail_with_404_when_component_does_not_exist() throws Exception {","122","    userSession.addComponentUuidPermission(UserRole.USER, \"PROJECT_1\", \"PROJECT_1\");","123","","124","    expectedException.expect(NotFoundException.class);","125","    tester.newRequest()","126","      .setParam(\"componentId\", \"UNKNOWN\")","127","      .setMediaType(MediaTypes.PROTOBUF)","128","      .execute();","129","  }","130",""],"delete":["47","  ComponentAction underTest = new ComponentAction(userSession, dbTester.getDbClient(), formatter);"]}]}},"af61ada2bb75d85926229dfd7d23596057c325f0":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/main\/Coverage.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/main\/Coverage.js":[{"add":["119","    const newCoverageValue = newCoverageMeasure ?","120","        getPeriodValue(newCoverageMeasure, leakPeriod.index) : null;","121","    const newLinesToCoverValue = newLinesToCover ?","122","        getPeriodValue(newLinesToCover, leakPeriod.index) : null;","123","","124","    const formattedValue = newCoverageValue != null ? (","131","              {formatMeasure(newCoverageValue, 'PERCENT')}","139","    const label = newLinesToCoverValue != null ? (","149","              {formatMeasure(newLinesToCoverValue, 'SHORT_INT')}","163","            {formattedValue}"],"delete":["119","    const value = newCoverageMeasure ? (","126","              {formatMeasure(getPeriodValue(newCoverageMeasure, leakPeriod.index), 'PERCENT')}","134","    const label = newLinesToCover ? (","144","              {formatMeasure(getPeriodValue(newLinesToCover, leakPeriod.index), 'SHORT_INT')}","158","            {value}"]}]}},"b6b8ad459a289ad305c87ec525bfff8cda7a7ea4":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/platform\/ws\/InfoActionTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/ws\/InfoAction.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/platform\/ws\/InfoActionTest.java":[{"add":["31","import org.sonar.server.ws.TestResponse;","32","import org.sonar.server.ws.WsActionTester;","46","","47","  WsActionTester ws = new WsActionTester(new InfoAction(userSessionRule, processSystemInfoClient, monitor1, monitor2));","48","","49","  @Test","50","  public void test_definition() throws Exception {","51","    assertThat(ws.getDef().key()).isEqualTo(\"info\");","52","    assertThat(ws.getDef().isInternal()).isTrue();","53","    assertThat(ws.getDef().responseExampleAsString()).isNotEmpty();","54","    assertThat(ws.getDef().params()).isEmpty();","55","  }","61","    ws.newRequest().execute();","78","    TestResponse response = ws.newRequest().execute();","80","    assertThat(response.getInput()).isEqualTo(\"{\\\"Monitor One\\\":{\\\"foo\\\":\\\"bar\\\"},\\\"Monitor Two\\\":{\\\"one\\\":1,\\\"two\\\":2}}\");"],"delete":["26","import org.sonar.api.server.ws.Request;","27","import org.sonar.api.server.ws.Response;","28","import org.sonar.api.server.ws.internal.SimpleGetRequest;","34","import org.sonar.server.ws.WsTester;","48","  InfoAction underTest = new InfoAction(userSessionRule, processSystemInfoClient, monitor1, monitor2);","54","    underTest.handle(mock(Request.class), mock(Response.class));","71","    WsTester.TestResponse response = new WsTester.TestResponse();","72","    underTest.handle(new SimpleGetRequest(), response);","74","    assertThat(response.outputAsString()).isEqualTo(\"{\\\"Monitor One\\\":{\\\"foo\\\":\\\"bar\\\"},\\\"Monitor Two\\\":{\\\"one\\\":1,\\\"two\\\":2}}\");"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/ws\/InfoAction.java":[{"add":["52","      .setDescription(\"Detailed information about system configuration.<br\/>\" +","53","        \"Requires 'Administer' permissions.<br\/>\" +","54","        \"Since 5.5, this web service becomes internal in order to more easily update result.\")","56","      .setInternal(true)"],"delete":["52","      .setDescription(\"Detailed information about system configuration.\" +","53","        \"<br\/>\" +","54","        \"Requires user to be authenticated with Administer System permissions.\")"]}]}},"729d76da74339dd267cfad768e7b72ec805e6c51":{"changes":{"server\/sonar-web\/src\/main\/js\/helpers\/__tests__\/measures-test.js":"MODIFY","server\/sonar-web\/src\/main\/js\/helpers\/measures.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/helpers\/__tests__\/measures-test.js":[{"add":["5","","7","  var HOURS_IN_DAY = 8,","8","      ONE_MINUTE = 1,","9","      ONE_HOUR = ONE_MINUTE * 60,","10","      ONE_DAY = HOURS_IN_DAY * ONE_HOUR;","96","      expect(formatMeasure(40 * ONE_MINUTE, 'SHORT_WORK_DUR')).to.equal('40min');","97","      expect(formatMeasure(58 * ONE_MINUTE, 'SHORT_WORK_DUR')).to.equal('1h');","100","      expect(formatMeasure(ONE_HOUR + 55 * ONE_MINUTE, 'SHORT_WORK_DUR')).to.equal('2h');","101","      expect(formatMeasure(3 * ONE_DAY + 6 * ONE_HOUR, 'SHORT_WORK_DUR')).to.equal('4d');","102","      expect(formatMeasure(7 * ONE_HOUR + 59 * ONE_MINUTE, 'SHORT_WORK_DUR')).to.equal('1d');","209","      expect(formatMeasureVariation(30 * ONE_MINUTE, 'SHORT_WORK_DUR')).to.equal('+30min');","210","      expect(formatMeasureVariation(58 * ONE_MINUTE, 'SHORT_WORK_DUR')).to.equal('+1h');","213","      expect(formatMeasureVariation(ONE_HOUR + 55 * ONE_MINUTE, 'SHORT_WORK_DUR')).to.equal('+2h');","214","      expect(formatMeasureVariation(3 * ONE_DAY + 6 * ONE_HOUR, 'SHORT_WORK_DUR')).to.equal('+4d');","215","      expect(formatMeasureVariation(7 * ONE_HOUR + 59 * ONE_MINUTE, 'SHORT_WORK_DUR')).to.equal('+1d');"],"delete":["0","\/*","1"," * SonarQube","2"," * Copyright (C) 2009-2016 SonarSource SA","3"," * mailto:contact AT sonarsource DOT com","4"," *","5"," * This program is free software; you can redistribute it and\/or","6"," * modify it under the terms of the GNU Lesser General Public","7"," * License as published by the Free Software Foundation; either","8"," * version 3 of the License, or (at your option) any later version.","9"," *","10"," * This program is distributed in the hope that it will be useful,","11"," * but WITHOUT ANY WARRANTY; without even the implied warranty of","12"," * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU","13"," * Lesser General Public License for more details.","14"," *","15"," * You should have received a copy of the GNU Lesser General Public License","16"," * along with this program; if not, write to the Free Software Foundation,","17"," * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.","18"," *\/","25","  const HOURS_IN_DAY = 8;","26","  const ONE_MINUTE = 1;","27","  const ONE_HOUR = ONE_MINUTE * 60;","28","  const ONE_DAY = HOURS_IN_DAY * ONE_HOUR;","113","      expect(formatMeasure(40 * ONE_MINUTE, 'SHORT_WORK_DUR')).to.equal('40min');"]}],"server\/sonar-web\/src\/main\/js\/helpers\/measures.js":[{"add":["268","function shouldDisplayDaysInShortFormat(days) {","269","  return days > 0.9;","270","}","271","","276","function shouldDisplayHoursInShortFormat (hours) {","277","  return hours > 0.9;","307","  if (shouldDisplayDaysInShortFormat(days)) {","308","    const roundedDays = Math.round(days);","309","    const formattedDays = formatMeasure(isNegative ? -1 * roundedDays : roundedDays, 'SHORT_INT');","310","    return translateWithParameters('work_duration.x_days', formattedDays);","312","","313","  if (shouldDisplayHoursInShortFormat(hours)) {","314","    const roundedHours = Math.round(hours);","315","    const formattedHours = formatMeasure(isNegative ? -1 * roundedHours : roundedHours, 'SHORT_INT');","316","    return translateWithParameters('work_duration.x_hours', formattedHours);","318","","319","  const formattedMinutes = formatMeasure(isNegative ? -1 * minutes : minutes, 'SHORT_INT');","320","  return translateWithParameters('work_duration.x_minutes', formattedMinutes);","345","  const days = absValue \/ hoursInDay \/ 60;","346","  let remainingValue = absValue - Math.floor(days) * hoursInDay * 60;","347","  const hours = remainingValue \/ 60;","348","  remainingValue -= Math.floor(hours) * 60;"],"delete":["272","function shouldDisplayHoursInShortFormat (days, hours) {","273","  return hours > 0 && days === 0;","280","function shouldDisplayMinutesInShortFormat (days, hours, minutes) {","281","  return minutes > 0 && hours === 0 && days === 0;","282","}","283","","307","  let formatted = '';","308","  if (shouldDisplayDays(days)) {","309","    const formattedDays = formatMeasure(isNegative ? -1 * days : days, 'SHORT_INT');","310","    formatted += translateWithParameters('work_duration.x_days', formattedDays);","312","  if (shouldDisplayHoursInShortFormat(days, hours)) {","313","    formatted = addSpaceIfNeeded(formatted);","314","    formatted += translateWithParameters('work_duration.x_hours',","315","        isNegative && formatted.length === 0 ? -1 * hours : hours);","317","  if (shouldDisplayMinutesInShortFormat(days, hours, minutes)) {","318","    formatted = addSpaceIfNeeded(formatted);","319","    formatted += translateWithParameters('work_duration.x_minutes',","320","        isNegative && formatted.length === 0 ? -1 * minutes : minutes);","321","  }","322","  return formatted;","347","  const days = Math.floor(absValue \/ hoursInDay \/ 60);","348","  let remainingValue = absValue - days * hoursInDay * 60;","349","  const hours = Math.floor(remainingValue \/ 60);","350","  remainingValue -= hours * 60;"]}]}},"291509ecd95f3fcfb218d755f6eefbaec1bf4cb8":{"changes":{"sonar-db\/src\/test\/java\/org\/sonar\/db\/charset\/ColumnDefTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/db\/CheckDatabaseCharsetAtStartup.java":"MODIFY","sonar-db\/src\/main\/java\/org\/sonar\/db\/charset\/ColumnDef.java":"MODIFY","sonar-db\/src\/main\/java\/org\/sonar\/db\/version\/DatabaseVersion.java":"MODIFY"},"diff":{"sonar-db\/src\/test\/java\/org\/sonar\/db\/charset\/ColumnDefTest.java":[{"add":["29","    ColumnDef underTest = new ColumnDef(\"sys.sysusers\", \"login\", \"charset\", \"collation\", \"NVARCHAR\", 100L, false);","32","    underTest = new ColumnDef(\"SYS.SYSUSERS\", \"login\", \"charset\", \"collation\", \"NVARCHAR\", 100L, false);","38","    ColumnDef underTest = new ColumnDef(\"project_measures\", \"text_value\", \"charset\", \"collation\", \"NVARCHAR\", 100L, false);","41","    underTest = new ColumnDef(\"PROJECT_MEASURES\", \"text_value\", \"charset\", \"collation\", \"NVARCHAR\", 100L, false);","42","    assertThat(underTest.isInSonarQubeTable()).isTrue();","43","  }","44","","45","  @Test","46","  public void isInSonarQubeTable_returns_true_if_table_existed_in_previous_versions_of_sonarqube() {","47","    ColumnDef underTest = new ColumnDef(\"activities\", \"kee\", \"charset\", \"collation\", \"NVARCHAR\", 100L, false);"],"delete":["29","    ColumnDef underTest = new ColumnDef(\"sys.sysusers\", \"colum\", \"charset\", \"collation\", \"NVARCHAR\", 100L, false);","32","    underTest = new ColumnDef(\"SYS.SYSUSERS\", \"colum\", \"charset\", \"collation\", \"NVARCHAR\", 100L, false);","38","    ColumnDef underTest = new ColumnDef(\"project_measures\", \"column\", \"charset\", \"collation\", \"NVARCHAR\", 100L, false);","41","    underTest = new ColumnDef(\"PROJECT_MEASURES\", \"column\", \"charset\", \"collation\", \"NVARCHAR\", 100L, false);"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/db\/CheckDatabaseCharsetAtStartup.java":[{"add":["41","    System.out.println(\"xxxxxxxxxxx\");"],"delete":[]}],"sonar-db\/src\/main\/java\/org\/sonar\/db\/charset\/ColumnDef.java":[{"add":["82","    String tableName = table.toLowerCase(Locale.ENGLISH);","83","    return DatabaseVersion.TABLES.contains(tableName) || DatabaseVersion.OLD_DROPPED_TABLES.contains(tableName);"],"delete":["82","    return DatabaseVersion.TABLES.contains(table.toLowerCase(Locale.ENGLISH));"]}],"sonar-db\/src\/main\/java\/org\/sonar\/db\/version\/DatabaseVersion.java":[{"add":["42","   * These tables are still involved in DB migrations, so potentially","43","   * incorrect collation must be fixed so that joins with other","44","   * tables are possible.","45","   *","46","   * @see org.sonar.db.charset.ColumnDef#isInSonarQubeTable() ","47","   *\/","48","  public static final Set<String> OLD_DROPPED_TABLES = ImmutableSet.of(","49","    \"activities\"","50","  );","51","","52","  \/**","108",""],"delete":[]}]}},"2715a0716e230a7cf92d6d4414af99ad98d7830c":{"changes":{"server\/sonar-web\/src\/main\/js\/helpers\/l10n.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/components\/Conditions.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/facets\/tag-facet.js":"MODIFY","sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/templates\/quality-gates-condition-delete.hbs":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/component-measures\/details\/MeasureDetailsHeader.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/component-measures\/details\/drilldown\/ComponentsList.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/views\/gate-conditions-delete-view.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/component-measures\/details\/history\/MeasureHistory.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SelectList\/templates\/list.hbs":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/component-measures\/home\/HomeMeasuresList.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/component-measures\/home\/reducer.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/templates\/quality-profiles-intro.hbs":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/Search.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/component-measures\/details\/treemap\/MeasureTreemap.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/components\/AddConditionForm.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/facets\/project-facet.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/templates\/issue-assign-form.hbs":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/templates\/issue-tags-form.hbs":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/component-measures\/home\/AllMeasuresDomain.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/facets\/language-facet.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/component-measures\/components\/bubbleChart\/BubbleChart.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/component-measures\/home\/MeasuresList.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/templates\/quality-profile-comparison.hbs":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/components\/Condition.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/templates\/facets\/issues-mode-facet.hbs":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/component-measures\/home\/Home.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/facets\/author-facet.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/select-list\/controls.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/facets\/custom-values-facet.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/code\/components\/Search.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/templates\/issues-workspace-home.hbs":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/facets\/rule-facet.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/helpers\/l10n.js":[{"add":["97","","98","export function getLocalizedMetricName (metric) {","99","  const bundleKey = `metric.${metric.key}.name`;","100","  const fromBundle = translate(bundleKey);","101","  return fromBundle !== bundleKey ? fromBundle : metric.name;","102","}","103","","104","export function getLocalizedMetricDomain (domainName) {","105","  const bundleKey = `metric_domain.${domainName}`;","106","  const fromBundle = translate(bundleKey);","107","  return fromBundle !== bundleKey ? fromBundle : domainName;","108","}"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/components\/Conditions.js":[{"add":["26","import { translate, getLocalizedMetricName } from '..\/..\/..\/helpers\/l10n';","109","                      <li>{getLocalizedMetricName(d.metric)}<\/li>"],"delete":["26","import { translate } from '..\/..\/..\/helpers\/l10n';","109","                      <li>{d.metric.name}<\/li>"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/facets\/tag-facet.js":[{"add":["31","      placeholder: translate('search_verb'),"],"delete":["31","      placeholder: 'Search...',"]}],"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["184","with=With","731","issues.home.new_search=New Search","840","issues.facet.mode.issues=Issues","841","issues.facet.mode.effort=Effort","1757","quality_profiles.intro1=Quality Profiles are collections of rules to apply during an analysis.","1758","quality_profiles.intro2=For each language there is a default profile. All projects not explicitly assigned to some other profile will be analyzed with the default.","2210","metric_domain.Issues=Issues","2211","metric_domain.Duplications=Duplications","2212","metric_domain.Coverage=Coverage","3187","component_measures.no_history=There is no historical data."],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/templates\/quality-gates-condition-delete.hbs":[{"add":["6","    {{tp 'quality_gates.delete_condition.confirm.message' localizedMetricName}}"],"delete":["6","    {{tp 'quality_gates.delete_condition.confirm.message' metric.name}}"]}],"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/details\/MeasureDetailsHeader.js":[{"add":["27","import { getLocalizedMetricName } from '..\/..\/..\/helpers\/l10n';","33","          {getLocalizedMetricName(metric)}"],"delete":["32","          {metric.name}"]}],"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/details\/drilldown\/ComponentsList.js":[{"add":["24","import { getLocalizedMetricName } from '..\/..\/..\/..\/helpers\/l10n';","42","                  <span className=\"small\">{getLocalizedMetricName(metric)}<\/span>","46","                      <span className=\"small\">{getLocalizedMetricName(metric)}<\/span>"],"delete":["41","                  <span className=\"small\">{metric.name}<\/span>","45","                      <span className=\"small\">{metric.name}<\/span>"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/views\/gate-conditions-delete-view.js":[{"add":["22","import { getLocalizedMetricName } from '..\/..\/..\/helpers\/l10n';","43","      metric: this.options.metric,","44","      localizedMetricName: getLocalizedMetricName(this.options.metric)"],"delete":["42","      metric: this.options.metric"]}],"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/details\/history\/MeasureHistory.js":[{"add":["28","import { translate } from '..\/..\/..\/..\/helpers\/l10n';","165","              {translate('component_measures.no_history')}"],"delete":["164","              There is no historical data."]}],"server\/sonar-web\/src\/main\/js\/components\/SelectList\/templates\/list.hbs":[{"add":["8","        <input class=\"search-box-input\" type=\"search\" name=\"q\" placeholder=\"{{t 'search_verb'}}\" maxlength=\"100\" autocomplete=\"off\">"],"delete":["8","        <input class=\"search-box-input\" type=\"search\" name=\"q\" placeholder=\"Search\" maxlength=\"100\" autocomplete=\"off\">"]}],"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/home\/HomeMeasuresList.js":[{"add":["25","import { getLocalizedMetricName } from '..\/..\/..\/helpers\/l10n';","31","    ...sortBy(unknown, measure => getLocalizedMetricName(measure.metric))"],"delete":["30","    ...sortBy(unknown, measure => measure.metric.name)"]}],"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/home\/reducer.js":[{"add":["25","import { getLocalizedMetricName } from '..\/..\/..\/helpers\/l10n';","39","    const sortedMeasures = sortBy(measures, measure => getLocalizedMetricName(measure.metric));"],"delete":["38","    const sortedMeasures = sortBy(measures, measure => measure.metric.name);"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/templates\/quality-profiles-intro.hbs":[{"add":["1","  <p>{{t 'quality_profiles.intro1'}}<\/p>","2","  <p>{{t 'quality_profiles.intro2'}}<\/p>"],"delete":["1","  <p>Quality Profiles are collections of rules to apply during an analysis.<\/p>","2","  <p>For each language there is a default profile. All projects not explicitly assigned to some other profile will be","3","    analyzed with the default.<\/p>"]}],"server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/Search.js":[{"add":["55","                placeholder={translate('search_verb')}"],"delete":["55","                placeholder=\"Search...\""]}],"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/details\/treemap\/MeasureTreemap.js":[{"add":["26","import { translate, translateWithParameters, getLocalizedMetricName } from '..\/..\/..\/..\/helpers\/l10n';","95","    inner.push(`${getLocalizedMetricName(metric)}: ${formatted}`);","215","              {translateWithParameters('component_measures.legend.color_x', getLocalizedMetricName(metric))}"],"delete":["26","import { translate, translateWithParameters } from '..\/..\/..\/..\/helpers\/l10n';","95","    inner.push(`${metric.name}: ${formatted}`);","215","              {translateWithParameters('component_measures.legend.color_x', metric.name)}"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/components\/AddConditionForm.js":[{"add":["23","import { translate, getLocalizedMetricName, getLocalizedMetricDomain } from '..\/..\/..\/helpers\/l10n';","38","      label: getLocalizedMetricName(metric),","50","        label: getLocalizedMetricDomain(option.domain),"],"delete":["23","import { translate } from '..\/..\/..\/helpers\/l10n';","38","      label: metric.name,","50","        label: option.domain,"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/facets\/project-facet.js":[{"add":["46","      placeholder: translate('search_verb'),"],"delete":["46","      placeholder: 'Search...',"]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/templates\/issue-assign-form.hbs":[{"add":["4","  <input class=\"search-box-input\" type=\"search\" placeholder=\"{{t 'search_verb'}}\" value=\"{{query}}\">"],"delete":["4","  <input class=\"search-box-input\" type=\"search\" placeholder=\"Search\" value=\"{{query}}\">"]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/templates\/issue-tags-form.hbs":[{"add":["4","  <input class=\"search-box-input\" type=\"search\" placeholder=\"{{t 'search_verb'}}\" value=\"{{query}}\">"],"delete":["4","  <input class=\"search-box-input\" type=\"search\" placeholder=\"Search\" value=\"{{query}}\">"]}],"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/home\/AllMeasuresDomain.js":[{"add":["22","import { getLocalizedMetricDomain } from '..\/..\/..\/helpers\/l10n';","32","                <h3 className=\"page-title\">","33","                  {getLocalizedMetricDomain(domain.name)}","34","                <\/h3>"],"delete":["31","                <h3 className=\"page-title\">{domain.name}<\/h3>"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/facets\/language-facet.js":[{"add":["30","      placeholder: translate('search_verb'),"],"delete":["30","      placeholder: 'Search...',"]}],"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/components\/bubbleChart\/BubbleChart.js":[{"add":["28","import { getLocalizedMetricName, translateWithParameters } from '..\/..\/..\/..\/helpers\/l10n';","171","          <div className=\"measure-details-bubble-chart-axis x\">","172","            {getLocalizedMetricName(this.xMetric)}","173","          <\/div>","174","          <div className=\"measure-details-bubble-chart-axis y\">","175","            {getLocalizedMetricName(this.yMetric)}","176","          <\/div>","177","          <div className=\"measure-details-bubble-chart-axis size\">","178","            {translateWithParameters('component_measures.legend.size_x', getLocalizedMetricName(this.sizeMetric))}","179","          <\/div>"],"delete":["170","          <div className=\"measure-details-bubble-chart-axis x\">{this.xMetric.name}<\/div>","171","          <div className=\"measure-details-bubble-chart-axis y\">{this.yMetric.name}<\/div>","172","          <div className=\"measure-details-bubble-chart-axis size\">Size: {this.sizeMetric.name}<\/div>"]}],"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/home\/MeasuresList.js":[{"add":["23","import { getLocalizedMetricName } from '..\/..\/..\/helpers\/l10n';","35","                      {getLocalizedMetricName(measure.metric)}"],"delete":["34","                      {measure.metric.name}"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/templates\/quality-profile-comparison.hbs":[{"add":["8","    <label class=\"text-middle\" for=\"quality-profile-comparison-with-key\">{{t 'with'}}<\/label>"],"delete":["8","    <label class=\"text-middle\" for=\"quality-profile-comparison-with-key\">With<\/label>"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/components\/Condition.js":[{"add":["25","import { translate, getLocalizedMetricName } from '..\/..\/..\/helpers\/l10n';","164","            {getLocalizedMetricName(metric)}"],"delete":["25","import { translate } from '..\/..\/..\/helpers\/l10n';","164","            {metric.name}"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/templates\/facets\/issues-mode-facet.hbs":[{"add":["5","      <label for=\"issues-page-mode-count\">{{t 'issues.facet.mode.issues'}}<\/label>","10","      <label for=\"issues-page-mode-effort\">{{t 'issues.facet.mode.effort'}}<\/label>"],"delete":["5","      <label for=\"issues-page-mode-count\">Issues<\/label>","10","      <label for=\"issues-page-mode-effort\">Effort<\/label>"]}],"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/home\/Home.js":[{"add":["24","import { translate, getLocalizedMetricDomain } from '..\/..\/..\/helpers\/l10n';","63","                        {getLocalizedMetricDomain(domain.name)}"],"delete":["24","import { translate } from '..\/..\/..\/helpers\/l10n';","63","                        {domain.name}"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/facets\/author-facet.js":[{"add":["29","      placeholder: translate('search_verb'),"],"delete":["29","      placeholder: 'Search...',"]}],"server\/sonar-web\/src\/main\/js\/components\/select-list\/controls.js":[{"add":["22","import { translate } from '..\/..\/helpers\/l10n';","71","                placeholder={translate('search_verb')}"],"delete":["70","                placeholder=\"Search\""]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/facets\/custom-values-facet.js":[{"add":["44","      placeholder: translate('search_verb'),"],"delete":["44","      placeholder: 'Search...',"]}],"server\/sonar-web\/src\/main\/js\/apps\/code\/components\/Search.js":[{"add":["24","import { translate, translateWithParameters } from '..\/..\/..\/helpers\/l10n';","80","              placeholder={translate('search_verb')}"],"delete":["24","import { translateWithParameters } from '..\/..\/..\/helpers\/l10n';","80","              placeholder=\"Search\""]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/templates\/issues-workspace-home.hbs":[{"add":["23","    <a href=\"#resolved=false\" class=\"button spacer-left\">{{t 'issues.home.new_search'}}<\/a>"],"delete":["23","    <a href=\"#resolved=false\" class=\"button spacer-left\">New Search<\/a>"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/facets\/rule-facet.js":[{"add":["31","      placeholder: translate('search_verb'),"],"delete":["31","      placeholder: 'Search...',"]}]}},"5bf0d2cb3e25a4c629e49110b6bba0fb8c40959d":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/Domain.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/__tests__\/Menu-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/__tests__\/Search-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/__tests__\/__snapshots__\/Menu-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/__tests__\/__snapshots__\/Search-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/web-api\/utils.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/WebApiApp.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/__tests__\/Domain-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/Menu.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/Search.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/Domain.tsx":[{"add":["23","import { getActionKey, actionsFilter, Query } from '..\/utils';","28","  query: Query;","31","export default function Domain({ domain, query }: Props) {","32","  const filteredActions = domain.actions.filter(action => actionsFilter(query, domain, action));","64","            key={getActionKey(domain.path, action.key)}","65","            showDeprecated={query.deprecated}","66","            showInternal={query.internal}"],"delete":["23","import { getActionKey, actionsFilter } from '..\/utils';","28","  showDeprecated: boolean;","29","  showInternal: boolean;","30","  searchQuery: string;","33","export default function Domain({ domain, showInternal, showDeprecated, searchQuery }: Props) {","34","  const filteredActions = domain.actions.filter(action =>","35","    actionsFilter(showDeprecated, showInternal, searchQuery, domain, action)","36","  );","66","            key={getActionKey(domain.path, action.key)}","69","            showDeprecated={showDeprecated}","70","            showInternal={showInternal}"]}],"server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/__tests__\/Menu-test.tsx":[{"add":["47","  query: { search: '', deprecated: false, internal: false },","51","const SHOW_DEPRECATED = { search: '', deprecated: true, internal: false };","52","const SHOW_INTERNAL = { search: '', deprecated: false, internal: true };","53","const SEARCH_FOO = { search: 'Foo', deprecated: false, internal: false };","54","const SEARCH_BAR = { search: 'Bar', deprecated: false, internal: false };","55","","63","  expect(shallow(<Menu {...PROPS} domains={domains} query={SHOW_DEPRECATED} \/>)).toMatchSnapshot();","73","  expect(shallow(<Menu {...PROPS} domains={domains} \/>)).toMatchSnapshot();","79","  expect(shallow(<Menu {...PROPS} domains={domains} query={SHOW_INTERNAL} \/>)).toMatchSnapshot();","85","  expect(shallow(<Menu {...PROPS} domains={domains} \/>)).toMatchSnapshot();","94","  expect(shallow(<Menu {...PROPS} domains={domains} query={SEARCH_FOO} \/>)).toMatchSnapshot();","105","  expect(shallow(<Menu {...PROPS} domains={domains} query={SEARCH_BAR} \/>)).toMatchSnapshot();"],"delete":["47","  showDeprecated: false,","48","  showInternal: false,","49","  searchQuery: '',","60","  expect(shallow(<Menu {...PROPS} domains={domains} showDeprecated={true} \/>)).toMatchSnapshot();","70","  expect(shallow(<Menu {...PROPS} domains={domains} showDeprecated={false} \/>)).toMatchSnapshot();","76","  expect(shallow(<Menu {...PROPS} domains={domains} showInternal={true} \/>)).toMatchSnapshot();","82","  expect(shallow(<Menu {...PROPS} domains={domains} showInternal={false} \/>)).toMatchSnapshot();","91","  expect(shallow(<Menu {...PROPS} domains={domains} searchQuery=\"Foo\" \/>)).toMatchSnapshot();","102","  expect(shallow(<Menu {...PROPS} domains={domains} searchQuery=\"Bar\" \/>)).toMatchSnapshot();"]}],"server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/__tests__\/Search-test.tsx":[{"add":["24","  query: { search: '', deprecated: false, internal: false },"],"delete":["24","  showDeprecated: false,","25","  showInternal: false,"]}],"server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/__tests__\/__snapshots__\/Menu-test.tsx.snap":[{"add":["14","      to={","15","        Object {","16","          \"pathname\": \"\/web_api\/bar\",","17","          \"query\": Object {","18","            \"query\": \"Bar\",","19","          },","20","        }","21","      }","34","      to={","35","        Object {","36","          \"pathname\": \"\/web_api\/baz\",","37","          \"query\": Object {","38","            \"query\": \"Bar\",","39","          },","40","        }","41","      }","65","      to={","66","        Object {","67","          \"pathname\": \"\/web_api\/foo\",","68","          \"query\": Object {},","69","        }","70","      }","94","      to={","95","        Object {","96","          \"pathname\": \"\/web_api\/foo\",","97","          \"query\": Object {},","98","        }","99","      }","123","      to={","124","        Object {","125","          \"pathname\": \"\/web_api\/foo\",","126","          \"query\": Object {","127","            \"deprecated\": true,","128","          },","129","        }","130","      }","143","      to={","144","        Object {","145","          \"pathname\": \"\/web_api\/bar\",","146","          \"query\": Object {","147","            \"deprecated\": true,","148","          },","149","        }","150","      }","174","      to={","175","        Object {","176","          \"pathname\": \"\/web_api\/foo\",","177","          \"query\": Object {","178","            \"internal\": true,","179","          },","180","        }","181","      }","194","      to={","195","        Object {","196","          \"pathname\": \"\/web_api\/bar\",","197","          \"query\": Object {","198","            \"internal\": true,","199","          },","200","        }","201","      }","226","      to={","227","        Object {","228","          \"pathname\": \"\/web_api\/foo\",","229","          \"query\": Object {","230","            \"query\": \"Foo\",","231","          },","232","        }","233","      }"],"delete":["14","      to=\"\/web_api\/bar\"","27","      to=\"\/web_api\/baz\"","51","      to=\"\/web_api\/foo\"","75","      to=\"\/web_api\/foo\"","99","      to=\"\/web_api\/foo\"","112","      to=\"\/web_api\/bar\"","136","      to=\"\/web_api\/foo\"","149","      to=\"\/web_api\/bar\"","174","      to=\"\/web_api\/foo\""]}],"server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/__tests__\/__snapshots__\/Search-test.tsx.snap":[{"add":["10","      value=\"\""],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/web-api\/utils.ts":[{"add":["19","import { memoize } from 'lodash';","21","import {","22","  cleanQuery,","23","  RawQuery,","24","  serializeString,","25","  parseAsOptionalBoolean,","26","  parseAsString","27","} from '..\/..\/helpers\/query';","29","export interface Query {","30","  search: string;","31","  deprecated: boolean;","32","  internal: boolean;","33","}","34","","35","export function actionsFilter(query: Query, domain: Domain, action: Action) {","36","  const lowSearchQuery = query.search.toLowerCase();","38","    (query.internal || !action.internal) &&","39","    (query.deprecated || !action.deprecatedSince) &&","65","","66","export const parseQuery = memoize((urlQuery: RawQuery): Query => ({","67","  search: parseAsString(urlQuery['query']),","68","  deprecated: parseAsOptionalBoolean(urlQuery['deprecated']) || false,","69","  internal: parseAsOptionalBoolean(urlQuery['internal']) || false","70","}));","71","","72","export const serializeQuery = memoize((query: Query): RawQuery =>","73","  cleanQuery({","74","    query: query.search ? serializeString(query.search) : undefined,","75","    deprecated: query.deprecated || undefined,","76","    internal: query.internal || undefined","77","  })","78",");"],"delete":["21","export function actionsFilter(","22","  showDeprecated: boolean,","23","  showInternal: boolean,","24","  searchQuery: string,","25","  domain: Domain,","26","  action: Action","27",") {","28","  const lowSearchQuery = searchQuery.toLowerCase();","30","    (showInternal || !action.internal) &&","31","    (showDeprecated || !action.deprecatedSince) &&"]}],"server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/WebApiApp.tsx":[{"add":["28","import { getActionKey, isDomainPathActive, Query, serializeQuery, parseQuery } from '..\/utils';","32","import { RawQuery } from '..\/..\/..\/helpers\/query';","36","  location: { pathname: string; query: RawQuery };","53","    this.state = { domains: [] };","99","  updateQuery = (newQuery: Partial<Query>) => {","100","    const query = serializeQuery({ ...parseQuery(this.props.location.query), ...newQuery });","101","    this.context.router.push({ pathname: this.props.location.pathname, query });","102","  };","103","","106","    const { domains } = this.state;","107","    const query = parseQuery(this.props.location.query);","109","    if (!query.internal && splat) {","110","      const domain = domains.find(domain => domain.path.startsWith(splat));","111","      if (domain) {","112","        let action;","113","        if (domain.path !== splat) {","114","          action = domain.actions.find(action => getActionKey(domain.path, action.key) === splat);","116","        if (domain.internal || (action && action.internal)) {","117","          this.updateQuery({ internal: true });","118","        }","119","      }","123","  handleSearch = (search: string) => {","124","    this.updateQuery({ search });","125","  };","132","    const query = parseQuery(this.props.location.query);","133","    const internal = !query.internal;","135","    if (domain && domain.internal && !internal) {","136","      router.push({","137","        pathname: '\/web_api',","138","        query: { ...serializeQuery(query), internal: false }","139","      });","140","      return;","143","    this.updateQuery({ internal });","146","  handleToggleDeprecated = () => {","147","    const query = parseQuery(this.props.location.query);","148","    this.updateQuery({ deprecated: !query.deprecated });","149","  };","153","    const query = parseQuery(this.props.location.query);","154","    const { domains } = this.state;","176","                    onToggleInternal={this.handleToggleInternal}","177","                    query={query}","180","                  <Menu domains={this.state.domains} query={query} splat={splat} \/>","189","            {domain && <Domain domain={domain} key={domain.path} query={query} \/>}"],"delete":["28","import { getActionKey, isDomainPathActive } from '..\/utils';","40","  searchQuery: string;","41","  showDeprecated: boolean;","42","  showInternal: boolean;","54","    this.state = {","55","      domains: [],","56","      searchQuery: '',","57","      showDeprecated: false,","58","      showInternal: false","59","    };","107","    const { domains, showInternal } = this.state;","109","    if (!showInternal) {","110","      domains.forEach(domain => {","111","        if (domain.path === splat && domain.internal) {","112","          this.setState({ showInternal: true });","114","        domain.actions.forEach(action => {","115","          const actionKey = getActionKey(domain.path, action.key);","116","          if (actionKey === splat && action.internal) {","117","            this.setState({ showInternal: true });","118","          }","119","        });","120","      });","124","  handleSearch = (searchQuery: string) => this.setState({ searchQuery });","131","    const showInternal = !this.state.showInternal;","133","    if (domain && domain.internal && !showInternal) {","134","      router.push('\/web_api');","137","    this.setState({ showInternal });","140","  handleToggleDeprecated = () =>","141","    this.setState(state => ({ showDeprecated: !state.showDeprecated }));","145","    const { domains, showInternal, showDeprecated, searchQuery } = this.state;","165","                    showDeprecated={showDeprecated}","166","                    showInternal={showInternal}","168","                    onToggleInternal={this.handleToggleInternal}","172","                  <Menu","173","                    domains={this.state.domains}","174","                    showDeprecated={showDeprecated}","175","                    showInternal={showInternal}","176","                    searchQuery={searchQuery}","177","                    splat={splat}","178","                  \/>","187","            {domain && (","188","              <Domain","189","                key={domain.path}","190","                domain={domain}","191","                showDeprecated={showDeprecated}","192","                showInternal={showInternal}","193","                searchQuery={searchQuery}","194","              \/>","195","            )}"]}],"server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/__tests__\/Domain-test.tsx":[{"add":["40","  query: { search: '', deprecated: false, internal: false }","42","const SHOW_DEPRECATED = { search: '', deprecated: true, internal: false };","43","const SHOW_INTERNAL = { search: '', deprecated: false, internal: true };","44","const SEARCH_FOO = { search: 'Foo', deprecated: false, internal: false };","50","    shallow(<Domain {...DEFAULT_PROPS} domain={domain} query={SHOW_DEPRECATED} \/>)","58","    shallow(<Domain {...DEFAULT_PROPS} domain={domain} query={SHOW_INTERNAL} \/>)","66","    shallow(<Domain {...DEFAULT_PROPS} domain={domain} query={SHOW_INTERNAL} \/>)","73","  expect(shallow(<Domain {...DEFAULT_PROPS} domain={domain} \/>)).toMatchSnapshot();","80","    shallow(<Domain {...DEFAULT_PROPS} domain={domain} query={SEARCH_FOO} \/>)","92","    shallow(<Domain {...DEFAULT_PROPS} domain={domain} query={SEARCH_FOO} \/>)"],"delete":["40","  showDeprecated: false,","41","  showInternal: false,","42","  searchQuery: ''","49","    shallow(<Domain {...DEFAULT_PROPS} domain={domain} showDeprecated={true} \/>)","57","    shallow(<Domain {...DEFAULT_PROPS} domain={domain} showDeprecated={false} \/>)","65","    shallow(<Domain {...DEFAULT_PROPS} domain={domain} showInternal={true} \/>)","72","  expect(","73","    shallow(<Domain {...DEFAULT_PROPS} domain={domain} showInternal={false} \/>)","74","  ).toMatchSnapshot();","81","    shallow(<Domain {...DEFAULT_PROPS} domain={domain} searchQuery=\"Foo\" \/>)","93","    shallow(<Domain {...DEFAULT_PROPS} domain={domain} searchQuery=\"Foo\" \/>)"]}],"server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/Menu.tsx":[{"add":["24","import { isDomainPathActive, actionsFilter, Query, serializeQuery } from '..\/utils';","29","  query: Query;","34","  const { domains, query, splat } = props;","37","      const filteredActions = domain.actions.filter(action => actionsFilter(query, domain, action));","51","            to={{ pathname: '\/web_api\/' + domain.path, query: serializeQuery(query) }}>"],"delete":["24","import { isDomainPathActive, actionsFilter } from '..\/utils';","29","  showDeprecated: boolean;","30","  showInternal: boolean;","31","  searchQuery: string;","36","  const { domains, showInternal, showDeprecated, searchQuery, splat } = props;","39","      const filteredActions = domain.actions.filter(action =>","40","        actionsFilter(showDeprecated, showInternal, searchQuery, domain, action)","41","      );","55","            to={'\/web_api\/' + domain.path}>"]}],"server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/Search.tsx":[{"add":["24","import { Query } from '..\/utils';","27","  query: Query;","34","  const { query, onToggleInternal, onToggleDeprecated } = props;","39","        <SearchBox","40","          onChange={props.onSearch}","41","          placeholder={translate('api_documentation.search')}","42","          value={query.search}","43","        \/>","47","        <Checkbox checked={query.internal} className=\"text-middle\" onCheck={onToggleInternal}>","57","        <Checkbox checked={query.deprecated} className=\"text-middle\" onCheck={onToggleDeprecated}>"],"delete":["26","  showDeprecated: boolean;","27","  showInternal: boolean;","34","  const { showInternal, showDeprecated, onToggleInternal, onToggleDeprecated } = props;","39","        <SearchBox onChange={props.onSearch} placeholder={translate('api_documentation.search')} \/>","43","        <Checkbox checked={showInternal} className=\"text-middle\" onCheck={onToggleInternal}>","53","        <Checkbox checked={showDeprecated} className=\"text-middle\" onCheck={onToggleDeprecated}>"]}]}},"7a59b82ec1d9c7b18b067ede96076b2a3bdd5e05":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/restore-profile-view.js":"MODIFY","server\/sonar-web\/src\/main\/js\/api\/quality-profiles.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/templates\/quality-profiles-restore-profile.hbs":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/restore-profile-view.js":[{"add":["22","import { restoreQualityProfile } from '..\/..\/api\/quality-profiles';","29","    const data = new FormData(e.currentTarget);","30","","31","    this.disableForm();","32","","33","    restoreQualityProfile(data)","34","        .then(r => {","35","          this.profile = r.profile;","36","          this.ruleSuccesses = r.ruleSuccesses;","37","          this.ruleFailures = r.ruleFailures;","38","          this.render();","39","          this.addProfile(r.profile);","40","        })","41","        .catch(e => {","42","          this.enableForm();","43","          e.response.json().then(r => this.showErrors(r.errors, r.warnings));","44","        });","54","  },","55","","56","  serializeData() {","57","    return Object.assign({}, ModalFormView.prototype.serializeData.apply(this, arguments), {","58","      profile: this.profile,","59","      ruleSuccesses: this.ruleSuccesses,","60","      ruleFailures: this.ruleFailures","61","    });"],"delete":["19","import $ from 'jquery';","20","import _ from 'underscore';","22","import uploader from '..\/..\/components\/common\/file-upload';","30","    const that = this;","32","    uploader({ form: $(e.currentTarget) }).done(function (r) {","33","      if (_.isArray(r.errors) || _.isArray(r.warnings)) {","34","        that.showErrors(r.errors, r.warnings);","35","      } else {","36","        that.addProfile(r.profile);","37","        that.destroy();","38","      }","39","    });"]}],"server\/sonar-web\/src\/main\/js\/api\/quality-profiles.js":[{"add":["32","","33","export function restoreQualityProfile (data) {","34","  const url = window.baseUrl + '\/api\/qualityprofiles\/restore';","35","  const options = {","36","    method: 'post',","37","    credentials: 'same-origin',","38","    body: data","39","  };","40","  return window.fetch(url, options)","41","      .then(checkStatus)","42","      .then(parseJSON);","43","}"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/templates\/quality-profiles-restore-profile.hbs":[{"add":["0","<form id=\"restore-profile-form\">","4","","7","    {{#if profile}}","8","      {{#if ruleFailures}}","9","        <div class=\"alert alert-warning\">","10","          {{tp 'quality_profiles.restore_profile.warning' profile.name ruleSuccesses ruleFailures}}","11","        <\/div>","12","      {{else}}","13","        <div class=\"alert alert-success\">","14","          {{tp 'quality_profiles.restore_profile.success' profile.name ruleSuccesses}}","15","        <\/div>","16","      {{\/if}}","17","    {{else}}","18","      <div class=\"modal-field\">","19","        <label for=\"restore-profile-backup\">{{t 'backup'}}<em class=\"mandatory\">*<\/em><\/label>","20","        <input type=\"file\" id=\"restore-profile-backup\" name=\"backup\" required>","21","      <\/div>","22","    {{\/if}}","24","","26","    {{#notNull ruleSuccesses}}","27","      <a href=\"#\" class=\"js-modal-close\">{{t 'close'}}<\/a>","28","    {{else}}","29","      <button id=\"restore-profile-submit\">{{t 'restore'}}<\/button>","30","      <a href=\"#\" class=\"js-modal-close\" id=\"restore-profile-cancel\">{{t 'cancel'}}<\/a>","31","    {{\/notNull}}"],"delete":["0","<form id=\"restore-profile-form\" action=\"{{link '\/api\/qualityprofiles\/restore'}}\" enctype=\"multipart\/form-data\"","1","      method=\"POST\">","7","    <div class=\"modal-field\">","8","      <label for=\"restore-profile-backup\">{{t 'backup'}}<em class=\"mandatory\">*<\/em><\/label>","9","      <input type=\"file\" id=\"restore-profile-backup\" name=\"backup\" required>","10","    <\/div>","13","    <button id=\"restore-profile-submit\">{{t 'restore'}}<\/button>","14","    <a href=\"#\" class=\"js-modal-close\" id=\"restore-profile-cancel\">{{t 'cancel'}}<\/a>"]}]}},"a27abe36c63f21ed0e8c4b5adf05c36187da7f4a":{"changes":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/component\/SnapshotDtoTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/projectanalysis\/ws\/UpdateEventActionTest.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/scan\/ProjectReactorValidatorTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/component\/SnapshotDto.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/projectanalysis\/ws\/UpdateEventAction.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/ProjectReactorValidator.java":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/component\/SnapshotDtoTest.java":[{"add":["21","import org.junit.Rule;","23","import org.junit.rules.ExpectedException;","25","import static org.apache.commons.lang.StringUtils.repeat;","31","  @Rule","32","  public ExpectedException expectedException = ExpectedException.none();","33","","56","  @Test","57","  public void fail_if_version_name_is_longer_then_100_characters() throws Exception {","58","    SnapshotDto snapshotDto = new SnapshotDto();","59","    snapshotDto.setVersion(null);","60","    snapshotDto.setVersion(\"1.0\");","61","    snapshotDto.setVersion(repeat(\"a\", 100));","62","","63","    expectedException.expect(IllegalArgumentException.class);","64","    expectedException.expectMessage(\"Event name length (101) is longer than the maximum authorized (100). \" +","65","      \"'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' was provided.\");","66","","67","    snapshotDto.setVersion(repeat(\"a\", 101));","68","  }"],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/projectanalysis\/ws\/UpdateEventActionTest.java":[{"add":["43","import static org.apache.commons.lang.StringUtils.repeat;","226","  @Test","227","  public void limit_version_name_length_to_100_for_analysis_events() {","228","    SnapshotDto analysis = createAnalysisAndLogInAsProjectAdministrator(\"5.6\");","229","    db.events().insertEvent(newEvent(analysis).setUuid(\"E1\").setCategory(OTHER.getLabel()).setName(\"E1 name\"));","230","    db.events().insertEvent(newEvent(analysis).setUuid(\"E2\").setCategory(VERSION.getLabel()).setName(\"E2 name\"));","231","","232","    call(\"E1\", repeat(\"a\", 100));","233","    call(\"E1\", repeat(\"a\", 101));","234","    call(\"E2\", repeat(\"a\", 100));","235","","236","    expectedException.expect(IllegalArgumentException.class);","237","    expectedException.expectMessage(\"Version length (101) is longer than the maximum authorized (100). 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' was provided\");","238","","239","    call(\"E2\", repeat(\"a\", 101));","240","  }","241",""],"delete":[]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/scan\/ProjectReactorValidatorTest.java":[{"add":["21","import java.util.Arrays;","22","import java.util.function.Consumer;","36","import static org.apache.commons.lang.StringUtils.repeat;","192","  @Test","193","  public void not_fail_with_valid_version() {","194","    validator.validate(createProjectReactor(\"foo\", def -> def.setVersion(\"1.0\")));","195","    validator.validate(createProjectReactor(\"foo\", def -> def.setVersion(\"2017-10-16\")));","196","    validator.validate(createProjectReactor(\"foo\", def -> def.setVersion(repeat(\"a\", 100))));","197","  }","198","","199","  @Test","200","  public void fail_with_too_long_version() {","201","    ProjectReactor reactor = createProjectReactor(\"foo\", def -> def.setVersion(repeat(\"a\", 101)));","202","","203","    thrown.expect(MessageException.class);","204","    thrown.expectMessage(\"\\\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\" is not a valid version name for module \\\"foo\\\". \" +","205","      \"The maximum length for version numbers is 100 characters.\");","206","","207","    validator.validate(reactor);","211","    return createProjectReactor(projectKey, def -> def","212","      .setProperty(CoreProperties.PROJECT_BRANCH_PROPERTY, branch));","215","  private ProjectReactor createProjectReactor(String projectKey, Consumer<ProjectDefinition>... consumers) {","216","    ProjectDefinition def = ProjectDefinition.create()","217","      .setProperty(CoreProperties.PROJECT_KEY_PROPERTY, projectKey);","218","    Arrays.stream(consumers).forEach(c -> c.accept(def));","219","    return new ProjectReactor(def);","220","  }"],"delete":["189","  private ProjectReactor createProjectReactor(String projectKey) {","190","    ProjectDefinition def = ProjectDefinition.create().setProperty(CoreProperties.PROJECT_KEY_PROPERTY, projectKey);","191","    ProjectReactor reactor = new ProjectReactor(def);","192","    return reactor;","196","    ProjectDefinition def = ProjectDefinition.create()","197","      .setProperty(CoreProperties.PROJECT_KEY_PROPERTY, projectKey)","198","      .setProperty(CoreProperties.PROJECT_BRANCH_PROPERTY, branch);","199","    return new ProjectReactor(def);"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/component\/SnapshotDto.java":[{"add":["24","import static com.google.common.base.Preconditions.checkArgument;","25","","33","  public static final int MAX_VERSION_LENGTH = 100;","121","    if (version != null) {","122","      checkArgument(version.length() <= MAX_VERSION_LENGTH,","123","        \"Event name length (%s) is longer than the maximum authorized (%s). '%s' was provided.\", version.length(), MAX_VERSION_LENGTH, version);","124","    }"],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/projectanalysis\/ws\/UpdateEventAction.java":[{"add":["54","  private static final int MAX_NAME_LENGTH = 100;","103","        .peek(checkVersionNameLength(request))","150","  private static Consumer<EventDto> checkVersionNameLength(UpdateEventRequest request) {","151","    String name = request.getName();","152","    return candidateEvent -> {","153","      if (name != null && VERSION.getLabel().equals(candidateEvent.getCategory())) {","154","        checkArgument(name.length() <= MAX_NAME_LENGTH,","155","          \"Version length (%s) is longer than the maximum authorized (%s). '%s' was provided.\", name.length(), MAX_NAME_LENGTH, name);","156","      }","157","    };","158","  }","159",""],"delete":[]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/ProjectReactorValidator.java":[{"add":["106","    String originalVersion = moduleDef.getOriginalVersion();","107","    if (originalVersion != null && originalVersion.length() > 100) {","108","      validationMessages.add(String.format(\"\\\"%s\\\" is not a valid version name for module \\\"%s\\\". \" +","109","        \"The maximum length for version numbers is 100 characters.\", originalVersion, moduleDef.getKey()));","110","    }"],"delete":[]}]}},"e0c834ebf18b722009ae5940e98b5916c8bbea71":{"changes":{"sonar-db\/src\/test\/java\/org\/sonar\/db\/version\/v50\/FeedFileSourcesTest.java":"MODIFY","sonar-db\/src\/main\/java\/org\/sonar\/db\/version\/v50\/FeedFileSources.java":"MODIFY"},"diff":{"sonar-db\/src\/test\/java\/org\/sonar\/db\/version\/v50\/FeedFileSourcesTest.java":[{"add":["91","  public void migrate_ignores_duplicate_multiple_rows_in_snapshots_with_islast_true() throws Exception {","92","    db.prepareDbUnit(getClass(), \"before.xml\");","93","    db.executeUpdateSql(\"insert into snapshots \" +","94","        \"(id,project_id,parent_snapshot_id,root_project_id,root_snapshot_id,status,islast) \" +","95","        \"values \" +","96","        \"(9,3,4,1,2,'P',true)\");","97","    db.executeUpdateSql(\"insert into snapshot_sources \" +","98","        \"(snapshot_id, data, updated_at) \" +","99","        \"values \" +","100","        \"(6, 'class Foo {\\r\\n  \/\/ Empty\\r\\n}\\r\\n', '2014-10-31 16:44:02.000')\");","101","","102","    db.executeUpdateSql(\"insert into snapshot_sources \" +","103","        \"(snapshot_id, data, updated_at) \" +","104","        \"values \" +","105","        \"(9, 'class Bar {\\r\\n  \/\/ Empty\\r\\n}\\r\\n', '2014-10-31 16:44:02.000')\");","106","","107","    migration.execute();","108","","109","    List<Map<String, Object>> results = getFileSources();","110","    assertThat(results).hasSize(2);","111","","112","    \/\/ the lastest inserted row is the one taken into account","113","    assertThat(results.get(1).get(\"data\")).isEqualTo(\",,,,,,,,,,,,,,,class Bar {\\r\\n,,,,,,,,,,,,,,,  \/\/ Empty\\r\\n,,,,,,,,,,,,,,,}\\r\\n,,,,,,,,,,,,,,,\\r\\n\");","114","  }","115","","116","  @Test"],"delete":[]}],"sonar-db\/src\/main\/java\/org\/sonar\/db\/version\/v50\/FeedFileSources.java":[{"add":["24","import java.util.Objects;","99","    \"m13.measure_data \" +","141","    \"ORDER BY \" +","142","      \/\/ to be able to detect duplicate  a given file uuid only once","143","      \"f.uuid, \" +","144","      \/\/ to take into account the (presumably) most recent snapshot in case of duplicate","145","      \"s.id desc,\" +","146","      \/\/ to take into account the (presumably) most recent line in FILE_SOURCES in case of duplicate","147","      \"ss.id desc\";","156","    private String previousFileUuid = null;","195","      if (Objects.equals(fileUuid, previousFileUuid)) {","198","      this.previousFileUuid = fileUuid;"],"delete":["98","    \"m13.measure_data, \" +","99","","100","    \/\/ to detect multiple rows in snapshot_sources for the same snapshot","101","    \"s.id \" +","143","    \"ORDER BY s.id, ss.id desc\";","152","    private long previousSnapshotId = -1;","190","      long snapshotId = row.getLong(31);","192","      if (snapshotId == previousSnapshotId) {","195","      this.previousSnapshotId = snapshotId;"]}]}},"2cc874a266bae362d26b69ce0e8e8ed0d0708b67":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/facets\/quality-profile-facet.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/facets\/quality-profile-facet.js":[{"add":["75","      this.options.app.state.updateFilter({ activation: 'false', active_severities: null });"],"delete":["75","      this.options.app.state.updateFilter({ activation: 'false' });"]}]}},"23ee784e6d44f8462c8d160c7a113a64424bfb67":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/index\/RuleIndexDefinition.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/es\/EsClient.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/index\/RuleIndex.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/index\/RuleIndexDefinitionTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/es\/DefaultIndexSettings.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/index\/RuleIndexDefinition.java":[{"add":["23","import com.google.common.collect.ImmutableSortedMap;","97","    ruleMapping.setProperty(FIELD_RULE_HTML_DESCRIPTION, ImmutableSortedMap.of(","98","      \"type\", \"string\",","99","      \"index\", \"analyzed\",","100","      \"doc_values\", \"false\",","101","      \"index_analyzer\", \"html_analyzer\",","102","      \"search_analyzer\", \"html_analyzer\"","103","      ));"],"delete":["96","    ruleMapping.stringFieldBuilder(FIELD_RULE_HTML_DESCRIPTION).enableWordSearch().build();"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/es\/EsClient.java":[{"add":["235","  public Client nativeClient() {"],"delete":["235","  protected Client nativeClient() {"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/index\/RuleIndex.java":[{"add":["182","      .field(FIELD_RULE_HTML_DESCRIPTION, 3f)"],"delete":["182","      .field(FIELD_RULE_HTML_DESCRIPTION + \".\" + SEARCH_WORDS_SUFFIX, 3f)"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/index\/RuleIndexDefinitionTest.java":[{"add":["21","import com.google.common.collect.ImmutableMap;","22","import java.util.List;","23","import org.apache.commons.lang.StringUtils;","24","import org.elasticsearch.action.admin.indices.analyze.AnalyzeResponse;","25","import org.junit.Rule;","28","import org.sonar.process.ProcessProperties;","29","import org.sonar.server.es.EsTester;","34","import static org.sonar.server.rule.index.RuleIndexDefinition.FIELD_RULE_HTML_DESCRIPTION;","35","import static org.sonar.server.rule.index.RuleIndexDefinition.FIELD_RULE_KEY;","36","import static org.sonar.server.rule.index.RuleIndexDefinition.FIELD_RULE_REPOSITORY;","37","import static org.sonar.server.rule.index.RuleIndexDefinition.INDEX;","41","  Settings settings = new Settings();","42","  RuleIndexDefinition underTest = new RuleIndexDefinition(settings);","43","","44","  @Rule","45","  public EsTester tester = new EsTester().addDefinitions(underTest);","48","  public void test_definition_of_index() {","49","    IndexDefinition.IndexDefinitionContext context = new IndexDefinition.IndexDefinitionContext();","50","    underTest.define(context);","52","    assertThat(context.getIndices()).hasSize(1);","53","    NewIndex ruleIndex = context.getIndices().get(\"rules\");","62","  @Test","63","  public void enable_replica_if_clustering_is_enabled() {","64","    settings.setProperty(ProcessProperties.CLUSTER_ACTIVATE, true);","65","    IndexDefinition.IndexDefinitionContext context = new IndexDefinition.IndexDefinitionContext();","66","    underTest.define(context);","67","","68","    NewIndex ruleIndex = context.getIndices().get(\"rules\");","69","    assertThat(ruleIndex.getSettings().get(\"index.number_of_replicas\")).isEqualTo(\"1\");","70","  }","71","","72","  @Test","73","  public void support_long_html_description() throws Exception {","74","    String longText = StringUtils.repeat(\"hello  \", 10_000);","75","    \/\/ the following method fails if PUT fails","76","    tester.putDocuments(INDEX, RuleIndexDefinition.TYPE_RULE, ImmutableMap.<String, Object>of(","77","      FIELD_RULE_HTML_DESCRIPTION, longText,","78","      FIELD_RULE_REPOSITORY, \"squid\",","79","      FIELD_RULE_KEY, \"S001\"));","80","    assertThat(tester.countDocuments(INDEX, RuleIndexDefinition.TYPE_RULE)).isEqualTo(1);","81","","82","    List<AnalyzeResponse.AnalyzeToken> tokens = analyzeIndexedTokens(longText);","83","    for (AnalyzeResponse.AnalyzeToken token : tokens) {","84","      assertThat(token.getTerm().length()).isEqualTo(\"hello\".length());","85","    }","86","  }","87","","88","  @Test","89","  public void remove_html_characters_of_html_description() {","90","    String text = \"<p>html <i>line<\/i><\/p>\";","91","    List<AnalyzeResponse.AnalyzeToken> tokens = analyzeIndexedTokens(text);","92","","93","    assertThat(tokens).extracting(\"term\").containsOnly(\"html\", \"line\");","94","  }","95","","96","  @Test","97","  public void sanitize_html_description_as_it_is_english() {","98","    String text = \"this is a small list of words\";","99","    \/\/ \"this\", \"is\", \"a\" and \"of\" are not indexed.","100","    \/\/ Plural \"words\" is converted to singular \"word\"","101","    List<AnalyzeResponse.AnalyzeToken> tokens = analyzeIndexedTokens(text);","102","    assertThat(tokens).extracting(\"term\").containsOnly(\"small\", \"list\", \"word\");","103","  }","104","","105","  private List<AnalyzeResponse.AnalyzeToken> analyzeIndexedTokens(String text) {","106","    return tester.client().nativeClient().admin().indices().prepareAnalyze(INDEX,","107","      text)","108","      .setField(FIELD_RULE_HTML_DESCRIPTION)","109","      .execute().actionGet().getTokens();","110","  }"],"delete":["30","  IndexDefinition.IndexDefinitionContext underTest = new IndexDefinition.IndexDefinitionContext();","33","  public void define() {","34","    RuleIndexDefinition def = new RuleIndexDefinition(new Settings());","35","    def.define(underTest);","37","    assertThat(underTest.getIndices()).hasSize(1);","38","    NewIndex ruleIndex = underTest.getIndices().get(\"rules\");"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/es\/DefaultIndexSettings.java":[{"add":["64","      \/\/ English HTML analyzer","65","      .put(\"index.analysis.analyzer.html_analyzer.type\", \"custom\")","66","      .put(\"index.analysis.analyzer.html_analyzer.tokenizer\", \"standard\")","67","      .putArray(\"index.analysis.analyzer.html_analyzer.filter\",","68","        \"standard\", \"lowercase\", \"stop\", \"asciifolding\", \"porter_stem\")","69","      .putArray(\"index.analysis.analyzer.html_analyzer.char_filter\", \"html_strip\")","70",""],"delete":[]}]}},"95889c7f11fa494e0432c1e64906f9d0cdef2946":{"changes":{"tests\/src\/test\/java\/org\/sonarqube\/tests\/authorization\/SystemPasscodeTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/authentication\/UserSessionInitializer.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/authentication\/UserSessionInitializerTest.java":"MODIFY"},"diff":{"tests\/src\/test\/java\/org\/sonarqube\/tests\/authorization\/SystemPasscodeTest.java":[{"add":["22","import java.util.Arrays;","73","  @Test","74","  public void system_access_is_granted_even_with_forceAuthentication_is_set_to_true() {","75","    tester.settings().setGlobalSetting(\"sonar.forceAuthentication\", \"true\");","76","    Arrays.asList(\"\/api\/ce\/pause\", \"\/api\/ce\/resume\", \"\/api\/system\/health\", \"\/api\/system\/info\")","77","      .forEach(url -> {","78","          WsRequest request = new GetRequest(\"api\/system\/health\")","79","            .setHeader(PASSCODE_HEADER, VALID_PASSCODE);","80","","81","          WsResponse response = tester.asAnonymous().wsClient().wsConnector().call(request);","82","          assertThat(response.code()).isEqualTo(200);","83","        }","84","      );","85","    tester.settings().setGlobalSetting(\"sonar.forceAuthentication\", \"false\");","86","  }","87",""],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/authentication\/UserSessionInitializer.java":[{"add":["67","  private static final Set<String> URL_USING_PASSCODE = ImmutableSet.of(","68","    \"\/api\/ce\/info\", \"\/api\/ce\/pause\", \"\/api\/ce\/resume\", \"\/api\/system\/health\"","69","  );","70","","77","  private static final UrlPattern PASSCODE_URLS = UrlPattern.builder()","78","    .includes(URL_USING_PASSCODE)","79","    .build();","80","","101","        loadUserSession(request, response, PASSCODE_URLS.matches(path));","125","  private void loadUserSession(HttpServletRequest request, HttpServletResponse response, boolean usingPasscode) {","131","      if (!usingPasscode) {","132","        failIfAuthenticationIsRequired();","133","      }"],"delete":["93","        loadUserSession(request, response);","117","  private void loadUserSession(HttpServletRequest request, HttpServletResponse response) {","123","      failIfAuthenticationIsRequired();"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/authentication\/UserSessionInitializerTest.java":[{"add":["107","    \/\/ exlude passcode urls","108","    assertPathIsIgnoredWithAnonymousAccess(\"\/api\/ce\/info\");","109","    assertPathIsIgnoredWithAnonymousAccess(\"\/api\/ce\/pause\");","110","    assertPathIsIgnoredWithAnonymousAccess(\"\/api\/ce\/resume\");","111","    assertPathIsIgnoredWithAnonymousAccess(\"\/api\/system\/health\");","112","","193","  private void assertPathIsIgnoredWithAnonymousAccess(String path) {","194","    when(request.getRequestURI()).thenReturn(path);","195","","196","    assertThat(underTest.initUserSession(request, response)).isTrue();","197","","198","    verify(userSession).set(any(UserSession.class));","199","    reset(userSession, authenticators);","200","  }","201",""],"delete":[]}]}},"b4201256a7e4d8b153ecf0cb074f6e264df67f17":{"changes":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/helpers\/application_helper.rb":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/helpers\/application_helper.rb":[{"add":["210","          date = snapshot_datetime.strftime('%FT%T%z')"],"delete":["210","          date = snapshot_datetime.to_date"]}]}},"6d6d5f77cb72d1a4cb66d15da9c2a786d46a7e85":{"changes":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/helpers\/measures_helper.rb":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/helpers\/measures_helper.rb":[{"add":["23","      html = link_to_function(h(column.title_label), \"refreshList#{widget_id}('#{h escape_javascript column.key}',#{!filter.sort_asc?}, '#{h(escape_javascript(filter.criteria[:page])) || 1}')\", :title => h(column.tooltip))"],"delete":["23","      html = link_to_function(h(column.title_label), \"refreshList#{widget_id}('#{escape_javascript column.key}',#{!filter.sort_asc?}, '#{filter.criteria[:page]||1}')\", :title => h(column.tooltip))"]}]}},"6cf8d48fe9ffbe43299c4d774336866f12a43138":{"changes":{"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/server\/rule\/RulesDefinitionXmlLoaderTest.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/server\/rule\/RulesDefinitionXmlLoader.java":"MODIFY"},"diff":{"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/server\/rule\/RulesDefinitionXmlLoaderTest.java":[{"add":["34","import static org.sonar.test.ExceptionCauseMatcher.hasType;","201","    expectedException.expect(IllegalStateException.class);","202","    expectedException.expectMessage(\"Fail to load the rule with key [squid:1]\");","203","    expectedException.expectCause(hasType(IllegalArgumentException.class)","204","      .andMessage(\"No enum constant org.sonar.api.server.debt.DebtRemediationFunction.Type.UNKNOWN\"));","205","","206","    load(\"\" +","207","      \"<rules>\" +","208","      \"  <rule>\" +","209","      \"    <key>1<\/key>\" +","210","      \"    <name>One<\/name>\" +","211","      \"    <description>Desc<\/description>\" +","212","      \"    <remediationFunction>UNKNOWN<\/remediationFunction>\" +","213","      \"  <\/rule>\" +","214","      \"<\/rules>\");","254","    String xml = \"\" +","255","      \"<rules>\" +","256","      \"  <rule>\" +","257","      \"    <key>1<\/key>\" +","258","      \"    <name>One<\/name>\" +","259","      \"    <description>Desc<\/description>\" +","260","      \"    <descriptionFormat>UNKNOWN<\/descriptionFormat>\" +","261","      \"  <\/rule>\" +","262","      \"<\/rules>\";","263","","264","    expectedException.expect(IllegalStateException.class);","265","    expectedException.expectMessage(\"Fail to load the rule with key [squid:1]\");","266","    expectedException.expectCause(hasType(IllegalArgumentException.class)","267","      .andMessage(\"No enum constant org.sonar.api.server.rule.RulesDefinitionXmlLoader.DescriptionFormat.UNKNOWN\"));","268","","269","    load(xml).rule(\"1\");"],"delete":["34","import static org.junit.Assert.fail;","201","    try {","202","      load(\"\" +","203","        \"<rules>\" +","204","        \"  <rule>\" +","205","        \"    <key>1<\/key>\" +","206","        \"    <name>One<\/name>\" +","207","        \"    <description>Desc<\/description>\" +","208","        \"    <remediationFunction>UNKNOWN<\/remediationFunction>\" +","209","        \"  <\/rule>\" +","210","        \"<\/rules>\");","211","      fail();","212","    } catch (IllegalArgumentException e) {","213","      assertThat(e).hasMessageContaining(\"Fail to load the rule with key [squid:1]\");","214","      assertThat(e.getCause()).hasMessageContaining(\"No enum constant org.sonar.api.server.debt.DebtRemediationFunction.Type.UNKNOWN\");","215","    }","255","    try {","256","      String xml = \"\" +","257","        \"<rules>\" +","258","        \"  <rule>\" +","259","        \"    <key>1<\/key>\" +","260","        \"    <name>One<\/name>\" +","261","        \"    <description>Desc<\/description>\" +","262","        \"    <descriptionFormat>UNKNOWN<\/descriptionFormat>\" +","263","        \"  <\/rule>\" +","264","        \"<\/rules>\";","265","      RulesDefinition.Rule rule = load(xml).rule(\"1\");","266","      assertThat(rule.markdownDescription()).isEqualTo(\"Desc\");","267","      assertThat(rule.htmlDescription()).isNull();","268","    } catch (IllegalArgumentException e) {","269","      assertThat(e).hasMessageContaining(\"Fail to load the rule with key [squid:1]\");","270","      assertThat(e.getCause()).hasMessageContaining(\"No enum constant org.sonar.api.server.rule.RulesDefinitionXmlLoader.DescriptionFormat.UNKNOWN\");","271","    }"]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/server\/rule\/RulesDefinitionXmlLoader.java":[{"add":["341","      throw new IllegalStateException(format(\"Fail to load the rule with key [%s:%s]\", repo.key(), key), e);"],"delete":["341","      throw new IllegalArgumentException(format(\"Fail to load the rule with key [%s:%s]\", repo.key(), key), e);"]}]}},"0e95468857452a3a61ca0f697d17f3332ebb48fc":{"changes":{"sonar-core\/src\/main\/java\/org\/sonar\/core\/issue\/db\/IssueDto.java":"MODIFY"},"diff":{"sonar-core\/src\/main\/java\/org\/sonar\/core\/issue\/db\/IssueDto.java":[{"add":["662","    issue.setChecksum(checksum);"],"delete":[]}]}},"6658ba9fc4cc8cf99c95ad33c0be6786e15348e8":{"changes":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/measures\/CoreMetrics.java":"MODIFY"},"diff":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["1730","metric.new_lines.name=New Lines","1731","metric.new_lines.description=New lines"],"delete":["1730","metric.new_lines.name=Lines of New Code","1731","metric.new_lines.description=Non commenting lines of new code"]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/measures\/CoreMetrics.java":[{"add":["140","  public static final Metric<Integer> NEW_LINES = new Metric.Builder(NEW_LINES_KEY, \"New Lines\", Metric.ValueType.INT)","141","    .setDescription(\"New lines\")"],"delete":["140","  public static final Metric<Integer> NEW_LINES = new Metric.Builder(NEW_LINES_KEY, \"Lines of New Code\", Metric.ValueType.INT)","141","    .setDescription(\"Non commenting lines of new code\")"]}]}},"84d384a1dcf882eee912033382831968f6949cce":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/text\/MacroInterpreterTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/text\/RuleMacro.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/text\/MacroInterpreterTest.java":[{"add":["50","    \/\/ key of repository and rule can contain alphanumeric latin characters, dashes, underscores and dots","51","    String ruleKey = \"Some_Repo-Key.1:Some_Rule-Key.1\";","54","    \/\/ colon should be escaped","55","    assertThat(result).isEqualTo(\"See <a href='\" + path + \"\/coding_rules#rule_key=Some_Repo-Key.1%3ASome_Rule-Key.1'>Some_Rule-Key.1<\/a> for detail.\");"],"delete":["50","    String ruleKey = \"repo:key\";","53","    assertThat(result).isEqualTo(\"See <a href='\" + path + \"\/coding_rules#rule_key=\" + ruleKey + \"'>key<\/a> for detail.\");","56","  @Test","57","  public void should_replace_rule_macro_containing_digit_and_dash() {","58","    String ruleKey = \"my-repo1:my-key1\";","59","    String origin = \"See {rule:\" + ruleKey + \"} for detail.\";","60","    String result = interpreter.interpret(origin);","61","    assertThat(result).isEqualTo(\"See <a href='\" + path + \"\/coding_rules#rule_key=\" + ruleKey + \"'>my-key1<\/a> for detail.\");","62","  }"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/text\/RuleMacro.java":[{"add":["23","  private static final String COLON = \"%3A\";","40","    return \"<a href='\" + contextPath + \"\/coding_rules#rule_key=$1\" + COLON + \"$2'>$2<\/a>\";"],"delete":["39","    return \"<a href='\" + contextPath + \"\/coding_rules#rule_key=$1:$2'>$2<\/a>\";"]}]}},"a80e6c126c0a99b7cb13bf2ce6672c936c69b172":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/step\/NewSizeMeasuresStepTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/step\/ReportNewCoverageMeasuresStepTest.java":"MODIFY","it\/it-tests\/src\/test\/java\/it\/measureHistory\/DifferentialPeriodsTest.java":"MODIFY","it\/it-tests\/src\/test\/java\/it\/dbCleaner\/PurgeTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/step\/NewCoverageMeasuresStep.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/step\/NewSizeMeasuresStep.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/step\/NewSizeMeasuresStepTest.java":[{"add":["128","    assertNoRawMeasure(FILE_3_REF, NEW_LINES_KEY);","131","    assertNoRawMeasure(DIRECTORY_2_REF, NEW_LINES_KEY);","139","  public void does_not_compute_new_lines_when_no_changeset() {","142","    assertNoRawMeasures(NEW_LINES_KEY);","230","    assertNoRawMeasure(DIRECTORY_2_REF, NEW_DUPLICATED_LINES_KEY);"],"delete":["128","    assertRawMeasureValueOnPeriod2AndZeroOnPeriod5(FILE_3_REF, NEW_LINES_KEY, 0);","131","    assertRawMeasureValueOnPeriod2AndZeroOnPeriod5(DIRECTORY_2_REF, NEW_LINES_KEY, 0);","139","  public void compute_new_lines_with_no_changeset() {","142","    assertComputedAndAggregatedToZeroInt(NEW_LINES_KEY);","143","  }","144","","145","  @Test","146","  public void compute_new_lines_with_no_ncloc_data() {","147","    underTest.execute();","148","","149","    assertComputedAndAggregatedToZeroInt(NEW_LINES_KEY);","237","    assertRawMeasureValueOnPeriod2AndZeroOnPeriod5(DIRECTORY_2_REF, NEW_DUPLICATED_LINES_KEY, 0d);"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/step\/ReportNewCoverageMeasuresStepTest.java":[{"add":["29","import org.sonar.server.computation.task.projectanalysis.component.TreeRootHolderRule;","47","import static org.sonar.api.measures.CoreMetrics.NEW_IT_CONDITIONS_TO_COVER_KEY;","48","import static org.sonar.api.measures.CoreMetrics.NEW_IT_LINES_TO_COVER_KEY;","49","import static org.sonar.api.measures.CoreMetrics.NEW_IT_UNCOVERED_CONDITIONS_KEY;","50","import static org.sonar.api.measures.CoreMetrics.NEW_IT_UNCOVERED_LINES_KEY;","52","import static org.sonar.api.measures.CoreMetrics.NEW_OVERALL_CONDITIONS_TO_COVER_KEY;","53","import static org.sonar.api.measures.CoreMetrics.NEW_OVERALL_LINES_TO_COVER_KEY;","54","import static org.sonar.api.measures.CoreMetrics.NEW_OVERALL_UNCOVERED_CONDITIONS_KEY;","55","import static org.sonar.api.measures.CoreMetrics.NEW_OVERALL_UNCOVERED_LINES_KEY;","88","                  builder(FILE, FILE_1_REF).build())","89","                .build(),","93","                  builder(FILE, FILE_3_REF).build())","94","                .build())","95","            .build())","96","        .build())","97","    .build();","199","  public void zero_measures_when_nothing_has_changed() {","206","      Changeset.newChangesetBuilder().setDate(parseDate(\"2008-08-02\").getTime()).setRevision(\"rev-1\").build());","214","    verify_only_zero_measures_on_new_lines_and_conditions_measures(FILE_COMPONENT);","218","  public void zero_measures_for_FILE_component_without_CoverageData() {","219","    treeRootHolder.setRoot(FILE_COMPONENT);","222","      Changeset.newChangesetBuilder().setDate(parseDate(\"2008-05-18\").getTime()).setRevision(\"rev-1\").build());","226","    verify_only_zero_measures_on_new_lines_and_conditions_measures(FILE_COMPONENT);","244","    String newLinesToCover = NEW_IT_LINES_TO_COVER_KEY;","245","    String newUncoveredLines = NEW_IT_UNCOVERED_LINES_KEY;","246","    String newConditionsToCover = NEW_IT_CONDITIONS_TO_COVER_KEY;","247","    String newUncoveredConditions = NEW_IT_UNCOVERED_CONDITIONS_KEY;","256","    String newLinesToCover = NEW_OVERALL_LINES_TO_COVER_KEY;","257","    String newUncoveredLines = NEW_OVERALL_UNCOVERED_LINES_KEY;","258","    String newConditionsToCover = NEW_OVERALL_CONDITIONS_TO_COVER_KEY;","259","    String newUncoveredConditions = NEW_OVERALL_UNCOVERED_CONDITIONS_KEY;","272","      Changeset.newChangesetBuilder().setDate(parseDate(\"2011-01-01\").getTime()).setRevision(\"rev-1\").build());","279","      entryOf(newLinesToCover, createMeasure(2d, 0d)),","280","      entryOf(newUncoveredLines, createMeasure(1d, 0d)),","281","      entryOf(newConditionsToCover, createMeasure(0d, 0d)),","282","      entryOf(newUncoveredConditions, createMeasure(0d, 0d)));","304","    String newLinesToCover = NEW_IT_LINES_TO_COVER_KEY;","305","    String newUncoveredLines = NEW_IT_UNCOVERED_LINES_KEY;","306","    String newConditionsToCover = NEW_IT_CONDITIONS_TO_COVER_KEY;","307","    String newUncoveredConditions = NEW_IT_UNCOVERED_CONDITIONS_KEY;","318","    String newLinesToCover = NEW_OVERALL_LINES_TO_COVER_KEY;","319","    String newUncoveredLines = NEW_OVERALL_UNCOVERED_LINES_KEY;","320","    String newConditionsToCover = NEW_OVERALL_CONDITIONS_TO_COVER_KEY;","321","    String newUncoveredConditions = NEW_OVERALL_UNCOVERED_CONDITIONS_KEY;","332","    String newLinesToCover = NEW_IT_LINES_TO_COVER_KEY;","333","    String newUncoveredLines = NEW_IT_UNCOVERED_LINES_KEY;","334","    String newConditionsToCover = NEW_IT_CONDITIONS_TO_COVER_KEY;","335","    String newUncoveredConditions = NEW_IT_UNCOVERED_CONDITIONS_KEY;","352","      entryOf(metricKeys.newUncoveredConditions, createMeasure(4d, 1d)));","357","      entryOf(metricKeys.newUncoveredConditions, createMeasure(14d, 6d)));","362","      entryOf(metricKeys.newUncoveredConditions, createMeasure(9d, 6d)));","368","      entryOf(metricKeys.newUncoveredConditions, createMeasure(4d, 1d)));","373","      entryOf(metricKeys.newUncoveredConditions, createMeasure(23d, 12d)));","390","      CoreMetrics.NEW_UNCOVERED_LINES_KEY, CoreMetrics.NEW_UNCOVERED_CONDITIONS_KEY);","401","      NEW_IT_LINES_TO_COVER_KEY, NEW_IT_CONDITIONS_TO_COVER_KEY,","402","      NEW_IT_UNCOVERED_LINES_KEY, NEW_IT_UNCOVERED_CONDITIONS_KEY);","413","      NEW_OVERALL_LINES_TO_COVER_KEY, NEW_OVERALL_CONDITIONS_TO_COVER_KEY,","414","      NEW_OVERALL_UNCOVERED_LINES_KEY, NEW_OVERALL_UNCOVERED_CONDITIONS_KEY);","440","      entryOf(branchCoverageKey, createMeasure(97d, 96d)));","444","      entryOf(branchCoverageKey, createMeasure(96d, 97d)));","450","      entryOf(branchCoverageKey, createMeasure(97d, 96d)));","455","      entryOf(branchCoverageKey, createMeasure(96d, 97d)));","468","  private void verify_only_zero_measures_on_new_lines_and_conditions_measures(Component component) {","469","    assertThat(toEntries(measureRepository.getAddedRawMeasures(component.getReportAttributes().getRef()))).containsOnly(","470","      entryOf(NEW_LINES_TO_COVER_KEY, createMeasure(0d, 0d)),","471","      entryOf(NEW_UNCOVERED_LINES_KEY, createMeasure(0d, 0d)),","472","      entryOf(NEW_CONDITIONS_TO_COVER_KEY, createMeasure(0d, 0d)),","473","      entryOf(NEW_UNCOVERED_CONDITIONS_KEY, createMeasure(0d, 0d)),","474","","475","      entryOf(NEW_IT_LINES_TO_COVER_KEY, createMeasure(0d, 0d)),","476","      entryOf(NEW_IT_UNCOVERED_LINES_KEY, createMeasure(0d, 0d)),","477","      entryOf(NEW_IT_CONDITIONS_TO_COVER_KEY, createMeasure(0d, 0d)),","478","      entryOf(NEW_IT_UNCOVERED_CONDITIONS_KEY, createMeasure(0d, 0d)),","479","","480","      entryOf(NEW_OVERALL_LINES_TO_COVER_KEY, createMeasure(0d, 0d)),","481","      entryOf(NEW_OVERALL_UNCOVERED_LINES_KEY, createMeasure(0d, 0d)),","482","      entryOf(NEW_OVERALL_CONDITIONS_TO_COVER_KEY, createMeasure(0d, 0d)),","483","      entryOf(NEW_OVERALL_UNCOVERED_CONDITIONS_KEY, createMeasure(0d, 0d)));","484","  }","485","","494","      Changeset.newChangesetBuilder().setDate(parseDate(\"2012-02-23\").getTime()).setRevision(\"rev-3\").build());","545","      entryOf(metricKeys.newUncoveredConditions, createMeasure(4d, 1d)));"],"delete":["26","import org.sonar.server.computation.task.projectanalysis.component.TreeRootHolderRule;","80","                  builder(FILE, FILE_1_REF).build()","81","                ).build(),","85","                  builder(FILE, FILE_3_REF).build()","86","                ).build()","87","            )","88","            .build()","89","        ).build()","90","    ).build();","192","  public void verify_measure_of_condition_not_computed_if_there_is_none() {","193","    treeRootHolder.setRoot(FILE_COMPONENT);","194","    scmInfoRepository.setScmInfo(FILE_1_REF,","195","      Changeset.newChangesetBuilder().setDate(parseDate(\"2007-01-15\").getTime()).setRevision(\"rev-1\").build(),","196","      Changeset.newChangesetBuilder().setDate(parseDate(\"2007-01-15\").getTime()).setRevision(\"rev-1\").build(),","197","      Changeset.newChangesetBuilder().setDate(parseDate(\"2011-01-01\").getTime()).setRevision(\"rev-2\").build()","198","      );","199","","200","    underTest.execute();","201","","202","    assertThat(measureRepository.isEmpty()).isTrue();","203","  }","204","","205","  @Test","206","  public void verify_no_measure_when_nothing_has_changed() {","213","      Changeset.newChangesetBuilder().setDate(parseDate(\"2008-08-02\").getTime()).setRevision(\"rev-1\").build()","214","      );","222","    assertThat(measureRepository.getAddedRawMeasures(FILE_COMPONENT.getReportAttributes().getRef())).isEmpty();","226","  public void no_measures_for_FILE_component_without_CoverageData() {","227","    ReportComponent fileComponent = ReportComponent.builder(Component.Type.FILE, FILE_1_REF).setFileAttributes(new FileAttributes(false, null)).build();","228","","229","    treeRootHolder.setRoot(fileComponent);","232","      Changeset.newChangesetBuilder().setDate(parseDate(\"2008-05-18\").getTime()).setRevision(\"rev-1\").build()","233","      );","237","    assertThat(measureRepository.isEmpty()).isTrue();","255","    String newLinesToCover = CoreMetrics.NEW_IT_LINES_TO_COVER_KEY;","256","    String newUncoveredLines = CoreMetrics.NEW_IT_UNCOVERED_LINES_KEY;","257","    String newConditionsToCover = CoreMetrics.NEW_IT_CONDITIONS_TO_COVER_KEY;","258","    String newUncoveredConditions = CoreMetrics.NEW_IT_UNCOVERED_CONDITIONS_KEY;","267","    String newLinesToCover = CoreMetrics.NEW_OVERALL_LINES_TO_COVER_KEY;","268","    String newUncoveredLines = CoreMetrics.NEW_OVERALL_UNCOVERED_LINES_KEY;","269","    String newConditionsToCover = CoreMetrics.NEW_OVERALL_CONDITIONS_TO_COVER_KEY;","270","    String newUncoveredConditions = CoreMetrics.NEW_OVERALL_UNCOVERED_CONDITIONS_KEY;","283","      Changeset.newChangesetBuilder().setDate(parseDate(\"2011-01-01\").getTime()).setRevision(\"rev-1\").build()","284","      );","291","      entryOf(newLinesToCover, createMeasure(2d, null)),","292","      entryOf(newUncoveredLines, createMeasure(1d, null)),","293","      entryOf(newConditionsToCover, createMeasure(0d, null)),","294","      entryOf(newUncoveredConditions, createMeasure(0d, null))","295","      );","317","    String newLinesToCover = CoreMetrics.NEW_IT_LINES_TO_COVER_KEY;","318","    String newUncoveredLines = CoreMetrics.NEW_IT_UNCOVERED_LINES_KEY;","319","    String newConditionsToCover = CoreMetrics.NEW_IT_CONDITIONS_TO_COVER_KEY;","320","    String newUncoveredConditions = CoreMetrics.NEW_IT_UNCOVERED_CONDITIONS_KEY;","331","    String newLinesToCover = CoreMetrics.NEW_OVERALL_LINES_TO_COVER_KEY;","332","    String newUncoveredLines = CoreMetrics.NEW_OVERALL_UNCOVERED_LINES_KEY;","333","    String newConditionsToCover = CoreMetrics.NEW_OVERALL_CONDITIONS_TO_COVER_KEY;","334","    String newUncoveredConditions = CoreMetrics.NEW_OVERALL_UNCOVERED_CONDITIONS_KEY;","345","    String newLinesToCover = CoreMetrics.NEW_IT_LINES_TO_COVER_KEY;","346","    String newUncoveredLines = CoreMetrics.NEW_IT_UNCOVERED_LINES_KEY;","347","    String newConditionsToCover = CoreMetrics.NEW_IT_CONDITIONS_TO_COVER_KEY;","348","    String newUncoveredConditions = CoreMetrics.NEW_IT_UNCOVERED_CONDITIONS_KEY;","365","      entryOf(metricKeys.newUncoveredConditions, createMeasure(4d, 1d))","366","      );","371","      entryOf(metricKeys.newUncoveredConditions, createMeasure(14d, 6d))","372","      );","377","      entryOf(metricKeys.newUncoveredConditions, createMeasure(9d, 6d))","378","      );","384","      entryOf(metricKeys.newUncoveredConditions, createMeasure(4d, 1d))","385","      );","390","      entryOf(metricKeys.newUncoveredConditions, createMeasure(23d, 12d))","391","      );","408","      CoreMetrics.NEW_UNCOVERED_LINES_KEY, CoreMetrics.NEW_UNCOVERED_CONDITIONS_KEY","409","      );","420","      CoreMetrics.NEW_IT_LINES_TO_COVER_KEY, CoreMetrics.NEW_IT_CONDITIONS_TO_COVER_KEY,","421","      CoreMetrics.NEW_IT_UNCOVERED_LINES_KEY, CoreMetrics.NEW_IT_UNCOVERED_CONDITIONS_KEY","422","      );","433","      CoreMetrics.NEW_OVERALL_LINES_TO_COVER_KEY, CoreMetrics.NEW_OVERALL_CONDITIONS_TO_COVER_KEY,","434","      CoreMetrics.NEW_OVERALL_UNCOVERED_LINES_KEY, CoreMetrics.NEW_OVERALL_UNCOVERED_CONDITIONS_KEY","435","      );","461","      entryOf(branchCoverageKey, createMeasure(97d, 96d))","462","      );","466","      entryOf(branchCoverageKey, createMeasure(96d, 97d))","467","      );","473","      entryOf(branchCoverageKey, createMeasure(97d, 96d))","474","      );","479","      entryOf(branchCoverageKey, createMeasure(96d, 97d))","480","      );","501","      Changeset.newChangesetBuilder().setDate(parseDate(\"2012-02-23\").getTime()).setRevision(\"rev-3\").build()","502","      );","553","      entryOf(metricKeys.newUncoveredConditions, createMeasure(4d, 1d))","554","      );"]}],"it\/it-tests\/src\/test\/java\/it\/measureHistory\/DifferentialPeriodsTest.java":[{"add":["21","import com.google.common.collect.ImmutableMap;","25","import java.util.ArrayList;","28","import java.util.Map;","29","import java.util.stream.Collectors;","32","import org.junit.BeforeClass;","38","import org.sonarqube.ws.WsMeasures;","39","import org.sonarqube.ws.client.WsClient;","40","import org.sonarqube.ws.client.measure.ComponentWsRequest;","43","import static java.util.Arrays.asList;","44","import static java.util.Collections.singletonList;","48","import static util.ItUtils.newAdminWsClient;","49","import static util.ItUtils.resetPeriods;","58","  static WsClient CLIENT;","59","","63","  @BeforeClass","64","  public static void createWsClient() throws Exception {","65","    CLIENT = newAdminWsClient(orchestrator);","66","  }","67","","74","  public void reset() throws Exception {","75","    resetPeriods(orchestrator);","84","    setServerProperty(orchestrator, \"sonar.timemachine.period1\", \"previous_analysis\");","85","    setServerProperty(orchestrator, \"sonar.timemachine.period2\", \"previous_analysis\");","86","    setServerProperty(orchestrator, \"sonar.timemachine.period3\", \"previous_analysis\");","111","      ResourceQuery.createForMetrics(\"sample:src\/main\/xoo\/sample\/Sample.xoo\", \"new_technical_debt\").setIncludeTrends(true));","163","      \"sonar.modules\", \"module_a\");","170","      \"sonar.modules\", \"module_a,module_b\");","179","  @Test","180","  public void compute_no_new_lines_measures_when_changes_but_no_scm() throws Exception {","181","    orchestrator.getServer().provisionProject(MULTI_MODULE_PROJECT_KEY, MULTI_MODULE_PROJECT_KEY);","182","    setServerProperty(orchestrator, MULTI_MODULE_PROJECT_KEY, \"sonar.timemachine.period1\", \"previous_analysis\");","183","","184","    \/\/ Execute an analysis 60 days ago without module b","185","    orchestrator.getServer().associateProjectToQualityProfile(MULTI_MODULE_PROJECT_KEY, \"xoo\", \"empty\");","186","    runProjectAnalysis(orchestrator, \"shared\/xoo-multi-modules-sample\",","187","      \"sonar.projectDate\", formatDate(addDays(new Date(), -60)),","188","      \"sonar.modules\", \"module_a\");","189","","190","    \/\/ Second analysis, 20 days ago","191","    orchestrator.getServer().restoreProfile(FileLocation.ofClasspath(\"\/measureHistory\/one-issue-per-line-profile.xml\"));","192","    orchestrator.getServer().associateProjectToQualityProfile(MULTI_MODULE_PROJECT_KEY, \"xoo\", \"one-issue-per-line\");","193","    runProjectAnalysis(orchestrator, \"shared\/xoo-multi-modules-sample\",","194","      \"sonar.projectDate\", formatDate(addDays(new Date(), -20)),","195","      \"sonar.modules\", \"module_a,module_b\");","196","","197","    \/\/ No new lines measure","198","    assertNoMeasures(MULTI_MODULE_PROJECT_KEY, \"new_lines\", \"new_lines_to_cover\");","199","  }","200","","201","  @Test","202","  public void compute_zero_new_lines_measures_when_no_changes_and_scm_available() throws Exception {","203","    String projectKey = \"sample-scm\";","204","    orchestrator.getServer().provisionProject(projectKey, projectKey);","205","    setServerProperty(orchestrator, projectKey, \"sonar.timemachine.period1\", \"previous_analysis\");","206","","207","    \/\/ Execute an analysis 60 days ago","208","    runProjectAnalysis(orchestrator, \"scm\/xoo-sample-with-scm\", \"sonar.projectDate\", formatDate(addDays(new Date(), -60)),","209","      \"sonar.scm.provider\", \"xoo\", \"sonar.scm.disabled\", \"false\");","210","","211","    \/\/ Second analysis, 20 days ago","212","    runProjectAnalysis(orchestrator, \"scm\/xoo-sample-with-scm\", \"sonar.projectDate\", formatDate(addDays(new Date(), -20)),","213","      \"sonar.scm.provider\", \"xoo\", \"sonar.scm.disabled\", \"false\");","214","","215","    \/\/ New lines measures is zero","216","    assertMeasures(projectKey, ImmutableMap.of(\"new_lines\", 0, \"new_lines_to_cover\", 0));","217","  }","218","","219","  private void assertMeasures(String projectKey, Map<String, Integer> expectedMeasures) {","220","    WsMeasures.ComponentWsResponse response = CLIENT.measures().component(new ComponentWsRequest()","221","      .setComponentKey(projectKey)","222","      .setMetricKeys(new ArrayList<>(expectedMeasures.keySet()))","223","      .setAdditionalFields(singletonList(\"periods\")));","224","    Map<String, Integer> measures = response.getComponent().getMeasuresList().stream()","225","      .collect(Collectors.toMap(WsMeasures.Measure::getMetric, m -> Integer.parseInt(m.getPeriods().getPeriodsValue(0).getValue())));","226","    assertThat(measures).isEqualTo(expectedMeasures);","227","  }","228","","229","  private void assertNoMeasures(String projectKey, String... metrics) {","230","    WsMeasures.ComponentWsResponse response = CLIENT.measures().component(new ComponentWsRequest()","231","      .setComponentKey(projectKey)","232","      .setMetricKeys(asList(metrics))","233","      .setAdditionalFields(singletonList(\"periods\")));","234","    assertThat(response.getComponent().getMeasuresList()).isEmpty();","235","  }","236",""],"delete":["34","import util.ItUtils;","55","  @Before","56","  public void initPeriods() throws Exception {","57","    setServerProperty(orchestrator, \"sonar.timemachine.period1\", \"previous_analysis\");","58","    setServerProperty(orchestrator, \"sonar.timemachine.period2\", \"previous_analysis\");","59","    setServerProperty(orchestrator, \"sonar.timemachine.period3\", \"previous_analysis\");","60","  }","61","","63","  public void resetPeriods() throws Exception {","64","    ItUtils.resetPeriods(orchestrator);","97","      ResourceQuery.createForMetrics(\"sample:src\/main\/xoo\/sample\/Sample.xoo\", \"new_technical_debt\").setIncludeTrends(true)","98","      );","150","      \"sonar.modules\", \"module_a\"","151","    );","158","      \"sonar.modules\", \"module_a,module_b\"","159","    );"]}],"it\/it-tests\/src\/test\/java\/it\/dbCleaner\/PurgeTest.java":[{"add":["117","    int newMeasuresOnTrk = 55;","118","    int newMeasuresOnBrc = 286;","119","    int newMeasuresOnDir = 44;","120","    int newMeasuresOnFil = 0;","131","      equalTo(121));"],"delete":["117","    int newMeasuresOnTrk = 56;","118","    int newMeasuresOnBrc = 292;","119","    int newMeasuresOnDir = 48;","120","    int newMeasuresOnFil = 4;","131","      equalTo(136));"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/step\/NewCoverageMeasuresStep.java":[{"add":["377","      context.getPeriods().forEach(period -> {","378","        newLines.increment(period, 0);","379","        newCoveredLines.increment(period, 0);","380","        newConditions.increment(period, 0);","381","        newCoveredConditions.increment(period, 0);","382","      });","384","      Optional<Measure> hitsByLineMeasure = context.getMeasure(metricKeys.getCoverageLineHitsData());"],"delete":["377","      Optional<Measure> hitsByLineMeasure = context.getMeasure(metricKeys.getCoverageLineHitsData());","378","      if (!hitsByLineMeasure.isPresent() || hitsByLineMeasure.get().getValueType() == Measure.ValueType.NO_VALUE) {","379","        return;","380","      }"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/step\/NewSizeMeasuresStep.java":[{"add":["125","      Optional<ScmInfo> scmInfo = scmInfoRepository.getScmInfo(leaf);","126","      if (!scmInfo.isPresent()) {","127","        return;","128","      }","129",""],"delete":["133","      Optional<ScmInfo> scmInfo = scmInfoRepository.getScmInfo(leaf);","134","      if (!scmInfo.isPresent()) {","135","        return;","136","      }"]}]}},"a26c8cf3d00955a807ade179d24e68b66aaf669f":{"changes":{"\/dev\/null":"DELETE","it\/it-projects\/scm\/xoo-sample-with-scm\/sonar-project.properties":"ADD","it\/it-projects\/scm\/xoo-sample-with-scm\/src\/main\/xoo\/sample\/Sample.xoo":"ADD","plugins\/sonar-xoo-plugin\/src\/main\/java\/org\/sonar\/xoo\/scm\/XooBlameCommand.java":"MODIFY","it\/it-tests\/src\/test\/java\/it\/Category2Suite.java":"MODIFY","it\/it-tests\/src\/test\/java\/it\/scm\/ScmTest.java":"ADD","it\/it-projects\/scm\/xoo-sample-with-scm\/src\/main\/xoo\/sample\/Sample.xoo.scm":"ADD"},"diff":{"\/dev\/null":[{"add":[],"delete":[]}],"it\/it-projects\/scm\/xoo-sample-with-scm\/sonar-project.properties":[{"add":[],"delete":[]}],"it\/it-projects\/scm\/xoo-sample-with-scm\/src\/main\/xoo\/sample\/Sample.xoo":[{"add":[],"delete":[]}],"plugins\/sonar-xoo-plugin\/src\/main\/java\/org\/sonar\/xoo\/scm\/XooBlameCommand.java":[{"add":["26","import java.util.Date;","71","            Date dateTime = DateUtils.parseDateTimeQuietly(dateStr);","72","            if (dateTime != null) {","73","              blameLine.date(dateTime);","74","            } else {","75","              \/\/ Will throw an exception, when date is not in format \"yyyy-MM-dd\"","76","              blameLine.date(DateUtils.parseDate(dateStr));","77","            }"],"delete":["69","          \/\/ Will throw an exception, when date is not in format \"yyyy-MM-dd\"","71","            blameLine.date(DateUtils.parseDate(dateStr));"]}],"it\/it-tests\/src\/test\/java\/it\/Category2Suite.java":[{"add":["46","import it.scm.ScmTest;","65","  \/\/ scm","66","  ScmTest.class,"],"delete":[]}],"it\/it-tests\/src\/test\/java\/it\/scm\/ScmTest.java":[{"add":[],"delete":[]}],"it\/it-projects\/scm\/xoo-sample-with-scm\/src\/main\/xoo\/sample\/Sample.xoo.scm":[{"add":[],"delete":[]}]}},"d87f9c38b93c4078a4d43689e7decca87e527a86":{"changes":{"server\/sonar-web\/src\/main\/less\/components\/page.less":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/less\/components\/page.less":[{"add":["12","  min-width: 1080px;"],"delete":["0","\/*","1"," * SonarQube, open source software quality management tool.","2"," * Copyright (C) 2008-2014 SonarSource","3"," * mailto:contact AT sonarsource DOT com","4"," *","5"," * SonarQube is free software; you can redistribute it and\/or","6"," * modify it under the terms of the GNU Lesser General Public","7"," * License as published by the Free Software Foundation; either","8"," * version 3 of the License, or (at your option) any later version.","9"," *","10"," * SonarQube is distributed in the hope that it will be useful,","11"," * but WITHOUT ANY WARRANTY; without even the implied warranty of","12"," * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU","13"," * Lesser General Public License for more details.","14"," *","15"," * You should have received a copy of the GNU Lesser General Public License","16"," * along with this program; if not, write to the Free Software Foundation,","17"," * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.","18"," *\/","31","  min-width: 980px;"]}]}},"5a5a4877386e11a465fc61abfc59bee4759b5861":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/__tests__\/Timeline-test.js":"ADD","server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/Timeline.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/__tests__\/__snapshots__\/Timeline-test.js.snap":"ADD"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/__tests__\/Timeline-test.js":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/Timeline.js":[{"add":["52","    const domain = [0, max(this.props.history, d => parseFloat(d.value))];"],"delete":["52","","53","    const domain = [0, max(this.props.history, d => d.value)];","54",""]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/__tests__\/__snapshots__\/Timeline-test.js.snap":[{"add":[],"delete":[]}]}},"8813433bbee5e54f99224e3fb072019e894ae7d3":{"changes":{"sonar-db\/src\/main\/java\/org\/sonar\/db\/dialect\/MsSql.java":"MODIFY","sonar-db\/src\/test\/java\/org\/sonar\/db\/version\/ClobColumnDefTest.java":"MODIFY","\/dev\/null":"DELETE","sonar-db\/src\/main\/java\/org\/sonar\/db\/version\/MigrationStepModule.java":"MODIFY","sonar-db\/src\/test\/java\/org\/sonar\/db\/version\/AlterColumnsTypeBuilderTest.java":"MODIFY","sonar-db\/src\/test\/java\/org\/sonar\/db\/version\/VarcharColumnDefTest.java":"MODIFY","server\/sonar-web\/src\/main\/webapp\/WEB-INF\/gems\/gems\/activerecord-jdbc-adapter-1.1.3\/lib\/arjdbc\/mssql\/adapter.rb":"MODIFY","sonar-db\/src\/test\/java\/org\/sonar\/db\/version\/MigrationStepModuleTest.java":"MODIFY","sonar-db\/src\/main\/java\/org\/sonar\/db\/version\/ClobColumnDef.java":"MODIFY","sonar-db\/src\/test\/java\/org\/sonar\/db\/version\/AddColumnsBuilderTest.java":"MODIFY","sonar-db\/src\/main\/java\/org\/sonar\/db\/version\/VarcharColumnDef.java":"MODIFY","sonar-db\/src\/main\/resources\/org\/sonar\/db\/version\/rows-h2.sql":"MODIFY"},"diff":{"sonar-db\/src\/main\/java\/org\/sonar\/db\/dialect\/MsSql.java":[{"add":[],"delete":["27","  public static final String COLLATION = \"Latin1_General_CS_AS\";","28",""]}],"sonar-db\/src\/test\/java\/org\/sonar\/db\/version\/ClobColumnDefTest.java":[{"add":["64","    assertThat(def.generateSqlType(new MsSql())).isEqualTo(\"NVARCHAR (MAX)\");"],"delete":["64","    assertThat(def.generateSqlType(new MsSql())).isEqualTo(\"NVARCHAR (MAX) COLLATE Latin1_General_CS_AS\");"]}],"\/dev\/null":[{"add":[],"delete":[]}],"sonar-db\/src\/main\/java\/org\/sonar\/db\/version\/MigrationStepModule.java":[{"add":[],"delete":["61","import org.sonar.db.version.v53.FixMsSqlCollation;","137","      FixMsSqlCollation.class,"]}],"sonar-db\/src\/test\/java\/org\/sonar\/db\/version\/AlterColumnsTypeBuilderTest.java":[{"add":["56","      .containsOnly(\"ALTER TABLE issues ALTER COLUMN value DECIMAL (30,20)\", \"ALTER TABLE issues ALTER COLUMN name NVARCHAR (10)\");","62","      .containsOnly(\"ALTER TABLE issues ALTER COLUMN name NVARCHAR (10) NOT NULL\");"],"delete":["56","      .containsOnly(\"ALTER TABLE issues ALTER COLUMN value DECIMAL (30,20)\", \"ALTER TABLE issues ALTER COLUMN name NVARCHAR (10) COLLATE Latin1_General_CS_AS\");","62","      .containsOnly(\"ALTER TABLE issues ALTER COLUMN name NVARCHAR (10) COLLATE Latin1_General_CS_AS NOT NULL\");"]}],"sonar-db\/src\/test\/java\/org\/sonar\/db\/version\/VarcharColumnDefTest.java":[{"add":["73","    assertThat(def.generateSqlType(new MsSql())).isEqualTo(\"NVARCHAR (10)\");"],"delete":["73","    assertThat(def.generateSqlType(new MsSql())).isEqualTo(\"NVARCHAR (10) COLLATE Latin1_General_CS_AS\");"]}],"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/gems\/gems\/activerecord-jdbc-adapter-1.1.3\/lib\/arjdbc\/mssql\/adapter.rb":[{"add":["81","        'NVARCHAR(MAX)'"],"delete":["81","        'NVARCHAR(MAX) COLLATE Latin1_General_CS_AS'","84","      elsif type.to_s == 'string'","85","        super + ' COLLATE Latin1_General_CS_AS'"]}],"sonar-db\/src\/test\/java\/org\/sonar\/db\/version\/MigrationStepModuleTest.java":[{"add":["31","    assertThat(container.size()).isEqualTo(63);"],"delete":["31","    assertThat(container.size()).isEqualTo(64);"]}],"sonar-db\/src\/main\/java\/org\/sonar\/db\/version\/ClobColumnDef.java":[{"add":["45","      return \"NVARCHAR (MAX)\";"],"delete":["45","      return String.format(\"NVARCHAR (MAX) COLLATE %s\", MsSql.COLLATION);"]}],"sonar-db\/src\/test\/java\/org\/sonar\/db\/version\/AddColumnsBuilderTest.java":[{"add":["66","      .isEqualTo(\"ALTER TABLE issues ADD date_in_ms BIGINT NULL, name NVARCHAR (10) NOT NULL\");"],"delete":["66","      .isEqualTo(\"ALTER TABLE issues ADD date_in_ms BIGINT NULL, name NVARCHAR (10) COLLATE Latin1_General_CS_AS NOT NULL\");"]}],"sonar-db\/src\/main\/java\/org\/sonar\/db\/version\/VarcharColumnDef.java":[{"add":["51","      return format(\"NVARCHAR (%d)\", columnSize);"],"delete":["51","      return format(\"NVARCHAR (%d) COLLATE %s\", columnSize, MsSql.COLLATION);"]}],"sonar-db\/src\/main\/resources\/org\/sonar\/db\/version\/rows-h2.sql":[{"add":[],"delete":["364","INSERT INTO SCHEMA_MIGRATIONS(VERSION) VALUES ('1002');"]}]}},"e6203dbc6e7e1d8516dc8243afdaf3a7c41270a6":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/measure\/ws\/MeasureValueFormatter.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/measure\/ws\/MeasureValueFormatterTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/measure\/ws\/MeasureValueFormatter.java":[{"add":["42","      case MILLISEC:","67","      case MILLISEC:"],"delete":["41","      case MILLISEC:","66","      case MILLISEC:"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/measure\/ws\/MeasureValueFormatterTest.java":[{"add":["52","    assertThat(formatNumericalValue(6_000_000_000_000.0d, newMetric(MILLISEC))).isEqualTo(\"6000000000000\");","61","    assertThat(formatMeasureValue(newNumericMeasure(6_000_000_000_000.0d), newMetric(MILLISEC))).isEqualTo(\"6000000000000\");"],"delete":["59","    assertThat(formatMeasureValue(newNumericMeasure(1000d), newMetric(MILLISEC))).isEqualTo(\"1000\");"]}]}},"1ef10758eb1c939a60e159758de2603b87ec859d":{"changes":{"sonar-batch\/src\/main\/java\/org\/sonar\/batch\/rule\/RuleFinderCompatibility.java":"MODIFY","sonar-batch\/src\/test\/java\/org\/sonar\/batch\/rule\/RuleFinderCompatibilityTest.java":"ADD"},"diff":{"sonar-batch\/src\/main\/java\/org\/sonar\/batch\/rule\/RuleFinderCompatibility.java":[{"add":["21","import com.google.common.base.Function;","22","import com.google.common.collect.Collections2;","23","import org.apache.commons.lang.builder.ReflectionToStringBuilder;","24","import org.apache.commons.lang.builder.ToStringStyle;","25","import org.sonar.api.batch.rule.ActiveRule;","33","import javax.annotation.CheckForNull;","34","import javax.annotation.Nonnull;","35","import javax.annotation.Nullable;","37","import java.util.Arrays;","38","import java.util.Collection;","39","import java.util.Collections;","40","","41","\/**","42"," * FIXME Waiting for the list of all server rules on batch side this is implemented by redirecting on ActiveRules. This is not correct","43"," * since there is a difference between a rule that doesn't exists and a rule that is not activated in project quality profile.","44"," *","45"," *\/","66","    return toRule(activeRules.find(key));","71","    Collection<Rule> all = findAll(query);","72","    if (all.size() > 1) {","73","      throw new IllegalArgumentException(\"Non unique result for rule query: \" + ReflectionToStringBuilder.toString(query, ToStringStyle.SHORT_PREFIX_STYLE));","74","    } else if (all.isEmpty()) {","75","      return null;","76","    } else {","77","      return all.iterator().next();","78","    }","83","    if (query.getConfigKey() != null) {","84","      if (query.getRepositoryKey() != null && query.getKey() == null) {","85","        return byInternalKey(query);","86","      }","87","    } else if (query.getRepositoryKey() != null) {","88","      if (query.getKey() != null) {","89","        return byKey(query);","90","      } else {","91","        return byRepository(query);","92","      }","93","    }","97","  private Collection<Rule> byRepository(RuleQuery query) {","98","    return Collections2.transform(activeRules.findByRepository(query.getRepositoryKey()), new Function<ActiveRule, Rule>() {","99","      @Override","100","      public Rule apply(@Nonnull ActiveRule input) {","101","        return toRule(input);","102","      }","103","    });","104","  }","105","","106","  private Collection<Rule> byKey(RuleQuery query) {","107","    Rule rule = toRule(activeRules.find(RuleKey.of(query.getRepositoryKey(), query.getKey())));","108","    return rule != null ? Arrays.asList(rule) : Collections.<Rule>emptyList();","109","  }","110","","111","  private Collection<Rule> byInternalKey(RuleQuery query) {","112","    Rule rule = toRule(activeRules.findByInternalKey(query.getRepositoryKey(), query.getConfigKey()));","113","    return rule != null ? Arrays.asList(rule) : Collections.<Rule>emptyList();","114","  }","115","","116","  @CheckForNull","117","  private Rule toRule(@Nullable ActiveRule rule) {","118","    DefaultActiveRule ar = (DefaultActiveRule) rule;","119","    return ar == null ? null : Rule.create(ar.ruleKey().repository(), ar.ruleKey().rule()).setName(ar.name()).setConfigKey(ar.internalKey()).setLanguage(ar.language());","120","  }","121",""],"delete":["28","import java.util.Collection;","50","    DefaultActiveRule ar = (DefaultActiveRule) activeRules.find(key);","51","    return ar == null ? null : Rule.create(key.repository(), key.rule()).setName(ar.name());","56","    throw new UnsupportedOperationException(\"Unable to find rule by query\");"]}],"sonar-batch\/src\/test\/java\/org\/sonar\/batch\/rule\/RuleFinderCompatibilityTest.java":[{"add":[],"delete":[]}]}},"83194599aeb1542afe7d15dcc256d570ece21f94":{"changes":{"server\/sonar-web\/src\/main\/js\/app\/styles\/components\/page.css":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/app\/styles\/components\/page.css":[{"add":["261","  z-index: 100;"],"delete":[]}]}},"b007b2589ac52fad5a09bb53936aa9486fd1d8b5":{"changes":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/qualitygate\/QualityGateDbTester.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/metric\/ws\/DeleteAction.java":"MODIFY","it\/it-tests\/src\/test\/java\/it\/qualityGate\/QualityGateTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/metric\/ws\/DeleteActionTest.java":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/qualitygate\/QualityGateDbTester.java":[{"add":["25","import org.sonar.db.metric.MetricDto;","29","import static org.apache.commons.lang.RandomStringUtils.randomNumeric;","73","","74","  public QualityGateConditionDto addCondition(QualityGateDto qualityGate, MetricDto metric) {","75","    QualityGateConditionDto condition = new QualityGateConditionDto().setQualityGateId(qualityGate.getId())","76","      .setMetricId(metric.getId())","77","      .setOperator(\"GT\")","78","      .setWarningThreshold(randomNumeric(10))","79","      .setErrorThreshold(randomNumeric(10));","80","    dbClient.gateConditionDao().insert(condition, dbSession);","81","    db.commit();","82","    return condition;","83","  }"],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/metric\/ws\/DeleteAction.java":[{"add":["70","      dbClient.gateConditionDao().deleteConditionsWithInvalidMetrics(dbSession);"],"delete":[]}],"it\/it-tests\/src\/test\/java\/it\/qualityGate\/QualityGateTest.java":[{"add":["54","import static org.apache.commons.lang.RandomStringUtils.randomAlphabetic;","253","  @Test","254","  public void does_not_fail_when_condition_is_on_removed_metric() throws IOException {","255","    String customMetricKey = randomAlphabetic(10);","256","    createCustomIntMetric(orchestrator, customMetricKey);","257","    QualityGate simple = qgClient().create(\"OnCustomMetric\");","258","    qgClient().setDefault(simple.id());","259","    qgClient().createCondition(NewCondition.create(simple.id()).metricKey(customMetricKey).operator(\"GT\").warningThreshold(\"40\"));","260","    try {","261","      deleteCustomMetric(orchestrator, customMetricKey);","262","      String projectKey = newProjectKey();","263","      BuildResult buildResult = executeAnalysis(projectKey);","264","","265","      verifyQGStatusInPostTask(buildResult, projectKey, TASK_STATUS_SUCCESS, QG_STATUS_OK);","266","","267","      assertThat(getGateStatusMeasure(projectKey).getValue()).isEqualTo(\"OK\");","268","    } finally {","269","      deleteCustomMetric(orchestrator, customMetricKey);","270","      qgClient().unsetDefault();","271","      qgClient().destroy(simple.id());","272","    }","273","  }","274","","335","  private static void createCustomIntMetric(Orchestrator orchestrator, String metricKey) {","336","    newAdminWsClient(orchestrator).wsConnector().call(new PostRequest(\"api\/metrics\/create\")","337","      .setParam(\"key\", metricKey)","338","      .setParam(\"name\", metricKey)","339","      .setParam(\"type\", \"INT\"))","340","      .failIfNotSuccessful();","341","  }","342","","343","  private static void deleteCustomMetric(Orchestrator orchestrator, String metricKey) {","344","    newAdminWsClient(orchestrator).wsConnector().call(new PostRequest(\"api\/metrics\/delete\")","345","      .setParam(\"keys\", metricKey))","346","      .failIfNotSuccessful();","347","  }","348",""],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/metric\/ws\/DeleteActionTest.java":[{"add":["30","import org.sonar.db.qualitygate.QualityGateConditionDto;","31","import org.sonar.db.qualitygate.QualityGateDto;","108","  public void delete_associated_quality_gate_conditions() {","109","    loggedAsSystemAdministrator();","110","    MetricDto customMetric = insertCustomMetric(\"custom-key\");","111","    MetricDto nonCustomMetric = insertMetric(newMetricDto().setEnabled(true).setUserManaged(false).setKey(\"non-custom\"));","112","    QualityGateDto qualityGate1 = db.qualityGates().insertQualityGate();","113","    db.qualityGates().addCondition(qualityGate1, customMetric);","114","    QualityGateDto qualityGate2 = db.qualityGates().insertQualityGate();","115","    db.qualityGates().addCondition(qualityGate2, customMetric);","116","    db.qualityGates().addCondition(qualityGate2, nonCustomMetric);","117","","118","    newRequest().setParam(\"keys\", \"custom-key\").execute();","119","","120","    assertThat(dbClient.gateConditionDao().selectForQualityGate(db.getSession(), qualityGate1.getId())).isEmpty();","121","    assertThat(dbClient.gateConditionDao().selectForQualityGate(db.getSession(), qualityGate2.getId()))","122","      .extracting(QualityGateConditionDto::getMetricId).containsOnly(nonCustomMetric.getId().longValue());","123","  }","124","","125","  @Test","167","    return insertMetric(newCustomEnabledMetric(key));","168","  }","169","","170","  private MetricDto insertMetric(MetricDto metric) {","171","    db.getDbClient().metricDao().insert(db.getSession(), metric);","173","    return metric;"],"delete":["147","    MetricDto metricDto = newCustomEnabledMetric(key);","148","    db.getDbClient().metricDao().insert(db.getSession(), metricDto);","150","    return metricDto;"]}]}},"d1efd83084b271eb1ae3d1bc60f744fe8372b1ab":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualityprofile\/ws\/ExportAction.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualityprofile\/ws\/QProfileFinder.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/qualityprofile\/ws\/QProfilesWsTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualityprofile\/ws\/SearchAction.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualityprofile\/ws\/SetDefaultAction.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/util\/LanguageParamUtils.java":"ADD","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/qualityprofile\/ws\/RestoreBuiltInActionTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualityprofile\/ws\/QProfileIdentificationParamUtils.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualityprofile\/ws\/RestoreBuiltInAction.java":"MODIFY","\/dev\/null":"DELETE","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualityprofile\/ws\/ProjectAssociationActions.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/component\/ws\/SearchAction.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualityprofile\/ws\/CreateAction.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualityprofile\/ws\/ExportAction.java":[{"add":["43","import org.sonar.server.util.LanguageParamUtils;","44","import org.sonarqube.ws.MediaTypes;"],"delete":["39","import org.sonar.server.component.ws.LanguageParamUtils;","41","import org.sonarqube.ws.MediaTypes;"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualityprofile\/ws\/QProfileFinder.java":[{"add":["28","import org.sonar.server.util.LanguageParamUtils;"],"delete":["27","import org.sonar.server.component.ws.LanguageParamUtils;"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/qualityprofile\/ws\/QProfilesWsTest.java":[{"add":["65","      new RestoreBuiltInAction(null, languages),"],"delete":["65","      new RestoreBuiltInAction(null),"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualityprofile\/ws\/SearchAction.java":[{"add":["30","import org.sonar.server.util.LanguageParamUtils;"],"delete":["29","import org.sonar.server.component.ws.LanguageParamUtils;"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualityprofile\/ws\/SetDefaultAction.java":[{"add":["33","import org.sonar.server.util.LanguageParamUtils;"],"delete":["28","import org.sonar.server.component.ws.LanguageParamUtils;"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/util\/LanguageParamUtils.java":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/qualityprofile\/ws\/RestoreBuiltInActionTest.java":[{"add":["21","import org.junit.Rule;","23","import org.junit.rules.ExpectedException;","24","import org.sonar.api.resources.Languages;","25","import org.sonar.server.language.LanguageTesting;","27","import org.sonar.server.ws.TestResponse;","28","import org.sonar.server.ws.WsActionTester;","30","import static org.assertj.core.api.Java6Assertions.assertThat;","32","import static org.mockito.Mockito.verify;","36","  @Rule","37","  public ExpectedException expectedException = ExpectedException.none();","39","  QProfileService profileService = mock(QProfileService.class);","40","  Languages languages = LanguageTesting.newLanguages(\"xoo\");","42","  WsActionTester tester = new WsActionTester(new RestoreBuiltInAction(profileService, languages));","44","  @Test","45","  public void return_empty_result_when_no_info_or_warning() {","46","    TestResponse response = tester.newRequest().setParam(\"language\", \"xoo\").execute();","47","","48","    verify(profileService).restoreBuiltInProfilesForLanguage(\"xoo\");","49","    assertThat(response.getStatus()).isEqualTo(204);","53","  public void fail_on_unknown_language() throws Exception {","54","    expectedException.expect(IllegalArgumentException.class);","55","    tester.newRequest().setParam(\"language\", \"unknown\").execute();"],"delete":["21","import org.junit.Before;","23","import org.junit.runner.RunWith;","24","import org.mockito.Mock;","25","import org.mockito.runners.MockitoJUnitRunner;","26","import org.sonar.api.i18n.I18n;","28","import org.sonar.server.ws.WsTester;","32","@RunWith(MockitoJUnitRunner.class)","35","  @Mock","36","  QProfileService profileService;","38","  @Mock","39","  I18n i18n;","41","  WsTester tester;","43","  @Before","44","  public void setUp() {","45","    tester = new WsTester(new QProfilesWs(","46","      mock(RuleActivationActions.class),","47","      mock(BulkRuleActivationActions.class),","48","      mock(ProjectAssociationActions.class),","49","      new RestoreBuiltInAction(profileService)));","53","  public void return_empty_result_when_no_infos_or_warnings() throws Exception {","54","    WsTester.TestRequest request = tester.newPostRequest(\"api\/qualityprofiles\", \"restore_built_in\").setParam(\"language\", \"java\");","55","    request.execute().assertNoContent();"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualityprofile\/ws\/QProfileIdentificationParamUtils.java":[{"add":["29","import org.sonar.server.util.LanguageParamUtils;"],"delete":["27","import org.sonar.server.component.ws.LanguageParamUtils;"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualityprofile\/ws\/RestoreBuiltInAction.java":[{"add":["21","import org.sonar.api.resources.Languages;","27","import static org.sonar.server.util.LanguageParamUtils.getExampleValue;","28","import static org.sonar.server.util.LanguageParamUtils.getLanguageKeys;","29","","33","  private final Languages languages;","35","  public RestoreBuiltInAction(QProfileService service, Languages languages) {","37","    this.languages = languages;","50","      .setExampleValue(getExampleValue(languages))","51","      .setPossibleValues(getLanguageKeys(languages))"],"delete":["30","  public RestoreBuiltInAction(QProfileService service) {","44","      .setExampleValue(\"java\")"]}],"\/dev\/null":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualityprofile\/ws\/ProjectAssociationActions.java":[{"add":["23","import org.sonar.api.server.ServerSide;","35","import org.sonar.server.util.LanguageParamUtils;"],"delete":["22","import org.sonar.api.server.ServerSide;","30","import org.sonar.server.component.ws.LanguageParamUtils;"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/component\/ws\/SearchAction.java":[{"add":["38","import org.sonar.server.util.LanguageParamUtils;","43","import static com.google.common.collect.FluentIterable.from;","44","import static org.sonar.server.ws.WsParameterBuilder.createQualifiersParameter;","45","import static org.sonar.server.ws.WsParameterBuilder.QualifierParameterContext.newQualifierParameterContext;","46","import static org.sonar.server.ws.WsUtils.writeProtobuf;","47","import static org.sonarqube.ws.client.component.ComponentsWsParameters.PARAM_LANGUAGE;","48","import static org.sonarqube.ws.client.component.ComponentsWsParameters.PARAM_QUALIFIERS;","49",""],"delete":["21","import static com.google.common.collect.FluentIterable.from;","22","import static org.sonar.server.ws.WsParameterBuilder.QualifierParameterContext.newQualifierParameterContext;","23","import static org.sonar.server.ws.WsParameterBuilder.createQualifiersParameter;","24","import static org.sonar.server.ws.WsUtils.writeProtobuf;","25","import static org.sonarqube.ws.client.component.ComponentsWsParameters.PARAM_LANGUAGE;","26","import static org.sonarqube.ws.client.component.ComponentsWsParameters.PARAM_QUALIFIERS;","27",""]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualityprofile\/ws\/CreateAction.java":[{"add":["40","import org.sonar.server.util.LanguageParamUtils;"],"delete":["35","import org.sonar.server.component.ws.LanguageParamUtils;","41","import org.sonarqube.ws.MediaTypes;"]}]}},"eb647d194313e80e70701a5081fd8f5d615b7a00":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/ServerSettings.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/usergroups\/ws\/UpdateAction.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/usergroups\/ws\/UpdateActionTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/platform\/PersistentSettingsTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/PersistentSettings.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/permission\/ws\/template\/SetDefaultTemplateActionTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/ServerSettings.java":[{"add":["22","import javax.annotation.Nullable;","52","  Settings setProperty(String key, @Nullable String value);"],"delete":["51","  Settings setProperty(String key, String value);"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/usergroups\/ws\/UpdateAction.java":[{"add":["31","import org.sonar.server.platform.PersistentSettings;","34","import static java.util.Collections.singletonList;","35","import static org.sonar.api.CoreProperties.CORE_DEFAULT_GROUP;","47","  private final PersistentSettings persistentSettings;","50","  public UpdateAction(DbClient dbClient, UserSession userSession, UserGroupUpdater groupUpdater, PersistentSettings persistentSettings) {","54","    this.persistentSettings = persistentSettings;","95","      String oldName = group.getName();","97","        groupUpdater.checkNameIsUnique(name, dbSession);","100","        updateDefaultGroupIfNeeded(dbSession, oldName, name);","110","      groupUpdater.writeGroup(json, group, dbClient.groupMembershipDao().countUsersByGroups(dbSession, singletonList(groupId)).get(group.getName()));","116","","117","  private void updateDefaultGroupIfNeeded(DbSession dbSession, String oldName, String newName) {","118","    String defaultGroupName = persistentSettings.getString(CORE_DEFAULT_GROUP);","119","    if (defaultGroupName.equals(oldName)) {","120","      persistentSettings.saveProperty(dbSession, CORE_DEFAULT_GROUP, newName);","121","    }","122","  }"],"delete":["21","import java.util.Arrays;","47","  public UpdateAction(DbClient dbClient, UserSession userSession, UserGroupUpdater groupUpdater) {","87","      groupUpdater.checkNameIsUnique(name, dbSession);","104","      groupUpdater.writeGroup(json, group, dbClient.groupMembershipDao().countUsersByGroups(dbSession, Arrays.asList(groupId)).get(group.getName()));"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/usergroups\/ws\/UpdateActionTest.java":[{"add":["39","import org.sonar.server.platform.PersistentSettings;","43","import static org.mockito.Matchers.any;","44","import static org.mockito.Matchers.eq;","45","import static org.mockito.Mockito.mock;","46","import static org.mockito.Mockito.verify;","47","import static org.mockito.Mockito.when;","51","  static final String DEFAULT_GROUP_NAME_KEY = \"sonar.defaultGroup\";","52","  static final String DEFAULT_GROUP_NAME_VALUE = \"DEFAULT_GROUP_NAME_VALUE\";","53","","58","","61","  DbClient dbClient = db.getDbClient();","62","  DbSession dbSession = db.getSession();","63","  GroupDao groupDao = dbClient.groupDao();","64","  UserGroupDao userGroupDao = dbClient.userGroupDao();","66","  PersistentSettings settings = mock(PersistentSettings.class);","67","  WsTester ws = new WsTester(new UserGroupsWs(new UpdateAction(dbClient, userSession, new UserGroupUpdater(dbClient), settings)));","70","  public void setUp() throws Exception {","71","    when(settings.getString(DEFAULT_GROUP_NAME_KEY)).thenReturn(DEFAULT_GROUP_NAME_VALUE);","132","  public void update_default_group_name_also_update_default_group_property() throws Exception {","133","    GroupDto existingGroup = groupDao.insert(dbSession, new GroupDto().setName(DEFAULT_GROUP_NAME_VALUE).setDescription(\"Default group name\"));","134","    dbSession.commit();","135","","136","    loginAsAdmin();","137","    newRequest()","138","      .setParam(\"id\", existingGroup.getId().toString())","139","      .setParam(\"name\", \"new-name\")","140","      .execute();","141","","142","    verify(settings).saveProperty(any(DbSession.class), eq(DEFAULT_GROUP_NAME_KEY), eq(\"new-name\"));","143","  }","144","","145","  @Test","249","","250",""],"delete":["52","  private WsTester ws;","53","  private DbSession dbSession;","54","  private GroupDao groupDao;","55","  private UserGroupDao userGroupDao;","58","  public void setUp() {","59","    DbClient dbClient = db.getDbClient();","60","    dbSession = db.getSession();","61","    groupDao = dbClient.groupDao();","62","    userGroupDao = dbClient.userGroupDao();","63","","64","    ws = new WsTester(new UserGroupsWs(new UpdateAction(dbClient, userSession, new UserGroupUpdater(dbClient))));"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/platform\/PersistentSettingsTest.java":[{"add":["22","import java.util.Properties;","23","import org.junit.Rule;","26","import org.sonar.api.utils.System2;","27","import org.sonar.db.DbClient;","28","import org.sonar.db.DbSession;","29","import org.sonar.db.DbTester;","37","  @Rule","38","  public DbTester db = DbTester.create(System2.INSTANCE);","40","  DbClient dbClient = db.getDbClient();","41","  DbSession dbSession = db.getSession();","43","  private PropertiesDao dao = dbClient.propertiesDao();","44","  private ServerSettings settings = new WebServerSettings(","45","    new PropertyDefinitions(),","46","    new Properties());","50","    newGlobalProperty(\"in_db\", \"bar\");","52","    PersistentSettings persistentSettings = new PersistentSettings(dbClient, settings);","60","    PersistentSettings persistentSettings = new PersistentSettings(dbClient, settings);","65","    verifyGlobalPropertyExists(\"foo\", \"bar\");","70","    newGlobalProperty(\"foo\", \"bar_in_db\");","74","    PersistentSettings persistentSettings = new PersistentSettings(dbClient, settings);","78","    verifyGlobalPropertyDoesNotExist(\"foo\");","83","    newGlobalProperty(\"in_db1\", \"foo\");","84","    newGlobalProperty(\"in_db2\", \"bar\");","88","    PersistentSettings persistentSettings = new PersistentSettings(dbClient, settings);","92","    assertThat(dao.selectGlobalProperties()).isEmpty();","100","    PersistentSettings persistentSettings = new PersistentSettings(dbClient, settings);","109","    PersistentSettings persistentSettings = new PersistentSettings(dbClient, settings);","114","    verifyGlobalPropertyExists(\"foo\", \"bar\");","115","  }","116","","117","  private PropertyDto newGlobalProperty(String key, String value) {","118","    PropertyDto propertyDto = new PropertyDto().setKey(key).setValue(value);","119","    dao.insertProperty(dbSession, propertyDto);","120","    dbSession.commit();","121","    return propertyDto;","122","  }","123","","124","  private void verifyGlobalPropertyExists(String key, String value){","125","    PropertyDto propertyDto = dao.selectGlobalProperty(dbSession, key);","126","    assertThat(propertyDto).isNotNull();","127","    assertThat(propertyDto.getValue()).isEqualTo(value);","128","    assertThat(propertyDto.getUserId()).isNull();","129","    assertThat(propertyDto.getResourceId()).isNull();","130","  }","131","","132","  private void verifyGlobalPropertyDoesNotExist(String key){","133","    assertThat(dao.selectGlobalProperty(dbSession, key)).isNull();"],"delete":["22","import org.junit.Before;","24","import org.mockito.ArgumentMatcher;","29","import java.util.Arrays;","30","import java.util.Properties;","31","","33","import static org.mockito.Matchers.argThat;","34","import static org.mockito.Mockito.mock;","35","import static org.mockito.Mockito.verify;","36","import static org.mockito.Mockito.when;","40","  private PropertiesDao dao;","41","  private ServerSettings settings;","43","  @Before","44","  public void init() {","45","    dao = mock(PropertiesDao.class);","47","    settings = new WebServerSettings(","48","      new PropertyDefinitions(),","49","      new Properties());","50","  }","54","    when(dao.selectGlobalProperties()).thenReturn(Arrays.asList(","55","      new PropertyDto().setKey(\"in_db\").setValue(\"bar\")","56","      ));","58","    PersistentSettings persistentSettings = new PersistentSettings(dao, settings);","66","    PersistentSettings persistentSettings = new PersistentSettings(dao, settings);","71","    verify(dao).insertProperty(argThat(new ArgumentMatcher<PropertyDto>() {","72","      @Override","73","      public boolean matches(Object o) {","74","        PropertyDto dto = (PropertyDto) o;","75","        return dto.getKey().equals(\"foo\");","76","      }","77","    }));","85","    PersistentSettings persistentSettings = new PersistentSettings(dao, settings);","89","    verify(dao).deleteGlobalProperty(\"foo\");","97","    PersistentSettings persistentSettings = new PersistentSettings(dao, settings);","101","    verify(dao).deleteGlobalProperties();","109","    PersistentSettings persistentSettings = new PersistentSettings(dao, settings);","118","    PersistentSettings persistentSettings = new PersistentSettings(dao, settings);","123","    verify(dao).insertGlobalProperties(props);"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/PersistentSettings.java":[{"add":["24","import javax.annotation.Nullable;","25","import org.picocontainer.Startable;","26","import org.sonar.api.config.Settings;","27","import org.sonar.db.DbClient;","28","import org.sonar.db.DbSession;","29","import org.sonar.db.property.PropertiesDao;","30","import org.sonar.db.property.PropertyDto;","36","  private final DbClient dbClient;","40","  public PersistentSettings(DbClient dbClient, ServerSettings serverSettings) {","41","    this.dbClient = dbClient;","42","    this.propertiesDao = dbClient.propertiesDao();","61","    DbSession dbSession = dbClient.openSession(false);","62","    try {","63","      saveProperty(dbSession, key, value);","64","      dbSession.commit();","65","    } finally {","66","      dbClient.closeSession(dbSession);","67","    }","68","    return this;","69","  }","70","","71","  public PersistentSettings saveProperty(DbSession dbSession, String key, @Nullable String value) {","73","    propertiesDao.insertProperty(dbSession, new PropertyDto().setKey(key).setValue(value));"],"delete":["22","import org.picocontainer.Startable;","23","import org.sonar.api.config.Settings;","24","import org.sonar.db.property.PropertiesDao;","25","import org.sonar.db.property.PropertyDto;","26","","27","import javax.annotation.Nullable;","38","  public PersistentSettings(PropertiesDao propertiesDao, ServerSettings serverSettings) {","39","    this.propertiesDao = propertiesDao;","59","    propertiesDao.insertProperty(new PropertyDto().setKey(key).setValue(value));"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/permission\/ws\/template\/SetDefaultTemplateActionTest.java":[{"add":["84","    persistentSettings = new PersistentSettings(dbClient, new WebServerSettings(new PropertyDefinitions(), new Properties()));"],"delete":["84","    persistentSettings = new PersistentSettings(dbClient.propertiesDao(), new WebServerSettings(new PropertyDefinitions(), new Properties()));"]}]}},"4c358f8ee89cddc977c8f1d9329c5ae22a0475c9":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/rule\/profile-activation-view.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/workspace-list-item-view.js":"MODIFY","server\/sonar-web\/test\/medium\/coding-rules.spec.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/rule\/profile-activation-view.js":[{"add":["114","        that.trigger('profileActivated', severity, params, profileKey);"],"delete":["114","        that.trigger('profileActivated', severity, params);"]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/workspace-list-item-view.js":[{"add":["64","      activationView.on('profileActivated', function (severity, params, profile) {","67","          inherit: 'NONE',","68","          params: params,","69","          qProfile: profile"],"delete":["64","      activationView.on('profileActivated', function (severity) {","67","          inherit: 'NONE'"]}],"server\/sonar-web\/test\/medium\/coding-rules.spec.js":[{"add":["922","","923","    bdd.it('should deactivate just activated rule', function () {","924","      return this.remote","925","          .open()","926","          .mockFromString('\/api\/l10n\/index', '{}')","927","          .mockFromFile('\/api\/rules\/app', 'coding-rules-spec\/app.json')","928","          .mockFromFile('\/api\/rules\/search', 'coding-rules-spec\/search-inactive.json',","929","          { data: { activation: 'false' } })","930","          .mockFromFile('\/api\/rules\/search', 'coding-rules-spec\/search.json')","931","          .mockFromString('\/api\/qualityprofiles\/activate_rule', '{}',","932","          {","933","            data: {","934","              profile_key: 'java-default-with-mojo-conventions-49307',","935","              rule_key: 'common-java:FailedUnitTests'","936","            }","937","          })","938","          .mockFromString('\/api\/qualityprofiles\/deactivate_rule', '{}',","939","          {","940","            data: {","941","              profile_key: 'java-default-with-mojo-conventions-49307',","942","              rule_key: 'common-java:FailedUnitTests'","943","            }","944","          })","945","          .startApp('coding-rules')","946","          .checkElementExist('.coding-rule')","947","          .clickElement('[data-property=\"qprofile\"] .js-facet-toggle')","948","          .checkElementExist('.js-facet[data-value=\"java-default-with-mojo-conventions-49307\"]')","949","          .clickElement('.js-facet[data-value=\"java-default-with-mojo-conventions-49307\"]')","950","","951","          .clickElement('.js-facet[data-value=\"java-default-with-mojo-conventions-49307\"] .js-inactive')","952","          .checkElementNotExist('.coding-rule-activation .icon-severity-major')","953","          .checkElementExist('.coding-rules-detail-quality-profile-activate')","954","","955","          .clickElement('.coding-rules-detail-quality-profile-activate')","956","          .checkElementExist('.modal')","957","          .checkElementExist('#coding-rules-quality-profile-activation-select')","958","          .checkElementCount('#coding-rules-quality-profile-activation-select option', 1)","959","          .checkElementExist('#coding-rules-quality-profile-activation-severity')","960","          .clickElement('#coding-rules-quality-profile-activation-activate')","961","          .checkElementExist('.coding-rule-activation .icon-severity-major')","962","          .checkElementExist('.coding-rule-activation .icon-severity-major')","963","          .checkElementNotExist('.coding-rules-detail-quality-profile-activate')","964","          .checkElementExist('.coding-rules-detail-quality-profile-deactivate')","965","","966","          .clickElement('.coding-rules-detail-quality-profile-deactivate')","967","          .clickElement('[data-confirm=\"yes\"]')","968","          .checkElementNotExist('.coding-rule-activation .icon-severity-major')","969","          .checkElementNotExist('.coding-rule-activation .icon-severity-major')","970","          .checkElementExist('.coding-rules-detail-quality-profile-activate')","971","          .checkElementNotExist('.coding-rules-detail-quality-profile-deactivate');","972","    });"],"delete":[]}]}},"f5b953bccffd20a4d65b61d13f5f86e5ccbd5072":{"changes":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/component_issues\/index.html.erb":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/component_issues\/index.html.erb":[{"add":["8","    resource: '<%= escape_javascript @resource.uuid -%>',","9","    resourceQualifier: '<%= escape_javascript @resource.qualifier -%>',","10","    resourceName: '<%= escape_javascript @resource.name -%>',","11","    periodDate: <% if @period %>'<%= escape_javascript @snapshot.period_datetime(@period) -%>'<% else %>null<% end %>"],"delete":["8","    resource: '<%= @resource.uuid -%>',","9","    resourceQualifier: '<%= @resource.qualifier -%>',","10","    resourceName: '<%= @resource.name -%>',","11","    periodDate: <% if @period %>'<%= @snapshot.period_datetime(@period) -%>'<% else %>null<% end %>"]}]}},"00056ffb7e4bb18ad4ce36b98d2671fd3902fad3":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/controls\/ListFooter.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/details\/ProfileProjects.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/controls\/ListFooter.tsx":[{"add":["29","  total?: number;","41","  const hasMore = props.total && props.total > props.count;"],"delete":["29","  total: number;","41","  const hasMore = props.total > props.count;"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/details\/ProfileProjects.tsx":[{"add":["26","import ListFooter from '..\/..\/..\/components\/controls\/ListFooter';","38","  page: number;","40","  ready: boolean;","41","  total: number;","50","    page: 1,","51","    projects: null,","52","    ready: true,","53","    total: 0","77","    const data = { key: this.props.profile.key, page: this.state.page };","81","          this.setState(state => ({","82","            projects: state.projects ? [...state.projects, ...r.results] : r.results,","83","            total: r.paging.total,","84","            loading: false,","85","            ready: true","86","          }));","93","  loadMore = () => {","94","    this.setState(state => ({ ready: false, page: state.page + 1 }), this.loadProjects);","95","  };","96","","135","      <>","136","        <ul>","137","          {projects.map(project => (","138","            <li className=\"spacer-top js-profile-project\" data-key={project.key} key={project.uuid}>","139","              <Link","140","                className=\"link-with-icon\"","141","                to={{ pathname: '\/dashboard', query: { id: project.key } }}>","142","                <QualifierIcon qualifier=\"TRK\" \/> <span>{project.name}<\/span>","143","              <\/Link>","144","            <\/li>","145","          ))}","146","        <\/ul>","147","        <ListFooter","148","          count={projects.length}","149","          loadMore={this.loadMore}","150","          ready={this.state.ready}","151","          total={this.state.total}","152","        \/>","153","      <\/>"],"delete":["37","  more?: boolean;","47","    projects: null","71","    const data = { key: this.props.profile.key };","75","          this.setState({","76","            projects: r.results,","77","            more: r.more,","78","            loading: false","79","          });","124","      <ul>","125","        {projects.map(project => (","126","          <li className=\"spacer-top js-profile-project\" data-key={project.key} key={project.uuid}>","127","            <Link","128","              className=\"link-with-icon\"","129","              to={{ pathname: '\/dashboard', query: { id: project.key } }}>","130","              <QualifierIcon qualifier=\"TRK\" \/> <span>{project.name}<\/span>","131","            <\/Link>","132","          <\/li>","133","        ))}","134","      <\/ul>"]}]}},"52c881f7c12e803379a71e6d539a87e9112145e5":{"changes":{"server\/sonar-web\/src\/main\/js\/coding-rules\/facets\/custom-values-facet.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/coding-rules\/facets\/custom-values-facet.js":[{"add":["45","        minimumInputLength: 1,","54","          return tp('select2.tooShort', 1);"],"delete":["45","        minimumInputLength: 2,","54","          return tp('select2.tooShort', 2);"]}]}},"04c13b353fcb16dc53b1287f301301dad8d79abf":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/meta\/MetaLinks.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/meta\/Meta.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/styles.css":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/meta\/MetaLinks.js":[{"add":["20","import { getProjectLinks } from '..\/..\/..\/api\/projectLinks';","21","import { isProvided } from '..\/..\/project-admin\/links\/utils';","23","export default class MetaLinks extends React.Component {","24","  static propTypes = {","25","    component: React.PropTypes.object.isRequired","26","  };","28","  state = {};","29","","30","  componentDidMount () {","31","    this.mounted = true;","32","    this.loadLinks();","33","  }","34","","35","  componentDidUpdate (prevProps) {","36","    if (prevProps.component !== this.props.component) {","37","      this.loadLinks();","38","    }","39","  }","40","","41","  componentWillUnmount () {","42","    this.mounted = false;","43","  }","44","","45","  loadLinks () {","46","    getProjectLinks(this.props.component.key).then(links => {","47","      if (this.mounted) {","48","        this.setState({ links });","49","      }","50","    });","51","  }","52","","53","  renderLinkIcon (link) {","54","    return isProvided(link) ?","55","        <i className={`icon-color-link icon-${link.type}`}\/> :","56","        <i className=\"icon-color-link icon-detach\"\/>;","57","  }","58","","59","  render () {","60","    const { links } = this.state;","61","","62","    if (links == null || links.length === 0) {","63","      return null;","64","    }","65","","66","    return (","67","        <ul className=\"overview-meta-list big-spacer-bottom\">","68","          {links.map(link => (","69","              <li key={link.id}>","70","                <a className=\"link-with-icon\" href={link.url} target=\"_blank\">","71","                  {this.renderLinkIcon(link)}","72","                  &nbsp;","73","                  {link.name}","74","                <\/a>","75","              <\/li>","76","          ))}","77","        <\/ul>","78","    );","79","  }","80","}"],"delete":["21","const MetaLinks = ({ links }) => {","22","  return (","23","      <ul className=\"overview-meta-list big-spacer-bottom\">","24","        {links.map(link => (","25","            <li key={link.type}>","26","              <a","27","                  className=\"link-with-icon\"","28","                  href={link.href}","29","                  target=\"_blank\">","30","                <i className={`icon-color-link icon-${link.type}`}\/>","31","                &nbsp;","32","                {link.name}","33","              <\/a>","34","            <\/li>","35","        ))}","36","      <\/ul>","37","  );","38","};","40","export default MetaLinks;"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/meta\/Meta.js":[{"add":["28","  const { qualifier, description, profiles, gate } = component;","52","          <MetaLinks component={component}\/>"],"delete":["28","  const { qualifier, description, links, profiles, gate } = component;","35","  const hasLinks = Array.isArray(links) && !!links.length;","53","          {hasLinks && (","54","              <MetaLinks links={links}\/>","55","          )}"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/styles.css":[{"add":["250","  \/* 1px to not cut icons on the left *\/","251","  padding-left: 1px;"],"delete":[]}]}},"62c010110229b99c4125a961453deadbd45d6814":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/setting\/ws\/ScannerSettingsTest.java":"MODIFY","sonar-db\/src\/main\/java\/org\/sonar\/db\/property\/PropertiesDao.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/setting\/ws\/ScannerSettings.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/setting\/ws\/ValuesActionTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/setting\/ws\/ValuesAction.java":"MODIFY","sonar-db\/src\/main\/java\/org\/sonar\/db\/property\/PropertiesMapper.java":"MODIFY","sonar-db\/src\/test\/java\/org\/sonar\/db\/property\/PropertiesDaoTest.java":"MODIFY","sonar-db\/src\/main\/resources\/org\/sonar\/db\/property\/PropertiesMapper.xml":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/setting\/ws\/ScannerSettingsTest.java":[{"add":["21","import org.junit.Rule;","25","import org.sonar.api.utils.System2;","26","import org.sonar.db.DbTester;","31","import static org.sonar.db.property.PropertyTesting.newGlobalPropertyDto;","35","  @Rule","36","  public DbTester db = DbTester.create(System2.INSTANCE);","38","  private PropertyDefinitions definitions = new PropertyDefinitions();","39","","40","  private ScannerSettings underTest = new ScannerSettings(db.getDbClient(), definitions);","48","    assertThat(underTest.getScannerSettingKeys(db.getSession())).contains(\"myplugin.license.secured\");","53","    db.properties().insertProperty(newGlobalPropertyDto(\"sonar.myplugin.licenseHash.secured\", \"hash\"));","55","    assertThat(underTest.getScannerSettingKeys(db.getSession())).contains(\"sonar.myplugin.licenseHash.secured\");","64","    assertThat(underTest.getScannerSettingKeys(db.getSession())).contains(\"sonar.server_id\", \"sonar.core.id\", \"sonar.core.startTime\");"],"delete":["24","import org.sonar.core.platform.PluginInfo;","25","import org.sonar.core.platform.PluginRepository;","28","import static java.util.Collections.singletonList;","30","import static org.mockito.Mockito.mock;","31","import static org.mockito.Mockito.when;","36","  private PropertyDefinitions definitions = new PropertyDefinitions();","37","  private PluginRepository repository = mock(PluginRepository.class);","39","  private ScannerSettings underTest = new ScannerSettings(definitions, repository);","46","    underTest.start();","48","    assertThat(underTest.getScannerSettingKeys()).contains(\"myplugin.license.secured\");","53","    PluginInfo pluginInfo = mock(PluginInfo.class);","54","    when(pluginInfo.getKey()).thenReturn(\"myplugin\");","55","    when(repository.getPluginInfos()).thenReturn(singletonList(pluginInfo));","56","    underTest.start();","58","    assertThat(underTest.getScannerSettingKeys()).contains(\"sonar.myplugin.licenseHash.secured\");","66","    underTest.start();","68","    assertThat(underTest.getScannerSettingKeys()).contains(\"sonar.server_id\", \"sonar.core.id\", \"sonar.core.startTime\");"]}],"sonar-db\/src\/main\/java\/org\/sonar\/db\/property\/PropertiesDao.java":[{"add":["38","import org.sonar.db.WildcardPosition;","41","import static org.sonar.db.DatabaseUtils.buildLikeValue;","174","  public List<PropertyDto> selectGlobalPropertiesByKeyQuery(DbSession session, String keyQuery) {","175","    return getMapper(session).selectGlobalPropertiesByKeyQuery(buildLikeValue(keyQuery, WildcardPosition.BEFORE_AND_AFTER));","176","  }","177",""],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/setting\/ws\/ScannerSettings.java":[{"add":["26","import org.sonar.db.DbClient;","27","import org.sonar.db.DbSession;","28","import org.sonar.db.property.PropertyDto;","41","public class ScannerSettings {","45","  private final DbClient dbClient;","48","  public ScannerSettings(DbClient dbClient, PropertyDefinitions propertyDefinitions) {","49","    this.dbClient = dbClient;","53","  Set<String> getScannerSettingKeys(DbSession dbSession) {","54","    return concat(concat(loadLicenseKeys(), loadLicenseHashKeys(dbSession)),","58","  private Stream<String> loadLicenseHashKeys(DbSession dbSession) {","59","    return dbClient.propertiesDao().selectGlobalPropertiesByKeyQuery(dbSession, LICENSE_HASH_SUFFIX).stream().map(PropertyDto::getKey);"],"delete":["24","import org.sonar.api.Startable;","27","import org.sonar.core.platform.PluginInfo;","28","import org.sonar.core.platform.PluginRepository;","41","public class ScannerSettings implements Startable {","43","  private static final String SONAR_PREFIX = \"sonar.\";","47","  private final PluginRepository pluginRepository;","49","  private Set<String> scannerSettingKeys;","50","","51","  public ScannerSettings(PropertyDefinitions propertyDefinitions, PluginRepository pluginRepository) {","53","    this.pluginRepository = pluginRepository;","56","  @Override","57","  public void start() {","58","    this.scannerSettingKeys = concat(concat(loadLicenseKeys(), loadLicenseHashKeys()),","62","  private Stream<String> loadLicenseHashKeys() {","63","    return pluginRepository.getPluginInfos().stream()","64","      .map(PluginInfo::getKey)","65","      .map(key -> SONAR_PREFIX + key + LICENSE_HASH_SUFFIX);","75","  Set<String> getScannerSettingKeys() {","76","    return scannerSettingKeys;","77","  }","78","","79","  @Override","80","  public void stop() {","81","    \/\/ nothing to do","82","  }"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/setting\/ws\/ValuesActionTest.java":[{"add":["90","  private ScannerSettings scannerSettings = new ScannerSettings(db.getDbClient(), definitions);"],"delete":["36","import org.sonar.core.platform.PluginInfo;","37","import org.sonar.core.platform.PluginRepository;","57","import static java.util.Collections.singletonList;","60","import static org.mockito.Mockito.mock;","61","import static org.mockito.Mockito.when;","95","  private PluginRepository repository = mock(PluginRepository.class);","96","  private ScannerSettings scannerSettings = new ScannerSettings(definitions, repository);","106","    PluginInfo pluginInfo = mock(PluginInfo.class);","107","    when(pluginInfo.getKey()).thenReturn(\"plugin\");","108","    when(repository.getPluginInfos()).thenReturn(singletonList(pluginInfo));","109","    scannerSettings.start();"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/setting\/ws\/ValuesAction.java":[{"add":["71","    SettingsWsSupport settingsWsSupport, ScannerSettings scannerSettings) {","115","      Set<String> keys = loadKeys(dbSession, valuesRequest);","131","  private Set<String> loadKeys(DbSession dbSession, ValuesRequest valuesRequest) {","133","    if (keys.isEmpty()) {","134","      return concat(propertyDefinitions.getAll().stream().map(PropertyDefinition::key), scannerSettings.getScannerSettingKeys(dbSession).stream()).collect(Collectors.toSet());","136","    return new HashSet<>(keys);"],"delete":["71","                      SettingsWsSupport settingsWsSupport, ScannerSettings scannerSettings) {","115","      Set<String> keys = loadKeys(valuesRequest);","131","  private Set<String> loadKeys(ValuesRequest valuesRequest) {","133","    if (!keys.isEmpty()) {","134","      return new HashSet<>(keys);","136","    return concat(propertyDefinitions.getAll().stream().map(PropertyDefinition::key), scannerSettings.getScannerSettingKeys().stream()).collect(Collectors.toSet());"]}],"sonar-db\/src\/main\/java\/org\/sonar\/db\/property\/PropertiesMapper.java":[{"add":["48","  List<PropertyDto> selectGlobalPropertiesByKeyQuery(@Param(\"textQuery\") String textQuery);","49",""],"delete":[]}],"sonar-db\/src\/test\/java\/org\/sonar\/db\/property\/PropertiesDaoTest.java":[{"add":["446","        tuple(anotherKey, project2.getId()));","486","  public void select_global_properties_by_key_query() throws SQLException {","487","    \/\/ global","488","    insertProperty(\"sonar.plugin1.licenseHash.secured\", \"one\", null, null);","489","    insertProperty(\"sonar.plugin2.licenseHash.secured\", \"two\", null, null);","490","    \/\/ on component and user","491","    insertProperty(\"sonar.plugin1.licenseHash.secure\", \"one\", 10L, null);","492","    insertProperty(\"sonar.plugin1.licenseHash.secure\", \"two\", 10L, 100L);","493","","494","    assertThat(underTest.selectGlobalPropertiesByKeyQuery(dbTester.getSession(), \".licenseHash.secured\")).extracting(PropertyDto::getKey, PropertyDto::getValue)","495","      .containsOnly(tuple(\"sonar.plugin1.licenseHash.secured\", \"one\"), tuple(\"sonar.plugin2.licenseHash.secured\", \"two\"));","496","    assertThat(underTest.selectGlobalPropertiesByKeyQuery(dbTester.getSession(), \"plugin1.licenseHash.secured\")).extracting(PropertyDto::getKey, PropertyDto::getValue)","497","      .containsOnly(tuple(\"sonar.plugin1.licenseHash.secured\", \"one\"));","498","    assertThat(underTest.selectGlobalPropertiesByKeyQuery(dbTester.getSession(), \"plugin1\")).extracting(PropertyDto::getKey, PropertyDto::getValue)","499","      .containsOnly(tuple(\"sonar.plugin1.licenseHash.secured\", \"one\"));","500","    assertThat(underTest.selectGlobalPropertiesByKeyQuery(dbTester.getSession(), \"unknown\")).isEmpty();","501","  }","502","","503","  @Test"],"delete":["446","        tuple(anotherKey, project2.getId())","447","      );"]}],"sonar-db\/src\/main\/resources\/org\/sonar\/db\/property\/PropertiesMapper.xml":[{"add":["183","  <select id=\"selectGlobalPropertiesByKeyQuery\" resultType=\"ScrapProperty\">","184","    select","185","    <include refid=\"columnsToScrapPropertyDto\"\/>","186","    from","187","    properties p","188","    where","189","    p.resource_id is null","190","    and p.user_id is null","191","    and p.prop_key like #{textQuery,jdbcType=VARCHAR}","192","  <\/select>","193",""],"delete":[]}]}},"72ac5447a32d6537e805374116cbf369f7a65038":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/filemove\/FileSimilarityImpl.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/filemove\/MatchesByScoreTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/filemove\/SourceSimilarityImplTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/filemove\/FileMoveDetectionStep.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/filemove\/SourceSimilarityImpl.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/filemove\/FileSimilarity.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/filemove\/FileMoveDetectionStepTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/filemove\/FileSimilarityImpl.java":[{"add":["31","    \/\/ Algorithm could be improved by increasing score","32","    \/\/ depending on filename similarity","33","    \/\/ Current implementation relies on file content only.","35","    return sourceSimilarity.score(file1.getLineHashes(), file2.getLineHashes());"],"delete":["21","import java.util.List;","22","","33","    int score = 0;","35","    \/\/ TODO check filenames","36","","37","    List<String> lineHashes1 = file1.getLineHashes();","38","    List<String> lineHashes2 = file2.getLineHashes();","39","    if (lineHashes1 != null && lineHashes2 != null) {","40","      score += sourceSimilarity.score(lineHashes1, lineHashes2);","41","    }","42","    return score;"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/filemove\/MatchesByScoreTest.java":[{"add":["32","import static java.util.Collections.emptyList;","33","import static java.util.Collections.emptySet;","43","    Set<String> doesNotMatterDbFileKeys = emptySet();","82","    return new FileSimilarity.File(\"path of \" + key, emptyList());"],"delete":["41","    Set<String> doesNotMatterDbFileKeys = Collections.emptySet();","80","    return new FileSimilarity.File(\"path of \" + key, null);"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/filemove\/SourceSimilarityImplTest.java":[{"add":["27","import static java.util.Collections.emptyList;","35","  private SourceSimilarityImpl underTest = new SourceSimilarityImpl();","56","","57","  @Test","58","  public void two_empty_lists_are_not_considered_as_equal() {","59","    assertThat(underTest.score(emptyList(), emptyList())).isEqualTo(0);","60","  }"],"delete":["34","  SourceSimilarityImpl underTest = new SourceSimilarityImpl();"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/filemove\/FileMoveDetectionStep.java":[{"add":["58","import static com.google.common.base.MoreObjects.firstNonNull;","236","    String lineHashes = firstNonNull(fileSourceDto.getLineHashes(), \"\");","237","    return new File(dbComponent.getPath(), LINES_HASHES_SPLITTER.splitToList(lineHashes));"],"delete":["235","    return new File(dbComponent.getPath(), LINES_HASHES_SPLITTER.splitToList(fileSourceDto.getLineHashes()));"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/filemove\/SourceSimilarityImpl.java":[{"add":["29","  public <T> int score(List<T> left, List<T> right) {","30","    if (left.isEmpty() && right.isEmpty()) {","31","      return 0;","32","    }","37","  private static <T> int levenshteinDistance(List<T> left, List<T> right) {"],"delete":["29","  public <T extends Object> int score(List<T> left, List<T> right) {","34","  <T extends Object> int levenshteinDistance(List<T> left, List<T> right) {"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/filemove\/FileSimilarity.java":[{"add":["31","    public File(String path, List<String> lineHashes) {","33","      this.lineHashes = requireNonNull(lineHashes, \"lineHashes can not be null\");","40","    \/**","41","     * List of hash of each line. An empty list is returned","42","     * if file content is empty.","43","     *\/"],"delete":["22","import javax.annotation.CheckForNull;","23","import javax.annotation.Nullable;","33","    public File(String path, @Nullable List<String> lineHashes) {","35","      this.lineHashes = lineHashes;","42","    @CheckForNull"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/filemove\/FileMoveDetectionStepTest.java":[{"add":["30","import javax.annotation.Nullable;","411","  public void execute_detects_no_move_if_two_files_are_empty() {","412","    analysisMetadataHolder.setBaseAnalysis(ANALYSIS);","413","    mockComponents(FILE_1.getKey(), FILE_2.getKey());","414","    mockContentOfFileInDb(FILE_1.getKey(), null);","415","    mockContentOfFileInDb(FILE_2.getKey(), null);","416","","417","    underTest.execute();","418","","419","    assertThat(movedFilesRepository.getComponentsWithOriginal()).isEmpty();","420","  }","421","","422","  @Test","509","  private void mockContentOfFileInDb(String key, @Nullable String[] content) {","510","    FileSourceDto dto = new FileSourceDto();","511","    if (content != null) {","512","      SourceLinesHashesComputer linesHashesComputer = new SourceLinesHashesComputer();","513","      stream(content).forEach(linesHashesComputer::addLine);","514","      dto.setLineHashes(on('\\n').join(linesHashesComputer.getLineHashes()));","517","    when(fileSourceDao.selectSourceByFileUuid(dbSession, componentUuidOf(key))).thenReturn(dto);"],"delete":["25","import java.util.Arrays;","28","import java.util.Iterator;","498","  private void mockContentOfFileInDb(String key, String[] content) {","499","    SourceLinesHashesComputer linesHashesComputer = new SourceLinesHashesComputer();","500","    Iterator<String> lineIterator = Arrays.asList(content).iterator();","501","    while (lineIterator.hasNext()) {","502","      String line = lineIterator.next();","503","      linesHashesComputer.addLine(line);","506","    when(fileSourceDao.selectSourceByFileUuid(dbSession, componentUuidOf(key)))","507","      .thenReturn(new FileSourceDto()","508","        .setLineHashes(on('\\n').join(linesHashesComputer.getLineHashes())));"]}]}},"a7243098e4d10f492c88a7c2bd28a7cea1164023":{"changes":{"server\/sonar-server\/src\/main\/resources\/org\/sonar\/server\/dashboard\/widget\/issue_filter.html.erb":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/resources\/org\/sonar\/server\/dashboard\/widget\/issue_filter.html.erb":[{"add":[],"delete":["19","      werwer"]}]}},"d686c696d9cebbb533e609551c959d6f4eb8cba9":{"changes":{"\/dev\/null":"DELETE","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/project\/ws\/BulkDeleteAction.java":"ADD","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/project\/ws\/ProjectsWsTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/platformlevel\/PlatformLevel4.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/project\/ws\/BulkDeleteActionTest.java":"ADD"},"diff":{"\/dev\/null":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/project\/ws\/BulkDeleteAction.java":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/project\/ws\/ProjectsWsTest.java":[{"add":["42","      new BulkDeleteAction(mock(ComponentCleanerService.class), mock(DbClient.class), mock(UserSession.class)),"],"delete":["42","      new DeleteAction(mock(ComponentCleanerService.class), mock(DbClient.class), mock(UserSession.class)),"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/platformlevel\/PlatformLevel4.java":[{"add":["209","import org.sonar.server.project.ws.BulkDeleteAction;","581","      BulkDeleteAction.class,"],"delete":["580","      org.sonar.server.project.ws.DeleteAction.class,"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/project\/ws\/BulkDeleteActionTest.java":[{"add":[],"delete":[]}]}},"dae4348f09a1364904a2e63caebf2dd9f205752b":{"changes":{"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/global\/GlobalNavBranding.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/nav\/global\/__tests__\/__snapshots__\/GlobalNav-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/nav\/global\/GlobalNav.css":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/nav\/global\/GlobalNavMenu.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/nav\/global\/GlobalNav.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/nav\/global\/__tests__\/__snapshots__\/GlobalNavMenu-test.tsx.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/global\/GlobalNavBranding.tsx":[{"add":["37","    <Link className=\"navbar-brand\" to=\"\/\">","38","      <img alt={title} height={30} src={url} title={title} width={width} \/>","39","    <\/Link>"],"delete":["37","    <div className=\"pull-left\">","38","      <Link className=\"navbar-brand\" to=\"\/\">","39","        <img alt={title} height={30} src={url} title={title} width={width} \/>","40","      <\/Link>","41","    <\/div>"]}],"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/global\/__tests__\/__snapshots__\/GlobalNav-test.tsx.snap":[{"add":["28","    className=\"global-navbar-menu global-navbar-menu-right\"","106","    className=\"global-navbar-menu global-navbar-menu-right\""],"delete":["28","    className=\"global-navbar-menu pull-right\"","106","    className=\"global-navbar-menu pull-right\""]}],"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/global\/GlobalNav.css":[{"add":["25",".navbar-global .navbar-limited {","26","  display: flex;","27","}","28","","97",".global-navbar-menu-right {","98","  flex: 1;","99","  justify-content: flex-end;","100","}","101","","102",".global-navbar-menu-right .navbar-search {","103","  flex: 1;","104","  max-width: 310px;","105","}","106","","107",".global-navbar-menu-right .navbar-search .search-box,","108",".global-navbar-menu-right .navbar-search .search-box-input {","109","  min-width: 0;","110","  width: 100%;","111","}","112",""],"delete":[]}],"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/global\/GlobalNavMenu.tsx":[{"add":["180","      <ul className=\"global-navbar-menu\">"],"delete":["180","      <ul className=\"global-navbar-menu pull-left\">"]}],"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/global\/GlobalNav.tsx":[{"add":["61","        <ul className=\"global-navbar-menu global-navbar-menu-right\">"],"delete":["61","        <ul className=\"global-navbar-menu pull-right\">"]}],"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/global\/__tests__\/__snapshots__\/GlobalNavMenu-test.tsx.snap":[{"add":["4","  className=\"global-navbar-menu\""],"delete":["4","  className=\"global-navbar-menu pull-left\""]}]}},"8557587c5a9622113071e2e968ef6dd3e8c279e6":{"changes":{"sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/issue\/IssuesService.java":"MODIFY","it\/it-tests\/src\/test\/java\/it\/issue\/IssueSearchTest.java":"MODIFY"},"diff":{"sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/issue\/IssuesService.java":[{"add":["58","import static org.sonarqube.ws.client.issue.IssueFilterParameters.TYPES;","104","        .setParam(TAGS, inlineMultipleParamValue(request.getTags()))","105","        .setParam(TYPES, inlineMultipleParamValue(request.getTypes())),"],"delete":["103","        .setParam(TAGS, inlineMultipleParamValue(request.getTags())),"]}],"it\/it-tests\/src\/test\/java\/it\/issue\/IssueSearchTest.java":[{"add":["41","import org.sonarqube.ws.client.issue.SearchWsRequest;","43","import static java.util.Arrays.asList;","44","import static java.util.Collections.singletonList;","47","import static org.sonarqube.ws.Issues.SearchWsResponse;","305","  @Test","306","  public void search_issues_by_types() throws IOException {","307","    assertThat(searchIssues(new SearchWsRequest().setTypes(singletonList(\"CODE_SMELL\"))).getPaging().getTotal()).isEqualTo(142);","308","    assertThat(searchIssues(new SearchWsRequest().setTypes(singletonList(\"BUG\"))).getPaging().getTotal()).isEqualTo(122);","309","    assertThat(searchIssues(new SearchWsRequest().setTypes(singletonList(\"VULNERABILITY\"))).getPaging().getTotal()).isEqualTo(8);","310","  }","311","","313","    return searchIssues(new SearchWsRequest().setRules(asList(ruleKey))).getIssuesList();","314","  }","315","","316","  private SearchWsResponse searchIssues(SearchWsRequest request) throws IOException {","317","    return newAdminWsClient(ORCHESTRATOR).issues().search(request);","321","    return Iterables.find(components, input -> key.equals(input.key()));"],"delete":["21","import com.google.common.base.Joiner;","22","import com.google.common.base.Predicate;","23","import com.google.common.collect.ImmutableMap;","44","import org.sonarqube.ws.MediaTypes;","45","import org.sonarqube.ws.client.GetRequest;","46","import org.sonarqube.ws.client.WsResponse;","308","    WsResponse response = newAdminWsClient(ORCHESTRATOR)","309","      .wsConnector()","310","      .call(new GetRequest(\"api\/issues\/search\")","311","        .setParam(\"rules\", Joiner.on(\",\").join(ruleKey))","312","        .setMediaType(MediaTypes.PROTOBUF));","313","    org.sonarqube.ws.Issues.SearchWsResponse searchWsResponse = org.sonarqube.ws.Issues.SearchWsResponse.parseFrom(response.contentStream());","314","    return searchWsResponse.getIssuesList();","318","    return Iterables.find(components, new Predicate<Component>() {","319","      @Override","320","      public boolean apply(Component input) {","321","        return key.equals(input.key());","322","      }","323","    });","324","  }","325","","326","  private static void createManualRule() {","327","    ORCHESTRATOR.getServer().adminWsClient().post(\"\/api\/rules\/create\", ImmutableMap.<String, Object>of(","328","      \"manual_key\", \"invalidclassname\",","329","      \"name\", \"InvalidClassName\",","330","      \"markdown_description\", \"Invalid class name\"));"]}]}},"c0a188703aa8ae849998dcfec016dd1d64d32107":{"changes":{"server\/sonar-web\/src\/main\/js\/source-viewer\/viewer.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/source-viewer\/viewer.js":[{"add":["459","          var line = $(e.currentTarget).data('line-number'),","460","              issuesList = $(e.currentTarget).parent().find('.issue-list'),","461","              areIssuesRendered = issuesList.find('.issue-inner').length > 0;","462","          if (issuesList.is('.hidden')) {","463","            if (areIssuesRendered) {","464","              issuesList.removeClass('hidden');","465","            } else {","466","              this.showIssuesForLine(line);","467","            }","469","            issuesList.addClass('hidden');"],"delete":["459","          var line = $(e.currentTarget).data('line-number');","460","          if ($(e.currentTarget).parent().find('.issue-list').is('.hidden')) {","461","            this.showIssuesForLine(line);","463","            $(e.currentTarget).parent().find('.issue-list').addClass('hidden');"]}]}},"67c3ad2d32d37a24cc9b030baa39cde7d3f8507b":{"changes":{"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/rule\/RuleDescriptionFormatter.java":"ADD","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/hotspot\/ws\/ShowAction.java":"MODIFY","server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/rule\/RuleDescriptionFormatterTest.java":"ADD","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/rule\/ws\/RuleMapper.java":"MODIFY","server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/hotspot\/ws\/ShowActionTest.java":"MODIFY"},"diff":{"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/rule\/RuleDescriptionFormatter.java":[{"add":[],"delete":[]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/hotspot\/ws\/ShowAction.java":[{"add":["47","import org.sonar.server.rule.RuleDescriptionFormatter;","49","import org.sonar.server.text.MacroInterpreter;","73","  private final MacroInterpreter macroInterpreter;","77","    UserResponseFormatter userFormatter, IssueChangeWSSupport issueChangeSupport, MacroInterpreter macroInterpreter) {","84","    this.macroInterpreter = macroInterpreter;","160","  private void formatRule(ShowWsResponse.Builder responseBuilder, RuleDefinitionDto ruleDefinitionDto) {","163","","169","","170","    if (ruleDefinitionDto.isCustomRule()) {","171","      String htmlDescription = RuleDescriptionFormatter.getDescriptionAsHtml(ruleDefinitionDto);","172","      if (htmlDescription != null) {","173","        ruleBuilder.setRiskDescription(macroInterpreter.interpret(htmlDescription));","174","      }","175","    } else {","176","      HotspotRuleDescription hotspotRuleDescription = HotspotRuleDescription.from(ruleDefinitionDto);","177","      hotspotRuleDescription.getVulnerable().ifPresent(ruleBuilder::setVulnerabilityDescription);","178","      hotspotRuleDescription.getRisk().ifPresent(ruleBuilder::setRiskDescription);","179","      hotspotRuleDescription.getFixIt().ifPresent(ruleBuilder::setFixRecommendations);","180","    }","181",""],"delete":["74","    UserResponseFormatter userFormatter, IssueChangeWSSupport issueChangeSupport) {","156","  private static void formatRule(ShowWsResponse.Builder responseBuilder, RuleDefinitionDto ruleDefinitionDto) {","159","    HotspotRuleDescription hotspotRuleDescription = HotspotRuleDescription.from(ruleDefinitionDto);","165","    hotspotRuleDescription.getVulnerable().ifPresent(ruleBuilder::setVulnerabilityDescription);","166","    hotspotRuleDescription.getRisk().ifPresent(ruleBuilder::setRiskDescription);","167","    hotspotRuleDescription.getFixIt().ifPresent(ruleBuilder::setFixRecommendations);"]}],"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/rule\/RuleDescriptionFormatterTest.java":[{"add":[],"delete":[]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/rule\/ws\/RuleMapper.java":[{"add":["39","import org.sonar.server.rule.RuleDescriptionFormatter;","302","      String htmlDescription = RuleDescriptionFormatter.getDescriptionAsHtml(ruleDto);","303","      if (htmlDescription != null) {","304","        ruleResponse.setHtmlDesc(macroInterpreter.interpret(htmlDescription));","308","    String description = ruleDto.getDescription();"],"delete":["300","    String description = ruleDto.getDescription();","302","      RuleDto.Format descriptionFormat = ruleDto.getDescriptionFormat();","303","      if (description != null && descriptionFormat != null) {","304","        switch (descriptionFormat) {","305","          case MARKDOWN:","306","            ruleResponse.setHtmlDesc(macroInterpreter.interpret(Markdown.convertToHtml(description)));","307","            break;","308","          case HTML:","309","            ruleResponse.setHtmlDesc(macroInterpreter.interpret(description));","310","            break;","311","          default:","312","            throw new IllegalStateException(format(\"Rule description format '%s' is unknown for key '%s'\", descriptionFormat, ruleDto.getKey().toString()));","313","        }"]}],"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/hotspot\/ws\/ShowActionTest.java":[{"add":["37","import org.junit.Before;","73","import org.sonar.server.text.MacroInterpreter;","87","import static org.mockito.ArgumentMatchers.anyString;","90","import static org.mockito.Mockito.doReturn;","91","import static org.mockito.Mockito.mock;","93","import static org.mockito.Mockito.verifyNoInteractions;","97","import static org.sonar.db.rule.RuleDto.Format.MARKDOWN;","102","  private static final String INTERPRETED = \"interpreted\";","114","  private MacroInterpreter macroInterpreter = mock(MacroInterpreter.class);","115","","123","  private ShowAction underTest = new ShowAction(dbClient, hotspotWsSupport, responseFormatter, textRangeFormatter, userFormatter, issueChangeSupport, macroInterpreter);","126","  @Before","127","  public void before() {","128","    doReturn(INTERPRETED).when(macroInterpreter).interpret(anyString());","129","  }","130","","388","  public void returns_html_description_for_custom_rules() {","389","    ComponentDto project = dbTester.components().insertPrivateProject();","390","    userSessionRule.registerComponents(project);","391","    userSessionRule.logIn().addProjectPermission(UserRole.USER, project);","392","    ComponentDto file = dbTester.components().insertComponent(newFileDto(project));","393","","394","    String description = \"<div>line1\\nline2<\/div>\";","395","    String parsedDescription = \"&lt;div&gt;line1<br\/>line2&lt;\/div&gt;\";","396","    String resultingDescription = \"!\" + parsedDescription + \"!\";","397","","398","    RuleDefinitionDto rule = newRule(SECURITY_HOTSPOT,","399","      r -> r.setTemplateId(123)","400","        .setDescription(description)","401","        .setDescriptionFormat(MARKDOWN)","402","    );","403","","404","    doReturn(resultingDescription).when(macroInterpreter).interpret(parsedDescription);","405","","406","    IssueDto hotspot = dbTester.issues().insertHotspot(rule, project, file);","407","    mockChangelogAndCommentsFormattingContext();","408","","409","    Hotspots.ShowWsResponse response = newRequest(hotspot)","410","      .executeProtobuf(Hotspots.ShowWsResponse.class);","411","","412","    assertThat(response.getRule().getRiskDescription()).isEqualTo(resultingDescription);","413","  }","414","","415","  @Test","416","  public void handles_null_description_for_custom_rules() {","417","    ComponentDto project = dbTester.components().insertPrivateProject();","418","    userSessionRule.registerComponents(project);","419","    userSessionRule.logIn().addProjectPermission(UserRole.USER, project);","420","    ComponentDto file = dbTester.components().insertComponent(newFileDto(project));","421","","422","    RuleDefinitionDto rule = newRule(SECURITY_HOTSPOT, r -> r.setTemplateId(123).setDescription(null));","423","","424","    IssueDto hotspot = dbTester.issues().insertHotspot(rule, project, file);","425","    mockChangelogAndCommentsFormattingContext();","426","","427","    Hotspots.ShowWsResponse response = newRequest(hotspot)","428","      .executeProtobuf(Hotspots.ShowWsResponse.class);","429","","430","    assertThat(response.getRule().getRiskDescription()).isNullOrEmpty();","431","","432","    verifyNoInteractions(macroInterpreter);","433","  }","434","","435","  @Test"],"delete":["113","  private ShowAction underTest = new ShowAction(dbClient, hotspotWsSupport, responseFormatter, textRangeFormatter, userFormatter, issueChangeSupport);"]}]}},"5025dd99bfcf1233844199e978e4fea8117b4fde":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/styles.css":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/styles.css":[{"add":["104","  min-width: 80px;","107","  white-space: nowrap;","108","  overflow: hidden;","109","  text-overflow: ellipsis;"],"delete":["104","  width: 80px;"]}]}},"d5302c2e5cf81f2794294ae49c1996538b38e8d4":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/CeModule.java":"ADD","\/dev\/null":"DELETE","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/queue\/CeQueueModule.java":"ADD","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/container\/ReportProcessingModule.java":"ADD","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/platformlevel\/PlatformLevel4.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/CeModule.java":[{"add":[],"delete":[]}],"\/dev\/null":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/queue\/CeQueueModule.java":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/container\/ReportProcessingModule.java":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/platformlevel\/PlatformLevel4.java":[{"add":["63","import org.sonar.server.computation.CeModule;","64","import org.sonar.server.computation.container.ReportProcessingModule;","65","import org.sonar.server.computation.queue.CeQueueModule;","703","      CeModule.class,","704","      CeQueueModule.class,","706","      ReportProcessingModule.class,","707",""],"delete":["40","import org.sonar.db.purge.period.DefaultPeriodCleaner;","64","import org.sonar.server.computation.queue.CeQueueImpl;","65","import org.sonar.server.computation.queue.CeQueueCleaner;","66","import org.sonar.server.computation.queue.CeQueueInitializer;","67","import org.sonar.server.computation.queue.report.CleanReportQueueListener;","68","import org.sonar.server.computation.ComputeEngineProcessingModule;","69","import org.sonar.server.computation.queue.report.ReportFiles;","70","import org.sonar.server.computation.queue.report.ReportSubmitter;","71","import org.sonar.server.computation.dbcleaner.IndexPurgeListener;","72","import org.sonar.server.computation.dbcleaner.ProjectCleaner;","73","import org.sonar.server.computation.log.CeLogging;","74","import org.sonar.server.computation.monitoring.CEQueueStatusImpl;","75","import org.sonar.server.computation.monitoring.ComputeEngineQueueMonitor;","211","import org.sonar.server.properties.ProjectSettingsFactory;","714","      CEQueueStatusImpl.class,","715","      ComputeEngineQueueMonitor.class,","716","      CeQueueImpl.class,","717","      CleanReportQueueListener.class,","718","      ReportFiles.class,","719","      ComputeEngineProcessingModule.class,","721","      CeLogging.class,","722","      DefaultPeriodCleaner.class,","723","      ProjectCleaner.class,","724","      ProjectSettingsFactory.class,","725","      IndexPurgeListener.class,","726","      ReportSubmitter.class,","727","      CeQueueCleaner.class,","728","      CeQueueInitializer.class,"]}]}},"087f4fc5eafaeb07757db27179bd61263fd87f8a":{"changes":{"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/ce\/CeActivityDto.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/ce\/CeActivityDtoTest.java":"ADD"},"diff":{"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/ce\/CeActivityDto.java":[{"add":["241","    this.errorMessage = ensureNotTooBig(removeCharZeros(errorMessage), MAX_SIZE_ERROR_MESSAGE);","262","    this.errorStacktrace = removeCharZeros(errorStacktrace);","297","","298","  @CheckForNull","299","  private static String ensureNotTooBig(@Nullable String str, int maxSize) {","300","    if (str == null) {","301","      return null;","302","    }","303","    if (str.length() <= maxSize) {","304","      return str;","305","    }","306","    return str.substring(0, maxSize);","307","  }","308","","309","  @CheckForNull","310","  private static String removeCharZeros(@Nullable String str) {","311","    if (str == null || str.isEmpty()) {","312","      return str;","313","    }","314","    return str.codePoints()","315","      .filter(c -> c != \"\\u0000\".codePointAt(0))","316","      .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)","317","      .toString();","318","  }"],"delete":["241","    this.errorMessage = ensureNotTooBig(errorMessage, MAX_SIZE_ERROR_MESSAGE);","256","  private static String ensureNotTooBig(@Nullable String str, int maxSize) {","257","    if (str == null) {","258","      return null;","259","    }","260","    if (str.length() <= maxSize) {","261","      return str;","262","    }","263","    return str.substring(0, maxSize);","264","  }","265","","266","  @CheckForNull","273","    this.errorStacktrace = errorStacktrace;"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/ce\/CeActivityDtoTest.java":[{"add":[],"delete":[]}]}},"8e95c83dd117559e9d0f87c6133e04bbf801d982":{"changes":{"server\/sonar-web\/src\/main\/hbs\/nav\/nav-context-navbar.hbs":"MODIFY","server\/sonar-web\/src\/main\/js\/nav\/context-navbar-view.js":"MODIFY","server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/layouts\/_navbar_conf_context.html.erb":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/hbs\/nav\/nav-context-navbar.hbs":[{"add":["72","        {{#each contextExtensions}}","73","          <li>","74","            <a href=\"{{link url}}\">{{label}}<\/a>","75","          <\/li>","76","        {{\/each}}"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/nav\/context-navbar-view.js":[{"add":["24","      MORE_URLS = [","25","          '\/design', '\/libraries', '\/dashboards', '\/plugins\/resource'","63","          isMoreActive = _.some(MORE_URLS, function (url) {"],"delete":["24","      OVERVIEW_URLS = [","25","          '\/design', '\/libraries', '\/dashboards'","63","          isMoreActive = _.some(OVERVIEW_URLS, function (url) {","70",""]}],"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/layouts\/_navbar_conf_context.html.erb":[{"add":["31","    ],","32","    contextExtensions: [","33","      <% project_metrics = @project.last_snapshot.metric_keys.to_java(:string) if @project.last_snapshot","34","         pages = controller.java_facade.getPages(Navigation::SECTION_RESOURCE.key, @project.scope, @project.qualifier, @project.language, project_metrics)","35","         pages.each_with_index do |page, index|","36","           page_url = (page.isController() ? \"#{page.getId()}?id=#{@project.id}\" : \"\/plugins\/resource\/#{@project.id}?page=#{page.getId()}\")","37","      %>","38","      {","39","        url: '<%= page_url -%>',","40","        label: '<%= escape_javascript message(page.getId() + '.page', :default => page.getTitle()) -%>'","41","      }<% if index < pages.size - 1 -%>, <% end %>","42","      <% end %>"],"delete":[]}]}},"afb93fd7b31b4df521f25fcb92b8d0e17741e1f5":{"changes":{"server\/sonar-web\/config\/webpack.config.js":"MODIFY"},"diff":{"server\/sonar-web\/config\/webpack.config.js":[{"add":["128","      exotics: true, \/\/ used to compare \"exotic\" values, like dates"],"delete":[]}]}},"cab459c9dceb0fcc47ae83d20a369bd53d50d4dc":{"changes":{"server\/sonar-web\/src\/main\/js\/api\/components.ts":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/api\/components.ts":[{"add":["59","export function bulkDeleteProjects(","60","  parameters: BaseSearchProjectsParameters","61","): Promise<void | Response> {","62","  return post('\/api\/projects\/bulk_delete', parameters).catch(throwGlobalError);"],"delete":["59","export function bulkDeleteProjects(parameters: BaseSearchProjectsParameters): Promise<void> {","60","  return post('\/api\/projects\/bulk_delete', parameters);"]}]}},"1b9b161ffc7a35433028102f17ea968622ae1134":{"changes":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY"},"diff":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["2324","x_of_y_shown={0} of {1} shown"],"delete":[]}]}},"f91cf3ea0050655c715dc20465118a0568d4ec83":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/SimilarRulesFilter.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/RuleFacet.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/home\/EvolutionRules.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/utils.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/types.ts":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/SimilarRulesFilter.tsx":[{"add":["38","    if (this.props.rule.lang) {","39","      this.props.onFilterChange({ languages: [this.props.rule.lang] });","40","    }"],"delete":["38","    this.props.onFilterChange({ languages: [this.props.rule.lang] });"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/RuleFacet.tsx":[{"add":["64","  getRuleName = (ruleKey: string) => {","65","    const rule = this.props.referencedRules[ruleKey];","66","    return rule ? this.formatRuleName(rule.name, rule.langName) : ruleKey;","67","  };","68","","69","  formatRuleName = (name: string, langName: string | undefined) => {","70","    \/\/ external rules don't have a language associated","71","    \/\/ see https:\/\/jira.sonarsource.com\/browse\/MMF-1407","72","    return langName ? `(${langName}) ${name}` : name;","76","    return this.formatRuleName(rule.name, rule.langName);"],"delete":["64","  getRuleName = (rule: string) => {","65","    const { referencedRules } = this.props;","66","    return referencedRules[rule]","67","      ? `(${referencedRules[rule].langName}) ${referencedRules[rule].name}`","68","      : rule;","72","    return `(${rule.langName}) ${rule.name}`;"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/home\/EvolutionRules.tsx":[{"add":["124","                        rule.langName!,","129","                        rule.langName!"],"delete":["124","                        rule.langName,","129","                        rule.langName"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/utils.ts":[{"add":["204","  langName?: string;"],"delete":["204","  langName: string;"]}],"server\/sonar-web\/src\/main\/js\/app\/types.ts":[{"add":["524","  lang?: string;","525","  langName?: string;"],"delete":["524","  lang: string;","525","  langName: string;"]}]}},"593c7f08b8afa34f5bb683a34265f81b11094a62":{"changes":{"it\/it-projects\/shared\/xoo-sample-module-move-v2\/new_module\/module_a\/src\/main\/xoo\/sample\/Sample.xoo.measures":"ADD","it\/it-projects\/shared\/xoo-sample-module-move-v1\/module_a\/src\/main\/xoo\/sample\/Sample.xoo":"ADD","it\/it-projects\/shared\/xoo-sample-module-move-v2\/sonar-project.properties":"ADD","it\/it-projects\/shared\/xoo-sample-module-move-v1\/module_a\/sonar-project.properties":"ADD","it\/it-projects\/shared\/xoo-sample-module-move-v1\/module_a\/src\/main\/xoo\/sample\/Sample.xoo.measures":"ADD","it\/it-projects\/shared\/xoo-sample-module-move-v2\/new_module\/module_a\/src\/main\/xoo\/sample\/Sample.xoo":"ADD","it\/it-projects\/shared\/xoo-sample-module-move-v2\/new_module\/sonar-project.properties":"ADD","it\/it-tests\/src\/test\/java\/it\/measure\/MeasuresWsTest.java":"MODIFY","it\/it-projects\/shared\/xoo-sample-module-move-v2\/new_module\/module_a\/sonar-project.properties":"ADD","it\/it-projects\/shared\/xoo-sample-module-move-v1\/sonar-project.properties":"ADD"},"diff":{"it\/it-projects\/shared\/xoo-sample-module-move-v2\/new_module\/module_a\/src\/main\/xoo\/sample\/Sample.xoo.measures":[{"add":[],"delete":[]}],"it\/it-projects\/shared\/xoo-sample-module-move-v1\/module_a\/src\/main\/xoo\/sample\/Sample.xoo":[{"add":[],"delete":[]}],"it\/it-projects\/shared\/xoo-sample-module-move-v2\/sonar-project.properties":[{"add":[],"delete":[]}],"it\/it-projects\/shared\/xoo-sample-module-move-v1\/module_a\/sonar-project.properties":[{"add":[],"delete":[]}],"it\/it-projects\/shared\/xoo-sample-module-move-v1\/module_a\/src\/main\/xoo\/sample\/Sample.xoo.measures":[{"add":[],"delete":[]}],"it\/it-projects\/shared\/xoo-sample-module-move-v2\/new_module\/module_a\/src\/main\/xoo\/sample\/Sample.xoo":[{"add":[],"delete":[]}],"it\/it-projects\/shared\/xoo-sample-module-move-v2\/new_module\/sonar-project.properties":[{"add":[],"delete":[]}],"it\/it-tests\/src\/test\/java\/it\/measure\/MeasuresWsTest.java":[{"add":["47","","49","  private static final String DIR_KEY = \"sample:src\/main\/xoo\/sample\";","73","    scanXooSample();","74","","84","    assertThat(components).hasSize(2).extracting(\"key\").containsOnly(DIR_KEY, FILE_KEY);","88","  \/**","89","   * @see SONAR-7958","90","   *\/","91","  @Test","92","  public void component_tree_supports_module_move_down() {","93","    String projectKey = \"sample\";","94","    String newModuleKey = \"sample:new_module\";","95","    String moduleAKey = \"module_a\";","96","    String dirKey = \"module_a:src\/main\/xoo\/sample\";","97","    String fileKey = \"module_a:src\/main\/xoo\/sample\/Sample.xoo\";","98","","99","    scanXooSampleModuleMoveV1();","100","","101","    verifyComponentTreeWithChildren(projectKey, moduleAKey);","102","    verifyComponentTreeWithChildren(moduleAKey, dirKey);","103","    verifyComponentTreeWithChildren(dirKey, fileKey);","104","","105","    scanXooSampleModuleMoveV2();","106","","107","    verifyComponentTreeWithChildren(projectKey, newModuleKey);","108","    verifyComponentTreeWithChildren(newModuleKey, moduleAKey);","109","    verifyComponentTreeWithChildren(moduleAKey, dirKey);","110","    verifyComponentTreeWithChildren(dirKey, fileKey);","111","  }","112","","113","  \/**","114","   * @see SONAR-7958","115","   *\/","116","  @Test","117","  public void component_tree_supports_module_move_up() {","118","    String projectKey = \"sample\";","119","    String newModuleKey = \"sample:new_module\";","120","    String moduleAKey = \"module_a\";","121","    String dirKey = \"module_a:src\/main\/xoo\/sample\";","122","    String fileKey = \"module_a:src\/main\/xoo\/sample\/Sample.xoo\";","123","","124","    scanXooSampleModuleMoveV2();","125","","126","    verifyComponentTreeWithChildren(projectKey, newModuleKey);","127","    verifyComponentTreeWithChildren(newModuleKey, moduleAKey);","128","    verifyComponentTreeWithChildren(moduleAKey, dirKey);","129","    verifyComponentTreeWithChildren(dirKey, fileKey);","130","","131","    scanXooSampleModuleMoveV1();","132","","133","    verifyComponentTreeWithChildren(projectKey, moduleAKey);","134","    verifyComponentTreeWithChildren(moduleAKey, dirKey);","135","    verifyComponentTreeWithChildren(dirKey, fileKey);","136","  }","137","","138","  private void verifyComponentTreeWithChildren(String baseComponentKey, String... childKeys) {","139","    ComponentTreeWsResponse response = wsClient.measures().componentTree(new ComponentTreeWsRequest()","140","      .setBaseComponentKey(baseComponentKey)","141","      .setMetricKeys(singletonList(\"ncloc\"))","142","      .setStrategy(\"children\"));","143","","144","    assertThat(response.getBaseComponent().getKey()).isEqualTo(baseComponentKey);","145","    assertThat(response.getComponentsList())","146","      .extracting(\"key\").containsOnly(childKeys);","147","  }","148","","151","    scanXooSample();","152","","162","  }","164","  private void scanXooSample() {","165","    orchestrator.executeBuild(SonarScanner.create(projectDir(\"shared\/xoo-sample\")));","166","  }","167","","168","  private void scanXooSampleModuleMoveV1() {","169","    orchestrator.executeBuild(SonarScanner.create(projectDir(\"shared\/xoo-sample-module-move-v1\")));","170","  }","171","","172","  private void scanXooSampleModuleMoveV2() {","173","    orchestrator.executeBuild(SonarScanner.create(projectDir(\"shared\/xoo-sample-module-move-v2\")));"],"delete":["65","    orchestrator.executeBuild(SonarScanner.create(projectDir(\"shared\/xoo-sample\")));","81","    assertThat(components).hasSize(2).extracting(\"key\").containsOnly(\"sample:src\/main\/xoo\/sample\", FILE_KEY);"]}],"it\/it-projects\/shared\/xoo-sample-module-move-v2\/new_module\/module_a\/sonar-project.properties":[{"add":[],"delete":[]}],"it\/it-projects\/shared\/xoo-sample-module-move-v1\/sonar-project.properties":[{"add":[],"delete":[]}]}},"d761e6fb62e79902569219090402e529bc373c3d":{"changes":{"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v62\/UpdateQualityGateConditionsOnCoverage.java":"MODIFY","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v62\/UpdateQualityGateConditionsOnCoverageTest.java":"MODIFY"},"diff":{"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v62\/UpdateQualityGateConditionsOnCoverage.java":[{"add":["21","import com.google.common.base.Throwables;","23","import com.google.common.collect.Multimap;","26","import java.util.Collection;","27","import java.util.Collections;","38","import org.sonar.server.platform.db.migration.step.Upsert;","41","import static org.sonar.core.util.stream.MoreCollectors.index;","103","      Multimap<Long, QualityGateCondition> qualityGateConditionsByMetricId = qualityGateConditions.stream()","104","        .collect(index(QualityGateCondition::getMetricId, Function.identity()));","111","    private void processConditions(String coverageMetricKey, String overallMetricKey, String itMetricKey, Multimap<Long, QualityGateCondition> qualityGateConditionsByMetricId,","114","        Collection<QualityGateCondition> conditionsOnCoverage = getConditionsByMetricKey(coverageMetricKey, qualityGateConditionsByMetricId);","115","        Collection<QualityGateCondition> conditionsOnOverallCoverage = getConditionsByMetricKey(overallMetricKey, qualityGateConditionsByMetricId);","116","        Collection<QualityGateCondition> conditionsOnItCoverage = getConditionsByMetricKey(itMetricKey, qualityGateConditionsByMetricId);","117","        if (conditionsOnCoverage.isEmpty() && conditionsOnOverallCoverage.isEmpty() && conditionsOnItCoverage.isEmpty()) {","120","        if (!conditionsOnOverallCoverage.isEmpty()) {","121","          removeQualityGateConditions(conditionsOnCoverage);","122","          removeQualityGateConditions(conditionsOnItCoverage);","123","          updateQualityGateConditions(conditionsOnOverallCoverage, coverageMetricKey);","124","        } else if (!conditionsOnCoverage.isEmpty()) {","125","          removeQualityGateConditions(conditionsOnItCoverage);","126","        } else {","127","          updateQualityGateConditions(conditionsOnItCoverage, coverageMetricKey);","134","    private Collection<QualityGateCondition> getConditionsByMetricKey(String metricKey, Multimap<Long, QualityGateCondition> qualityGateConditionsByMetricId) {","137","        return Collections.emptyList();","139","      return qualityGateConditionsByMetricId.get(metric.getId());","157","    private void updateQualityGateConditions(Collection<QualityGateCondition> conditions, String metricKey) throws SQLException {","158","      Upsert upsert = context.prepareUpsert(\"update quality_gate_conditions set metric_id=? where id=?\");","159","      conditions.forEach(condition -> {","160","        try {","161","          upsert","162","            .setLong(1, metricsByMetricKeys.get(metricKey).getId())","163","            .setLong(2, condition.getId())","164","            .execute()","165","            .commit();","166","        } catch (SQLException e) {","167","          Throwables.propagate(e);","168","        }","169","      });","172","    private void removeQualityGateConditions(Collection<QualityGateCondition> conditions) throws SQLException {","173","      if (conditions.isEmpty()) {","176","      Upsert upsert = context.prepareUpsert(\"delete from quality_gate_conditions where id=?\");","177","      conditions.forEach(condition -> {","178","        try {","179","          upsert.setLong(1, condition.getId())","180","            .execute()","181","            .commit();","182","        } catch (SQLException e) {","183","          Throwables.propagate(e);","184","        }","185","      });"],"delete":["26","import java.util.Optional;","98","      Map<Long, QualityGateCondition> qualityGateConditionsByMetricId = qualityGateConditions.stream()","99","        .collect(uniqueIndex(QualityGateCondition::getMetricId, Function.identity()));","106","    private void processConditions(String coverageMetricKey, String overallMetricKey, String itMetricKey, Map<Long, QualityGateCondition> qualityGateConditionsByMetricId,","109","        Optional<QualityGateCondition> conditionOnCoverage = getConditionByMetricKey(coverageMetricKey, qualityGateConditionsByMetricId);","110","        Optional<QualityGateCondition> conditionOnOverallCoverage = getConditionByMetricKey(overallMetricKey, qualityGateConditionsByMetricId);","111","        Optional<QualityGateCondition> conditionOnItCoverage = getConditionByMetricKey(itMetricKey, qualityGateConditionsByMetricId);","112","        if (!conditionOnCoverage.isPresent() && !conditionOnOverallCoverage.isPresent() && !conditionOnItCoverage.isPresent()) {","115","        if (conditionOnOverallCoverage.isPresent()) {","116","          removeQualityGateCondition(conditionOnCoverage);","117","          removeQualityGateCondition(conditionOnItCoverage);","118","          updateQualityGateCondition(conditionOnOverallCoverage.get().getId(), coverageMetricKey);","119","        } else if (conditionOnCoverage.isPresent()) {","120","          removeQualityGateCondition(conditionOnItCoverage);","121","        } else if (conditionOnItCoverage.isPresent()) {","122","          updateQualityGateCondition(conditionOnItCoverage.get().getId(), coverageMetricKey);","129","    private Optional<QualityGateCondition> getConditionByMetricKey(String metricKey, Map<Long, QualityGateCondition> qualityGateConditionsByMetricId) {","132","        return Optional.empty();","134","      return Optional.ofNullable(qualityGateConditionsByMetricId.get(metric.getId()));","152","    private void updateQualityGateCondition(long id, String metricKey) throws SQLException {","153","      context.prepareUpsert(\"update quality_gate_conditions set metric_id=? where id=?\")","154","        .setLong(1, metricsByMetricKeys.get(metricKey).getId())","155","        .setLong(2, id)","156","        .execute()","157","        .commit();","160","    private void removeQualityGateCondition(Optional<QualityGateCondition> condition) throws SQLException {","161","      if (!condition.isPresent()) {","164","      context.prepareUpsert(\"delete from quality_gate_conditions where id=?\").setLong(1, condition.get().getId())","165","        .execute()","166","        .commit();"]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v62\/UpdateQualityGateConditionsOnCoverageTest.java":[{"add":["60","    Map<String, Long> metricIdsByMetricKeys = insertSampleMetrics();","72","    Map<String, Long> metricIdsByMetricKeys = insertSampleMetrics();","85","    Map<String, Long> metricIdsByMetricKeys = insertSampleMetrics();","98","    Map<String, Long> metricIdsByMetricKeys = insertSampleMetrics();","110","    Map<String, Long> metricIdsByMetricKeys = insertSampleMetrics();","123","    Map<String, Long> metricIdsByMetricKeys = insertSampleMetrics();","210","  public void move_conditions_linked_to_same_metric() throws Exception {","211","    insertMetric(\"coverage\");","212","    long metricId = insertMetric(\"overall_coverage\");","213","    long qualityGate = insertQualityGate(\"qualityGate\");","214","    insertQualityGateCondition(qualityGate, metricId, null, \"GT\", \"7\", \"15\");","215","    insertQualityGateCondition(qualityGate, metricId, 1L, \"GT\", \"10\", null);","216","","217","    underTest.execute();","218","","219","    assertThat(dbTester.countRowsOfTable(TABLE_QUALITY_GATE_CONDITIONS)).isEqualTo(2);","220","    verifyConditions(qualityGate,","221","      new QualityGateCondition(\"coverage\", null, \"GT\", \"7\", \"15\"),","222","      new QualityGateCondition(\"coverage\", 1L, \"GT\", \"10\", null));","223","  }","224","","225","  @Test","241","  private Map<String, Long> insertSampleMetrics() {","275","    String sql = format(\"select id as \\\"id\\\" from %s where qgate_id='%s' and metric_id='%s'\", TABLE_QUALITY_GATE_CONDITIONS, qualityGateId, metricId);","276","    sql += period == null ? \"\" : format(\" and period='%s'\", period);","278","      .selectFirst(sql)"],"delete":["60","    Map<String, Long> metricIdsByMetricKeys = inserSampleMetrics();","72","    Map<String, Long> metricIdsByMetricKeys = inserSampleMetrics();","85","    Map<String, Long> metricIdsByMetricKeys = inserSampleMetrics();","98","    Map<String, Long> metricIdsByMetricKeys = inserSampleMetrics();","110","    Map<String, Long> metricIdsByMetricKeys = inserSampleMetrics();","123","    Map<String, Long> metricIdsByMetricKeys = inserSampleMetrics();","225","  private Map<String, Long> inserSampleMetrics() {","260","      .selectFirst(format(\"select id as \\\"id\\\" from %s where qgate_id='%s' and metric_id='%s'\", TABLE_QUALITY_GATE_CONDITIONS, qualityGateId, metricId))"]}]}},"770be1eac18e8a7f99f0596938f38054e2abfb40":{"changes":{"sonar-db\/src\/test\/java\/org\/sonar\/db\/qualitygate\/QualityGateConditionDaoTest.java":"MODIFY","sonar-db\/src\/main\/java\/org\/sonar\/db\/qualitygate\/ProjectQgateAssociationQuery.java":"MODIFY","sonar-db\/src\/test\/java\/org\/sonar\/db\/qualitygate\/ProjectQgateAssociationQueryTest.java":"MODIFY"},"diff":{"sonar-db\/src\/test\/java\/org\/sonar\/db\/qualitygate\/QualityGateConditionDaoTest.java":[{"add":["40","  QualityGateConditionDao underTest = dbTester.getDbClient().gateConditionDao();","47","    underTest.insert(newCondition);","55","    assertThat(underTest.selectForQualityGate(1L)).hasSize(3);","56","    assertThat(underTest.selectForQualityGate(2L)).hasSize(2);","62","    QualityGateConditionDto selectById = underTest.selectById(1L);","71","    assertThat(underTest.selectById(42L)).isNull();","77","    underTest.delete(new QualityGateConditionDto().setId(1L));","84","    underTest.update(new QualityGateConditionDto().setId(1L).setMetricId(7L).setOperator(\">\").setPeriod(1).setWarningThreshold(\"50\").setErrorThreshold(\"80\"));","91","    underTest.deleteConditionsWithInvalidMetrics();"],"delete":["40","  QualityGateConditionDao dao = dbTester.getDbClient().gateConditionDao();","47","    dao.insert(newCondition);","55","    assertThat(dao.selectForQualityGate(1L)).hasSize(3);","56","    assertThat(dao.selectForQualityGate(2L)).hasSize(2);","62","    QualityGateConditionDto selectById = dao.selectById(1L);","71","    assertThat(dao.selectById(42L)).isNull();","77","    dao.delete(new QualityGateConditionDto().setId(1L));","84","    dao.update(new QualityGateConditionDto().setId(1L).setMetricId(7L).setOperator(\">\").setPeriod(1).setWarningThreshold(\"50\").setErrorThreshold(\"80\"));","91","    dao.deleteConditionsWithInvalidMetrics();"]}],"sonar-db\/src\/main\/java\/org\/sonar\/db\/qualitygate\/ProjectQgateAssociationQuery.java":[{"add":["44","  private final String projectSearchSql;","62","  private String projectSearchToSql(@Nullable String value) {","63","    if (value == null) {","64","      return null;","66","","67","    return value","68","      .replaceAll(\"%\", \"\\\\\\\\%\")","69","      .replaceAll(\"_\", \"\\\\\\\\_\")","70","      .toLowerCase() + \"%\";","90","  public String projectSearchSql() {","91","    return projectSearchSql;","92","  }","93","","147","          \"Membership is not valid (got \" + membership + \"). Available values are \" + AVAILABLE_MEMBERSHIP);","165","      Preconditions.checkNotNull(gateId, \"Gate ID cannot be null.\");"],"delete":["44","  final String projectSearchSql;","62","  private String projectSearchToSql(@Nullable String s) {","63","    String sql = null;","64","    if (s != null) {","65","      sql = StringUtils.replace(StringUtils.lowerCase(s), \"%\", \"\/%\");","66","      sql = StringUtils.replace(sql, \"_\", \"\/_\");","67","      sql = sql + \"%\";","69","    return sql;","142","          \"Membership is not valid (got \" + membership + \"). Availables values are \" + AVAILABLE_MEMBERSHIP);","160","      Preconditions.checkNotNull(gateId, \"Gate ID cant be null.\");"]}],"sonar-db\/src\/test\/java\/org\/sonar\/db\/qualitygate\/ProjectQgateAssociationQueryTest.java":[{"add":["22","import org.junit.Rule;","24","import org.junit.rules.ExpectedException;","30","  @Rule","31","  public ExpectedException expectedException = ExpectedException.none();","32","","33","  @Test","34","  public void handle_underscore_and_percent() {","35","    ProjectQgateAssociationQuery underTest = ProjectQgateAssociationQuery.builder()","36","      .projectSearch(\"project-_%-search\")","37","      .gateId(\"1\").build();","38","","39","    assertThat(underTest.projectSearchSql()).isEqualTo(\"project-\\\\_\\\\%-search%\");","40","  }","41","","44","    expectedException.expect(NullPointerException.class);","45","    expectedException.expectMessage(\"Gate ID cannot be null\");","47","    ProjectQgateAssociationQuery.Builder builder = ProjectQgateAssociationQuery.builder()","48","      .gateId(null);","49","","50","    builder.build();","55","    expectedException.expect(IllegalArgumentException.class);","56","    expectedException.expectMessage(\"Membership is not valid (got unknown). Available values are [all, selected, deselected]\");","57","","60","    builder.membership(\"unknown\");","62","    builder.build();"],"delete":["25","import static org.junit.Assert.fail;","31","    ProjectQgateAssociationQuery.Builder builder = ProjectQgateAssociationQuery.builder();","32","    builder.gateId(null);","34","    try {","35","      builder.build();","36","      fail();","37","    } catch (Exception e) {","38","      assertThat(e).isInstanceOf(NullPointerException.class).hasMessage(\"Gate ID cant be null.\");","39","    }","46","    builder.membership(\"unknwown\");","48","    try {","49","      builder.build();","50","      fail();","51","    } catch (Exception e) {","52","      assertThat(e).isInstanceOf(IllegalArgumentException.class).hasMessage(\"Membership is not valid (got unknwown). Availables values are [all, selected, deselected]\");","53","    }","55",""]}]}},"2e79ddbc769ea669173acbafcacf93eb4a088cc4":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/code\/utils.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/code\/components\/App.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/code\/utils.js":[{"add":["93","    page: r.paging.pageIndex,","94","    baseComponent: r.baseComponent","127","function retrieveComponentBase (componentKey, isView) {","146","export function retrieveComponentChildren (componentKey, isView) {"],"delete":["93","    page: r.paging.pageIndex","126","export function retrieveComponentBase (componentKey, isView) {","145","function retrieveComponentChildren (componentKey, isView) {"]}],"server\/sonar-web\/src\/main\/js\/apps\/code\/components\/App.js":[{"add":["27","import { retrieveComponentChildren, retrieveComponent, loadMoreChildren, parseError } from '..\/utils';","28","import { addComponent, addComponentBreadcrumbs } from '..\/bucket';","70","    retrieveComponentChildren(component.key, isView).then(r => {","71","      addComponent(r.baseComponent);","72","      const prefix = selectCoverageMetric(r.baseComponent.measures);"],"delete":["27","import { retrieveComponentBase, retrieveComponent, loadMoreChildren, parseError } from '..\/utils';","28","import { addComponentBreadcrumbs } from '..\/bucket';","70","    retrieveComponentBase(component.key, isView).then(component => {","71","      const prefix = selectCoverageMetric(component.measures);"]}]}},"e5f5ca562f10727eead9e0de8fe1a090dea8399d":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/monitoring\/CEQueueStatusImplTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/monitoring\/CEQueueStatus.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/monitoring\/CEQueueStatusImplConcurrentTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/monitoring\/CEQueueStatusImpl.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/queue\/CeQueueImplTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/monitoring\/CEQueueStatusImplTest.java":[{"add":["31","  private static final long INITIAL_PENDING_COUNT = 996L;","57","    expectedException.expect(IllegalStateException.class);","58","    expectedException.expectMessage(\"Method initPendingCount must be used before any other method and can not be called twice\");","65","  public void addReceived_throws_ISE_if_called_before_initPendingCount() {","66","    expectedException.expect(IllegalStateException.class);","67","    expectedException.expectMessage(\"Method initPendingCount must be used before addReceived can be called\");","74","    underTest.initPendingCount(INITIAL_PENDING_COUNT);","75","","79","    assertThat(underTest.getPendingCount()).isEqualTo(INITIAL_PENDING_COUNT + 1);","84","    underTest.initPendingCount(INITIAL_PENDING_COUNT);","85","","92","    assertThat(underTest.getPendingCount()).isEqualTo(INITIAL_PENDING_COUNT + calls);","93","  }","94","","95","  @Test","96","  public void addInProgress_throws_ISE_if_called_before_initPendingCount() {","97","    expectedException.expect(IllegalStateException.class);","98","    expectedException.expectMessage(\"Method initPendingCount must be used before addInProgress can be called\");","99","","100","    underTest.addInProgress();","105","    underTest.initPendingCount(INITIAL_PENDING_COUNT);","106","","110","    assertThat(underTest.getPendingCount()).isEqualTo(INITIAL_PENDING_COUNT - 1);","119","    underTest.initPendingCount(INITIAL_PENDING_COUNT);","120","","127","    assertThat(underTest.getPendingCount()).isEqualTo(INITIAL_PENDING_COUNT - calls);"],"delete":["29","  private static final String ISE_initPendingCount_CALL_MSG = \"Method initPendingCount must be used before any other method and can not be called twice\";","57","    expectISEForIllegalCallToInitPendingCount();","64","  public void initPendingCount_throws_ISE_if_called_after_getPendingCount() {","65","    expectISEForIllegalCallToInitPendingCount();","66","","67","    underTest.getPendingCount();","68","    underTest.initPendingCount(10);","69","  }","70","","71","  @Test","72","  public void initPendingCount_throws_ISE_if_called_after_addReceived() {","73","    expectISEForIllegalCallToInitPendingCount();","76","    underTest.initPendingCount(10);","77","  }","78","","79","  @Test","80","  public void initPendingCount_throws_ISE_if_called_after_addInProgress() {","81","    expectISEForIllegalCallToInitPendingCount();","82","","83","    underTest.addInProgress();","84","    underTest.initPendingCount(10);","85","  }","86","","87","  private void expectISEForIllegalCallToInitPendingCount() {","88","    expectedException.expect(IllegalStateException.class);","89","    expectedException.expectMessage(ISE_initPendingCount_CALL_MSG);","97","    assertThat(underTest.getPendingCount()).isEqualTo(1);","108","    assertThat(underTest.getPendingCount()).isEqualTo(calls);","116","    assertThat(underTest.getPendingCount()).isEqualTo(-1);","131","    assertThat(underTest.getPendingCount()).isEqualTo(-calls);"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/monitoring\/CEQueueStatus.java":[{"add":["36","   * Adds 1 to the count of received batch reports and 1 to the count of batch reports waiting for processing.","37","   *","38","   * @return the new count of received batch reports","39","   *","40","   * @see #getReceivedCount()","41","   * @see #getPendingCount()","42","   *","43","   * @throws IllegalStateException if {@link #initPendingCount(long)} has not been called yet","45","  long addReceived();","55","   *","56","   * @throws IllegalStateException if {@link #initPendingCount(long)} has not been called yet","61","   * Adds 1 to the count of batch reports which processing ended successfully and removes 1 from the count of batch","62","   * reports under processing. Adds the specified time to the processing time counter.","63","   *","64","   * @param processingTime duration of processing in ms","65","   *","66","   * @return the new count of batch reports which processing ended successfully","67","   *","68","   * @see #getSuccessCount()","69","   * @see #getInProgressCount()","70","   *","71","   * @throws IllegalArgumentException if processingTime is < 0","73","  long addSuccess(long processingTime);","91","   * Count of received batch reports since instance startup","92","   *\/","93","  long getReceivedCount();","94","","95","  \/**","96","   * Count of batch reports waiting for processing since startup, including reports received before instance startup.","97","   *\/","98","  long getPendingCount();","99","","100","  \/**","101","   * Count of batch reports under processing.","102","   *\/","103","  long getInProgressCount();","104","","105","  \/**"],"delete":["24","   * Adds 1 to the count of received batch reports and 1 to the count of batch reports waiting for processing.","25","   *","26","   * @return the new count of received batch reports","27","   *","28","   * @see #getReceivedCount()","29","   * @see #getPendingCount()","30","   *\/","31","  long addReceived();","32","","33","  \/**","34","   * Count of received batch reports since instance startup","35","   *\/","36","  long getReceivedCount();","37","","38","  \/**","51","   * Count of batch reports waiting for processing since startup, including reports received before instance startup.","53","  long getPendingCount();","67","   * Count of batch reports under processing.","69","  long getInProgressCount();","92","   * Adds 1 to the count of batch reports which processing ended successfully and removes 1 from the count of batch","93","   * reports under processing. Adds the specified time to the processing time counter.","94","   *","95","   * @param processingTime duration of processing in ms","96","   *","97","   * @return the new count of batch reports which processing ended successfully","98","   *","99","   * @see #getSuccessCount()","100","   * @see #getInProgressCount()","101","   *","102","   * @throws IllegalArgumentException if processingTime is < 0","103","   *\/","104","  long addSuccess(long processingTime);","105","","106","  \/**"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/monitoring\/CEQueueStatusImplConcurrentTest.java":[{"add":["51","    long initialPendingCount = 9963L;","52","    underTest.initPendingCount(initialPendingCount);","53","","61","    assertThat(underTest.getPendingCount()).isEqualTo(initialPendingCount + 2);"],"delete":["58","    assertThat(underTest.getPendingCount()).isEqualTo(2);"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/monitoring\/CEQueueStatusImpl.java":[{"add":["24","import static com.google.common.base.Preconditions.checkState;","39","    checkState(","40","      pending.compareAndSet(PENDING_INITIAL_VALUE, initialPendingCount),","41","      \"Method initPendingCount must be used before any other method and can not be called twice\");","46","  public long addReceived() {","47","    ensurePendingInitialized(\"addReceived\");","49","    pending.incrementAndGet();","50","    return received.incrementAndGet();","55","    ensurePendingInitialized(\"addInProgress\");","61","  private void ensurePendingInitialized(String methodName) {","62","    checkState(pending.get() != PENDING_INITIAL_VALUE, \"Method initPendingCount must be used before %s can be called\", methodName);","85","  public long getReceivedCount() {","86","    return received.get();","87","  }","88","","89","  @Override","90","  public long getPendingCount() {","91","    long currentValue = pending.get();","92","    return currentValue == PENDING_INITIAL_VALUE ? 0 : currentValue;","93","  }","94","","95","  @Override","96","  public long getInProgressCount() {","97","    return inProgress.get();","98","  }","99","","100","  @Override","101","  public long getErrorCount() {","102","    return error.get();","103","  }","104","","105","  @Override"],"delete":["36","  public long addReceived() {","37","    \/\/ initPendingCount might not have been called yet","38","    if (!pending.compareAndSet(PENDING_INITIAL_VALUE, 1)) {","39","      pending.incrementAndGet();","40","    }","41","    return received.incrementAndGet();","42","  }","43","","44","  @Override","45","  public long getReceivedCount() {","46","    return received.get();","47","  }","48","","49","  @Override","52","    if (!pending.compareAndSet(PENDING_INITIAL_VALUE, initialPendingCount)) {","53","      throw new IllegalStateException(\"Method initPendingCount must be used before any other method and can not be called twice\");","54","    }","59","  public long getPendingCount() {","60","    ensurePendingIsInitialized();","62","    return pending.get();","67","    ensurePendingIsInitialized();","73","  private void ensurePendingIsInitialized() {","74","    pending.compareAndSet(PENDING_INITIAL_VALUE, 0);","75","  }","76","","77","  @Override","78","  public long getInProgressCount() {","79","    return inProgress.get();","90","  public long getErrorCount() {","91","    return error.get();","92","  }","93","","94","  @Override"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/queue\/CeQueueImplTest.java":[{"add":["22","import org.junit.Before;","61","  @Before","62","  public void setUp() throws Exception {","63","    queueStatus.initPendingCount(0);","64","  }","65",""],"delete":[]}]}},"d78878cddfb2ec620153f14d11383b17a4315e69":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualitygate\/ws\/SetAsDefaultAction.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualitygate\/ws\/CopyAction.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualitygate\/ws\/DeleteConditionAction.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualitygate\/ws\/DestroyAction.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualitygate\/ws\/CreateAction.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualitygate\/ws\/RenameAction.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualitygate\/ws\/UnsetDefaultAction.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualitygate\/ws\/SelectAction.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualitygate\/ws\/CreateConditionAction.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualitygate\/ws\/UpdateConditionAction.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualitygate\/ws\/DeselectAction.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualitygate\/ws\/SetAsDefaultAction.java":[{"add":["38","      .setDescription(\"Set a quality gate as the default quality gate.<br>\" +","39","        \"Requires the 'Administer Quality Gates' permission.\")"],"delete":["38","      .setDescription(\"Set a quality gate as the default quality gate. Require Administer Quality Gates permission\")"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualitygate\/ws\/CopyAction.java":[{"add":["42","      .setDescription(\"Copy a Quality Gate.<br>\" +","43","        \"Requires the 'Administer Quality Gates' permission.\")"],"delete":["42","      .setDescription(\"Copy a Quality Gate. Require Administer Quality Gates permission\")"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualitygate\/ws\/DeleteConditionAction.java":[{"add":["48","        \"Requires the 'Administer Quality Gates' permission.\")"],"delete":["48","        \"Requires the 'Administer Quality Gates' permission\")"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualitygate\/ws\/DestroyAction.java":[{"add":["38","      .setDescription(\"Delete a Quality Gate.<br>\" +","39","        \"Requires the 'Administer Quality Gates' permission.\")"],"delete":["38","      .setDescription(\"Delete a Quality Gate. Require Administer Quality Gates permission\")"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualitygate\/ws\/CreateAction.java":[{"add":["55","      .setDescription(\"Create a Quality Gate.<br>\" +","56","        \"Requires the 'Administer Quality Gates' permission.\")"],"delete":["55","      .setDescription(\"Create a Quality Gate. Require Administer Quality Gates permission\")"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualitygate\/ws\/RenameAction.java":[{"add":["27","","28","import static org.sonarqube.ws.client.qualitygate.QualityGatesWsParameters.PARAM_ID;","29","import static org.sonarqube.ws.client.qualitygate.QualityGatesWsParameters.PARAM_NAME;","42","      .setDescription(\"Rename a Quality Gate.<br>\" +","43","        \"Requires the 'Administer Quality Gates' permission.\")","48","    action.createParam(PARAM_ID)","53","    action.createParam(PARAM_NAME)","61","    long idToRename = QualityGatesWs.parseId(request, PARAM_ID);","62","    QualityGateDto renamedQualityGate = qualityGates.rename(idToRename, request.mandatoryParam(PARAM_NAME));"],"delete":["27","import org.sonarqube.ws.client.qualitygate.QualityGatesWsParameters;","40","      .setDescription(\"Rename a Quality Gate. Require Administer Quality Gates permission\")","45","    action.createParam(QualityGatesWsParameters.PARAM_ID)","50","    action.createParam(QualityGatesWsParameters.PARAM_NAME)","58","    long idToRename = QualityGatesWs.parseId(request, QualityGatesWsParameters.PARAM_ID);","59","    QualityGateDto renamedQualityGate = qualityGates.rename(idToRename, request.mandatoryParam(QualityGatesWsParameters.PARAM_NAME));"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualitygate\/ws\/UnsetDefaultAction.java":[{"add":["38","      .setDescription(\"Unset a quality gate as the default quality gate.<br>\" +","39","        \"Requires the 'Administer Quality Gates' permission.\")"],"delete":["38","      .setDescription(\"Unset a quality gate as the default quality gate. Require Administer Quality Gates permission\")"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualitygate\/ws\/SelectAction.java":[{"add":["64","          \"Requires the 'Administer Quality Gates' permission.\","],"delete":["64","        \"Require Administer Quality Gates permission.\","]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualitygate\/ws\/CreateConditionAction.java":[{"add":["63","      .setDescription(\"Add a new condition to a quality gate.<br>\" +","64","        \"Requires the 'Administer Quality Gates' permission.\")"],"delete":["63","      .setDescription(\"Add a new condition to a quality gate. Require Administer Quality Gates permission\")"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualitygate\/ws\/UpdateConditionAction.java":[{"add":["63","      .setDescription(\"Update a condition attached to a quality gate.<br>\" +","64","        \"Requires the 'Administer Quality Gates' permission.\")"],"delete":["63","      .setDescription(\"Update a condition attached to a quality gate. Require Administer Quality Gates permission\")"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualitygate\/ws\/DeselectAction.java":[{"add":["53","      .setDescription(\"Remove the association of a project from a quality gate.<br>\" +","54","        \"Requires the 'Administer Quality Gates' permission.\")"],"delete":["53","      .setDescription(\"Remove the association of a project from a quality gate. Require Administer Quality Gates permission\")"]}]}},"939fb2453e19774469729f2ced0de7daee67bbb7":{"changes":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/lib\/need_authentication.rb":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/lib\/need_authentication.rb":[{"add":["162","      # Note that validation disabled","163","      user.save(false)","165","    # Must be outside the transaction in order to not have a lock on the users table : http:\/\/jira.sonarsource.com\/browse\/SONAR-6726","166","    user.notify_creation_handlers","167","    "],"delete":["162","      user.notify_creation_handlers","163","      user"]}]}},"014f2053e5360baa98762f163f11e88843eed9a8":{"changes":{"server\/sonar-web\/src\/main\/js\/helpers\/l10n.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/helpers\/l10n.js":[{"add":["56","function checkCachedBundle () {","57","  const cached = localStorage.getItem('l10n.bundle');","58","","59","  if (!cached) {","60","    return false;","61","  }","62","","63","  try {","64","    const parsed = JSON.parse(cached);","65","    return parsed != null && typeof parsed === 'object';","66","  } catch (e) {","67","    return false;","68","  }","69","}","70","","81","  if (bundleTimestamp !== null && checkCachedBundle()) {","86","    try {","87","      const currentTimestamp = moment().format('YYYY-MM-DDTHH:mm:ssZZ');","88","      localStorage.setItem('l10n.timestamp', currentTimestamp);","89","      localStorage.setItem('l10n.locale', currentLocale);","90","      localStorage.setItem('l10n.bundle', JSON.stringify(bundle));","91","    } catch (e) {","92","      \/\/ do nothing","93","    }","94",""],"delete":["66","  if (bundleTimestamp !== null) {","71","    const currentTimestamp = moment().format('YYYY-MM-DDTHH:mm:ssZZ');","72","    localStorage.setItem('l10n.timestamp', currentTimestamp);","73","    localStorage.setItem('l10n.locale', currentLocale);","74","    localStorage.setItem('l10n.bundle', JSON.stringify(bundle));"]}]}},"595a86b1947d2e4cdb5f6a083eacd497627b4025":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/code\/components\/__tests__\/App-test.tsx":"ADD","server\/sonar-web\/src\/main\/js\/apps\/code\/components\/App.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/code\/components\/__tests__\/__snapshots__\/App-test.tsx.snap":"ADD"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/code\/components\/__tests__\/App-test.tsx":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/code\/components\/App.tsx":[{"add":["199","    const defaultTitle =","200","      baseComponent && ['APP', 'VW', 'SVW'].includes(baseComponent.qualifier)","201","        ? translate('projects.page')","202","        : translate('code.page');","203","","207","        <Helmet title={sourceViewer !== undefined ? sourceViewer.name : defaultTitle} \/>"],"delete":["202","        <Helmet title={sourceViewer !== undefined ? sourceViewer.name : translate('code.page')} \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/code\/components\/__tests__\/__snapshots__\/App-test.tsx.snap":[{"add":[],"delete":[]}]}},"59e1f8eca37d7a37e0837e437ab3e6eb38a7dfea":{"changes":{"plugins\/sonar-xoo-plugin\/src\/main\/java\/org\/sonar\/xoo\/rule\/DeprecatedResourceApiSensor.java":"MODIFY","sonar-batch\/src\/test\/java\/org\/sonar\/batch\/mediumtest\/issues\/IssuesOnDirMediumTest.java":"MODIFY","sonar-batch\/src\/test\/java\/org\/sonar\/batch\/mediumtest\/deprecated\/DeprecatedApiMediumTest.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/resources\/Directory.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/DefaultInputDir.java":"MODIFY"},"diff":{"plugins\/sonar-xoo-plugin\/src\/main\/java\/org\/sonar\/xoo\/rule\/DeprecatedResourceApiSensor.java":[{"add":["34","@SuppressWarnings(\"deprecation\")"],"delete":[]}],"sonar-batch\/src\/test\/java\/org\/sonar\/batch\/mediumtest\/issues\/IssuesOnDirMediumTest.java":[{"add":["86","  @Test","87","  public void issueOnRootFolder() throws IOException {","88","","89","    File baseDir = temp.getRoot();","90","","91","    File xooFile1 = new File(baseDir, \"sample1.xoo\");","92","    FileUtils.write(xooFile1, \"Sample1 xoo\\ncontent\");","93","","94","    File xooFile2 = new File(baseDir, \"sample2.xoo\");","95","    FileUtils.write(xooFile2, \"Sample2 xoo\\ncontent\");","96","","97","    TaskResult result = tester.newTask()","98","      .properties(ImmutableMap.<String, String>builder()","99","        .put(\"sonar.task\", \"scan\")","100","        .put(\"sonar.projectBaseDir\", baseDir.getAbsolutePath())","101","        .put(\"sonar.projectKey\", \"com.foo.project\")","102","        .put(\"sonar.projectName\", \"Foo Project\")","103","        .put(\"sonar.projectVersion\", \"1.0-SNAPSHOT\")","104","        .put(\"sonar.projectDescription\", \"Description of Foo Project\")","105","        .put(\"sonar.sources\", \".\")","106","        .build())","107","      .start();","108","","109","    assertThat(result.issuesFor(result.inputDir(\"\"))).hasSize(2);","110","  }","111",""],"delete":[]}],"sonar-batch\/src\/test\/java\/org\/sonar\/batch\/mediumtest\/deprecated\/DeprecatedApiMediumTest.java":[{"add":["97","  @Test","98","  public void createIssueOnRootDir() throws IOException {","99","","100","    File baseDir = temp.getRoot();","101","","102","    File xooFileInRootDir = new File(baseDir, \"sample.xoo\");","103","    FileUtils.write(xooFileInRootDir, \"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\");","104","","105","    File xooFileInAnotherDir = new File(baseDir, \"package\/sample.xoo\");","106","    FileUtils.write(xooFileInAnotherDir, \"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\");","107","","108","    TaskResult result = tester.newTask()","109","      .properties(ImmutableMap.<String, String>builder()","110","        .put(\"sonar.task\", \"scan\")","111","        .put(\"sonar.projectBaseDir\", baseDir.getAbsolutePath())","112","        .put(\"sonar.projectKey\", \"com.foo.project\")","113","        .put(\"sonar.projectName\", \"Foo Project\")","114","        .put(\"sonar.projectVersion\", \"1.0-SNAPSHOT\")","115","        .put(\"sonar.projectDescription\", \"Description of Foo Project\")","116","        .put(\"sonar.sources\", \".\")","117","        .build())","118","      .start();","119","","120","    assertThat(result.issuesFor(result.inputFile(\"sample.xoo\"))).extracting(\"msg\", \"line\").containsOnly(","121","      tuple(\"Issue created using deprecated API\", 0),","122","      tuple(\"Issue created using deprecated API\", 1));","123","    assertThat(result.issuesFor(result.inputFile(\"package\/sample.xoo\"))).extracting(\"msg\", \"line\").containsOnly(","124","      tuple(\"Issue created using deprecated API\", 0),","125","      tuple(\"Issue created using deprecated API\", 1));","126","    assertThat(result.issuesFor(result.inputDir(\"\"))).extracting(\"msg\", \"line\").containsOnly(","127","      tuple(\"Issue created using deprecated API\", 0));","128","    assertThat(result.issuesFor(result.inputDir(\"package\"))).extracting(\"msg\", \"line\").containsOnly(","129","      tuple(\"Issue created using deprecated API\", 0));","130","","131","  }","132",""],"delete":[]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/resources\/Directory.java":[{"add":["21","import javax.annotation.CheckForNull;","141","    d.setKey(normalizedPath == null ? SEPARATOR : normalizedPath);","142","    d.setPath(normalizedPath == null ? \"\" : normalizedPath);"],"delete":["27","import javax.annotation.CheckForNull;","28","","142","    d.setKey(normalizedPath);","143","    d.setPath(normalizedPath);"]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/DefaultInputDir.java":[{"add":["23","import org.apache.commons.lang.StringUtils;","70","    StringBuilder sb = new StringBuilder().append(moduleKey).append(\":\");","71","    if (StringUtils.isEmpty(relativePath)) {","72","      sb.append(\"\/\");","73","    } else {","74","      sb.append(relativePath);","75","    }","76","    return sb.toString();"],"delete":["69","    return new StringBuilder().append(moduleKey).append(\":\").append(relativePath).toString();"]}]}},"7a230c2fa98532eb79d2efcd30c31d608f9fa108":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/background-tasks\/components\/BackgroundTasksApp.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/background-tasks\/components\/StatsContainer.tsx":"ADD","server\/sonar-web\/src\/main\/js\/apps\/background-tasks\/components\/Stats.js":"MODIFY","sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/background-tasks\/__tests__\/background-tasks-test.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/background-tasks\/components\/BackgroundTasksApp.js":[{"add":["28","import StatsContainer from '..\/components\/StatsContainer';","222","        <StatsContainer"],"delete":["28","import Stats from '..\/components\/Stats';","222","        <Stats"]}],"server\/sonar-web\/src\/main\/js\/apps\/background-tasks\/components\/StatsContainer.tsx":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/background-tasks\/components\/Stats.js":[{"add":["21","import Tooltip from '..\/..\/..\/components\/controls\/Tooltip';","27","  isSystemAdmin?: boolean,","42","  handleCancelAllPending = (event \/*: Object *\/) => {","43","    event.preventDefault();","44","    event.currentTarget.blur();","46","  };","48","  handleShowFailing = (event \/*: Object *\/) => {","49","    event.preventDefault();","50","    event.currentTarget.blur();","52","  };","64","          {this.props.isSystemAdmin && (","65","            <Tooltip overlay={translate('background_tasks.cancel_all_tasks')}>","66","              <a","67","                className=\"js-cancel-pending icon-delete spacer-left\"","68","                href=\"#\"","69","                onClick={this.handleCancelAllPending}","70","              \/>","71","            <\/Tooltip>","72","          )}","98","          <Tooltip overlay={translate('background_tasks.failing_count')}>","99","            <a","100","              className=\"js-failures-count emphasised-measure\"","101","              href=\"#\"","102","              onClick={this.handleShowFailing}>","103","              {this.props.failingCount}","104","            <\/a>","105","          <\/Tooltip>","113","          <Tooltip overlay={translate('background_tasks.failing_count')}>","114","            <span className=\"js-failures-count emphasised-measure\">{this.props.failingCount}<\/span>","115","          <\/Tooltip>"],"delete":["40","  handleCancelAllPending(e \/*: Object *\/) {","41","    e.preventDefault();","42","    e.target.blur();","44","  }","46","  handleShowFailing(e \/*: Object *\/) {","47","    e.preventDefault();","48","    e.target.blur();","50","  }","62","          <a","63","            onClick={this.handleCancelAllPending.bind(this)}","64","            className=\"js-cancel-pending icon-delete spacer-left\"","65","            title={translate('background_tasks.cancel_all_tasks')}","66","            data-toggle=\"tooltip\"","67","            href=\"#\"","68","          \/>","94","          <a","95","            onClick={this.handleShowFailing.bind(this)}","96","            className=\"js-failures-count emphasised-measure\"","97","            data-toggle=\"tooltip\"","98","            title=\"Count of projects where processing of most recent analysis report failed\"","99","            href=\"#\">","100","            {this.props.failingCount}","101","          <\/a>","109","          <span","110","            className=\"js-failures-count emphasised-measure\"","111","            data-toggle=\"tooltip\"","112","            title=\"Count of projects where processing of most recent analysis report failed\">","113","            {this.props.failingCount}","114","          <\/span>"]}],"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["2215","background_tasks.failing_count=Count of projects where processing of most recent analysis report failed"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/background-tasks\/__tests__\/background-tasks-test.js":[{"add":["104","        <Stats","105","          isSystemAdmin={true}","106","          pendingCount={5}","107","          onCancelAllPending={stub}","108","          onShowFailing={stub}","109","        \/>","117","        <Stats","118","          isSystemAdmin={true}","119","          pendingCount={5}","120","          onCancelAllPending={spy}","121","          onShowFailing={stub}","122","        \/>"],"delete":["104","        <Stats pendingCount={5} onCancelAllPending={stub} onShowFailing={stub} \/>","112","        <Stats pendingCount={5} onCancelAllPending={spy} onShowFailing={stub} \/>"]}]}}}