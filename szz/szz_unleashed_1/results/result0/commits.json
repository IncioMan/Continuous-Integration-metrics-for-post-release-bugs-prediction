{"202fa876323925fe482d98cebc5bdac715337ef3":{"changes":{"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v71\/DbVersion71.java":"MODIFY","server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v71\/CleanBrokenProjectToQGReferencesTest\/properties_and_quality_gates.sql":"ADD","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v71\/CleanBrokenProjectToQGReferences.java":"ADD","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v71\/CleanBrokenProjectToQGReferencesTest.java":"ADD","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v71\/DbVersion71Test.java":"MODIFY"},"diff":{"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v71\/DbVersion71.java":[{"add":["51","      .add(2022, \"Clean broken project to QG references\", CleanBrokenProjectToQGReferences.class)"],"delete":[]}],"server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v71\/CleanBrokenProjectToQGReferencesTest\/properties_and_quality_gates.sql":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v71\/CleanBrokenProjectToQGReferences.java":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v71\/CleanBrokenProjectToQGReferencesTest.java":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v71\/DbVersion71Test.java":[{"add":["38","    verifyMigrationCount(underTest, 23);"],"delete":["38","    verifyMigrationCount(underTest, 22);"]}]}},"4e162555b40c43254f5b4e76470763bd6e706367":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/index\/IssueIndex.java":"MODIFY","it\/it-tests\/src\/test\/java\/it\/issue\/IssueSearchTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/index\/IssueIndexTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/index\/IssueIndex.java":[{"add":["382","    Preconditions.checkArgument(createdAfter == null || createdBefore == null || createdAfter.before(createdBefore),","383","      \"Start bound cannot be larger or equal to end bound\");"],"delete":["382","    Preconditions.checkArgument(createdAfter == null || createdAfter.equals(createdBefore) || createdBefore == null || createdAfter.before(createdBefore),","383","      \"Start bound cannot be larger than end bound\");"]}],"it\/it-tests\/src\/test\/java\/it\/issue\/IssueSearchTest.java":[{"add":["192","      assertThat(exception.getMessage()).contains(\"Start bound cannot be larger or equal to end bound\");"],"delete":["43","import org.sonar.wsclient.issue.NewIssue;","193","      assertThat(exception.getMessage()).contains(\"Start bound cannot be larger than end bound\");"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/index\/IssueIndexTest.java":[{"add":["35","import org.junit.rules.ExpectedException;","73","  @Rule","74","  public ExpectedException expectedException = ExpectedException.none();","207","      underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).moduleUuids(newArrayList(file.uuid())).build(), new SearchOptions())","208","        .getDocs())","209","          .isEmpty();","211","      underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).moduleUuids(newArrayList(module.uuid())).build(), new SearchOptions())","212","        .getDocs())","213","          .hasSize(1);","219","      underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).moduleUuids(newArrayList(project.uuid())).build(), new SearchOptions())","220","        .getDocs())","221","          .isEmpty();","407","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).statuses(newArrayList(Issue.STATUS_CLOSED, Issue.STATUS_OPEN)).build(), new SearchOptions()).getDocs())","408","      .hasSize(2);","438","      underTest.search(IssueQuery.builder(userSessionRule).resolutions(newArrayList(Issue.RESOLUTION_FALSE_POSITIVE, Issue.RESOLUTION_FIXED)).build(), new SearchOptions())","439","        .getDocs())","440","          .hasSize(2);","678","    \/\/ 20 < createdAt < 20: exception","679","    expectedException.expect(IllegalArgumentException.class);","680","    underTest.search(IssueQuery.builder(userSessionRule)","682","      .build(), new SearchOptions()).getDocs();","710","      assertThat(exception.getMessage()).isEqualTo(\"Start bound cannot be larger or equal to end bound\");","715","  public void fail_if_created_before_equals_created_after() {","716","    expectedException.expect(IllegalArgumentException.class);","717","    expectedException.expectMessage(\"Start bound cannot be larger or equal to end bound\");","718","","719","    underTest.search(IssueQuery.builder(userSessionRule).createdAfter(parseDate(\"2014-09-20\")).createdBefore(parseDate(\"2014-09-20\")).build(), new SearchOptions());","720","  }","721","","722","  @Test","823","      .createdAfter(parseDateTime(\"2014-09-01T00:00:00-0100\"))","824","      .createdBefore(parseDateTime(\"2014-09-02T00:00:00-0100\")).build(),"],"delete":["204","      underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).moduleUuids(newArrayList(file.uuid())).build(), new SearchOptions()).getDocs())","205","        .isEmpty();","207","      underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).moduleUuids(newArrayList(module.uuid())).build(), new SearchOptions()).getDocs())","208","        .hasSize(1);","214","      underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).moduleUuids(newArrayList(project.uuid())).build(), new SearchOptions()).getDocs())","215","        .isEmpty();","401","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).statuses(newArrayList(Issue.STATUS_CLOSED, Issue.STATUS_OPEN)).build(), new SearchOptions()).getDocs()).hasSize(2);","431","      underTest.search(IssueQuery.builder(userSessionRule).resolutions(newArrayList(Issue.RESOLUTION_FALSE_POSITIVE, Issue.RESOLUTION_FIXED)).build(), new SearchOptions()).getDocs())","432","        .hasSize(2);","670","    \/\/ 20 < createdAt < 20: nothing","671","    assertThat(underTest.search(IssueQuery.builder(userSessionRule)","673","      .build(), new SearchOptions()).getDocs()).isEmpty();","701","      assertThat(exception.getMessage()).isEqualTo(\"Start bound cannot be larger than end bound\");","806","        .createdAfter(parseDateTime(\"2014-09-01T00:00:00-0100\"))","807","        .createdBefore(parseDateTime(\"2014-09-02T00:00:00-0100\")).build(),"]}]}},"d6393623490fb38fa14c7e3a4a72bbcdbc47b835":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/notification\/IssueChangesEmailTemplate.java":"MODIFY","server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/issue\/notification\/IssueChangesEmailTemplateTest\/email_with_multiple_changes.txt":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/notification\/IssueChangesEmailTemplateTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/IssueFieldsSetter.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/notification\/IssueChangesEmailTemplate.java":[{"add":["22","import javax.annotation.CheckForNull;","23","import javax.annotation.Nullable;","27","import org.sonar.db.DbClient;","28","import org.sonar.db.DbSession;","29","import org.sonar.db.user.UserDto;","39","  private final DbClient dbClient;","42","  public IssueChangesEmailTemplate(DbClient dbClient, EmailSettings settings) {","43","    this.dbClient = dbClient;","74","  private static void appendChanges(Notification notif, StringBuilder sb) {","78","    appendField(sb, \"Type\", notif.getFieldValue(\"old.type\"), notif.getFieldValue(\"new.type\"));","96","  private static void appendHeader(Notification notif, StringBuilder sb) {","107","  private static void appendLine(StringBuilder sb, @Nullable String line) {","113","  private static void appendField(StringBuilder sb, String name, @Nullable String oldValue, @Nullable String newValue) {","126","  private static void appendFieldWithoutHistory(StringBuilder sb, String name, @Nullable String oldValue, @Nullable String newValue) {","143","    try (DbSession dbSession = dbClient.openSession(false)) {","144","      UserDto userDto = dbClient.userDao().selectByLogin(dbSession, login);","145","      if (userDto == null || !userDto.isActive()) {","146","        \/\/ most probably user was deleted","147","        return login;","148","      }","149","      return StringUtils.defaultIfBlank(userDto.getName(), login);"],"delete":["25","import org.sonar.api.user.User;","26","import org.sonar.api.user.UserFinder;","30","import javax.annotation.CheckForNull;","31","import javax.annotation.Nullable;","32","","40","  private final UserFinder userFinder;","42","  public IssueChangesEmailTemplate(EmailSettings settings, UserFinder userFinder) {","44","    this.userFinder = userFinder;","74","  private void appendChanges(Notification notif, StringBuilder sb) {","95","  private void appendHeader(Notification notif, StringBuilder sb) {","106","  private void appendLine(StringBuilder sb, @Nullable String line) {","112","  private void appendField(StringBuilder sb, String name, @Nullable String oldValue, @Nullable String newValue) {","125","  private void appendFieldWithoutHistory(StringBuilder sb, String name, @Nullable String oldValue, @Nullable String newValue) {","142","    User user = userFinder.findByLogin(login);","143","    if (user == null) {","144","      \/\/ most probably user was deleted","145","      return login;","147","    return StringUtils.defaultIfBlank(user.name(), login);"]}],"server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/issue\/notification\/IssueChangesEmailTemplateTest\/email_with_multiple_changes.txt":[{"add":["6","Type: BUG"],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/notification\/IssueChangesEmailTemplateTest.java":[{"add":["22","import java.nio.charset.StandardCharsets;","24","import org.junit.Rule;","27","import org.sonar.api.config.MapSettings;","28","import org.sonar.api.config.Settings;","30","import org.sonar.db.DbTester;","34","import static org.sonar.api.CoreProperties.SERVER_BASE_URL;","35","import static org.sonar.db.user.UserTesting.newUserDto;","39","  @Rule","40","  public DbTester db = DbTester.create();","42","  private Settings settings = new MapSettings().setProperty(SERVER_BASE_URL, \"http:\/\/nemo.sonarsource.org\");","44","  private IssueChangesEmailTemplate underTest = new IssueChangesEmailTemplate(db.getDbClient(), new EmailSettings(settings));","49","    EmailMessage message = underTest.format(notification);","59","    EmailMessage email = underTest.format(notification);","66","      StandardCharsets.UTF_8);","78","    EmailMessage email = underTest.format(notification);","85","      StandardCharsets.UTF_8);","97","    EmailMessage email = underTest.format(notification);","104","      StandardCharsets.UTF_8);","115","    EmailMessage email = underTest.format(notification);","122","      StandardCharsets.UTF_8);","135","      .setFieldValue(\"new.type\", \"BUG\")","138","    EmailMessage email = underTest.format(notification);","152","    db.users().insertUser(newUserDto().setLogin(\"simon\").setName(\"Simon\"));","158","    EmailMessage message = underTest.format(notification);","162","  @Test","163","  public void notification_contains_user_login_when_user_is_removed() {","164","    db.users().insertUser(newUserDto().setLogin(\"simon\").setName(\"Simon\").setActive(false));","165","","167","      .setChangeAuthorLogin(\"simon\")","168","      .setProject(\"Struts\", \"org.apache:struts\");","169","","170","    EmailMessage message = underTest.format(notification);","171","    assertThat(message.getFrom()).isEqualTo(\"simon\");","172","  }","173","","174","  private static Notification generateNotification() {","175","    return new IssueChangeNotification()"],"delete":["23","import org.junit.Before;","25","import org.junit.runner.RunWith;","26","import org.mockito.Mock;","27","import org.mockito.runners.MockitoJUnitRunner;","30","import org.sonar.api.user.User;","31","import org.sonar.api.user.UserFinder;","34","import java.nio.charset.StandardCharsets;","35","","37","import static org.mockito.Mockito.mock;","38","import static org.mockito.Mockito.when;","40","@RunWith(MockitoJUnitRunner.class)","43","  @Mock","44","  UserFinder userFinder;","46","  IssueChangesEmailTemplate template;","48","  @Before","49","  public void setUp() {","50","    EmailSettings settings = mock(EmailSettings.class);","51","    when(settings.getServerBaseURL()).thenReturn(\"http:\/\/nemo.sonarsource.org\");","52","    template = new IssueChangesEmailTemplate(settings, userFinder);","53","  }","58","    EmailMessage message = template.format(notification);","68","    EmailMessage email = template.format(notification);","75","      StandardCharsets.UTF_8","76","      );","88","    EmailMessage email = template.format(notification);","95","      StandardCharsets.UTF_8","96","      );","108","    EmailMessage email = template.format(notification);","115","      StandardCharsets.UTF_8","116","      );","127","    EmailMessage email = template.format(notification);","134","      StandardCharsets.UTF_8","135","      );","150","    EmailMessage email = template.format(notification);","164","    User user = mock(User.class);","165","    when(user.name()).thenReturn(\"Simon\");","166","    when(userFinder.findByLogin(\"simon\")).thenReturn(user);","172","    EmailMessage message = template.format(notification);","176","  private Notification generateNotification() {","185","    return notification;"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/IssueFieldsSetter.java":[{"add":["81","    checkState(!issue.manualSeverity(), \"Severity can't be changed\");"],"delete":["81","    if (issue.manualSeverity()) {","82","      throw new IllegalStateException(\"Severity can't be changed\");","83","    }"]}]}},"18f20eed6127994e54d2fcc7f9772fdcafcfd25d":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/__tests__\/__snapshots__\/SourceViewerHeader-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/SourceViewerHeader.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/__tests__\/__snapshots__\/SourceViewerHeader-test.tsx.snap":[{"add":["348","        <Link","349","          onlyActiveOnIndex={false}","350","          style={Object {}}","351","          to={","352","            Object {","353","              \"pathname\": \"\/project\/issues\",","354","              \"query\": Object {","355","                \"fileUuids\": \"foo-bar\",","356","                \"id\": \"my-project\",","357","                \"resolved\": \"false\",","358","                \"types\": \"BUG\",","359","              },","360","            }","361","          }","362","        >","363","          0","364","        <\/Link>","379","        <Link","380","          onlyActiveOnIndex={false}","381","          style={Object {}}","382","          to={","383","            Object {","384","              \"pathname\": \"\/project\/issues\",","385","              \"query\": Object {","386","                \"fileUuids\": \"foo-bar\",","387","                \"id\": \"my-project\",","388","                \"resolved\": \"false\",","389","                \"types\": \"VULNERABILITY\",","390","              },","391","            }","392","          }","393","        >","394","          2","395","        <\/Link>","410","        <Link","411","          onlyActiveOnIndex={false}","412","          style={Object {}}","413","          to={","414","            Object {","415","              \"pathname\": \"\/project\/issues\",","416","              \"query\": Object {","417","                \"fileUuids\": \"foo-bar\",","418","                \"id\": \"my-project\",","419","                \"resolved\": \"false\",","420","                \"types\": \"CODE_SMELL\",","421","              },","422","            }","423","          }","424","        >","425","          1","426","        <\/Link>","441","        <Link","442","          onlyActiveOnIndex={false}","443","          style={Object {}}","444","          to={","445","            Object {","446","              \"pathname\": \"\/project\/issues\",","447","              \"query\": Object {","448","                \"fileUuids\": \"foo-bar\",","449","                \"id\": \"my-project\",","450","                \"resolved\": \"false\",","451","                \"types\": \"SECURITY_HOTSPOT\",","452","              },","453","            }","454","          }","455","        >","456","          2","457","        <\/Link>"],"delete":["348","        0","363","        2","378","        1","393","        2"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/SourceViewerHeader.tsx":[{"add":["26","import QualifierIcon from '..\/icons-components\/QualifierIcon';","31","import { translate } from '..\/..\/helpers\/l10n';","33","import { collapsedDirFromPath, fileFromPath } from '..\/..\/helpers\/path';","35","import {","36","  getBranchLikeUrl,","37","  getBaseUrl,","38","  getCodeUrl,","39","  getComponentIssuesUrl,","40","  getPathUrlAsString","41","} from '..\/..\/helpers\/urls';","73","  renderIssueMeasures = () => {","74","    const { branchLike, issues, sourceViewerFile } = this.props;","75","    if (issues && issues.length > 0) {","76","      return (","77","        <>","78","          <div className=\"source-viewer-header-measure-separator\" \/>","79","","80","          {['BUG', 'VULNERABILITY', 'CODE_SMELL', 'SECURITY_HOTSPOT'].map((type: T.IssueType) => {","81","            const params = {","82","              ...getBranchLikeQuery(branchLike),","83","              fileUuids: sourceViewerFile.uuid,","84","              resolved: 'false',","85","              types: type","86","            };","87","","88","            const total = issues.filter(issue => issue.type === type).length;","89","            return (","90","              <div className=\"source-viewer-header-measure\" key={type}>","91","                <span className=\"source-viewer-header-measure-label\">","92","                  {translate('issue.type', type)}","93","                <\/span>","94","                <span className=\"source-viewer-header-measure-value\">","95","                  <Link to={getComponentIssuesUrl(sourceViewerFile.project, params)}>","96","                    {formatMeasure(total, 'INT')}","97","                  <\/Link>","98","                <\/span>","99","              <\/div>","100","            );","101","          })}","102","        <\/>","103","      );","104","    }","105","  };","106","","108","    const { showMeasures } = this.props;","119","    const unitTestsOrLines = q === 'UTS' ? 'tests' : 'lines';","171","            {measures[unitTestsOrLines] && (","174","                  {translate(`metric.${unitTestsOrLines}.name`)}","177","                  {formatMeasure(measures[unitTestsOrLines], 'SHORT_INT')}","204","            {this.renderIssueMeasures()}"],"delete":["23","import QualifierIcon from '..\/icons-components\/QualifierIcon';","30","import { getPathUrlAsString, getBranchLikeUrl, getBaseUrl, getCodeUrl } from '..\/..\/helpers\/urls';","31","import { collapsedDirFromPath, fileFromPath } from '..\/..\/helpers\/path';","32","import { translate } from '..\/..\/helpers\/l10n';","68","    const { issues, showMeasures } = this.props;","79","    const isUnitTest = q === 'UTS';","131","            {isUnitTest && (","134","                  {translate('metric.tests.name')}","137","                  {formatMeasure(measures.tests, 'SHORT_INT')}","138","                <\/span>","139","              <\/div>","140","            )}","141","","142","            {!isUnitTest && (","143","              <div className=\"source-viewer-header-measure\">","144","                <span className=\"source-viewer-header-measure-label\">","145","                  {translate('metric.lines.name')}","146","                <\/span>","147","                <span className=\"source-viewer-header-measure-value\">","148","                  {formatMeasure(measures.lines, 'SHORT_INT')}","175","            {issues && issues.length > 0 && (","176","              <>","177","                <div className=\"source-viewer-header-measure-separator\" \/>","178","","179","                {['BUG', 'VULNERABILITY', 'CODE_SMELL', 'SECURITY_HOTSPOT'].map(","180","                  (type: T.IssueType) => {","181","                    const total = issues.filter(issue => issue.type === type).length;","182","                    return (","183","                      <div className=\"source-viewer-header-measure\" key={type}>","184","                        <span className=\"source-viewer-header-measure-label\">","185","                          {translate('issue.type', type)}","186","                        <\/span>","187","                        <span className=\"source-viewer-header-measure-value\">","188","                          {formatMeasure(total, 'INT')}","189","                        <\/span>","190","                      <\/div>","191","                    );","192","                  }","193","                )}","194","              <\/>","195","            )}"]}]}},"3383b0f376ddbfc348ecedc6fefc72adba929286":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/authentication\/BasicAuthenticatorTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/authentication\/BasicAuthenticator.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/authentication\/BasicAuthenticatorTest.java":[{"add":["38","import static com.google.common.base.Charsets.UTF_8;","39","import static org.assertj.core.api.Java6Assertions.assertThat;","40","import static org.junit.rules.ExpectedException.none;","41","import static org.mockito.Mockito.mock;","42","import static org.mockito.Mockito.verify;","43","import static org.mockito.Mockito.verifyZeroInteractions;","44","import static org.mockito.Mockito.when;","45","","120","  public void fail_to_authenticate_when_invalid_header() throws Exception {","121","    when(request.getHeader(\"Authorization\")).thenReturn(\"Basic Invàlid\");","122","","123","    expectedException.expect(UnauthorizedException.class);","124","    expectedException.expectMessage(\"Invalid basic header\");","125","    underTest.authenticate(request);","126","  }","127","","128","  @Test"],"delete":["22","import static com.google.common.base.Charsets.UTF_8;","23","import static org.assertj.core.api.Java6Assertions.assertThat;","24","import static org.junit.rules.ExpectedException.none;","25","import static org.mockito.Mockito.mock;","26","import static org.mockito.Mockito.verify;","27","import static org.mockito.Mockito.verifyZeroInteractions;","28","import static org.mockito.Mockito.when;","29",""]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/authentication\/BasicAuthenticator.java":[{"add":["67","    String basicAuthDecoded = getDecodedBasicAuth(basicAuthEncoded);","78","  private static String getDecodedBasicAuth(String basicAuthEncoded) {","79","    try {","80","      return new String(BASE64_DECODER.decode(basicAuthEncoded.getBytes(Charsets.UTF_8)), Charsets.UTF_8);","81","    } catch (Exception e) {","82","      throw new UnauthorizedException(\"Invalid basic header\");","83","    }","84","  }","85",""],"delete":["67","    String basicAuthDecoded = new String(BASE64_DECODER.decode(basicAuthEncoded.getBytes(Charsets.UTF_8)), Charsets.UTF_8);"]}]}},"63a3a432ef8a6127aa690b2bda2abab3c0ff82a5":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/ComponentSourceSnippetViewer-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/ComponentSourceSnippetViewer.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/ComponentSourceSnippetViewer-test.tsx":[{"add":["29","  mockSourceLine,","30","  mockShortLivingBranch","104","it.only('should get the right branch when expanding', async () => {","105","  (getSources as jest.Mock).mockResolvedValueOnce(","106","    Object.values(","107","      mockSnippetsByComponent('a', [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]).sources","108","    )","109","  );","110","  const snippetGroup: T.SnippetGroup = {","111","    locations: [mockFlowLocation()],","112","    ...mockSnippetsByComponent('a', [1, 2, 3, 4])","113","  };","114","","115","  const wrapper = shallowRender({","116","    branchLike: mockShortLivingBranch({ name: 'asdf' }),","117","    snippetGroup","118","  });","119","","120","  wrapper.instance().expandBlock(0, 'down');","121","  await waitAndUpdate(wrapper);","122","","123","  expect(getSources).toHaveBeenCalledWith({ branch: 'asdf', from: 5, key: 'a', to: 17 });","124","});","125",""],"delete":["29","  mockSourceLine"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/ComponentSourceSnippetViewer.tsx":[{"add":["42","import { getBranchLikeQuery } from '..\/..\/..\/helpers\/branches';","106","    const { branchLike, snippetGroup } = this.props;","107","    const { key } = snippetGroup.component;","127","      key,","128","      ...range,","129","      ...getBranchLikeQuery(branchLike)","161","    const { branchLike, snippetGroup } = this.props;","162","    const { key } = snippetGroup.component;","166","    getSources({ key, ...getBranchLikeQuery(branchLike) }).then("],"delete":["124","      key: this.props.snippetGroup.component.key,","125","      ...range","157","    const { key } = this.props.snippetGroup.component;","161","    getSources({ key }).then("]}]}},"a7b63cbad6638766948fe3d76dc98f26b4798bdc":{"changes":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/controllers\/users_controller.rb":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/controllers\/users_controller.rb":[{"add":["47","      Internal.users_api.index()"],"delete":[]}]}},"318f02e62b10548b219929773666da89a8b72685":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/styles.css":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/styles.css":[{"add":["74",".source-line-filtered:hover .source-line-code {","75","  background-color: #f1e8cb !important;","76","}","77","","82",".source-line-filtered.source-line-filtered-dark:hover .source-line-code {","83","  background-color: #eaddb2 !important;","84","}","85",""],"delete":[]}]}},"0b547fab77e6b0e62d2357ac9c0c9102aa1a643b":{"changes":{"server\/sonar-auth-saml\/src\/test\/resources\/org\/sonar\/auth\/saml\/SamlIdentityProviderTest\/encoded_full_response_with_reverse_proxy.txt":"ADD","server\/sonar-auth-saml\/src\/test\/resources\/org\/sonar\/auth\/saml\/SamlIdentityProviderTest\/encoded_response_without_login.txt":"MODIFY","server\/sonar-auth-saml\/src\/test\/resources\/org\/sonar\/auth\/saml\/SamlIdentityProviderTest\/encoded_full_response.txt":"MODIFY","server\/sonar-auth-saml\/src\/test\/resources\/org\/sonar\/auth\/saml\/SamlIdentityProviderTest\/encoded_minimal_response.txt":"MODIFY","server\/sonar-auth-saml\/src\/test\/resources\/org\/sonar\/auth\/saml\/SamlIdentityProviderTest\/encoded_response_without_name.txt":"MODIFY","server\/sonar-auth-saml\/src\/main\/java\/org\/sonar\/auth\/saml\/SamlIdentityProvider.java":"MODIFY","server\/sonar-auth-saml\/src\/test\/java\/org\/sonar\/auth\/saml\/SamlIdentityProviderTest.java":"MODIFY"},"diff":{"server\/sonar-auth-saml\/src\/test\/resources\/org\/sonar\/auth\/saml\/SamlIdentityProviderTest\/encoded_full_response_with_reverse_proxy.txt":[{"add":[],"delete":[]}],"server\/sonar-auth-saml\/src\/test\/resources\/org\/sonar\/auth\/saml\/SamlIdentityProviderTest\/encoded_response_without_login.txt":[{"add":["0","PHNhbWxwOlJlc3BvbnNlIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIERlc3RpbmF0aW9uPSJodHRwOi8vbG9jYWxob3N0OjkwMDAvb2F1dGgyL2NhbGxiYWNrL3NhbWwiIElEPSJJRF9lZTFlNzNkZi1iMWQ4LTQzODUtOGMxNC01YmJlYTZhYTJlMTkiIEluUmVzcG9uc2VUbz0iT05FTE9HSU5fMjY3ZTFiMDUtZTIzNy00YWIwLWFiYmItODZiNTBjNDJiMGQ5IiBJc3N1ZUluc3RhbnQ9IjIwMjAtMDYtMDVUMjM6MDU6MTAuNjQ2WiIgVmVyc2lvbj0iMi4wIj48c2FtbDpJc3N1ZXI+aHR0cDovL2xvY2FsaG9zdDo4MDgwL2F1dGgvcmVhbG1zL3NvbmFycXViZTwvc2FtbDpJc3N1ZXI+PGRzaWc6U2lnbmF0dXJlIHhtbG5zOmRzaWc9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxkc2lnOlNpZ25lZEluZm8+PGRzaWc6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjxkc2lnOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZHNpZy1tb3JlI3JzYS1zaGEyNTYiLz48ZHNpZzpSZWZlcmVuY2UgVVJJPSIjSURfZWUxZTczZGYtYjFkOC00Mzg1LThjMTQtNWJiZWE2YWEyZTE5Ij48ZHNpZzpUcmFuc2Zvcm1zPjxkc2lnOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+PGRzaWc6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8+PC9kc2lnOlRyYW5zZm9ybXM+PGRzaWc6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ii8+PGRzaWc6RGlnZXN0VmFsdWU+alNoN0hwMGRFNGlrY1BsSDhYUHV2Y2Q2d1NkNXJXN2FxOVJwSGtNRzNtYz08L2RzaWc6RGlnZXN0VmFsdWU+PC9kc2lnOlJlZmVyZW5jZT48L2RzaWc6U2lnbmVkSW5mbz48ZHNpZzpTaWduYXR1cmVWYWx1ZT5kMHNXbGZMc05MbEFpSERjS3FoWEdOSTlwZ0p5QmVZQXAyaU5yd09QMStuMThnWlRPTDRZVGhNWjJTZThzb1ZyOG9hZTZjY2U1Z0RXRXQxaURERy9LeVJ2VFRvVlVoUFNQS1BKR1NBSUZjbXE0dzMwcGppSHpPY29tV1lCc1h0dEs3NUFDeHFyRUp0b2VDQi91Q0gyUlh5d05CZEoxbnFIMWcwTTY3OFRQVTZKOXg2MTRXcFc0OUhod3lldndQVDRnVnB5bW9MQXVjWlY1cUFPalJKam5uZXR5eXI3ZTVjTmU0NmMxRzdKSHBEZUdwOGFxejRiL0h2cTVGYmEvSjh2R0NST1YvdmpqMnl0dDNwN202bVFUamk1N1BIbS9wU2lqWGpDNDFEN1hpSVBlTmQrbVRMT0pZWHQvTDM0bXc4VWNnVGdnQXcrdjRNVWxhalJuNTk0dHc9PTwvZHNpZzpTaWduYXR1cmVWYWx1ZT48ZHNpZzpLZXlJbmZvPjxkc2lnOktleU5hbWU+WjlwS1VaYUlwNmJ0SjJGTVV0N2dyX0p4RVBXTGJmYjkyUlVwMUJSbTMtTTwvZHNpZzpLZXlOYW1lPjxkc2lnOlg1MDlEYXRhPjxkc2lnOlg1MDlDZXJ0aWZpY2F0ZT5NSUlDb1RDQ0FZa0NCZ0Z5aGV5aXN6QU5CZ2txaGtpRzl3MEJBUXNGQURBVU1SSXdFQVlEVlFRRERBbHpiMjVoY25GMVltVXdIaGNOTWpBd05qQTFNVGt4TnpVM1doY05NekF3TmpBMU1Ua3hPVE0zV2pBVU1SSXdFQVlEVlFRRERBbHpiMjVoY25GMVltVXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDQndLWDh4VXlyUTQ0S1BSU3ZHSVRrWVdGTE1WOFNLQ2ttQi9BWXdkVkZGTVNDTUJEYTZkNXEzWVhYa0gyTk1SVE1Edm1JK2JPNkZXUVFsWmVjNDdaS0tKaXNwUzRqWCttZjJNdW12UmVodi9JamsraUpzVm9xMEFxazRFOWhPbk1hTXpscVZVbXpMVE1ZZm5kUWQwa3QwTmtPVmRrOElPWlRGaVFLWVBZZUFiZlpWMzVXd0U2TnZoRG9Ra1ErcjJnQnZrQW1zRVZ2ZmYvMythcWF2WTMrTjAyVG03Y0wvbFhOZUJyOHRTajAwRnplODJYRUhOMTJlNmxrSEUrdTM0aFl1M3hXZFQxSnBUR0FNa0xyeXoxd29vM0ZZVDl6OE1teG45cmJuMGZpaEpqMjJYN0JGT3JUUlhsaTltZ0xvWGF6U1l2b1FpakhpMmFQSE9jNlJ4RTNBZ01CQUFFd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFCU01JQ20rMm1nZVV3R0FhckhsQnh5MlR0TU1VVXdWMWM0eVhDM3FjNENqenE5RnJJUHhWZzM3ZUhNRjBCNndjV3BzWCt4TVQ5UUtMQmt1WmZTQXNKUmlBdjRPSmdKYnQ1TDN3R2E1SmNIb3RKOUloUU5BTDlrbkM3Vm1LOG9QODRZWlkxMVhGUkF5WG53djlqVWsyVkJNek1SeWxxdlJEUEdic2M2Si9LcEFRMklCTUtiRXJzSzQ3WVdLdGovNXNXTjZwVTlIY0RNZ3JEUDN1aDdTR2hVM083OFhON21zNnY1WWxpUEhHRlN5eXN6OWZTeUNGK0J0MGxJUFIrc3V1SVpIWjlXS2lqeEVCTlhQVGlOVmVWQ0lDT2lnU1pBZGh4ZStnRjdiNCtaNlVxNGpHSVZxbVl5K091dlBHbkN4aW03R2VrM29ZVlQyVTdRYjNndFV0WTA9PC9kc2lnOlg1MDlDZXJ0aWZpY2F0ZT48L2RzaWc6WDUwOURhdGE+PGRzaWc6S2V5VmFsdWU+PGRzaWc6UlNBS2V5VmFsdWU+PGRzaWc6TW9kdWx1cz5nY0NsL01WTXEwT09DajBVcnhpRTVHRmhTekZmRWlncEpnZndHTUhWUlJURWdqQVEydW5lYXQyRjE1QjlqVEVVekE3NWlQbXp1aFZrRUpXWG5PTzJTaWlZcktVdUkxL3BuOWpMcHIwWG9iL3lJNVBvaWJGYUt0QUtwT0JQWVRwekdqTTVhbFZKc3kwekdINTNVSGRKTGREWkRsWFpQQ0RtVXhZa0NtRDJIZ0czMlZkK1ZzQk9qYjRRNkVKRVBxOW9BYjVBSnJCRmIzMy85L21xbXIyTi9qZE5rNXUzQy81VnpYZ2EvTFVvOU5CYzN2Tmx4QnpkZG51cFpCeFBydCtJV0x0OFZuVTlTYVV4Z0RKQzY4czljS0tOeFdFL2MvREpzWi9hMjU5SDRvU1k5dGwrd1JUcTAwVjVZdlpvQzZGMnMwbUw2RUlveDR0bWp4em5Pa2NSTnc9PTwvZHNpZzpNb2R1bHVzPjxkc2lnOkV4cG9uZW50PkFRQUI8L2RzaWc6RXhwb25lbnQ+PC9kc2lnOlJTQUtleVZhbHVlPjwvZHNpZzpLZXlWYWx1ZT48L2RzaWc6S2V5SW5mbz48L2RzaWc6U2lnbmF0dXJlPjxzYW1scDpTdGF0dXM+PHNhbWxwOlN0YXR1c0NvZGUgVmFsdWU9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpzdGF0dXM6U3VjY2VzcyIvPjwvc2FtbHA6U3RhdHVzPjxzYW1sOkFzc2VydGlvbiB4bWxucz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiIgSUQ9IklEXzU5NmEwYzBhLWYzZGEtNDQ2NS05NTQzLWUxNGMwMmExZWFjNiIgSXNzdWVJbnN0YW50PSIyMDIwLTA2LTA1VDIzOjA1OjEwLjY0NVoiIFZlcnNpb249IjIuMCI+PHNhbWw6SXNzdWVyPmh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9hdXRoL3JlYWxtcy9zb25hcnF1YmU8L3NhbWw6SXNzdWVyPjxzYW1sOlN1YmplY3Q+PHNhbWw6TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6MS4xOm5hbWVpZC1mb3JtYXQ6dW5zcGVjaWZpZWQiPmpvaG5kb2U8L3NhbWw6TmFtZUlEPjxzYW1sOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIj48c2FtbDpTdWJqZWN0Q29uZmlybWF0aW9uRGF0YSBJblJlc3BvbnNlVG89Ik9ORUxPR0lOXzI2N2UxYjA1LWUyMzctNGFiMC1hYmJiLTg2YjUwYzQyYjBkOSIgTm90T25PckFmdGVyPSIyMDM5LTA2LTExVDA5OjQ0OjA4LjY0NVoiIFJlY2lwaWVudD0iaHR0cDovL2xvY2FsaG9zdDo5MDAwL29hdXRoMi9jYWxsYmFjay9zYW1sIi8+PC9zYW1sOlN1YmplY3RDb25maXJtYXRpb24+PC9zYW1sOlN1YmplY3Q+PHNhbWw6Q29uZGl0aW9ucyBOb3RCZWZvcmU9IjIwMjAtMDYtMDVUMjM6MDU6MDguNjQ1WiIgTm90T25PckFmdGVyPSIyMDM5LTA2LTExVDA5OjQ0OjA4LjY0NVoiPjxzYW1sOkF1ZGllbmNlUmVzdHJpY3Rpb24+PHNhbWw6QXVkaWVuY2U+TXlBcHA8L3NhbWw6QXVkaWVuY2U+PC9zYW1sOkF1ZGllbmNlUmVzdHJpY3Rpb24+PC9zYW1sOkNvbmRpdGlvbnM+PHNhbWw6QXV0aG5TdGF0ZW1lbnQgQXV0aG5JbnN0YW50PSIyMDIwLTA2LTA1VDIzOjA1OjEwLjY0N1oiIFNlc3Npb25JbmRleD0iYTg1MzVjNTMtYmY3ZC00YWU3LWFmOGQtMDU2Y2M4MGUxMzk5OjowMjgxNWNkNS05ZWM5LTQ2NDktYTlmMC1kNWZkYjk1NTUxZGMiIFNlc3Npb25Ob3RPbk9yQWZ0ZXI9IjIwMzktMDYtMTFUMDk6NDQ6MTAuNjQ3WiI+PHNhbWw6QXV0aG5Db250ZXh0PjxzYW1sOkF1dGhuQ29udGV4dENsYXNzUmVmPnVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOnVuc3BlY2lmaWVkPC9zYW1sOkF1dGhuQ29udGV4dENsYXNzUmVmPjwvc2FtbDpBdXRobkNvbnRleHQ+PC9zYW1sOkF1dGhuU3RhdGVtZW50PjxzYW1sOkF0dHJpYnV0ZVN0YXRlbWVudD48c2FtbDpBdHRyaWJ1dGUgTmFtZT0ibmFtZSIgTmFtZUZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmF0dHJuYW1lLWZvcm1hdDpiYXNpYyI+PHNhbWw6QXR0cmlidXRlVmFsdWUgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0ieHM6c3RyaW5nIj5Kb2huIERvZTwvc2FtbDpBdHRyaWJ1dGVWYWx1ZT48L3NhbWw6QXR0cmlidXRlPjxzYW1sOkF0dHJpYnV0ZSBOYW1lPSJncm91cHMiIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6YmFzaWMiPjxzYW1sOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI+ZGV2ZWxvcGVyPC9zYW1sOkF0dHJpYnV0ZVZhbHVlPjxzYW1sOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI+cHJvZHVjdC1tYW5hZ2VyPC9zYW1sOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDpBdHRyaWJ1dGU+PHNhbWw6QXR0cmlidXRlIE5hbWU9ImVtYWlsIiBOYW1lRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXR0cm5hbWUtZm9ybWF0OmJhc2ljIj48c2FtbDpBdHRyaWJ1dGVWYWx1ZSB4bWxuczp4cz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJ4czpzdHJpbmciPmpvaG5kb2VAZW1haWwuY29tPC9zYW1sOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDpBdHRyaWJ1dGU+PC9zYW1sOkF0dHJpYnV0ZVN0YXRlbWVudD48L3NhbWw6QXNzZXJ0aW9uPjwvc2FtbHA6UmVzcG9uc2U+"],"delete":["0",""]}],"server\/sonar-auth-saml\/src\/test\/resources\/org\/sonar\/auth\/saml\/SamlIdentityProviderTest\/encoded_full_response.txt":[{"add":["0","PHNhbWxwOlJlc3BvbnNlIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIERlc3RpbmF0aW9uPSJodHRwOi8vbG9jYWxob3N0OjkwMDAvb2F1dGgyL2NhbGxiYWNrL3NhbWwiIElEPSJJRF8yOGM0YzMzZi0yZDNhLTQ5NjEtYjcwZC0yYzMwZmNkYWVkNDAiIEluUmVzcG9uc2VUbz0iT05FTE9HSU5fYjIzZDNjYWYtN2E1Yy00MzcwLWI4NDktMGRiNGQzYzM0ZTc1IiBJc3N1ZUluc3RhbnQ9IjIwMjAtMDYtMDVUMjM6MDI6MjguNDM4WiIgVmVyc2lvbj0iMi4wIj48c2FtbDpJc3N1ZXI+aHR0cDovL2xvY2FsaG9zdDo4MDgwL2F1dGgvcmVhbG1zL3NvbmFycXViZTwvc2FtbDpJc3N1ZXI+PGRzaWc6U2lnbmF0dXJlIHhtbG5zOmRzaWc9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxkc2lnOlNpZ25lZEluZm8+PGRzaWc6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjxkc2lnOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZHNpZy1tb3JlI3JzYS1zaGEyNTYiLz48ZHNpZzpSZWZlcmVuY2UgVVJJPSIjSURfMjhjNGMzM2YtMmQzYS00OTYxLWI3MGQtMmMzMGZjZGFlZDQwIj48ZHNpZzpUcmFuc2Zvcm1zPjxkc2lnOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+PGRzaWc6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8+PC9kc2lnOlRyYW5zZm9ybXM+PGRzaWc6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ii8+PGRzaWc6RGlnZXN0VmFsdWU+cnQxSEkxODFtRFUzaFV5clAwbnpGd2poMzRNTDlKT3QyZ3dVUDZWYSsxTT08L2RzaWc6RGlnZXN0VmFsdWU+PC9kc2lnOlJlZmVyZW5jZT48L2RzaWc6U2lnbmVkSW5mbz48ZHNpZzpTaWduYXR1cmVWYWx1ZT5KNmE3d3ZHRFJ3ZDVRL3pIS0xpUHFJSHhNYTU2a0xlVXZXb1B6TGVrK0FMNnQ5Y2t5UnZJbWN3ZUx4bjVLYVAyUWtBdkVua3dNT0xpUmowdXFqcnNPakhVTEtsZU8rVkgrWnZVUkxJdkxyaE5BL2dVd1VZYXA2cC9QclladUlNWWIwVUxRam8zUFR0eDdTdm1UTVRRdFJoVlJBTURITDkvQzBjbURhZEZxbDRGVE1tQVFUMmVXZ1ppSU1sTG1BUzl3bmZJQ0tpMEdpSmRYb2xaMzRPQnNsRFVzWEdBT1d1WFhiVm12V2xtTGsyRkRvNUhLRFFZYUZvTXFEQVVGQVVzVk80cGtHWGVrRnJXUUwrTC9ZSFV6QUREUzl6ZW16K2hmUExoK2plR0NPckxTYkFhWmJMV0FTN3NFTnVhT0FpdkVXZW5hcGZIQld2WWtTWmFPR09ySlE9PTwvZHNpZzpTaWduYXR1cmVWYWx1ZT48ZHNpZzpLZXlJbmZvPjxkc2lnOktleU5hbWU+WjlwS1VaYUlwNmJ0SjJGTVV0N2dyX0p4RVBXTGJmYjkyUlVwMUJSbTMtTTwvZHNpZzpLZXlOYW1lPjxkc2lnOlg1MDlEYXRhPjxkc2lnOlg1MDlDZXJ0aWZpY2F0ZT5NSUlDb1RDQ0FZa0NCZ0Z5aGV5aXN6QU5CZ2txaGtpRzl3MEJBUXNGQURBVU1SSXdFQVlEVlFRRERBbHpiMjVoY25GMVltVXdIaGNOTWpBd05qQTFNVGt4TnpVM1doY05NekF3TmpBMU1Ua3hPVE0zV2pBVU1SSXdFQVlEVlFRRERBbHpiMjVoY25GMVltVXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDQndLWDh4VXlyUTQ0S1BSU3ZHSVRrWVdGTE1WOFNLQ2ttQi9BWXdkVkZGTVNDTUJEYTZkNXEzWVhYa0gyTk1SVE1Edm1JK2JPNkZXUVFsWmVjNDdaS0tKaXNwUzRqWCttZjJNdW12UmVodi9JamsraUpzVm9xMEFxazRFOWhPbk1hTXpscVZVbXpMVE1ZZm5kUWQwa3QwTmtPVmRrOElPWlRGaVFLWVBZZUFiZlpWMzVXd0U2TnZoRG9Ra1ErcjJnQnZrQW1zRVZ2ZmYvMythcWF2WTMrTjAyVG03Y0wvbFhOZUJyOHRTajAwRnplODJYRUhOMTJlNmxrSEUrdTM0aFl1M3hXZFQxSnBUR0FNa0xyeXoxd29vM0ZZVDl6OE1teG45cmJuMGZpaEpqMjJYN0JGT3JUUlhsaTltZ0xvWGF6U1l2b1FpakhpMmFQSE9jNlJ4RTNBZ01CQUFFd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFCU01JQ20rMm1nZVV3R0FhckhsQnh5MlR0TU1VVXdWMWM0eVhDM3FjNENqenE5RnJJUHhWZzM3ZUhNRjBCNndjV3BzWCt4TVQ5UUtMQmt1WmZTQXNKUmlBdjRPSmdKYnQ1TDN3R2E1SmNIb3RKOUloUU5BTDlrbkM3Vm1LOG9QODRZWlkxMVhGUkF5WG53djlqVWsyVkJNek1SeWxxdlJEUEdic2M2Si9LcEFRMklCTUtiRXJzSzQ3WVdLdGovNXNXTjZwVTlIY0RNZ3JEUDN1aDdTR2hVM083OFhON21zNnY1WWxpUEhHRlN5eXN6OWZTeUNGK0J0MGxJUFIrc3V1SVpIWjlXS2lqeEVCTlhQVGlOVmVWQ0lDT2lnU1pBZGh4ZStnRjdiNCtaNlVxNGpHSVZxbVl5K091dlBHbkN4aW03R2VrM29ZVlQyVTdRYjNndFV0WTA9PC9kc2lnOlg1MDlDZXJ0aWZpY2F0ZT48L2RzaWc6WDUwOURhdGE+PGRzaWc6S2V5VmFsdWU+PGRzaWc6UlNBS2V5VmFsdWU+PGRzaWc6TW9kdWx1cz5nY0NsL01WTXEwT09DajBVcnhpRTVHRmhTekZmRWlncEpnZndHTUhWUlJURWdqQVEydW5lYXQyRjE1QjlqVEVVekE3NWlQbXp1aFZrRUpXWG5PTzJTaWlZcktVdUkxL3BuOWpMcHIwWG9iL3lJNVBvaWJGYUt0QUtwT0JQWVRwekdqTTVhbFZKc3kwekdINTNVSGRKTGREWkRsWFpQQ0RtVXhZa0NtRDJIZ0czMlZkK1ZzQk9qYjRRNkVKRVBxOW9BYjVBSnJCRmIzMy85L21xbXIyTi9qZE5rNXUzQy81VnpYZ2EvTFVvOU5CYzN2Tmx4QnpkZG51cFpCeFBydCtJV0x0OFZuVTlTYVV4Z0RKQzY4czljS0tOeFdFL2MvREpzWi9hMjU5SDRvU1k5dGwrd1JUcTAwVjVZdlpvQzZGMnMwbUw2RUlveDR0bWp4em5Pa2NSTnc9PTwvZHNpZzpNb2R1bHVzPjxkc2lnOkV4cG9uZW50PkFRQUI8L2RzaWc6RXhwb25lbnQ+PC9kc2lnOlJTQUtleVZhbHVlPjwvZHNpZzpLZXlWYWx1ZT48L2RzaWc6S2V5SW5mbz48L2RzaWc6U2lnbmF0dXJlPjxzYW1scDpTdGF0dXM+PHNhbWxwOlN0YXR1c0NvZGUgVmFsdWU9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpzdGF0dXM6U3VjY2VzcyIvPjwvc2FtbHA6U3RhdHVzPjxzYW1sOkFzc2VydGlvbiB4bWxucz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiIgSUQ9IklEXzAxODNiNzgwLTNhYzEtNGVhMC1iMjY5LWIxNWIyZWMyZDFjNSIgSXNzdWVJbnN0YW50PSIyMDIwLTA2LTA1VDIzOjAyOjI4LjQzOFoiIFZlcnNpb249IjIuMCI+PHNhbWw6SXNzdWVyPmh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9hdXRoL3JlYWxtcy9zb25hcnF1YmU8L3NhbWw6SXNzdWVyPjxzYW1sOlN1YmplY3Q+PHNhbWw6TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6MS4xOm5hbWVpZC1mb3JtYXQ6dW5zcGVjaWZpZWQiPmpvaG5kb2U8L3NhbWw6TmFtZUlEPjxzYW1sOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIj48c2FtbDpTdWJqZWN0Q29uZmlybWF0aW9uRGF0YSBJblJlc3BvbnNlVG89Ik9ORUxPR0lOX2IyM2QzY2FmLTdhNWMtNDM3MC1iODQ5LTBkYjRkM2MzNGU3NSIgTm90T25PckFmdGVyPSIyMDM5LTA2LTExVDA5OjQxOjI2LjQzOFoiIFJlY2lwaWVudD0iaHR0cDovL2xvY2FsaG9zdDo5MDAwL29hdXRoMi9jYWxsYmFjay9zYW1sIi8+PC9zYW1sOlN1YmplY3RDb25maXJtYXRpb24+PC9zYW1sOlN1YmplY3Q+PHNhbWw6Q29uZGl0aW9ucyBOb3RCZWZvcmU9IjIwMjAtMDYtMDVUMjM6MDI6MjYuNDM4WiIgTm90T25PckFmdGVyPSIyMDM5LTA2LTExVDA5OjQxOjI2LjQzOFoiPjxzYW1sOkF1ZGllbmNlUmVzdHJpY3Rpb24+PHNhbWw6QXVkaWVuY2U+TXlBcHA8L3NhbWw6QXVkaWVuY2U+PC9zYW1sOkF1ZGllbmNlUmVzdHJpY3Rpb24+PC9zYW1sOkNvbmRpdGlvbnM+PHNhbWw6QXV0aG5TdGF0ZW1lbnQgQXV0aG5JbnN0YW50PSIyMDIwLTA2LTA1VDIzOjAyOjI4LjQzOVoiIFNlc3Npb25JbmRleD0iMjM3NmY5YTMtM2IyYS00ZTlhLWJhOWItODQ3OWNlYmI0MjU3OjowMjgxNWNkNS05ZWM5LTQ2NDktYTlmMC1kNWZkYjk1NTUxZGMiIFNlc3Npb25Ob3RPbk9yQWZ0ZXI9IjIwMzktMDYtMTFUMDk6NDE6MjguNDM5WiI+PHNhbWw6QXV0aG5Db250ZXh0PjxzYW1sOkF1dGhuQ29udGV4dENsYXNzUmVmPnVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOnVuc3BlY2lmaWVkPC9zYW1sOkF1dGhuQ29udGV4dENsYXNzUmVmPjwvc2FtbDpBdXRobkNvbnRleHQ+PC9zYW1sOkF1dGhuU3RhdGVtZW50PjxzYW1sOkF0dHJpYnV0ZVN0YXRlbWVudD48c2FtbDpBdHRyaWJ1dGUgTmFtZT0ibmFtZSIgTmFtZUZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmF0dHJuYW1lLWZvcm1hdDpiYXNpYyI+PHNhbWw6QXR0cmlidXRlVmFsdWUgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0ieHM6c3RyaW5nIj5Kb2huIERvZTwvc2FtbDpBdHRyaWJ1dGVWYWx1ZT48L3NhbWw6QXR0cmlidXRlPjxzYW1sOkF0dHJpYnV0ZSBOYW1lPSJsb2dpbiIgTmFtZUZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmF0dHJuYW1lLWZvcm1hdDpiYXNpYyI+PHNhbWw6QXR0cmlidXRlVmFsdWUgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0ieHM6c3RyaW5nIj5qb2huZG9lPC9zYW1sOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDpBdHRyaWJ1dGU+PHNhbWw6QXR0cmlidXRlIE5hbWU9Imdyb3VwcyIgTmFtZUZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmF0dHJuYW1lLWZvcm1hdDpiYXNpYyI+PHNhbWw6QXR0cmlidXRlVmFsdWUgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0ieHM6c3RyaW5nIj5kZXZlbG9wZXI8L3NhbWw6QXR0cmlidXRlVmFsdWU+PHNhbWw6QXR0cmlidXRlVmFsdWUgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0ieHM6c3RyaW5nIj5wcm9kdWN0LW1hbmFnZXI8L3NhbWw6QXR0cmlidXRlVmFsdWU+PC9zYW1sOkF0dHJpYnV0ZT48c2FtbDpBdHRyaWJ1dGUgTmFtZT0iZW1haWwiIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6YmFzaWMiPjxzYW1sOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI+am9obmRvZUBlbWFpbC5jb208L3NhbWw6QXR0cmlidXRlVmFsdWU+PC9zYW1sOkF0dHJpYnV0ZT48L3NhbWw6QXR0cmlidXRlU3RhdGVtZW50Pjwvc2FtbDpBc3NlcnRpb24+PC9zYW1scDpSZXNwb25zZT4="],"delete":["0",""]}],"server\/sonar-auth-saml\/src\/test\/resources\/org\/sonar\/auth\/saml\/SamlIdentityProviderTest\/encoded_minimal_response.txt":[{"add":["0","PHNhbWxwOlJlc3BvbnNlIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIERlc3RpbmF0aW9uPSJodHRwOi8vbG9jYWxob3N0OjkwMDAvb2F1dGgyL2NhbGxiYWNrL3NhbWwiIElEPSJJRF85ZjFjOTUyYy0zZDA0LTQyN2ItYTE3NS05NDk3ZmQ5NGM4MmYiIEluUmVzcG9uc2VUbz0iT05FTE9HSU5fYzhmNzUxYzgtZWQ4OS00MmNlLTlhMTgtZTQyMjk0NTI0NzQ4IiBJc3N1ZUluc3RhbnQ9IjIwMjAtMDYtMDVUMjI6NTg6NDUuMTg1WiIgVmVyc2lvbj0iMi4wIj48c2FtbDpJc3N1ZXI+aHR0cDovL2xvY2FsaG9zdDo4MDgwL2F1dGgvcmVhbG1zL3NvbmFycXViZTwvc2FtbDpJc3N1ZXI+PGRzaWc6U2lnbmF0dXJlIHhtbG5zOmRzaWc9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxkc2lnOlNpZ25lZEluZm8+PGRzaWc6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjxkc2lnOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZHNpZy1tb3JlI3JzYS1zaGEyNTYiLz48ZHNpZzpSZWZlcmVuY2UgVVJJPSIjSURfOWYxYzk1MmMtM2QwNC00MjdiLWExNzUtOTQ5N2ZkOTRjODJmIj48ZHNpZzpUcmFuc2Zvcm1zPjxkc2lnOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+PGRzaWc6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8+PC9kc2lnOlRyYW5zZm9ybXM+PGRzaWc6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ii8+PGRzaWc6RGlnZXN0VmFsdWU+Zk5YVkRpTnowenJWaUJFMnhuZTVxb3FQanh6czVGTmxDRjBPKzlLejNEbz08L2RzaWc6RGlnZXN0VmFsdWU+PC9kc2lnOlJlZmVyZW5jZT48L2RzaWc6U2lnbmVkSW5mbz48ZHNpZzpTaWduYXR1cmVWYWx1ZT5Bb2ZKSkR5Zk1SYzkyMTB4MmZGY244aE8zUFY1ZVd2R2dwWTZxVkpQanlSNmZscVNsd1k1KzZ3aTdQUTRlRE53ZUNpbGxlUXdUODF5ZjJHcVBtYUVQcWorYWErQkhDWjlXa3dramk5NkVKU0o1alBRa1djbWh1NDQ4V2ljalpRY2IvU0JpeTJ0ZUpJbFlkN2Nja2EzS3JxSUI5cm53Lzc5bExabFBUeXJIdXBWcEhqL3h4aFBKV3NJVjF0NDU0Zk5ydmNaWGhraFRpTGZpWU15N1VxaGs5ZERvWU16RUo3UWhQeHZjS3R0ZU4rQjVITklCSmxHVytXYmpGRXB6NGYzb05TTTdGRmJWcktIbjFVc2dlMXNTYlo1RS90b0J0VlV4akhkV0xabTdOUWJjS3pEYmFZdGZreXlaWkd5R1RUMk93NVE3YmJUZURTd3pCVlg2aUlqYlE9PTwvZHNpZzpTaWduYXR1cmVWYWx1ZT48ZHNpZzpLZXlJbmZvPjxkc2lnOktleU5hbWU+WjlwS1VaYUlwNmJ0SjJGTVV0N2dyX0p4RVBXTGJmYjkyUlVwMUJSbTMtTTwvZHNpZzpLZXlOYW1lPjxkc2lnOlg1MDlEYXRhPjxkc2lnOlg1MDlDZXJ0aWZpY2F0ZT5NSUlDb1RDQ0FZa0NCZ0Z5aGV5aXN6QU5CZ2txaGtpRzl3MEJBUXNGQURBVU1SSXdFQVlEVlFRRERBbHpiMjVoY25GMVltVXdIaGNOTWpBd05qQTFNVGt4TnpVM1doY05NekF3TmpBMU1Ua3hPVE0zV2pBVU1SSXdFQVlEVlFRRERBbHpiMjVoY25GMVltVXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDQndLWDh4VXlyUTQ0S1BSU3ZHSVRrWVdGTE1WOFNLQ2ttQi9BWXdkVkZGTVNDTUJEYTZkNXEzWVhYa0gyTk1SVE1Edm1JK2JPNkZXUVFsWmVjNDdaS0tKaXNwUzRqWCttZjJNdW12UmVodi9JamsraUpzVm9xMEFxazRFOWhPbk1hTXpscVZVbXpMVE1ZZm5kUWQwa3QwTmtPVmRrOElPWlRGaVFLWVBZZUFiZlpWMzVXd0U2TnZoRG9Ra1ErcjJnQnZrQW1zRVZ2ZmYvMythcWF2WTMrTjAyVG03Y0wvbFhOZUJyOHRTajAwRnplODJYRUhOMTJlNmxrSEUrdTM0aFl1M3hXZFQxSnBUR0FNa0xyeXoxd29vM0ZZVDl6OE1teG45cmJuMGZpaEpqMjJYN0JGT3JUUlhsaTltZ0xvWGF6U1l2b1FpakhpMmFQSE9jNlJ4RTNBZ01CQUFFd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFCU01JQ20rMm1nZVV3R0FhckhsQnh5MlR0TU1VVXdWMWM0eVhDM3FjNENqenE5RnJJUHhWZzM3ZUhNRjBCNndjV3BzWCt4TVQ5UUtMQmt1WmZTQXNKUmlBdjRPSmdKYnQ1TDN3R2E1SmNIb3RKOUloUU5BTDlrbkM3Vm1LOG9QODRZWlkxMVhGUkF5WG53djlqVWsyVkJNek1SeWxxdlJEUEdic2M2Si9LcEFRMklCTUtiRXJzSzQ3WVdLdGovNXNXTjZwVTlIY0RNZ3JEUDN1aDdTR2hVM083OFhON21zNnY1WWxpUEhHRlN5eXN6OWZTeUNGK0J0MGxJUFIrc3V1SVpIWjlXS2lqeEVCTlhQVGlOVmVWQ0lDT2lnU1pBZGh4ZStnRjdiNCtaNlVxNGpHSVZxbVl5K091dlBHbkN4aW03R2VrM29ZVlQyVTdRYjNndFV0WTA9PC9kc2lnOlg1MDlDZXJ0aWZpY2F0ZT48L2RzaWc6WDUwOURhdGE+PGRzaWc6S2V5VmFsdWU+PGRzaWc6UlNBS2V5VmFsdWU+PGRzaWc6TW9kdWx1cz5nY0NsL01WTXEwT09DajBVcnhpRTVHRmhTekZmRWlncEpnZndHTUhWUlJURWdqQVEydW5lYXQyRjE1QjlqVEVVekE3NWlQbXp1aFZrRUpXWG5PTzJTaWlZcktVdUkxL3BuOWpMcHIwWG9iL3lJNVBvaWJGYUt0QUtwT0JQWVRwekdqTTVhbFZKc3kwekdINTNVSGRKTGREWkRsWFpQQ0RtVXhZa0NtRDJIZ0czMlZkK1ZzQk9qYjRRNkVKRVBxOW9BYjVBSnJCRmIzMy85L21xbXIyTi9qZE5rNXUzQy81VnpYZ2EvTFVvOU5CYzN2Tmx4QnpkZG51cFpCeFBydCtJV0x0OFZuVTlTYVV4Z0RKQzY4czljS0tOeFdFL2MvREpzWi9hMjU5SDRvU1k5dGwrd1JUcTAwVjVZdlpvQzZGMnMwbUw2RUlveDR0bWp4em5Pa2NSTnc9PTwvZHNpZzpNb2R1bHVzPjxkc2lnOkV4cG9uZW50PkFRQUI8L2RzaWc6RXhwb25lbnQ+PC9kc2lnOlJTQUtleVZhbHVlPjwvZHNpZzpLZXlWYWx1ZT48L2RzaWc6S2V5SW5mbz48L2RzaWc6U2lnbmF0dXJlPjxzYW1scDpTdGF0dXM+PHNhbWxwOlN0YXR1c0NvZGUgVmFsdWU9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpzdGF0dXM6U3VjY2VzcyIvPjwvc2FtbHA6U3RhdHVzPjxzYW1sOkFzc2VydGlvbiB4bWxucz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiIgSUQ9IklEXzVkZTA0NGRlLTlhNzEtNDkzMy1iZjQ3LTVlMTUxNTY2NzcyZiIgSXNzdWVJbnN0YW50PSIyMDIwLTA2LTA1VDIyOjU4OjQ1LjE4NFoiIFZlcnNpb249IjIuMCI+PHNhbWw6SXNzdWVyPmh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9hdXRoL3JlYWxtcy9zb25hcnF1YmU8L3NhbWw6SXNzdWVyPjxzYW1sOlN1YmplY3Q+PHNhbWw6TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6MS4xOm5hbWVpZC1mb3JtYXQ6dW5zcGVjaWZpZWQiPmpvaG5kb2U8L3NhbWw6TmFtZUlEPjxzYW1sOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIj48c2FtbDpTdWJqZWN0Q29uZmlybWF0aW9uRGF0YSBJblJlc3BvbnNlVG89Ik9ORUxPR0lOX2M4Zjc1MWM4LWVkODktNDJjZS05YTE4LWU0MjI5NDUyNDc0OCIgTm90T25PckFmdGVyPSIyMDM5LTA2LTExVDA5OjM3OjQzLjE4NFoiIFJlY2lwaWVudD0iaHR0cDovL2xvY2FsaG9zdDo5MDAwL29hdXRoMi9jYWxsYmFjay9zYW1sIi8+PC9zYW1sOlN1YmplY3RDb25maXJtYXRpb24+PC9zYW1sOlN1YmplY3Q+PHNhbWw6Q29uZGl0aW9ucyBOb3RCZWZvcmU9IjIwMjAtMDYtMDVUMjI6NTg6NDMuMTg0WiIgTm90T25PckFmdGVyPSIyMDM5LTA2LTExVDA5OjM3OjQzLjE4NFoiPjxzYW1sOkF1ZGllbmNlUmVzdHJpY3Rpb24+PHNhbWw6QXVkaWVuY2U+TXlBcHA8L3NhbWw6QXVkaWVuY2U+PC9zYW1sOkF1ZGllbmNlUmVzdHJpY3Rpb24+PC9zYW1sOkNvbmRpdGlvbnM+PHNhbWw6QXV0aG5TdGF0ZW1lbnQgQXV0aG5JbnN0YW50PSIyMDIwLTA2LTA1VDIyOjU4OjQ1LjE4NVoiIFNlc3Npb25JbmRleD0iODIyYWVmMmEtMGQyZS00MmNhLWE3YjEtMDI4M2Q4YWY2Y2ZiOjowMjgxNWNkNS05ZWM5LTQ2NDktYTlmMC1kNWZkYjk1NTUxZGMiIFNlc3Npb25Ob3RPbk9yQWZ0ZXI9IjIwMzktMDYtMTFUMDk6Mzc6NDUuMTg1WiI+PHNhbWw6QXV0aG5Db250ZXh0PjxzYW1sOkF1dGhuQ29udGV4dENsYXNzUmVmPnVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOnVuc3BlY2lmaWVkPC9zYW1sOkF1dGhuQ29udGV4dENsYXNzUmVmPjwvc2FtbDpBdXRobkNvbnRleHQ+PC9zYW1sOkF1dGhuU3RhdGVtZW50PjxzYW1sOkF0dHJpYnV0ZVN0YXRlbWVudD48c2FtbDpBdHRyaWJ1dGUgTmFtZT0ibmFtZSIgTmFtZUZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmF0dHJuYW1lLWZvcm1hdDpiYXNpYyI+PHNhbWw6QXR0cmlidXRlVmFsdWUgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0ieHM6c3RyaW5nIj5Kb2huIERvZTwvc2FtbDpBdHRyaWJ1dGVWYWx1ZT48L3NhbWw6QXR0cmlidXRlPjxzYW1sOkF0dHJpYnV0ZSBOYW1lPSJsb2dpbiIgTmFtZUZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmF0dHJuYW1lLWZvcm1hdDpiYXNpYyI+PHNhbWw6QXR0cmlidXRlVmFsdWUgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0ieHM6c3RyaW5nIj5qb2huZG9lPC9zYW1sOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDpBdHRyaWJ1dGU+PC9zYW1sOkF0dHJpYnV0ZVN0YXRlbWVudD48L3NhbWw6QXNzZXJ0aW9uPjwvc2FtbHA6UmVzcG9uc2U+"],"delete":["0","PHNhbWxwOlJlc3BvbnNlIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIERlc3RpbmF0aW9uPSJodHRwOi8vbG9jYWxob3N0OjkwMDAvb2F1dGgyL2NhbGxiYWNrL3NhbWwiIElEPSJJRF83NDA0MWNiOC05MzEzLTRlYWUtYmExYy1hMTVlZDcxNzAzZGMiIEluUmVzcG9uc2VUbz0iT05FTE9HSU5fM2Y4N2U1YmYtYjNiZi00N2E0LWIzYTMtYmI4N2U3MmQ1M2E4IiBJc3N1ZUluc3RhbnQ9IjIwMTgtMDctMjRUMTE6NDY6MTkuMDQzWiIgVmVyc2lvbj0iMi4wIj48c2FtbDpJc3N1ZXI+aHR0cDovL2xvY2FsaG9zdDo4MDgwL2F1dGgvcmVhbG1zL3NvbmFycXViZTwvc2FtbDpJc3N1ZXI+PGRzaWc6U2lnbmF0dXJlIHhtbG5zOmRzaWc9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxkc2lnOlNpZ25lZEluZm8+PGRzaWc6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjxkc2lnOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZHNpZy1tb3JlI3JzYS1zaGEyNTYiLz48ZHNpZzpSZWZlcmVuY2UgVVJJPSIjSURfNzQwNDFjYjgtOTMxMy00ZWFlLWJhMWMtYTE1ZWQ3MTcwM2RjIj48ZHNpZzpUcmFuc2Zvcm1zPjxkc2lnOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+PGRzaWc6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8+PC9kc2lnOlRyYW5zZm9ybXM+PGRzaWc6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ii8+PGRzaWc6RGlnZXN0VmFsdWU+bmt0NjNacUtydXpTNWdGd0lnL2FvZ3ZhVVVYTXRjQUpyQ1NHazBxUytHQT08L2RzaWc6RGlnZXN0VmFsdWU+PC9kc2lnOlJlZmVyZW5jZT48L2RzaWc6U2lnbmVkSW5mbz48ZHNpZzpTaWduYXR1cmVWYWx1ZT5KRG04U1pCQjRGa3J6bjRaMU9OQ1BFY1JkRWRPQ3MxL0Y4QjhINXVuUEFOTnJFaml5VFoyenY4RVRvcXU1THB0YUpjbm4zMVE0Zzl1RXFidTFZdktCR3ZRZTV3aXplcFFtTXVaSk1kWmdIZzFlaFhSWlZ4bmNhb2kvY0FFbXhyZ3poVnpyYlpjTGRITEpjSitSSW9qK2l0V0w1d01KcWFLT1hRVVNXTkdzNjRFVWFPT0hKRWVxRllRbFVvbGsxNE5kMVBoY2hYd2V4YlBGQmdwOEZnK25xTTAvNzMzQ0tNL1VScmYyQ2puZE1OWWxSOG9scThLNHp5OE5kUmRUSnM1NjB1bkNPOVNMZ05hWnlNYnRPdkxlaXZlZGFhVHAvNHFub2g0NFRNVmJxNEdOU2FUYVNmQVlTMlMzT0FjdHdGTmRZTm55QXE2Ym04WU9sU0ZDNThqc2c9PTwvZHNpZzpTaWduYXR1cmVWYWx1ZT48ZHNpZzpLZXlJbmZvPjxkc2lnOktleU5hbWU+OXlpX2VjM0FLSlV6ZzZNZkRfeFlpSUtjZzR6bEJpSHFURHNFQ0lHZWhTazwvZHNpZzpLZXlOYW1lPjxkc2lnOlg1MDlEYXRhPjxkc2lnOlg1MDlDZXJ0aWZpY2F0ZT5NSUlDb1RDQ0FZa0NCZ0Zrc3VzTXpUQU5CZ2txaGtpRzl3MEJBUXNGQURBVU1SSXdFQVlEVlFRRERBbHpiMjVoY25GMVltVXdIaGNOTVRnd056RTVNVFF5TURBMldoY05Namd3TnpFNU1UUXlNVFEyV2pBVU1SSXdFQVlEVlFRRERBbHpiMjVoY25GMVltVXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFERU90aDVneHBUczFmM2JGR1VEOGhPOTdlTUlzRFp2dkUzUFplS29lVFJHN21PTHU2cmZMWHBoRzNmRTNFNi94cVVoUFA1cDloSmw5RHdnYU1ld2hkWmhmSHF0T3c2L1NQTUNRTkZWTnc5RlE3bHByV0tnOGNaeWdZTER4aE9iRXZDV1BlazhLY01iL3ZsS0Q4YzhoYTM3NE85cUVUNTFDVm9nRE01cm9wcDAycTBFTHhvVUtYcXBoS0g0K3NHWFJWbkRIYUVzRkh4c2UxSG5jaVpUNW1GMUc0NXZ4REl0ZEFuV0trWFlLVkhDK0V0NTJ0Q2llcU0weWdwUUYxbFdWSkZYVk9xc2kwM1lrTXU3SWtXdlNTZkF3K3VFY2ZtcXVUN0ZieEoybjVncDk0b2RBa1FCMEhLM2ZBQnJIcitHK24yUXZXRzZXd1FQSlRMME92MHcrdE5BZ01CQUFFd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFDUWZPckpGOThudW5LejZDTitZWlhYTVloelFpcVREME1sekNnK1JkaGlyK1dDL3J1M0t6OG9tdjUyVy9zWEVNTlFiRVpCa3NWTGw4Vy8xeGVCUzQxU2YxbmZ1dFU1NjB2L2ozL09tT2NuQ3c0cWVicUZIN25COFJMOHZBNHJHeDQzMFcvUGVlVU1pa1kxbVNqbHdobkpHaUlDUTNZOEkycU02UVdFci9EZjIvZ0ZDVzJZbkhiblM2US9Pd1JRaStVRkl6S2tsU1FRYTBnQW5xZk00b1NLVTJPTWh6U2NpbldnMWJ1TVlmSlNYZ2Q0cUloUHZSc1pwcUJzZHQvT1NyVTJENVkyWWZTdThvSWN4QlJnSm9FUkg1QlY5R2RPSUQ0ZlMrVFl3ME0wUU8vT1JldE53MW1BLzhOcHN5OG9rRjhDbjdmRGdibldDOHV6Ky94RGMxNEk9PC9kc2lnOlg1MDlDZXJ0aWZpY2F0ZT48L2RzaWc6WDUwOURhdGE+PGRzaWc6S2V5VmFsdWU+PGRzaWc6UlNBS2V5VmFsdWU+PGRzaWc6TW9kdWx1cz54RHJZZVlNYVU3Tlg5MnhSbEEvSVR2ZTNqQ0xBMmI3eE56MlhpcUhrMFJ1NWppN3VxM3kxNllSdDN4TnhPdjhhbElUeithZllTWmZROElHakhzSVhXWVh4NnJUc092MGp6QWtEUlZUY1BSVU81YWExaW9QSEdjb0dDdzhZVG14THdsajNwUENuREcvNzVTZy9IUElXdCsrRHZhaEUrZFFsYUlBek9hNkthZE5xdEJDOGFGQ2w2cVlTaCtQckJsMFZad3gyaExCUjhiSHRSNTNJbVUrWmhkUnVPYjhReUxYUUoxaXBGMkNsUnd2aExlZHJRb25xak5Nb0tVQmRaVmxTUlYxVHFySXROMkpETHV5SkZyMGtud01QcmhISDVxcmsreFc4U2RwK1lLZmVLSFFKRUFkQnl0M3dBYXg2L2h2cDlrTDFodWxzRUR5VXk5RHI5TVByVFE9PTwvZHNpZzpNb2R1bHVzPjxkc2lnOkV4cG9uZW50PkFRQUI8L2RzaWc6RXhwb25lbnQ+PC9kc2lnOlJTQUtleVZhbHVlPjwvZHNpZzpLZXlWYWx1ZT48L2RzaWc6S2V5SW5mbz48L2RzaWc6U2lnbmF0dXJlPjxzYW1scDpTdGF0dXM+PHNhbWxwOlN0YXR1c0NvZGUgVmFsdWU9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpzdGF0dXM6U3VjY2VzcyIvPjwvc2FtbHA6U3RhdHVzPjxzYW1sOkFzc2VydGlvbiB4bWxucz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiIgSUQ9IklEXzM3MDEzMGFmLTExY2MtNDg4OS04NThjLTFhZWUxYzE2ZmYxYiIgSXNzdWVJbnN0YW50PSIyMDE4LTA3LTI0VDExOjQ2OjE5LjA0M1oiIFZlcnNpb249IjIuMCI+PHNhbWw6SXNzdWVyPmh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9hdXRoL3JlYWxtcy9zb25hcnF1YmU8L3NhbWw6SXNzdWVyPjxkc2lnOlNpZ25hdHVyZSB4bWxuczpkc2lnPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj48ZHNpZzpTaWduZWRJbmZvPjxkc2lnOkNhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz48ZHNpZzpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNyc2Etc2hhMjU2Ii8+PGRzaWc6UmVmZXJlbmNlIFVSST0iI0lEXzM3MDEzMGFmLTExY2MtNDg4OS04NThjLTFhZWUxYzE2ZmYxYiI+PGRzaWc6VHJhbnNmb3Jtcz48ZHNpZzpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIvPjxkc2lnOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjwvZHNpZzpUcmFuc2Zvcm1zPjxkc2lnOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NiIvPjxkc2lnOkRpZ2VzdFZhbHVlPm5rNUR4QXllWFZyM3Bsd1FHbTQ4MTJIa0NzY3pCYk9QZHl3NkJSMThOZDg9PC9kc2lnOkRpZ2VzdFZhbHVlPjwvZHNpZzpSZWZlcmVuY2U+PC9kc2lnOlNpZ25lZEluZm8+PGRzaWc6U2lnbmF0dXJlVmFsdWU+U0h4MFFMMFpSeVF5UlRxYytkc0RvUHhaUmRCWG9PR3pmaU1TeUp3dWhBWUpoVWxjdzRLRWlnUFliYkhzKy9MMExQRC9aVllEMnUreXdsSXk4R2ljQWFncVFzME9zUnNPZG1ncnB6THVBeWxUNWpjeXJDUWJqbG5WdE5XM2FXTkR6UzBRTDN3UnhyM09UemRlVjVGa0Q1UEZnSTJzYXpIVUtLeTE0cFVQMHR0Ykh5QWV2MXJtRzdXMFdlbkxNU1ZuUTlSRjNjbHRrcHU1bUlXNmMwNGdKMTNVclV2dUpBSkRhOHpKTEEzVWNXdEo1ZFBlRkxYamc5dExSUkVUbHlXV0Y0dGdwd2psSVg3bW8rMHZOcG1zdlpmS3d1V0owNlpacE12NlhSaWoxeHVmVXJYQXMwaFFORzc3T2cwRENoSVhiUTl3a0lKMU54dThORGVGY3JVazRnPT08L2RzaWc6U2lnbmF0dXJlVmFsdWU+PGRzaWc6S2V5SW5mbz48ZHNpZzpLZXlOYW1lPjl5aV9lYzNBS0pVemc2TWZEX3hZaUlLY2c0emxCaUhxVERzRUNJR2VoU2s8L2RzaWc6S2V5TmFtZT48ZHNpZzpYNTA5RGF0YT48ZHNpZzpYNTA5Q2VydGlmaWNhdGU+TUlJQ29UQ0NBWWtDQmdGa3N1c016VEFOQmdrcWhraUc5dzBCQVFzRkFEQVVNUkl3RUFZRFZRUUREQWx6YjI1aGNuRjFZbVV3SGhjTk1UZ3dOekU1TVRReU1EQTJXaGNOTWpnd056RTVNVFF5TVRRMldqQVVNUkl3RUFZRFZRUUREQWx6YjI1aGNuRjFZbVV3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRREVPdGg1Z3hwVHMxZjNiRkdVRDhoTzk3ZU1Jc0RadnZFM1BaZUtvZVRSRzdtT0x1NnJmTFhwaEczZkUzRTYveHFVaFBQNXA5aEpsOUR3Z2FNZXdoZFpoZkhxdE93Ni9TUE1DUU5GVk53OUZRN2xwcldLZzhjWnlnWUxEeGhPYkV2Q1dQZWs4S2NNYi92bEtEOGM4aGEzNzRPOXFFVDUxQ1ZvZ0RNNXJvcHAwMnEwRUx4b1VLWHFwaEtINCtzR1hSVm5ESGFFc0ZIeHNlMUhuY2laVDVtRjFHNDV2eERJdGRBbldLa1hZS1ZIQytFdDUydENpZXFNMHlncFFGMWxXVkpGWFZPcXNpMDNZa011N0lrV3ZTU2ZBdyt1RWNmbXF1VDdGYnhKMm41Z3A5NG9kQWtRQjBISzNmQUJySHIrRytuMlF2V0c2V3dRUEpUTDBPdjB3K3ROQWdNQkFBRXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQ1FmT3JKRjk4bnVuS3o2Q04rWVpYWE1ZaHpRaXFURDBNbHpDZytSZGhpcitXQy9ydTNLejhvbXY1Mlcvc1hFTU5RYkVaQmtzVkxsOFcvMXhlQlM0MVNmMW5mdXRVNTYwdi9qMy9PbU9jbkN3NHFlYnFGSDduQjhSTDh2QTRyR3g0MzBXL1BlZVVNaWtZMW1Tamx3aG5KR2lJQ1EzWThJMnFNNlFXRXIvRGYyL2dGQ1cyWW5IYm5TNlEvT3dSUWkrVUZJektrbFNRUWEwZ0FucWZNNG9TS1UyT01oelNjaW5XZzFidU1ZZkpTWGdkNHFJaFB2UnNacHFCc2R0L09TclUyRDVZMllmU3U4b0ljeEJSZ0pvRVJINUJWOUdkT0lENGZTK1RZdzBNMFFPL09SZXROdzFtQS84TnBzeThva0Y4Q243ZkRnYm5XQzh1eisveERjMTRJPTwvZHNpZzpYNTA5Q2VydGlmaWNhdGU+PC9kc2lnOlg1MDlEYXRhPjxkc2lnOktleVZhbHVlPjxkc2lnOlJTQUtleVZhbHVlPjxkc2lnOk1vZHVsdXM+eERyWWVZTWFVN05YOTJ4UmxBL0lUdmUzakNMQTJiN3hOejJYaXFIazBSdTVqaTd1cTN5MTZZUnQzeE54T3Y4YWxJVHorYWZZU1pmUThJR2pIc0lYV1lYeDZyVHNPdjBqekFrRFJWVGNQUlVPNWFhMWlvUEhHY29HQ3c4WVRteEx3bGozcFBDbkRHLzc1U2cvSFBJV3QrK0R2YWhFK2RRbGFJQXpPYTZLYWROcXRCQzhhRkNsNnFZU2grUHJCbDBWWnd4MmhMQlI4Ykh0UjUzSW1VK1poZFJ1T2I4UXlMWFFKMWlwRjJDbFJ3dmhMZWRyUW9ucWpOTW9LVUJkWlZsU1JWMVRxckl0TjJKREx1eUpGcjBrbndNUHJoSEg1cXJrK3hXOFNkcCtZS2ZlS0hRSkVBZEJ5dDN3QWF4Ni9odnA5a0wxaHVsc0VEeVV5OURyOU1QclRRPT08L2RzaWc6TW9kdWx1cz48ZHNpZzpFeHBvbmVudD5BUUFCPC9kc2lnOkV4cG9uZW50PjwvZHNpZzpSU0FLZXlWYWx1ZT48L2RzaWc6S2V5VmFsdWU+PC9kc2lnOktleUluZm8+PC9kc2lnOlNpZ25hdHVyZT48c2FtbDpTdWJqZWN0PjxzYW1sOk5hbWVJRCBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjEuMTpuYW1laWQtZm9ybWF0OnVuc3BlY2lmaWVkIj5qb2huZG9lPC9zYW1sOk5hbWVJRD48c2FtbDpTdWJqZWN0Q29uZmlybWF0aW9uIE1ldGhvZD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmNtOmJlYXJlciI+PHNhbWw6U3ViamVjdENvbmZpcm1hdGlvbkRhdGEgSW5SZXNwb25zZVRvPSJPTkVMT0dJTl8zZjg3ZTViZi1iM2JmLTQ3YTQtYjNhMy1iYjg3ZTcyZDUzYTgiIE5vdE9uT3JBZnRlcj0iMjAxOC0wNy0yNFQxMTo1MToxNy4wNDNaIiBSZWNpcGllbnQ9Imh0dHA6Ly9sb2NhbGhvc3Q6OTAwMC9vYXV0aDIvY2FsbGJhY2svc2FtbCIvPjwvc2FtbDpTdWJqZWN0Q29uZmlybWF0aW9uPjwvc2FtbDpTdWJqZWN0PjxzYW1sOkNvbmRpdGlvbnMgTm90QmVmb3JlPSIyMDE4LTA3LTI0VDExOjQ2OjE3LjA0M1oiIE5vdE9uT3JBZnRlcj0iMjAxOC0wNy0yNFQxMTo0NzoxNy4wNDNaIj48c2FtbDpBdWRpZW5jZVJlc3RyaWN0aW9uPjxzYW1sOkF1ZGllbmNlPnNvbmFycXViZTwvc2FtbDpBdWRpZW5jZT48L3NhbWw6QXVkaWVuY2VSZXN0cmljdGlvbj48L3NhbWw6Q29uZGl0aW9ucz48c2FtbDpBdXRoblN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMTgtMDctMjRUMTE6NDY6MTkuMDQzWiIgU2Vzc2lvbkluZGV4PSI0MDBhNDdkNy04Yzc2LTQyOTYtYmMxMy1mNjE0NmFkYjc2NzQ6OmI3OWFkZDMwLWFhN2MtNDQ1ZS1hYmU0LTJjZDliZTg3YmMxZCI+PHNhbWw6QXV0aG5Db250ZXh0PjxzYW1sOkF1dGhuQ29udGV4dENsYXNzUmVmPnVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOnVuc3BlY2lmaWVkPC9zYW1sOkF1dGhuQ29udGV4dENsYXNzUmVmPjwvc2FtbDpBdXRobkNvbnRleHQ+PC9zYW1sOkF1dGhuU3RhdGVtZW50PjxzYW1sOkF0dHJpYnV0ZVN0YXRlbWVudD48c2FtbDpBdHRyaWJ1dGUgRnJpZW5kbHlOYW1lPSJVc2VybmFtZSIgTmFtZT0ibG9naW4iIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6YmFzaWMiPjxzYW1sOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI+am9obmRvZTwvc2FtbDpBdHRyaWJ1dGVWYWx1ZT48L3NhbWw6QXR0cmlidXRlPjxzYW1sOkF0dHJpYnV0ZSBGcmllbmRseU5hbWU9Ik5hbWUiIE5hbWU9Im5hbWUiIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6YmFzaWMiPjxzYW1sOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI+Sm9obiBEb2U8L3NhbWw6QXR0cmlidXRlVmFsdWU+PC9zYW1sOkF0dHJpYnV0ZT48L3NhbWw6QXR0cmlidXRlU3RhdGVtZW50Pjwvc2FtbDpBc3NlcnRpb24+PC9zYW1scDpSZXNwb25zZT4="]}],"server\/sonar-auth-saml\/src\/test\/resources\/org\/sonar\/auth\/saml\/SamlIdentityProviderTest\/encoded_response_without_name.txt":[{"add":["0","PHNhbWxwOlJlc3BvbnNlIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIERlc3RpbmF0aW9uPSJodHRwOi8vbG9jYWxob3N0OjkwMDAvb2F1dGgyL2NhbGxiYWNrL3NhbWwiIElEPSJJRF8wOGI3NzQxZS1lNjkwLTRiY2UtYjY4OS00YWY5NmEzMTZkYmYiIEluUmVzcG9uc2VUbz0iT05FTE9HSU5fZGE0ODgyODYtMDM3Yy00MWZjLWEwZGEtZmI5Njg1ZWU3NWMxIiBJc3N1ZUluc3RhbnQ9IjIwMjAtMDYtMDVUMjM6MDc6MjUuNjc1WiIgVmVyc2lvbj0iMi4wIj48c2FtbDpJc3N1ZXI+aHR0cDovL2xvY2FsaG9zdDo4MDgwL2F1dGgvcmVhbG1zL3NvbmFycXViZTwvc2FtbDpJc3N1ZXI+PGRzaWc6U2lnbmF0dXJlIHhtbG5zOmRzaWc9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxkc2lnOlNpZ25lZEluZm8+PGRzaWc6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjxkc2lnOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZHNpZy1tb3JlI3JzYS1zaGEyNTYiLz48ZHNpZzpSZWZlcmVuY2UgVVJJPSIjSURfMDhiNzc0MWUtZTY5MC00YmNlLWI2ODktNGFmOTZhMzE2ZGJmIj48ZHNpZzpUcmFuc2Zvcm1zPjxkc2lnOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+PGRzaWc6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8+PC9kc2lnOlRyYW5zZm9ybXM+PGRzaWc6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ii8+PGRzaWc6RGlnZXN0VmFsdWU+TTJrNEZLRm1BcXZyZjNkR0x3VmgvSEJjUmRhZFhoNHhBTHZFSTNqbFhqND08L2RzaWc6RGlnZXN0VmFsdWU+PC9kc2lnOlJlZmVyZW5jZT48L2RzaWc6U2lnbmVkSW5mbz48ZHNpZzpTaWduYXR1cmVWYWx1ZT5GcytmNDdtMlJVdFU0WUhWWWt6Vkp4b3ltWUNFYVgrR2dpZUdXMk9UaGQvSUM0TGRnUUR5Z21HekJIL3lTdGt1ZSs2S1lqYlptNDF2WDFqajZxekltT2FWd2VKZUxmSFR4dzU0K3BzZUNSZGNVcFpCWVNid3BMYml6S0VqRmZjK2hMT0dFL2dPZmpBeVBrc1ZrWE5SSG9BWFhsRENxaUNmN0FOY3BnUUpFTk40OXZBdUpvM2tSMGxjaXZSOUR2cWtpOGJrdzd5a05DMEdGTG5ZNEp5SWJCS0NrdnB5NHdKbFBwUjQrTVRkYUN3b0lDdnZURWFCb20zTlVHSVZkSzdWMFRWa2hSWHdJcVhuNmQ2YjcwTHhJK1VzV2hMVWhEZHgvZXplb2RXbVhOTkpVeWwvTXo0K1hZN0kzSmZaWW5pdnBEMndueXYrYlNzaE42V1R2UFhtTnc9PTwvZHNpZzpTaWduYXR1cmVWYWx1ZT48ZHNpZzpLZXlJbmZvPjxkc2lnOktleU5hbWU+WjlwS1VaYUlwNmJ0SjJGTVV0N2dyX0p4RVBXTGJmYjkyUlVwMUJSbTMtTTwvZHNpZzpLZXlOYW1lPjxkc2lnOlg1MDlEYXRhPjxkc2lnOlg1MDlDZXJ0aWZpY2F0ZT5NSUlDb1RDQ0FZa0NCZ0Z5aGV5aXN6QU5CZ2txaGtpRzl3MEJBUXNGQURBVU1SSXdFQVlEVlFRRERBbHpiMjVoY25GMVltVXdIaGNOTWpBd05qQTFNVGt4TnpVM1doY05NekF3TmpBMU1Ua3hPVE0zV2pBVU1SSXdFQVlEVlFRRERBbHpiMjVoY25GMVltVXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDQndLWDh4VXlyUTQ0S1BSU3ZHSVRrWVdGTE1WOFNLQ2ttQi9BWXdkVkZGTVNDTUJEYTZkNXEzWVhYa0gyTk1SVE1Edm1JK2JPNkZXUVFsWmVjNDdaS0tKaXNwUzRqWCttZjJNdW12UmVodi9JamsraUpzVm9xMEFxazRFOWhPbk1hTXpscVZVbXpMVE1ZZm5kUWQwa3QwTmtPVmRrOElPWlRGaVFLWVBZZUFiZlpWMzVXd0U2TnZoRG9Ra1ErcjJnQnZrQW1zRVZ2ZmYvMythcWF2WTMrTjAyVG03Y0wvbFhOZUJyOHRTajAwRnplODJYRUhOMTJlNmxrSEUrdTM0aFl1M3hXZFQxSnBUR0FNa0xyeXoxd29vM0ZZVDl6OE1teG45cmJuMGZpaEpqMjJYN0JGT3JUUlhsaTltZ0xvWGF6U1l2b1FpakhpMmFQSE9jNlJ4RTNBZ01CQUFFd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFCU01JQ20rMm1nZVV3R0FhckhsQnh5MlR0TU1VVXdWMWM0eVhDM3FjNENqenE5RnJJUHhWZzM3ZUhNRjBCNndjV3BzWCt4TVQ5UUtMQmt1WmZTQXNKUmlBdjRPSmdKYnQ1TDN3R2E1SmNIb3RKOUloUU5BTDlrbkM3Vm1LOG9QODRZWlkxMVhGUkF5WG53djlqVWsyVkJNek1SeWxxdlJEUEdic2M2Si9LcEFRMklCTUtiRXJzSzQ3WVdLdGovNXNXTjZwVTlIY0RNZ3JEUDN1aDdTR2hVM083OFhON21zNnY1WWxpUEhHRlN5eXN6OWZTeUNGK0J0MGxJUFIrc3V1SVpIWjlXS2lqeEVCTlhQVGlOVmVWQ0lDT2lnU1pBZGh4ZStnRjdiNCtaNlVxNGpHSVZxbVl5K091dlBHbkN4aW03R2VrM29ZVlQyVTdRYjNndFV0WTA9PC9kc2lnOlg1MDlDZXJ0aWZpY2F0ZT48L2RzaWc6WDUwOURhdGE+PGRzaWc6S2V5VmFsdWU+PGRzaWc6UlNBS2V5VmFsdWU+PGRzaWc6TW9kdWx1cz5nY0NsL01WTXEwT09DajBVcnhpRTVHRmhTekZmRWlncEpnZndHTUhWUlJURWdqQVEydW5lYXQyRjE1QjlqVEVVekE3NWlQbXp1aFZrRUpXWG5PTzJTaWlZcktVdUkxL3BuOWpMcHIwWG9iL3lJNVBvaWJGYUt0QUtwT0JQWVRwekdqTTVhbFZKc3kwekdINTNVSGRKTGREWkRsWFpQQ0RtVXhZa0NtRDJIZ0czMlZkK1ZzQk9qYjRRNkVKRVBxOW9BYjVBSnJCRmIzMy85L21xbXIyTi9qZE5rNXUzQy81VnpYZ2EvTFVvOU5CYzN2Tmx4QnpkZG51cFpCeFBydCtJV0x0OFZuVTlTYVV4Z0RKQzY4czljS0tOeFdFL2MvREpzWi9hMjU5SDRvU1k5dGwrd1JUcTAwVjVZdlpvQzZGMnMwbUw2RUlveDR0bWp4em5Pa2NSTnc9PTwvZHNpZzpNb2R1bHVzPjxkc2lnOkV4cG9uZW50PkFRQUI8L2RzaWc6RXhwb25lbnQ+PC9kc2lnOlJTQUtleVZhbHVlPjwvZHNpZzpLZXlWYWx1ZT48L2RzaWc6S2V5SW5mbz48L2RzaWc6U2lnbmF0dXJlPjxzYW1scDpTdGF0dXM+PHNhbWxwOlN0YXR1c0NvZGUgVmFsdWU9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpzdGF0dXM6U3VjY2VzcyIvPjwvc2FtbHA6U3RhdHVzPjxzYW1sOkFzc2VydGlvbiB4bWxucz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiIgSUQ9IklEXzhjODA3ODc4LTAyMTMtNGIzNy1iMzc3LWI0Yjg2ZWVkNGVkZiIgSXNzdWVJbnN0YW50PSIyMDIwLTA2LTA1VDIzOjA3OjI1LjY3NVoiIFZlcnNpb249IjIuMCI+PHNhbWw6SXNzdWVyPmh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9hdXRoL3JlYWxtcy9zb25hcnF1YmU8L3NhbWw6SXNzdWVyPjxzYW1sOlN1YmplY3Q+PHNhbWw6TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6MS4xOm5hbWVpZC1mb3JtYXQ6dW5zcGVjaWZpZWQiPmpvaG5kb2U8L3NhbWw6TmFtZUlEPjxzYW1sOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIj48c2FtbDpTdWJqZWN0Q29uZmlybWF0aW9uRGF0YSBJblJlc3BvbnNlVG89Ik9ORUxPR0lOX2RhNDg4Mjg2LTAzN2MtNDFmYy1hMGRhLWZiOTY4NWVlNzVjMSIgTm90T25PckFmdGVyPSIyMDM5LTA2LTExVDA5OjQ2OjIzLjY3NVoiIFJlY2lwaWVudD0iaHR0cDovL2xvY2FsaG9zdDo5MDAwL29hdXRoMi9jYWxsYmFjay9zYW1sIi8+PC9zYW1sOlN1YmplY3RDb25maXJtYXRpb24+PC9zYW1sOlN1YmplY3Q+PHNhbWw6Q29uZGl0aW9ucyBOb3RCZWZvcmU9IjIwMjAtMDYtMDVUMjM6MDc6MjMuNjc1WiIgTm90T25PckFmdGVyPSIyMDM5LTA2LTExVDA5OjQ2OjIzLjY3NVoiPjxzYW1sOkF1ZGllbmNlUmVzdHJpY3Rpb24+PHNhbWw6QXVkaWVuY2U+TXlBcHA8L3NhbWw6QXVkaWVuY2U+PC9zYW1sOkF1ZGllbmNlUmVzdHJpY3Rpb24+PC9zYW1sOkNvbmRpdGlvbnM+PHNhbWw6QXV0aG5TdGF0ZW1lbnQgQXV0aG5JbnN0YW50PSIyMDIwLTA2LTA1VDIzOjA3OjI1LjY3NloiIFNlc3Npb25JbmRleD0iMDg5YzYwNmItMzI1Zi00NDQ5LTgzNTUtYTU0OTVjYmU0YzRjOjowMjgxNWNkNS05ZWM5LTQ2NDktYTlmMC1kNWZkYjk1NTUxZGMiIFNlc3Npb25Ob3RPbk9yQWZ0ZXI9IjIwMzktMDYtMTFUMDk6NDY6MjUuNjc2WiI+PHNhbWw6QXV0aG5Db250ZXh0PjxzYW1sOkF1dGhuQ29udGV4dENsYXNzUmVmPnVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOnVuc3BlY2lmaWVkPC9zYW1sOkF1dGhuQ29udGV4dENsYXNzUmVmPjwvc2FtbDpBdXRobkNvbnRleHQ+PC9zYW1sOkF1dGhuU3RhdGVtZW50PjxzYW1sOkF0dHJpYnV0ZVN0YXRlbWVudD48c2FtbDpBdHRyaWJ1dGUgTmFtZT0ibG9naW4iIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6YmFzaWMiPjxzYW1sOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI+am9obmRvZTwvc2FtbDpBdHRyaWJ1dGVWYWx1ZT48L3NhbWw6QXR0cmlidXRlPjxzYW1sOkF0dHJpYnV0ZSBOYW1lPSJncm91cHMiIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6YmFzaWMiPjxzYW1sOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI+ZGV2ZWxvcGVyPC9zYW1sOkF0dHJpYnV0ZVZhbHVlPjxzYW1sOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI+cHJvZHVjdC1tYW5hZ2VyPC9zYW1sOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDpBdHRyaWJ1dGU+PHNhbWw6QXR0cmlidXRlIE5hbWU9ImVtYWlsIiBOYW1lRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXR0cm5hbWUtZm9ybWF0OmJhc2ljIj48c2FtbDpBdHRyaWJ1dGVWYWx1ZSB4bWxuczp4cz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJ4czpzdHJpbmciPmpvaG5kb2VAZW1haWwuY29tPC9zYW1sOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDpBdHRyaWJ1dGU+PC9zYW1sOkF0dHJpYnV0ZVN0YXRlbWVudD48L3NhbWw6QXNzZXJ0aW9uPjwvc2FtbHA6UmVzcG9uc2U+"],"delete":["0",""]}],"server\/sonar-auth-saml\/src\/main\/java\/org\/sonar\/auth\/saml\/SamlIdentityProvider.java":[{"add":["32","import java.util.regex.Pattern;","36","import javax.servlet.http.HttpServletRequestWrapper;","52","  private static final Pattern HTTPS_PATTERN = Pattern.compile(\"https?:\/\/\");","108","    \/\/","109","    \/\/ Workaround for onelogin\/java-saml validation not taking into account running a reverse proxy configuration. This change","110","    \/\/ makes the validation take into account 'X-Forwarded-Proto' and 'Host' headers set by the reverse proxy","111","    \/\/ More details here:","112","    \/\/ - https:\/\/github.com\/onelogin\/java-saml\/issues\/198","113","    \/\/ - https:\/\/github.com\/onelogin\/java-saml\/issues\/95","114","    \/\/","115","    HttpServletRequest processedRequest = useProxyHeadersInRequest(context.getRequest());","116","","117","    Auth auth = newAuth(initSettings(null), processedRequest, context.getResponse());","188","    samlData.put(\"onelogin.saml2.strict\", true);","202","","203","  private static HttpServletRequest useProxyHeadersInRequest(HttpServletRequest request) {","204","    String forwardedScheme = request.getHeader(\"X-Forwarded-Proto\");","205","    if (forwardedScheme != null) {","206","      request = new HttpServletRequestWrapper(request) {","207","        @Override","208","        public String getScheme() {","209","          return forwardedScheme;","210","        }","211","","212","        @Override","213","        public StringBuffer getRequestURL() {","214","          StringBuffer originalURL = ((HttpServletRequest) getRequest()).getRequestURL();","215","          return new StringBuffer(HTTPS_PATTERN.matcher(originalURL.toString()).replaceFirst(forwardedScheme + \":\/\/\"));","216","        }","217","      };","218","    }","219","","220","    return request;","221","  }"],"delete":["105","    Auth auth = newAuth(initSettings(null), context.getRequest(), context.getResponse());","176","    \/\/ TODO strict mode is unfortunately not compatible with HTTPS configuration on reverse proxy =>","177","    \/\/ https:\/\/jira.sonarsource.com\/browse\/SQAUTHSAML-8","178","    samlData.put(\"onelogin.saml2.strict\", false);"]}],"server\/sonar-auth-saml\/src\/test\/java\/org\/sonar\/auth\/saml\/SamlIdentityProviderTest.java":[{"add":["30","import org.junit.Before;","49","  private static final String SQ_CALLBACK_URL = \"http:\/\/localhost:9000\/oauth2\/callback\/saml\";","54","  private final MapSettings settings = new MapSettings(new PropertyDefinitions(System2.INSTANCE, SamlSettings.definitions()));","55","  private final SamlIdentityProvider underTest = new SamlIdentityProvider(new SamlSettings(settings.asConfig()), new SamlMessageIdChecker(db.getDbClient()));","56","  private HttpServletResponse response = mock(HttpServletResponse.class);","57","  private HttpServletRequest request = mock(HttpServletRequest.class);","59","  @Before","60","  public void setup() {","61","    this.request = mock(HttpServletRequest.class);","62","    this.response = mock(HttpServletResponse.class);","63","    when(this.request.getRequestURL()).thenReturn(new StringBuffer(SQ_CALLBACK_URL));","64","  }","119","    DumbCallbackContext callbackContext = new DumbCallbackContext(request, response, \"encoded_full_response.txt\", SQ_CALLBACK_URL);","120","","121","    underTest.callback(callbackContext);","122","","123","    assertThat(callbackContext.redirectedToRequestedPage.get()).isTrue();","124","    assertThat(callbackContext.userIdentity.getProviderLogin()).isEqualTo(\"johndoe\");","125","    assertThat(callbackContext.verifyState.get()).isTrue();","126","  }","127","","128","  @Test","129","  public void failed_callback_when_behind_a_reverse_proxy_without_needed_header() {","130","    setSettings(true);","131","    \/\/ simulate reverse proxy stripping SSL and not adding X-Forwarded-Proto header","132","    when(this.request.getRequestURL()).thenReturn(new StringBuffer(\"http:\/\/localhost\/oauth2\/callback\/saml\"));","133","    DumbCallbackContext callbackContext = new DumbCallbackContext(request, response, \"encoded_full_response_with_reverse_proxy.txt\",","134","      \"https:\/\/localhost\/oauth2\/callback\/saml\");","135","","136","    assertThatThrownBy(() -> underTest.callback(callbackContext))","137","      .isInstanceOf(UnauthorizedException.class)","138","      .hasMessageContaining(\"The response was received at http:\/\/localhost\/oauth2\/callback\/saml instead of https:\/\/localhost\/oauth2\/callback\/saml\");","139","  }","140","","141","  @Test","142","  public void successful_callback_when_behind_a_reverse_proxy_with_needed_header() {","143","    setSettings(true);","144","    \/\/ simulate reverse proxy stripping SSL and adding X-Forwarded-Proto header","145","    when(this.request.getRequestURL()).thenReturn(new StringBuffer(\"http:\/\/localhost\/oauth2\/callback\/saml\"));","146","    when(this.request.getHeader(\"X-Forwarded-Proto\")).thenReturn(\"https\");","147","    DumbCallbackContext callbackContext = new DumbCallbackContext(request, response, \"encoded_full_response_with_reverse_proxy.txt\",","148","      \"https:\/\/localhost\/oauth2\/callback\/saml\");","160","    DumbCallbackContext callbackContext = new DumbCallbackContext(request, response, \"encoded_full_response.txt\", SQ_CALLBACK_URL);","173","    DumbCallbackContext callbackContext = new DumbCallbackContext(request, response, \"encoded_minimal_response.txt\", SQ_CALLBACK_URL);","187","    DumbCallbackContext callbackContext = new DumbCallbackContext(request, response, \"encoded_full_response.txt\", SQ_CALLBACK_URL);","198","    DumbCallbackContext callbackContext = new DumbCallbackContext(request, response, \"encoded_response_without_login.txt\", SQ_CALLBACK_URL);","209","    DumbCallbackContext callbackContext = new DumbCallbackContext(request, response, \"encoded_response_without_name.txt\", SQ_CALLBACK_URL);","220","    DumbCallbackContext callbackContext = new DumbCallbackContext(request, response, \"encoded_full_response.txt\", SQ_CALLBACK_URL);","255","    DumbCallbackContext callbackContext = new DumbCallbackContext(request, response, \"encoded_full_response.txt\", SQ_CALLBACK_URL);","265","    DumbCallbackContext callbackContext = new DumbCallbackContext(request, response, \"encoded_minimal_response.txt\", SQ_CALLBACK_URL);","280","        \"MIICoTCCAYkCBgFyheyiszANBgkqhkiG9w0BAQsFADAUMRIwEAYDVQQDDAlzb25hcnF1YmUwHhcNMjAwNjA1MTkxNzU3WhcNMzAwNjA1MTkxOTM3WjAUMRIwEAYDVQQDDAlzb25hcnF1YmUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCBwKX8xUyrQ44KPRSvGITkYWFLMV8SKCkmB\/AYwdVFFMSCMBDa6d5q3YXXkH2NMRTMDvmI+bO6FWQQlZec47ZKKJispS4jX+mf2MumvRehv\/Ijk+iJsVoq0Aqk4E9hOnMaMzlqVUmzLTMYfndQd0kt0NkOVdk8IOZTFiQKYPYeAbfZV35WwE6NvhDoQkQ+r2gBvkAmsEVvff\/3+aqavY3+N02Tm7cL\/lXNeBr8tSj00Fze82XEHN12e6lkHE+u34hYu3xWdT1JpTGAMkLryz1woo3FYT9z8Mmxn9rbn0fihJj22X7BFOrTRXli9mgLoXazSYvoQijHi2aPHOc6RxE3AgMBAAEwDQYJKoZIhvcNAQELBQADggEBABSMICm+2mgeUwGAarHlBxy2TtMMUUwV1c4yXC3qc4Cjzq9FrIPxVg37eHMF0B6wcWpsX+xMT9QKLBkuZfSAsJRiAv4OJgJbt5L3wGa5JcHotJ9IhQNAL9knC7VmK8oP84YZY11XFRAyXnwv9jUk2VBMzMRylqvRDPGbsc6J\/KpAQ2IBMKbErsK47YWKtj\/5sWN6pU9HcDMgrDP3uh7SGhU3O78XN7ms6v5YliPHGFSyysz9fSyCF+Bt0lIPR+suuIZHZ9WKijxEBNXPTiNVeVCICOigSZAdhxe+gF7b4+Z6Uq4jGIVqmYy+OuvPGnCxim7Gek3oYVT2U7Qb3gtUtY0=\");","292","    private final HttpServletResponse response = mock(HttpServletResponse.class);","307","      return SQ_CALLBACK_URL;","322","    private final HttpServletResponse response;","323","    private final HttpServletRequest request;","324","    private final String expectedCallbackUrl;","330","    public DumbCallbackContext(HttpServletRequest request, HttpServletResponse response, String encodedResponseFile, String expectedCallbackUrl) {","331","      this.request = request;","332","      this.response = response;","333","      this.expectedCallbackUrl = expectedCallbackUrl;","370","      return this.expectedCallbackUrl;","375","      return this.request;","380","      return this.response;"],"delete":["52","  private MapSettings settings = new MapSettings(new PropertyDefinitions(System2.INSTANCE, SamlSettings.definitions()));","54","  private SamlMessageIdChecker samlMessageIdChecker = mock(SamlMessageIdChecker.class);","55","","56","  private SamlIdentityProvider underTest = new SamlIdentityProvider(new SamlSettings(settings.asConfig()), new SamlMessageIdChecker(db.getDbClient()));","111","    DumbCallbackContext callbackContext = new DumbCallbackContext(\"encoded_full_response.txt\");","123","    DumbCallbackContext callbackContext = new DumbCallbackContext(\"encoded_full_response.txt\");","136","    DumbCallbackContext callbackContext = new DumbCallbackContext(\"encoded_minimal_response.txt\");","150","    DumbCallbackContext callbackContext = new DumbCallbackContext(\"encoded_full_response.txt\");","161","    DumbCallbackContext callbackContext = new DumbCallbackContext(\"encoded_response_without_login.txt\");","172","    DumbCallbackContext callbackContext = new DumbCallbackContext(\"encoded_response_without_name.txt\");","183","    DumbCallbackContext callbackContext = new DumbCallbackContext(\"encoded_full_response.txt\");","218","    DumbCallbackContext callbackContext = new DumbCallbackContext(\"encoded_full_response.txt\");","228","    DumbCallbackContext callbackContext = new DumbCallbackContext(\"encoded_minimal_response.txt\");","243","        \"MIICoTCCAYkCBgFksusMzTANBgkqhkiG9w0BAQsFADAUMRIwEAYDVQQDDAlzb25hcnF1YmUwHhcNMTgwNzE5MTQyMDA2WhcNMjgwNzE5MTQyMTQ2WjAUMRIwEAYDVQQDDAlzb25hcnF1YmUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDEOth5gxpTs1f3bFGUD8hO97eMIsDZvvE3PZeKoeTRG7mOLu6rfLXphG3fE3E6\/xqUhPP5p9hJl9DwgaMewhdZhfHqtOw6\/SPMCQNFVNw9FQ7lprWKg8cZygYLDxhObEvCWPek8KcMb\/vlKD8c8ha374O9qET51CVogDM5ropp02q0ELxoUKXqphKH4+sGXRVnDHaEsFHxse1HnciZT5mF1G45vxDItdAnWKkXYKVHC+Et52tCieqM0ygpQF1lWVJFXVOqsi03YkMu7IkWvSSfAw+uEcfmquT7FbxJ2n5gp94odAkQB0HK3fABrHr+G+n2QvWG6WwQPJTL0Ov0w+tNAgMBAAEwDQYJKoZIhvcNAQELBQADggEBACQfOrJF98nunKz6CN+YZXXMYhzQiqTD0MlzCg+Rdhir+WC\/ru3Kz8omv52W\/sXEMNQbEZBksVLl8W\/1xeBS41Sf1nfutU560v\/j3\/OmOcnCw4qebqFH7nB8RL8vA4rGx430W\/PeeUMikY1mSjlwhnJGiICQ3Y8I2qM6QWEr\/Df2\/gFCW2YnHbnS6Q\/OwRQi+UFIzKklSQQa0gAnqfM4oSKU2OMhzScinWg1buMYfJSXgd4qIhPvRsZpqBsdt\/OSrU2D5Y2YfSu8oIcxBRgJoERH5BV9GdOID4fS+TYw0M0QO\/ORetNw1mA\/8Npsy8okF8Cn7fDgbnWC8uz+\/xDc14I=\");","255","","256","    private HttpServletResponse response = mock(HttpServletResponse.class);","271","      return \"http:\/\/localhost\/oauth\/callback\/saml\";","286","","287","    private HttpServletResponse response = mock(HttpServletResponse.class);","288","    private HttpServletRequest request = mock(HttpServletRequest.class);","289","","295","    public DumbCallbackContext(String encodedResponseFile) {","296","      when(getRequest().getRequestURL()).thenReturn(new StringBuffer(\"http:\/\/localhost\/oauth\/callback\/saml\"));","333","      return \"http:\/\/localhost\/oauth\/callback\/saml\";","338","      return request;","343","      return response;"]}]}},"82d291e0327d14bac525979b952a8a45e68c1104":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/authentication\/InitFilter.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/authentication\/InitFilterTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/authentication\/AuthenticationError.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/authentication\/AuthenticationFilter.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/authentication\/UserSessionInitializer.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/authentication\/OAuth2CallbackFilterTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/authentication\/OAuth2CallbackFilter.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/authentication\/UserSessionInitializerTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/authentication\/InitFilter.java":[{"add":["85","      handleAuthenticationError(e, response, getContextPath());"],"delete":["85","      handleAuthenticationError(e, response);"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/authentication\/InitFilterTest.java":[{"add":["175","  @Test","176","  public void redirect_with_context_path_when_failing_because_of_UnauthorizedException() throws Exception {","177","    when(server.getContextPath()).thenReturn(\"\/sonarqube\");","178","    IdentityProvider identityProvider = new FailWithUnauthorizedExceptionIdProvider(\"failing\");","179","    when(request.getRequestURI()).thenReturn(\"\/sonarqube\/sessions\/init\/\" + identityProvider.getKey());","180","    identityProviderRepository.addIdentityProvider(identityProvider);","181","","182","    underTest.doFilter(request, response, chain);","183","","184","    verify(response).sendRedirect(\"\/sonarqube\/sessions\/unauthorized?message=Email+john%40email.com+is+already+used\");","185","  }","186","","245",""],"delete":["229",""]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/authentication\/AuthenticationError.java":[{"add":["52","  static void handleAuthenticationError(AuthenticationException e, HttpServletResponse response, String contextPath) {","53","    redirectTo(response, getPath(e, contextPath));","56","  private static String getPath(AuthenticationException e, String contextPath) {","61","    return contextPath + format(UNAUTHORIZED_PATH_WITH_MESSAGE, encodeMessage(publicMessage));"],"delete":["52","  static void handleAuthenticationError(AuthenticationException e, HttpServletResponse response) {","53","    redirectTo(response, getPath(e));","56","  private static String getPath(AuthenticationException e) {","61","    return format(UNAUTHORIZED_PATH_WITH_MESSAGE, encodeMessage(publicMessage));"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/authentication\/AuthenticationFilter.java":[{"add":["72","","73","  String getContextPath() {","74","    return server.getContextPath();","75","  }"],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/authentication\/UserSessionInitializer.java":[{"add":["112","        handleAuthenticationError(e, response, request.getContextPath());"],"delete":["112","        handleAuthenticationError(e, response);"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/authentication\/OAuth2CallbackFilterTest.java":[{"add":["169","  public void redirect_with_context_path_when_failing_because_of_UnauthorizedExceptionException() throws Exception {","170","    when(server.getContextPath()).thenReturn(\"\/sonarqube\");","171","    FailWithUnauthorizedExceptionIdProvider identityProvider = new FailWithUnauthorizedExceptionIdProvider();","172","    identityProvider","173","      .setKey(\"failing\")","174","      .setName(\"name of failing\")","175","      .setEnabled(true);","176","    when(request.getRequestURI()).thenReturn(\"\/sonarqube\/oauth2\/callback\/\" + identityProvider.getKey());","177","    identityProviderRepository.addIdentityProvider(identityProvider);","178","","179","    underTest.doFilter(request, response, chain);","180","","181","    verify(response).sendRedirect(\"\/sonarqube\/sessions\/unauthorized?message=Email+john%40email.com+is+already+used\");","182","  }","183","","184","  @Test"],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/authentication\/OAuth2CallbackFilter.java":[{"add":["80","      handleAuthenticationError(e, response, getContextPath());"],"delete":["80","      handleAuthenticationError(e, response);"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/authentication\/UserSessionInitializerTest.java":[{"add":["31","import org.sonar.api.server.authentication.BaseIdentityProvider;","223","  @Test","224","  public void return_to_session_unauthorized_when_error_on_from_external_provider() throws Exception {","225","    when(ssoAuthenticator.authenticate(request, response)).thenReturn(Optional.empty());","226","    doThrow(AuthenticationException.newBuilder().setSource(Source.external(newBasicIdentityProvider(\"failing\"))).setPublicMessage(\"Token id hasn't been found\").build())","227","      .when(jwtHttpHandler).validateToken(request, response);","228","","229","    assertThat(underTest.initUserSession(request, response)).isFalse();","230","","231","    verify(response).sendRedirect(\"\/sessions\/unauthorized?message=Token+id+hasn%27t+been+found\");","232","  }","233","","234","  @Test","235","  public void return_to_session_unauthorized_when_error_on_from_external_provider_with_context_path() throws Exception {","236","    when(request.getContextPath()).thenReturn(\"\/sonarqube\");","237","    when(ssoAuthenticator.authenticate(request, response)).thenReturn(Optional.empty());","238","    doThrow(AuthenticationException.newBuilder().setSource(Source.external(newBasicIdentityProvider(\"failing\"))).setPublicMessage(\"Token id hasn't been found\").build())","239","      .when(jwtHttpHandler).validateToken(request, response);","240","","241","    assertThat(underTest.initUserSession(request, response)).isFalse();","242","","243","    verify(response).sendRedirect(\"\/sonarqube\/sessions\/unauthorized?message=Token+id+hasn%27t+been+found\");","244","  }","245","","265","","266","  private static BaseIdentityProvider newBasicIdentityProvider(String name) {","267","    BaseIdentityProvider mock = mock(BaseIdentityProvider.class);","268","    when(mock.getName()).thenReturn(name);","269","    return mock;","270","  }"],"delete":[]}]}},"aac58f3d481f23639a900489cd52857c0f16b1b2":{"changes":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/project\/history.html.erb":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/project\/history.html.erb":[{"add":["145","          <%= image_tag \"event_profile.png\", :alt => message('project_history.col.profile') + \": \" + profile_event.name if profile_event -%>"],"delete":["145","          <%= image_tag \"event_profile.png\", :alt => message('project_history.col.profile') + \": \" + profile_event.description_text if profile_event -%>"]}]}},"9e553274fbe228c06b92527ace1446d08ee244c3":{"changes":{"sonar-core\/src\/test\/java\/org\/sonar\/core\/issue\/tracking\/TrackerTest.java":"MODIFY","sonar-core\/src\/main\/java\/org\/sonar\/core\/issue\/tracking\/Tracker.java":"MODIFY"},"diff":{"sonar-core\/src\/test\/java\/org\/sonar\/core\/issue\/tracking\/TrackerTest.java":[{"add":["43","  public static final RuleKey RULE_MISSING_PACKAGE_INFO = RuleKey.of(\"java\", \"MissingPackageInfo\");","435","  @Test","436","  public void match_issues_with_same_rule_key_on_project_level() {","437","    FakeInput baseInput = new FakeInput();","438","    Issue base1 = baseInput.createIssue(RULE_MISSING_PACKAGE_INFO, \"[com.test:abc] Missing package-info.java in package.\");","439","    Issue base2 = baseInput.createIssue(RULE_MISSING_PACKAGE_INFO, \"[com.test:abc\/def] Missing package-info.java in package.\");","440","","441","    FakeInput rawInput = new FakeInput();","442","    Issue raw1 = rawInput.createIssue(RULE_MISSING_PACKAGE_INFO, \"[com.test:abc\/def] Missing package-info.java in package.\");","443","    Issue raw2 = rawInput.createIssue(RULE_MISSING_PACKAGE_INFO, \"[com.test:abc] Missing package-info.java in package.\");","444","","445","    Tracking<Issue, Issue> tracking = tracker.trackNonClosed(rawInput, baseInput);","446","    assertThat(tracking.getUnmatchedBases()).hasSize(0);","447","    assertThat(tracking.baseFor(raw1)).isEqualTo(base2);","448","    assertThat(tracking.baseFor(raw2)).isEqualTo(base1);","449","  }","450",""],"delete":[]}],"sonar-core\/src\/main\/java\/org\/sonar\/core\/issue\/tracking\/Tracker.java":[{"add":["37","    \/\/ 1. match by rule, line, line hash and message","38","    match(tracking, LineAndLineHashAndMessage::new);","39","","40","    \/\/ 2. match issues with same rule, same line and same line hash, but not necessarily with same message","43","    \/\/ 3. detect code moves by comparing blocks of codes","46","    \/\/ 4. match issues with same rule, same message and same line hash","49","    \/\/ 5. match issues with same rule, same line and same message","52","    \/\/ 6. match issues with same rule and same line hash but different line and different message."],"delete":["37","    \/\/ 1. match issues with same rule, same line and same line hash, but not necessarily with same message","40","    \/\/ 2. detect code moves by comparing blocks of codes","43","    \/\/ 3. match issues with same rule, same message and same line hash","46","    \/\/ 4. match issues with same rule, same line and same message","49","    \/\/ 5. match issues with same rule and same line hash but different line and different message."]}]}},"8be4454cd37014235a372dba54caea9ae25a5722":{"changes":{"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/TrackerExecution.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/TrackerExecutionTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/issue\/IssueChangeDao.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/issue\/IssueChangeDaoTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/issue\/IssueChangeMapper.xml":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/ComponentIssuesLoader.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/issue\/IssueTesting.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/ComponentIssuesLoaderTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/issue\/IssueChangeMapper.java":"MODIFY"},"diff":{"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/TrackerExecution.java":[{"add":["69","    componentIssuesLoader.loadLatestDiffChangesForReopeningOfClosedIssues(matchesClosedIssues);"],"delete":["69","    componentIssuesLoader.loadChanges(matchesClosedIssues);"]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/TrackerExecutionTest.java":[{"add":["141","    verify(componentIssuesLoader).loadLatestDiffChangesForReopeningOfClosedIssues(mappedClosedIssues);"],"delete":["141","    verify(componentIssuesLoader).loadChanges(mappedClosedIssues);"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/issue\/IssueChangeDao.java":[{"add":["24","import org.apache.ibatis.session.ResultHandler;","32","import static org.sonar.db.DatabaseUtils.executeLargeInputsWithoutOutput;","55","  public void scrollDiffChangesOfIssues(DbSession dbSession, Collection<String> issueKeys, ResultHandler<IssueChangeDto> handler) {","56","    if (issueKeys.isEmpty()) {","57","      return;","58","    }","59","","60","    executeLargeInputsWithoutOutput(issueKeys, issueKeySubList -> mapper(dbSession).scrollDiffChangesOfIssues(issueKeySubList, handler));","61","  }","62",""],"delete":[]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/issue\/IssueChangeDaoTest.java":[{"add":["21","import java.util.ArrayList;","24","import java.util.stream.Stream;","25","import org.apache.ibatis.session.ResultContext;","26","import org.apache.ibatis.session.ResultHandler;","34","import static com.google.common.collect.ImmutableList.of;","191","  @Test","192","  public void scrollDiffChangesOfIssues_scrolls_only_diff_changes_of_selected_issues() {","193","    IssueDto issue1 = db.issues().insertIssue();","194","    IssueChangeDto diffChange1 = db.issues().insertChange(issue1, t -> t.setChangeType(TYPE_FIELD_CHANGE));","195","    db.issues().insertChange(issue1, t -> t.setChangeType(TYPE_COMMENT));","196","    IssueDto issue2 = db.issues().insertIssue();","197","    IssueChangeDto diffChange2 = db.issues().insertChange(issue2, t -> t.setChangeType(TYPE_FIELD_CHANGE));","198","    db.issues().insertChange(issue2, t -> t.setChangeType(TYPE_COMMENT));","199","    IssueDto issue3 = db.issues().insertIssue();","200","    IssueChangeDto diffChange31 = db.issues().insertChange(issue3, t -> t.setChangeType(TYPE_FIELD_CHANGE));","201","    IssueChangeDto diffChange32 = db.issues().insertChange(issue3, t -> t.setChangeType(TYPE_FIELD_CHANGE));","202","    db.issues().insertChange(issue3, t -> t.setChangeType(TYPE_COMMENT));","203","    RecordingIssueChangeDtoResultHandler recordingHandler = new RecordingIssueChangeDtoResultHandler();","204","","205","    underTest.scrollDiffChangesOfIssues(db.getSession(), of(), recordingHandler.clear());","206","    assertThat(recordingHandler.getDtoKeys()).isEmpty();","207","    underTest.scrollDiffChangesOfIssues(db.getSession(), of(\"fooBarCacahuete\"), recordingHandler.clear());","208","    assertThat(recordingHandler.getDtoKeys()).isEmpty();","209","","210","    underTest.scrollDiffChangesOfIssues(db.getSession(), of(issue1.getKee()), recordingHandler.clear());","211","    assertThat(recordingHandler.getDtoKeys()).containsOnly(diffChange1.getKey());","212","","213","    underTest.scrollDiffChangesOfIssues(db.getSession(), of(issue2.getKee()), recordingHandler.clear());","214","    assertThat(recordingHandler.getDtoKeys()).containsOnly(diffChange2.getKey());","215","","216","    underTest.scrollDiffChangesOfIssues(db.getSession(), of(issue1.getKee(), issue3.getKee()), recordingHandler.clear());","217","    assertThat(recordingHandler.getDtoKeys()).containsOnly(diffChange1.getKey(), diffChange31.getKey(), diffChange32.getKey());","218","  }","219","","220","  @Test","221","  public void scrollDiffChangesOfIssues_orders_changes_by_issue_and_then_creationDate() {","222","    IssueDto issue1 = db.issues().insertIssue();","223","    IssueChangeDto[] diffChanges = {","224","      db.issues().insertChange(issue1, t -> t.setChangeType(TYPE_FIELD_CHANGE).setCreatedAt(1L).setIssueChangeCreationDate(50L)),","225","      db.issues().insertChange(issue1, t -> t.setChangeType(TYPE_FIELD_CHANGE).setCreatedAt(2L).setIssueChangeCreationDate(20L)),","226","      db.issues().insertChange(issue1, t -> t.setChangeType(TYPE_FIELD_CHANGE).setCreatedAt(3L).setIssueChangeCreationDate(30L)),","227","      db.issues().insertChange(issue1, t -> t.setChangeType(TYPE_FIELD_CHANGE).setCreatedAt(4L).setIssueChangeCreationDate(80L)),","228","      db.issues().insertChange(issue1, t -> t.setChangeType(TYPE_FIELD_CHANGE).setCreatedAt(5L).setIssueChangeCreationDate(10L)),","229","    };","230","    RecordingIssueChangeDtoResultHandler recordingHandler = new RecordingIssueChangeDtoResultHandler();","231","    underTest.scrollDiffChangesOfIssues(db.getSession(), of(issue1.getKee()), recordingHandler.clear());","232","    assertThat(recordingHandler.getDtoKeys()).containsExactly(","233","      diffChanges[3].getKey(),","234","      diffChanges[0].getKey(),","235","      diffChanges[2].getKey(),","236","      diffChanges[1].getKey(),","237","      diffChanges[4].getKey());","238","  }","239","","240","  private static class RecordingIssueChangeDtoResultHandler implements ResultHandler<IssueChangeDto> {","241","    private final List<IssueChangeDto> dtos = new ArrayList<>();","242","","243","    @Override","244","    public void handleResult(ResultContext<? extends IssueChangeDto> resultContext) {","245","      dtos.add(resultContext.getResultObject());","246","    }","247","","248","    public RecordingIssueChangeDtoResultHandler clear() {","249","      dtos.clear();","250","      return this;","251","    }","252","","253","    public Stream<String> getDtoKeys() {","254","      return dtos.stream().map(IssueChangeDto::getKey);","255","    }","256","  }"],"delete":[]}],"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/issue\/IssueChangeMapper.xml":[{"add":["44","","45","  <select id=\"scrollDiffChangesOfIssues\" parameterType=\"map\" resultType=\"IssueChange\" fetchSize=\"${_scrollFetchSize}\" resultSetType=\"FORWARD_ONLY\">","46","    select","47","      <include refid=\"issueChangeColumns\"\/>","48","    from issue_changes c","49","    where","50","      c.change_type='diff'","51","      and c.issue_key in","52","      <foreach collection=\"issueKeys\" open=\"(\" close=\")\" item=\"key\" separator=\",\">","53","        #{key,jdbcType=VARCHAR}","54","      <\/foreach>","55","    order by","56","      c.issue_key,c.issue_change_creation_date desc","57","  <\/select>"],"delete":[]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/ComponentIssuesLoader.java":[{"add":["50","import static org.sonar.core.util.stream.MoreCollectors.uniqueIndex;","110","  \/**","111","   * Loads the most recent diff changes of the specified issues which contain the latest status and resolution of the","112","   * issue.","113","   *\/","114","  public void loadLatestDiffChangesForReopeningOfClosedIssues(Collection<DefaultIssue> issues) {","115","    if (issues.isEmpty()) {","116","      return;","117","    }","118","","119","    try (DbSession dbSession = dbClient.openSession(false)) {","120","      loadLatestDiffChangesForReopeningOfClosedIssues(dbSession, issues);","121","    }","122","  }","123","","124","  \/**","125","   * To be efficient both in term of memory and speed:","126","   * <ul>","127","   *   <li>only diff changes are loaded from DB, sorted by issue and then change creation date<\/li>","128","   *   <li>data from DB is streamed<\/li>","129","   *   <li>only the latest change(s) with status and resolution are added to the {@link DefaultIssue} objects<\/li>","130","   * <\/ul>","131","   *\/","132","  private void loadLatestDiffChangesForReopeningOfClosedIssues(DbSession dbSession, Collection<DefaultIssue> issues) {","133","    Map<String, DefaultIssue> issuesByKey = issues.stream().collect(uniqueIndex(DefaultIssue::key));","134","","135","    dbClient.issueChangeDao()","136","      .scrollDiffChangesOfIssues(dbSession, issuesByKey.keySet(), new ResultHandler<IssueChangeDto>() {","137","        private DefaultIssue currentIssue = null;","138","        private boolean previousStatusFound = false;","139","        private boolean previousResolutionFound = false;","140","","141","        @Override","142","        public void handleResult(ResultContext<? extends IssueChangeDto> resultContext) {","143","          IssueChangeDto issueChangeDto = resultContext.getResultObject();","144","          if (currentIssue == null || !currentIssue.key().equals(issueChangeDto.getIssueKey())) {","145","            currentIssue = issuesByKey.get(issueChangeDto.getIssueKey());","146","            previousStatusFound = false;","147","            previousResolutionFound = false;","148","          }","149","","150","          if (currentIssue != null) {","151","            FieldDiffs fieldDiffs = issueChangeDto.toFieldDiffs();","152","            boolean hasPreviousStatus = fieldDiffs.get(\"status\") != null;","153","            boolean hasPreviousResolution = fieldDiffs.get(\"resolution\") != null;","154","            if ((!previousStatusFound && hasPreviousStatus) || (!previousResolutionFound && hasPreviousResolution)) {","155","              currentIssue.addChange(fieldDiffs);","156","            }","157","            previousStatusFound |= hasPreviousStatus;","158","            previousResolutionFound |= hasPreviousResolution;","159","          }","160","        }","161","      });","162","  }","163","","184","    changeDtoByIssueKey.computeIfAbsent(i.key(), k -> emptyList())","185","      .forEach(c -> addChangeOrComment(i, c));","186","  }","187","","188","  private static void addChangeOrComment(DefaultIssue i, IssueChangeDto c) {","189","    switch (c.getChangeType()) {","190","      case IssueChangeDto.TYPE_FIELD_CHANGE:","191","        i.addChange(c.toFieldDiffs());","192","        break;","193","      case IssueChangeDto.TYPE_COMMENT:","194","        i.addComment(c.toComment());","195","        break;","196","      default:","197","        throw new IllegalStateException(\"Unknow change type: \" + c.getChangeType());","198","    }"],"delete":["97","  public void loadChanges(Collection<DefaultIssue> issues) {","98","    if (issues.isEmpty()) {","99","      return;","100","    }","101","","102","    try (DbSession dbSession = dbClient.openSession(false)) {","103","      loadChanges(dbSession, issues);","104","    }","105","  }","106","","139","    changeDtoByIssueKey.computeIfAbsent(i.key(), k -> emptyList()).forEach(c -> {","140","      switch (c.getChangeType()) {","141","        case IssueChangeDto.TYPE_FIELD_CHANGE:","142","          i.addChange(c.toFieldDiffs());","143","          break;","144","        case IssueChangeDto.TYPE_COMMENT:","145","          i.addComment(c.toComment());","146","          break;","147","        default:","148","          throw new IllegalStateException(\"Unknow change type: \" + c.getChangeType());","149","      }","150","    });"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/issue\/IssueTesting.java":[{"add":["28","import org.sonar.core.util.UuidFactoryFast;","77","      .setKey(UuidFactoryFast.getInstance().create())"],"delete":["76","      .setKey(\"uuid_\" + randomAlphabetic(10))"]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/ComponentIssuesLoaderTest.java":[{"add":["21","import com.google.common.collect.ImmutableList;","25","import java.util.ArrayList;","27","import java.util.Collections;","31","import java.util.stream.IntStream;","52","import static java.util.Collections.emptyList;","228","  @Test","229","  public void loadLatestDiffChangesForReopeningOfClosedIssues_does_not_query_DB_if_issue_list_is_empty() {","230","    DbClient dbClient = mock(DbClient.class);","231","    ComponentIssuesLoader underTest = new ComponentIssuesLoader(dbClient,","232","      null \/* not used in method *\/, null \/* not used in method *\/, newConfiguration(\"0\"), null \/* not used by method *\/);","233","","234","    underTest.loadLatestDiffChangesForReopeningOfClosedIssues(emptyList());","235","","236","    verifyZeroInteractions(dbClient, system2);","237","  }","238","","239","  @Test","240","  @UseDataProvider(\"statusOrResolutionFieldName\")","241","  public void loadLatestDiffChangesForReopeningOfClosedIssues_add_diff_change_with_most_recent_status_or_resolution(String statusOrResolutionFieldName) {","242","    ComponentDto project = dbTester.components().insertPublicProject();","243","    ComponentDto file = dbTester.components().insertComponent(ComponentTesting.newFileDto(project));","244","    RuleDefinitionDto rule = dbTester.rules().insert();","245","    IssueDto issue = dbTester.issues().insert(rule, project, file);","246","    dbTester.issues().insertChange(issue, t -> t.setChangeData(randomDiffWith(statusOrResolutionFieldName, \"val1\")).setIssueChangeCreationDate(5));","247","    dbTester.issues().insertChange(issue, t -> t.setChangeData(randomDiffWith(statusOrResolutionFieldName, \"val2\")).setIssueChangeCreationDate(20));","248","    dbTester.issues().insertChange(issue, t -> t.setChangeData(randomDiffWith(statusOrResolutionFieldName, \"val3\")).setIssueChangeCreationDate(13));","249","    ComponentIssuesLoader underTest = new ComponentIssuesLoader(dbClient,","250","      null \/* not used in method *\/, null \/* not used in method *\/, newConfiguration(\"0\"), null \/* not used by method *\/);","251","    DefaultIssue defaultIssue = new DefaultIssue().setKey(issue.getKey());","252","","253","    underTest.loadLatestDiffChangesForReopeningOfClosedIssues(ImmutableList.of(defaultIssue));","254","","255","    assertThat(defaultIssue.changes())","256","      .hasSize(1);","257","    assertThat(defaultIssue.changes())","258","      .extracting(t -> t.get(statusOrResolutionFieldName))","259","      .filteredOn(t -> hasValue(t, \"val2\"))","260","      .hasSize(1);","261","  }","262","","263","  @Test","264","  public void loadLatestDiffChangesForReopeningOfClosedIssues_add_single_diff_change_when_most_recent_status_and_resolution_is_the_same_diff() {","265","    ComponentDto project = dbTester.components().insertPublicProject();","266","    ComponentDto file = dbTester.components().insertComponent(ComponentTesting.newFileDto(project));","267","    RuleDefinitionDto rule = dbTester.rules().insert();","268","    IssueDto issue = dbTester.issues().insert(rule, project, file);","269","    dbTester.issues().insertChange(issue, t -> t.setChangeData(randomDiffWith(\"status\", \"valStatus1\")).setIssueChangeCreationDate(5));","270","    dbTester.issues().insertChange(issue, t -> t.setChangeData(randomDiffWith(\"status\", \"valStatus2\")).setIssueChangeCreationDate(19));","271","    dbTester.issues().insertChange(issue, t -> t.setChangeData(randomDiffWith(\"status\", \"valStatus3\", \"resolution\", \"valRes3\")).setIssueChangeCreationDate(20));","272","    dbTester.issues().insertChange(issue, t -> t.setChangeData(randomDiffWith(\"resolution\", \"valRes4\")).setIssueChangeCreationDate(13));","273","    ComponentIssuesLoader underTest = new ComponentIssuesLoader(dbClient,","274","      null \/* not used in method *\/, null \/* not used in method *\/, newConfiguration(\"0\"), null \/* not used by method *\/);","275","    DefaultIssue defaultIssue = new DefaultIssue().setKey(issue.getKey());","276","","277","    underTest.loadLatestDiffChangesForReopeningOfClosedIssues(ImmutableList.of(defaultIssue));","278","","279","    assertThat(defaultIssue.changes())","280","      .hasSize(1);","281","    assertThat(defaultIssue.changes())","282","      .extracting(t -> t.get(\"status\"))","283","      .filteredOn(t -> hasValue(t, \"valStatus3\"))","284","      .hasSize(1);","285","    assertThat(defaultIssue.changes())","286","      .extracting(t -> t.get(\"resolution\"))","287","      .filteredOn(t -> hasValue(t, \"valRes3\"))","288","      .hasSize(1);","289","  }","290","","291","  @Test","292","  public void loadLatestDiffChangesForReopeningOfClosedIssues_adds_2_diff_changes_if_most_recent_status_and_resolution_are_not_the_same_diff() {","293","    ComponentDto project = dbTester.components().insertPublicProject();","294","    ComponentDto file = dbTester.components().insertComponent(ComponentTesting.newFileDto(project));","295","    RuleDefinitionDto rule = dbTester.rules().insert();","296","    IssueDto issue = dbTester.issues().insert(rule, project, file);","297","    dbTester.issues().insertChange(issue, t -> t.setChangeData(randomDiffWith(\"status\", \"valStatus1\")).setIssueChangeCreationDate(5));","298","    dbTester.issues().insertChange(issue, t -> t.setChangeData(randomDiffWith(\"status\", \"valStatus2\", \"resolution\", \"valRes2\")).setIssueChangeCreationDate(19));","299","    dbTester.issues().insertChange(issue, t -> t.setChangeData(randomDiffWith(\"status\", \"valStatus3\")).setIssueChangeCreationDate(20));","300","    dbTester.issues().insertChange(issue, t -> t.setChangeData(randomDiffWith(\"resolution\", \"valRes4\")).setIssueChangeCreationDate(13));","301","    ComponentIssuesLoader underTest = new ComponentIssuesLoader(dbClient,","302","      null \/* not used in method *\/, null \/* not used in method *\/, newConfiguration(\"0\"), null \/* not used by method *\/);","303","    DefaultIssue defaultIssue = new DefaultIssue().setKey(issue.getKey());","304","","305","    underTest.loadLatestDiffChangesForReopeningOfClosedIssues(ImmutableList.of(defaultIssue));","306","","307","    assertThat(defaultIssue.changes())","308","      .hasSize(2);","309","    assertThat(defaultIssue.changes())","310","      .extracting(t -> t.get(\"status\"))","311","      .filteredOn(t -> hasValue(t, \"valStatus3\"))","312","      .hasSize(1);","313","    assertThat(defaultIssue.changes())","314","      .extracting(t -> t.get(\"resolution\"))","315","      .filteredOn(t -> hasValue(t, \"valRes2\"))","316","      .hasSize(1);","317","  }","318","","319","  private static boolean hasValue(@Nullable FieldDiffs.Diff t, String value) {","320","    if (t == null) {","321","      return false;","322","    }","323","    return (t.oldValue() == null || value.equals(t.oldValue())) && (t.newValue() == null || value.equals(t.newValue()));","324","  }","325","","326","  @DataProvider","327","  public static Object[][] statusOrResolutionFieldName() {","328","    return new Object[][] {","329","      {\"status\"},","330","      {\"resolution\"},","331","    };","332","  }","333","","334","  private static String randomDiffWith(String... fieldsAndValues) {","335","    Random random = new Random();","336","    List<Diff> diffs = new ArrayList<>();","337","    for (int i = 0; i < fieldsAndValues.length; i++) {","338","      int oldOrNew = random.nextInt(3);","339","      String value = fieldsAndValues[i + 1];","340","      diffs.add(new Diff(fieldsAndValues[i], oldOrNew <= 2 ? value : null, oldOrNew >= 2 ? value : null));","341","      i++;","342","    }","343","    IntStream.range(0, random.nextInt(5))","344","      .forEach(i -> diffs.add(new Diff(randomAlphabetic(10), random.nextBoolean() ? null : randomAlphabetic(11), random.nextBoolean() ? null : randomAlphabetic(12))));","345","    Collections.shuffle(diffs);","346","","347","    FieldDiffs res = new FieldDiffs();","348","    diffs.forEach(diff -> res.setDiff(diff.field, diff.oldValue, diff.newValue));","349","    return res.toEncodedString();","350","  }","351","","352","  private static final class Diff {","353","    private final String field;","354","    private final String oldValue;","355","    private final String newValue;","356","","357","    private Diff(String field, @Nullable String oldValue, @Nullable String newValue) {","358","      this.field = field;","359","      this.oldValue = oldValue;","360","      this.newValue = newValue;","361","    }","362","  }","363",""],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/issue\/IssueChangeMapper.java":[{"add":["24","import org.apache.ibatis.session.ResultHandler;","40","  List<IssueChangeDto> selectByIssuesAndType(@Param(\"issueKeys\") List<String> issueKeys, @Param(\"changeType\") String changeType);","41","","42","  \/**","43","   * Scrolls through all changes with type {@link IssueChangeDto#TYPE_FIELD_CHANGE diff}, sorted by issue key and","44","   * then change creation date.","45","   *\/","46","  void scrollDiffChangesOfIssues(@Param(\"issueKeys\") List<String> issueKeys, ResultHandler<IssueChangeDto> handler);"],"delete":["39","  List<IssueChangeDto> selectByIssuesAndType(@Param(\"issueKeys\") List<String> issueKeys,","40","    @Param(\"changeType\") String changeType);","43",""]}]}},"f181b82977897bd09c3cb9106c98ecd7369550ad":{"changes":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/TestExecutionAndCoveragePublisher.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/report\/TestExecutionAndCoveragePublisherTest.java":"ADD"},"diff":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/TestExecutionAndCoveragePublisher.java":[{"add":["38","import org.sonar.scanner.scan.branch.BranchConfiguration;","47","  private final BranchConfiguration branchConfiguration;","49","  public TestExecutionAndCoveragePublisher(InputComponentStore componentStore, TestPlanBuilder testPlanBuilder, BranchConfiguration branchConfiguration) {","52","    this.branchConfiguration = branchConfiguration;","57","    if (branchConfiguration.isShortLivingBranch()) {","58","      return;","59","    }"],"delete":["47","  public TestExecutionAndCoveragePublisher(InputComponentStore componentStore, TestPlanBuilder testPlanBuilder) {"]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/report\/TestExecutionAndCoveragePublisherTest.java":[{"add":[],"delete":[]}]}},"2b47fe0ad27f117db8ff6736bab7ec0c37ede256":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/account\/templates\/account-tokens.hbs":"MODIFY","server\/sonar-web\/src\/main\/less\/init\/type.less":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/account\/templates\/account-tokens.hbs":[{"add":["73","          <div class=\"monospaced text-success\">{{newToken.token}}<\/div>"],"delete":["73","          <code class=\"text-success\">{{newToken.token}}<\/code>"]}],"server\/sonar-web\/src\/main\/less\/init\/type.less":[{"add":["140","","141","","142","\/\/ Font","143","","144",".monospaced {","145","  line-height: @monoLineHeight;","146","  font-family: @monoFontFamily;","147","  font-size: @monoFontSize;","148","}"],"delete":[]}]}},"cb3209eefa3f943524effb7b0d4f03c4bf9a45f6":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/code\/utils.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/code\/__tests__\/__snapshots__\/utils-test.tsx.snap":"ADD","server\/sonar-web\/src\/main\/js\/apps\/code\/__tests__\/utils-test.tsx":"ADD"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/code\/utils.ts":[{"add":["101","export function getCodeMetrics(","102","  qualifier: string,","103","  branchLike?: T.BranchLike,","104","  options: { includeQGStatus?: boolean } = {}","105",") {","107","    const metrics = [...PORTFOLIO_METRICS];","108","    return options.includeQGStatus ? metrics.concat('alert_status') : metrics;","151","  const metrics = getCodeMetrics(qualifier, branchLike, { includeQGStatus: true });","216","  const metrics = getCodeMetrics(qualifier, branchLike, { includeQGStatus: true });"],"delete":["101","export function getCodeMetrics(qualifier: string, branchLike?: T.BranchLike) {","103","    return [...PORTFOLIO_METRICS];","146","  const metrics = getCodeMetrics(qualifier, branchLike);","147","  if (['VW', 'SVW'].includes(qualifier)) {","148","    metrics.push('alert_status');","149","  }","214","  const metrics = getCodeMetrics(qualifier, branchLike);"]}],"server\/sonar-web\/src\/main\/js\/apps\/code\/__tests__\/__snapshots__\/utils-test.tsx.snap":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/code\/__tests__\/utils-test.tsx":[{"add":[],"delete":[]}]}},"5f0c85650faf2514b1c74fe6389a80574a415e39":{"changes":{"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/__tests__\/HeaderMeta-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/HeaderMeta.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/__tests__\/__snapshots__\/HeaderMeta-test.tsx.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/__tests__\/HeaderMeta-test.tsx":[{"add":["32","it('should render correctly for a main project branch', () => {","33","  const wrapper = shallowRender({","34","    branchLike: mockBranch({ isMain: true })","35","  });","36","  expect(wrapper).toMatchSnapshot();","37","});","38",""],"delete":[]}],"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/HeaderMeta.tsx":[{"add":["92","  const branch = isBranch(branchLike) && !branchLike.isMain ? branchLike.name : undefined;","93","","103","        branch","111","        branch"],"delete":["101","        branch: isBranch(branchLike) ? branchLike.name : undefined","109","        branch: isBranch(branchLike) ? branchLike.name : undefined"]}],"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/__tests__\/__snapshots__\/HeaderMeta-test.tsx.snap":[{"add":["45","exports[`should render correctly for a main project branch 1`] = `","46","<Fragment>","47","  <div","48","    className=\"display-flex-center flex-0 small\"","49","  >","50","    <span","51","      className=\"header-meta-warnings\"","52","    >","53","      <ComponentNavWarnings","54","        warnings={","55","          Array [","56","            \"ERROR_1\",","57","            \"ERROR_2\",","58","          ]","59","        }","60","      \/>","61","    <\/span>","62","    <span","63","      className=\"spacer-left nowrap note\"","64","    >","65","      <DateTimeFormatter","66","        date=\"2017-01-02T00:00:00.000Z\"","67","      \/>","68","    <\/span>","69","    <span","70","      className=\"spacer-left nowrap note\"","71","    >","72","      version 0.0.1","73","    <\/span>","74","    <Connect(HomePageSelect)","75","      className=\"spacer-left\"","76","      currentPage={","77","        Object {","78","          \"branch\": undefined,","79","          \"component\": \"my-project\",","80","          \"type\": \"PROJECT\",","81","        }","82","      }","83","    \/>","84","  <\/div>","85","<\/Fragment>","86","`;","87",""],"delete":[]}]}},"5e93a5a3e81c5285e354d4632024c31581bd7ae5":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/ActivationFormModal.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/CustomRuleFormModal.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/RuleDetailsParameters.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/RuleDetailsDescription.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/ActivationFormModal.tsx":[{"add":["20","import { sanitize } from 'dompurify';","228","                    \/\/ eslint-disable-next-line react\/no-danger","229","                    dangerouslySetInnerHTML={{ __html: sanitize(param.htmlDesc || '') }}"],"delete":["227","                    \/\/ Safe: defined by rule creator (instance admin?)","228","                    dangerouslySetInnerHTML={{ __html: param.htmlDesc || '' }}"]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/CustomRuleFormModal.tsx":[{"add":["19","import { sanitize } from 'dompurify';","307","        \/\/ eslint-disable-next-line react\/no-danger","308","        dangerouslySetInnerHTML={{ __html: sanitize(param.htmlDesc || '') }}"],"delete":["306","        \/\/ Safe: defined by rule creator (instance admin?)","307","        dangerouslySetInnerHTML={{ __html: param.htmlDesc || '' }}"]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/RuleDetailsParameters.tsx":[{"add":["19","import { sanitize } from 'dompurify';","32","        <p","33","          \/\/ eslint-disable-next-line react\/no-danger","34","          dangerouslySetInnerHTML={{ __html: sanitize(param.htmlDesc || '') }}"],"delete":["31","        <p \/\/ Safe: defined by rule creator (instance admin?)","32","          dangerouslySetInnerHTML={{ __html: param.htmlDesc || '' }}"]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/RuleDetailsDescription.tsx":[{"add":["19","import { sanitize } from 'dompurify';","115","          \/\/ eslint-disable-next-line react\/no-danger","116","          dangerouslySetInnerHTML={{ __html: sanitize(this.props.ruleDetails.htmlNote) }}","197","            \/\/ eslint-disable-next-line react\/no-danger","198","            dangerouslySetInnerHTML={{ __html: sanitize(ruleDetails.htmlDesc || '') }}"],"delete":["114","          \/\/ Safe: defined by rule creator (instance admin?)","115","          dangerouslySetInnerHTML={{ __html: this.props.ruleDetails.htmlNote }}","196","            \/\/ Safe: defined by rule creator (instance admin?)","197","            dangerouslySetInnerHTML={{ __html: ruleDetails.htmlDesc || '' }}"]}]}},"4546b5560c8786816eceb7ded11254a5518f49fa":{"changes":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/rule\/Checks.java":"MODIFY"},"diff":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/rule\/Checks.java":[{"add":["112","    return addAnnotatedChecks((Iterable) Arrays.asList(checkClassesOrObjects));","115","  \/**","116","   * @deprecated since 5.2 use {@link #addAnnotatedChecks(Iterable)}","117","   *\/","118","  @Deprecated","120","    return addAnnotatedChecks((Iterable) checkClassesOrObjects);","121","  }","122","","123","  public Checks<C> addAnnotatedChecks(Iterable checkClassesOrObjects) {"],"delete":["112","    return addAnnotatedChecks(Arrays.asList(checkClassesOrObjects));"]}]}},"b2ca3f63d2a6ab89aba6041f133ed6067b8f81e5":{"changes":{"server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/queue\/InternalCeQueueImpl.java":"MODIFY","server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/queue\/InternalCeQueueImplTest.java":"MODIFY"},"diff":{"server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/queue\/InternalCeQueueImpl.java":[{"add":["54","  private static final int MAX_EXECUTION_COUNT = 1;"],"delete":["54","  private static final int MAX_EXECUTION_COUNT = 2;"]}],"server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/queue\/InternalCeQueueImplTest.java":[{"add":["21","import com.google.common.collect.ImmutableSet;","52","import static com.google.common.base.Preconditions.checkArgument;","53","import static java.util.Arrays.asList;","54","import static org.assertj.core.api.Assertions.assertThat;","55","import static org.mockito.Mockito.mock;","56","import static org.mockito.Mockito.when;","57","import static org.sonar.ce.container.ComputeEngineStatus.Status.STARTED;","58","import static org.sonar.ce.container.ComputeEngineStatus.Status.STOPPING;","354","  public void peek_ignores_pending_tasks_with_executionCount_equal_to_1() {","362","    assertThat(underTest.peek(WORKER_UUID_1).isPresent()).isFalse();","425","    insertInProgress(\"u3\", WORKER_UUID_1, 1); \/\/ will be reset but won't be picked because worn out","426","    insertPending(\"u4\", WORKER_UUID_1, 0); \/\/ will be picked","429","    assertThat(ceTask.get().getUuid()).isEqualTo(\"u4\");","436","    insertInProgress(\"u3\", WORKER_UUID_1, 1); \/\/ won't be picked because worn out","440","    assertThat(ceTask.get().getUuid()).isEqualTo(\"u4\");","545","  public void cancelWornOuts_cancels_pending_tasks_with_executionCount_greater_or_equal_to_1() {","558","    verifyCanceled(u2);"],"delete":["21","import static com.google.common.base.Preconditions.checkArgument;","22","import static java.util.Arrays.asList;","23","import static org.assertj.core.api.Assertions.assertThat;","24","import static org.mockito.Mockito.mock;","25","import static org.mockito.Mockito.when;","26","import static org.sonar.ce.container.ComputeEngineStatus.Status.STARTED;","27","import static org.sonar.ce.container.ComputeEngineStatus.Status.STOPPING;","28","","34","","36","","61","import com.google.common.collect.ImmutableSet;","357","  public void peek_peeks_pending_tasks_with_executionCount_equal_to_1_and_increases_it() {","365","    assertThat(underTest.peek(WORKER_UUID_1).get().getUuid()).isEqualTo(\"uuid\");","366","    assertThat(db.getDbClient().ceQueueDao().selectByUuid(session, \"uuid\").get().getExecutionCount()).isEqualTo(2);","429","    insertPending(\"u3\", WORKER_UUID_1, 0); \/\/ will be picked first","430","    insertInProgress(\"u4\", WORKER_UUID_1, 1); \/\/ will be reset and picked on second call only","433","    assertThat(ceTask.get().getUuid()).isEqualTo(\"u3\");","434","","435","    \/\/ remove first task and do another peek: will pick the reset task since it's now the oldest one","436","    underTest.remove(ceTask.get(), CeActivityDto.Status.SUCCESS, null, null);","437","    assertThat(underTest.peek(WORKER_UUID_1).get().getUuid()).isEqualTo(\"u4\");","444","    insertInProgress(\"u3\", WORKER_UUID_1, 1); \/\/ will be reset and picked","448","    assertThat(ceTask.get().getUuid()).isEqualTo(\"u3\");","449","","450","    \/\/ remove first task and do another peek: will pick the reset task since it's now the oldest one","451","    underTest.remove(ceTask.get(), CeActivityDto.Status.SUCCESS, null, null);","452","    assertThat(underTest.peek(WORKER_UUID_1).get().getUuid()).isEqualTo(\"u4\");","557","  public void cancelWornOuts_cancels_pending_tasks_with_executionCount_greater_or_equal_to_2() {","570","    verifyUnmodified(u2);"]}]}},"583e42c16797bf57162ebd502e12241d8765a8fc":{"changes":{"server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/ui\/ws\/ComponentActionTest\/return_component_info_when_file_on_branch.json":"ADD","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/ui\/ws\/ComponentActionTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ui\/ws\/ComponentAction.java":"MODIFY","server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/ui\/ws\/ComponentActionTest\/return_component_info_when_file_on_master.json":"ADD","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/ws\/SearchResponseFormat.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/ui\/ws\/ComponentActionTest\/return_component_info_when_file_on_branch.json":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/ui\/ws\/ComponentActionTest.java":[{"add":["221","  public void return_component_info_when_file_on_master() throws Exception {","222","    init();","223","    OrganizationDto organization = dbTester.organizations().insertForKey(\"my-org2\");","224","    ComponentDto main = componentDbTester.insertMainBranch(organization, p -> p.setName(\"Sample\"), p -> p.setDbKey(\"sample\"));","225","    userSession.addProjectPermission(UserRole.USER, main);","226","","227","    ComponentDto dirDto = componentDbTester.insertComponent(newDirectory(main, \"src\"));","228","","229","    ComponentDto fileDto = componentDbTester.insertComponent(newFileDto(main, dirDto)","230","      .setUuid(\"abcd\")","231","      .setName(\"Main.xoo\")","232","      .setDbKey(\"sample:src\/Main.xoo\"));","233","","234","    executeAndVerify(fileDto.getDbKey(), \"return_component_info_when_file_on_master.json\");","235","  }","236","","237","  @Test","238","  public void return_component_info_when_file_on_branch() throws Exception {","239","    init();","240","    OrganizationDto organization = dbTester.organizations().insertForKey(\"my-org2\");","241","    ComponentDto project = componentDbTester.insertMainBranch(organization, p -> p.setName(\"Sample\"), p -> p.setDbKey(\"sample\"));","242","    ComponentDto branch = componentDbTester.insertProjectBranch(project, b -> b.setKey(\"feature1\"));","243","    userSession.addProjectPermission(UserRole.USER, project);","244","","245","    ComponentDto dirDto = componentDbTester.insertComponent(newDirectory(branch, \"src\"));","246","","247","    ComponentDto fileDto = componentDbTester.insertComponent(newFileDto(branch, dirDto)","248","      .setUuid(\"abcd\")","249","      .setName(\"Main.xoo\")","250","      .setDbKey(\"sample:src\/Main.xoo\"));","251","","252","    String json = ws.newRequest()","253","      .setParam(\"componentKey\", fileDto.getDbKey())","254","      .setParam(\"branch\", branch.getBranch())","255","      .execute()","256","      .getInput();","257","    verify(json, \"return_component_info_when_file_on_branch.json\");","258","  }","259","","260","  @Test"],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ui\/ws\/ComponentAction.java":[{"add":["71","import static org.sonar.server.ws.KeyExamples.KEY_BRANCH_EXAMPLE_001;","77","  static final String PARAM_BRANCH = \"branch\";","123","","124","    projectNavigation","125","      .createParam(PARAM_BRANCH)","126","      .setDescription(\"Branch key\")","127","      .setInternal(true)","128","      .setExampleValue(KEY_BRANCH_EXAMPLE_001);","135","      String branch = request.param(PARAM_BRANCH);","136","      ComponentDto component = componentFinder.getByKeyAndOptionalBranch(session, componentKey, branch);","292","        .prop(\"key\", c.getKey())"],"delete":["127","      ComponentDto component = componentFinder.getByKey(session, componentKey);","283","        .prop(\"key\", c.getDbKey())"]}],"server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/ui\/ws\/ComponentActionTest\/return_component_info_when_file_on_master.json":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/ws\/SearchResponseFormat.java":[{"add":["166","      issueBuilder.setProject(project.getKey());","169","        issueBuilder.setSubProject(subProject.getKey());"],"delete":["166","      issueBuilder.setProject(project.getDbKey());","169","        issueBuilder.setSubProject(subProject.getDbKey());"]}]}},"96ec2c5fe19cd8d5801bf833f8e384055422ae7d":{"changes":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY"},"diff":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["2469","overview.badges.marketing.description.TRK=This badge lets you advertise that you're using SonarCloud for code quality."],"delete":[]}]}},"49f29073c935c97e52d4f7d2a8e02e79391e3ff2":{"changes":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/filesystem\/FileIndexer.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/util\/ProgressReport.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/filesystem\/FileIndexer.java":[{"add":["102","    this.executorService = Executors.newFixedThreadPool(threads, new ThreadFactoryBuilder()","103","      .setNameFormat(\"FileIndexer-%d\")","104","      .setDaemon(true)","105","      .build());","116","    waitForTasksToComplete(progressReport);","125","  private void waitForTasksToComplete(ProgressReport report) {","132","        stopAsap(report);","135","        stopAsap(report);","141","  private void stopAsap(ProgressReport report) {","142","    report.stop(null);","143","    executorService.shutdownNow();","144","    try {","145","      executorService.awaitTermination(5, TimeUnit.SECONDS);","146","    } catch (InterruptedException e1) {","147","      \/\/ ignore, what's important is the original exception","148","    }","149","  }","150",""],"delete":["102","    this.executorService = Executors.newFixedThreadPool(threads, new ThreadFactoryBuilder().setNameFormat(\"FileIndexer-%d\").build());","113","    waitForTasksToComplete();","122","  private void waitForTasksToComplete() {"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/util\/ProgressReport.java":[{"add":["21","import javax.annotation.Nullable;","31","  private String stopMessage = null;","50","    if (stopMessage != null) {","51","      log(stopMessage);","52","    }","64","  public void stop(@Nullable String stopMessage) {"],"delete":["30","  private String stopMessage = \"\";","49","    log(stopMessage);","61","  public void stop(String stopMessage) {"]}]}},"2bc87f33684239adbfa746db78ca73290688adaa":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/controls\/Select.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/ProjectFacet.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/AssigneeFacet-test.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/controls\/SearchSelect.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/facet\/FacetFooter.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/TagFacet.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/controls\/__tests__\/__snapshots__\/SearchSelect-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/RuleFacet.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/controls\/__tests__\/SearchSelect-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/controls\/react-select.css":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/TagFacet.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/AssigneeFacet.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/BulkChangeModal.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/controls\/Select.tsx":[{"add":["51","    <ReactSelectAny {...props} clearRenderer={renderInput} clearable={clearable} ref={innerRef} \/>"],"delete":["51","    <ReactSelectAny {...props} clearable={clearable} clearRenderer={renderInput} ref={innerRef} \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/ProjectFacet.js":[{"add":["98","  handleSelect = (option \/*: { value: string } *\/) => {","100","    this.props.onChange({ [this.property]: uniq([...projects, option.value]) });"],"delete":["98","  handleSelect = (rule \/*: string *\/) => {","100","    this.props.onChange({ [this.property]: uniq([...projects, rule]) });"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/AssigneeFacet-test.js":[{"add":["95","  onSelect({ value: 'qux' });"],"delete":["95","  onSelect('qux');"]}],"server\/sonar-web\/src\/main\/js\/components\/controls\/SearchSelect.tsx":[{"add":["21","import Select, { Creatable } from '..\/..\/components\/controls\/Select';","31","  canCreate?: boolean;","34","  multi?: boolean;","36","  onSelect?: (option: Option) => void;","37","  onMultiSelect?: (options: Option[]) => void;","38","  promptTextCreator?: (label: string) => string;","79","  handleSearch = (query: string) => {","80","    \/\/ Ignore the result if the query changed","81","    const currentQuery = query;","82","    this.props.onSearch(currentQuery).then(","85","          this.setState(state => ({","86","            loading: false,","87","            options: state.query === currentQuery ? options : state.options","88","          }));","97","  };","99","  handleChange = (option: Option | Option[]) => {","100","    if (Array.isArray(option)) {","101","      if (this.props.onMultiSelect) {","102","        this.props.onMultiSelect(option);","103","      }","104","    } else if (this.props.onSelect) {","105","      this.props.onSelect(option);","106","    }","107","  };","114","      \/\/ `onInputChange` is called with an empty string after a user selects a value","115","      \/\/ in this case we shouldn't reset `options`, because it also resets select value :(","125","    const Component = this.props.canCreate ? Creatable : Select;","127","      <Component","131","        escapeClearsValue={false}","134","        multi={this.props.multi}","146","        promptTextCreator={this.props.promptTextCreator}"],"delete":["21","import Select from '..\/..\/components\/controls\/Select';","34","  onSelect: (value: string) => void;","75","  handleSearch = (query: string) =>","76","    this.props.onSearch(query).then(","79","          this.setState({ loading: false, options });","89","  handleChange = (option: Option) => this.props.onSelect(option.value);","92","    \/\/ `onInputChange` is called with an empty string after a user selects a value","93","    \/\/ in this case we shouldn't reset `options`, because it also resets select value :(","108","      <Select"]}],"server\/sonar-web\/src\/main\/js\/components\/facet\/FacetFooter.tsx":[{"add":["27","  onSelect: (option: Option) => void;"],"delete":["27","  onSelect: (value: string) => void;"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/TagFacet.js":[{"add":["80","  handleSelect = (option \/*: { value: string } *\/) => {","82","    this.props.onChange({ [this.property]: uniq([...tags, option.value]) });"],"delete":["80","  handleSelect = (tag \/*: string *\/) => {","82","    this.props.onChange({ [this.property]: uniq([...tags, tag]) });"]}],"server\/sonar-web\/src\/main\/js\/components\/controls\/__tests__\/__snapshots__\/SearchSelect-test.tsx.snap":[{"add":["7","  escapeClearsValue={false}"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/RuleFacet.js":[{"add":["82","  handleSelect = (option \/*: { value: string } *\/) => {","84","    this.props.onChange({ [this.property]: uniq([...rules, option.value]) });"],"delete":["82","  handleSelect = (rule \/*: string *\/) => {","84","    this.props.onChange({ [this.property]: uniq([...rules, rule]) });"]}],"server\/sonar-web\/src\/main\/js\/components\/controls\/__tests__\/SearchSelect-test.tsx":[{"add":["37","  expect(onSelect).lastCalledWith({ value: 'foo' });"],"delete":["37","  expect(onSelect).lastCalledWith('foo');"]}],"server\/sonar-web\/src\/main\/js\/components\/controls\/react-select.css":[{"add":["419","  padding: 1px 5px;"],"delete":["419","  padding: 1px 5px 3px;"]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/TagFacet.tsx":[{"add":["30","  handleSearch = (query: string) => {","31","    return getRuleTags({ organization: this.props.organization, ps: 50, q: query }).then(tags =>","34","  };","36","  handleSelect = (option: { value: string }) => {","37","    this.props.onChange({ tags: uniq([...this.props.values, option.value]) });","38","  };"],"delete":["30","  handleSearch = (query: string) =>","31","    getRuleTags({ organization: this.props.organization, ps: 50, q: query }).then(tags =>","35","  handleSelect = (tag: string) => this.props.onChange({ tags: uniq([...this.props.values, tag]) });"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/AssigneeFacet.js":[{"add":["86","  handleSelect = (option \/*: { value: string } *\/) => {","88","    this.props.onChange({ assigned: true, [this.property]: uniq([...assignees, option.value]) });"],"delete":["86","  handleSelect = (assignee \/*: string *\/) => {","88","    this.props.onChange({ assigned: true, [this.property]: uniq([...assignees, assignee]) });"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/BulkChangeModal.js":[{"add":["25","import Select from '..\/..\/..\/components\/controls\/Select';","51","  initialTags: Array<{ label:string, value: string }>,","60","  addTags?: Array<{ label: string, value: string }>,","61","  assignee?: { avatar?: string, label: string, value: string },","65","  removeTags?: Array<{ label: string, value: string }>,","86","    this.state = { initialTags: [], issues: [], loading: true, submitting: false, organization };","95","    ]).then(","96","      ([issues, tags]) => {","97","        if (this.mounted) {","98","          this.setState({","99","            initialTags: tags.map(tag => ({ label: tag, value: tag })),","100","            issues: issues.issues,","101","            loading: false,","102","            paging: issues.paging","103","          });","104","        }","105","      },","106","      () => {}","107","    );","147","  handleAssigneeSearch = (query \/*: string *\/) => {","148","    return searchAssignees(query, this.state.organization);","149","  };","151","  handleAssigneeSelect = (assignee \/*: { avatar?: string, label: string, value: string } *\/) => {","155","  handleTagsSearch = (query \/*: string *\/) => {","156","    return searchIssueTags({ organization: this.state.organization, q: query }).then(tags =>","157","      tags.map(tag => ({ label: tag, value: tag }))","158","    );","159","  };","160","","161","  handleTagsSelect = (field \/*: string *\/) => (","162","    options \/*: Array<{ label: string, value: string }> *\/","163","  ) => {","164","    this.setState({ [field]: options });","165","  };","166","","185","    \/* eslint-disable camelcase *\/","188","        add_tags: this.state.addTags && this.state.addTags.map(t => t.value).join(),","189","        assign: this.state.assignee && this.state.assignee.value,","191","        do_transition: this.state.transition,","192","        remove_tags: this.state.removeTags && this.state.removeTags.map(t => t.value).join(),","193","        sendNotifications: this.state.notifications,","194","        set_severity: this.state.severity,","195","        set_type: this.state.type","200","    \/* eslint-enable camelcase *\/","336","        options={options}","365","        options={options}","376","    const { initialTags } = this.state;","379","    if (initialTags == null || affected === 0) {","384","      <SearchSelect","385","        canCreate={allowCreate}","386","        defaultOptions={this.state.initialTags}","388","        minimumQueryLength={0}","390","        onMultiSelect={this.handleTagsSelect(field)}","391","        onSearch={this.handleTagsSearch}","393","        renderOption={this.renderAssigneeOption}","394","        resetOnBlur={false}"],"delete":["25","import Select, { Creatable } from '..\/..\/..\/components\/controls\/Select';","57","  tags?: Array<string>,","60","  addTags?: Array<string>,","61","  assignee?: string,","65","  removeTags?: Array<string>,","86","    this.state = { issues: [], loading: true, submitting: false, organization };","95","    ]).then(([issues, tags]) => {","96","      if (this.mounted) {","97","        this.setState({","98","          issues: issues.issues,","99","          loading: false,","100","          paging: issues.paging,","101","          tags","102","        });","103","      }","104","    });","144","  handleAssigneeSearch = (query \/*: string *\/) => searchAssignees(query, this.state.organization);","146","  handleAssigneeSelect = (assignee \/*: string *\/) => {","166","  handleMultiSelectFieldChange = (field \/*: string *\/) => (","167","    options \/*: Array<{ value: string }> *\/","168","  ) => {","169","    this.setState({ [field]: options.map(option => option.value) });","170","  };","171","","176","        assign: this.state.assignee,","177","        set_type: this.state.type,","178","        set_severity: this.state.severity,","179","        add_tags: this.state.addTags && this.state.addTags.join(),","180","        remove_tags: this.state.removeTags && this.state.removeTags.join(),","181","        do_transition: this.state.transition,","183","        sendNotifications: this.state.notifications","322","        options={options}","351","        options={options}","365","    if (this.state.tags == null || affected === 0) {","369","    const Component = allowCreate ? Creatable : Select;","370","","371","    const options = [...this.state.tags, ...(this.state[field] || [])].map(tag => ({","372","      label: tag,","373","      value: tag","374","    }));","375","","377","      <Component","378","        clearable={false}","381","        onChange={this.handleMultiSelectFieldChange(field)}","382","        options={options}","384","        searchable={true}"]}]}},"1361ba5fb9d1bf5f98cba5feff9227f177a44e94":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/ws\/SearchAction.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/index\/IssueIndex.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/index\/IssueIndexFacetsTest.java":"MODIFY","\/dev\/null":"DELETE","sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/issues\/IssuesService.java":"MODIFY","plugins\/sonar-xoo-plugin\/src\/main\/java\/org\/sonar\/xoo\/scm\/XooBlameCommand.java":"MODIFY","plugins\/sonar-xoo-plugin\/build.gradle":"MODIFY","sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/issues\/SearchRequest.java":"MODIFY","plugins\/sonar-xoo-plugin\/src\/test\/java\/org\/sonar\/xoo\/scm\/XooBlameCommandTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionComponentsTest.java":"MODIFY","sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/issue\/IssuesWsParameters.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/ws\/SearchAction.java":[{"add":["69","import static org.sonar.api.server.ws.WebService.Param.FACETS;","88","import static org.sonarqube.ws.client.issue.IssuesWsParameters.DEPRECATED_PARAM_AUTHORS;","96","import static org.sonarqube.ws.client.issue.IssuesWsParameters.PARAM_AUTHOR;","146","    DEPRECATED_PARAM_AUTHORS,","147","    PARAM_AUTHOR,","195","        new Change(\"7.7\", format(\"Value '%s' in parameter '%s' is deprecated, please use '%s' instead\", DEPRECATED_PARAM_AUTHORS, FACETS, PARAM_AUTHOR)),","196","        new Change(\"7.6\", format(\"The use of module keys in parameter '%s' is deprecated\", PARAM_COMPONENT_KEYS)),","212","    action.createParam(FACETS)","266","    action.createParam(DEPRECATED_PARAM_AUTHORS)","267","      .setDeprecatedSince(\"7.7\")","268","      .setDescription(\"This parameter is deprecated, please use '%s' instead\", PARAM_AUTHOR)","270","    action.createParam(PARAM_AUTHOR)","271","      .setDescription(\"SCM accounts. To set several values, the parameter must be called once for each value.\")","272","      .setExampleValue(\"author=torvalds@linux-foundation.org&author=linux@fondation.org\");","458","        requestedFacets.remove(PARAM_AUTHOR);","459","        requestedFacets.remove(DEPRECATED_PARAM_AUTHORS);","532","      .setAuthors(request.hasParam(PARAM_AUTHOR) ? request.multiParam(PARAM_AUTHOR) : request.paramAsStrings(DEPRECATED_PARAM_AUTHORS))","544","      .setFacets(request.paramAsStrings(FACETS))"],"delete":["94","import static org.sonarqube.ws.client.issue.IssuesWsParameters.PARAM_AUTHORS;","144","    PARAM_AUTHORS,","192","        new Change(\"7.6\", String.format(\"The use of module keys in parameter '%s' is deprecated\", PARAM_COMPONENT_KEYS)),","208","    action.createParam(Param.FACETS)","262","    action.createParam(PARAM_AUTHORS)","263","      .setDescription(\"Comma-separated list of SCM accounts\")","450","        requestedFacets.remove(PARAM_AUTHORS);","523","      .setAuthors(request.paramAsStrings(PARAM_AUTHORS))","535","      .setFacets(request.paramAsStrings(Param.FACETS))"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionTest.java":[{"add":["78","import static java.util.Collections.singletonList;","166","          simon.getLogin(), \"John\", 42, \"a227e508d6646b55a086ee11d63b21e9\", asList(\"bug\", \"owasp\"), formatDateTime(issue.getIssueCreationDate()),","167","          formatDateTime(issue.getIssueUpdateDate())));","582","  public void search_by_author() {","583","    ComponentDto project = db.components().insertPublicProject();","584","    ComponentDto file = db.components().insertComponent(newFileDto(project, null));","585","    RuleDefinitionDto rule = db.rules().insert();","586","    IssueDto issue1 = db.issues().insert(rule, project, file, i -> i.setAuthorLogin(\"leia\"));","587","    IssueDto issue2 = db.issues().insert(rule, project, file, i -> i.setAuthorLogin(\"luke\"));","588","    IssueDto issue3 = db.issues().insert(rule, project, file, i -> i.setAuthorLogin(\"han, solo\"));","589","    indexPermissions();","590","    indexIssues();","591","","592","    SearchWsResponse response = ws.newRequest()","593","      .setMultiParam(\"author\", asList(\"leia\", \"han, solo\"))","594","      .setParam(FACETS, \"author\")","595","      .executeProtobuf(SearchWsResponse.class);","596","    assertThat(response.getIssuesList())","597","      .extracting(Issue::getKey)","598","      .containsExactlyInAnyOrder(issue1.getKey(), issue3.getKey());","599","    Common.Facet facet = response.getFacets().getFacetsList().get(0);","600","    assertThat(facet.getProperty()).isEqualTo(\"author\");","601","    assertThat(facet.getValuesList())","602","      .extracting(Common.FacetValue::getVal, Common.FacetValue::getCount)","603","      .containsExactlyInAnyOrder(","604","        tuple(\"leia\", 1L),","605","        tuple(\"luke\", 1L),","606","        tuple(\"han, solo\", 1L));","607","","608","    assertThat(ws.newRequest()","609","      .setMultiParam(\"author\", singletonList(\"unknown\"))","610","      .executeProtobuf(SearchWsResponse.class).getIssuesList())","611","        .isEmpty();","612","  }","613","","614","  @Test","615","  public void search_by_deprecated_authors_parameter() {","616","    ComponentDto project = db.components().insertPublicProject();","617","    ComponentDto file = db.components().insertComponent(newFileDto(project, null));","618","    RuleDefinitionDto rule = db.rules().insert();","619","    IssueDto issue1 = db.issues().insert(rule, project, file, i -> i.setAuthorLogin(\"leia\"));","620","    IssueDto issue2 = db.issues().insert(rule, project, file, i -> i.setAuthorLogin(\"luke\"));","621","    indexPermissions();","622","    indexIssues();","623","","624","    SearchWsResponse response = ws.newRequest()","625","      .setParam(\"authors\", \"leia\")","626","      .setParam(FACETS, \"authors\")","627","      .executeProtobuf(SearchWsResponse.class);","628","    assertThat(response.getIssuesList()).extracting(Issue::getKey).containsExactlyInAnyOrder(issue1.getKey());","629","    Common.Facet facet = response.getFacets().getFacetsList().get(0);","630","    assertThat(facet.getProperty()).isEqualTo(\"authors\");","631","    assertThat(facet.getValuesList())","632","      .extracting(Common.FacetValue::getVal, Common.FacetValue::getCount)","633","      .containsExactlyInAnyOrder(","634","        tuple(\"leia\", 1L),","635","        tuple(\"luke\", 1L));","636","","637","    \/\/ Deprecated parameter 'authors' will be ignored if new parameter 'author' is set","638","    assertThat(ws.newRequest()","639","      .setMultiParam(\"author\", singletonList(\"luke\"))","640","      \/\/ This parameter will be ignored","641","      .setParam(\"authors\", \"leia\")","642","      .executeProtobuf(SearchWsResponse.class).getIssuesList())","643","        .extracting(Issue::getKey)","644","        .containsExactlyInAnyOrder(issue2.getKey());","645","  }","646","","647","  @Test","852","      \"additionalFields\", \"asc\", \"assigned\", \"assignees\", \"authors\", \"author\", \"componentKeys\", \"componentRootUuids\", \"componentRoots\", \"componentUuids\", \"components\", \"branch\","],"delete":["165","          simon.getLogin(), \"John\", 42, \"a227e508d6646b55a086ee11d63b21e9\", asList(\"bug\", \"owasp\"), formatDateTime(issue.getIssueCreationDate()), formatDateTime(issue.getIssueUpdateDate())));","784","      \"additionalFields\", \"asc\", \"assigned\", \"assignees\", \"authors\", \"componentKeys\", \"componentRootUuids\", \"componentRoots\", \"componentUuids\", \"components\", \"branch\","]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/index\/IssueIndex.java":[{"add":["100","import static org.sonar.server.issue.index.IssueIndex.Facet.AUTHOR;","150","import static org.sonarqube.ws.client.issue.IssuesWsParameters.DEPRECATED_PARAM_AUTHORS;","153","import static org.sonarqube.ws.client.issue.IssuesWsParameters.PARAM_AUTHOR;","190","    AUTHORS(DEPRECATED_PARAM_AUTHORS, FIELD_ISSUE_AUTHOR_LOGIN, MAX_FACET_SIZE),","191","    AUTHOR(PARAM_AUTHOR, FIELD_ISSUE_AUTHOR_LOGIN, MAX_FACET_SIZE),","575","      addSimpleStickyFacetIfNeeded(options, stickyFacetBuilder, esSearch, AUTHOR, query.authors().toArray());","653","    return OptionalLong.of((long) actualValue);"],"delete":["151","import static org.sonarqube.ws.client.issue.IssuesWsParameters.PARAM_AUTHORS;","188","    AUTHORS(PARAM_AUTHORS, FIELD_ISSUE_AUTHOR_LOGIN, MAX_FACET_SIZE),","649","    return OptionalLong.of((long)actualValue);"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/index\/IssueIndexFacetsTest.java":[{"add":["325","  public void facets_on_author() {","326","    ComponentDto project = newPrivateProjectDto(newOrganizationDto());","327","    ComponentDto file = newFileDto(project, null);","328","","329","    indexIssues(","330","      newDoc(\"I1\", file).setAuthorLogin(\"steph\"),","331","      newDoc(\"I2\", file).setAuthorLogin(\"marcel\"),","332","      newDoc(\"I3\", file).setAuthorLogin(\"marcel\"),","333","      newDoc(\"I4\", file).setAuthorLogin(null));","334","","335","    assertThatFacetHasOnly(IssueQuery.builder(), \"author\", entry(\"steph\", 1L), entry(\"marcel\", 2L));","336","  }","337","","338","  @Test","339","  public void facets_on_deprecated_authors() {"],"delete":["325","  public void facets_on_authors() {"]}],"\/dev\/null":[{"add":[],"delete":[]}],"sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/issues\/IssuesService.java":[{"add":["149","        .setMediaType(MediaTypes.JSON)","150","      ).content();","194","        .setMediaType(MediaTypes.JSON)","195","      ).content();","212","        .setParam(\"author\", request.getAuthor())","224","        .setParam(\"cwe\", request.getCwe() == null ? null : request.getCwe().stream().collect(Collectors.joining(\",\")))","234","        .setParam(\"owaspTop10\", request.getOwaspTop10() == null ? null : request.getOwaspTop10().stream().collect(Collectors.joining(\",\")))","243","        .setParam(\"sansTop25\", request.getSansTop25() == null ? null : request.getSansTop25().stream().collect(Collectors.joining(\",\")))","248","        .setParam(\"types\", request.getTypes() == null ? null : request.getTypes().stream().collect(Collectors.joining(\",\"))),"],"delete":["149","        .setMediaType(MediaTypes.JSON)).content();","193","        .setMediaType(MediaTypes.JSON)).content();","242","        .setParam(\"types\", request.getTypes() == null ? null : request.getTypes().stream().collect(Collectors.joining(\",\")))","243","        .setParam(\"owaspTop10\", request.getOwaspTop10() == null ? null : request.getOwaspTop10().stream().collect(Collectors.joining(\",\")))","244","        .setParam(\"sansTop25\", request.getSansTop25() == null ? null : request.getSansTop25().stream().collect(Collectors.joining(\",\")))","245","        .setParam(\"cwe\", request.getCwe() == null ? null : request.getCwe().stream().collect(Collectors.joining(\",\"))),"]}],"plugins\/sonar-xoo-plugin\/src\/main\/java\/org\/sonar\/xoo\/scm\/XooBlameCommand.java":[{"add":["23","import java.io.FileReader;","27","import org.apache.commons.csv.CSVFormat;","28","import org.apache.commons.csv.CSVParser;","29","import org.apache.commons.csv.CSVRecord;","35","import static com.google.common.base.Preconditions.checkState;","36","import static java.util.stream.Collectors.toList;","37","import static org.apache.commons.lang.StringUtils.trimToNull;","38","","53","    File scmDataFile = new File(ioFile.getParentFile(), ioFile.getName() + SCM_EXTENSION);","59","      List<BlameLine> blame = readFile(scmDataFile);","65","","66","  private static List<BlameLine> readFile(File inputStream) throws IOException {","67","    try (CSVParser csvParser = CSVFormat.RFC4180","68","      .withIgnoreEmptyLines()","69","      .withIgnoreSurroundingSpaces()","70","      .parse(new FileReader(inputStream))) {","71","      List<CSVRecord> records = csvParser.getRecords();","72","      return records.stream()","73","        .map(XooBlameCommand::convertToBlameLine)","74","        .collect(toList());","75","    }","76","  }","77","","78","  private static BlameLine convertToBlameLine(CSVRecord csvRecord) {","79","    checkState(csvRecord.size() == 3, \"Not enough fields on line %s\", csvRecord);","80","    String revision = trimToNull(csvRecord.get(0));","81","    String author = trimToNull(csvRecord.get(1));","82","    BlameLine blameLine = new BlameLine().revision(revision).author(author);","83","    String dateStr = trimToNull(csvRecord.get(2));","84","    if (dateStr != null) {","85","      Date dateTime = DateUtils.parseDateTimeQuietly(dateStr);","86","      if (dateTime != null) {","87","        blameLine.date(dateTime);","88","      } else {","89","        \/\/ Will throw an exception, when date is not in format \"yyyy-MM-dd\"","90","        blameLine.date(DateUtils.parseDate(dateStr));","91","      }","92","    }","93","    return blameLine;","94","  }"],"delete":["24","import java.nio.charset.StandardCharsets;","25","import java.util.ArrayList;","28","import org.apache.commons.io.FileUtils;","29","import org.apache.commons.lang.StringUtils;","49","    File scmDataFile = new java.io.File(ioFile.getParentFile(), ioFile.getName() + SCM_EXTENSION);","55","      List<String> lines = FileUtils.readLines(scmDataFile, StandardCharsets.UTF_8);","56","      List<BlameLine> blame = new ArrayList<>(lines.size());","57","      int lineNumber = 0;","58","      for (String line : lines) {","59","        lineNumber++;","60","        if (StringUtils.isNotBlank(line)) {","61","          \/\/ revision,author,dateTime","62","          String[] fields = StringUtils.splitPreserveAllTokens(line, ',');","63","          if (fields.length < 3) {","64","            throw new IllegalStateException(\"Not enough fields on line \" + lineNumber);","65","          }","66","          String revision = StringUtils.trimToNull(fields[0]);","67","          String author = StringUtils.trimToNull(fields[1]);","68","          BlameLine blameLine = new BlameLine().revision(revision).author(author);","69","          String dateStr = StringUtils.trimToNull(fields[2]);","70","          if (dateStr != null) {","71","            Date dateTime = DateUtils.parseDateTimeQuietly(dateStr);","72","            if (dateTime != null) {","73","              blameLine.date(dateTime);","74","            } else {","75","              \/\/ Will throw an exception, when date is not in format \"yyyy-MM-dd\"","76","              blameLine.date(DateUtils.parseDate(dateStr));","77","            }","78","          }","79","          blame.add(blameLine);","80","        }","81","      }"]}],"plugins\/sonar-xoo-plugin\/build.gradle":[{"add":["8","  compile 'org.apache.commons:commons-csv'"],"delete":[]}],"sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/issues\/SearchRequest.java":[{"add":["37","  private List<String> author;","146","   * Example value: \"author=torvalds@linux-foundation.org&author=linux@fondation.org\"","148","  public SearchRequest setAuthor(List<String> author) {","149","    this.author = author;","150","    return this;","151","  }","152","","153","  public List<String> getAuthor() {","154","    return author;","155","  }","156","","157","  \/**","158","   * Example value: \"torvalds@linux-foundation.org\"","159","   * @deprecated since 7.7","160","   *\/","161","  @Deprecated","341","   *   <li>\"projects\"<\/li>","342","   *   <li>\"moduleUuids\"<\/li>","343","   *   <li>\"fileUuids\"<\/li>","344","   *   <li>\"assigned_to_me\"<\/li>","353","   *   <li>\"author\"<\/li>","413","   * @deprecated since 7.6","415","  @Deprecated"],"delete":["145","   * Example value: \"torvalds@linux-foundation.org\"","312","   *   <li>\"debt\"<\/li>","331","   *   <li>\"projectUuids\"<\/li>","334","   *   <li>\"assigned_to_me\"<\/li>","337","   *   <li>\"moduleUuids\"<\/li>","338","   *   <li>\"fileUuids\"<\/li>"]}],"plugins\/sonar-xoo-plugin\/src\/test\/java\/org\/sonar\/xoo\/scm\/XooBlameCommandTest.java":[{"add":["21","import java.io.File;","22","import java.io.IOException;","23","import java.util.Arrays;","39","import static java.util.Collections.singletonList;","77","","79","","84","","85","  @Test","86","  public void blame_containing_author_with_comma() throws IOException {","87","    File source = new File(baseDir, \"src\/foo.xoo\");","88","    FileUtils.write(source, \"sample content\");","89","    File scm = new File(baseDir, \"src\/foo.xoo.scm\");","90","    FileUtils.write(scm, \"\\\"123\\\",\\\"john,doe\\\",\\\"2019-01-22\\\"\");","91","    DefaultInputFile inputFile = new TestInputFileBuilder(\"foo\", \"src\/foo.xoo\")","92","      .setLanguage(Xoo.KEY)","93","      .setModuleBaseDir(baseDir.toPath())","94","      .build();","95","    fs.add(inputFile);","96","    BlameOutput result = mock(BlameOutput.class);","97","    when(input.filesToBlame()).thenReturn(Arrays.asList(inputFile));","98","","99","    new XooBlameCommand().blame(input, result);","100","","101","    verify(result).blameResult(inputFile, singletonList(","102","      new BlameLine().revision(\"123\").author(\"john,doe\").date(DateUtils.parseDate(\"2019-01-22\"))));","103","  }"],"delete":["27","import org.sonar.api.batch.fs.InputFile;","37","import java.io.File;","38","import java.io.IOException;","39","import java.util.Arrays;","40","","76",""]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionComponentsTest.java":[{"add":[],"delete":["31","import org.sonar.api.server.ws.WebService;","40","import org.sonar.db.user.UserDto;","79","import static org.sonarqube.ws.client.issue.IssuesWsParameters.PARAM_AUTHORS;","437","  public void search_by_author() {","438","    ComponentDto project = db.components().insertPublicProject(p -> p.setDbKey(\"PK1\"));","439","    ComponentDto file = db.components().insertComponent(newFileDto(project, null, \"F1\").setDbKey(\"FK1\"));","440","    RuleDefinitionDto rule = db.rules().insert(r -> r.setRuleKey(RuleKey.of(\"xoo\", \"x1\")));","441","    db.issues().insert(rule, project, file, i -> i.setAuthorLogin(\"leia\").setKee(\"2bd4eac2-b650-4037-80bc-7b112bd4eac2\"));","442","    db.issues().insert(rule, project, file, i -> i.setAuthorLogin(\"luke@skywalker.name\").setKee(\"82fd47d4-b650-4037-80bc-7b1182fd47d4\"));","443","    allowAnyoneOnProjects(project);","444","    indexIssues();","445","","446","    UserDto user = db.users().insertUser();","447","    db.organizations().addMember(db.getDefaultOrganization(), user);","448","    userSession.logIn(user).addMembership(db.getDefaultOrganization());","449","","450","    ws.newRequest()","451","      .setParam(PARAM_AUTHORS, \"leia\")","452","      .setParam(WebService.Param.FACETS, \"authors\")","453","      .execute()","454","      .assertJson(this.getClass(), \"search_by_authors.json\");","455","","456","    ws.newRequest()","457","      .setParam(PARAM_AUTHORS, \"unknown\")","458","      .execute()","459","      .assertJson(this.getClass(), \"no_issue.json\");","460","  }","461","","462","  @Test"]}],"sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/issue\/IssuesWsParameters.java":[{"add":["90","","91","  \/**","92","   * @deprecated since 7.7, please use 'author' instead","93","   *\/","94","  @Deprecated","95","  public static final String DEPRECATED_PARAM_AUTHORS = \"authors\";","96","","97","  public static final String PARAM_AUTHOR = \"author\";"],"delete":["90","  public static final String PARAM_AUTHORS = \"authors\";"]}]}},"581cc1f7285e0dc0b46b5238ef17e1b572389753":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/account\/routes.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/account\/routes.js":[{"add":["33","","34","      <Route path=\"issues\" onEnter={() => {","35","        window.location = window.baseUrl + '\/issues' + window.location.hash + '|assigned_to_me=true';","36","      }}\/>"],"delete":[]}]}},"784829702ff22927a87b51091b82724609e6efbe":{"changes":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/issue\/IssueChangeMapperTest.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/issue\/IssueChangeDtoTest.java":"MODIFY","\/dev\/null":"DELETE","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/step\/PersistIssuesStepTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/ChangelogActionTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/issue\/ShortBranchIssueMergerTest.java":"MODIFY","server\/sonar-db-dao\/src\/test\/resources\/org\/sonar\/db\/issue\/IssueChangeMapperTest\/insert_comment-result.xml":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/issue\/IssueChangeDto.java":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/issue\/IssueChangeMapperTest.java":[{"add":["59","    dto.setIssueChangeCreationDate(1_500_000_000_000L);"],"delete":[]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/issue\/IssueChangeDtoTest.java":[{"add":["61","    diffs.setCreationDate(parseDate(\"2015-01-13\"));","71","    assertThat(dto.getIssueChangeCreationDate()).isEqualTo(parseDate(\"2015-01-13\").getTime());","136","  public void getIssueChangeCreationDate_fallback_to_createAt_when_null() {","137","    IssueChangeDto changeDto = new IssueChangeDto()","138","      .setKey(\"EFGH\")","139","      .setUserLogin(\"emmerik\")","140","      .setChangeData(\"Some text\")","141","      .setIssueKey(\"ABCDE\")","142","      .setCreatedAt(10_000_000L)","143","      .setUpdatedAt(20_000_000L);","144","","145","    assertThat(changeDto.getIssueChangeCreationDate()).isEqualTo(10_000_000L);","146","  }","147","","148","  @Test"],"delete":["68","    assertThat(dto.getIssueChangeCreationDate()).isNull();"]}],"\/dev\/null":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/step\/PersistIssuesStepTest.java":[{"add":["22","import java.util.Date;","52","import org.sonar.server.util.cache.DiskCache;","54","import static java.util.Collections.singletonList;","58","import static org.sonar.api.issue.Issue.RESOLUTION_FIXED;","59","import static org.sonar.api.issue.Issue.STATUS_CLOSED;","60","import static org.sonar.api.issue.Issue.STATUS_OPEN;","61","import static org.sonar.api.rule.Severity.BLOCKER;","62","import static org.sonar.db.component.ComponentTesting.newFileDto;","71","  public DbTester db = DbTester.create(System2.INSTANCE);","78","  private DbSession session = db.getSession();","79","  private DbClient dbClient = db.getDbClient();","107","    db.rules().insert(rule);","108","    OrganizationDto organizationDto = db.organizations().insert();","111","    ComponentDto file = newFileDto(project, null);","121","      .setSeverity(BLOCKER)","122","      .setStatus(STATUS_OPEN)","131","        .setCreatedAt(new Date(NOW))","133","      .setCurrentChange(","134","        new FieldDiffs()","135","          .setIssueKey(\"ISSUE\")","136","          .setUserLogin(\"john\")","137","          .setDiff(\"technicalDebt\", null, 1L)","138","          .setCreationDate(new Date(NOW))))","148","    assertThat(result.getSeverity()).isEqualTo(BLOCKER);","149","    assertThat(result.getStatus()).isEqualTo(STATUS_OPEN);","159","    db.rules().insert(rule);","160","    OrganizationDto organizationDto = db.organizations().insert();","163","    ComponentDto file = newFileDto(project, null);","173","      .setSeverity(BLOCKER)","174","      .setStatus(STATUS_OPEN)","183","        .setCreatedAt(new Date(NOW))","188","        .setDiff(\"technicalDebt\", null, 1L)","189","        .setCreationDate(new Date(NOW))))","198","    assertThat(result.getSeverity()).isEqualTo(BLOCKER);","199","    assertThat(result.getStatus()).isEqualTo(STATUS_OPEN);","209","    db.rules().insert(rule);","210","    OrganizationDto organizationDto = db.organizations().insert();","213","    ComponentDto file = newFileDto(project, null);","223","      .setSeverity(BLOCKER)","224","      .setStatus(STATUS_OPEN)","235","    assertThat(result.getSeverity()).isEqualTo(BLOCKER);","236","    assertThat(result.getStatus()).isEqualTo(STATUS_OPEN);","242","    ComponentDto project = db.components().insertPrivateProject();","243","    ComponentDto file = db.components().insertComponent(newFileDto(project));","244","    RuleDefinitionDto rule = db.rules().insert();","245","    IssueDto issue = db.issues().insert(rule, project, file,","246","      i -> i.setStatus(STATUS_OPEN)","247","        .setResolution(null)","248","        .setCreatedAt(NOW - 1_000_000_000L)","249","        .setUpdatedAt(NOW - 1_000_000_000L));","250","    DiskCache<DefaultIssue>.DiskAppender issueCacheAppender = issueCache.newAppender();","252","    issueCacheAppender.append(","253","      issue.toDefaultIssue()","254","        .setStatus(STATUS_CLOSED)","255","        .setResolution(RESOLUTION_FIXED)","256","        .setSelectedAt(NOW)","257","        .setNew(false)","258","        .setChanged(true))","259","      .close();","262","    IssueDto issueReloaded = db.getDbClient().issueDao().selectByKey(db.getSession(), issue.getKey()).get();","263","    assertThat(issueReloaded.getStatus()).isEqualTo(STATUS_CLOSED);","264","    assertThat(issueReloaded.getResolution()).isEqualTo(RESOLUTION_FIXED);","269","    ComponentDto project = db.components().insertPrivateProject();","270","    ComponentDto file = db.components().insertComponent(newFileDto(project));","271","    RuleDefinitionDto rule = db.rules().insert();","272","    IssueDto issue = db.issues().insert(rule, project, file,","273","      i -> i.setStatus(STATUS_OPEN)","274","        .setResolution(null)","275","        .setCreatedAt(NOW - 1_000_000_000L)","276","        .setUpdatedAt(NOW - 1_000_000_000L));","277","    DiskCache<DefaultIssue>.DiskAppender issueCacheAppender = issueCache.newAppender();","279","    issueCacheAppender.append(","280","      issue.toDefaultIssue()","281","        .setStatus(STATUS_CLOSED)","282","        .setResolution(RESOLUTION_FIXED)","283","        .setSelectedAt(NOW)","284","        .setNew(false)","285","        .setChanged(true)","286","        .addComment(new DefaultIssueComment()","287","          .setKey(\"COMMENT\")","288","          .setIssueKey(issue.getKey())","289","          .setUserLogin(\"john\")","290","          .setMarkdownText(\"Some text\")","291","          .setCreatedAt(new Date(NOW))","292","          .setNew(true)))","296","    IssueChangeDto issueChangeDto = db.getDbClient().issueChangeDao().selectByIssueKeys(db.getSession(), singletonList(issue.getKey())).get(0);","297","    assertThat(issueChangeDto)","298","      .extracting(IssueChangeDto::getChangeType, IssueChangeDto::getUserLogin, IssueChangeDto::getChangeData, IssueChangeDto::getIssueKey,","299","        IssueChangeDto::getIssueChangeCreationDate)","300","      .containsOnly(IssueChangeDto.TYPE_COMMENT, \"john\", \"Some text\", issue.getKey(), NOW);","305","    ComponentDto project = db.components().insertPrivateProject();","306","    ComponentDto file = db.components().insertComponent(newFileDto(project));","307","    RuleDefinitionDto rule = db.rules().insert();","308","    IssueDto issue = db.issues().insert(rule, project, file,","309","      i -> i.setStatus(STATUS_OPEN)","310","        .setResolution(null)","311","        .setCreatedAt(NOW - 1_000_000_000L)","312","        .setUpdatedAt(NOW - 1_000_000_000L));","313","    DiskCache<DefaultIssue>.DiskAppender issueCacheAppender = issueCache.newAppender();","315","    issueCacheAppender.append(","316","      issue.toDefaultIssue()","317","        .setStatus(STATUS_CLOSED)","318","        .setResolution(RESOLUTION_FIXED)","319","        .setSelectedAt(NOW)","320","        .setNew(false)","321","        .setChanged(true)","322","        .setCurrentChange(new FieldDiffs()","323","          .setIssueKey(\"ISSUE\")","324","          .setUserLogin(\"john\")","325","          .setDiff(\"technicalDebt\", null, 1L)","326","          .setCreationDate(new Date(NOW))))","330","    IssueChangeDto issueChangeDto = db.getDbClient().issueChangeDao().selectByIssueKeys(db.getSession(), singletonList(issue.getKey())).get(0);","331","    assertThat(issueChangeDto)","332","      .extracting(IssueChangeDto::getChangeType, IssueChangeDto::getUserLogin, IssueChangeDto::getChangeData, IssueChangeDto::getIssueKey,","333","        IssueChangeDto::getIssueChangeCreationDate)","334","      .containsOnly(IssueChangeDto.TYPE_FIELD_CHANGE, \"john\", \"technicalDebt=1\", issue.getKey(), NOW);"],"delete":["28","import org.sonar.api.issue.Issue;","30","import org.sonar.api.rule.Severity;","65","  public DbTester dbTester = DbTester.create(System2.INSTANCE);","72","  private DbSession session = dbTester.getSession();","73","  private DbClient dbClient = dbTester.getDbClient();","101","    dbTester.rules().insert(rule);","102","    OrganizationDto organizationDto = dbTester.organizations().insert();","105","    ComponentDto file = ComponentTesting.newFileDto(project, null);","115","      .setSeverity(Severity.BLOCKER)","116","      .setStatus(Issue.STATUS_OPEN)","126","      .setCurrentChange(new FieldDiffs()","127","        .setIssueKey(\"ISSUE\")","128","        .setUserLogin(\"john\")","129","        .setDiff(\"technicalDebt\", null, 1L)))","139","    assertThat(result.getSeverity()).isEqualTo(Severity.BLOCKER);","140","    assertThat(result.getStatus()).isEqualTo(Issue.STATUS_OPEN);","150","    dbTester.rules().insert(rule);","151","    OrganizationDto organizationDto = dbTester.organizations().insert();","154","    ComponentDto file = ComponentTesting.newFileDto(project, null);","164","      .setSeverity(Severity.BLOCKER)","165","      .setStatus(Issue.STATUS_OPEN)","178","        .setDiff(\"technicalDebt\", null, 1L)))","180","","188","    assertThat(result.getSeverity()).isEqualTo(Severity.BLOCKER);","189","    assertThat(result.getStatus()).isEqualTo(Issue.STATUS_OPEN);","199","    dbTester.rules().insert(rule);","200","    OrganizationDto organizationDto = dbTester.organizations().insert();","203","    ComponentDto file = ComponentTesting.newFileDto(project, null);","213","      .setSeverity(Severity.BLOCKER)","214","      .setStatus(Issue.STATUS_OPEN)","225","    assertThat(result.getSeverity()).isEqualTo(Severity.BLOCKER);","226","    assertThat(result.getStatus()).isEqualTo(Issue.STATUS_OPEN);","232","    dbTester.prepareDbUnit(getClass(), \"shared.xml\");","234","    issueCache.newAppender().append(new DefaultIssue()","235","      .setKey(\"ISSUE\")","236","      .setType(RuleType.CODE_SMELL)","237","      .setRuleKey(RuleKey.of(\"xoo\", \"S01\"))","238","      .setComponentUuid(\"COMPONENT\")","239","      .setProjectUuid(\"PROJECT\")","240","      .setSeverity(Severity.BLOCKER)","241","      .setStatus(Issue.STATUS_CLOSED)","242","      .setResolution(Issue.RESOLUTION_FIXED)","243","      .setSelectedAt(NOW)","244","      .setNew(false)","245","      .setChanged(true)).close();","246","","249","    dbTester.assertDbUnit(getClass(), \"close_issue-result.xml\", \"issues\");","254","    dbTester.prepareDbUnit(getClass(), \"shared.xml\");","256","    issueCache.newAppender().append(new DefaultIssue()","257","      .setKey(\"ISSUE\")","258","      .setType(RuleType.CODE_SMELL)","259","      .setRuleKey(RuleKey.of(\"xoo\", \"S01\"))","260","      .setComponentUuid(\"COMPONENT\")","261","      .setProjectUuid(\"PROJECT\")","262","      .setSeverity(Severity.BLOCKER)","263","      .setStatus(Issue.STATUS_CLOSED)","264","      .setResolution(Issue.RESOLUTION_FIXED)","265","      .setNew(false)","266","      .setChanged(true)","267","      .addComment(new DefaultIssueComment()","268","        .setKey(\"COMMENT\")","269","        .setIssueKey(\"ISSUE\")","270","        .setUserLogin(\"john\")","271","        .setMarkdownText(\"Some text\")","272","        .setNew(true)))","274","","277","    dbTester.assertDbUnit(getClass(), \"add_comment-result.xml\", new String[] {\"id\", \"created_at\", \"updated_at\"}, \"issue_changes\");","282","    dbTester.prepareDbUnit(getClass(), \"shared.xml\");","284","    issueCache.newAppender().append(new DefaultIssue()","285","      .setKey(\"ISSUE\")","286","      .setType(RuleType.CODE_SMELL)","287","      .setRuleKey(RuleKey.of(\"xoo\", \"S01\"))","288","      .setComponentUuid(\"COMPONENT\")","289","      .setProjectUuid(\"PROJECT\")","290","      .setSeverity(Severity.BLOCKER)","291","      .setStatus(Issue.STATUS_CLOSED)","292","      .setResolution(Issue.RESOLUTION_FIXED)","293","      .setNew(false)","294","      .setChanged(true)","295","      .setCurrentChange(new FieldDiffs()","296","        .setIssueKey(\"ISSUE\")","297","        .setUserLogin(\"john\")","298","        .setDiff(\"technicalDebt\", null, 1L)))","300","","303","    dbTester.assertDbUnit(getClass(), \"add_change-result.xml\", new String[] {\"id\", \"created_at\", \"updated_at\"}, \"issue_changes\");"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/ChangelogActionTest.java":[{"add":["21","import java.util.Date;","82","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setUserLogin(user.getLogin()).setDiff(\"severity\", \"MAJOR\", \"BLOCKER\").setCreationDate(new Date()));","102","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setDiff(\"file\", file1.uuid(), file2.uuid()).setCreationDate(new Date()));","117","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setDiff(\"file\", \"UNKNOWN_1\", \"UNKNOWN_2\").setCreationDate(new Date()));","131","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setUserLogin(user.getLogin()).setDiff(\"severity\", \"MAJOR\", \"BLOCKER\").setCreationDate(new Date()));","145","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setUserLogin(null).setDiff(\"severity\", \"MAJOR\", \"BLOCKER\").setCreationDate(new Date()));","160","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setUserLogin(\"UNKNOWN\").setDiff(\"severity\", \"MAJOR\", \"BLOCKER\").setCreationDate(new Date()));","176","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setUserLogin(user.getLogin())","177","      .setDiff(\"severity\", \"MAJOR\", \"BLOCKER\").setCreationDate(new Date())","178","      .setDiff(\"status\", \"RESOLVED\", \"CLOSED\").setCreationDate(new Date()));","192","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setUserLogin(user.getLogin()).setDiff(\"severity\", null, \"BLOCKER\").setCreationDate(new Date()));","205","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setUserLogin(user.getLogin()).setDiff(\"severity\", \"MAJOR\", null).setCreationDate(new Date()));","219","      new FieldDiffs().setUserLogin(user.getLogin()).setDiff(\"severity\", \"MAJOR\", \"BLOCKER\").setCreationDate(new Date()),","220","      new FieldDiffs().setDiff(\"status\", \"RESOLVED\", \"CLOSED\").setCreationDate(new Date()));","232","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setUserLogin(user.getLogin()).setDiff(\"technicalDebt\", \"10\", \"20\").setCreationDate(new Date()));","266","      .setDiff(\"severity\", \"MAJOR\", \"BLOCKER\").setCreationDate(new Date())"],"delete":["81","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setUserLogin(user.getLogin()).setDiff(\"severity\", \"MAJOR\", \"BLOCKER\"));","101","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setDiff(\"file\", file1.uuid(), file2.uuid()));","116","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setDiff(\"file\", \"UNKNOWN_1\", \"UNKNOWN_2\"));","130","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setUserLogin(user.getLogin()).setDiff(\"severity\", \"MAJOR\", \"BLOCKER\"));","144","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setUserLogin(null).setDiff(\"severity\", \"MAJOR\", \"BLOCKER\"));","159","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setUserLogin(\"UNKNOWN\").setDiff(\"severity\", \"MAJOR\", \"BLOCKER\"));","175","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setUserLogin(user.getLogin()).setDiff(\"severity\", \"MAJOR\", \"BLOCKER\").setDiff(\"status\", \"RESOLVED\", \"CLOSED\"));","189","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setUserLogin(user.getLogin()).setDiff(\"severity\", null, \"BLOCKER\"));","202","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setUserLogin(user.getLogin()).setDiff(\"severity\", \"MAJOR\", null));","216","      new FieldDiffs().setUserLogin(user.getLogin()).setDiff(\"severity\", \"MAJOR\", \"BLOCKER\"),","217","      new FieldDiffs().setDiff(\"status\", \"RESOLVED\", \"CLOSED\"));","229","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setUserLogin(user.getLogin()).setDiff(\"technicalDebt\", \"10\", \"20\"));","263","      .setDiff(\"severity\", \"MAJOR\", \"BLOCKER\")"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/issue\/ShortBranchIssueMergerTest.java":[{"add":["195","    db.issues().insertFieldDiffs(issue1, FieldDiffs.parse(\"severity=BLOCKER|INFO,assignee=toto|titi\").setCreationDate(new Date()));","199","    db.issues().insertFieldDiffs(issue2, FieldDiffs.parse(\"severity=BLOCKER|MINOR,assignee=foo|bar\").setCreationDate(new Date()));"],"delete":["195","    db.issues().insertFieldDiffs(issue1, FieldDiffs.parse(\"severity=BLOCKER|INFO,assignee=toto|titi\"));","199","    db.issues().insertFieldDiffs(issue2, FieldDiffs.parse(\"severity=BLOCKER|MINOR,assignee=foo|bar\"));"]}],"server\/sonar-db-dao\/src\/test\/resources\/org\/sonar\/db\/issue\/IssueChangeMapperTest\/insert_comment-result.xml":[{"add":["10","    issue_change_creation_date=\"1500000000000\""],"delete":["10","    issue_change_creation_date=\"[null]\""]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/issue\/IssueChangeDto.java":[{"add":["32","import static java.util.Objects.requireNonNull;","54","  @Nullable","63","    Date createdAt = requireNonNull(comment.createdAt(), \"Comment created at must not be null\");","64","    dto.setIssueChangeCreationDate(createdAt.getTime());","73","    Date createdAt = requireNonNull(diffs.creationDate(), \"Diffs created at must not be null\");","74","    dto.setIssueChangeCreationDate(createdAt.getTime());","163","    \/\/ Old comments do not have functional creation date as this column has been added later","164","    return issueChangeCreationDate == null ? createdAt : issueChangeCreationDate;","167","  public IssueChangeDto setIssueChangeCreationDate(long issueChangeCreationDate) {","181","      .setCreatedAt(new Date(getIssueChangeCreationDate()))","191","      .setCreationDate(new Date(getIssueChangeCreationDate()))"],"delete":["61","    dto.setIssueChangeCreationDate(comment.createdAt() == null ? null : comment.createdAt().getTime());","70","    dto.setIssueChangeCreationDate(diffs.creationDate() == null ? null : diffs.creationDate().getTime());","159","    return issueChangeCreationDate;","162","  public IssueChangeDto setIssueChangeCreationDate(@Nullable Long issueChangeCreationDate) {","176","      .setCreatedAt(new Date(createdAt))","186","      \/\/ issueChangeCreationDate can be null as it has been introduced after createdAt","187","      .setCreationDate(issueChangeCreationDate != null ? new Date(issueChangeCreationDate) : new Date(createdAt))"]}]}},"343be23904dcb520ea86c4d6070cd3be272941da":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/RuleUpdaterTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/RuleUpdate.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/ws\/UpdateActionTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/RuleUpdaterTest.java":[{"add":["29","import org.assertj.core.api.ThrowableAssertAlternative;","63","import static org.sonar.api.rule.RuleStatus.REMOVED;","64","import static org.sonar.api.rule.Severity.CRITICAL;","65","import static org.sonar.db.rule.RuleTesting.newRule;","66","import static org.sonar.server.rule.RuleUpdate.createForCustomRule;","67","import static org.sonar.server.rule.RuleUpdate.createForPluginRule;","95","    db.rules().insert(newRule(RULE_KEY).setStatus(RuleStatus.REMOVED));","98","    RuleUpdate update = createForPluginRule(RULE_KEY)","101","","102","    expectedException.expect(IllegalArgumentException.class);","103","    expectedException.expectMessage(\"Rule with REMOVED status cannot be updated: squid:S001\");","104","","105","    underTest.update(dbSession, update, db.getDefaultOrganization(), userSessionRule);","122","    RuleUpdate update = createForPluginRule(RULE_KEY);","153","    RuleUpdate update = createForPluginRule(RULE_KEY)","180","    RuleUpdate update = createForPluginRule(RULE_KEY)","202","    RuleUpdate update = createForPluginRule(RULE_KEY)","225","    RuleUpdate update = createForPluginRule(RULE_KEY)","242","    db.rules().insert(newRule(RULE_KEY)","249","    RuleUpdate update = createForPluginRule(RULE_KEY)","268","    db.rules().insert(newRule(RULE_KEY)","274","    RuleUpdate update = createForPluginRule(RULE_KEY)","293","    db.rules().insert(newRule(RULE_KEY)","299","    RuleUpdate update = createForPluginRule(RULE_KEY)","329","    RuleUpdate update = createForPluginRule(RULE_KEY)","366","    RuleUpdate update = createForCustomRule(customRule.getKey())","416","    RuleUpdate update = createForCustomRule(customRule.getKey())","470","    RuleUpdate update = createForCustomRule(customRule.getKey())","514","    RuleUpdate update = createForCustomRule(customRule.getKey())","518","","519","    expectedException.expect(IllegalArgumentException.class);","520","    expectedException.expectMessage(\"The name is missing\");","521","","522","    underTest.update(dbSession, update, db.getDefaultOrganization(), userSessionRule);","537","    expectedException.expect(IllegalArgumentException.class);","538","    expectedException.expectMessage(\"The description is missing\");","539","","540","    underTest.update(dbSession,","541","      createForCustomRule(customRule.getKey()).setName(\"New name\").setMarkdownDescription(\"\").setOrganization(db.getDefaultOrganization()),","542","      db.getDefaultOrganization(), userSessionRule);","547","    RuleDefinitionDto ruleDefinition = db.rules().insert(newRule(RuleKey.of(\"squid\", \"S01\")));","550","    expectedException.expect(IllegalArgumentException.class);","551","    expectedException.expectMessage(\"Not a custom rule\");","552","","553","    createForPluginRule(ruleDefinition.getKey()).setName(\"New name\");","558","    RuleDefinitionDto ruleDefinition = db.rules().insert(newRule(RuleKey.of(\"squid\", \"S01\")));","561","    expectedException.expect(IllegalArgumentException.class);","562","    expectedException.expectMessage(\"Not a custom rule\");","563","","564","    createForPluginRule(ruleDefinition.getKey()).setMarkdownDescription(\"New description\");","569","    RuleDefinitionDto ruleDefinition = db.rules().insert(newRule(RuleKey.of(\"squid\", \"S01\")));","572","    expectedException.expect(IllegalArgumentException.class);","573","    expectedException.expectMessage(\"Not a custom rule\");","574","","575","    createForPluginRule(ruleDefinition.getKey()).setSeverity(CRITICAL);"],"delete":["84","  private TestDefaultOrganizationProvider defaultOrganizationProvider = TestDefaultOrganizationProvider.from(db);","90","    db.rules().insert(RuleTesting.newRule(RULE_KEY).setStatus(RuleStatus.REMOVED));","93","    RuleUpdate update = RuleUpdate.createForPluginRule(RULE_KEY)","96","    try {","97","      underTest.update(dbSession, update, db.getDefaultOrganization(), userSessionRule);","98","      fail();","99","    } catch (IllegalArgumentException e) {","100","      assertThat(e).hasMessage(\"Rule with REMOVED status cannot be updated: squid:S001\");","101","    }","118","    RuleUpdate update = RuleUpdate.createForPluginRule(RULE_KEY);","149","    RuleUpdate update = RuleUpdate.createForPluginRule(RULE_KEY)","176","    RuleUpdate update = RuleUpdate.createForPluginRule(RULE_KEY)","198","    RuleUpdate update = RuleUpdate.createForPluginRule(RULE_KEY)","221","    RuleUpdate update = RuleUpdate.createForPluginRule(RULE_KEY)","238","    db.rules().insert(RuleTesting.newRule(RULE_KEY)","245","    RuleUpdate update = RuleUpdate.createForPluginRule(RULE_KEY)","264","    db.rules().insert(RuleTesting.newRule(RULE_KEY)","270","    RuleUpdate update = RuleUpdate.createForPluginRule(RULE_KEY)","289","    db.rules().insert(RuleTesting.newRule(RULE_KEY)","295","    RuleUpdate update = RuleUpdate.createForPluginRule(RULE_KEY)","325","    RuleUpdate update = RuleUpdate.createForPluginRule(RULE_KEY)","362","    RuleUpdate update = RuleUpdate.createForCustomRule(customRule.getKey())","412","    RuleUpdate update = RuleUpdate.createForCustomRule(customRule.getKey())","466","    RuleUpdate update = RuleUpdate.createForCustomRule(customRule.getKey())","510","    RuleUpdate update = RuleUpdate.createForCustomRule(customRule.getKey())","514","    try {","515","      underTest.update(dbSession, update, db.getDefaultOrganization(), userSessionRule);","516","      fail();","517","    } catch (Exception e) {","518","      assertThat(e).isInstanceOf(IllegalArgumentException.class).hasMessage(\"The name is missing\");","519","    }","534","    \/\/ Update custom rule","535","    RuleUpdate update = RuleUpdate.createForCustomRule(customRule.getKey())","536","      .setName(\"New name\")","537","      .setMarkdownDescription(\"\")","538","      .setOrganization(db.getDefaultOrganization());","539","    try {","540","      underTest.update(dbSession, update, db.getDefaultOrganization(), userSessionRule);","541","      fail();","542","    } catch (Exception e) {","543","      assertThat(e).isInstanceOf(IllegalArgumentException.class).hasMessage(\"The description is missing\");","544","    }","549","    \/\/ Create rule rule","550","    RuleDefinitionDto ruleDto = RuleTesting.newRule(RuleKey.of(\"squid\", \"S01\"));","551","    db.rules().insert(ruleDto);","552","","555","    try {","556","      \/\/ Update rule","557","      RuleUpdate.createForPluginRule(ruleDto.getKey())","558","        .setName(\"New name\");","559","      fail();","560","    } catch (Exception e) {","561","      assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage(\"Not a custom rule\");","562","    }","567","    \/\/ Create rule rule","568","    RuleDefinitionDto ruleDto = RuleTesting.newRule(RuleKey.of(\"squid\", \"S01\"));","569","    db.rules().insert(ruleDto);","570","","573","    try {","574","      \/\/ Update rule","575","      RuleUpdate.createForPluginRule(ruleDto.getKey())","576","        .setMarkdownDescription(\"New description\");","577","      fail();","578","    } catch (Exception e) {","579","      assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage(\"Not a custom rule\");","580","    }","585","    \/\/ Create rule rule","586","    RuleDefinitionDto ruleDto = RuleTesting.newRule(RuleKey.of(\"squid\", \"S01\"));","587","    db.rules().insert(ruleDto);","588","","591","    try {","592","      \/\/ Update rule","593","      RuleUpdate.createForPluginRule(ruleDto.getKey())","594","        .setSeverity(Severity.CRITICAL);","595","      fail();","596","    } catch (Exception e) {","597","      assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage(\"Not a custom rule\");","598","    }"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/RuleUpdate.java":[{"add":["32","import static com.google.common.base.Preconditions.checkArgument;","226","    checkArgument(useCase == CUSTOM_RULE, \"Not a custom rule\");"],"delete":["225","    if (useCase != CUSTOM_RULE) {","226","      throw new IllegalStateException(\"Not a custom rule\");","227","    }"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/ws\/UpdateActionTest.java":[{"add":["313","  public void throw_IllegalArgumentException_if_trying_to_update_builtin_rule_description() throws Exception {","314","    logInAsQProfileAdministrator();","315","    RuleDefinitionDto rule = db.rules().insert();","316","","317","    expectedException.expect(IllegalArgumentException.class);","318","    expectedException.expectMessage(\"Not a custom rule\");","319","","320","    ws.newRequest().setMethod(\"POST\")","321","      .setParam(\"key\", rule.getKey().toString())","322","      .setParam(\"name\", rule.getName())","323","      .setParam(\"markdown_description\", \"New description\")","324","      .execute();","325","","326","  }","327","","328","  @Test"],"delete":[]}]}},"4d950b9bb39dab261ea5da4d719cf8fd2c9d8d38":{"changes":{"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/plugins\/ws\/InstalledActionTest.java":"MODIFY","build.gradle":"MODIFY"},"diff":{"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/plugins\/ws\/InstalledActionTest.java":[{"add":["22","import com.hazelcast.internal.json.Json;","23","import com.hazelcast.internal.json.JsonObject;","76","  @DataProvider","77","  public static Object[][] editionBundledLicenseValues() {","78","    return new Object[][] {","79","      {\"sonarsource\"},","80","      {\"SonarSource\"},","81","      {\"SonaRSOUrce\"},","82","      {\"SONARSOURCE\"},","83","      {\"commercial\"},","84","      {\"Commercial\"},","85","      {\"COMMERCIAL\"},","86","      {\"COmmERCiaL\"},","87","    };","88","  }","89",""],"delete":["22","import com.hazelcast.com.eclipsesource.json.Json;","23","import com.hazelcast.com.eclipsesource.json.JsonObject;","378","  @DataProvider","379","  public static Object[][] editionBundledLicenseValues() {","380","    return new Object[][]{","381","      {\"sonarsource\"},","382","      {\"SonarSource\"},","383","      {\"SonaRSOUrce\"},","384","      {\"SONARSOURCE\"},","385","      {\"commercial\"},","386","      {\"Commercial\"},","387","      {\"COMMERCIAL\"},","388","      {\"COmmERCiaL\"},","389","    };","390","  }","391",""]}],"build.gradle":[{"add":["173","      dependencySet(group: 'com.hazelcast', version: '3.12.1') {"],"delete":["173","      dependencySet(group: 'com.hazelcast', version: '3.8.6') {"]}]}},"715ef2a837a34a12cfad43fc806f5103f41233aa":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/issue\/components\/IssueCommentLine.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/issue\/components\/IssueCommentLine.tsx":[{"add":["20","import { sanitize } from 'dompurify';","92","          dangerouslySetInnerHTML={{ __html: sanitize(comment.htmlText) }}"],"delete":["91","          \/\/ Safe: Comes from the backend, after markdown transformation to html","92","          dangerouslySetInnerHTML={{ __html: comment.htmlText }}"]}]}},"862136c48612703748db03dd7d52df515a86d7e6":{"changes":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/utils\/DateUtils.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/LoadPeriodsStep.java":"MODIFY","sonar-core\/src\/main\/java\/org\/sonar\/core\/config\/CorePropertyDefinitions.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/LoadPeriodsStepTest.java":"MODIFY"},"diff":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/utils\/DateUtils.java":[{"add":["58","   *","59","   * @since 7.6","60","   *\/","61","  public static String formatDate(Instant d) {","62","    return d.atZone(ZoneId.systemDefault()).toLocalDate().toString();","63","  }","64","","65","  \/**","66","   * Warning: relies on default timezone!","105","   *","230","   *","232","   * @throws IllegalArgumentException if stringDate is not a correctly formed date or datetime","254","   *","255","   * @see #parseDateOrDateTime(String)","265","   *","267","   * @throws IllegalArgumentException if stringDate is not a correctly formed date or datetime","268","   * @see #parseDateOrDateTime(String)","292","   * @param date         the date, not null","293","   * @param numberOfDays the amount to add, may be negative","300","  \/**","301","   * @since 7.6","302","   *\/","303","  public static Instant addDays(Instant instant, int numberOfDays) {","304","    return instant.plus(numberOfDays, ChronoUnit.DAYS);","305","  }","306",""],"delete":["220","   * @throws IllegalArgumentException if stringDate is not a correctly formed date or datetime","243","   * @see #parseDateOrDateTime(String) ","253","   * @see #parseDateOrDateTime(String)","254","   * @throws IllegalArgumentException if stringDate is not a correctly formed date or datetime","279","   * @param date  the date, not null","280","   * @param numberOfDays  the amount to add, may be negative"]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/LoadPeriodsStep.java":[{"add":["21","import java.time.Duration;","22","import java.time.Instant;","132","    Instant date = parseDate(propertyValue);","147","      if (versions.size() == 1) {","148","        return resolvePreviousVersionWithOnlyOneExistingVersion(dbSession, projectUuid);","149","      }","157","  private static Instant parseDate(String propertyValue) {","160","      return localDate.atStartOfDay(ZoneId.systemDefault()).toInstant();","174","    Instant targetDate = DateUtils.addDays(Instant.ofEpochMilli(analysisDate), -days);","175","    LOG.debug(\"Resolving new code period by {} days: {}\", days, supplierToString(() -> logDate(targetDate)));","181","  private Optional<Period> resolveByDate(DbSession dbSession, String projectUuid, Instant date, String propertyValue) {","182","    Instant now = Instant.ofEpochMilli(system2.now());","183","    checkPeriodProperty(date.compareTo(now) <= 0, propertyValue,","184","      \"date is in the future (now: '%s')\", supplierToString(() -> logDate(now)));","186","    LOG.debug(\"Resolving new code period by date: {}\", supplierToString(() -> logDate(date)));","187","    Optional<Period> period = findFirstSnapshot(dbSession, createCommonQuery(projectUuid).setCreatedAfter(date.toEpochMilli()).setSort(BY_DATE, ASC))","190","    checkPeriodProperty(period.isPresent(), propertyValue, \"No analysis found created after date '%s'\", supplierToString(() -> logDate(date)));","207","  private Optional<Period> resolvePreviousVersionWithOnlyOneExistingVersion(DbSession dbSession, String projectUuid) {","229","      \"version is none of the existing ones: %s\", supplierToString(() -> toVersions(versions)));","248","  private static Object supplierToString(Supplier<String> s) {","263","      LOG.debug(\"Invalid code period '{}': {}\", propertyValue, supplierToString(() -> format(testDescription, args)));","290","  private static SnapshotDto findNearestSnapshotToTargetDate(List<SnapshotDto> snapshots, Instant targetDate) {","291","    \/\/ FIXME shouldn't this be the first analysis after targetDate?","292","    Duration bestDuration = null;","295","      Instant createdAt = Instant.ofEpochMilli(snapshot.getCreatedAt());","296","      Duration duration = Duration.between(targetDate, createdAt).abs();","297","      if (bestDuration == null || duration.compareTo(bestDuration) <= 0) {","298","        bestDuration = duration;","309","  private static String logDate(Instant instant) {","310","    return DateUtils.formatDate(instant.truncatedTo(ChronoUnit.SECONDS));"],"delete":["26","import java.util.Date;","131","    Date date = parseDate(propertyValue);","143","    if (versions.size() == 1) {","144","      return resolveWhenOnlyOneExistingVersion(dbSession, projectUuid, mostRecentVersion, propertyValue);","145","    }","156","  private static Date parseDate(String propertyValue) {","159","      return Date.from(localDate.atStartOfDay(ZoneId.systemDefault()).toInstant());","173","    long targetDate = DateUtils.addDays(new Date(analysisDate), -days).getTime();","174","    LOG.debug(\"Resolving new code period by {} days: {}\", days, async(() -> logDate(targetDate)));","180","  private Optional<Period> resolveByDate(DbSession dbSession, String projectUuid, Date date, String propertyValue) {","181","    long now = system2.now();","182","    checkPeriodProperty(date.compareTo(new Date(now)) <= 0, propertyValue,","183","      \"date is in the future (now: '%s')\", async(() -> logDate(now)));","185","    LOG.debug(\"Resolving new code period by date: {}\", async(() -> logDate(date)));","186","    Optional<Period> period = findFirstSnapshot(dbSession, createCommonQuery(projectUuid).setCreatedAfter(date.getTime()).setSort(BY_DATE, ASC))","189","    checkPeriodProperty(period.isPresent(), propertyValue, \"No analysis found created after date '%s'\", async(() -> logDate(date)));","190","","207","  private Optional<Period> resolveWhenOnlyOneExistingVersion(DbSession dbSession, String projectUuid, String mostRecentVersion, String propertyValue) {","208","    boolean previousVersionPeriod = LEAK_PERIOD_MODE_PREVIOUS_VERSION.equals(propertyValue);","210","","211","    \/\/ only one existing version. Period must either be PREVIOUS_VERSION or the only valid version: the only existing one","212","    checkPeriodProperty(previousVersionPeriod || propertyValue.equals(mostRecentVersion), propertyValue,","213","      \"Only one existing version, but period is neither %s nor this one version '%s' (actual: '%s')\",","214","      LEAK_PERIOD_MODE_PREVIOUS_VERSION, mostRecentVersion, propertyValue);","215","","236","      \"version is none of the existing ones: %s\", async(() -> toVersions(versions)));","255","  public static Object async(Supplier<String> s) {","270","      LOG.debug(\"Invalid code period '{}': {}\", propertyValue, async(() -> format(testDescription, args)));","297","  private static SnapshotDto findNearestSnapshotToTargetDate(List<SnapshotDto> snapshots, Long targetDate) {","298","    long bestDistance = Long.MAX_VALUE;","301","      long distance = Math.abs(snapshot.getCreatedAt() - targetDate);","302","      if (distance <= bestDistance) {","303","        bestDistance = distance;","314","  private static String logDate(long date) {","315","    return logDate(new Date(date));","316","  }","317","","318","  private static String logDate(Date date1) {","319","    return DateUtils.formatDate(Date.from(date1.toInstant().truncatedTo(ChronoUnit.SECONDS)));"]}],"sonar-core\/src\/main\/java\/org\/sonar\/core\/config\/CorePropertyDefinitions.java":[{"add":[],"delete":["35","  public static final String LEAK_PERIOD_MODE_PREVIOUS_ANALYSIS = \"previous_analysis\";"]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/LoadPeriodsStepTest.java":[{"add":["30","import javax.annotation.Nullable;","141","    assertPeriod(LEAK_PERIOD_MODE_DATE, textDate, analysis.getCreatedAt(), analysis.getUuid());","148","    SnapshotDto analysis1 = dbTester.components()","149","      .insertSnapshot(project, snapshot -> snapshot.setStatus(STATUS_UNPROCESSED).setCreatedAt(1226379600000L).setLast(false));\/\/ 2008-11-11","161","    assertPeriod(LEAK_PERIOD_MODE_DAYS, \"100\", analysis2.getCreatedAt(), analysis2.getUuid());","183","    assertPeriod(LEAK_PERIOD_MODE_DATE, textDate, analysis4.getCreatedAt(), analysis4.getUuid());","206","    assertPeriod(LEAK_PERIOD_MODE_DATE, date, analysis3.getCreatedAt(), analysis3.getUuid());","397","    assertPeriod(LEAK_PERIOD_MODE_DAYS, \"10\", analysis3.getCreatedAt(), analysis3.getUuid());","425","    assertPeriod(LEAK_PERIOD_MODE_PREVIOUS_VERSION, \"1.0\", analysis2.getCreatedAt(), analysis2.getUuid());","448","    assertPeriod(LEAK_PERIOD_MODE_PREVIOUS_VERSION, \"0.9\", analysis1.getCreatedAt(), analysis1.getUuid());","465","    assertPeriod(LEAK_PERIOD_MODE_PREVIOUS_VERSION, null, analysis1.getCreatedAt(), analysis1.getUuid());","483","    assertPeriod(LEAK_PERIOD_MODE_PREVIOUS_VERSION, null, analysis.getCreatedAt(), analysis.getUuid());","507","    assertPeriod(LEAK_PERIOD_MODE_VERSION, \"1.0\", analysis2.getCreatedAt(), analysis2.getUuid());","508","    verifyDebugLogs(\"Resolving new code period by version: 1.0\");","509","  }","510","","511","  \/**","512","   * SONAR-11492","513","   *\/","514","  @Test","515","  public void feed_period_by_version_with_only_one_existing_version() {","516","    OrganizationDto organization = dbTester.organizations().insert();","517","    ComponentDto project = dbTester.components().insertPrivateProject(organization);","518","    SnapshotDto analysis1 = dbTester.components().insertSnapshot(project, snapshot -> snapshot.setCreatedAt(1226379600000L).setVersion(\"0.9\").setLast(true)); \/\/ 2008-11-11","519","    dbTester.events().insertEvent(newEvent(analysis1).setName(\"0.9\").setCategory(CATEGORY_VERSION));","520","    when(system2Mock.now()).thenReturn(november30th2008.getTime());","521","    when(analysisMetadataHolder.isFirstAnalysis()).thenReturn(false);","522","    setupRoot(project, \"0.9\");","523","","524","    settings.setProperty(\"sonar.leak.period\", \"0.9\");","525","    underTest.execute(new TestComputationStepContext());","526","","527","    \/\/ Analysis form 2008-11-11","528","    assertPeriod(LEAK_PERIOD_MODE_VERSION, \"0.9\", analysis1.getCreatedAt(), analysis1.getUuid());","529","    verifyDebugLogs(\"Resolving new code period by version: 0.9\");","530","  }","531","","532","  private void assertPeriod(String mode, @Nullable String modeParameter, long snapshotDate, String analysisUuid) {","535","    assertThat(period.getMode()).isEqualTo(mode);","536","    assertThat(period.getModeParameter()).isEqualTo(modeParameter);","537","    assertThat(period.getSnapshotDate()).isEqualTo(snapshotDate);","538","    assertThat(period.getAnalysisUuid()).isEqualTo(analysisUuid);"],"delete":["140","    Period period = periodsHolder.getPeriod();","141","    assertThat(period).isNotNull();","142","    assertThat(period.getMode()).isEqualTo(LEAK_PERIOD_MODE_DATE);","143","    assertThat(period.getModeParameter()).isEqualTo(textDate);","144","    assertThat(period.getSnapshotDate()).isEqualTo(analysis.getCreatedAt());","145","    assertThat(period.getAnalysisUuid()).isEqualTo(analysis.getUuid());","152","    SnapshotDto analysis1 = dbTester.components().insertSnapshot(project, snapshot -> snapshot.setStatus(STATUS_UNPROCESSED).setCreatedAt(1226379600000L).setLast(false));\/\/ 2008-11-11","164","    Period period = periodsHolder.getPeriod();","165","    assertThat(period).isNotNull();","166","    assertThat(period.getMode()).isEqualTo(LEAK_PERIOD_MODE_DAYS);","167","    assertThat(period.getModeParameter()).isEqualTo(\"100\");","168","    assertThat(period.getSnapshotDate()).isEqualTo(analysis2.getCreatedAt());","169","    assertThat(period.getAnalysisUuid()).isEqualTo(analysis2.getUuid());","170","","192","    Period period = periodsHolder.getPeriod();","193","    assertThat(period).isNotNull();","194","    assertThat(period.getMode()).isEqualTo(LEAK_PERIOD_MODE_DATE);","195","    assertThat(period.getModeParameter()).isEqualTo(textDate);","196","    assertThat(period.getSnapshotDate()).isEqualTo(analysis4.getCreatedAt());","197","    assertThat(period.getAnalysisUuid()).isEqualTo(analysis4.getUuid());","220","    Period period = periodsHolder.getPeriod();","221","    assertThat(period).isNotNull();","222","    assertThat(period.getMode()).isEqualTo(LEAK_PERIOD_MODE_DATE);","223","    assertThat(period.getModeParameter()).isEqualTo(date);","224","    assertThat(period.getSnapshotDate()).isEqualTo(analysis3.getCreatedAt());","225","    assertThat(period.getAnalysisUuid()).isEqualTo(analysis3.getUuid());","226","","417","    Period period = periodsHolder.getPeriod();","418","    assertThat(period).isNotNull();","419","    assertThat(period.getMode()).isEqualTo(LEAK_PERIOD_MODE_DAYS);","420","    assertThat(period.getModeParameter()).isEqualTo(\"10\");","421","    assertThat(period.getSnapshotDate()).isEqualTo(analysis3.getCreatedAt());","422","    assertThat(period.getAnalysisUuid()).isEqualTo(analysis3.getUuid());","450","    Period period = periodsHolder.getPeriod();","451","    assertThat(period).isNotNull();","452","    assertThat(period.getMode()).isEqualTo(LEAK_PERIOD_MODE_PREVIOUS_VERSION);","453","    assertThat(period.getModeParameter()).isEqualTo(\"1.0\");","454","    assertThat(period.getSnapshotDate()).isEqualTo(analysis2.getCreatedAt());","455","    assertThat(period.getAnalysisUuid()).isEqualTo(analysis2.getUuid());","478","    Period period = periodsHolder.getPeriod();","479","    assertThat(period).isNotNull();","480","    assertThat(period.getMode()).isEqualTo(LEAK_PERIOD_MODE_PREVIOUS_VERSION);","481","    assertThat(period.getModeParameter()).isEqualTo(\"0.9\");","482","    assertThat(period.getSnapshotDate()).isEqualTo(analysis1.getCreatedAt());","483","    assertThat(period.getAnalysisUuid()).isEqualTo(analysis1.getUuid());","500","    Period period = periodsHolder.getPeriod();","501","    assertThat(period).isNotNull();","502","    assertThat(period.getMode()).isEqualTo(LEAK_PERIOD_MODE_PREVIOUS_VERSION);","503","    assertThat(period.getModeParameter()).isNull();","504","    assertThat(period.getSnapshotDate()).isEqualTo(analysis1.getCreatedAt());","505","    assertThat(period.getAnalysisUuid()).isEqualTo(analysis1.getUuid());","523","    Period period = periodsHolder.getPeriod();","524","    assertThat(period).isNotNull();","525","    assertThat(period.getMode()).isEqualTo(LEAK_PERIOD_MODE_PREVIOUS_VERSION);","526","    assertThat(period.getModeParameter()).isNull();","527","    assertThat(period.getSnapshotDate()).isEqualTo(analysis.getCreatedAt());","528","    assertThat(period.getAnalysisUuid()).isEqualTo(analysis.getUuid());","529","","555","    assertThat(period.getMode()).isEqualTo(LEAK_PERIOD_MODE_VERSION);","556","    assertThat(period.getModeParameter()).isEqualTo(\"1.0\");","557","    assertThat(period.getSnapshotDate()).isEqualTo(analysis2.getCreatedAt());","558","    assertThat(period.getAnalysisUuid()).isEqualTo(analysis2.getUuid());","559","","560","    verifyDebugLogs(\"Resolving new code period by version: 1.0\");"]}]}},"56194c84a561bfb8b446bf5d87c73f41e8822dab":{"changes":{"server\/sonar-web\/package.json":"MODIFY","server\/sonar-web\/yarn.lock":"MODIFY"},"diff":{"server\/sonar-web\/package.json":[{"add":["20","    \"history\": \"3.3.0\",","33","    \"react-router\": \"3.0.2\","],"delete":["20","    \"history\": \"2.0.0\",","33","    \"react-router\": \"2.8.1\","]}],"server\/sonar-web\/yarn.lock":[{"add":["1640","deep-equal@1.0.1:","2761","history@3.3.0, history@^3.0.0:","2762","  version \"3.3.0\"","2763","  resolved \"https:\/\/repox.sonarsource.com\/api\/npm\/npm\/history\/-\/history-3.3.0.tgz#fcedcce8f12975371545d735461033579a6dae9c\"","2765","    invariant \"^2.2.1\"","2766","    loose-envify \"^1.2.0\"","2767","    query-string \"^4.2.2\"","2768","    warning \"^3.0.0\"","4875","query-string@^4.1.0, query-string@^4.2.2:","5043","react-router@3.0.2:","5044","  version \"3.0.2\"","5045","  resolved \"https:\/\/repox.sonarsource.com\/api\/npm\/npm\/react-router\/-\/react-router-3.0.2.tgz#5a19156678810e01d81901f9c0fef63284b8a514\"","5047","    history \"^3.0.0\"","6043","warning@2.1.0:"],"delete":["1640","deep-equal@1.0.1, deep-equal@^1.0.0:","2761","history@2.0.0:","2762","  version \"2.0.0\"","2763","  resolved \"https:\/\/registry.yarnpkg.com\/history\/-\/history-2.0.0.tgz#6d5144af2da8a3dea4e5f1abae11a3c2e868e2c7\"","2765","    deep-equal \"^1.0.0\"","2766","    invariant \"^2.0.0\"","2767","    query-string \"^3.0.0\"","2768","    warning \"^2.0.0\"","2769","","2770","history@^2.1.2:","2771","  version \"2.1.2\"","2772","  resolved \"https:\/\/registry.yarnpkg.com\/history\/-\/history-2.1.2.tgz#4aa2de897a0e4867e4539843be6ecdb2986bfdec\"","2773","  dependencies:","2774","    deep-equal \"^1.0.0\"","2775","    invariant \"^2.0.0\"","2776","    query-string \"^3.0.0\"","2777","    warning \"^2.0.0\"","4884","query-string@^3.0.0:","4885","  version \"3.0.3\"","4886","  resolved \"https:\/\/registry.yarnpkg.com\/query-string\/-\/query-string-3.0.3.tgz#ae2e14b4d05071d4e9b9eb4873c35b0dcd42e638\"","4887","  dependencies:","4888","    strict-uri-encode \"^1.0.0\"","4889","","4890","query-string@^4.1.0:","5058","react-router@2.8.1:","5059","  version \"2.8.1\"","5060","  resolved \"https:\/\/registry.yarnpkg.com\/react-router\/-\/react-router-2.8.1.tgz#73e9491f6ceb316d0f779829081863e378ee4ed7\"","5062","    history \"^2.1.2\"","6058","warning@2.1.0, warning@^2.0.0:"]}]}},"7562d01e1fd1b72a70fd3c392145a1dbebb28155":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/BranchOverviewRenderer.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/MeasuresPanelNoNewCode-test.tsx":"MODIFY","sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/BranchOverview.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/BranchOverviewRenderer-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/BranchOverview-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/MeasuresPanel.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/__snapshots__\/BranchOverviewRenderer-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/__snapshots__\/MeasuresPanelNoNewCode-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/MeasuresPanelNoNewCode.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/helpers\/branch-like.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/__snapshots__\/BranchOverview-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/__snapshots__\/MeasuresPanel-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/App.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/MeasuresPanel-test.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/BranchOverviewRenderer.tsx":[{"add":["23","import { Branch } from '..\/..\/..\/types\/branch-like';","35","  branch?: Branch;","53","    branch,","75","          <NoCodeWarning branchLike={branch} component={component} measures={measures} \/>","90","                  branch={branch}","99","                  branchLike={branch}"],"delete":["23","import { BranchLike } from '..\/..\/..\/types\/branch-like';","35","  branchLike?: BranchLike;","53","    branchLike,","75","          <NoCodeWarning branchLike={branchLike} component={component} measures={measures} \/>","90","                  branchLike={branchLike}","99","                  branchLike={branchLike}"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/MeasuresPanelNoNewCode-test.tsx":[{"add":["86","  expect(","87","    shallowRender({","88","      period: mockPeriod({ date: undefined, mode: 'REFERENCE_BRANCH', parameter: 'master' })","89","    })","90","  ).toMatchSnapshot();","91","  expect(","92","    shallowRender({","93","      period: mockPeriod({ date: undefined, mode: 'REFERENCE_BRANCH', parameter: 'notsame' })","94","    })","95","  ).toMatchSnapshot();","108","    <MeasuresPanelNoNewCode branch={mockMainBranch()} component={mockComponent()} {...props} \/>"],"delete":["98","    <MeasuresPanelNoNewCode branchLike={mockMainBranch()} component={mockComponent()} {...props} \/>"]}],"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["2770","overview.measures.same_reference.explanation=This branch is configured to use itself as reference branch. It will never have New Code.","2771","overview.measures.bad_reference.explanation=This branch could not be compared to its reference branch. See the SCM or analysis report for more details. "],"delete":["2770","overview.measures.bad_setting.explanation=This branch is configured to use itself as reference branch. It will never have New Code."]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/BranchOverview.tsx":[{"add":["45","import { Branch, BranchLike } from '..\/..\/..\/types\/branch-like';","55","  branch?: Branch;","97","      !isSameBranchLike(this.props.branch, prevProps.branch)","117","    const { branch, component } = this.props;","123","      ...getBranchLikeQuery(branch)","127","      branch","131","      (branch && !isMainBranch(branch) && getBranchLikeDisplayName(branch)) || undefined;","213","      branch,","220","      ...getBranchLikeQuery(branch)","230","    this.loadMeasuresAndMeta(key, branch, metricKeys).then(","243","            branchLike: branch","293","    const { branch, component } = this.props;","300","      ...getBranchLikeQuery(branch),","323","    const { branch } = this.props;","326","      ...getBranchLikeQuery(branch),","390","    const { branch, component } = this.props;","415","        branch={branch}"],"delete":["45","import { BranchLike } from '..\/..\/..\/types\/branch-like';","55","  branchLike?: BranchLike;","97","      !isSameBranchLike(this.props.branchLike, prevProps.branchLike)","117","    const { branchLike, component } = this.props;","123","      ...getBranchLikeQuery(branchLike)","127","      branchLike","131","      (branchLike && !isMainBranch(branchLike) && getBranchLikeDisplayName(branchLike)) ||","132","      undefined;","214","      branchLike,","221","      ...getBranchLikeQuery(branchLike)","231","    this.loadMeasuresAndMeta(key, branchLike, metricKeys).then(","244","            branchLike","294","    const { branchLike, component } = this.props;","301","      ...getBranchLikeQuery(branchLike),","324","    const { branchLike } = this.props;","327","      ...getBranchLikeQuery(branchLike),","391","    const { branchLike, component } = this.props;","416","        branchLike={branchLike}"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/BranchOverviewRenderer-test.tsx":[{"add":["35","      branch={mockMainBranch()}"],"delete":["35","      branchLike={mockMainBranch()}"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/BranchOverview-test.tsx":[{"add":["256","    const wrapper = shallowRender({ branch: mockBranch(), component });","360","      branch={mockMainBranch()}"],"delete":["256","    const wrapper = shallowRender({ branchLike: mockBranch(), component });","360","      branchLike={mockMainBranch()}"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/MeasuresPanel.tsx":[{"add":["27","import { Branch } from '..\/..\/..\/types\/branch-like';","40","  branch?: Branch;","53","  const { appLeak, branch, component, loading, measures = [], period } = props;","109","              <MeasuresPanelNoNewCode branch={branch} component={component} period={period} \/>","119","                    branchLike={branch}","135","                        branchLike={branch}","146","                            branchLike={branch}","157","                      branchLike={branch}","168","                          branchLike={branch}"],"delete":["27","import { BranchLike } from '..\/..\/..\/types\/branch-like';","40","  branchLike?: BranchLike;","53","  const { appLeak, branchLike, component, loading, measures = [], period } = props;","109","              <MeasuresPanelNoNewCode","110","                branchLike={branchLike}","111","                component={component}","112","                period={period}","113","              \/>","123","                    branchLike={branchLike}","139","                        branchLike={branchLike}","150","                            branchLike={branchLike}","161","                      branchLike={branchLike}","172","                          branchLike={branchLike}"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/__snapshots__\/BranchOverviewRenderer-test.tsx.snap":[{"add":["52","            branch={","267","            branch={"],"delete":["52","            branchLike={","267","            branchLike={"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/__snapshots__\/MeasuresPanelNoNewCode-test.tsx.snap":[{"add":["28","      overview.measures.bad_reference.explanation","29","    <\/p>","30","    <p>","31","      <FormattedMessage","32","        defaultMessage=\"overview.measures.empty_link\"","33","        id=\"overview.measures.empty_link\"","34","        values={","35","          Object {","36","            \"learn_more_link\": <Link","37","              onlyActiveOnIndex={false}","38","              style={Object {}}","39","              to=\"\/documentation\/user-guide\/clean-as-you-code\/\"","40","            >","41","              learn_more","42","            <\/Link>,","43","          }","44","        }","45","      \/>","77","      overview.measures.bad_reference.explanation","81","        defaultMessage=\"overview.measures.empty_link\"","82","        id=\"overview.measures.empty_link\"","85","            \"learn_more_link\": <Link","88","              to=\"\/documentation\/user-guide\/clean-as-you-code\/\"","90","              learn_more","91","            <\/Link>,","92","          }","93","        }","94","      \/>","95","    <\/p>","96","  <\/div>","97","<\/div>","98","`;","99","","100","exports[`should render the default message 5`] = `","101","<div","102","  className=\"display-flex-center display-flex-justify-center\"","103","  style={","104","    Object {","105","      \"height\": 500,","106","    }","107","  }","108",">","109","  <img","110","    alt=\"\"","111","    className=\"spacer-right\"","112","    height={52}","113","    src=\"\/images\/source-code.svg\"","114","  \/>","115","  <div","116","    className=\"big-spacer-left text-muted\"","117","    style={","118","      Object {","119","        \"maxWidth\": 500,","120","      }","121","    }","122","  >","123","    <p","124","      className=\"spacer-bottom big-spacer-top big\"","125","    >","126","      overview.measures.same_reference.explanation","127","    <\/p>","128","  <\/div>","129","<\/div>","130","`;","131","","132","exports[`should render the default message 6`] = `","133","<div","134","  className=\"display-flex-center display-flex-justify-center\"","135","  style={","136","    Object {","137","      \"height\": 500,","138","    }","139","  }","140",">","141","  <img","142","    alt=\"\"","143","    className=\"spacer-right\"","144","    height={52}","145","    src=\"\/images\/source-code.svg\"","146","  \/>","147","  <div","148","    className=\"big-spacer-left text-muted\"","149","    style={","150","      Object {","151","        \"maxWidth\": 500,","152","      }","153","    }","154","  >","155","    <p","156","      className=\"spacer-bottom big-spacer-top big\"","157","    >","158","      overview.measures.bad_reference.explanation","159","    <\/p>","160","    <p>","161","      <FormattedMessage","162","        defaultMessage=\"overview.measures.empty_link\"","163","        id=\"overview.measures.empty_link\"","164","        values={","165","          Object {","166","            \"learn_more_link\": <Link","167","              onlyActiveOnIndex={false}","168","              style={Object {}}","169","              to=\"\/documentation\/user-guide\/clean-as-you-code\/\"","170","            >","171","              learn_more"],"delete":["28","      overview.measures.bad_setting.explanation","60","      overview.measures.bad_setting.explanation","64","        defaultMessage=\"overview.measures.bad_setting.link\"","65","        id=\"overview.measures.bad_setting.link\"","68","            \"setting_link\": <Link","71","              to={","72","                Object {","73","                  \"pathname\": \"\/project\/baseline\",","74","                  \"query\": Object {","75","                    \"id\": \"my-project\",","76","                  },","77","                }","78","              }","80","              settings.new_code_period.category"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/MeasuresPanelNoNewCode.tsx":[{"add":["25","import { Branch } from '..\/..\/..\/types\/branch-like';","29","  branch?: Branch;","35","  const { branch, component, period } = props;","38","","39","  const hasBadReferenceBranch =","40","    !isApp && !!period && !period.date && period.mode === 'REFERENCE_BRANCH';","47","  const hasBadNewCodeSettingSameRef = hasBadReferenceBranch && branch?.name === period?.parameter;","48","","49","  const badExplanationKey = hasBadReferenceBranch","50","    ? hasBadNewCodeSettingSameRef","51","      ? 'overview.measures.same_reference.explanation'","52","      : 'overview.measures.bad_reference.explanation'","53","    : 'overview.measures.empty_explanation';","66","        <p className=\"spacer-bottom big-spacer-top big\">{translate(badExplanationKey)}<\/p>","67","        {hasBadNewCodeSettingSameRef ? (","78","                        query: { id: component.key, ...getBranchLikeQuery(branch) }"],"delete":["25","import { BranchLike } from '..\/..\/..\/types\/branch-like';","29","  branchLike?: BranchLike;","35","  const { branchLike, component, period } = props;","44","  const hasBadNewCodeSetting =","45","    !isApp && !!period && !period.date && period.mode === 'REFERENCE_BRANCH';","58","        <p className=\"spacer-bottom big-spacer-top big\">","59","          {hasBadNewCodeSetting","60","            ? translate('overview.measures.bad_setting.explanation')","61","            : translate('overview.measures.empty_explanation')}","62","        <\/p>","63","        {hasBadNewCodeSetting ? (","74","                        query: { id: component.key, ...getBranchLikeQuery(branchLike) }"]}],"server\/sonar-web\/src\/main\/js\/helpers\/branch-like.ts":[{"add":[],"delete":["61","export function getBranchQualityGateColor(status: string) {","62","  let indicatorColor = 'gray';","63","  if (status === 'ERROR') {","64","    indicatorColor = 'red';","65","  } else if (status === 'WARN') {","66","    indicatorColor = 'orange';","67","  } else if (status === 'OK') {","68","    indicatorColor = 'green';","69","  }","70","  return indicatorColor;","71","}","72",""]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/__snapshots__\/BranchOverview-test.tsx.snap":[{"add":["45","  branch={","967","  branch={","1882","  branch={"],"delete":["45","  branchLike={","967","  branchLike={","1882","  branchLike={"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/__snapshots__\/MeasuresPanel-test.tsx.snap":[{"add":["3256","      branch={","3362","      branch={","3905","      branch={"],"delete":["3256","      branchLike={","3362","      branchLike={","3905","      branchLike={"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/App.tsx":[{"add":["69","          <BranchOverview branch={branchLike} component={component} \/>"],"delete":["69","          <BranchOverview branchLike={branchLike} component={component} \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/MeasuresPanel-test.tsx":[{"add":["62","    branch: mockBranch({ name: 'own-reference' }),","94","      branch={mockMainBranch()}"],"delete":["62","    branchLike: mockBranch({ name: 'own-reference' }),","94","      branchLike={mockMainBranch()}"]}]}},"860d96245089300ba787786b7266ea687c3df431":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/styles.css":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/styles.css":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/ComponentSourceSnippetViewer.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/styles.css":[{"add":[],"delete":["295",".issue-location {","296","  display: inline-block;","297","  vertical-align: top;","298","  line-height: 18px;","299","  height: 18px;","300","  box-sizing: border-box;","301","  background-color: var(--issueBgColor);","302","  transition: background-color 0.3s ease;","303","}","304",""]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/styles.css":[{"add":["306",".issue-location {","307","  display: inline-block;","308","  vertical-align: top;","309","  line-height: 18px;","310","  height: 18px;","311","  box-sizing: border-box;","312","  background-color: var(--issueBgColor);","313","  transition: background-color 0.3s ease;","314","}","315",""],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/ComponentSourceSnippetViewer.tsx":[{"add":["216","    displayDuplications,","225","    displayDuplications: boolean;","249","        displayDuplications={displayDuplications}","322","    const displayDuplications = snippet.some(s => !!s.duplicated);","323","","339","                displayDuplications,"],"delete":["247","        displayDuplications={!!line.duplicated}"]}]}},"3365182508367bfcc080452d7cf932f9cfbf8c1b":{"changes":{"server\/sonar-docs\/src\/components\/Sidebar.tsx":"MODIFY"},"diff":{"server\/sonar-docs\/src\/components\/Sidebar.tsx":[{"add":["80","    const headers = new Headers([","81","      ['Cache-Control', 'no-cache'],","82","      ['Pragma', 'no-cache']","83","    ]);","84","    fetch('\/DocsVersions.json', { headers })"],"delete":["80","    fetch('\/DocsVersions.json')"]}]}},"2be628875fdcf113cb8a0cbe458816a067a3a5f7":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/styles.css":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/styles.css":[{"add":[],"delete":["53","  font-size: var(--smallFontSize);"]}]}},"ba1f0d9998d30b5a22f969604625397fcb943f39":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/ComponentSourceSnippetViewer.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/CrossComponentSourceViewerWrapper.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/ComponentSourceSnippetViewer.tsx":[{"add":["237","        branchLike={this.props.branchLike}"],"delete":["237","        branchLike={undefined}"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/CrossComponentSourceViewerWrapper.tsx":[{"add":["24","import { SourceViewerContext } from '..\/..\/..\/components\/SourceViewer\/SourceViewerContext';","224","            <SourceViewerContext.Provider","226","              value={{ branchLike: this.props.branchLike, file: snippetGroup.component }}>","227","              <ComponentSourceSnippetViewer","228","                branchLike={this.props.branchLike}","229","                highlightedLocationMessage={this.props.highlightedLocationMessage}","230","                issue={this.props.issue}","231","                issuePopup={this.state.issuePopup}","232","                issuesByLine={issuesByComponent[snippetGroup.component.key] || {}}","233","                last={i === locationsByComponent.length - 1}","234","                loadDuplications={this.fetchDuplications}","235","                locations={snippetGroup.locations || []}","236","                onIssueChange={this.props.onIssueChange}","237","                onIssuePopupToggle={this.handleIssuePopupToggle}","238","                onLinePopupToggle={this.handleLinePopupToggle}","239","                onLocationSelect={this.props.onLocationSelect}","240","                renderDuplicationPopup={this.renderDuplicationPopup}","241","                scroll={this.props.scroll}","242","                snippetGroup={snippetGroup}","243","                {...componentProps}","244","              \/>","245","            <\/SourceViewerContext.Provider>"],"delete":["223","            <ComponentSourceSnippetViewer","224","              branchLike={this.props.branchLike}","225","              highlightedLocationMessage={this.props.highlightedLocationMessage}","226","              issue={this.props.issue}","227","              issuePopup={this.state.issuePopup}","228","              issuesByLine={issuesByComponent[snippetGroup.component.key] || {}}","230","              last={i === locationsByComponent.length - 1}","231","              loadDuplications={this.fetchDuplications}","232","              locations={snippetGroup.locations || []}","233","              onIssueChange={this.props.onIssueChange}","234","              onIssuePopupToggle={this.handleIssuePopupToggle}","235","              onLinePopupToggle={this.handleLinePopupToggle}","236","              onLocationSelect={this.props.onLocationSelect}","237","              renderDuplicationPopup={this.renderDuplicationPopup}","238","              scroll={this.props.scroll}","239","              snippetGroup={snippetGroup}","240","              {...componentProps}","241","            \/>"]}]}},"d3fdfb757079df44a3c5c03dee3710339b946b97":{"changes":{"\/dev\/null":"DELETE","server\/sonar-web\/src\/main\/js\/apps\/overview\/utils.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/__tests__\/__snapshots__\/QualityGateCondition-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/QualityGateCondition.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/measure\/Measure.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/MeasurementLabel.tsx":"MODIFY"},"diff":{"\/dev\/null":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/utils.ts":[{"add":[],"delete":["27","import { QualityGateStatusConditionEnhanced } from '..\/..\/types\/quality-gates';","221","","222","\/*","223"," * Extract a specific metric's threshold from the quality gate details","224"," *\/","225","export function getThreshold(","226","  measures: T.MeasureEnhanced[],","227","  metricKey: MetricKey | string","228","): number | undefined {","229","  const detailsMeasure = measures.find(","230","    measure => measure.metric.key === MetricKey.quality_gate_details","231","  );","232","  if (detailsMeasure && detailsMeasure.value) {","233","    const details = safeParse(detailsMeasure.value);","234","    const conditions: QualityGateStatusConditionEnhanced[] = details.conditions || [];","235","","236","    const condition = conditions.find(c => c.metric === metricKey);","237","    if (condition) {","238","      return parseFloat(","239","        (condition.level === 'ERROR' ? condition.error : condition.warning) as string","240","      );","241","    }","242","  }","243","  return undefined;","244","}","245","","246","function safeParse(json: string) {","247","  try {","248","    return JSON.parse(json);","249","  } catch (e) {","250","    \/\/ eslint-disable-next-line no-console","251","    console.error(e);","252","    return {};","253","  }","254","}"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/__tests__\/__snapshots__\/QualityGateCondition-test.tsx.snap":[{"add":["26","        decimals={2}","68","        decimals={2}","121","        decimals={2}","174","        decimals={2}","216","        decimals={2}","268","        decimals={2}","320","        decimals={2}","373","        decimals={2}","424","        decimals={2}"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/QualityGateCondition.tsx":[{"add":["24","import { formatMeasure } from 'sonar-ui-common\/helpers\/measures';","136","            decimals={2}"],"delete":["24","import {","25","  formatMeasure,","26","  getMinDecimalsCountToBeDistinctFromThreshold","27","} from 'sonar-ui-common\/helpers\/measures';","130","    let decimals: number | undefined = undefined;","134","    } else if (metric.type === 'PERCENT') {","135","      decimals = getMinDecimalsCountToBeDistinctFromThreshold(","136","        parseFloat(actual),","137","        parseFloat(threshold)","138","      );","145","            decimals={decimals}"]}],"server\/sonar-web\/src\/main\/js\/components\/measure\/Measure.tsx":[{"add":["52","    const formattedValue = formatMeasure(value, metricType, {","53","      decimals,","54","      omitExtraDecimalZeros: metricType === 'PERCENT'","55","    });"],"delete":["52","    const formattedValue = formatMeasure(value, metricType, { decimals });"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/MeasurementLabel.tsx":[{"add":["22","import { formatMeasure } from 'sonar-ui-common\/helpers\/measures';","103","        {formatMeasure(value, 'PERCENT', { decimals: 2, omitExtraDecimalZeros: true })}"],"delete":["22","import {","23","  formatMeasure,","24","  getMinDecimalsCountToBeDistinctFromThreshold","25","} from 'sonar-ui-common\/helpers\/measures';","35","  getThreshold,","107","        {formatMeasure(value, 'PERCENT', {","108","          decimals: getMinDecimalsCountToBeDistinctFromThreshold(","109","            parseFloat(value),","110","            getThreshold(measures, metric)","111","          )","112","        })}"]}]}},"44e7ca131970744ed1b667048a895bb622804196":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/user\/UserUpdaterTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/user\/UserUpdater.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/user\/UserUpdaterTest.java":[{"add":["253","      assertThat(e.errors().messages()).containsOnly(Message.of(Validation.IS_TOO_SHORT_MESSAGE, \"Login\", 3));"],"delete":["253","      assertThat(e.errors().messages()).containsOnly(Message.of(Validation.IS_TOO_SHORT_MESSAGE, \"Login\", 2));"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/user\/UserUpdater.java":[{"add":["60","  private static final int LOGIN_MIN_LENGTH = 3;","61","  private static final int LOGIN_MAX_LENGTH = 255;","62","","216","      if (login.length() < LOGIN_MIN_LENGTH) {","217","        messages.add(Message.of(Validation.IS_TOO_SHORT_MESSAGE, LOGIN_PARAM, LOGIN_MIN_LENGTH));","218","      } else if (login.length() >= LOGIN_MAX_LENGTH) {","219","        messages.add(Message.of(Validation.IS_TOO_LONG_MESSAGE, LOGIN_PARAM, LOGIN_MAX_LENGTH));"],"delete":["213","      if (login.length() <= 2) {","214","        messages.add(Message.of(Validation.IS_TOO_SHORT_MESSAGE, LOGIN_PARAM, 2));","215","      } else if (login.length() >= 255) {","216","        messages.add(Message.of(Validation.IS_TOO_LONG_MESSAGE, LOGIN_PARAM, 255));"]}]}},"86b158854981eefac8955ece83e7b3d9761583ba":{"changes":{"sonar-db\/src\/main\/resources\/org\/sonar\/db\/version\/schema-h2.ddl":"MODIFY","server\/sonar-web\/src\/main\/webapp\/WEB-INF\/db\/migrate\/939_move_duplications_id_to_bigint.rb":"ADD","sonar-db\/src\/main\/java\/org\/sonar\/db\/version\/DatabaseVersion.java":"MODIFY","sonar-db\/src\/main\/resources\/org\/sonar\/db\/version\/rows-h2.sql":"MODIFY"},"diff":{"sonar-db\/src\/main\/resources\/org\/sonar\/db\/version\/schema-h2.ddl":[{"add":["204","  \"ID\" BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),"],"delete":["204","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),"]}],"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/db\/migrate\/939_move_duplications_id_to_bigint.rb":[{"add":[],"delete":[]}],"sonar-db\/src\/main\/java\/org\/sonar\/db\/version\/DatabaseVersion.java":[{"add":["31","  public static final int LAST_VERSION = 939;"],"delete":["31","  public static final int LAST_VERSION = 938;"]}],"sonar-db\/src\/main\/resources\/org\/sonar\/db\/version\/rows-h2.sql":[{"add":["359","INSERT INTO SCHEMA_MIGRATIONS(VERSION) VALUES ('939');"],"delete":[]}]}},"1241f18a7b389336ce1eb98fe024f8db0bc5c627":{"changes":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/DefaultInputFile.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/TestInputFileBuilder.java":"MODIFY","sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/batch\/sensor\/symbol\/internal\/DefaultSymbolTableTest.java":"MODIFY","sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/batch\/fs\/internal\/FileMetadataTest.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/FileMetadata.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/charhandler\/LineOffsetCounter.java":"MODIFY","plugins\/sonar-xoo-plugin\/src\/test\/java\/org\/sonar\/xoo\/rule\/AnalysisErrorSensorTest.java":"MODIFY","sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/batch\/sensor\/highlighting\/internal\/DefaultHighlightingTest.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/scan\/filesystem\/MetadataGeneratorTest.java":"MODIFY","sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/batch\/sensor\/cpd\/internal\/DefaultCpdTokensTest.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/filesystem\/InputFileBuilder.java":"MODIFY","sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/batch\/fs\/internal\/DefaultInputFileTest.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/report\/ComponentsPublisherTest.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/DefaultIndexedFile.java":"MODIFY","server\/sonar-process\/src\/test\/java\/org\/sonar\/process\/FileUtils2Test.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/Metadata.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/ComponentsPublisher.java":"MODIFY","sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/batch\/fs\/internal\/MetadataTest.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/DefaultFileLinesContextTest.java":"MODIFY"},"diff":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/DefaultInputFile.java":[{"add":["205","    return metadata.isEmpty();","232","  public int[] originalLineStartOffsets() {","234","    Preconditions.checkState(metadata.originalLineStartOffsets() != null, \"InputFile is not properly initialized.\");","235","    Preconditions.checkState(metadata.originalLineStartOffsets().length == metadata.lines(),","236","      \"InputFile is not properly initialized. 'originalLineStartOffsets' property length should be equal to 'lines'\");","237","    return metadata.originalLineStartOffsets();","238","  }","239","","240","  public int[] originalLineEndOffsets() {","241","    checkMetadata();","242","    Preconditions.checkState(metadata.originalLineEndOffsets() != null, \"InputFile is not properly initialized.\");","243","    Preconditions.checkState(metadata.originalLineEndOffsets().length == metadata.lines(),","244","            \"InputFile is not properly initialized. 'originalLineEndOffsets' property length should be equal to 'lines'\");","245","    return metadata.originalLineEndOffsets();","299","    int startLineOffset = originalLineStartOffsets()[line - 1];","300","    \/\/ In case the global offset is between \\r and \\n, move the pointer to a valid location","301","    return new DefaultTextPointer(line, Math.min(globalOffset, originalLineEndOffsets()[line -1]) - startLineOffset);","324","    return originalLineEndOffsets()[line - 1] - originalLineStartOffsets()[line - 1];","334","    return Math.abs(Arrays.binarySearch(originalLineStartOffsets(), globalOffset) + 1);"],"delete":["205","    return metadata.lastValidOffset() == 0;","216","    Preconditions.checkState(metadata.lastValidOffset() >= 0, \"InputFile is not properly initialized.\");","233","  public int[] originalLineOffsets() {","235","    Preconditions.checkState(metadata.originalLineOffsets() != null, \"InputFile is not properly initialized.\");","236","    Preconditions.checkState(metadata.originalLineOffsets().length == metadata.lines(),","237","      \"InputFile is not properly initialized. 'originalLineOffsets' property length should be equal to 'lines'\");","238","    return metadata.originalLineOffsets();","292","    int startLineOffset = originalLineOffsets()[line - 1];","293","    return new DefaultTextPointer(line, globalOffset - startLineOffset);","316","    return lastValidGlobalOffsetForLine(line) - originalLineOffsets()[line - 1];","317","  }","318","","319","  private int lastValidGlobalOffsetForLine(int line) {","320","    return line < this.metadata.lines() ? (originalLineOffsets()[line] - 1) : lastValidOffset();","330","    return Math.abs(Arrays.binarySearch(originalLineOffsets(), globalOffset) + 1);"]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/TestInputFileBuilder.java":[{"add":["69","  private int[] originalLineStartOffsets = new int[0];","70","  private int[] originalLineEndOffsets = new int[0];","71","  private int lastValidOffset = -1;","179","  public TestInputFileBuilder setLastValidOffset(int lastValidOffset) {","180","    this.lastValidOffset = lastValidOffset;","181","    return this;","182","  }","183","","184","  public TestInputFileBuilder setOriginalLineStartOffsets(int[] originalLineStartOffsets) {","185","    this.originalLineStartOffsets = originalLineStartOffsets;","186","    return this;","187","  }","188","","189","  public TestInputFileBuilder setOriginalLineEndOffsets(int[] originalLineEndOffsets) {","190","    this.originalLineEndOffsets = originalLineEndOffsets;","204","    this.setOriginalLineStartOffsets(metadata.originalLineStartOffsets());","205","    this.setOriginalLineEndOffsets(metadata.originalLineEndOffsets());","221","      f -> f.setMetadata(new Metadata(lines, nonBlankLines, hash, originalLineStartOffsets, originalLineEndOffsets, lastValidOffset)),"],"delete":["67","  private int lastValidOffset = -1;","70","  private int[] originalLineOffsets = new int[0];","157","  public TestInputFileBuilder setLastValidOffset(int lastValidOffset) {","158","    this.lastValidOffset = lastValidOffset;","159","    return this;","160","  }","161","","183","  public TestInputFileBuilder setOriginalLineOffsets(int[] originalLineOffsets) {","184","    this.originalLineOffsets = originalLineOffsets;","198","    this.setOriginalLineOffsets(metadata.originalLineOffsets());","214","      f -> f.setMetadata(new Metadata(lines, nonBlankLines, hash, originalLineOffsets, lastValidOffset)),"]}],"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/batch\/sensor\/symbol\/internal\/DefaultSymbolTableTest.java":[{"add":["39","    .setOriginalLineStartOffsets(new int[] {0, 50})","40","    .setOriginalLineEndOffsets(new int[] {49, 100})","41","    .setLastValidOffset(101)"],"delete":["39","    .setOriginalLineOffsets(new int[] {0, 50})","40","    .setLastValidOffset(100)"]}],"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/batch\/fs\/internal\/FileMetadataTest.java":[{"add":["61","    assertThat(metadata.originalLineStartOffsets()).containsOnly(0);","62","    assertThat(metadata.originalLineEndOffsets()).containsOnly(0);","63","    assertThat(metadata.isEmpty()).isTrue();","75","    assertThat(metadata.originalLineStartOffsets()).containsOnly(0, 5, 10);","76","    assertThat(metadata.originalLineEndOffsets()).containsOnly(3, 8, 13);","77","    assertThat(metadata.isEmpty()).isFalse();","88","    assertThat(metadata.originalLineStartOffsets()).containsOnly(0, 9);","100","    assertThat(metadata.originalLineStartOffsets()).containsOnly(0, 5, 10, 18);","111","    assertThat(metadata.originalLineStartOffsets()).containsOnly(0, 5, 10, 18);","123","    assertThat(metadata.originalLineStartOffsets()).containsOnly(0, 4, 8);","124","    assertThat(metadata.originalLineEndOffsets()).containsOnly(3, 7, 11);","125","    assertThat(metadata.isEmpty()).isFalse();","137","    assertThat(metadata.originalLineStartOffsets()).containsOnly(0, 4, 8, 12);","138","    assertThat(metadata.originalLineEndOffsets()).containsOnly(3, 7, 11, 12);","150","    assertThat(metadata.originalLineStartOffsets()).containsOnly(0, 4, 8);","151","    assertThat(metadata.originalLineEndOffsets()).containsOnly(3, 7, 11);","163","    assertThat(metadata.originalLineStartOffsets()).containsOnly(0, 4, 8, 12);","164","    assertThat(metadata.originalLineEndOffsets()).containsOnly(3, 7, 11, 12);","176","    assertThat(metadata.originalLineStartOffsets()).containsOnly(0, 4, 9, 13);","177","    assertThat(metadata.originalLineEndOffsets()).containsOnly(3, 7, 12, 13);","189","    assertThat(metadata.originalLineStartOffsets()).containsOnly(0, 4, 5, 6);","190","    assertThat(metadata.originalLineEndOffsets()).containsOnly(3, 4, 5, 9);","202","    assertThat(metadata.originalLineStartOffsets()).containsOnly(0, 4, 9);","203","    assertThat(metadata.originalLineEndOffsets()).containsOnly(3, 7, 12);","215","    assertThat(metadata.originalLineStartOffsets()).containsOnly(0, 1, 5, 10);","216","    assertThat(metadata.originalLineEndOffsets()).containsOnly(0, 4, 8, 13);"],"delete":["61","    assertThat(metadata.originalLineOffsets()).containsOnly(0);","62","    assertThat(metadata.lastValidOffset()).isEqualTo(0);","74","    assertThat(metadata.originalLineOffsets()).containsOnly(0, 5, 10);","75","    assertThat(metadata.lastValidOffset()).isEqualTo(13);","86","    assertThat(metadata.originalLineOffsets()).containsOnly(0, 9);","98","    assertThat(metadata.originalLineOffsets()).containsOnly(0, 5, 10, 18);","109","    assertThat(metadata.originalLineOffsets()).containsOnly(0, 5, 10, 18);","121","    assertThat(metadata.originalLineOffsets()).containsOnly(0, 4, 8);","122","    assertThat(metadata.lastValidOffset()).isEqualTo(11);","134","    assertThat(metadata.originalLineOffsets()).containsOnly(0, 4, 8, 12);","135","    assertThat(metadata.lastValidOffset()).isEqualTo(12);","147","    assertThat(metadata.originalLineOffsets()).containsOnly(0, 4, 8);","148","    assertThat(metadata.lastValidOffset()).isEqualTo(11);","160","    assertThat(metadata.originalLineOffsets()).containsOnly(0, 4, 8, 12);","161","    assertThat(metadata.lastValidOffset()).isEqualTo(12);","173","    assertThat(metadata.originalLineOffsets()).containsOnly(0, 4, 9, 13);","185","    assertThat(metadata.originalLineOffsets()).containsOnly(0, 4, 5, 6);","197","    assertThat(metadata.originalLineOffsets()).containsOnly(0, 4, 9);","209","    assertThat(metadata.originalLineOffsets()).containsOnly(0, 1, 5, 10);"]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/FileMetadata.java":[{"add":["66","    return new Metadata(lineCounter.lines(), lineCounter.nonBlankLines(), fileHashComputer.getHash(), lineOffsetCounter.getOriginalLineStartOffsets(),","67","      lineOffsetCounter.getOriginalLineEndOffsets(),","89","    return new Metadata(lineCounter.lines(), lineCounter.nonBlankLines(), fileHashComputer.getHash(), lineOffsetCounter.getOriginalLineStartOffsets(),","90","      lineOffsetCounter.getOriginalLineEndOffsets(),"],"delete":["66","    return new Metadata(lineCounter.lines(), lineCounter.nonBlankLines(), fileHashComputer.getHash(), lineOffsetCounter.getOriginalLineOffsets(),","88","    return new Metadata(lineCounter.lines(), lineCounter.nonBlankLines(), fileHashComputer.getHash(), lineOffsetCounter.getOriginalLineOffsets(),"]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/charhandler\/LineOffsetCounter.java":[{"add":["22","  private long currentOriginalLineStartOffset = 0;","23","  private long currentOriginalLineEndOffset = 0;","24","  private final IntArrayList originalLineStartOffsets = new IntArrayList();","25","  private final IntArrayList originalLineEndOffsets = new IntArrayList();","29","    originalLineStartOffsets.add(0);","34","    currentOriginalLineStartOffset++;","35","  }","36","","37","  @Override","38","  public void handleIgnoreEoL(char c) {","39","    currentOriginalLineEndOffset++;","44","    if (currentOriginalLineStartOffset > Integer.MAX_VALUE) {","45","      throw new IllegalStateException(\"File is too big: \" + currentOriginalLineStartOffset);","47","    originalLineStartOffsets.add((int) currentOriginalLineStartOffset);","48","    originalLineEndOffsets.add((int) currentOriginalLineEndOffset);","49","    currentOriginalLineEndOffset = currentOriginalLineStartOffset;","54","    originalLineEndOffsets.add((int) currentOriginalLineEndOffset);","55","    lastValidOffset = currentOriginalLineStartOffset;","58","  public int[] getOriginalLineStartOffsets() {","59","    return originalLineStartOffsets.trimAndGet();","60","  }","61","","62","  public int[] getOriginalLineEndOffsets() {","63","    return originalLineEndOffsets.trimAndGet();"],"delete":["22","  private long currentOriginalOffset = 0;","23","  private IntArrayList originalLineOffsets = new IntArrayList();","27","    originalLineOffsets.add(0);","32","    currentOriginalOffset++;","37","    if (currentOriginalOffset > Integer.MAX_VALUE) {","38","      throw new IllegalStateException(\"File is too big: \" + currentOriginalOffset);","40","    originalLineOffsets.add((int) currentOriginalOffset);","45","    lastValidOffset = currentOriginalOffset;","48","  public int[] getOriginalLineOffsets() {","49","    return originalLineOffsets.trimAndGet();"]}],"plugins\/sonar-xoo-plugin\/src\/test\/java\/org\/sonar\/xoo\/rule\/AnalysisErrorSensorTest.java":[{"add":["67","    int[] startOffsets = {10, 20, 30, 40};","68","    int[] endOffsets = {19, 29, 39, 49};","71","      .setOriginalLineStartOffsets(startOffsets)","72","      .setOriginalLineEndOffsets(endOffsets)"],"delete":["67","    int[] offsets = {10, 20, 30, 40};","70","      .setOriginalLineOffsets(offsets)"]}],"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/batch\/sensor\/highlighting\/internal\/DefaultHighlightingTest.java":[{"add":["43","    .setOriginalLineStartOffsets(new int[] {0, 50})","44","    .setOriginalLineEndOffsets(new int[] {49, 100})","45","    .setLastValidOffset(101)"],"delete":["43","    .setOriginalLineOffsets(new int[] {0, 50})","44","    .setLastValidOffset(100)"]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/scan\/filesystem\/MetadataGeneratorTest.java":[{"add":["109","    assertThat(inputFile.originalLineStartOffsets()).containsOnly(0, 4, 9);","110","    assertThat(inputFile.originalLineEndOffsets()).containsOnly(3, 7, 12);"],"delete":["109","    assertThat(inputFile.originalLineOffsets()).containsOnly(0, 4, 9);"]}],"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/batch\/sensor\/cpd\/internal\/DefaultCpdTokensTest.java":[{"add":["39","    .setOriginalLineStartOffsets(new int[] {0, 50})","40","    .setOriginalLineEndOffsets(new int[] {49, 100})","41","    .setLastValidOffset(101)","149","      assertThat(e).hasMessage(\"Tokens of file src\/Foo.java should be provided in order.\\n\" +"],"delete":["39","    .setOriginalLineOffsets(new int[] {0, 50})","40","    .setLastValidOffset(100)","148","      assertThat(e).hasMessage(\"Tokens of file src\" + File.separator + \"Foo.java should be provided in order.\\n\" +"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/filesystem\/InputFileBuilder.java":[{"add":["57","      projectBaseDir.relativize(absolutePath).toString(),","58","      moduleBaseDir.relativize(absolutePath).toString(),"],"delete":["57","      PathUtils.sanitize(projectBaseDir.relativize(absolutePath).toString()),","58","      PathUtils.sanitize(moduleBaseDir.relativize(absolutePath).toString()),"]}],"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/batch\/fs\/internal\/DefaultInputFileTest.java":[{"add":["71","    Metadata metadata = new Metadata(42, 42, \"\", new int[0], new int[0], 10);","105","    Metadata metadata = new Metadata(42, 30, \"\", new int[0], new int[0], 10);","131","    Metadata metadata = new Metadata(42, 30, \"\", new int[0], new int[0], 10);","169","    Metadata metadata = new Metadata(2, 2, \"\", new int[] {0, 10}, new int[] {9, 15}, 16);","206","    Metadata metadata = new Metadata(2, 2, \"\", new int[] {0, 10}, new int[] {8, 15}, 16);","212","    \/\/ Ignore eol characters","213","    assertThat(file.newPointer(9).lineOffset()).isEqualTo(8);","221","    assertThat(file.newPointer(16).line()).isEqualTo(2);","222","    \/\/ Ignore eol characters","223","    assertThat(file.newPointer(16).lineOffset()).isEqualTo(5);","224","","233","      file.newPointer(17);","236","      assertThat(e).hasMessage(\"17 is not a valid offset for file src\/Foo.php. Max offset is 16\");","292","    Metadata metadata = new Metadata(2, 2, \"\", new int[] {0, 10}, new int[] {9, 15}, 16);","303","    Metadata metadata = new Metadata(2, 2, \"\", new int[] {0, 10}, new int[] {9, 15}, 16);"],"delete":["71","    Metadata metadata = new Metadata(42, 42, \"\", new int[0], 0);","105","    Metadata metadata = new Metadata(42, 30, \"\", new int[0], 0);","131","    Metadata metadata = new Metadata(42, 30, \"\", new int[0], 0);","169","    Metadata metadata = new Metadata(2, 2, \"\", new int[] {0, 10}, 15);","206","    Metadata metadata = new Metadata(2, 2, \"\", new int[] {0, 10}, 15);","212","    assertThat(file.newPointer(9).lineOffset()).isEqualTo(9);","228","      file.newPointer(16);","231","      assertThat(e).hasMessage(\"16 is not a valid offset for file src\/Foo.php. Max offset is 15\");","287","    Metadata metadata = new Metadata(2, 2, \"\", new int[] {0, 10}, 15);","298","    Metadata metadata = new Metadata(2, 2, \"\", new int[] {0, 10}, 15);"]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/report\/ComponentsPublisherTest.java":[{"add":["648","    assertThat(reader.readComponent(dir1_file.batchId()).getProjectRelativePath()).isEqualTo(\"dir1\/Foo.java\");","652","    assertThat(reader.readComponent(dir1_dir1.batchId()).getProjectRelativePath()).isEqualTo(\"dir1\/dir1\");","660","    assertThat(reader.readComponent(mod1_dir2.batchId()).getProjectRelativePath()).isEqualTo(\"mod1\/dir2\");","664","    assertThat(reader.readComponent(mod1_dir2_file.batchId()).getProjectRelativePath()).isEqualTo(\"mod1\/dir2\/Foo.java\");","668","    assertThat(reader.readComponent(mod1_mod2.batchId()).getProjectRelativePath()).isEqualTo(\"mod1\/mod2\");","672","    assertThat(reader.readComponent(mod1_mod2_file.batchId()).getProjectRelativePath()).isEqualTo(\"mod1\/mod2\/Foo.java\");","676","    assertThat(reader.readComponent(mod1_mod2_dir.batchId()).getProjectRelativePath()).isEqualTo(\"mod1\/mod2\/dir\");","680","    assertThat(reader.readComponent(mod1_mod2_dir_file.batchId()).getProjectRelativePath()).isEqualTo(\"mod1\/mod2\/dir\/Foo.java\");"],"delete":["648","    assertThat(reader.readComponent(dir1_file.batchId()).getProjectRelativePath()).isEqualTo(\"dir1\" + File.separator + \"Foo.java\");","652","    assertThat(reader.readComponent(dir1_dir1.batchId()).getProjectRelativePath()).isEqualTo(\"dir1\" + File.separator + \"dir1\");","660","    assertThat(reader.readComponent(mod1_dir2.batchId()).getProjectRelativePath()).isEqualTo(\"mod1\" + File.separator + \"dir2\");","664","    assertThat(reader.readComponent(mod1_dir2_file.batchId()).getProjectRelativePath()).isEqualTo(\"mod1\" + File.separator + \"dir2\" + File.separator + \"Foo.java\");","668","    assertThat(reader.readComponent(mod1_mod2.batchId()).getProjectRelativePath()).isEqualTo(\"mod1\" + File.separator + \"mod2\");","672","    assertThat(reader.readComponent(mod1_mod2_file.batchId()).getProjectRelativePath()).isEqualTo(\"mod1\" + File.separator + \"mod2\" + File.separator + \"Foo.java\");","676","    assertThat(reader.readComponent(mod1_mod2_dir.batchId()).getProjectRelativePath()).isEqualTo(\"mod1\" + File.separator + \"mod2\" + File.separator + \"dir\");","680","    assertThat(reader.readComponent(mod1_mod2_dir_file.batchId()).getProjectRelativePath())","681","      .isEqualTo(\"mod1\" + File.separator + \"mod2\" + File.separator + \"dir\" + File.separator + \"Foo.java\");"]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/DefaultIndexedFile.java":[{"add":["51","    this(baseDir.resolve(relativePath), moduleKey, relativePath, relativePath, Type.MAIN, language, TestInputFileBuilder.nextBatchId(),","59","    this.projectRelativePath = PathUtils.sanitize(projectRelativePath);","60","    this.moduleRelativePath = PathUtils.sanitize(moduleRelativePath);"],"delete":["51","    this(baseDir.resolve(relativePath), moduleKey, PathUtils.sanitize(relativePath), PathUtils.sanitize(relativePath), Type.MAIN, language, TestInputFileBuilder.nextBatchId(),","59","    this.projectRelativePath = projectRelativePath;","60","    this.moduleRelativePath = moduleRelativePath;"]}],"server\/sonar-process\/src\/test\/java\/org\/sonar\/process\/FileUtils2Test.java":[{"add":["285","    assumeTrue(SystemUtils.IS_OS_UNIX);"],"delete":[]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/Metadata.java":[{"add":["27","    private final int lines;","28","    private final int nonBlankLines;","29","    private final String hash;","30","    private final int[] originalLineStartOffsets;","31","    private final int[] originalLineEndOffsets;","32","    private final int lastValidOffset;","34","    public Metadata(int lines, int nonBlankLines, String hash, int[] originalLineStartOffsets, int[] originalLineEndOffsets, int lastValidOffset) {","35","        this.lines = lines;","36","        this.nonBlankLines = nonBlankLines;","37","        this.hash = hash;","38","        this.originalLineStartOffsets = Arrays.copyOf(originalLineStartOffsets, originalLineStartOffsets.length);","39","        this.originalLineEndOffsets = Arrays.copyOf(originalLineEndOffsets, originalLineEndOffsets.length);","40","        this.lastValidOffset = lastValidOffset;","41","    }","43","    public int lines() {","44","        return lines;","45","    }","47","    public int nonBlankLines() {","48","        return nonBlankLines;","49","    }","51","    public String hash() {","52","        return hash;","53","    }","55","    public int[] originalLineStartOffsets() {","56","        return originalLineStartOffsets;","57","    }","59","    public int[] originalLineEndOffsets() {","60","        return originalLineEndOffsets;","61","    }","63","    public int lastValidOffset() {","64","        return lastValidOffset;","65","    }","66","","67","    public boolean isEmpty() {","68","        return lastValidOffset == 0;","69","    }"],"delete":["27","  private final int lines;","28","  private final int nonBlankLines;","29","  private final String hash;","30","  private final int[] originalLineOffsets;","31","  private final int lastValidOffset;","33","  public Metadata(int lines, int nonBlankLines, String hash, int[] originalLineOffsets, int lastValidOffset) {","34","    this.lines = lines;","35","    this.nonBlankLines = nonBlankLines;","36","    this.hash = hash;","37","    this.originalLineOffsets = Arrays.copyOf(originalLineOffsets, originalLineOffsets.length);","38","    this.lastValidOffset = lastValidOffset;","39","  }","41","  public int lines() {","42","    return lines;","43","  }","45","  public int nonBlankLines() {","46","    return nonBlankLines;","47","  }","49","  public String hash() {","50","    return hash;","51","  }","53","  public int[] originalLineOffsets() {","54","    return originalLineOffsets;","55","  }","57","  public int lastValidOffset() {","58","    return lastValidOffset;","59","  }"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/ComponentsPublisher.java":[{"add":["38","import org.sonar.api.utils.PathUtils;","209","      return PathUtils.sanitize(projectBaseDir.relativize(inputDir.path()).toString());","213","      return PathUtils.sanitize(projectBaseDir.relativize(module.getBaseDir()).toString());"],"delete":["208","      return projectBaseDir.relativize(inputDir.path()).toString();","212","      return projectBaseDir.relativize(module.getBaseDir()).toString();"]}],"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/batch\/fs\/internal\/MetadataTest.java":[{"add":["28","    Metadata metadata = new Metadata(10, 20, \"hash\", new int[] {1, 3}, new int[] {2, 4}, 5);","29","    assertThat(metadata.isEmpty()).isFalse();","32","    assertThat(metadata.originalLineStartOffsets()).isEqualTo(new int[] {1, 3});","33","    assertThat(metadata.originalLineEndOffsets()).isEqualTo(new int[] {2, 4});","34","    assertThat(metadata.lastValidOffset()).isEqualTo(5);"],"delete":["28","    Metadata metadata = new Metadata(10, 20, \"hash\", new int[] {1, 2}, 30);","29","    assertThat(metadata.lastValidOffset()).isEqualTo(30);","32","    assertThat(metadata.originalLineOffsets()).isEqualTo(new int[] {1, 2});"]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/DefaultFileLinesContextTest.java":[{"add":["96","    thrown.expectMessage(\"Line number should be positive for file src\/foo.php.\");","102","    thrown.expectMessage(\"Line 4 is out of range for file src\/foo.php. File has 3 lines\");"],"delete":["96","    thrown.expectMessage(\"Line number should be positive for file src\" + File.separator + \"foo.php.\");","102","    thrown.expectMessage(\"Line 4 is out of range for file src\" + File.separator + \"foo.php. File has 3 lines\");"]}]}},"e4a472c43a9b7a5fd5592fa3d00cc0c35c2ab837":{"changes":{"server\/sonar-web\/config\/webpack.config.js":"MODIFY"},"diff":{"server\/sonar-web\/config\/webpack.config.js":[{"add":["72","        'react-dom': path.resolve(__dirname, '..\/node_modules\/react-dom'),","73","        \/\/ d3-selection exports an event object, which requires live-binding.","74","        \/\/ In order to support this, we need to tell Webpack to NOT look into","75","        \/\/ the dist\/ folder of this module, but in the src\/ folder instead.","76","        \/\/ See https:\/\/github.com\/d3\/d3-selection#event","77","        'd3-selection': path.resolve(__dirname, '..\/node_modules\/d3-selection\/src\/index.js')"],"delete":["72","        'react-dom': path.resolve(__dirname, '..\/node_modules\/react-dom')"]}]}},"d9564eed6baf772c31d3ee2888dffc7d8c51fca2":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/setting\/ws\/ListDefinitionsAction.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/setting\/ws\/ListDefinitionsActionTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/setting\/ws\/ListDefinitionsAction.java":[{"add":["39","import static java.util.Comparator.comparing;","98","      .filter(definition -> qualifier.map(s -> definition.qualifiers().contains(s)).orElseGet(definition::global))","101","      .sorted(comparing(PropertyDefinition::category, String::compareToIgnoreCase)","102","        .thenComparingInt(PropertyDefinition::index)","103","        .thenComparing(PropertyDefinition::name, String::compareToIgnoreCase))"],"delete":["97","      .filter(definition -> qualifier.isPresent() ? definition.qualifiers().contains(qualifier.get()) : definition.global())"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/setting\/ws\/ListDefinitionsActionTest.java":[{"add":["49","import org.sonarqube.ws.Settings.Definition;","116","    Definition definition = result.getDefinitions(0);","137","    Definition definition = result.getDefinitions(0);","162","    Definition definition = result.getDefinitions(0);","193","    Definition definition = result.getDefinitions(0);","212","    Definition definition = result.getDefinitions(0);","255","  public void definitions_are_ordered_by_category_then_index_then_name_case_insensitive() {","256","    logIn();","257","    propertyDefinitions.addComponent(PropertyDefinition.builder(\"sonar.prop.11\").category(\"cat-1\").index(1).name(\"prop 1\").build());","258","    propertyDefinitions.addComponent(PropertyDefinition.builder(\"sonar.prop.12\").category(\"cat-1\").index(2).name(\"prop 2\").build());","259","    propertyDefinitions.addComponent(PropertyDefinition.builder(\"sonar.prop.13\").category(\"CAT-1\").index(1).name(\"prop 3\").build());","260","    propertyDefinitions.addComponent(PropertyDefinition.builder(\"sonar.prop.41\").category(\"cat-0\").index(25).name(\"prop 1\").build());","261","","262","    ListDefinitionsWsResponse result = executeRequest();","263","","264","    assertThat(result.getDefinitionsList()).extracting(Definition::getKey)","265","      .containsExactly(\"sonar.prop.41\", \"sonar.prop.11\", \"sonar.prop.13\", \"sonar.prop.12\");","266","  }","267","","268","  @Test","328","    assertThat(result.getDefinitionsList()).extracting(Definition::getKey, Definition::getType)","342","    assertThat(result.getDefinitionsList()).extracting(Definition::getKey).containsOnly(\"foo\");","356","    assertThat(result.getDefinitionsList()).extracting(Definition::getKey).containsOnly(\"foo\", \"plugin.license.secured\", \"commercial.plugin\");","370","    assertThat(result.getDefinitionsList()).extracting(Definition::getKey).containsOnly(\"foo\", \"secret.secured\", \"plugin.license.secured\", \"commercial.plugin\");","383","    assertThat(result.getDefinitionsList()).extracting(Definition::getKey).containsOnly(\"foo\", \"secret.secured\", \"plugin.license.secured\");","396","    assertThat(result.getDefinitionsList()).extracting(Definition::getKey).containsOnly(\"foo\", \"secret.secured\", \"plugin.license.secured\");","413","    assertThat(result.getDefinitionsList()).extracting(Definition::getKey).containsExactlyInAnyOrder(\"sonar.leak.period\");"],"delete":["115","    Settings.Definition definition = result.getDefinitions(0);","136","    Settings.Definition definition = result.getDefinitions(0);","161","    Settings.Definition definition = result.getDefinitions(0);","192","    Settings.Definition definition = result.getDefinitions(0);","211","    Settings.Definition definition = result.getDefinitions(0);","313","    assertThat(result.getDefinitionsList()).extracting(Settings.Definition::getKey, Settings.Definition::getType)","327","    assertThat(result.getDefinitionsList()).extracting(Settings.Definition::getKey).containsOnly(\"foo\");","341","    assertThat(result.getDefinitionsList()).extracting(Settings.Definition::getKey).containsOnly(\"foo\", \"plugin.license.secured\", \"commercial.plugin\");","355","    assertThat(result.getDefinitionsList()).extracting(Settings.Definition::getKey).containsOnly(\"foo\", \"secret.secured\", \"plugin.license.secured\", \"commercial.plugin\");","368","    assertThat(result.getDefinitionsList()).extracting(Settings.Definition::getKey).containsOnly(\"foo\", \"secret.secured\", \"plugin.license.secured\");","381","    assertThat(result.getDefinitionsList()).extracting(Settings.Definition::getKey).containsOnly(\"foo\", \"secret.secured\", \"plugin.license.secured\");","398","    assertThat(result.getDefinitionsList()).extracting(Settings.Definition::getKey).containsExactlyInAnyOrder(\"sonar.leak.period\");"]}]}},"99374f79d07f74e433104df73cc3717284b8ac02":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/component\/ComponentServiceTest.java":"MODIFY","sonar-db\/src\/test\/java\/org\/sonar\/db\/component\/ComponentDaoTest.java":"MODIFY","sonar-db\/src\/main\/java\/org\/sonar\/db\/component\/ComponentDao.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/component\/ComponentService.java":"MODIFY","sonar-db\/src\/test\/resources\/org\/sonar\/db\/component\/ComponentDaoWithDuplicatedKeysTest\/schema.sql":"ADD","sonar-db\/src\/test\/java\/org\/sonar\/db\/component\/ComponentDaoWithDuplicatedKeysTest.java":"ADD","sonar-db\/src\/test\/resources\/org\/sonar\/db\/component\/ComponentDaoTest\/delete-result.xml":"MODIFY","sonar-db\/src\/test\/resources\/org\/sonar\/db\/component\/ComponentDaoTest\/delete.xml":"ADD","sonar-db\/src\/main\/java\/org\/sonar\/db\/component\/ComponentMapper.java":"MODIFY","sonar-db\/src\/main\/resources\/org\/sonar\/db\/component\/ComponentMapper.xml":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/component\/ComponentServiceTest.java":[{"add":["22","import com.google.common.base.Optional;","31","import org.mockito.invocation.InvocationOnMock;","32","import org.mockito.stubbing.Answer;","40","import org.sonar.db.component.ComponentDao;","43","import org.sonar.db.component.ResourceIndexDao;","50","import static com.google.common.collect.Lists.newArrayList;","54","import static org.mockito.Matchers.any;","55","import static org.mockito.Matchers.eq;","56","import static org.mockito.Mockito.doAnswer;","58","import static org.mockito.Mockito.verify;","60","import static org.sonar.core.permission.GlobalPermissions.PROVISIONING;","280","    userSessionRule.login(\"john\").setGlobalPermissions(PROVISIONING);","300","    userSessionRule.login(\"john\").setGlobalPermissions(PROVISIONING);","311","    userSessionRule.login(\"john\").setGlobalPermissions(PROVISIONING);","331","    userSessionRule.login(\"john\").setGlobalPermissions(PROVISIONING);","344","    userSessionRule.login(\"john\").setGlobalPermissions(PROVISIONING);","357","    userSessionRule.login(\"john\").setGlobalPermissions(PROVISIONING);","372","  public void remove_duplicated_components_when_creating_project() throws Exception {","373","    String projectKey = \"PROJECT_KEY\";","374","","375","    userSessionRule.login(\"john\").setGlobalPermissions(PROVISIONING);","376","","377","    DbSession session = mock(DbSession.class);","378","","379","    ComponentDao componentDao = mock(ComponentDao.class);","380","    when(componentDao.selectByKey(session, projectKey)).thenReturn(Optional.<ComponentDto>absent());","381","","382","    DbClient dbClient = mock(DbClient.class);","383","    when(dbClient.openSession(false)).thenReturn(session);","384","    when(dbClient.componentDao()).thenReturn(componentDao);","385","    when(dbClient.componentIndexDao()).thenReturn(mock(ResourceIndexDao.class));","386","","387","    doAnswer(new Answer<Object>() {","388","      public Object answer(InvocationOnMock invocation) {","389","        ((ComponentDto) invocation.getArguments()[1]).setId(1L);","390","        return null;","391","      }","392","    }).when(componentDao).insert(eq(session), any(ComponentDto.class));","393","","394","    when(componentDao.selectComponentsHavingSameKeyOrderedById(session, projectKey)).thenReturn(newArrayList(","395","      ComponentTesting.newProjectDto().setId(1L).setKey(projectKey),","396","      ComponentTesting.newProjectDto().setId(2L).setKey(projectKey),","397","      ComponentTesting.newProjectDto().setId(3L).setKey(projectKey)","398","    ));","399","","400","    service = new ComponentService(dbClient, i18n, userSessionRule, System2.INSTANCE, new ComponentFinder(dbClient));","401","    service.create(NewComponent.create(projectKey, projectKey));","402","","403","    verify(componentDao).delete(session, 2L);","404","    verify(componentDao).delete(session, 3L);","405","  }","406","","407","  @Test"],"delete":["34","import org.sonar.core.permission.GlobalPermissions;","270","    userSessionRule.login(\"john\").setGlobalPermissions(GlobalPermissions.PROVISIONING);","290","    userSessionRule.login(\"john\").setGlobalPermissions(GlobalPermissions.PROVISIONING);","301","    userSessionRule.login(\"john\").setGlobalPermissions(GlobalPermissions.PROVISIONING);","321","    userSessionRule.login(\"john\").setGlobalPermissions(GlobalPermissions.PROVISIONING);","334","    userSessionRule.login(\"john\").setGlobalPermissions(GlobalPermissions.PROVISIONING);","347","    userSessionRule.login(\"john\").setGlobalPermissions(GlobalPermissions.PROVISIONING);"]}],"sonar-db\/src\/test\/java\/org\/sonar\/db\/component\/ComponentDaoTest.java":[{"add":["54","  DbSession dbSession = db.getSession();","55","","61","    ","62","    ComponentDto result = underTest.selectByUuid(dbSession, \"KLMN\").get();","78","    assertThat(underTest.selectByUuid(dbSession, \"UNKNOWN\")).isAbsent();","85","    ComponentDto result = underTest.selectByUuid(dbSession, \"STUV\").get();","106","    ComponentDto result = underTest.selectByUuid(dbSession, \"DCBA\").get();","117","    underTest.selectOrFailByUuid(dbSession, \"unknown\");","124","    Optional<ComponentDto> optional = underTest.selectByKey(dbSession, \"org.struts:struts-core:src\/org\/struts\/RequestContext.java\");","137","    assertThat(underTest.selectByKey(dbSession, \"unknown\")).isAbsent();","146","    underTest.selectOrFailByKey(dbSession, \"unknown\");","153","    ComponentDto result = underTest.selectOrFailByKey(dbSession, \"org.disabled.project\");","161","    ComponentDto result = underTest.selectOrFailByKey(dbSession, \"org.struts:struts\");","179","    List<ComponentDto> results = underTest.selectByKeys(dbSession, Collections.singletonList(\"org.struts:struts-core:src\/org\/struts\/RequestContext.java\"));","193","    assertThat(underTest.selectByKeys(dbSession, Collections.singletonList(\"unknown\"))).isEmpty();","200","    List<ComponentDto> results = underTest.selectByIds(dbSession, newArrayList(4L));","214","    assertThat(underTest.selectByIds(dbSession, newArrayList(555L))).isEmpty();","221","    List<ComponentDto> results = underTest.selectByUuids(dbSession, newArrayList(\"KLMN\"));","239","    assertThat(underTest.selectByUuids(dbSession, newArrayList(\"unknown\"))).isEmpty();","246","    List<ComponentDto> results = underTest.selectByUuids(dbSession, newArrayList(\"DCBA\"));","258","    List<String> results = underTest.selectExistingUuids(dbSession, newArrayList(\"KLMN\"));","261","    assertThat(underTest.selectExistingUuids(dbSession, newArrayList(\"KLMN\", \"unknown\"))).hasSize(1);","262","    assertThat(underTest.selectExistingUuids(dbSession, newArrayList(\"unknown\"))).isEmpty();","269","    assertThat(underTest.selectOrFailById(dbSession, 4L)).isNotNull();","276","    Optional<ComponentDto> result = underTest.selectById(dbSession, 10L);","285","    underTest.selectOrFailById(dbSession, 111L);","292","    assertThat(underTest.selectById(dbSession, 4L)).isPresent();","293","    assertThat(underTest.selectById(dbSession, 111L)).isAbsent();","300","    assertThat(underTest.existsById(4L, dbSession)).isTrue();","301","    assertThat(underTest.existsById(111L, dbSession)).isFalse();","309","    List<ComponentDto> results = underTest.selectSubProjectsByComponentUuids(dbSession, newArrayList(\"HIJK\"));","314","    results = underTest.selectSubProjectsByComponentUuids(dbSession, newArrayList(\"GHIJ\"));","319","    results = underTest.selectSubProjectsByComponentUuids(dbSession, newArrayList(\"FGHI\"));","324","    results = underTest.selectSubProjectsByComponentUuids(dbSession, newArrayList(\"EFGH\"));","329","    assertThat(underTest.selectSubProjectsByComponentUuids(dbSession, newArrayList(\"ABCD\"))).isEmpty();","332","    assertThat(underTest.selectSubProjectsByComponentUuids(dbSession, newArrayList(\"HIJK\", \"FGHI\"))).hasSize(2);","334","    assertThat(underTest.selectSubProjectsByComponentUuids(dbSession, newArrayList(\"unknown\"))).isEmpty();","336","    assertThat(underTest.selectSubProjectsByComponentUuids(dbSession, Collections.<String>emptyList())).isEmpty();","344","    List<ComponentDto> modules = underTest.selectEnabledDescendantModules(dbSession, \"ABCD\");","348","    modules = underTest.selectEnabledDescendantModules(dbSession, \"EFGH\");","352","    modules = underTest.selectEnabledDescendantModules(dbSession, \"FGHI\");","356","    assertThat(underTest.selectEnabledDescendantModules(dbSession, \"GHIJ\")).isEmpty();","357","    assertThat(underTest.selectEnabledDescendantModules(dbSession, \"unknown\")).isEmpty();","365","    List<ComponentDto> modules = underTest.selectDescendantModules(dbSession, \"ABCD\");","369","    modules = underTest.selectDescendantModules(dbSession, \"EFGH\");","373","    assertThat(underTest.selectDescendantModules(dbSession, \"IHGF\")).isEmpty();","381","    List<FilePathWithHashDto> files = underTest.selectEnabledDescendantFiles(dbSession, \"ABCD\");","388","    files = underTest.selectEnabledDescendantFiles(dbSession, \"EFGH\");","395","    files = underTest.selectEnabledDescendantFiles(dbSession, \"FGHI\");","402","    assertThat(underTest.selectEnabledDescendantFiles(dbSession, \"GHIJ\")).isEmpty();","404","    assertThat(underTest.selectEnabledDescendantFiles(dbSession, \"unknown\")).isEmpty();","412","    List<FilePathWithHashDto> files = underTest.selectEnabledFilesFromProject(dbSession, \"ABCD\");","419","    assertThat(underTest.selectEnabledFilesFromProject(dbSession, \"EFGH\")).isEmpty();","422","    assertThat(underTest.selectEnabledFilesFromProject(dbSession, \"FGHI\")).isEmpty();","425","    assertThat(underTest.selectEnabledFilesFromProject(dbSession, \"GHIJ\")).isEmpty();","427","    assertThat(underTest.selectEnabledFilesFromProject(dbSession, \"unknown\")).isEmpty();","434","    List<ComponentDto> components = underTest.selectAllComponentsFromProjectKey(dbSession, \"org.struts:struts\");","438","    assertThat(underTest.selectAllComponentsFromProjectKey(dbSession, \"UNKNOWN\")).isEmpty();","445","    List<ComponentDto> components = underTest.selectEnabledModulesFromProjectKey(dbSession, \"org.struts:struts\");","448","    assertThat(underTest.selectEnabledModulesFromProjectKey(dbSession, \"UNKNOWN\")).isEmpty();","455","    assertThat(underTest.selectAllViewsAndSubViews(dbSession)).extracting(\"uuid\").containsOnly(\"ABCD\", \"EFGH\", \"FGHI\", \"IJKL\");","456","    assertThat(underTest.selectAllViewsAndSubViews(dbSession)).extracting(\"projectUuid\").containsOnly(\"ABCD\", \"EFGH\", \"IJKL\");","463","    assertThat(underTest.selectProjectsFromView(dbSession, \"ABCD\", \"ABCD\")).containsOnly(\"JKLM\");","464","    assertThat(underTest.selectProjectsFromView(dbSession, \"EFGH\", \"EFGH\")).containsOnly(\"KLMN\", \"JKLM\");","465","    assertThat(underTest.selectProjectsFromView(dbSession, \"FGHI\", \"EFGH\")).containsOnly(\"JKLM\");","466","    assertThat(underTest.selectProjectsFromView(dbSession, \"IJKL\", \"IJKL\")).isEmpty();","467","    assertThat(underTest.selectProjectsFromView(dbSession, \"Unknown\", \"Unknown\")).isEmpty();","474","    List<ComponentDto> result = underTest.selectProjects(dbSession);","483","    List<ComponentDto> result = underTest.selectProvisionedProjects(dbSession, 0, 10, null);","494","    int numberOfProjects = underTest.countProvisionedProjects(dbSession, null);","503","    List<ComponentDto> result = underTest.selectGhostProjects(dbSession, 0, 10, null);","507","    assertThat(underTest.countGhostProjects(dbSession, null)).isEqualTo(1);","514","    List<ComponentDto> resources = underTest.selectByProjectUuid(\"ABCD\", dbSession);","544","    underTest.insert(dbSession, componentDto);","545","    dbSession.commit();","573","    underTest.insert(dbSession, componentDto);","574","    dbSession.commit();","603","    underTest.update(dbSession, componentDto);","604","    dbSession.commit();","610","  public void delete() throws Exception {","611","    ComponentDto project1= insertProject(newProjectDto().setKey(\"PROJECT_1\"));","612","    insertProject(newProjectDto().setKey(\"PROJECT_2\"));","613","","614","    underTest.delete(dbSession, project1.getId());","615","    dbSession.commit();","616","","617","    assertThat(underTest.selectByKey(dbSession, \"PROJECT_1\")).isAbsent();","618","    assertThat(underTest.selectByKey(dbSession, \"PROJECT_2\")).isPresent();","619","  }","620","","621","  @Test","623","    DbSession session = dbSession;","636","","637","  private ComponentDto insertProject(ComponentDto project) {","638","    underTest.insert(dbSession, project);","639","    dbSession.commit();","640","    return project;","641","  }"],"delete":["59","","60","    ComponentDto result = underTest.selectByUuid(db.getSession(), \"KLMN\").get();","76","    assertThat(underTest.selectByUuid(db.getSession(), \"UNKNOWN\")).isAbsent();","83","    ComponentDto result = underTest.selectByUuid(db.getSession(), \"STUV\").get();","104","    ComponentDto result = underTest.selectByUuid(db.getSession(), \"DCBA\").get();","115","    underTest.selectOrFailByUuid(db.getSession(), \"unknown\");","122","    Optional<ComponentDto> optional = underTest.selectByKey(db.getSession(), \"org.struts:struts-core:src\/org\/struts\/RequestContext.java\");","135","    assertThat(underTest.selectByKey(db.getSession(), \"unknown\")).isAbsent();","144","    underTest.selectOrFailByKey(db.getSession(), \"unknown\");","151","    ComponentDto result = underTest.selectOrFailByKey(db.getSession(), \"org.disabled.project\");","159","    ComponentDto result = underTest.selectOrFailByKey(db.getSession(), \"org.struts:struts\");","177","    List<ComponentDto> results = underTest.selectByKeys(db.getSession(), Collections.singletonList(\"org.struts:struts-core:src\/org\/struts\/RequestContext.java\"));","191","    assertThat(underTest.selectByKeys(db.getSession(), Collections.singletonList(\"unknown\"))).isEmpty();","198","    List<ComponentDto> results = underTest.selectByIds(db.getSession(), newArrayList(4L));","212","    assertThat(underTest.selectByIds(db.getSession(), newArrayList(555L))).isEmpty();","219","    List<ComponentDto> results = underTest.selectByUuids(db.getSession(), newArrayList(\"KLMN\"));","237","    assertThat(underTest.selectByUuids(db.getSession(), newArrayList(\"unknown\"))).isEmpty();","244","    List<ComponentDto> results = underTest.selectByUuids(db.getSession(), newArrayList(\"DCBA\"));","256","    List<String> results = underTest.selectExistingUuids(db.getSession(), newArrayList(\"KLMN\"));","259","    assertThat(underTest.selectExistingUuids(db.getSession(), newArrayList(\"KLMN\", \"unknown\"))).hasSize(1);","260","    assertThat(underTest.selectExistingUuids(db.getSession(), newArrayList(\"unknown\"))).isEmpty();","267","    assertThat(underTest.selectOrFailById(db.getSession(), 4L)).isNotNull();","274","    Optional<ComponentDto> result = underTest.selectById(db.getSession(), 10L);","283","    underTest.selectOrFailById(db.getSession(), 111L);","290","    assertThat(underTest.selectById(db.getSession(), 4L)).isPresent();","291","    assertThat(underTest.selectById(db.getSession(), 111L)).isAbsent();","298","    assertThat(underTest.existsById(4L, db.getSession())).isTrue();","299","    assertThat(underTest.existsById(111L, db.getSession())).isFalse();","307","    List<ComponentDto> results = underTest.selectSubProjectsByComponentUuids(db.getSession(), newArrayList(\"HIJK\"));","312","    results = underTest.selectSubProjectsByComponentUuids(db.getSession(), newArrayList(\"GHIJ\"));","317","    results = underTest.selectSubProjectsByComponentUuids(db.getSession(), newArrayList(\"FGHI\"));","322","    results = underTest.selectSubProjectsByComponentUuids(db.getSession(), newArrayList(\"EFGH\"));","327","    assertThat(underTest.selectSubProjectsByComponentUuids(db.getSession(), newArrayList(\"ABCD\"))).isEmpty();","330","    assertThat(underTest.selectSubProjectsByComponentUuids(db.getSession(), newArrayList(\"HIJK\", \"FGHI\"))).hasSize(2);","332","    assertThat(underTest.selectSubProjectsByComponentUuids(db.getSession(), newArrayList(\"unknown\"))).isEmpty();","334","    assertThat(underTest.selectSubProjectsByComponentUuids(db.getSession(), Collections.<String>emptyList())).isEmpty();","342","    List<ComponentDto> modules = underTest.selectEnabledDescendantModules(db.getSession(), \"ABCD\");","346","    modules = underTest.selectEnabledDescendantModules(db.getSession(), \"EFGH\");","350","    modules = underTest.selectEnabledDescendantModules(db.getSession(), \"FGHI\");","354","    assertThat(underTest.selectEnabledDescendantModules(db.getSession(), \"GHIJ\")).isEmpty();","355","    assertThat(underTest.selectEnabledDescendantModules(db.getSession(), \"unknown\")).isEmpty();","363","    List<ComponentDto> modules = underTest.selectDescendantModules(db.getSession(), \"ABCD\");","367","    modules = underTest.selectDescendantModules(db.getSession(), \"EFGH\");","371","    assertThat(underTest.selectDescendantModules(db.getSession(), \"IHGF\")).isEmpty();","379","    List<FilePathWithHashDto> files = underTest.selectEnabledDescendantFiles(db.getSession(), \"ABCD\");","386","    files = underTest.selectEnabledDescendantFiles(db.getSession(), \"EFGH\");","393","    files = underTest.selectEnabledDescendantFiles(db.getSession(), \"FGHI\");","400","    assertThat(underTest.selectEnabledDescendantFiles(db.getSession(), \"GHIJ\")).isEmpty();","402","    assertThat(underTest.selectEnabledDescendantFiles(db.getSession(), \"unknown\")).isEmpty();","410","    List<FilePathWithHashDto> files = underTest.selectEnabledFilesFromProject(db.getSession(), \"ABCD\");","417","    assertThat(underTest.selectEnabledFilesFromProject(db.getSession(), \"EFGH\")).isEmpty();","420","    assertThat(underTest.selectEnabledFilesFromProject(db.getSession(), \"FGHI\")).isEmpty();","423","    assertThat(underTest.selectEnabledFilesFromProject(db.getSession(), \"GHIJ\")).isEmpty();","425","    assertThat(underTest.selectEnabledFilesFromProject(db.getSession(), \"unknown\")).isEmpty();","432","    List<ComponentDto> components = underTest.selectAllComponentsFromProjectKey(db.getSession(), \"org.struts:struts\");","436","    assertThat(underTest.selectAllComponentsFromProjectKey(db.getSession(), \"UNKNOWN\")).isEmpty();","443","    List<ComponentDto> components = underTest.selectEnabledModulesFromProjectKey(db.getSession(), \"org.struts:struts\");","446","    assertThat(underTest.selectEnabledModulesFromProjectKey(db.getSession(), \"UNKNOWN\")).isEmpty();","453","    assertThat(underTest.selectAllViewsAndSubViews(db.getSession())).extracting(\"uuid\").containsOnly(\"ABCD\", \"EFGH\", \"FGHI\", \"IJKL\");","454","    assertThat(underTest.selectAllViewsAndSubViews(db.getSession())).extracting(\"projectUuid\").containsOnly(\"ABCD\", \"EFGH\", \"IJKL\");","461","    assertThat(underTest.selectProjectsFromView(db.getSession(), \"ABCD\", \"ABCD\")).containsOnly(\"JKLM\");","462","    assertThat(underTest.selectProjectsFromView(db.getSession(), \"EFGH\", \"EFGH\")).containsOnly(\"KLMN\", \"JKLM\");","463","    assertThat(underTest.selectProjectsFromView(db.getSession(), \"FGHI\", \"EFGH\")).containsOnly(\"JKLM\");","464","    assertThat(underTest.selectProjectsFromView(db.getSession(), \"IJKL\", \"IJKL\")).isEmpty();","465","    assertThat(underTest.selectProjectsFromView(db.getSession(), \"Unknown\", \"Unknown\")).isEmpty();","472","    List<ComponentDto> result = underTest.selectProjects(db.getSession());","481","    List<ComponentDto> result = underTest.selectProvisionedProjects(db.getSession(), 0, 10, null);","492","    int numberOfProjects = underTest.countProvisionedProjects(db.getSession(), null);","501","    List<ComponentDto> result = underTest.selectGhostProjects(db.getSession(), 0, 10, null);","505","    assertThat(underTest.countGhostProjects(db.getSession(), null)).isEqualTo(1);","512","    List<ComponentDto> resources = underTest.selectByProjectUuid(\"ABCD\", db.getSession());","542","    underTest.insert(db.getSession(), componentDto);","543","    db.getSession().commit();","571","    underTest.insert(db.getSession(), componentDto);","572","    db.getSession().commit();","601","    underTest.update(db.getSession(), componentDto);","602","    db.getSession().commit();","609","    DbSession session = db.getSession();"]}],"sonar-db\/src\/main\/java\/org\/sonar\/db\/component\/ComponentDao.java":[{"add":["137","  public List<ComponentDto> selectComponentsHavingSameKeyOrderedById(DbSession session, String key) {","138","    return mapper(session).selectComponentsHavingSameKeyOrderedById(key);","139","  }","140","","277","  public void delete(DbSession session, long componentId) {","278","    mapper(session).delete(componentId);","279","  }","280",""],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/component\/ComponentService.java":[{"add":["148","    ComponentDto project = createProject(newComponent);","149","    removeDuplicatedProjects(project.getKey());","150","    return project;","151","  }","153","  private ComponentDto createProject(NewComponent newComponent) {","187","  \/**","188","   * On MySQL, as PROJECTS.KEE is not unique, if the same project is provisioned multiple times, then it will be duplicated in the database.","189","   * So, after creating a project, we commit, and we search in the db if their are some duplications and we remove them.","190","   *","191","   * SONAR-6332","192","   *\/","193","  private void removeDuplicatedProjects(String projectKey) {","194","    DbSession session = dbClient.openSession(false);","195","    try {","196","      List<ComponentDto> duplicated = dbClient.componentDao().selectComponentsHavingSameKeyOrderedById(session, projectKey);","197","      for (int i = 1; i < duplicated.size(); i++) {","198","        dbClient.componentDao().delete(session, duplicated.get(i).getId());","199","      }","200","      session.commit();","201","    } finally {","202","      dbClient.closeSession(session);","203","    }","204","  }","205","","211","      dbClient.closeSession(session);"],"delete":["176","","188","      session.close();"]}],"sonar-db\/src\/test\/resources\/org\/sonar\/db\/component\/ComponentDaoWithDuplicatedKeysTest\/schema.sql":[{"add":[],"delete":[]}],"sonar-db\/src\/test\/java\/org\/sonar\/db\/component\/ComponentDaoWithDuplicatedKeysTest.java":[{"add":[],"delete":[]}],"sonar-db\/src\/test\/resources\/org\/sonar\/db\/component\/ComponentDaoTest\/delete-result.xml":[{"add":["3","  <projects id=\"2\" root_id=\"1\" kee=\"org.struts:struts-core\" name=\"Struts Core\"","6","            description=\"[null]\" enabled=\"[true]\" language=\"[null]\" copy_resource_id=\"[null]\" person_id=\"[null]\" authorization_updated_at=\"[null]\"\/>","9","  <projects long_name=\"org.struts\" id=\"3\" scope=\"DIR\" qualifier=\"DIR\" kee=\"org.struts:struts-core:src\/org\/struts\"","13","            enabled=\"[true]\" language=\"[null]\" copy_resource_id=\"[null]\" person_id=\"[null]\" path=\"src\/org\/struts\" authorization_updated_at=\"[null]\"\/>","16","  <projects long_name=\"org.struts.RequestContext\" id=\"4\" scope=\"FIL\" qualifier=\"FIL\" kee=\"org.struts:struts-core:src\/org\/struts\/RequestContext.java\"","17","            uuid=\"KLMN\" project_uuid=\"ABCD\" module_uuid=\"EFGH\" module_uuid_path=\".ABCD.EFGH.\"","18","            name=\"RequestContext.java\" root_id=\"2\"","19","            description=\"[null]\"","20","            enabled=\"[true]\" language=\"java\" copy_resource_id=\"[null]\" person_id=\"[null]\" path=\"src\/org\/struts\/RequestContext.java\" authorization_updated_at=\"[null]\"\/>"],"delete":["2","  <!-- Struts projects is authorized for all user -->","3","  <group_roles id=\"1\" group_id=\"[null]\" resource_id=\"1\" role=\"user\"\/>","4","","5","","6","  <!-- root project -->","7","  <projects id=\"1\" root_id=\"[null]\" scope=\"PRJ\" qualifier=\"TRK\" kee=\"org.struts:struts\" name=\"Struts\" deprecated_kee=\"org.struts:struts\"","8","            uuid=\"ABCD\" project_uuid=\"ABCD\" module_uuid=\"[null]\" module_uuid_path=\".ABCD.\"","9","            description=\"the description\" long_name=\"Apache Struts\"","10","            enabled=\"[true]\" language=\"[null]\" copy_resource_id=\"[null]\" person_id=\"[null]\" path=\"[null]\" created_at=\"[null]\" authorization_updated_at=\"123456789\"\/>","11","  <snapshots id=\"1\" project_id=\"1\" parent_snapshot_id=\"[null]\" root_project_id=\"1\" root_snapshot_id=\"[null]\"","12","             status=\"P\" islast=\"[true]\" purge_status=\"[null]\"","13","             period1_mode=\"[null]\" period1_param=\"[null]\" period1_date=\"[null]\"","14","             period2_mode=\"[null]\" period2_param=\"[null]\" period2_date=\"[null]\"","15","             period3_mode=\"[null]\" period3_param=\"[null]\" period3_date=\"[null]\"","16","             period4_mode=\"[null]\" period4_param=\"[null]\" period4_date=\"[null]\"","17","             period5_mode=\"[null]\" period5_param=\"[null]\" period5_date=\"[null]\"","18","             depth=\"[null]\" scope=\"PRJ\" qualifier=\"TRK\" created_at=\"1228222680000\" build_date=\"1228222680000\"","19","             version=\"[null]\" path=\"\"\/>","20","  <snapshots id=\"10\" project_id=\"1\" parent_snapshot_id=\"[null]\" root_project_id=\"1\" root_snapshot_id=\"[null]\"","21","             status=\"P\" islast=\"[false]\" purge_status=\"[null]\"","22","             period1_mode=\"[null]\" period1_param=\"[null]\" period1_date=\"[null]\"","23","             period2_mode=\"[null]\" period2_param=\"[null]\" period2_date=\"[null]\"","24","             period3_mode=\"[null]\" period3_param=\"[null]\" period3_date=\"[null]\"","25","             period4_mode=\"[null]\" period4_param=\"[null]\" period4_date=\"[null]\"","26","             period5_mode=\"[null]\" period5_param=\"[null]\" period5_date=\"[null]\"","27","             depth=\"[null]\" scope=\"PRJ\" qualifier=\"TRK\" created_at=\"1228136280000\" build_date=\"1228136280000\"","28","             version=\"[null]\" path=\"\"\/>","29","","31","  <projects id=\"2\" root_id=\"1\" kee=\"org.struts:struts-core\" name=\"Struts Core\" deprecated_kee=\"[null]\"","34","            description=\"[null]\" enabled=\"[true]\" language=\"[null]\" copy_resource_id=\"[null]\" person_id=\"[null]\" created_at=\"[null]\" authorization_updated_at=\"[null]\"\/>","35","  <snapshots id=\"2\" project_id=\"2\" parent_snapshot_id=\"1\" root_project_id=\"1\" root_snapshot_id=\"1\"","36","             status=\"P\" islast=\"[true]\" purge_status=\"[null]\"","37","             period1_mode=\"[null]\" period1_param=\"[null]\" period1_date=\"[null]\"","38","             period2_mode=\"[null]\" period2_param=\"[null]\" period2_date=\"[null]\"","39","             period3_mode=\"[null]\" period3_param=\"[null]\" period3_date=\"[null]\"","40","             period4_mode=\"[null]\" period4_param=\"[null]\" period4_date=\"[null]\"","41","             period5_mode=\"[null]\" period5_param=\"[null]\" period5_date=\"[null]\"","42","             depth=\"[null]\" scope=\"PRJ\" qualifier=\"BRC\" created_at=\"1228222680000\" build_date=\"1228222680000\"","43","             version=\"[null]\" path=\"1.\"\/>","46","  <projects long_name=\"org.struts\" id=\"3\" scope=\"DIR\" qualifier=\"DIR\" kee=\"org.struts:struts-core:src\/org\/struts\" deprecated_kee=\"[null]\"","50","            enabled=\"[true]\" language=\"[null]\" copy_resource_id=\"[null]\" person_id=\"[null]\" path=\"src\/org\/struts\" created_at=\"[null]\" authorization_updated_at=\"[null]\"\/>","51","  <snapshots id=\"3\" project_id=\"3\" parent_snapshot_id=\"2\" root_project_id=\"1\" root_snapshot_id=\"1\"","52","             status=\"P\" islast=\"[true]\" purge_status=\"[null]\"","53","             period1_mode=\"[null]\" period1_param=\"[null]\" period1_date=\"[null]\"","54","             period2_mode=\"[null]\" period2_param=\"[null]\" period2_date=\"[null]\"","55","             period3_mode=\"[null]\" period3_param=\"[null]\" period3_date=\"[null]\"","56","             period4_mode=\"[null]\" period4_param=\"[null]\" period4_date=\"[null]\"","57","             period5_mode=\"[null]\" period5_param=\"[null]\" period5_date=\"[null]\"","58","             depth=\"[null]\" scope=\"DIR\" qualifier=\"PAC\" created_at=\"1228222680000\" build_date=\"1228222680000\"","59","             version=\"[null]\" path=\"1.2.\"\/>","62","  <!--<projects long_name=\"org.struts.RequestContext\" id=\"4\" scope=\"FIL\" qualifier=\"FIL\" kee=\"org.struts:struts-core:src\/org\/struts\/RequestContext.java\"-->","63","  <!--uuid=\"KLMN\" project_uuid=\"ABCD\" module_uuid=\"EFGH\" module_uuid_path=\".ABCD.EFGH.\"-->","64","  <!--name=\"RequestContext.java\" root_id=\"2\"-->","65","  <!--description=\"[null]\"-->","66","  <!--enabled=\"[true]\" language=\"java\" copy_resource_id=\"[null]\" person_id=\"[null]\" path=\"src\/org\/struts\/RequestContext.java\" authorization_updated_at=\"[null]\" \/>-->","67","","68","  <snapshots id=\"4\" project_id=\"4\" parent_snapshot_id=\"3\" root_project_id=\"1\" root_snapshot_id=\"1\"","69","             status=\"P\" islast=\"[true]\" purge_status=\"[null]\"","70","             period1_mode=\"[null]\" period1_param=\"[null]\" period1_date=\"[null]\"","71","             period2_mode=\"[null]\" period2_param=\"[null]\" period2_date=\"[null]\"","72","             period3_mode=\"[null]\" period3_param=\"[null]\" period3_date=\"[null]\"","73","             period4_mode=\"[null]\" period4_param=\"[null]\" period4_date=\"[null]\"","74","             period5_mode=\"[null]\" period5_param=\"[null]\" period5_date=\"[null]\"","75","             depth=\"[null]\" scope=\"FIL\" qualifier=\"CLA\" created_at=\"1228222680000\" build_date=\"1228222680000\"","76","             version=\"[null]\" path=\"1.2.3.\"\/>","77","","78","  <projects id=\"10\" root_id=\"[null]\" scope=\"PRJ\" qualifier=\"TRK\" kee=\"org.disabled.project\" name=\"Disabled Project\"","79","            uuid=\"DCBA\" project_uuid=\"DCBA\" module_uuid=\"[null]\" module_uuid_path=\".\"","80","            description=\"the description\" long_name=\"Disabled project\"","81","            enabled=\"[false]\" language=\"[null]\" copy_resource_id=\"[null]\" person_id=\"[null]\" path=\"[null]\" authorization_updated_at=\"123456789\"\/>","82","","83","  <!-- Developer and technical project copy -->","84","  <projects id=\"11\" root_id=\"[null]\" scope=\"PRJ\" qualifier=\"DEV\" kee=\"DEV:anakin@skywalker.name\" name=\"Anakin Skywalker\"","85","            uuid=\"OPQR\" project_uuid=\"OPQR\" module_uuid=\"[null]\" module_uuid_path=\".OPQR.\"","86","            description=\"the description\" long_name=\"Anakin Skywalker\"","87","            enabled=\"[true]\" language=\"[null]\" copy_resource_id=\"[null]\" person_id=\"[null]\" path=\"[null]\" authorization_updated_at=\"123456789\"\/>","88","  <projects id=\"12\" root_id=\"11\" scope=\"PRJ\" qualifier=\"DEV_PRJ\" kee=\"DEV:anakin@skywalker.name:org.struts:struts\" name=\"Apache Struts\"","89","            uuid=\"STUV\" project_uuid=\"OPQR\" module_uuid=\"OPQR\" module_uuid_path=\".OPQR.\"","90","            description=\"the description\" long_name=\"Apache Struts\"","91","            enabled=\"[true]\" language=\"[null]\" copy_resource_id=\"1\" person_id=\"11\" path=\"[null]\" authorization_updated_at=\"123456789\"\/>"]}],"sonar-db\/src\/test\/resources\/org\/sonar\/db\/component\/ComponentDaoTest\/delete.xml":[{"add":[],"delete":[]}],"sonar-db\/src\/main\/java\/org\/sonar\/db\/component\/ComponentMapper.java":[{"add":["120","  List<ComponentDto> selectComponentsHavingSameKeyOrderedById(String key);","121","","128","  void delete(long componentId);","129",""],"delete":[]}],"sonar-db\/src\/main\/resources\/org\/sonar\/db\/component\/ComponentMapper.xml":[{"add":["54","  <select id=\"selectComponentsHavingSameKeyOrderedById\" parameterType=\"String\" resultType=\"Component\">","55","    SELECT id","56","    FROM projects p","57","    <where>","58","      AND p.kee=#{key}","59","    <\/where>","60","    ORDER BY p.id ASC","61","  <\/select>","62","","373","  <update id=\"update\" parameterType=\"Component\" useGeneratedKeys=\"false\">","392","  <\/update>","393","","394","  <delete id=\"delete\" parameterType=\"long\">","395","    DELETE FROM projects WHERE id=#{id}","396","  <\/delete>"],"delete":["364","  <insert id=\"update\" parameterType=\"Component\" useGeneratedKeys=\"false\">","383","  <\/insert>"]}]}},"a854aaaef0a305bea8d49b7094610900663b174f":{"changes":{"\/dev\/null":"DELETE"},"diff":{"\/dev\/null":[{"add":[],"delete":[]}]}},"8c7e9ded9ad3f8f9aca79558320f319d229c547c":{"changes":{"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/DbClient.java":"MODIFY","server\/sonar-auth-saml\/src\/test\/java\/org\/sonar\/auth\/saml\/SamlMessageIdCheckerTest.java":"ADD","server\/sonar-auth-saml\/src\/test\/java\/org\/sonar\/auth\/saml\/SamlIdentityProviderTest.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/user\/SamlMessageIdDaoTest.java":"ADD","server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/user\/SamlMessageIdMapper.xml":"ADD","server\/sonar-auth-saml\/src\/main\/java\/org\/sonar\/auth\/saml\/SamlMessageIdChecker.java":"ADD","server\/sonar-db-core\/src\/main\/java\/org\/sonar\/db\/version\/SqTables.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/user\/SamlMessageIdMapper.java":"ADD","server\/sonar-auth-saml\/src\/test\/java\/org\/sonar\/auth\/saml\/SamlModuleTest.java":"MODIFY","server\/sonar-auth-saml\/src\/main\/java\/org\/sonar\/auth\/saml\/SamlModule.java":"MODIFY","server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/purge\/ExpiredSessionsCleanerExecutorServiceImpl.java":"ADD","server\/sonar-auth-saml\/src\/main\/java\/org\/sonar\/auth\/saml\/SamlIdentityProvider.java":"MODIFY","server\/sonar-db-dao\/src\/schema\/schema-sq.ddl":"MODIFY","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/CreateSamlMessageIdsTableTest.java":"ADD","server\/sonar-webserver-auth\/src\/test\/java\/org\/sonar\/server\/authentication\/purge\/ExpiredSessionsCleanerTest.java":"ADD","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/DaoModule.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/user\/SamlMessageIdDao.java":"ADD","server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/AuthenticationModule.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/DbVersion84.java":"MODIFY","server\/sonar-auth-saml\/build.gradle":"MODIFY","\/dev\/null":"DELETE","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/user\/SamlMessageIdDto.java":"ADD","server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/purge\/ExpiredSessionsCleanerExecutorService.java":"ADD","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/CreateSamlMessageIdsTable.java":"ADD","server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/purge\/ExpiredSessionsCleaner.java":"ADD","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/MyBatis.java":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/DbClient.java":[{"add":["84","import org.sonar.db.user.SamlMessageIdDao;","167","  private final SamlMessageIdDao samlMessageIdDao;","246","    samlMessageIdDao = getDao(map, SamlMessageIdDao.class);","539","  public SamlMessageIdDao samlMessageIdDao() {","540","    return samlMessageIdDao;","541","  }","542",""],"delete":[]}],"server\/sonar-auth-saml\/src\/test\/java\/org\/sonar\/auth\/saml\/SamlMessageIdCheckerTest.java":[{"add":[],"delete":[]}],"server\/sonar-auth-saml\/src\/test\/java\/org\/sonar\/auth\/saml\/SamlIdentityProviderTest.java":[{"add":["38","import org.sonar.db.DbTester;","41","import static org.assertj.core.api.Assertions.assertThatThrownBy;","50","  public DbTester db = DbTester.create();","54","  private SamlMessageIdChecker samlMessageIdChecker = mock(SamlMessageIdChecker.class);","55","","56","  private SamlIdentityProvider underTest = new SamlIdentityProvider(new SamlSettings(settings.asConfig()), new SamlMessageIdChecker(db.getDbClient()));","103","    assertThatThrownBy(() -> underTest.init(context))","104","      .isInstanceOf(IllegalStateException.class)","105","      .hasMessage(\"Fail to create Auth\");","163","    assertThatThrownBy(() -> underTest.callback(callbackContext))","164","      .isInstanceOf(NullPointerException.class)","165","      .hasMessage(\"login is missing\");","174","    assertThatThrownBy(() -> underTest.callback(callbackContext))","175","      .isInstanceOf(NullPointerException.class)","176","      .hasMessage(\"name is missing\");","185","    assertThatThrownBy(() -> underTest.callback(callbackContext))","186","      .isInstanceOf(IllegalStateException.class)","187","      .hasMessage(\"Fail to create Auth\");","220","    assertThatThrownBy(() -> underTest.callback(callbackContext))","221","      .isInstanceOf(UnauthorizedException.class)","222","      .hasMessage(\"Signature validation failed. SAML Response rejected\");","223","  }","224","","225","  @Test","226","  public void fail_callback_when_message_was_already_sent() {","227","    setSettings(true);","228","    DumbCallbackContext callbackContext = new DumbCallbackContext(\"encoded_minimal_response.txt\");","231","","232","    assertThatThrownBy(() -> underTest.callback(callbackContext))","233","      .isInstanceOf(IllegalArgumentException.class)","234","      .hasMessage(\"This message has already been processed\");"],"delete":["32","import org.junit.rules.ExpectedException;","49","  public ExpectedException expectedException = ExpectedException.none();","53","  private SamlIdentityProvider underTest = new SamlIdentityProvider(new SamlSettings(settings.asConfig()));","100","    expectedException.expect(IllegalStateException.class);","101","    expectedException.expectMessage(\"Fail to create Auth\");","102","","103","    underTest.init(context);","161","    expectedException.expect(NullPointerException.class);","162","    expectedException.expectMessage(\"login is missing\");","164","    underTest.callback(callbackContext);","172","    expectedException.expect(NullPointerException.class);","173","    expectedException.expectMessage(\"name is missing\");","174","","175","    underTest.callback(callbackContext);","184","    expectedException.expect(IllegalStateException.class);","185","    expectedException.expectMessage(\"Fail to create Auth\");","186","","187","    underTest.callback(callbackContext);","220","    expectedException.expect(UnauthorizedException.class);","221","    expectedException.expectMessage(\"Signature validation failed. SAML Response rejected\");"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/user\/SamlMessageIdDaoTest.java":[{"add":[],"delete":[]}],"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/user\/SamlMessageIdMapper.xml":[{"add":[],"delete":[]}],"server\/sonar-auth-saml\/src\/main\/java\/org\/sonar\/auth\/saml\/SamlMessageIdChecker.java":[{"add":[],"delete":[]}],"server\/sonar-db-core\/src\/main\/java\/org\/sonar\/db\/version\/SqTables.java":[{"add":["108","    \"saml_message_ids\","],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/user\/SamlMessageIdMapper.java":[{"add":[],"delete":[]}],"server\/sonar-auth-saml\/src\/test\/java\/org\/sonar\/auth\/saml\/SamlModuleTest.java":[{"add":["33","    assertThat(container.size()).isGreaterThan(COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER);"],"delete":["33","    assertThat(container.size()).isEqualTo(COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER + 12);"]}],"server\/sonar-auth-saml\/src\/main\/java\/org\/sonar\/auth\/saml\/SamlModule.java":[{"add":["31","      SamlMessageIdChecker.class,"],"delete":[]}],"server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/purge\/ExpiredSessionsCleanerExecutorServiceImpl.java":[{"add":[],"delete":[]}],"server\/sonar-auth-saml\/src\/main\/java\/org\/sonar\/auth\/saml\/SamlIdentityProvider.java":[{"add":["58","  private final SamlMessageIdChecker samlMessageIdChecker;","60","  public SamlIdentityProvider(SamlSettings samlSettings, SamlMessageIdChecker samlMessageIdChecker) {","62","    this.samlMessageIdChecker = samlMessageIdChecker;","111","    samlMessageIdChecker.check(auth);"],"delete":["59","  public SamlIdentityProvider(SamlSettings samlSettings) {"]}],"server\/sonar-db-dao\/src\/schema\/schema-sq.ddl":[{"add":["873","CREATE TABLE \"SAML_MESSAGE_IDS\"(","874","    \"UUID\" VARCHAR(40) NOT NULL,","875","    \"MESSAGE_ID\" VARCHAR(255) NOT NULL,","876","    \"EXPIRATION_DATE\" BIGINT NOT NULL,","877","    \"CREATED_AT\" BIGINT NOT NULL","878",");","879","ALTER TABLE \"SAML_MESSAGE_IDS\" ADD CONSTRAINT \"PK_SAML_MESSAGE_IDS\" PRIMARY KEY(\"UUID\");","880","CREATE UNIQUE INDEX \"SAML_MESSAGE_IDS_UNIQUE\" ON \"SAML_MESSAGE_IDS\"(\"MESSAGE_ID\");","881",""],"delete":[]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/CreateSamlMessageIdsTableTest.java":[{"add":[],"delete":[]}],"server\/sonar-webserver-auth\/src\/test\/java\/org\/sonar\/server\/authentication\/purge\/ExpiredSessionsCleanerTest.java":[{"add":[],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/DaoModule.java":[{"add":["86","import org.sonar.db.user.SamlMessageIdDao;","158","    SamlMessageIdDao.class,"],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/user\/SamlMessageIdDao.java":[{"add":[],"delete":[]}],"server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/AuthenticationModule.java":[{"add":["23","import org.sonar.server.authentication.purge.ExpiredSessionsCleaner;","24","import org.sonar.server.authentication.purge.ExpiredSessionsCleanerExecutorServiceImpl;","47","      ExpiredSessionsCleaner.class,","48","      ExpiredSessionsCleanerExecutorServiceImpl.class,"],"delete":["23","import org.sonar.server.authentication.purge.SessionTokensCleaner;","24","import org.sonar.server.authentication.purge.SessionTokensCleanerExecutorServiceImpl;","47","      SessionTokensCleaner.class,","48","      SessionTokensCleanerExecutorServiceImpl.class,"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/DbVersion84.java":[{"add":["784","      .add(3802, \"Create 'SAML_MESSAGE_IDS' table\", CreateSamlMessageIdsTable.class)"],"delete":[]}],"server\/sonar-auth-saml\/build.gradle":[{"add":["19","    compileOnly project(':server:sonar-db-dao')","26","    testCompile testFixtures(project(':server:sonar-db-dao'))"],"delete":[]}],"\/dev\/null":[{"add":[],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/user\/SamlMessageIdDto.java":[{"add":[],"delete":[]}],"server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/purge\/ExpiredSessionsCleanerExecutorService.java":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/CreateSamlMessageIdsTable.java":[{"add":[],"delete":[]}],"server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/purge\/ExpiredSessionsCleaner.java":[{"add":[],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/MyBatis.java":[{"add":["142","import org.sonar.db.user.SamlMessageIdMapper;","289","      SamlMessageIdMapper.class,"],"delete":[]}]}},"fa2da3f08329ff6498ecc09b4630a259514e65bc":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/__snapshots__\/CrossComponentSourceViewerWrapper-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/ComponentSourceSnippetViewer.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/__snapshots__\/CrossComponentSourceViewerWrapper-test.tsx.snap":[{"add":["18","  <ContextProvider","20","    value={","22","        \"branchLike\": undefined,","23","        \"file\": Object {","37","      }","38","    }","39","  >","40","    <ComponentSourceSnippetViewer","41","      issue={","42","        Object {","43","          \"actions\": Array [],","44","          \"component\": \"main.js\",","45","          \"componentLongName\": \"main.js\",","46","          \"componentQualifier\": \"FIL\",","47","          \"componentUuid\": \"foo1234\",","48","          \"creationDate\": \"2017-03-01T09:36:01+0100\",","49","          \"flows\": Array [","50","            Array [","51","              Object {","52","                \"component\": \"main.js\",","53","                \"textRange\": Object {","54","                  \"endLine\": 2,","55","                  \"endOffset\": 2,","56","                  \"startLine\": 1,","57","                  \"startOffset\": 1,","58","                },","59","              },","60","              Object {","61","                \"component\": \"main.js\",","62","                \"textRange\": Object {","63","                  \"endLine\": 2,","64","                  \"endOffset\": 2,","65","                  \"startLine\": 1,","66","                  \"startOffset\": 1,","67","                },","68","              },","69","              Object {","70","                \"component\": \"main.js\",","71","                \"textRange\": Object {","72","                  \"endLine\": 2,","73","                  \"endOffset\": 2,","74","                  \"startLine\": 1,","75","                  \"startOffset\": 1,","76","                },","77","              },","78","            ],","79","            Array [","80","              Object {","81","                \"component\": \"main.js\",","82","                \"textRange\": Object {","83","                  \"endLine\": 2,","84","                  \"endOffset\": 2,","85","                  \"startLine\": 1,","86","                  \"startOffset\": 1,","87","                },","88","              },","89","              Object {","90","                \"component\": \"main.js\",","91","                \"textRange\": Object {","92","                  \"endLine\": 2,","93","                  \"endOffset\": 2,","94","                  \"startLine\": 1,","95","                  \"startOffset\": 1,","96","                },","97","              },","98","            ],","99","          ],","100","          \"fromHotspot\": false,","101","          \"key\": \"1\",","102","          \"line\": 25,","103","          \"message\": \"Reduce the number of conditional operators (4) used in the expression\",","104","          \"organization\": \"myorg\",","105","          \"project\": \"myproject\",","106","          \"projectKey\": \"foo\",","107","          \"projectName\": \"Foo\",","108","          \"projectOrganization\": \"org\",","109","          \"rule\": \"javascript:S1067\",","110","          \"ruleName\": \"foo\",","111","          \"secondaryLocations\": Array [","112","            Object {","113","              \"component\": \"main.js\",","114","              \"textRange\": Object {","115","                \"endLine\": 2,","116","                \"endOffset\": 2,","117","                \"startLine\": 1,","118","                \"startOffset\": 1,","119","              },","120","            },","121","            Object {","122","              \"component\": \"main.js\",","123","              \"textRange\": Object {","124","                \"endLine\": 2,","125","                \"endOffset\": 2,","126","                \"startLine\": 1,","127","                \"startOffset\": 1,","128","              },","129","            },","130","          ],","131","          \"severity\": \"MAJOR\",","132","          \"status\": \"OPEN\",","133","          \"textRange\": Object {","134","            \"endLine\": 26,","135","            \"endOffset\": 15,","136","            \"startLine\": 25,","137","            \"startOffset\": 0,","138","          },","139","          \"transitions\": Array [],","140","          \"type\": \"BUG\",","141","        }","142","      }","143","      issuesByLine={Object {}}","144","      last={true}","145","      loadDuplications={[Function]}","146","      locations={","147","        Array [","158","        ]","160","      onIssueChange={[MockFunction]}","161","      onIssuePopupToggle={[Function]}","162","      onLinePopupToggle={[Function]}","163","      onLocationSelect={[MockFunction]}","164","      renderDuplicationPopup={[Function]}","165","      scroll={[MockFunction]}","166","      snippetGroup={","167","        Object {","168","          \"component\": Object {","169","            \"key\": \"main.js\",","170","            \"measures\": Object {","171","              \"coverage\": \"85.2\",","172","              \"duplicationDensity\": \"1.0\",","173","              \"issues\": \"12\",","174","              \"lines\": \"56\",","175","            },","176","            \"path\": \"main.js\",","177","            \"project\": \"my-project\",","178","            \"projectName\": \"MyProject\",","179","            \"q\": \"FIL\",","180","            \"uuid\": \"foo-bar\",","181","          },","182","          \"locations\": Array [","183","            Object {","184","              \"component\": \"main.js\",","185","              \"index\": 0,","186","              \"textRange\": Object {","187","                \"endLine\": 2,","188","                \"endOffset\": 2,","189","                \"startLine\": 1,","190","                \"startOffset\": 1,","191","              },","192","            },","193","          ],","194","          \"sources\": Object {","195","            \"16\": Object {","196","              \"code\": \"<span class=\\\\\"k\\\\\">import<\/span> java.util.<span class=\\\\\"sym-9 sym\\\\\">ArrayList<\/span>;\",","197","              \"coverageStatus\": \"covered\",","198","              \"coveredConditions\": 2,","199","              \"duplicated\": false,","200","              \"isNew\": true,","201","              \"line\": 16,","202","              \"scmAuthor\": \"simon.brandhof@sonarsource.com\",","203","              \"scmDate\": \"2018-12-11T10:48:39+0100\",","204","              \"scmRevision\": \"80f564becc0c0a1c9abaa006eca83a4fd278c3f0\",","205","            },","206","          },","207","        }","208","      }","209","    \/>","210","  <\/ContextProvider>"],"delete":["18","  <ComponentSourceSnippetViewer","19","    issue={","20","      Object {","21","        \"actions\": Array [],","22","        \"component\": \"main.js\",","23","        \"componentLongName\": \"main.js\",","24","        \"componentQualifier\": \"FIL\",","25","        \"componentUuid\": \"foo1234\",","26","        \"creationDate\": \"2017-03-01T09:36:01+0100\",","27","        \"flows\": Array [","28","          Array [","29","            Object {","30","              \"component\": \"main.js\",","31","              \"textRange\": Object {","32","                \"endLine\": 2,","33","                \"endOffset\": 2,","34","                \"startLine\": 1,","35","                \"startOffset\": 1,","36","              },","37","            },","38","            Object {","39","              \"component\": \"main.js\",","40","              \"textRange\": Object {","41","                \"endLine\": 2,","42","                \"endOffset\": 2,","43","                \"startLine\": 1,","44","                \"startOffset\": 1,","45","              },","46","            },","47","            Object {","48","              \"component\": \"main.js\",","49","              \"textRange\": Object {","50","                \"endLine\": 2,","51","                \"endOffset\": 2,","52","                \"startLine\": 1,","53","                \"startOffset\": 1,","54","              },","55","            },","56","          ],","57","          Array [","58","            Object {","59","              \"component\": \"main.js\",","60","              \"textRange\": Object {","61","                \"endLine\": 2,","62","                \"endOffset\": 2,","63","                \"startLine\": 1,","64","                \"startOffset\": 1,","65","              },","66","            },","67","            Object {","68","              \"component\": \"main.js\",","69","              \"textRange\": Object {","70","                \"endLine\": 2,","71","                \"endOffset\": 2,","72","                \"startLine\": 1,","73","                \"startOffset\": 1,","74","              },","75","            },","76","          ],","77","        ],","78","        \"fromHotspot\": false,","79","        \"key\": \"1\",","80","        \"line\": 25,","81","        \"message\": \"Reduce the number of conditional operators (4) used in the expression\",","82","        \"organization\": \"myorg\",","83","        \"project\": \"myproject\",","84","        \"projectKey\": \"foo\",","85","        \"projectName\": \"Foo\",","86","        \"projectOrganization\": \"org\",","87","        \"rule\": \"javascript:S1067\",","88","        \"ruleName\": \"foo\",","89","        \"secondaryLocations\": Array [","90","          Object {","91","            \"component\": \"main.js\",","92","            \"textRange\": Object {","93","              \"endLine\": 2,","94","              \"endOffset\": 2,","95","              \"startLine\": 1,","96","              \"startOffset\": 1,","97","            },","98","          },","99","          Object {","100","            \"component\": \"main.js\",","101","            \"textRange\": Object {","102","              \"endLine\": 2,","103","              \"endOffset\": 2,","104","              \"startLine\": 1,","105","              \"startOffset\": 1,","106","            },","107","          },","108","        ],","109","        \"severity\": \"MAJOR\",","110","        \"status\": \"OPEN\",","111","        \"textRange\": Object {","112","          \"endLine\": 26,","113","          \"endOffset\": 15,","114","          \"startLine\": 25,","115","          \"startOffset\": 0,","116","        },","117","        \"transitions\": Array [],","118","        \"type\": \"BUG\",","119","      }","120","    }","121","    issuesByLine={Object {}}","123","    last={true}","124","    loadDuplications={[Function]}","125","    locations={","126","      Array [","127","        Object {","128","          \"component\": \"main.js\",","129","          \"index\": 0,","130","          \"textRange\": Object {","131","            \"endLine\": 2,","132","            \"endOffset\": 2,","133","            \"startLine\": 1,","134","            \"startOffset\": 1,","135","          },","136","        },","137","      ]","138","    }","139","    onIssueChange={[MockFunction]}","140","    onIssuePopupToggle={[Function]}","141","    onLinePopupToggle={[Function]}","142","    onLocationSelect={[MockFunction]}","143","    renderDuplicationPopup={[Function]}","144","    scroll={[MockFunction]}","145","    snippetGroup={","147","        \"component\": Object {","161","        \"locations\": Array [","172","        ],","173","        \"sources\": Object {","174","          \"16\": Object {","175","            \"code\": \"<span class=\\\\\"k\\\\\">import<\/span> java.util.<span class=\\\\\"sym-9 sym\\\\\">ArrayList<\/span>;\",","176","            \"coverageStatus\": \"covered\",","177","            \"coveredConditions\": 2,","178","            \"duplicated\": false,","179","            \"isNew\": true,","180","            \"line\": 16,","181","            \"scmAuthor\": \"simon.brandhof@sonarsource.com\",","182","            \"scmDate\": \"2018-12-11T10:48:39+0100\",","183","            \"scmRevision\": \"80f564becc0c0a1c9abaa006eca83a4fd278c3f0\",","184","          },","185","        },","187","    }","188","  \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/ComponentSourceSnippetViewer.tsx":[{"add":["97","      this.props.snippetGroup.locations,"],"delete":["96","    const mainLocation: T.FlowLocation = {","97","      component: this.props.issue.component,","98","      textRange: this.props.issue.textRange || {","99","        endLine: 0,","100","        endOffset: 0,","101","        startLine: 0,","102","        startOffset: 0","103","      }","104","    };","106","      this.props.snippetGroup.locations.concat(mainLocation),"]}]}},"2fcad2e70a89b783aea8b81bd8eb59355be9285c":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualitygate\/ws\/ProjectStatusAction.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/qualitygate\/ws\/ProjectStatusActionTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualitygate\/ws\/ProjectStatusAction.java":[{"add":[],"delete":["48","import static com.google.common.base.Preconditions.checkState;","144","    checkState(snapshotDto != null, \"Last analysis of project '%s' not found\", projectDto.getKey());"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/qualitygate\/ws\/ProjectStatusActionTest.java":[{"add":["33","import org.sonar.db.component.ComponentDbTester;","68","  ComponentDbTester componentDb = new ComponentDbTester(db);","86","    ComponentDto project = componentDb.insertComponent(newProjectDto(\"project-uuid\"));","115","    ComponentDto project = componentDb.insertComponent(newProjectDto(\"project-uuid\"));","144","    ComponentDto project = componentDb.insertComponent(newProjectDto(\"project-uuid\").setKey(\"project-key\"));","173","    ComponentDto project = componentDb.insertComponent(newProjectDto(\"project-uuid\"));","177","    ProjectStatusWsResponse result = call(snapshot.getId().toString());","178","","179","    assertThat(result.getProjectStatus().getStatus()).isEqualTo(Status.NONE);","180","    assertThat(result.getProjectStatus().getConditionsCount()).isEqualTo(0);","181","  }","182","","183","  @Test","184","  public void return_undefined_status_if_snapshot_is_not_found() {","185","    userSession.login(\"john\").setGlobalPermissions(SYSTEM_ADMIN);","186","    componentDb.insertComponent(newProjectDto(\"project-uuid\"));","187","","188","    ProjectStatusWsResponse result = callByProjectUuid(\"project-uuid\");","198","    ComponentDto project = componentDb.insertComponent(newProjectDto(\"project-uuid\"));","202","    call(snapshot.getId().toString());","209","    ComponentDto project = componentDb.insertComponent(newProjectDto(\"project-uuid\"));","213","    call(snapshot.getId().toString());","218","    ComponentDto project = componentDb.insertComponent(newProjectDto(\"project-uuid\"));","224","    call(snapshot.getId().toString());","234","    call(ANALYSIS_ID);","241","    ComponentDto project = componentDb.insertComponent(newProjectDto(\"project-uuid\"));","246","    call(snapshot.getId().toString());","268","  private ProjectStatusWsResponse call(String taskId) {","279","","280","  private ProjectStatusWsResponse callByProjectUuid(String projectUuid) {","281","    try {","282","      return ProjectStatusWsResponse.parseFrom(","283","        ws.newRequest()","284","          .setParam(PARAM_PROJECT_ID, projectUuid)","285","          .setMediaType(MediaTypes.PROTOBUF)","286","          .execute().getInputStream());","287","    } catch (IOException e) {","288","      throw Throwables.propagate(e);","289","    }","290","  }"],"delete":["59","","85","    ComponentDto project = newProjectDto(\"project-uuid\");","86","    dbClient.componentDao().insert(dbSession, project);","115","    ComponentDto project = newProjectDto(\"project-uuid\");","116","    dbClient.componentDao().insert(dbSession, project);","145","    ComponentDto project = newProjectDto(\"project-uuid\")","146","      .setKey(\"project-key\");","147","    dbClient.componentDao().insert(dbSession, project);","176","    ComponentDto project = newProjectDto(\"project-uuid\");","177","    dbClient.componentDao().insert(dbSession, project);","181","    ProjectStatusWsResponse result = newRequest(snapshot.getId().toString());","191","    ComponentDto project = newProjectDto(\"project-uuid\");","192","    dbClient.componentDao().insert(dbSession, project);","196","    newRequest(snapshot.getId().toString());","203","    ComponentDto project = newProjectDto(\"project-uuid\");","204","    dbClient.componentDao().insert(dbSession, project);","208","    newRequest(snapshot.getId().toString());","213","    ComponentDto project = newProjectDto(\"project-uuid\");","214","    dbClient.componentDao().insert(dbSession, project);","220","    newRequest(snapshot.getId().toString());","230","    newRequest(ANALYSIS_ID);","237","    ComponentDto project = newProjectDto(\"project-uuid\");","238","    dbClient.componentDao().insert(dbSession, project);","243","    newRequest(snapshot.getId().toString());","265","  private ProjectStatusWsResponse newRequest(String taskId) {"]}]}},"d2fda37e43a815d44c7f1be47c1ba7a6705f9bcb":{"changes":{"server\/sonar-web\/src\/main\/js\/app\/components\/extensions\/Extension.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/extensions\/__tests__\/Extension-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/extensions\/__tests__\/__snapshots__\/Extension-test.tsx.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/app\/components\/extensions\/Extension.tsx":[{"add":["98","    } else {","99","      this.setState({ extensionElement: undefined });"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/app\/components\/extensions\/__tests__\/Extension-test.tsx":[{"add":["19","import { mount } from 'enzyme';","27","  getExtensionStart: jest.fn().mockResolvedValue({})","34","it('should render React extensions correctly', async () => {","46","it('should handle Function extensions correctly', async () => {","47","  const stop = jest.fn();","48","  const start = jest.fn(() => {","49","    return stop;","50","  });","51","  (getExtensionStart as jest.Mock).mockResolvedValue(start);","52","","53","  const wrapper = shallowRender();","54","  await waitAndUpdate(wrapper);","55","  expect(start).toBeCalled();","56","","57","  wrapper.setProps({ extension: { key: 'bar', name: 'Bar' } });","58","  await waitAndUpdate(wrapper);","59","  expect(stop).toBeCalled();","60","});","61","","62","it('should unmount an extension before starting a new one', async done => {","63","  const reactExtension = jest.fn().mockReturnValue(<div className=\"extension\" \/>);","64","  (getExtensionStart as jest.Mock).mockResolvedValue(reactExtension);","65","","66","  const wrapper = shallowRender();","67","  await waitAndUpdate(wrapper);","68","  expect(wrapper.state('extensionElement')).not.toBeUndefined();","69","","70","  const start = jest.fn((options: any) => {","71","    expect(options.el).not.toBeUndefined();","72","    done();","73","  });","74","  (getExtensionStart as jest.Mock).mockResolvedValue(start);","75","","76","  wrapper.setProps({ extension: { key: 'bar', name: 'Bar' } });","77","  await waitAndUpdate(wrapper);","78","  expect(wrapper.state('extensionElement')).toBeUndefined();","79","  expect(start).toBeCalled();","80","});","81","","83","  \/\/ We need to mount, as we rely on refs.","84","  return mount<Extension>("],"delete":["19","import { shallow } from 'enzyme';","27","  getExtensionStart: jest.fn().mockResolvedValue(jest.fn())","34","it('should render extension correctly', async () => {","47","  return shallow("]}],"server\/sonar-web\/src\/main\/js\/app\/components\/extensions\/__tests__\/__snapshots__\/Extension-test.tsx.snap":[{"add":["2","exports[`should render React extensions correctly 1`] = `","3","<Extension","4","  currentUser={","5","    Object {","6","      \"isLoggedIn\": false,","7","    }","8","  }","9","  extension={","10","    Object {","11","      \"key\": \"foo\",","12","      \"name\": \"Foo\",","13","    }","14","  }","15","  intl={Object {}}","16","  location={","17","    Object {","18","      \"action\": \"PUSH\",","19","      \"hash\": \"\",","20","      \"key\": \"key\",","21","      \"pathname\": \"\/path\",","22","      \"query\": Object {},","23","      \"search\": \"\",","24","      \"state\": Object {},","25","    }","26","  }","27","  onFail={[MockFunction]}","28","  router={","29","    Object {","30","      \"createHref\": [MockFunction],","31","      \"createPath\": [MockFunction],","32","      \"go\": [MockFunction],","33","      \"goBack\": [MockFunction],","34","      \"goForward\": [MockFunction],","35","      \"isActive\": [MockFunction],","36","      \"push\": [MockFunction],","37","      \"replace\": [MockFunction],","38","      \"setRouteLeaveHook\": [MockFunction],","39","    }","40","  }","41",">","42","  <div>","43","    <HelmetWrapper","44","      defer={true}","45","      encodeSpecialCharacters={true}","46","      title=\"Foo\"","47","    >","48","      <SideEffect(NullComponent)","49","        defer={true}","50","        encodeSpecialCharacters={true}","51","        title=\"Foo\"","52","      >","53","        <NullComponent","54","          defer={true}","55","          encodeSpecialCharacters={true}","56","          title=\"Foo\"","57","        \/>","58","      <\/SideEffect(NullComponent)>","59","    <\/HelmetWrapper>","60","    <div \/>","61","  <\/div>","62","<\/Extension>","65","exports[`should render React extensions correctly 2`] = `","66","<Extension","67","  currentUser={","68","    Object {","69","      \"isLoggedIn\": false,","70","    }","71","  }","72","  extension={","73","    Object {","74","      \"key\": \"foo\",","75","      \"name\": \"Foo\",","76","    }","77","  }","78","  intl={Object {}}","79","  location={","80","    Object {","81","      \"action\": \"PUSH\",","82","      \"hash\": \"\",","83","      \"key\": \"key\",","84","      \"pathname\": \"\/path\",","85","      \"query\": Object {},","86","      \"search\": \"\",","87","      \"state\": Object {},","88","    }","89","  }","90","  onFail={[MockFunction]}","91","  router={","92","    Object {","93","      \"createHref\": [MockFunction],","94","      \"createPath\": [MockFunction],","95","      \"go\": [MockFunction],","96","      \"goBack\": [MockFunction],","97","      \"goForward\": [MockFunction],","98","      \"isActive\": [MockFunction],","99","      \"push\": [MockFunction],","100","      \"replace\": [MockFunction],","101","      \"setRouteLeaveHook\": [MockFunction],","102","    }","103","  }","104",">","105","  <div>","106","    <HelmetWrapper","107","      defer={true}","108","      encodeSpecialCharacters={true}","109","      title=\"Foo\"","110","    >","111","      <SideEffect(NullComponent)","112","        defer={true}","113","        encodeSpecialCharacters={true}","114","        title=\"Foo\"","115","      >","116","        <NullComponent","117","          defer={true}","118","          encodeSpecialCharacters={true}","119","          title=\"Foo\"","120","        \/>","121","      <\/SideEffect(NullComponent)>","122","    <\/HelmetWrapper>","123","    <div","124","      className=\"extension\"","125","    \/>","126","  <\/div>","127","<\/Extension>"],"delete":["2","exports[`should render extension correctly 1`] = `","3","<div>","4","  <HelmetWrapper","5","    defer={true}","6","    encodeSpecialCharacters={true}","7","    title=\"Foo\"","8","  \/>","9","  <div \/>","10","<\/div>","13","exports[`should render extension correctly 2`] = `","14","<div>","15","  <HelmetWrapper","16","    defer={true}","17","    encodeSpecialCharacters={true}","18","    title=\"Foo\"","19","  \/>","20","  <div","21","    className=\"extension\"","22","  \/>","23","<\/div>"]}]}},"65820cf1d1c7c8c12b143c2a5aa6d3d3f6048479":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/log\/CeLogging.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/log\/CeLoggingTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/log\/CeLogging.java":[{"add":["21","import ch.qos.logback.classic.Logger;","27","import ch.qos.logback.core.sift.AppenderTracker;","28","import ch.qos.logback.core.util.Duration;","39","import org.sonar.process.LogbackHelper;","45","import static com.google.common.base.Preconditions.checkState;","59","  private static final long TIMEOUT_2_MINUTES = 1000 * 60 * 2L;","60","  private static final String CE_APPENDER_NAME = \"ce\";","61","  \/\/ using 0L as timestamp when retrieving appender to stop it will make it instantly eligible for removal","62","  private static final long STOPPING_TRACKER_TIMESTAMP = 0L;","63","","68","  private final LogbackHelper helper = new LogbackHelper();","120","      stopAppender(relativePath);","125","  private void stopAppender(String relativePath) {","126","    Appender<ILoggingEvent> appender = helper.getRootContext().getLogger(Logger.ROOT_LOGGER_NAME).getAppender(CE_APPENDER_NAME);","127","    checkState(appender instanceof SiftingAppender, \"Appender with name %s is null or not a SiftingAppender\", CE_APPENDER_NAME);","128","    AppenderTracker<ILoggingEvent> ceAppender = ((SiftingAppender) appender).getAppenderTracker();","129","    ceAppender.getOrCreate(relativePath, STOPPING_TRACKER_TIMESTAMP).stop();","130","  }","131","","182","    siftingAppender.setName(CE_APPENDER_NAME);","183","    siftingAppender.setTimeout(new Duration(TIMEOUT_2_MINUTES));"],"delete":["163","    siftingAppender.setName(\"ce\");"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/log\/CeLoggingTest.java":[{"add":["21","import ch.qos.logback.classic.Logger;","25","import ch.qos.logback.core.Appender;","27","import ch.qos.logback.core.joran.spi.JoranException;","31","import java.util.Collection;","34","import org.junit.After;","35","import org.junit.Before;","40","import org.slf4j.LoggerFactory;","43","import org.sonar.process.LogbackHelper;","49","import static org.mockito.Mockito.mock;","50","import static org.mockito.Mockito.when;","51","import static org.sonar.server.computation.log.CeLogging.MDC_LOG_PATH;","60","  private LogbackHelper helper = new LogbackHelper();","61","  private File dataDir;","62","","63","  @Before","64","  public void setUp() throws Exception {","65","    this.dataDir = temp.newFolder();","66","  }","67","","68","  @After","69","  public void resetLogback() throws JoranException {","70","    helper.resetFromXml(\"\/logback-test.xml\");","71","  }","72","","73","  @After","74","  public void cleanMDC() throws Exception {","75","    MDC.clear();","76","  }","77","","102","  public void initForTask_adds_path_of_ce_log_file_in_MDC() throws IOException {","103","    CeLogging underTest = new CeLogging(newSettings(dataDir, 5));","105","    CeTask task = createCeTask(\"TYPE1\", \"U1\");","107","    assertThat(MDC.get(MDC_LOG_PATH)).isNotEmpty().isEqualTo(LogFileRef.from(task).getRelativePath());","108","  }","109","","110","  @Test","111","  public void clearForTask_throws_ISE_if_CE_appender_is_not_configured() throws IOException {","112","    CeLogging underTest = new CeLogging(newSettings(dataDir, 5));","113","","114","    CeTask task = createCeTask(\"TYPE1\", \"U1\");","115","    underTest.initForTask(task);","116","","117","    expectedException.expect(IllegalStateException.class);","118","    expectedException.expectMessage(\"Appender with name ce is null or not a SiftingAppender\");","119","","121","  }","122","","123","  @Test","124","  public void clearForTask_throws_ISE_if_CE_appender_is_not_a_SiftingAppender() throws IOException {","125","    Appender<ILoggingEvent> mockCeAppender = mock(Appender.class);","126","    when(mockCeAppender.getName()).thenReturn(\"ce\");","127","    helper.getRootContext().getLogger(Logger.ROOT_LOGGER_NAME).addAppender(mockCeAppender);","128","","129","    CeLogging underTest = new CeLogging(newSettings(dataDir, 5));","130","","131","    CeTask task = createCeTask(\"TYPE1\", \"U1\");","132","    underTest.initForTask(task);","133","","134","    expectedException.expect(IllegalStateException.class);","135","    expectedException.expectMessage(\"Appender with name ce is null or not a SiftingAppender\");","136","","137","    underTest.clearForTask();","138","  }","139","","140","  @Test","141","  public void clearForTask_clears_MDC() throws IOException {","142","    setupCeAppender();","143","","144","    CeLogging underTest = new CeLogging(newSettings(dataDir, 5));","145","","146","    CeTask task = createCeTask(\"TYPE1\", \"U1\");","147","    underTest.initForTask(task);","148","    assertThat(MDC.get(MDC_LOG_PATH)).isNotEmpty().isEqualTo(LogFileRef.from(task).getRelativePath());","149","","150","    underTest.clearForTask();","151","    assertThat(MDC.get(MDC_LOG_PATH)).isNull();","152","  }","153","","154","  @Test","155","  public void cleanForTask_stops_only_appender_for_MDC_value() throws IOException {","156","    Logger rootLogger = setupCeAppender();","157","","158","    CeLogging underTest = new CeLogging(newSettings(dataDir, 5));","159","","160","    \/\/ init MDC","161","    underTest.initForTask(createCeTask(\"TYPE1\", \"U1\"));","162","    verifyNoAppender(rootLogger);","163","","164","    \/\/ logging will create and start the appender","165","    LoggerFactory.getLogger(getClass()).info(\"some log!\");","166","    verifyAllAppenderStarted(rootLogger, 1);","167","","168","    \/\/ init MDC and create appender for another task","169","    \/\/ (in the same thread, which should not happen, but it's good enough for our test)","170","    CeTask ceTask = createCeTask(\"TYPE1\", \"U2\");","171","    underTest.initForTask(ceTask);","172","    LoggerFactory.getLogger(getClass()).info(\"some other log!\");","173","    verifyAllAppenderStarted(rootLogger, 2);","174","","175","    \/\/ stop appender which is currently referenced in MDC","176","    underTest.clearForTask();","177","","178","    Appender appender = verifySingleAppenderIsStopped(rootLogger, 2);","179","    assertThat(appender.getName()).isEqualTo(\"ce-\" + LogFileRef.from(ceTask).getRelativePath());","185","      File file = new File(dataDir, format(\"U%d.log\", i));","191","    assertThat(dataDir.listFiles()).hasSize(5);","194","    CeLogging underTest = new CeLogging(newSettings(dataDir, 3));","195","    underTest.purgeDir(dataDir);","197","    assertThat(dataDir.listFiles()).hasSize(3);","198","    assertThat(dataDir.listFiles()).extracting(\"name\")","204","    FileUtils.touch(new File(dataDir, \"U1.log\"));","206","    CeLogging underTest = new CeLogging(newSettings(dataDir, 5));","207","    underTest.purgeDir(dataDir);","209","    assertThat(dataDir.listFiles()).extracting(\"name\").containsOnly(\"U1.log\");","214","    FileUtils.touch(new File(dataDir, \"U1.log\"));","216","    CeLogging underTest = new CeLogging(newSettings(dataDir, 0));","217","    underTest.purgeDir(dataDir);","219","    assertThat(dataDir.listFiles()).isEmpty();","227","    Settings settings = newSettings(dataDir, -1);","229","    logging.purgeDir(dataDir);","234","    SiftingAppender siftingAppender = CeLogging.createAppenderConfiguration(new LoggerContext(), dataDir);","241","    assertThat(siftingAppender.getDiscriminator().getKey()).isEqualTo(MDC_LOG_PATH);","242","    assertThat(siftingAppender.getTimeout().getMilliseconds()).isEqualTo(1000 * 60 * 2);","243","  }","244","","245","  private Logger setupCeAppender() {","246","    Logger rootLogger = helper.getRootContext().getLogger(Logger.ROOT_LOGGER_NAME);","247","    rootLogger.addAppender(CeLogging.createAppenderConfiguration(helper.getRootContext(), dataDir));","248","    return rootLogger;","249","  }","250","","251","  private void verifyNoAppender(Logger rootLogger) {","252","    Collection<Appender<ILoggingEvent>> allAppenders = getAllAppenders(rootLogger);","253","    assertThat(allAppenders).isEmpty();","254","  }","255","","256","  private void verifyAllAppenderStarted(Logger rootLogger, int expectedSize) {","257","    Collection<Appender<ILoggingEvent>> allAppenders = getAllAppenders(rootLogger);","258","    assertThat(allAppenders).hasSize(expectedSize);","259","    for (Appender<ILoggingEvent> appender : allAppenders) {","260","      assertThat(appender.isStarted()).isTrue();","261","    }","262","  }","263","","264","  private Appender verifySingleAppenderIsStopped(Logger rootLogger, int expectedSize) {","265","    Collection<Appender<ILoggingEvent>> allAppenders = getAllAppenders(rootLogger);","266","    assertThat(allAppenders).hasSize(expectedSize);","267","    Appender res = null;","268","    for (Appender<ILoggingEvent> appender : allAppenders) {","269","      if (!appender.isStarted()) {","270","        assertThat(res).describedAs(\"More than one appender found stopped\").isNull();","271","        res = appender;","272","      }","273","    }","274","    assertThat(res).describedAs(\"There should be one stopped appender\").isNotNull();","275","    return res;","276","  }","277","","278","  private Collection<Appender<ILoggingEvent>> getAllAppenders(Logger rootLogger) {","279","    Appender<ILoggingEvent> ceAppender = rootLogger.getAppender(\"ce\");","280","    assertThat(ceAppender).isInstanceOf(SiftingAppender.class);","281","    return ((SiftingAppender) ceAppender).getAppenderTracker().allComponents();","290","","291","  private static CeTask createCeTask(String type, String uuid) {","292","    return new CeTask.Builder().setType(type).setUuid(uuid).build();","293","  }"],"delete":["46","","52","    File dataDir = temp.newFolder();","75","  public void use_MDC_to_store_path_to_in_progress_task_logs() throws IOException {","76","    CeLogging underTest = new CeLogging(newSettings(temp.newFolder(), 5));","78","    CeTask task = new CeTask.Builder().setType(\"TYPE1\").setUuid(\"U1\").build();","80","    assertThat(MDC.get(CeLogging.MDC_LOG_PATH)).isNotEmpty().isEqualTo(LogFileRef.from(task).getRelativePath());","82","    assertThat(MDC.get(CeLogging.MDC_LOG_PATH)).isNull();","87","    File dir = temp.newFolder();","89","      File file = new File(dir, format(\"U%d.log\", i));","95","    assertThat(dir.listFiles()).hasSize(5);","98","    CeLogging underTest = new CeLogging(newSettings(dir, 3));","99","    underTest.purgeDir(dir);","101","    assertThat(dir.listFiles()).hasSize(3);","102","    assertThat(dir.listFiles()).extracting(\"name\")","108","    File dir = temp.newFolder();","109","    FileUtils.touch(new File(dir, \"U1.log\"));","111","    CeLogging underTest = new CeLogging(newSettings(dir, 5));","112","    underTest.purgeDir(dir);","114","    assertThat(dir.listFiles()).extracting(\"name\").containsOnly(\"U1.log\");","119","    File dir = temp.newFolder();","120","    FileUtils.touch(new File(dir, \"U1.log\"));","122","    CeLogging underTest = new CeLogging(newSettings(temp.newFolder(), 0));","123","    underTest.purgeDir(dir);","125","    assertThat(dir.listFiles()).isEmpty();","133","    Settings settings = newSettings(temp.newFolder(), -1);","135","    logging.purgeDir(temp.newFolder());","140","    File logsDir = temp.newFolder();","141","    SiftingAppender siftingAppender = CeLogging.createAppenderConfiguration(new LoggerContext(), logsDir);","148","    assertThat(siftingAppender.getDiscriminator().getKey()).isEqualTo(CeLogging.MDC_LOG_PATH);"]}]}},"8bbe57990ec82e2419925b13b90a1e0869d09512":{"changes":{"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v73\/DbVersion73.java":"MODIFY","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v73\/FixMissingQualityProfilesOnOrganizationsTest.java":"ADD","server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v73\/FixMissingQualityProfilesOnOrganizationsTest\/schema.sql":"ADD","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v73\/FixMissingQualityProfilesOnOrganizations.java":"ADD","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v73\/DbVersion73Test.java":"MODIFY"},"diff":{"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v73\/DbVersion73.java":[{"add":["38","      .add(2209, \"Fix missing quality profiles on organizations\", FixMissingQualityProfilesOnOrganizations.class)"],"delete":[]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v73\/FixMissingQualityProfilesOnOrganizationsTest.java":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v73\/FixMissingQualityProfilesOnOrganizationsTest\/schema.sql":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v73\/FixMissingQualityProfilesOnOrganizations.java":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v73\/DbVersion73Test.java":[{"add":["23","import static org.sonar.server.platform.db.migration.version.DbVersionTestUtils.verifyMigrationCount;","35","  @Test","36","  public void verify_migration_count() {","37","    verifyMigrationCount(underTest, 10);","38","  }"],"delete":[]}]}},"8cc12b67b83105eb44dd8beb296640971b6fe17d":{"changes":{"server\/sonar-process\/src\/main\/java\/org\/sonar\/process\/SecurityManagement.java":"MODIFY"},"diff":{"server\/sonar-process\/src\/main\/java\/org\/sonar\/process\/SecurityManagement.java":[{"add":["21","import java.security.CodeSource;","23","import java.security.PermissionCollection;","24","import java.security.Permissions;","73","    \/\/ workaround for SONAR-13559 \/ JDK-8014008","74","    \/\/ borrowed as-is from https:\/\/github.com\/elastic\/elasticsearch\/pull\/14274","75","    @Override","76","    public PermissionCollection getPermissions(CodeSource codesource) {","77","      \/\/ code should not rely on this method, or at least use it correctly:","78","      \/\/ https:\/\/bugs.openjdk.java.net\/browse\/JDK-8014008","79","      \/\/ return them a new empty permissions object so jvisualvm etc work","80","      for (StackTraceElement element : Thread.currentThread().getStackTrace()) {","81","        if (\"sun.rmi.server.LoaderHandler\".equals(element.getClassName()) &&","82","          \"loadClass\".equals(element.getMethodName())) {","83","          return new Permissions();","84","        }","85","      }","86","      \/\/ return UNSUPPORTED_EMPTY_COLLECTION since it is safe.","87","      return super.getPermissions(codesource);","88","    }","89",""],"delete":[]}]}},"fd01cdec71067de25ea572e0462ff710e8f8ef22":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/documentation\/pages.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/helpers\/__tests__\/markdown-test.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/documentation\/__tests__\/pages-test.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/helpers\/markdown.js":"MODIFY","server\/sonar-web\/src\/main\/js\/helpers\/__tests__\/__snapshots__\/markdown-test.ts.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/documentation\/pages.ts":[{"add":["54","    let content = '';","55","    let text = '';","56","    try {","57","      content = filterContent(parsed.content);","58","      text = getText(content);","59","    } catch (e) {","60","      \/* eslint-disable-next-line no-console *\/","61","      console.error(","62","        `Documentation - an error occured while parsing page \"${parsed.frontmatter.url ||","63","          file.path}\":`,","64","        e","65","      );","66","    }"],"delete":["54","    const content = filterContent(parsed.content);","55","    const text = getText(content);"]}],"server\/sonar-web\/src\/main\/js\/helpers\/__tests__\/markdown-test.ts":[{"add":["19","\/* eslint-disable no-console *\/","164","","165","it.only('should not break when conditional tags are misused', () => {","166","  const originalConsoleError = console.error;","167","  console.error = jest.fn();","168","","169","  const content = `Random <!-- \/sonarqube -->SC <!-- sonarqube -->text","170","  Break","171","  Bad <!-- \/sonarcloud -->SQ conditional <!-- sonarcloud -->formatting","172","  Break","173","  <!-- sonarqube -->SC<!-- \/sonarqube --><!-- sonarcloud -->SQ<!-- \/sonarcloud --> text","174","  Break","175","  Bad <!-- \/sonarcloud -->SQ conditional <!-- sonarcloud -->formatting","176","  Break","177","  <!-- static -->Static <!-- \/sonarcloud -->stuff`;","178","  expect(filterContent(content)).toMatchSnapshot();","179","  expect(console.error).toBeCalledTimes(2);","180","","181","  console.error = originalConsoleError;","182","});"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/documentation\/__tests__\/pages-test.ts":[{"add":["19","\/* eslint-disable no-console *\/","20","import { filterContent, ParsedContent } from '..\/..\/..\/helpers\/markdown';","35","jest.mock('..\/..\/..\/helpers\/markdown', () => {","36","  const markdown = jest.requireActual('..\/..\/..\/helpers\/markdown');","37","  return { ...markdown, filterContent: jest.fn().mockImplementation(markdown.filterContent) };","38","});","39","","107","it('should not break the whole doc when one page cannot be parsed', () => {","108","  const originalConsoleError = console.error;","109","  console.error = jest.fn();","110","","111","  (filterContent as jest.Mock).mockImplementationOnce(() => {","112","    throw Error('Parse page error');","113","  });","114","  const pages = getPages();","115","  expect(pages.length).toBe(2);","116","  expect(pages[0].content).toBe('');","117","  expect(console.error).toBeCalledTimes(1);","118","","119","  console.error = originalConsoleError;","120","});","121",""],"delete":["19","import { ParsedContent } from '..\/..\/..\/helpers\/markdown';"]}],"server\/sonar-web\/src\/main\/js\/helpers\/markdown.js":[{"add":["98","    if (start < end) {","99","      newContent = newContent.substring(0, start) + newContent.substring(end + ending.length);","100","    } else {","101","      \/\/ When conditional tags are incorrectly used we log an error, strip them out and pass to the next pair of tags","102","      \/\/ eslint-disable-next-line no-console","103","      console.error(","104","        new Error(","105","          `Documentation - incorrect usage of conditional formatting tags here: \"${newContent.substring(","106","            end,","107","            start + beginning.length","108","          )}\"`","109","        )","110","      );","111","      newContent =","112","        newContent.substring(0, end) +","113","        newContent.substring(end + ending.length, start) +","114","        newContent.substring(start + beginning.length);","115","    }"],"delete":["98","    newContent = newContent.substring(0, start) + newContent.substring(end + ending.length);"]}],"server\/sonar-web\/src\/main\/js\/helpers\/__tests__\/__snapshots__\/markdown-test.ts.snap":[{"add":["57","","58","exports[`should not break when conditional tags are misused 1`] = `","59","\"Random SC text","60","  Break","61","  Bad SQ conditional formatting","62","  Break","63","  SC text","64","  Break","65","  Bad SQ conditional formatting","66","  Break","67","  Static stuff\"","68","`;"],"delete":[]}]}},"875b06c33e2cad8a31a06b594aba482b102073af":{"changes":{"sonar-application\/src\/main\/assembly\/conf\/wrapper.conf":"MODIFY"},"diff":{"sonar-application\/src\/main\/assembly\/conf\/wrapper.conf":[{"add":["21","wrapper.java.initmemory=8","22","wrapper.java.maxmemory=8"],"delete":["21","wrapper.java.initmemory=3","22","wrapper.java.maxmemory=3"]}]}}}