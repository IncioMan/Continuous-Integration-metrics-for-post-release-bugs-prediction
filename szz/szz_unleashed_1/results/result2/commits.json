{"5c4b668ed14f307d22df715bcaf323cf27ee2c21":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/issue\/IssueView.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/Issue.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/components\/IssueActionsBar.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/components\/IssueTags.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/components\/IssueTransition.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/actions.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/components\/IssueCommentAction.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/issue\/IssueView.js":[{"add":["62","    updateIssue(this.props.onChange, this.props.onFail, editIssueComment({ comment, text }));","66","    updateIssue(this.props.onChange, this.props.onFail, deleteIssueComment({ comment }));"],"delete":["62","    updateIssue(this.props.onChange, editIssueComment({ comment, text }));","66","    updateIssue(this.props.onChange, deleteIssueComment({ comment }));"]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/Issue.js":[{"add":["140","      updateIssue(","141","        this.props.onChange,","142","        this.handleFail,","143","        setIssueAssignee({ issue: issue.key, assignee: login })","144","      );"],"delete":["140","      updateIssue(this.props.onChange, setIssueAssignee({ issue: issue.key, assignee: login }));"]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/components\/IssueActionsBar.js":[{"add":["68","        this.props.onFail,","120","                    onFail={this.props.onFail}","146","                    onFail={this.props.onFail}"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/components\/IssueTags.js":[{"add":["50","      this.props.onFail,"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/components\/IssueTransition.js":[{"add":["33","  onFail: Error => void,","43","      this.props.onFail,"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/actions.js":[{"add":["25","  onFail: Error => void,"],"delete":["20","import { onFail } from '..\/..\/store\/rootActions';","31",""]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/components\/IssueCommentAction.js":[{"add":["33","  onFail: Error => void,","41","    updateIssue(","42","      this.props.onChange,","43","      this.props.onFail,","44","      addIssueComment({ issue: this.props.issueKey, text })","45","    );"],"delete":["40","    updateIssue(this.props.onChange, addIssueComment({ issue: this.props.issueKey, text }));"]}]}},"88587752a1ca7c0b6b29bd02a49ebce08126b9a8":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/issue\/DefaultAssignee.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/issue\/DefaultAssigneeTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/issue\/DefaultAssignee.java":[{"add":["30","import static org.sonar.api.CoreProperties.DEFAULT_ISSUE_ASSIGNEE;","31","","56","      String configuredLogin = settingsRepository.getSettings(treeRootHolder.getRoot()).getString(DEFAULT_ISSUE_ASSIGNEE);","67","    if (user == null || !user.active()) {","68","      LOG.info(\"Property {} is set with an unknown login: {}\", DEFAULT_ISSUE_ASSIGNEE, s);"],"delete":["23","import org.sonar.api.CoreProperties;","55","      String configuredLogin = settingsRepository.getSettings(treeRootHolder.getRoot()).getString(CoreProperties.DEFAULT_ISSUE_ASSIGNEE);","66","    if (user == null) {","67","      LOG.info(\"Property {} is set with an unknown login: {}\", CoreProperties.DEFAULT_ISSUE_ASSIGNEE, s);"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/issue\/DefaultAssigneeTest.java":[{"add":["61","    when(userIndex.getNullableByLogin(\"erik\")).thenReturn(new UserDoc().setLogin(\"erik\").setActive(true));","73","","74","  @Test","75","  public void configured_login_is_disabled() {","76","    settings.setProperty(CoreProperties.DEFAULT_ISSUE_ASSIGNEE, \"erik\");","77","    when(userIndex.getNullableByLogin(\"erik\")).thenReturn(new UserDoc().setLogin(\"erik\").setActive(false));","78","","79","    assertThat(underTest.getLogin()).isNull();","80","  }"],"delete":["61","    when(userIndex.getNullableByLogin(\"erik\")).thenReturn(new UserDoc().setLogin(\"erik\"));"]}]}},"46a49f0b5ef205f5632b44dc07221eed79ec803d":{"changes":{"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/DbClient.java":"MODIFY","server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/purge\/SessionTokensCleanerExecutorServiceImpl.java":"ADD","server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/user\/ws\/DeactivateActionTest.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v00\/CreateInitialSchema.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/def\/VarcharColumnDef.java":"MODIFY","server\/sonar-db-core\/src\/main\/java\/org\/sonar\/db\/version\/SqTables.java":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/authentication\/ws\/LogoutAction.java":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/user\/ws\/DeactivateAction.java":"MODIFY","server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/user\/SessionTokenMapper.xml":"ADD","server\/sonar-db-dao\/src\/schema\/schema-sq.ddl":"MODIFY","server\/sonar-db-dao\/src\/testFixtures\/java\/org\/sonar\/db\/user\/UserDbTester.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/DaoModule.java":"MODIFY","server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/authentication\/ws\/LogoutActionTest.java":"MODIFY","server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/AuthenticationModule.java":"MODIFY","server\/sonar-webserver-auth\/src\/test\/java\/org\/sonar\/server\/authentication\/JwtHttpHandlerTest.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/DbVersion84.java":"MODIFY","server\/sonar-webserver-auth\/src\/test\/java\/org\/sonar\/server\/authentication\/JwtSerializerTest.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v83\/DbVersion83.java":"MODIFY","server\/sonar-webserver-auth\/src\/test\/java\/org\/sonar\/server\/authentication\/AuthenticationModuleTest.java":"MODIFY","server\/sonar-webserver-auth\/src\/test\/java\/org\/sonar\/server\/authentication\/purge\/SessionTokensCleanerTest.java":"ADD","server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/JwtHttpHandler.java":"MODIFY","server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/JwtSerializer.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/MyBatis.java":"MODIFY","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/CreateSessionTokensTableTest.java":"ADD","server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/purge\/SessionTokensCleanerExecutorService.java":"ADD","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/user\/SessionTokensDao.java":"ADD","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/user\/SessionTokensDaoTest.java":"ADD","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/user\/SessionTokenMapper.java":"ADD","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/CreateSessionTokensTable.java":"ADD","server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/purge\/SessionTokensCleaner.java":"ADD","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/user\/SessionTokenDto.java":"ADD"},"diff":{"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/DbClient.java":[{"add":["84","import org.sonar.db.user.SessionTokensDao;","165","  private final SessionTokensDao sessionTokensDao;","243","    sessionTokensDao = getDao(map, SessionTokensDao.class);","532","  public SessionTokensDao sessionTokensDao() {","533","    return sessionTokensDao;","534","  }","535",""],"delete":[]}],"server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/purge\/SessionTokensCleanerExecutorServiceImpl.java":[{"add":[],"delete":[]}],"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/user\/ws\/DeactivateActionTest.java":[{"add":["40","import org.sonar.db.user.SessionTokenDto;","263","  public void deactivate_user_deletes_his_session_tokens() {","264","    logInAsSystemAdministrator();","265","    UserDto user = db.users().insertUser();","266","    SessionTokenDto sessionToken1 = db.users().insertSessionToken(user);","267","    SessionTokenDto sessionToken2 =db.users().insertSessionToken(user);","268","    UserDto anotherUser = db.users().insertUser();","269","    SessionTokenDto sessionToken3 =db.users().insertSessionToken(anotherUser);","270","","271","    deactivate(user.getLogin());","272","","273","    assertThat(db.getDbClient().sessionTokensDao().selectByUuid(dbSession, sessionToken1.getUuid())).isNotPresent();","274","    assertThat(db.getDbClient().sessionTokensDao().selectByUuid(dbSession, sessionToken2.getUuid())).isNotPresent();","275","    assertThat(db.getDbClient().sessionTokensDao().selectByUuid(dbSession, sessionToken3.getUuid())).isPresent();","276","  }","277","","278","  @Test"],"delete":[]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v00\/CreateInitialSchema.java":[{"add":["46","import static org.sonar.server.platform.db.migration.def.VarcharColumnDef.USER_UUID_SIZE;","244","        .addColumn(newLenientVarcharBuilder(\"submitter_uuid\").setLimit(USER_UUID_SIZE).setIsNullable(true).build())","280","        .addColumn(newLenientVarcharBuilder(\"submitter_uuid\").setLimit(USER_UUID_SIZE).setIsNullable(true).build())","561","        .addColumn(newLenientVarcharBuilder(\"user_login\").setLimit(USER_UUID_SIZE).build())","573","    VarcharColumnDef assigneeCol = newLenientVarcharBuilder(\"assignee\").setLimit(USER_UUID_SIZE).build();","595","        .addColumn(newLenientVarcharBuilder(\"reporter\").setLimit(USER_UUID_SIZE).build())","654","        .addColumn(newLenientVarcharBuilder(USER_UUID_COL_NAME).setLimit(USER_UUID_SIZE).build())","740","      .addColumn(newVarcharColumnBuilder(USER_UUID_COL_NAME).setIsNullable(false).setLimit(USER_UUID_SIZE).build())","1052","      .addColumn(newLenientVarcharBuilder(USER_UUID_COL_NAME).setLimit(USER_UUID_SIZE).setIsNullable(true).build())","1167","      .addColumn(newVarcharColumnBuilder(\"note_user_uuid\").setLimit(USER_UUID_SIZE).setIsNullable(true).build())","1256","    VarcharColumnDef userUuidCol = newVarcharColumnBuilder(USER_UUID_COL_NAME).setLimit(USER_UUID_SIZE).setIsNullable(false).build();","1287","    VarcharColumnDef userUuidCol = newVarcharColumnBuilder(USER_UUID_COL_NAME).setLimit(USER_UUID_SIZE).setIsNullable(false).build();","1305","    VarcharColumnDef uuidCol = newVarcharColumnBuilder(\"uuid\").setLimit(USER_UUID_SIZE).setIsNullable(false).build();"],"delete":["243","        .addColumn(newLenientVarcharBuilder(\"submitter_uuid\").setLimit(255).setIsNullable(true).build())","279","        .addColumn(newLenientVarcharBuilder(\"submitter_uuid\").setLimit(255).setIsNullable(true).build())","560","        .addColumn(newLenientVarcharBuilder(\"user_login\").setLimit(255).build())","572","    VarcharColumnDef assigneeCol = newLenientVarcharBuilder(\"assignee\").setLimit(255).build();","594","        .addColumn(newLenientVarcharBuilder(\"reporter\").setLimit(255).build())","653","        .addColumn(newLenientVarcharBuilder(USER_UUID_COL_NAME).setLimit(255).build())","739","      .addColumn(newVarcharColumnBuilder(USER_UUID_COL_NAME).setIsNullable(false).setLimit(255).build())","1051","      .addColumn(newLenientVarcharBuilder(USER_UUID_COL_NAME).setLimit(255).setIsNullable(true).build())","1166","      .addColumn(newVarcharColumnBuilder(\"note_user_uuid\").setLimit(255).setIsNullable(true).build())","1255","    VarcharColumnDef userUuidCol = newVarcharColumnBuilder(USER_UUID_COL_NAME).setLimit(255).setIsNullable(false).build();","1286","    VarcharColumnDef userUuidCol = newVarcharColumnBuilder(USER_UUID_COL_NAME).setLimit(255).setIsNullable(false).build();","1304","    VarcharColumnDef uuidCol = newVarcharColumnBuilder(\"uuid\").setLimit(255).setIsNullable(false).build();"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/def\/VarcharColumnDef.java":[{"add":["45","  \/**","46","   * UUID length of the USERS table is not using the standard UUID length.","47","   * The reason of this is because when the UUID column was introduced in the USERS table, existing rows were fed with the login, which has a length of 255.","48","   * @see <a https:\/\/jira.sonarsource.com\/browse\/SONAR-10597>SONAR-10597<\/a>","49","   *\/","50","  public static final int USER_UUID_SIZE = 255;","51",""],"delete":[]}],"server\/sonar-db-core\/src\/main\/java\/org\/sonar\/db\/version\/SqTables.java":[{"add":["114","    \"session_tokens\","],"delete":[]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/authentication\/ws\/LogoutAction.java":[{"add":["89","      String userLogin = token.map(value -> value.getUserDto().getLogin()).orElse(null);"],"delete":["89","      String userLogin = token.isPresent() ? token.get().getUserDto().getLogin() : null;"]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/user\/ws\/DeactivateAction.java":[{"add":["110","      dbClient.sessionTokensDao().deleteByUser(dbSession, user);","111","      dbClient.userDao().deactivateUser(dbSession, user);"],"delete":["110","      deactivateUser(dbSession, user);","112","","113","      LOGGER.debug(\"Deactivate user: {}; by admin: {}\", login, userSession.isSystemAdministrator());","119","  private void deactivateUser(DbSession dbSession, UserDto user) {","120","    dbClient.userDao().deactivateUser(dbSession, user);","121","  }","122",""]}],"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/user\/SessionTokenMapper.xml":[{"add":[],"delete":[]}],"server\/sonar-db-dao\/src\/schema\/schema-sq.ddl":[{"add":["873","CREATE TABLE \"SESSION_TOKENS\"(","874","    \"UUID\" VARCHAR(40) NOT NULL,","875","    \"USER_UUID\" VARCHAR(255) NOT NULL,","876","    \"EXPIRATION_DATE\" BIGINT NOT NULL,","877","    \"CREATED_AT\" BIGINT NOT NULL,","878","    \"UPDATED_AT\" BIGINT NOT NULL","879",");","880","ALTER TABLE \"SESSION_TOKENS\" ADD CONSTRAINT \"PK_SESSION_TOKENS\" PRIMARY KEY(\"UUID\");","881","CREATE INDEX \"SESSION_TOKENS_USER_UUID\" ON \"SESSION_TOKENS\"(\"USER_UUID\");","882",""],"delete":[]}],"server\/sonar-db-dao\/src\/testFixtures\/java\/org\/sonar\/db\/user\/UserDbTester.java":[{"add":["43","import static org.apache.commons.lang.math.RandomUtils.nextLong;","381","  \/\/ USER TOKEN","382","","392","  \/\/ SESSION TOKENS","393","","394","  @SafeVarargs","395","  public final SessionTokenDto insertSessionToken(UserDto user, Consumer<SessionTokenDto>... populators) {","396","    SessionTokenDto dto = new SessionTokenDto()","397","      .setUserUuid(user.getUuid())","398","      .setExpirationDate(nextLong());","399","    stream(populators).forEach(p -> p.accept(dto));","400","    db.getDbClient().sessionTokensDao().insert(db.getSession(), dto);","401","    db.commit();","402","    return dto;","403","  }","404",""],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/DaoModule.java":[{"add":["86","import org.sonar.db.user.SessionTokensDao;","159","    SessionTokensDao.class,"],"delete":[]}],"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/authentication\/ws\/LogoutActionTest.java":[{"add":["42","import static org.mockito.Mockito.verifyNoInteractions;","93","    verifyNoInteractions(jwtHttpHandler, chain);","98","  public void logout_logged_user() {","104","    verifyNoInteractions(chain);","109","  public void logout_unlogged_user() {","115","    verifyNoInteractions(chain);","120","  public void generate_auth_event_on_failure() {","129","    verifyNoInteractions(chain);"],"delete":["42","import static org.mockito.Mockito.verifyZeroInteractions;","93","    verifyZeroInteractions(jwtHttpHandler, chain);","98","  public void logout_logged_user() throws Exception {","104","    verifyZeroInteractions(chain);","109","  public void logout_unlogged_user() throws Exception {","115","    verifyZeroInteractions(chain);","120","  public void generate_auth_event_on_failure() throws Exception {","129","    verifyZeroInteractions(chain);"]}],"server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/AuthenticationModule.java":[{"add":["23","import org.sonar.server.authentication.purge.SessionTokensCleaner;","24","import org.sonar.server.authentication.purge.SessionTokensCleanerExecutorServiceImpl;","33","      CredentialsAuthentication.class,","34","      CredentialsExternalAuthentication.class,","35","      CredentialsLocalAuthentication.class,","37","      IdentityProviderRepository.class,","38","      InitFilter.class,","39","      JwtCsrfVerifier.class,","40","      JwtHttpHandler.class,","41","      JwtSerializer.class,","42","      OAuth2AuthenticationParametersImpl.class,","43","      OAuth2CallbackFilter.class,","44","      OAuth2ContextFactory.class,","45","      OAuthCsrfVerifier.class,","47","      SessionTokensCleaner.class,","48","      SessionTokensCleanerExecutorServiceImpl.class,","49","      UserLastConnectionDatesUpdaterImpl.class,","50","      UserRegistrarImpl.class,","51","      UserSessionInitializer.class);"],"delete":["29","      InitFilter.class,","30","      OAuth2CallbackFilter.class,","31","      IdentityProviderRepository.class,","33","      OAuth2ContextFactory.class,","34","      UserRegistrarImpl.class,","35","      OAuthCsrfVerifier.class,","36","      UserSessionInitializer.class,","37","      JwtSerializer.class,","38","      JwtHttpHandler.class,","39","      JwtCsrfVerifier.class,","40","      OAuth2AuthenticationParametersImpl.class,","41","      CredentialsAuthentication.class,","42","      CredentialsLocalAuthentication.class,","43","      CredentialsExternalAuthentication.class,","47","      UserLastConnectionDatesUpdaterImpl.class);"]}],"server\/sonar-webserver-auth\/src\/test\/java\/org\/sonar\/server\/authentication\/JwtHttpHandlerTest.java":[{"add":["24","import java.util.Map;","41","import org.sonar.db.user.SessionTokenDto;","45","import static org.assertj.core.api.Assertions.entry;","48","import static org.mockito.ArgumentMatchers.anyLong;","55","import static org.mockito.Mockito.verifyNoInteractions;","69","  private static final long IN_FIVE_MINUTES = NOW + 5 * 60 * 1000L;","70","","109","    verifySessionTokenInDb(jwtArgumentCaptor.getValue());","150","    verifyToken(jwtArgumentCaptor.getAllValues().get(0), user, firstSessionTimeoutInMinutes * 60, NOW);","188","    SessionTokenDto sessionToken = db.users().insertSessionToken(user, st -> st.setExpirationDate(IN_FIVE_MINUTES));","189","    Claims claims = createToken(sessionToken, NOW);","202","    SessionTokenDto sessionToken = db.users().insertSessionToken(user, st -> st.setExpirationDate(IN_FIVE_MINUTES));","203","    Claims claims = createToken(sessionToken, TEN_DAYS_AGO);","209","    verify(jwtSerializer).refresh(any(Claims.class), eq(NOW + 3 * 24 * 60 * 60 * 1000L));","210","    assertThat(dbClient.sessionTokensDao().selectByUuid(dbSession, sessionToken.getUuid()).get().getExpirationDate())","211","      .isNotEqualTo(IN_FIVE_MINUTES)","212","      .isEqualTo(NOW + 3 * 24 * 60 * 60 * 1000L);","220","    SessionTokenDto sessionToken = db.users().insertSessionToken(user, st -> st.setExpirationDate(IN_FIVE_MINUTES));","221","    Claims claims = createToken(sessionToken, TEN_DAYS_AGO);","235","    SessionTokenDto sessionToken = db.users().insertSessionToken(user, st -> st.setExpirationDate(IN_FIVE_MINUTES));","236","    Claims claims = createToken(sessionToken, NOW - (4L * 30 * 24 * 60 * 60 * 1000));","247","    SessionTokenDto sessionToken = db.users().insertSessionToken(user, st -> st.setExpirationDate(IN_FIVE_MINUTES));","248","    Claims claims = createToken(sessionToken, NOW);","267","    verifyNoInteractions(httpSession, jwtSerializer);","277","    verifyNoInteractions(httpSession, jwtSerializer);","285","    SessionTokenDto sessionToken = db.users().insertSessionToken(user, st -> st.setExpirationDate(IN_FIVE_MINUTES));","286","    Claims claims = createToken(sessionToken, NOW);","296","  public void validate_token_does_nothing_when_no_session_token_in_db() {","297","    UserDto user = db.users().insertUser();","298","    addJwtCookie();","299","    \/\/ No SessionToken in DB","300","    Claims claims = createToken(\"ABCD\", user.getUuid(), NOW, IN_FIVE_MINUTES);","301","    claims.put(\"lastRefreshTime\", SIX_MINUTES_AGO);","302","    when(jwtSerializer.decode(JWT_TOKEN)).thenReturn(Optional.of(claims));","303","","304","    underTest.validateToken(request, response);","305","","306","    assertThat(underTest.validateToken(request, response).isPresent()).isFalse();","307","  }","308","","309","  @Test","310","  public void validate_token_does_nothing_when_expiration_date_from_session_token_is_expired() {","311","    UserDto user = db.users().insertUser();","312","    addJwtCookie();","313","    \/\/ In SessionToken, the expiration date is expired...","314","    SessionTokenDto sessionToken = db.users().insertSessionToken(user, st -> st.setExpirationDate(FOUR_MINUTES_AGO));","315","    \/\/ ...whereas in the cookie, the expiration date is not expired","316","    Claims claims = createToken(sessionToken.getUuid(), user.getUuid(), NOW, IN_FIVE_MINUTES);","317","    claims.put(\"lastRefreshTime\", SIX_MINUTES_AGO);","318","    when(jwtSerializer.decode(JWT_TOKEN)).thenReturn(Optional.of(claims));","319","","320","    underTest.validateToken(request, response);","321","","322","    assertThat(underTest.validateToken(request, response).isPresent()).isFalse();","323","  }","324","","325","  @Test","330","    SessionTokenDto sessionToken = db.users().insertSessionToken(user, st -> st.setExpirationDate(IN_FIVE_MINUTES));","331","    Claims claims = createToken(sessionToken, TEN_DAYS_AGO);","337","    verify(jwtSerializer).refresh(any(Claims.class), anyLong());","343","    addJwtCookie();","344","    UserDto user = db.users().insertUser();","345","    SessionTokenDto sessionToken = db.users().insertSessionToken(user, st -> st.setExpirationDate(IN_FIVE_MINUTES));","346","    Claims claims = createToken(sessionToken, TEN_DAYS_AGO);","347","    claims.put(\"lastRefreshTime\", FOUR_MINUTES_AGO);","348","    when(jwtSerializer.decode(JWT_TOKEN)).thenReturn(Optional.of(claims));","349","","354","    assertThat(dbClient.sessionTokensDao().selectByUuid(dbSession, sessionToken.getUuid())).isNotPresent();","357","  @Test","358","  public void does_not_remove_token_from_db_when_no_jwt_token_in_cookie() {","359","    addJwtCookie();","360","    UserDto user = db.users().insertUser();","361","    SessionTokenDto sessionToken = db.users().insertSessionToken(user, st -> st.setExpirationDate(IN_FIVE_MINUTES));","362","    when(jwtSerializer.decode(JWT_TOKEN)).thenReturn(Optional.empty());","363","","364","    underTest.removeToken(request, response);","365","","366","    verifyCookie(findCookie(\"JWT-SESSION\").get(), null, 0);","367","    verify(jwtCsrfVerifier).removeState(request, response);","368","    assertThat(dbClient.sessionTokensDao().selectByUuid(dbSession, sessionToken.getUuid())).isPresent();","369","  }","370","","371","  @Test","372","  public void does_not_remove_token_from_db_when_no_cookie() {","373","    UserDto user = db.users().insertUser();","374","    SessionTokenDto sessionToken = db.users().insertSessionToken(user, st -> st.setExpirationDate(IN_FIVE_MINUTES));","375","","376","    underTest.removeToken(request, response);","377","","378","    verifyCookie(findCookie(\"JWT-SESSION\").get(), null, 0);","379","    verify(jwtCsrfVerifier).removeState(request, response);","380","    assertThat(dbClient.sessionTokensDao().selectByUuid(dbSession, sessionToken.getUuid())).isPresent();","381","  }","382","","383","  private void verifyToken(JwtSerializer.JwtSession token, UserDto user, long expectedExpirationDuration, long expectedRefreshTime) {","384","    assertThat(token.getExpirationTime()).isEqualTo(NOW + expectedExpirationDuration * 1000L);","404","  private void verifySessionTokenInDb(JwtSerializer.JwtSession jwtSession) {","405","    Map<String, Object> map = db.selectFirst(dbSession, \"select st.uuid as \\\"uuid\\\", \" +","406","      \"st.user_uuid as \\\"userUuid\\\", \" +","407","      \"st.expiration_date as \\\"expirationDate\\\" \" +","408","      \"from session_tokens st \");","409","    assertThat(map)","410","      .contains(","411","        entry(\"uuid\", jwtSession.getSessionTokenUuid()),","412","        entry(\"expirationDate\", jwtSession.getExpirationTime()));","413","  }","414","","429","  private Claims createToken(SessionTokenDto sessionToken, long createdAt) {","430","    return createToken(sessionToken.getUuid(), sessionToken.getUserUuid(), createdAt, sessionToken.getExpirationDate());","433","  private Claims createToken(String uuid, String userUuid, long createdAt, long expiredAt) {","435","    claims.setId(uuid);"],"delete":["51","import static org.mockito.Mockito.verifyZeroInteractions;","67","","144","    verifyToken(jwtArgumentCaptor.getAllValues().get(0), user,firstSessionTimeoutInMinutes * 60, NOW);","182","    Claims claims = createToken(user.getUuid(), NOW);","195","    Claims claims = createToken(user.getUuid(), TEN_DAYS_AGO);","201","    verify(jwtSerializer).refresh(any(Claims.class), eq(3 * 24 * 60 * 60));","209","    Claims claims = createToken(user.getUuid(), TEN_DAYS_AGO);","223","    Claims claims = createToken(user.getUuid(), NOW - (4L * 30 * 24 * 60 * 60 * 1000));","224","    claims.setExpiration(new Date(NOW + 5 * 60 * 1000));","235","","236","    Claims claims = createToken(user.getLogin(), NOW);","255","    verifyZeroInteractions(httpSession, jwtSerializer);","265","    verifyZeroInteractions(httpSession, jwtSerializer);","273","    Claims claims = createToken(user.getUuid(), NOW);","286","","288","    Claims claims = createToken(user.getUuid(), TEN_DAYS_AGO);","294","    verify(jwtSerializer).refresh(any(Claims.class), anyInt());","306","  private void verifyToken(JwtSerializer.JwtSession token, UserDto user, int expectedExpirationTime, long expectedRefreshTime) {","307","    assertThat(token.getExpirationTimeInSeconds()).isEqualTo(expectedExpirationTime);","341","  private Claims createToken(String userUuid, long createdAt) {","342","    \/\/ Expired in 5 minutes by default","343","    return createToken(userUuid, createdAt, NOW + 5 * 60 * 1000);","346","  private Claims createToken(String userUuid, long createdAt, long expiredAt) {","348","    claims.setId(\"ID\");"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/DbVersion84.java":[{"add":["782","      .add(3800, \"Remove favourites for components with qualifiers 'DIR', 'FIL', 'UTS'\", RemoveFilesFavouritesFromProperties.class)","783","      .add(3801, \"Create 'SESSION_TOKENS' table\", CreateSessionTokensTable.class)"],"delete":["782","      .add(3800, \"Remove favourites for components with qualifiers 'DIR', 'FIL', 'UTS'\", RemoveFilesFavouritesFromProperties.class);","783",""]}],"server\/sonar-webserver-auth\/src\/test\/java\/org\/sonar\/server\/authentication\/JwtSerializerTest.java":[{"add":["39","import static io.jsonwebtoken.SignatureAlgorithm.HS256;","40","import static org.apache.commons.lang.time.DateUtils.addMinutes;","41","import static org.apache.commons.lang.time.DateUtils.addYears;","49","  private static final String SESSION_TOKEN_UUID = \"ABCD\";","56","  private JwtSerializer underTest = new JwtSerializer(settings.asConfig(), system2);","63","    String token = underTest.encode(new JwtSession(USER_LOGIN, SESSION_TOKEN_UUID, addMinutes(new Date(), 20).getTime()));","74","    String token = underTest.encode(new JwtSession(USER_LOGIN, SESSION_TOKEN_UUID, addMinutes(new Date(), 20).getTime()));","78","    assertThat(claims.getExpiration().getTime())","79","      .isGreaterThanOrEqualTo(addMinutes(new Date(), 19).getTime());","87","    long oneYearLater = addYears(new Date(), 1).getTime();","88","    String token = underTest.encode(new JwtSession(USER_LOGIN, SESSION_TOKEN_UUID, oneYearLater));","93","    assertThat(claims.getExpiration().getTime()).isGreaterThanOrEqualTo(oneYearLater - 1000L);","101","    String token = underTest.encode(new JwtSession(USER_LOGIN, SESSION_TOKEN_UUID, addMinutes(new Date(), 20).getTime(), ImmutableMap.of(\"custom\", \"property\")));","113","    String token = underTest.encode(new JwtSession(USER_LOGIN, SESSION_TOKEN_UUID, addMinutes(new Date(), 20).getTime()));","116","    assertThat(claims.getId()).isEqualTo(SESSION_TOKEN_UUID);","121","    assertThat(claims.getExpiration()).isAfterOrEqualTo(addMinutes(new Date(), 19));","132","      .setExpiration(addMinutes(new Date(), -20))","133","      .signWith(decodeSecretKey(A_SECRET_KEY), HS256)","148","      .setExpiration(addMinutes(new Date(), 20))","149","      .signWith(decodeSecretKey(\"LyWgHktP0FuHB2K+kMs3KWMCJyFHVZDdDSqpIxAMVaQ=\"), HS256)","164","      .setExpiration(addMinutes(new Date(), 20))","165","      .signWith(decodeSecretKey(A_SECRET_KEY), HS256)","182","      .setExpiration(addMinutes(new Date(), 20))","183","      .signWith(HS256, decodeSecretKey(A_SECRET_KEY))","201","      .signWith(decodeSecretKey(A_SECRET_KEY), HS256)","217","      .setExpiration(addMinutes(new Date(), 20))","218","      .signWith(decodeSecretKey(A_SECRET_KEY), HS256)","233","    assertThat(underTest.getSecretKey().getAlgorithm()).isEqualTo(HS256.getJcaName());","253","    Date expiredAt = addMinutes(new Date(), 10);","263","    String encodedToken = underTest.refresh(token, addMinutes(new Date(), 20).getTime());","273","      .isAfterOrEqualTo(addMinutes(new Date(), 19));","280","    String token = underTest.encode(new JwtSession(USER_LOGIN, SESSION_TOKEN_UUID, addMinutes(new Date(), 20).getTime()));","283","    String newToken = underTest.refresh(claims.get(), addMinutes(new Date(), 45).getTime());","293","    underTest.encode(new JwtSession(USER_LOGIN, SESSION_TOKEN_UUID, addMinutes(new Date(), 10).getTime()));","309","    underTest.refresh(new DefaultClaims(), addMinutes(new Date(), 10).getTime());","314","    return new SecretKeySpec(decodedKey, 0, decodedKey.length, HS256.getJcaName());"],"delete":["24","import io.jsonwebtoken.SignatureAlgorithm;","37","import org.sonar.core.util.UuidFactory;","38","import org.sonar.core.util.UuidFactoryImpl;","55","  private UuidFactory uuidFactory = UuidFactoryImpl.INSTANCE;","56","  private JwtSerializer underTest = new JwtSerializer(settings.asConfig(), system2, uuidFactory);","63","    String token = underTest.encode(new JwtSession(USER_LOGIN, 10));","73","    Date now = new Date();","75","    long expirationTimeInSeconds = 10L;","76","    String token = underTest.encode(new JwtSession(USER_LOGIN, expirationTimeInSeconds));","80","    assertThat(claims.getExpiration().getTime()).isGreaterThanOrEqualTo(now.getTime() + expirationTimeInSeconds * 1000L - 1000L);","87","    Date now = new Date();","89","    long oneYearInSeconds = 12 * 30 * 24 * 60 * 60L;","90","    String token = underTest.encode(new JwtSession(USER_LOGIN, oneYearInSeconds));","95","    assertThat(claims.getExpiration().getTime()).isGreaterThanOrEqualTo(now.getTime() + oneYearInSeconds * 1000L - 1000L);","103","    String token = underTest.encode(new JwtSession(USER_LOGIN, 10, ImmutableMap.of(\"custom\", \"property\")));","114","    Date now = new Date();","116","    String token = underTest.encode(new JwtSession(USER_LOGIN, 20 * 60));","119","    assertThat(claims.getId()).isNotEmpty();","124","    assertThat(claims.getExpiration()).isAfterOrEqualsTo(new Date(now.getTime() + 19 * 60 * 1000));","135","      .setExpiration(new Date(system2.now()))","136","      .signWith(SignatureAlgorithm.HS256, decodeSecretKey(A_SECRET_KEY))","151","      .setExpiration(new Date(system2.now() + 20 * 60 * 1000))","152","      .signWith(SignatureAlgorithm.HS256, decodeSecretKey(\"LyWgHktP0FuHB2K+kMs3KWMCJyFHVZDdDSqpIxAMVaQ=\"))","167","      .setExpiration(new Date(system2.now() + 20 * 60 * 1000))","168","      .signWith(SignatureAlgorithm.HS256, decodeSecretKey(A_SECRET_KEY))","185","      .setExpiration(new Date(system2.now() + 20 * 60 * 1000))","186","      .signWith(SignatureAlgorithm.HS256, decodeSecretKey(A_SECRET_KEY))","204","      .signWith(SignatureAlgorithm.HS256, decodeSecretKey(A_SECRET_KEY))","220","      .setExpiration(new Date(system2.now() + 20 * 60 * 1000))","221","      .signWith(SignatureAlgorithm.HS256, decodeSecretKey(A_SECRET_KEY))","236","    assertThat(underTest.getSecretKey().getAlgorithm()).isEqualTo(SignatureAlgorithm.HS256.getJcaName());","256","    Date expiredAt = new Date(now.getTime() + 10 * 60 * 1000);","266","    String encodedToken = underTest.refresh(token, 20 * 60);","276","      .isAfterOrEqualsTo(new Date(now.getTime() + 19 * 1000));","283","    String token = underTest.encode(new JwtSession(USER_LOGIN, 30));","286","    String newToken = underTest.refresh(claims.get(), 45);","296","    underTest.encode(new JwtSession(USER_LOGIN, 10));","312","    underTest.refresh(new DefaultClaims(), 10);","317","    return new SecretKeySpec(decodedKey, 0, decodedKey.length, SignatureAlgorithm.HS256.getJcaName());"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v83\/DbVersion83.java":[{"add":[],"delete":["49",""]}],"server\/sonar-webserver-auth\/src\/test\/java\/org\/sonar\/server\/authentication\/AuthenticationModuleTest.java":[{"add":["33","    assertThat(container.size()).isGreaterThan(COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER);"],"delete":["33","    assertThat(container.size()).isEqualTo(COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER + 20);"]}],"server\/sonar-webserver-auth\/src\/test\/java\/org\/sonar\/server\/authentication\/purge\/SessionTokensCleanerTest.java":[{"add":[],"delete":[]}],"server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/JwtHttpHandler.java":[{"add":["36","import org.sonar.db.user.SessionTokenDto;","82","    long expirationTime = system2.now() + sessionTimeoutInSeconds * 1000L;","83","    SessionTokenDto sessionToken = createSessionToken(user, expirationTime);","87","      sessionToken.getUuid(),","88","      expirationTime,","97","  private SessionTokenDto createSessionToken(UserDto user, long expirationTime) {","98","    try (DbSession dbSession = dbClient.openSession(false)) {","99","      SessionTokenDto sessionToken = new SessionTokenDto()","100","        .setUserUuid(user.getUuid())","101","        .setExpirationDate(expirationTime);","102","      dbClient.sessionTokensDao().insert(dbSession, sessionToken);","103","      dbSession.commit();","104","      return sessionToken;","105","    }","106","  }","107","","114","    return token.map(Token::getUserDto);","122","    try (DbSession dbSession = dbClient.openSession(false)) {","123","      return validateToken(dbSession, encodedToken.get(), request, response);","124","    }","140","  private Optional<Token> validateToken(DbSession dbSession, String tokenEncoded, HttpServletRequest request, HttpServletResponse response) {","146","","147","    Optional<SessionTokenDto> sessionToken = dbClient.sessionTokensDao().selectByUuid(dbSession, token.getId());","148","    if (!sessionToken.isPresent()) {","149","      return Optional.empty();","150","    }","151","    \/\/ Check on expiration is already done when decoding the JWT token, but here is done a double check with the expiration date from DB.","152","    Date now = new Date(system2.now());","153","    if (now.getTime() > sessionToken.get().getExpirationDate()) {","154","      return Optional.empty();","155","    }","162","      refreshToken(dbSession, sessionToken.get(), token, request, response);","165","    Optional<UserDto> user = selectUserFromUuid(dbSession, token.getSubject());","175","  private void refreshToken(DbSession dbSession, SessionTokenDto tokenFromDb, Claims tokenFromCookie, HttpServletRequest request, HttpServletResponse response) {","176","    long expirationTime = system2.now() + sessionTimeoutInSeconds * 1000L;","177","    String refreshToken = jwtSerializer.refresh(tokenFromCookie, expirationTime);","179","    jwtCsrfVerifier.refreshState(request, response, (String) tokenFromCookie.get(CSRF_JWT_PARAM), sessionTimeoutInSeconds);","180","","181","    dbClient.sessionTokensDao().update(dbSession, tokenFromDb.setExpirationDate(expirationTime));","182","    dbSession.commit();","186","    removeSessionToken(request);","191","  private void removeSessionToken(HttpServletRequest request) {","192","    Optional<Cookie> jwtCookie = findCookie(JWT_COOKIE, request);","193","    if (!jwtCookie.isPresent()) {","194","      return;","195","    }","196","    Optional<Claims> claims = jwtSerializer.decode(jwtCookie.get().getValue());","197","    if (!claims.isPresent()) {","198","      return;","199","    }","200","    try (DbSession dbSession = dbClient.openSession(false)) {","201","      dbClient.sessionTokensDao().deleteByUuid(dbSession, claims.get().getId());","202","      dbSession.commit();","203","    }","204","  }","205","","210","  private Optional<UserDto> selectUserFromUuid(DbSession dbSession, String userUuid) {","211","    UserDto user = dbClient.userDao().selectByUuid(dbSession, userUuid);","212","    return Optional.ofNullable(user != null && user.isActive() ? user : null);"],"delete":["84","      sessionTimeoutInSeconds,","99","    if (token.isPresent()) {","100","      return Optional.of(token.get().getUserDto());","101","    }","102","    return Optional.empty();","110","    return validateToken(encodedToken.get(), request, response);","126","  private Optional<Token> validateToken(String tokenEncoded, HttpServletRequest request, HttpServletResponse response) {","131","","132","    Date now = new Date(system2.now());","140","      refreshToken(token, request, response);","143","    Optional<UserDto> user = selectUserFromUuid(token.getSubject());","153","  private void refreshToken(Claims token, HttpServletRequest request, HttpServletResponse response) {","154","    String refreshToken = jwtSerializer.refresh(token, sessionTimeoutInSeconds);","156","    jwtCsrfVerifier.refreshState(request, response, (String) token.get(CSRF_JWT_PARAM), sessionTimeoutInSeconds);","168","  private Optional<UserDto> selectUserFromUuid(String userUuid) {","169","    try (DbSession dbSession = dbClient.openSession(false)) {","170","      UserDto user = dbClient.userDao().selectByUuid(dbSession, userUuid);","171","      return Optional.ofNullable(user != null && user.isActive() ? user : null);","172","    }"]}],"server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/JwtSerializer.java":[{"add":["27","import io.jsonwebtoken.security.SignatureException;","61","  public JwtSerializer(Configuration config, System2 system2) {","74","    this.secretKey = encodedKey","75","      .map(JwtSerializer::decodeSecretKeyProperty)","76","      .orElseGet(JwtSerializer::generateSecretKey);","82","      .setId(jwtSession.getSessionTokenUuid())","84","      .setIssuedAt(new Date(system2.now()))","85","      .setExpiration(new Date(jwtSession.getExpirationTime()))","86","      .signWith(secretKey, SIGNATURE_ALGORITHM);","97","      claims = (Claims) Jwts.parserBuilder()","99","        .build()","100","        .parse(token)","118","  String refresh(Claims token, long expirationTime) {","124","    jwtBuilder.setExpiration(new Date(expirationTime))","125","      .signWith(secretKey, SIGNATURE_ALGORITHM);","151","    private final String sessionTokenUuid;","152","    private final long expirationTime;","155","    JwtSession(String userLogin, String sessionTokenUuid, long expirationTime) {","156","      this(userLogin, sessionTokenUuid, expirationTime, Collections.emptyMap());","159","    JwtSession(String userLogin, String sessionTokenUuid, long expirationTime, Map<String, Object> properties) {","161","      this.sessionTokenUuid = requireNonNull(sessionTokenUuid, \"Session token UUID cannot be null\");","162","      this.expirationTime = expirationTime;","170","    String getSessionTokenUuid() {","171","      return sessionTokenUuid;","172","    }","173","","174","    long getExpirationTime() {","175","      return expirationTime;"],"delete":["27","import io.jsonwebtoken.SignatureException;","40","import org.sonar.core.util.UuidFactory;","59","  private final UuidFactory uuidFactory;","63","  public JwtSerializer(Configuration config, System2 system2, UuidFactory uuidFactory) {","66","    this.uuidFactory = uuidFactory;","77","    if (encodedKey.isPresent()) {","78","      this.secretKey = decodeSecretKeyProperty(encodedKey.get());","79","    } else {","80","      this.secretKey = generateSecretKey();","81","    }","86","    long now = system2.now();","88","      .setId(uuidFactory.create())","90","      .setIssuedAt(new Date(now))","91","      .setExpiration(new Date(now + jwtSession.getExpirationTimeInSeconds() * 1000))","92","      .signWith(SIGNATURE_ALGORITHM, secretKey);","103","      claims = Jwts.parser()","105","        .parseClaimsJws(token)","123","  String refresh(Claims token, int expirationTimeInSeconds) {","125","    long now = system2.now();","130","    jwtBuilder.setExpiration(new Date(now + expirationTimeInSeconds * 1_000L))","131","      .signWith(SIGNATURE_ALGORITHM, secretKey);","157","    private final long expirationTimeInSeconds;","160","    JwtSession(String userLogin, long expirationTimeInSeconds) {","161","      this(userLogin, expirationTimeInSeconds, Collections.emptyMap());","164","    JwtSession(String userLogin, long expirationTimeInSeconds, Map<String, Object> properties) {","166","      this.expirationTimeInSeconds = expirationTimeInSeconds;","174","    long getExpirationTimeInSeconds() {","175","      return expirationTimeInSeconds;"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/MyBatis.java":[{"add":["142","import org.sonar.db.user.SessionTokenMapper;","289","      SessionTokenMapper.class,"],"delete":[]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/CreateSessionTokensTableTest.java":[{"add":[],"delete":[]}],"server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/purge\/SessionTokensCleanerExecutorService.java":[{"add":[],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/user\/SessionTokensDao.java":[{"add":[],"delete":[]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/user\/SessionTokensDaoTest.java":[{"add":[],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/user\/SessionTokenMapper.java":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/CreateSessionTokensTable.java":[{"add":[],"delete":[]}],"server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/purge\/SessionTokensCleaner.java":[{"add":[],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/user\/SessionTokenDto.java":[{"add":[],"delete":[]}]}},"5397922aac9a0567d1cf0e3f5fc7958d00e7d9ef":{"changes":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/measures\/CoreMetrics.java":"MODIFY"},"diff":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["2070","metric.new_duplicated_lines_density.description=Duplicated lines (%) on new code balanced by statements","2071","metric.new_duplicated_lines_density.name=Duplicated Lines (%) on New Code"],"delete":["2070","metric.new_duplicated_lines_density.description=Duplicated lines on new code balanced by statements","2071","metric.new_duplicated_lines_density.name=Duplicated Lines on New Code"]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/measures\/CoreMetrics.java":[{"add":["758","  public static final Metric<Integer> NEW_DUPLICATED_LINES_DENSITY = new Metric.Builder(NEW_DUPLICATED_LINES_DENSITY_KEY, \"Duplicated Lines (%) on New Code\",","760","      .setDescription(\"Duplicated lines (%) on new code balanced by statements\")"],"delete":["758","  public static final Metric<Integer> NEW_DUPLICATED_LINES_DENSITY = new Metric.Builder(NEW_DUPLICATED_LINES_DENSITY_KEY, \"Duplicated Lines on New Code\",","760","      .setDescription(\"Duplicated lines on new code balanced by statements\")"]}]}},"061a1d612fc76841e3268aaa7053b07075e78dcd":{"changes":{"server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/notification\/email\/EmailNotificationChannel.java":"MODIFY"},"diff":{"server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/notification\/email\/EmailNotificationChannel.java":[{"add":["201","      email.setSSLCheckServerIdentity(true);","210","      email.setSSLCheckServerIdentity(true);"],"delete":[]}]}},"cb0937144b627e3167a363270db86b5950e1c2fc":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/plugins\/ws\/InstalledActionTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/plugins\/ws\/InstalledAction.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/server\/ws\/WebService.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/plugins\/ws\/InstalledActionTest.java":[{"add":["29","import org.sonar.api.server.ws.WebService.Param;","39","import static java.util.Collections.singletonList;","43","import static org.mockito.Mockito.verifyZeroInteractions;","101","      of(new PluginInfo(\"\").setName(\"\")));","125","","126","    underTest.handle(request, response);","127","","128","    verifyZeroInteractions(updateCenterMatrixFactory);","129","    assertJson(response.outputAsString()).isSimilarTo(","130","      \"{\" +","131","        \"  \\\"plugins\\\":\" +","132","        \"  [\" +","133","        \"    {\" +","134","        \"      \\\"key\\\": \\\"plugKey\\\",\" +","135","        \"      \\\"name\\\": \\\"plugName\\\",\" +","136","        \"      \\\"description\\\": \\\"desc_it\\\",\" +","137","        \"      \\\"version\\\": \\\"1.0\\\",\" +","138","        \"      \\\"license\\\": \\\"license_hey\\\",\" +","139","        \"      \\\"organizationName\\\": \\\"org_name\\\",\" +","140","        \"      \\\"organizationUrl\\\": \\\"org_url\\\",\" +","141","        \"      \\\"homepageUrl\\\": \\\"homepage_url\\\",\" +","142","        \"      \\\"issueTrackerUrl\\\": \\\"issueTracker_url\\\",\" +","143","        \"      \\\"implementationBuild\\\": \\\"sou_rev_sha1\\\"\" +","144","        \"    }\" +","145","        \"  ]\" +","146","        \"}\"","147","      );","148","  }","149","","150","  @Test","151","  public void category_is_returned_when_in_additional_fields() throws Exception {","152","    String jarFilename = getClass().getSimpleName() + \"\/\" + \"some.jar\";","153","    when(pluginRepository.getPluginInfos()).thenReturn(of(","154","      new PluginInfo(\"plugKey\")","155","        .setName(\"plugName\")","156","        .setDescription(\"desc_it\")","157","        .setVersion(Version.create(\"1.0\"))","158","        .setLicense(\"license_hey\")","159","        .setOrganizationName(\"org_name\")","160","        .setOrganizationUrl(\"org_url\")","161","        .setHomepageUrl(\"homepage_url\")","162","        .setIssueTrackerUrl(\"issueTracker_url\")","163","        .setImplementationBuild(\"sou_rev_sha1\")","164","        .setJarFile(new File(getClass().getResource(jarFilename).toURI()))","165","      )","166","    );","173","      )","174","    );","175","    when(request.paramAsStrings(Param.FIELDS)).thenReturn(singletonList(\"category\"));","198","    );"],"delete":["98","      of(","99","      new PluginInfo(\"\").setName(\"\")","100","      )","101","      );","131","        )","132","      );","155","      );"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/plugins\/ws\/InstalledAction.java":[{"add":["23","import java.util.Collections;","24","import java.util.List;","25","import java.util.Map;","37","import static java.lang.String.format;","38","import static java.util.Collections.singleton;","47","  private static final String FIELD_CATEGORY = \"category\";","61","    WebService.NewAction action = controller.createAction(\"installed\")","66","","67","    action.createFieldsParam(singleton(\"category\"))","68","      .setDescription(format(\"Comma-separated list of the additional fields to be returned in response. No additional field is returned by default. Possible values are:\" +","69","        \"<ul>\" +","70","        \"<li>%s - category as defined in the Update Center. A connection to the Update Center is needed<\/li>\" +","71","        \"<\/lu>\", FIELD_CATEGORY))","72","      .setSince(\"5.6\");","83","    List<String> additionalFields = request.paramAsStrings(WebService.Param.FIELDS);","84","    writePluginInfoList(jsonWriter, pluginInfoList, additionalFields == null ? Collections.<String>emptyList() : additionalFields);","94","  private void writePluginInfoList(JsonWriter jsonWriter, Collection<PluginInfo> pluginInfoList, List<String> additionalFields) {","95","    Map<String, Plugin> compatiblesPluginsFromUpdateCenter = additionalFields.isEmpty()","96","      ? Collections.<String, Plugin>emptyMap()","97","      : compatiblePluginsByKey(updateCenterMatrixFactory);","98","    pluginWSCommons.writePluginInfoList(jsonWriter, pluginInfoList, compatiblesPluginsFromUpdateCenter, ARRAY_PLUGINS);"],"delete":["21","import com.google.common.collect.ImmutableMap;","56","    controller.createAction(\"installed\")","71","    writePluginInfoList(jsonWriter, pluginInfoList);","81","  private void writePluginInfoList(JsonWriter jsonWriter, Collection<PluginInfo> pluginInfoList) {","82","    ImmutableMap<String, Plugin> compatiblesPluginsByKeys = compatiblePluginsByKey(updateCenterMatrixFactory);","83","    pluginWSCommons.writePluginInfoList(jsonWriter, pluginInfoList, compatiblesPluginsByKeys, ARRAY_PLUGINS);"]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/server\/ws\/WebService.java":[{"add":["389","    \/**"],"delete":["389","    \/**$"]}]}},"551d4d6f30df01393f9db316c18f06d2a1a809f6":{"changes":{"sonar-db\/src\/main\/resources\/org\/sonar\/db\/user\/UserMapper.xml":"MODIFY"},"diff":{"sonar-db\/src\/main\/resources\/org\/sonar\/db\/user\/UserMapper.xml":[{"add":["140","      text_value LIKE #{login}"],"delete":["140","      text_value=#{login}"]}]}},"009b71015a299d024c7cadee120568f9a80b4865":{"changes":{"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/purge\/PurgeCommands.java":"MODIFY","server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/purge\/PurgeMapper.xml":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/purge\/PurgeMapper.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/purge\/PurgeDaoTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/purge\/PurgeDao.java":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/purge\/PurgeCommands.java":[{"add":["208","  public void deleteCeQueue(String rootUuid) {","209","    profiler.start(\"deleteCeQueue (ce_queue)\");","210","    purgeMapper.deleteCeQueueByProjectUuid(rootUuid);","211","    session.commit();","212","    profiler.stop();","213","  }","214",""],"delete":[]}],"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/purge\/PurgeMapper.xml":[{"add":["300","      delete from ce_activity where component_uuid=#{projectUuid,jdbcType=VARCHAR}","301","  <\/delete>","302","","303","  <delete id=\"deleteCeQueueByProjectUuid\">","304","    delete from ce_queue where component_uuid=#{projectUuid,jdbcType=VARCHAR}"],"delete":["300","      delete from ce_activity where component_uuid=#{rootProjectUuid,jdbcType=VARCHAR}"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/purge\/PurgeMapper.java":[{"add":["86","  void deleteCeActivityByProjectUuid(@Param(\"projectUuid\") String projectUuid);","87","","88","  void deleteCeQueueByProjectUuid(@Param(\"projectUuid\") String projectUuid);"],"delete":["86","  void deleteCeActivityByProjectUuid(String projectUuid);"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/purge\/PurgeDaoTest.java":[{"add":["26","import org.apache.commons.lang.math.RandomUtils;","38","import org.sonar.db.ce.CeQueueDto.Status;","86","      new IdUuidPair(THE_PROJECT_ID, \"ABCD\"), new String[] {Scopes.DIRECTORY, Scopes.FILE}, 30, System2.INSTANCE, Collections.emptyList());","148","    insertCeActivity(projectToBeDeleted);","149","    insertCeActivity(anotherLivingProject);","159","  public void delete_tasks_in_ce_queue_when_deleting_project() {","160","    ComponentDto projectToBeDeleted = dbTester.components().insertProject();","161","    ComponentDto anotherLivingProject = dbTester.components().insertProject();","162","","163","    \/\/ Insert 3 rows in CE_QUEUE: two for the project that will be deleted (in order to check that status","164","    \/\/ is not involved in deletion), and one on another project","165","    dbClient.ceQueueDao().insert(dbSession, createCeQueue(projectToBeDeleted, Status.PENDING));","166","    dbClient.ceQueueDao().insert(dbSession, createCeQueue(projectToBeDeleted, Status.IN_PROGRESS));","167","    dbClient.ceQueueDao().insert(dbSession, createCeQueue(anotherLivingProject, Status.PENDING));","168","    dbSession.commit();","169","","170","    underTest.deleteProject(dbSession, projectToBeDeleted.uuid());","171","    dbSession.commit();","172","","173","    assertThat(dbTester.countRowsOfTable(\"ce_queue\")).isEqualTo(1);","174","    assertThat(dbTester.countSql(\"select count(*) from ce_queue where component_uuid='\" + projectToBeDeleted.uuid() + \"'\")).isEqualTo(0);","175","  }","176","","177","  @Test","245","  private CeQueueDto createCeQueue(ComponentDto component, Status status) {","249","    queueDto.setComponentUuid(component.uuid());","252","    queueDto.setStatus(status);","253","    return queueDto;","254","  }","255","","256","  private CeActivityDto insertCeActivity(ComponentDto component) {","257","    Status unusedStatus = Status.values()[RandomUtils.nextInt(Status.values().length)];","258","    CeQueueDto queueDto = createCeQueue(component, unusedStatus);"],"delete":["84","      new IdUuidPair(THE_PROJECT_ID, \"ABCD\"), new String[]{Scopes.DIRECTORY, Scopes.FILE}, 30, System2.INSTANCE, Collections.emptyList());","146","    insertCeActivity(projectToBeDeleted.uuid());","147","    insertCeActivity(anotherLivingProject.uuid());","224","  private CeActivityDto insertCeActivity(String componentUuid) {","228","    queueDto.setComponentUuid(componentUuid);"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/purge\/PurgeDao.java":[{"add":["160","    commands.deleteCeQueue(rootUuid);"],"delete":[]}]}},"ab0fd108dae208ae9c176b572d678066b66894d3":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ws\/WebServiceFilter.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/ws\/WebServiceFilterTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ws\/WebServiceFilter.java":[{"add":["23","import java.util.Set;","24","import java.util.function.Function;","25","import java.util.stream.Stream;","33","import org.sonar.core.util.stream.Collectors;","38"," * This filter is used to execute Web Services.","40"," * Every urls beginning with '\/api' and every web service urls are taken into account, except :","41"," * <ul>","42"," *   <li>web services that directly implemented with servlet filter, see {@link ServletFilterHandler})<\/li>","43"," *   <li>deprecated '\/api\/properties' web service, see {@link DeprecatedPropertiesWsFilter}<\/li>","44"," * <\/ul>","49","  private final Set<String> includeUrls;","50","  private final Set<String> excludeUrls;","54","    this.includeUrls = Stream.concat(","55","      Stream.of(\"\/api\/*\"),","56","      webServiceEngine.controllers()","57","        .stream()","58","        .flatMap(controller -> controller.actions().stream()","59","          .map(toPath())))","60","      .collect(Collectors.toSet());","61","    this.excludeUrls = Stream.concat(","62","      Stream.of(\"\/\" + CONTROLLER_PROPERTIES + \"*\"),","63","      webServiceEngine.controllers()","64","        .stream()","65","        .flatMap(controller -> controller.actions().stream()","66","          .filter(action -> action.handler() instanceof ServletFilterHandler)","67","          .map(toPath())))","68","      .collect(Collectors.toSet());","98","  private static Function<WebService.Action, String> toPath() {","99","    return action -> \"\/\" + action.path() + \"\/*\";"],"delete":["23","import java.util.ArrayList;","24","import java.util.List;","36"," * This filter is used to execute Java WS.","38"," * If the url match a Java WS, the output of the WS is returned and no other filers are executed.","39"," * If the url doesn't match a Java WS, then it's calling remaining filters (for instance to execute Rails WS).","44","  private final List<String> includeUrls = new ArrayList<>();","45","  private final List<String> excludeUrls = new ArrayList<>();","49","    webServiceEngine.controllers()","50","      .forEach(controller -> controller.actions()","51","        .forEach(action -> {","52","          \/\/ Rest and servlet filter WS should not be executed by the web service engine","53","          if (shouldBeExecutedByWebServiceEngine(controller, action)) {","54","            includeUrls.add(\"\/\" + controller.path() + \"\/*\");","55","          } else {","56","            excludeUrls.add(\"\/\" + action.path() + \"*\");","57","          }","58","        }));","88","  private static boolean shouldBeExecutedByWebServiceEngine(WebService.Controller controller, WebService.Action action) {","89","    return !(action.handler() instanceof ServletFilterHandler)","90","      && !controller.path().equals(CONTROLLER_PROPERTIES);"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/ws\/WebServiceFilterTest.java":[{"add":["49","  private WebServiceEngine webServiceEngine = mock(WebServiceEngine.class);","51","  private HttpServletRequest request = mock(HttpServletRequest.class);","52","  private HttpServletResponse response = mock(HttpServletResponse.class);","53","  private FilterChain chain = mock(FilterChain.class);","54","  private ServletOutputStream responseOutput = mock(ServletOutputStream.class);","56","  private WebServiceFilter underTest;","65","  public void match_declared_web_services() throws Exception {","68","      newWsUrl(\"batch\", \"index\"));","78","  public void match_undeclared_web_services_starting_with_api() throws Exception {","79","    initWebServiceEngine(newWsUrl(\"api\/issues\", \"search\"));","80","","81","    assertThat(underTest.doGetPattern().matches(\"\/api\/resources\/index\")).isTrue();","82","    assertThat(underTest.doGetPattern().matches(\"\/api\/user_properties\")).isTrue();","83","  }","84","","85","  @Test","86","  public void does_not_match_web_services_using_servlet_filter() throws Exception {","87","    initWebServiceEngine(newWsUrl(\"api\/authentication\", \"login\").setHandler(ServletFilterHandler.INSTANCE));","88","","89","    assertThat(underTest.doGetPattern().matches(\"\/api\/authentication\/login\")).isFalse();","90","  }","91","","92","  @Test","93","  public void does_not_match_api_properties_ws() throws Exception {","94","    initWebServiceEngine(newWsUrl(\"api\/properties\", \"index\"));","95","","96","    assertThat(underTest.doGetPattern().matches(\"\/api\/properties\")).isFalse();","97","    assertThat(underTest.doGetPattern().matches(\"\/api\/properties\/index\")).isFalse();","98","  }","99","","100","  @Test"],"delete":["49","  WebServiceEngine webServiceEngine = mock(WebServiceEngine.class);","51","  HttpServletRequest request = mock(HttpServletRequest.class);","52","  HttpServletResponse response = mock(HttpServletResponse.class);","53","  FilterChain chain = mock(FilterChain.class);","54","  ServletOutputStream responseOutput = mock(ServletOutputStream.class);","56","  WebServiceFilter underTest;","65","  public void do_get_pattern() throws Exception {","68","      newWsUrl(\"batch\", \"index\"),","69","      newWsUrl(\"api\/authentication\", \"login\").setHandler(ServletFilterHandler.INSTANCE));","75","    assertThat(underTest.doGetPattern().matches(\"\/api\/resources\/index\")).isFalse();","76","    assertThat(underTest.doGetPattern().matches(\"\/api\/authentication\/login\")).isFalse();","77","    assertThat(underTest.doGetPattern().matches(\"\/api\/properties\")).isFalse();"]}]}},"8a00454ce43880eecc5224d19aac04876a8d52a8":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/ServerImpl.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/ServerImpl.java":[{"add":["157","    return getURL();","167","    return getURL().startsWith(\"https:\/\/\");"],"delete":["50","import static org.sonar.api.CoreProperties.SERVER_BASE_URL_DEFAULT_VALUE;","158","    return get(SERVER_BASE_URL, SERVER_BASE_URL_DEFAULT_VALUE);","168","    return get(SERVER_BASE_URL, SERVER_BASE_URL_DEFAULT_VALUE).startsWith(\"https:\/\/\");"]}]}},"b11488eb1b9f2aafa3233397794e8df347078f86":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/about\/components\/__tests__\/__snapshots__\/AboutApp-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/about\/components\/AboutApp.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/about\/components\/__tests__\/__snapshots__\/EntryIssueTypes-test.tsx.snap":"ADD","server\/sonar-web\/src\/main\/js\/apps\/about\/components\/EntryIssueTypes.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/about\/components\/__tests__\/EntryIssueTypes-test.tsx":"ADD"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/about\/components\/__tests__\/__snapshots__\/AboutApp-test.tsx.snap":[{"add":[],"delete":["62","          securityHotspots={5}"]}],"server\/sonar-web\/src\/main\/js\/apps\/about\/components\/AboutApp.tsx":[{"add":[],"delete":["117","    let securityHotspots;","122","      securityHotspots = issueTypes['SECURITY_HOTSPOT'] && issueTypes['SECURITY_HOTSPOT'].count;","149","                securityHotspots={securityHotspots}"]}],"server\/sonar-web\/src\/main\/js\/apps\/about\/components\/__tests__\/__snapshots__\/EntryIssueTypes-test.tsx.snap":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/about\/components\/EntryIssueTypes.tsx":[{"add":["28","export interface EntryIssueTypesProps {","40","}: EntryIssueTypesProps) {"],"delete":["23","import SecurityHotspotIcon from 'sonar-ui-common\/components\/icons\/SecurityHotspotIcon';","29","interface Props {","33","  securityHotspots?: number;","41","  securityHotspots,","43","}: Props) {","100","            <tr>","101","              <td className=\"about-page-issue-type-number\">","102","                <Link","103","                  className=\"about-page-issue-type-link\"","104","                  to={getIssuesUrl({","105","                    resolved: 'false',","106","                    types: 'SECURITY_HOTSPOT',","107","                    s: 'CREATION_DATE'","108","                  })}>","109","                  {formatMeasure(securityHotspots, 'SHORT_INT')}","110","                <\/Link>","111","              <\/td>","112","              <td>","113","                <span className=\"little-spacer-right\">","114","                  <SecurityHotspotIcon \/>","115","                <\/span>","116","                {translate('issue.type.SECURITY_HOTSPOT.plural')}","117","              <\/td>","118","            <\/tr>"]}],"server\/sonar-web\/src\/main\/js\/apps\/about\/components\/__tests__\/EntryIssueTypes-test.tsx":[{"add":[],"delete":[]}]}},"0000edfd89ee6084a0cde4a08424b3bad346e69e":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/notification\/ws\/AddActionTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/notification\/ws\/AddAction.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/notification\/ws\/AddActionTest.java":[{"add":["27","import org.sonar.api.web.UserRole;","123","  public void add_notification_on_private_with_USER_permission() {","125","    userSession.addProjectPermission(UserRole.USER, project);","133","  public void add_notification_on_public_project() {","134","    ComponentDto project = db.components().insertPublicProject();","135","    userSession.registerComponents(project);","136","    call(request.setProject(project.getDbKey()));","137","","138","    db.notifications().assertExists(defaultChannel.getKey(), NOTIF_MY_NEW_ISSUES, userSession.getUserId(), project);","139","  }","140","","141","  @Test","144","    userSession.addProjectPermission(UserRole.USER, project);","154","  public void add_a_notification_on_private_project_when_a_global_one_exists() {","158","    userSession.addProjectPermission(UserRole.USER, project);","159","    call(request.setProject(project.getDbKey()));","160","","161","    db.notifications().assertExists(defaultChannel.getKey(), NOTIF_MY_NEW_ISSUES, userSession.getUserId(), project);","162","    db.notifications().assertExists(defaultChannel.getKey(), NOTIF_MY_NEW_ISSUES, userSession.getUserId(), null);","163","  }","164","","165","","166","  @Test","167","  public void add_a_notification_on_public_project_when_a_global_one_exists() {","168","    ComponentDto project = db.components().insertPublicProject();","169","    userSession.registerComponents(project);","170","    call(request);","171","","239","  public void fail_when_unknown_project_dispatcher_on_private_project() {","241","    userSession.addProjectPermission(UserRole.USER, project);","242","","243","    expectedException.expect(BadRequestException.class);","244","    expectedException.expectMessage(\"Value of parameter 'type' (Dispatcher42) must be one of: [Dispatcher1, Dispatcher3]\");","245","","246","    call(request.setType(\"Dispatcher42\").setProject(project.getDbKey()));","247","  }","248","","249","  @Test","250","  public void fail_when_unknown_project_dispatcher_on_public_project() {","251","    ComponentDto project = db.components().insertPublicProject();","303","  @Test","304","  public void fail_when_user_does_not_have_USER_permission_on_private_project() {","305","    ComponentDto project = db.components().insertPrivateProject();","306","    userSession.logIn().setNonRoot().setNonSystemAdministrator();","307","","308","    expectedException.expect(ForbiddenException.class);","309","","310","    call(request","311","      .setProject(project.getDbKey())","312","      .setLogin(userSession.getLogin()));","313","  }","314",""],"delete":["122","  public void add_a_project_notification() {","142","  public void add_a_project_notification_when_a_global_one_exists() {","213","  public void fail_when_unknown_project_dispatcher() {"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/notification\/ws\/AddAction.java":[{"add":["29","import org.sonar.api.web.UserRole;","126","      Optional<ComponentDto> project = searchProject(dbSession, request);","127","      notificationUpdater.add(dbSession, request.getChannel(), request.getType(), user, project.orElse(null));","137","  private Optional<ComponentDto> searchProject(DbSession dbSession, AddRequest request) {","141","    project.ifPresent(p -> userSession.checkComponentPermission(UserRole.USER, p));","142","    return project;"],"delete":["23","import javax.annotation.CheckForNull;","126","      ComponentDto project = searchProject(dbSession, request);","127","      notificationUpdater.add(dbSession, request.getChannel(), request.getType(), user, project);","137","  @CheckForNull","138","  private ComponentDto searchProject(DbSession dbSession, AddRequest request) {","142","    return project.orElse(null);"]}]}},"64a7ab5038ad34b5aadb75707109f31d9d8b990e":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/branch\/pr\/ws\/ListAction.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/branch\/pr\/ws\/ListActionTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/branch\/pr\/ws\/ListAction.java":[{"add":["45","import static com.google.common.base.Strings.emptyToNull;","143","    setNullable(emptyToNull(pullRequestData.getUrl()), builder::setUrl);","144","    setNullable(emptyToNull(pullRequestData.getTitle()), builder::setTitle);"],"delete":["142","    builder.setUrl(pullRequestData.getUrl());","143","    builder.setTitle(pullRequestData.getTitle());"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/branch\/pr\/ws\/ListActionTest.java":[{"add":["155","      .extracting(PullRequest::getKey, PullRequest::getBranch, PullRequest::getIsOrphan, PullRequest::hasUrl, PullRequest::hasTitle)","156","      .containsExactlyInAnyOrder(tuple(\"123\", \"feature\/bar\", false, false, false));"],"delete":["155","      .extracting(PullRequest::getKey, PullRequest::getBranch, PullRequest::getIsOrphan)","156","      .containsExactlyInAnyOrder(tuple(\"123\", \"feature\/bar\", false));"]}]}},"f2cd33bc2d4e583adbe9e0ea6ada910bc7516f37":{"changes":{"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/utils\/DurationTest.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/utils\/Duration.java":"MODIFY"},"diff":{"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/utils\/DurationTest.java":[{"add":["47","    assertThat(Duration.create(0).encode(HOURS_IN_DAY)).isEqualTo(\"0min\");","57","    assertThat(Duration.decode(\"0min\", HOURS_IN_DAY)).isEqualTo(Duration.create(0));"],"delete":[]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/utils\/Duration.java":[{"add":["123","    return stringBuilder.length() == 0 ? (\"0\" + MINUTE) : stringBuilder.toString();"],"delete":["123","    return stringBuilder.toString();"]}]}},"7a225877b6dd3297af89fcbab079138bdea1e5e3":{"changes":{"server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/JwtHttpHandler.java":"MODIFY","server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/JwtSerializer.java":"MODIFY","server\/sonar-webserver-auth\/src\/test\/java\/org\/sonar\/server\/authentication\/JwtSerializerTest.java":"MODIFY"},"diff":{"server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/JwtHttpHandler.java":[{"add":["46","import static org.sonar.server.authentication.JwtSerializer.LAST_REFRESH_TIME_PARAM;"],"delete":["53","  private static final String LAST_REFRESH_TIME_PARAM = \"lastRefreshTime\";"]}],"server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/JwtSerializer.java":[{"add":["55","  static final String LAST_REFRESH_TIME_PARAM = \"lastRefreshTime\";","56","","82","    return Jwts.builder()","83","      .addClaims(jwtSession.getProperties())","84","      .claim(LAST_REFRESH_TIME_PARAM, system2.now())","89","      .signWith(secretKey, SIGNATURE_ALGORITHM)","90","      .compact();","120","    return Jwts.builder()","121","      .setClaims(token)","122","      .claim(LAST_REFRESH_TIME_PARAM, system2.now())","123","      .setExpiration(new Date(expirationTime))","124","      .signWith(secretKey, SIGNATURE_ALGORITHM)","125","      .compact();"],"delete":["24","import io.jsonwebtoken.JwtBuilder;","81","    JwtBuilder jwtBuilder = Jwts.builder()","86","      .signWith(secretKey, SIGNATURE_ALGORITHM);","87","    for (Map.Entry<String, Object> entry : jwtSession.getProperties().entrySet()) {","88","      jwtBuilder.claim(entry.getKey(), entry.getValue());","89","    }","90","    return jwtBuilder.compact();","120","    JwtBuilder jwtBuilder = Jwts.builder();","121","    for (Map.Entry<String, Object> entry : token.entrySet()) {","122","      jwtBuilder.claim(entry.getKey(), entry.getValue());","123","    }","124","    jwtBuilder.setExpiration(new Date(expirationTime))","125","      .signWith(secretKey, SIGNATURE_ALGORITHM);","126","    return jwtBuilder.compact();"]}],"server\/sonar-webserver-auth\/src\/test\/java\/org\/sonar\/server\/authentication\/JwtSerializerTest.java":[{"add":["254","    Date lastRefreshDate = addMinutes(new Date(), -4);","261","    token.put(\"lastRefreshTime\", lastRefreshDate.getTime());","272","    assertThat(((long) result.get(\"lastRefreshTime\"))).isGreaterThanOrEqualTo(now.getTime());"],"delete":[]}]}},"5e93a5a3e81c5285e354d4632024c31581bd7ae5":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/ActivationFormModal.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/CustomRuleFormModal.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/RuleDetailsParameters.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/RuleDetailsDescription.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/ActivationFormModal.tsx":[{"add":["20","import { sanitize } from 'dompurify';","228","                    \/\/ eslint-disable-next-line react\/no-danger","229","                    dangerouslySetInnerHTML={{ __html: sanitize(param.htmlDesc || '') }}"],"delete":["227","                    \/\/ Safe: defined by rule creator (instance admin?)","228","                    dangerouslySetInnerHTML={{ __html: param.htmlDesc || '' }}"]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/CustomRuleFormModal.tsx":[{"add":["19","import { sanitize } from 'dompurify';","307","        \/\/ eslint-disable-next-line react\/no-danger","308","        dangerouslySetInnerHTML={{ __html: sanitize(param.htmlDesc || '') }}"],"delete":["306","        \/\/ Safe: defined by rule creator (instance admin?)","307","        dangerouslySetInnerHTML={{ __html: param.htmlDesc || '' }}"]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/RuleDetailsParameters.tsx":[{"add":["19","import { sanitize } from 'dompurify';","32","        <p","33","          \/\/ eslint-disable-next-line react\/no-danger","34","          dangerouslySetInnerHTML={{ __html: sanitize(param.htmlDesc || '') }}"],"delete":["31","        <p \/\/ Safe: defined by rule creator (instance admin?)","32","          dangerouslySetInnerHTML={{ __html: param.htmlDesc || '' }}"]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/RuleDetailsDescription.tsx":[{"add":["19","import { sanitize } from 'dompurify';","115","          \/\/ eslint-disable-next-line react\/no-danger","116","          dangerouslySetInnerHTML={{ __html: sanitize(this.props.ruleDetails.htmlNote) }}","197","            \/\/ eslint-disable-next-line react\/no-danger","198","            dangerouslySetInnerHTML={{ __html: sanitize(ruleDetails.htmlDesc || '') }}"],"delete":["114","          \/\/ Safe: defined by rule creator (instance admin?)","115","          dangerouslySetInnerHTML={{ __html: this.props.ruleDetails.htmlNote }}","196","            \/\/ Safe: defined by rule creator (instance admin?)","197","            dangerouslySetInnerHTML={{ __html: ruleDetails.htmlDesc || '' }}"]}]}},"763495b61a29ff949730bc9322dd1b4e70241476":{"changes":{"server\/sonar-web\/config\/webpack.config.js":"MODIFY"},"diff":{"server\/sonar-web\/config\/webpack.config.js":[{"add":["83","        automaticNameDelimiter: '-'","212","              maxAssetSize: 400000,","236","            exclude: p => {","237","              \/\/ Transpile D3 packages.","238","              if (\/\\\/d3\/.test(p)) {","239","                return false;","240","              }","241","              \/\/ Ignore anything else in node_modules\/.","242","              return \/node_modules\/.test(p);","243","            },"],"delete":["83","        automaticNameDelimiter: '-',","84","        maxSize: 310000","213","              maxAssetSize: 310000,","237","            exclude: \/(node_modules|libs)\/,"]}]}},"2f2a4577f3b8f38dd6f279add2378010b4e7f5f8":{"changes":{"server\/sonar-web\/src\/main\/less\/components\/source.less":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/less\/components\/source.less":[{"add":["30","  min-height: 200px;","358","  right: 0;","362","  border-right: none;"],"delete":["357","  right: -1px;"]}]}},"034b1839f03921b731f61ab0f9fa07dab7e0c722":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/badge\/ws\/SvgFormatter.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/badge\/ws\/SvgFormatter.java":[{"add":["51","    NumberFormat numericFormatter = DecimalFormat.getInstance(Locale.ENGLISH);","52","    numericFormatter.setMaximumFractionDigits(1);","55","    String formattedNumber = numericFormatter.format(valueToFormat);","61","    DecimalFormat percentFormatter = new DecimalFormat(\"#.#\", DecimalFormatSymbols.getInstance(Locale.ENGLISH));","62","    return percentFormatter.format(value) + \"%\";"],"delete":["33","  private static final NumberFormat NUMERIC_FORMATTER = DecimalFormat.getInstance(Locale.ENGLISH);","37","  private static final DecimalFormat PERCENT_FORMATTER = new DecimalFormat(\"#.#\", DecimalFormatSymbols.getInstance(Locale.ENGLISH));","38","","54","    NUMERIC_FORMATTER.setMaximumFractionDigits(1);","57","    String formattedNumber = NUMERIC_FORMATTER.format(valueToFormat);","63","    return PERCENT_FORMATTER.format(value) + \"%\";"]}]}},"88e87020615f59ceed877b2fce817689613dcd5d":{"changes":{"server\/sonar-web\/src\/main\/js\/app\/components\/__tests__\/ComponentContainer-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/ComponentContainer.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/app\/components\/__tests__\/ComponentContainer-test.tsx":[{"add":["107","    branchLikes: [mockMainBranch()],","138","  expect(component.isSameBranch({} \/*, undefined*\/)).toBe(true);","140","  expect(component.isSameBranch({ branch: mainBranch.name }, mainBranch)).toBe(true);"],"delete":["73","const mainBranch = mockMainBranch();","74","","109","    branchLikes: [mainBranch],","140","  expect(component.isSameBranch({}, undefined)).toBe(true);"]}],"server\/sonar-web\/src\/main\/js\/app\/components\/ComponentContainer.tsx":[{"add":["271","    if (branchLike) {","272","      if (isMainBranch(branchLike)) {","273","        return (!task.pullRequest && !task.branch) || branchLike.name === task.branch;","274","      }"],"delete":["271","    if (branchLike && !isMainBranch(branchLike)) {"]}]}},"b085c7e3887dbca984d0211edf1c93a08972fced":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/controller.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/controller.js":[{"add":["24","import throwGlobalError from '..\/..\/app\/utils\/throwGlobalError';","62","    return $.get(url, options)","63","      .done(r => {","64","        const rules = that.app.list.parseRules(r);","65","        if (firstPage) {","66","          that.app.list.reset(rules);","67","        } else {","68","          that.app.list.add(rules);","69","        }","70","        that.app.list.setIndex();","71","        that.app.list.addExtraAttributes(that.app.repositories);","72","        that.app.facets.reset(that._allFacets());","73","        that.app.facets.add(r.facets, { merge: true });","74","        that.enableFacets(that._enabledFacets());","75","        that.app.state.set({","76","          page: r.p,","77","          pageSize: r.ps,","78","          total: r.total,","79","          maxResultsReached: r.p * r.ps >= r.total","80","        });","81","        if (firstPage && that.isRulePermalink()) {","82","          that.showDetails(that.app.list.first());","83","        }","84","      })","85","      .fail(error => {","86","        this.app.state.set({ maxResultsReached: true });","87","        throwGlobalError(error);"],"delete":["61","    return $.get(url, options).done(r => {","62","      const rules = that.app.list.parseRules(r);","63","      if (firstPage) {","64","        that.app.list.reset(rules);","65","      } else {","66","        that.app.list.add(rules);","67","      }","68","      that.app.list.setIndex();","69","      that.app.list.addExtraAttributes(that.app.repositories);","70","      that.app.facets.reset(that._allFacets());","71","      that.app.facets.add(r.facets, { merge: true });","72","      that.enableFacets(that._enabledFacets());","73","      that.app.state.set({","74","        page: r.p,","75","        pageSize: r.ps,","76","        total: r.total,","77","        maxResultsReached: r.p * r.ps >= r.total","79","      if (firstPage && that.isRulePermalink()) {","80","        that.showDetails(that.app.list.first());","81","      }","82","    });"]}]}},"79f9c59c24977943bc5ae8d34bffcce9a4d6ba38":{"changes":{"tests\/src\/test\/java\/org\/sonarqube\/tests\/rule\/RulesMarkdownTest.java":"ADD","sonar-markdown\/src\/test\/java\/org\/sonar\/markdown\/MarkdownTest.java":"MODIFY","sonar-markdown\/src\/main\/java\/org\/sonar\/markdown\/HtmlEmphasisChannel.java":"MODIFY","tests\/src\/test\/java\/org\/sonarqube\/tests\/Category6Suite.java":"MODIFY"},"diff":{"tests\/src\/test\/java\/org\/sonarqube\/tests\/rule\/RulesMarkdownTest.java":[{"add":[],"delete":[]}],"sonar-markdown\/src\/test\/java\/org\/sonar\/markdown\/MarkdownTest.java":[{"add":["102","  public void shouldEmphasisText() {","103","    assertThat(Markdown.convertToHtml(\"This is *Sparta !!!*\")).isEqualTo(\"This is <strong>Sparta !!!<\/strong>\");","104","    assertThat(Markdown.convertToHtml(\"This is *A*\")).isEqualTo(\"This is <strong>A<\/strong>\");","105","    assertThat(Markdown.convertToHtml(\"This should not be * \\n emphasized\")).isEqualTo(\"This should not be * <br\/> emphasized\");","107","    assertThat(Markdown.convertToHtml(\"Not * emphasized * because of whitespaces\")).isEqualTo(\"Not * emphasized * because of whitespaces\");","108","    assertThat(Markdown.convertToHtml(\"Not *emphasized * because of whitespace\")).isEqualTo(\"Not *emphasized * because of whitespace\");","109","    assertThat(Markdown.convertToHtml(\"Not * emphasized* because of whitespace\")).isEqualTo(\"Not * emphasized* because of whitespace\");","110","    assertThat(Markdown.convertToHtml(\"emphasized*inside*word\")).isEqualTo(\"emphasized<strong>inside<\/strong>word\");","111","    assertThat(Markdown.convertToHtml(\"*Emphasize many words*\")).isEqualTo(\"<strong>Emphasize many words<\/strong>\");"],"delete":["102","  public void shouldEmphaseText() {","103","    assertThat(Markdown.convertToHtml(\"This is *important*\")).isEqualTo(\"This is <strong>important<\/strong>\");","104","    assertThat(Markdown.convertToHtml(\"This should not be * \\n emphase\")).isEqualTo(\"This should not be * <br\/> emphase\");","106","    assertThat(Markdown.convertToHtml(\"Not * emphase * because of whitespaces\")).isEqualTo(\"Not * emphase * because of whitespaces\");","107","    assertThat(Markdown.convertToHtml(\"Not *emphase * because of whitespace\")).isEqualTo(\"Not *emphase * because of whitespace\");","108","    assertThat(Markdown.convertToHtml(\"Not * emphase* because of whitespace\")).isEqualTo(\"Not * emphase* because of whitespace\");","109","    assertThat(Markdown.convertToHtml(\"emphase*inside*word\")).isEqualTo(\"emphase<strong>inside<\/strong>word\");","110","    assertThat(Markdown.convertToHtml(\"*Emphase many words*\")).isEqualTo(\"<strong>Emphase many words<\/strong>\");"]}],"sonar-markdown\/src\/main\/java\/org\/sonar\/markdown\/HtmlEmphasisChannel.java":[{"add":["30","  HtmlEmphasisChannel() {","31","    super(\"\\\\*[^\\\\s\\\\*]\\\\*|\\\\*[^\\\\s\\\\*][^\\n\\r]*?[^\\\\s\\\\*]\\\\*\");"],"delete":["30","  public HtmlEmphasisChannel() {","31","    super(\"\\\\*[^\\\\s\\\\*][^\\n\\r]+?[^\\\\s\\\\*]\\\\*\");"]}],"tests\/src\/test\/java\/org\/sonarqube\/tests\/Category6Suite.java":[{"add":["37","import org.sonarqube.tests.rule.RulesMarkdownTest;","62","  RulesMarkdownTest.class,"],"delete":[]}]}},"27f9120cef1ffe43e71e8b8dd3198c9526c88984":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/component\/NewComponentTest.java":"ADD","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/component\/NewComponent.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/component\/NewComponentTest.java":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/component\/NewComponent.java":[{"add":["23","import org.sonar.api.resources.Qualifiers;","24","","25","import static com.google.common.base.Preconditions.checkArgument;","29","  private static final int MAX_KEY_LENGHT = 400;","30","  private static final int MAX_NAME_LENGTH = 2000;","31","  private static final int MAX_QUALIFIER_LENGTH = 10;","65","    if (qualifier != null) {","66","      checkArgument(qualifier.length() <= MAX_QUALIFIER_LENGTH,","67","        \"Component qualifier length (%s) is longer than the maximum authorized (%s)\", qualifier.length(), MAX_QUALIFIER_LENGTH);","68","    }","69","","75","    checkArgument(key != null, \"Key can't be null\");","76","    checkArgument(key.length() <= MAX_KEY_LENGHT, \"Component key length (%s) is longer than the maximum authorized (%s)\", key.length(), MAX_KEY_LENGHT);","77","    checkArgument(name != null, \"Name can't be null\");","78","    checkArgument(name.length() <= MAX_NAME_LENGTH, \"Component name length (%s) is longer than the maximum authorized (%s)\", name.length(), MAX_NAME_LENGTH);"],"delete":["21","import com.google.common.base.Preconditions;","22","import org.sonar.api.resources.Qualifiers;","23","","67","    Preconditions.checkNotNull(key, \"Key can't be null\");","68","    Preconditions.checkNotNull(name, \"Name can't be null\");"]}]}},"1de512a131f84fb1b6656150347d2b075b478780":{"changes":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/bootstrap\/GlobalTempFolderProvider.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/bootstrap\/GlobalTempFolderProviderTest.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/bootstrap\/GlobalTempFolderProvider.java":[{"add":["46","","81","      Path realPath = workingPath;","82","      if (Files.isSymbolicLink(realPath)) {","83","        realPath = realPath.toRealPath();","84","      }","85","      Files.createDirectories(realPath);","165","    \/\/ nothing to do"],"delete":["46","  ","68","","82","      Files.createDirectories(workingPath);","162","  \/\/nothing to do"]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/bootstrap\/GlobalTempFolderProviderTest.java":[{"add":["50","    workingDir.delete();","130","  @Test","131","  public void homeIsSymbolicLink() throws IOException {","132","    File realSonarHome = temp.newFolder();","133","    File symlink = temp.newFolder();","134","    symlink.delete();","135","    Files.createSymbolicLink(symlink.toPath(), realSonarHome.toPath());","136","    GlobalProperties globalProperties = new GlobalProperties(ImmutableMap.of(\"sonar.userHome\", symlink.getAbsolutePath()));","137","","138","    TempFolder tempFolder = tempFolderProvider.provide(globalProperties);","139","    File newFile = tempFolder.newFile();","140","    assertThat(newFile.getParentFile().getParentFile().getAbsolutePath()).isEqualTo(symlink.getAbsolutePath());","141","    assertThat(newFile.getParentFile().getName()).startsWith(\".sonartmp_\");","142","  }","143",""],"delete":[]}]}},"a5b62298cc4c67c0c7da81c97f874bf5d6be59d8":{"changes":{"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/__tests__\/HeaderMeta-test.tsx":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/user\/ws\/SetHomepageAction.java":"MODIFY","server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/user\/ws\/CurrentActionHomepageTest.java":"MODIFY","server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/user\/ws\/HomepageTypesImplTest.java":"MODIFY","server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/user\/ws\/SetHomepageActionTest.java":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/user\/ws\/HomepageTypes.java":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/HeaderMeta.tsx":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/user\/ws\/HomepageTypesImpl.java":"MODIFY","sonar-ws\/src\/main\/protobuf\/ws-users.proto":"MODIFY","server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/user\/ws\/CurrentActionTest.java":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/user\/ws\/CurrentAction.java":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/__tests__\/__snapshots__\/HeaderMeta-test.tsx.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/__tests__\/HeaderMeta-test.tsx":[{"add":["32","it('should render correctly for a portfolio', () => {","33","  const wrapper = shallowRender({","34","    component: mockComponent({ key: 'foo', qualifier: ComponentQualifier.Portfolio })","35","  });","36","  expect(wrapper).toMatchSnapshot();","37","});","38",""],"delete":[]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/user\/ws\/SetHomepageAction.java":[{"add":["70","      .setChangelog(","71","        new Change(\"8.3\", \"Types: MY_PROJECTS, MY_ISSUES, ORGANIZATION removed\"),","72","        new Change(\"8.3\", \"Parameter 'organization' removed\"),","73","        new Change(\"7.1\", \"Parameter 'parameter' is replaced by 'component' and 'organization'\"))","99","      String parameter = getHomepageParameter(dbSession, type, componentParameter, request.param(PARAM_BRANCH));","114","  private String getHomepageParameter(DbSession dbSession, HomepageTypes.Type type, @Nullable String componentParameter, @Nullable String branchParameter) {"],"delete":["32","import org.sonar.server.exceptions.NotFoundException;","38","import static org.apache.commons.lang.StringUtils.isBlank;","40","import static org.sonar.server.user.ws.HomepageTypes.Type.ORGANIZATION;","73","      .setChangelog(new Change(\"7.1\", \"Parameter 'parameter' is replaced by 'component' and 'organization'\"))","81","    action.createParam(PARAM_ORGANIZATION)","82","      .setDescription(\"Organization key. It should only be used when parameter '%s' is set to '%s'\", PARAM_TYPE, ORGANIZATION)","83","      .setSince(\"7.1\")","84","      .setExampleValue(\"my-org\");","85","","102","    String organizationParameter = request.param(PARAM_ORGANIZATION);","105","      String parameter = getHomepageParameter(dbSession, type, componentParameter, request.param(PARAM_BRANCH), organizationParameter);","120","  private String getHomepageParameter(DbSession dbSession, HomepageTypes.Type type, @Nullable String componentParameter, @Nullable String branchParameter,","121","    @Nullable String organizationParameter) {","135","      case ORGANIZATION:","136","        checkArgument(isNotBlank(organizationParameter), PARAMETER_REQUIRED, type.name(), PARAM_ORGANIZATION);","137","        return dbClient.organizationDao().selectByKey(dbSession, organizationParameter)","138","          .orElseThrow(() -> new NotFoundException(format(\"No organizationDto with key '%s'\", organizationParameter)))","139","          .getUuid();","143","      case MY_PROJECTS:","144","      case MY_ISSUES:","145","        checkArgument(isBlank(componentParameter), \"Parameter '%s' must not be provided when type is '%s'\", PARAM_COMPONENT, type.name());","146","        checkArgument(isBlank(organizationParameter), \"Parameter '%s' must not be provided when type is '%s'\", PARAM_ORGANIZATION, type.name());"]}],"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/user\/ws\/CurrentActionHomepageTest.java":[{"add":["21","import com.tngtech.java.junit.dataprovider.DataProvider;","22","import com.tngtech.java.junit.dataprovider.DataProviderRunner;","23","import com.tngtech.java.junit.dataprovider.UseDataProvider;","24","import java.util.Optional;","25","import javax.annotation.Nullable;","29","import org.junit.runner.RunWith;","35","import org.sonar.core.platform.EditionProvider;","36","import org.sonar.core.platform.PlatformEditionProvider;","54","import static org.sonarqube.ws.Users.CurrentWsResponse.HomepageType.PROJECTS;","56","@RunWith(DataProviderRunner.class)","68","  private PlatformEditionProvider platformEditionProvider = mock(PlatformEditionProvider.class);","69","  private HomepageTypesImpl homepageTypes = new HomepageTypesImpl();","74","    new CurrentAction(userSessionRule, dbClient, defaultOrganizationProvider, new AvatarResolverImpl(), homepageTypes, platformEditionProvider, permissionService));","89","  @UseDataProvider(\"enterpriseAndAbove\")","90","  public void return_homepage_when_set_to_a_portfolio(EditionProvider.Edition edition) {","91","    setPlatformEdition(edition);","104","  @UseDataProvider(\"enterpriseAndAbove\")","105","  public void return_default_when_set_to_a_portfolio_but_no_rights_on_this_portfolio(EditionProvider.Edition edition) {","106","    setPlatformEdition(edition);","115","      .isEqualTo(PROJECTS);","119","  @UseDataProvider(\"enterpriseAndAbove\")","120","  public void return_homepage_when_set_to_an_application(EditionProvider.Edition edition) {","121","    setPlatformEdition(edition);","134","  @UseDataProvider(\"enterpriseAndAbove\")","135","  public void return_default_homepage_when_set_to_an_application_but_no_rights_on_this_application(EditionProvider.Edition edition) {","136","    setPlatformEdition(edition);","145","      .isEqualTo(PROJECTS);","149","  @UseDataProvider(\"allEditions\")","150","  public void return_homepage_when_set_to_a_project(EditionProvider.Edition edition) {","151","    setPlatformEdition(edition);","164","  @UseDataProvider(\"allEditions\")","165","  public void return_default_homepage_when_set_to_a_project_but_no_rights_on_this_project(EditionProvider.Edition edition) {","166","    setPlatformEdition(edition);","175","      .isEqualTo(PROJECTS);","203","  @UseDataProvider(\"enterpriseAndAbove\")","204","  public void fallback_when_user_homepage_portfolio_does_not_exist_in_db(EditionProvider.Edition edition) {","205","    setPlatformEdition(edition);","215","  public void fallback_when_edition_is_null() {","216","    setPlatformEdition(null);","217","    ComponentDto application = db.components().insertPrivateApplication(db.getDefaultOrganization());","218","    UserDto user = db.users().insertUser(u -> u.setHomepageType(\"APPLICATION\").setHomepageParameter(application.uuid()));","219","    userSessionRule.logIn(user.getLogin());","220","","221","    CurrentWsResponse response = ws.newRequest().executeProtobuf(CurrentWsResponse.class);","222","","223","    assertThat(response.getHomepage()).isNotNull();","224","    assertThat(response.getHomepage().getType()).isEqualTo(PROJECTS);","225","  }","226","","227","  @Test","228","  @UseDataProvider(\"enterpriseAndAbove\")","229","  public void fallback_when_user_homepage_application_does_not_exist_in_db(EditionProvider.Edition edition) {","230","    setPlatformEdition(edition);","240","  @UseDataProvider(\"belowEnterprise\")","241","  public void fallback_when_user_homepage_application_and_edition_below_enterprise(EditionProvider.Edition edition) {","242","    setPlatformEdition(edition);","253","  public void fallback_to_PROJECTS() {","266","  private void setPlatformEdition(@Nullable EditionProvider.Edition edition) {","267","    when(platformEditionProvider.get()).thenReturn(Optional.ofNullable(edition));","270","  @DataProvider","271","  public static Object[][] enterpriseAndAbove() {","272","    return new Object[][] {","273","      {EditionProvider.Edition.ENTERPRISE},","274","      {EditionProvider.Edition.DATACENTER}","275","    };","278","  @DataProvider","279","  public static Object[][] belowEnterprise() {","280","    return new Object[][] {","281","      {EditionProvider.Edition.COMMUNITY},","282","      {EditionProvider.Edition.DEVELOPER}","283","    };","286","  @DataProvider","287","  public static Object[][] allEditions() {","288","    return new Object[][] {","289","      {EditionProvider.Edition.COMMUNITY},","290","      {EditionProvider.Edition.DEVELOPER},","291","      {EditionProvider.Edition.ENTERPRISE},","292","      {EditionProvider.Edition.DATACENTER}","293","    };","294","  }"],"delete":["24","import org.sonar.api.config.internal.MapSettings;","30","import org.sonar.core.platform.PluginRepository;","34","import org.sonar.db.organization.OrganizationDto;","39","import org.sonar.server.organization.TestOrganizationFlags;","62","  private PluginRepository pluginRepository = mock(PluginRepository.class);","63","  private MapSettings settings = new MapSettings();","64","  private TestOrganizationFlags organizationFlags = TestOrganizationFlags.standalone();","65","  private HomepageTypesImpl homepageTypes = new HomepageTypesImpl(settings.asConfig(), organizationFlags, db.getDbClient());","70","    new CurrentAction(userSessionRule, dbClient, defaultOrganizationProvider, new AvatarResolverImpl(), homepageTypes, pluginRepository, permissionService));","71","","72","  @Test","73","  public void return_homepage_when_set_to_MY_PROJECTS() {","74","    UserDto user = db.users().insertUser(u -> u.setHomepageType(\"MY_PROJECTS\"));","75","    userSessionRule.logIn(user);","76","","77","    CurrentWsResponse response = call();","78","","79","    assertThat(response.getHomepage())","80","      .extracting(CurrentWsResponse.Homepage::getType)","81","      .isEqualTo(CurrentWsResponse.HomepageType.MY_PROJECTS);","82","  }","97","  public void return_homepage_when_set_to_a_portfolio() {","98","    withGovernancePlugin();","111","  public void return_default_when_set_to_a_portfolio_but_no_rights_on_this_portfolio() {","112","    withGovernancePlugin();","121","      .isEqualTo(CurrentWsResponse.HomepageType.PROJECTS);","125","  public void return_homepage_when_set_to_an_application() {","126","    withGovernancePlugin();","139","  public void return_default_homepage_when_set_to_an_application_but_no_rights_on_this_application() {","140","    withGovernancePlugin();","149","      .isEqualTo(CurrentWsResponse.HomepageType.PROJECTS);","153","  public void return_homepage_when_set_to_a_project() {","166","  public void return_default_homepage_when_set_to_a_project_but_no_rights_on_this_project() {","175","      .isEqualTo(CurrentWsResponse.HomepageType.PROJECTS);","176","  }","177","","178","  @Test","179","  public void return_homepage_when_set_to_an_organization() {","180","    OrganizationDto organizationDto = db.organizations().insert();","181","    UserDto user = db.users().insertUser(u -> u.setHomepageType(\"ORGANIZATION\").setHomepageParameter(organizationDto.getUuid()));","182","    userSessionRule.logIn(user);","183","","184","    CurrentWsResponse response = call();","185","","186","    assertThat(response.getHomepage())","187","      .extracting(CurrentWsResponse.Homepage::getType, CurrentWsResponse.Homepage::getOrganization)","188","      .containsExactly(CurrentWsResponse.HomepageType.ORGANIZATION, organizationDto.getKey());","216","  public void fallback_when_user_homepage_organization_does_not_exist_in_db() {","217","    UserDto user = db.users().insertUser(u -> u.setHomepageType(\"ORGANIZATION\").setHomepageParameter(\"not-existing-organization-uuid\"));","218","    userSessionRule.logIn(user.getLogin());","219","","220","    CurrentWsResponse response = ws.newRequest().executeProtobuf(CurrentWsResponse.class);","221","","222","    assertThat(response.getHomepage()).isNotNull();","223","  }","224","","225","  @Test","226","  public void fallback_when_user_homepage_portfolio_does_not_exist_in_db() {","227","    withGovernancePlugin();","237","  public void fallback_when_user_homepage_application_does_not_exist_in_db() {","238","    withGovernancePlugin();","248","  public void fallback_when_user_homepage_application_and_governance_plugin_is_not_installed() {","249","    withoutGovernancePlugin();","260","  public void fallback_to_PROJECTS_when_on_SonarQube() {","269","  @Test","270","  public void fallback_to_MY_PROJECTS_when_on_SonarCloud() {","271","    onSonarCloud();","272","    UserDto user = db.users().insertUser(u -> u.setHomepageType(\"PROJECT\").setHomepageParameter(\"not-existing-project-uuid\"));","273","    userSessionRule.logIn(user.getLogin());","274","","275","    CurrentWsResponse response = ws.newRequest().executeProtobuf(CurrentWsResponse.class);","276","","277","    assertThat(response.getHomepage().getType().toString()).isEqualTo(\"MY_PROJECTS\");","278","  }","279","","284","  private void onSonarCloud() {","285","    settings.setProperty(\"sonar.sonarcloud.enabled\", true);","288","  private void withGovernancePlugin() {","289","    when(pluginRepository.hasPlugin(\"governance\")).thenReturn(true);","292","  private void withoutGovernancePlugin() {","293","    when(pluginRepository.hasPlugin(\"governance\")).thenReturn(false);"]}],"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/user\/ws\/HomepageTypesImplTest.java":[{"add":["23","import static org.assertj.core.api.Assertions.assertThat;","24","import static org.sonar.server.user.ws.HomepageTypes.Type.APPLICATION;","26","import static org.sonar.server.user.ws.HomepageTypes.Type.PORTFOLIO;","27","import static org.sonar.server.user.ws.HomepageTypes.Type.PORTFOLIOS;","33","  private HomepageTypesImpl underTest = new HomepageTypesImpl();","36","  public void types() {","37","    assertThat(underTest.getTypes()).containsExactlyInAnyOrder(PROJECT, PROJECTS, ISSUES, PORTFOLIOS, PORTFOLIO, APPLICATION);","41","  public void default_type() {"],"delete":["21","import org.junit.Rule;","23","import org.sonar.api.config.internal.MapSettings;","24","import org.sonar.db.DbTester;","25","import org.sonar.server.organization.TestOrganizationFlags;","27","import static org.assertj.core.api.Java6Assertions.assertThat;","29","import static org.sonar.server.user.ws.HomepageTypes.Type.MY_ISSUES;","30","import static org.sonar.server.user.ws.HomepageTypes.Type.MY_PROJECTS;","31","import static org.sonar.server.user.ws.HomepageTypes.Type.ORGANIZATION;","37","  @Rule","38","  public DbTester db = DbTester.create();","39","","40","  private MapSettings settings = new MapSettings();","41","  private TestOrganizationFlags organizationFlags = TestOrganizationFlags.standalone();","42","","43","  private HomepageTypesImpl underTest = new HomepageTypesImpl(settings.asConfig(), organizationFlags, db.getDbClient());","46","  public void types_on_sonarcloud_and_organization_disabled() {","47","    settings.setProperty(\"sonar.sonarcloud.enabled\", true);","48","    organizationFlags.setEnabled(false);","49","","50","    underTest.start();","51","","52","    assertThat(underTest.getTypes()).containsExactlyInAnyOrder(PROJECT, MY_PROJECTS, MY_ISSUES);","56","  public void types_on_sonarcloud_and_organization_enabled() {","57","    settings.setProperty(\"sonar.sonarcloud.enabled\", true);","58","    organizationFlags.setEnabled(true);","59","","60","    underTest.start();","61","","62","    assertThat(underTest.getTypes()).containsExactlyInAnyOrder(PROJECT, MY_PROJECTS, MY_ISSUES, ORGANIZATION);","63","  }","64","","65","  @Test","66","  public void types_on_sonarqube_and_organization_disabled() {","67","    settings.setProperty(\"sonar.sonarcloud.enabled\", false);","68","    organizationFlags.setEnabled(false);","69","","70","    underTest.start();","71","","72","    assertThat(underTest.getTypes()).containsExactlyInAnyOrder(PROJECT, PROJECTS, ISSUES);","73","  }","74","","75","  @Test","76","  public void types_on_sonarqube_and_organization_enabled() {","77","    settings.setProperty(\"sonar.sonarcloud.enabled\", false);","78","    organizationFlags.setEnabled(true);","79","","80","    underTest.start();","81","","82","    assertThat(underTest.getTypes()).containsExactlyInAnyOrder(PROJECT, PROJECTS, ISSUES, ORGANIZATION);","83","  }","84","","85","  @Test","86","  public void default_type_on_sonarcloud() {","87","    settings.setProperty(\"sonar.sonarcloud.enabled\", true);","88","","89","    underTest.start();","90","","91","    assertThat(underTest.getDefaultType()).isEqualTo(MY_PROJECTS);","92","  }","93","","94","  @Test","95","  public void default_type_on_sonarqube() {","96","    settings.setProperty(\"sonar.sonarcloud.enabled\", false);","97","","98","    underTest.start();","99",""]}],"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/user\/ws\/SetHomepageActionTest.java":[{"add":["65","    assertThat(action.params()).hasSize(3);","124","  public void set_issues_homepage() {","141","  public void set_projects_homepage() {","217","      .setParam(PARAM_TYPE, \"PROJECTS\")","246","      .expectMessage(\"Value of parameter 'type' (PIPO) must be one of: [PROJECT, PROJECTS, ISSUES, PORTFOLIOS, PORTFOLIO, APPLICATION]\");"],"delete":["65","    assertThat(action.params()).hasSize(4);","80","","81","    WebService.Param organizationParam = action.param(\"organization\");","82","    assertThat(organizationParam.isRequired()).isFalse();","83","    assertThat(organizationParam.description()).isEqualTo(\"Organization key. It should only be used when parameter 'type' is set to 'ORGANIZATION'\");","84","    assertThat(organizationParam.since()).isEqualTo(\"7.1\");","129","  public void set_organization_homepage() {","130","    OrganizationDto organization = db.organizations().insert();","131","","132","    UserDto user = db.users().insertUser();","133","    userSession.logIn(user);","134","","135","    ws.newRequest()","136","      .setMethod(\"POST\")","137","      .setParam(PARAM_TYPE, \"ORGANIZATION\")","138","      .setParam(\"organization\", organization.getKey())","139","      .execute();","140","","141","    UserDto actual = db.getDbClient().userDao().selectByLogin(db.getSession(), user.getLogin());","142","    assertThat(actual).isNotNull();","143","    assertThat(actual.getHomepageType()).isEqualTo(\"ORGANIZATION\");","144","    assertThat(actual.getHomepageParameter()).isEqualTo(organization.getUuid());","145","  }","146","","147","  @Test","148","  public void set_SonarCloud_my_issues_homepage() {","149","    UserDto user = db.users().insertUser();","150","    userSession.logIn(user);","151","","152","    ws.newRequest()","153","      .setMethod(\"POST\")","154","      .setParam(PARAM_TYPE, \"MY_ISSUES\")","155","      .execute();","156","","157","    UserDto actual = db.getDbClient().userDao().selectByLogin(db.getSession(), user.getLogin());","158","    assertThat(actual).isNotNull();","159","    assertThat(actual.getHomepageType()).isEqualTo(\"MY_ISSUES\");","160","    assertThat(actual.getHomepageParameter()).isNullOrEmpty();","161","  }","162","","163","  @Test","164","  public void set_SonarQube_issues_homepage() {","181","  public void set_SonarCloud_my_projects_homepage() {","182","    UserDto user = db.users().insertUser();","183","    userSession.logIn(user);","184","","185","    ws.newRequest()","186","      .setMethod(\"POST\")","187","      .setParam(PARAM_TYPE, \"MY_PROJECTS\")","188","      .execute();","189","","190","    UserDto actual = db.getDbClient().userDao().selectByLogin(db.getSession(), user.getLogin());","191","    assertThat(actual).isNotNull();","192","    assertThat(actual.getHomepageType()).isEqualTo(\"MY_PROJECTS\");","193","    assertThat(actual.getHomepageParameter()).isNullOrEmpty();","194","  }","195","","196","  @Test","197","  public void set_SonarQube_projects_homepage() {","273","      .setParam(PARAM_TYPE, \"MY_PROJECTS\")","296","  public void fail_when_missing_organization_id_when_requesting_organization_type() {","297","    UserDto user = db.users().insertUser();","298","    userSession.logIn(user);","299","","300","    expectedException.expect(IllegalArgumentException.class);","301","    expectedException.expectMessage(\"Type ORGANIZATION requires a parameter\");","302","","303","    ws.newRequest()","304","      .setMethod(\"POST\")","305","      .setParam(PARAM_TYPE, \"ORGANIZATION\")","306","      .execute();","307","  }","308","","309","  @Test","316","      .expectMessage(\"Value of parameter 'type' (PIPO) must be one of: [PROJECT, PROJECTS, ISSUES, PORTFOLIOS, PORTFOLIO, APPLICATION, MY_PROJECTS, MY_ISSUES, ORGANIZATION]\");"]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/user\/ws\/HomepageTypes.java":[{"add":["26","    PROJECT, PROJECTS, ISSUES, PORTFOLIOS, PORTFOLIO, APPLICATION"],"delete":["26","    PROJECT,","27","    \/**","28","     * These types are only available on SonarQube","29","     *\/","30","    PROJECTS, ISSUES, PORTFOLIOS, PORTFOLIO, APPLICATION,","31","    \/**","32","     * These types are only available on SonarCloud","33","     *\/","34","    MY_PROJECTS, MY_ISSUES,","35","    \/**","36","     * This type is only available when organizations are enabled","37","     *\/","38","    ORGANIZATION"]}],"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/HeaderMeta.tsx":[{"add":["66","        {isLoggedIn(currentUser) && currentPage !== undefined && !isPullRequest(branchLike) && ("],"delete":["66","        {isLoggedIn(currentUser) && isABranch && currentPage !== undefined && ("]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/user\/ws\/HomepageTypesImpl.java":[{"add":["22","import java.util.stream.Collectors;","23","import java.util.stream.Stream;","28","public class HomepageTypesImpl implements HomepageTypes {","32","  public HomepageTypesImpl() {","33","    types = Stream.of(HomepageTypes.Type.values()).collect(Collectors.toList());","44","    return PROJECTS;"],"delete":["21","import java.util.EnumSet;","23","import org.sonar.api.Startable;","24","import org.sonar.api.config.Configuration;","25","import org.sonar.db.DbClient;","26","import org.sonar.db.DbSession;","27","import org.sonar.process.ProcessProperties;","28","import org.sonar.server.organization.OrganizationFlags;","31","import static java.util.Arrays.stream;","32","import static java.util.stream.Collectors.toList;","33","import static org.sonar.server.user.ws.HomepageTypes.Type.ISSUES;","34","import static org.sonar.server.user.ws.HomepageTypes.Type.MY_ISSUES;","35","import static org.sonar.server.user.ws.HomepageTypes.Type.MY_PROJECTS;","36","import static org.sonar.server.user.ws.HomepageTypes.Type.ORGANIZATION;","37","import static org.sonar.server.user.ws.HomepageTypes.Type.PROJECT;","39","import static org.sonar.server.user.ws.HomepageTypes.Type.values;","41","public class HomepageTypesImpl implements HomepageTypes, Startable {","42","","43","  private static final EnumSet<Type> ON_SONARQUBE = EnumSet.of(PROJECTS, PROJECT, ISSUES, ORGANIZATION);","44","  private static final EnumSet<Type> ON_SONARCLOUD = EnumSet.of(PROJECT, MY_PROJECTS, MY_ISSUES, ORGANIZATION);","45","","46","  private final Configuration configuration;","47","  private final OrganizationFlags organizationFlags;","48","  private final DbClient dbClient;","52","  public HomepageTypesImpl(Configuration configuration, OrganizationFlags organizationFlags, DbClient dbClient) {","53","    this.configuration = configuration;","54","    this.organizationFlags = organizationFlags;","55","    this.dbClient = dbClient;","66","    return isOnSonarCloud() ? MY_PROJECTS : PROJECTS;","69","  @Override","70","  public void start() {","71","    try (DbSession dbSession = dbClient.openSession(false)) {","72","      boolean isOnSonarCloud = isOnSonarCloud();","73","      boolean isOrganizationEnabled = isOrganizationEnabled(dbSession);","74","      this.types = stream(values())","75","        .filter(type -> (isOnSonarCloud && ON_SONARCLOUD.contains(type)) || (!isOnSonarCloud && ON_SONARQUBE.contains(type)))","76","        .filter(type -> isOrganizationEnabled || !(type.equals(ORGANIZATION)))","77","        .collect(toList());","78","    }","79","  }","80","","81","  private boolean isOrganizationEnabled(DbSession dbSession) {","82","    return organizationFlags.isEnabled(dbSession);","83","  }","84","","85","  private Boolean isOnSonarCloud() {","86","    return configuration.getBoolean(ProcessProperties.Property.SONARCLOUD_ENABLED.getKey()).orElse(false);","87","  }","88","","89","  @Override","90","  public void stop() {","91","    \/\/ Nothing to do","92","  }"]}],"sonar-ws\/src\/main\/protobuf\/ws-users.proto":[{"add":["120","    PROJECTS = 2;","121","    ISSUES = 3;","122","    PORTFOLIO = 4;","123","    PORTFOLIOS = 5;","124","    APPLICATION = 6;","130","    optional string branch = 3;"],"delete":["120","    ORGANIZATION = 2;","121","    MY_PROJECTS = 3;","122","    MY_ISSUES = 4;","123","    PROJECTS = 5;","124","    ISSUES = 6;","125","    PORTFOLIO = 7;","126","    PORTFOLIOS = 8;","127","    APPLICATION = 9;","133","    optional string organization = 3;","134","    optional string branch = 4;"]}],"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/user\/ws\/CurrentActionTest.java":[{"add":["31","import org.sonar.core.platform.PlatformEditionProvider;","63","  private PlatformEditionProvider platformEditionProvider = mock(PlatformEditionProvider.class);","64","  private HomepageTypesImpl homepageTypes = new HomepageTypesImpl();","69","    new CurrentAction(userSession, db.getDbClient(), TestDefaultOrganizationProvider.from(db), new AvatarResolverImpl(), homepageTypes, platformEditionProvider,","70","      permissionService));"],"delete":["25","import org.sonar.api.config.internal.MapSettings;","32","import org.sonar.core.platform.PluginRepository;","38","import org.sonar.server.organization.TestOrganizationFlags;","65","  private PluginRepository pluginRepository = mock(PluginRepository.class);","66","  private MapSettings settings = new MapSettings();","67","  private TestOrganizationFlags organizationFlags = TestOrganizationFlags.standalone();","68","  private HomepageTypesImpl homepageTypes = new HomepageTypesImpl(settings.asConfig(), organizationFlags, db.getDbClient());","73","    new CurrentAction(userSession, db.getDbClient(), TestDefaultOrganizationProvider.from(db), new AvatarResolverImpl(), homepageTypes, pluginRepository, permissionService));"]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/user\/ws\/CurrentAction.java":[{"add":["28","import org.sonar.core.platform.EditionProvider;","29","import org.sonar.core.platform.PlatformEditionProvider;","56","import static org.sonarqube.ws.Users.CurrentWsResponse.HomepageType.APPLICATION;","57","import static org.sonarqube.ws.Users.CurrentWsResponse.HomepageType.PORTFOLIO;","58","import static org.sonarqube.ws.Users.CurrentWsResponse.HomepageType.PROJECT;","68","  private final PlatformEditionProvider editionProvider;","72","    AvatarResolver avatarResolver, HomepageTypes homepageTypes, PlatformEditionProvider editionProvider, PermissionService permissionService) {","78","    this.editionProvider = editionProvider;","103","        .setIsLoggedIn(false)","104","        .setPermissions(Permissions.newBuilder().addAllGlobal(getGlobalPermissions()).build())","105","        .build(),","200","    return !componentOptional.isPresent() || !hasValidEdition()","204","  private boolean hasValidEdition() {","205","    Optional<EditionProvider.Edition> edition = editionProvider.get();","206","    if (!edition.isPresent()) {","207","      return false;","209","    switch (edition.get()) {","210","      case ENTERPRISE:","211","      case DATACENTER:","212","        return true;","213","      default:","214","        return false;","215","    }"],"delete":["28","import org.sonar.core.platform.PluginRepository;","34","import org.sonar.db.organization.OrganizationDto;","54","import static org.sonarqube.ws.Users.CurrentWsResponse.HomepageType.APPLICATION;","55","import static org.sonarqube.ws.Users.CurrentWsResponse.HomepageType.ORGANIZATION;","56","import static org.sonarqube.ws.Users.CurrentWsResponse.HomepageType.PORTFOLIO;","57","import static org.sonarqube.ws.Users.CurrentWsResponse.HomepageType.PROJECT;","64","  private static final String GOVERNANCE_PLUGIN_KEY = \"governance\";","65","","71","  private final PluginRepository pluginRepository;","75","    AvatarResolver avatarResolver, HomepageTypes homepageTypes, PluginRepository pluginRepository, PermissionService permissionService) {","81","    this.pluginRepository = pluginRepository;","106","          .setIsLoggedIn(false)","107","          .setPermissions(Permissions.newBuilder().addAllGlobal(getGlobalPermissions()).build())","108","          .build(),","162","    if (ORGANIZATION.toString().equals(user.getHomepageType())) {","163","      return organizationHomepage(dbSession, user);","164","    }","165","","207","    return !componentOptional.isPresent() || !pluginRepository.hasPlugin(GOVERNANCE_PLUGIN_KEY)","211","  private Optional<CurrentWsResponse.Homepage> organizationHomepage(DbSession dbSession, UserDto user) {","212","    Optional<OrganizationDto> organizationOptional = dbClient.organizationDao().selectByUuid(dbSession, of(user.getHomepageParameter()).orElse(EMPTY));","213","    if (!organizationOptional.isPresent()) {","214","      cleanUserHomepageInDb(dbSession, user);","215","      return empty();","217","","218","    return of(CurrentWsResponse.Homepage.newBuilder()","219","      .setType(CurrentWsResponse.HomepageType.valueOf(user.getHomepageType()))","220","      .setOrganization(organizationOptional.get().getKey())","221","      .build());"]}],"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/__tests__\/__snapshots__\/HeaderMeta-test.tsx.snap":[{"add":["45","exports[`should render correctly for a portfolio 1`] = `","46","<Fragment>","47","  <div","48","    className=\"display-flex-center flex-0 small\"","49","  >","50","    <span","51","      className=\"header-meta-warnings\"","52","    >","53","      <ComponentNavWarnings","54","        warnings={","55","          Array [","56","            \"ERROR_1\",","57","            \"ERROR_2\",","58","          ]","59","        }","60","      \/>","61","    <\/span>","62","    <Connect(HomePageSelect)","63","      className=\"spacer-left\"","64","      currentPage={","65","        Object {","66","          \"component\": \"foo\",","67","          \"type\": \"PORTFOLIO\",","68","        }","69","      }","70","    \/>","71","  <\/div>","72","<\/Fragment>","73","`;","74",""],"delete":[]}]}},"8bb9de894171df87587f76d3b6829514f79ffff1":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/create\/project\/ManualProjectCreate.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/create\/project\/__tests__\/__snapshots__\/ManualProjectCreate-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/create\/components\/ProjectKeyInput.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/create\/components\/__tests__\/ProjectKeyInput-test.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/create\/project\/ManualProjectCreate.tsx":[{"add":["42","  projectName: string;","44","  projectKey: string;","58","      projectKey: '',","59","      projectName: '',","108","        name: (state.projectName || state.projectKey).trim(),","154","    const projectName = event.currentTarget.value;","158","  handleProjectKeyChange = (projectKey: string) => {","187","              value={this.state.projectKey}"],"delete":["42","  projectName?: string;","44","  projectKey?: string;","106","        name: state.projectName || state.projectKey,","152","    const projectName = event.currentTarget.value.trim();","156","  handleProjectKeyChange = (projectKey?: string) => {","184","              initialValue={this.state.projectKey}"]}],"server\/sonar-web\/src\/main\/js\/apps\/create\/project\/__tests__\/__snapshots__\/ManualProjectCreate-test.tsx.snap":[{"add":["33","        value=\"\"","68","            value=\"\""],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/create\/components\/ProjectKeyInput.tsx":[{"add":["28","  value: string;","42","    this.state = { error: undefined, touched: false, validating: false };","48","    if (this.props.value) {","49","      this.validateKey(this.props.value);","61","        if (this.mounted && key === this.props.value) {","74","        if (this.mounted && key === this.props.value) {","82","    this.setState({ touched: true });","84","    this.props.onChange(value);","123","          value={this.props.value}"],"delete":["28","  initialValue?: string;","36","  value: string;","43","    this.state = { error: undefined, touched: false, validating: false, value: '' };","49","    if (this.props.initialValue !== undefined) {","50","      this.setState({ value: this.props.initialValue });","51","      this.validateKey(this.props.initialValue);","63","        if (this.mounted) {","66","            this.props.onChange(key);","73","            this.props.onChange(undefined);","78","        if (this.mounted) {","80","          this.props.onChange(key);","87","    this.setState({ touched: true, value });","97","      this.props.onChange(undefined);","128","          value={this.state.value}"]}],"server\/sonar-web\/src\/main\/js\/apps\/create\/components\/__tests__\/ProjectKeyInput-test.tsx":[{"add":["24","jest.useFakeTimers();","25","","27","  doesComponentExists: jest","28","    .fn()","29","    .mockImplementation(({ component }) => Promise.resolve(component === 'exists'))","33","  const wrapper = shallow(<ProjectKeyInput onChange={jest.fn()} value=\"key\" \/>);","41","  const wrapper = shallow(<ProjectKeyInput onChange={jest.fn()} value=\"\" \/>);","48","  const wrapper = shallow(<ProjectKeyInput onChange={jest.fn()} value=\"KEy-with#speci@l_char\" \/>);","54","  const wrapper = shallow(<ProjectKeyInput onChange={jest.fn()} value=\"exists\" \/>);","56","","57","  jest.runAllTimers();","58","  await new Promise(setImmediate);"],"delete":["22","import { doesComponentExists } from '..\/..\/..\/..\/api\/components';","26","  doesComponentExists: jest.fn().mockResolvedValue(false)","29","beforeEach(() => {","30","  (doesComponentExists as jest.Mock<any>).mockClear();","31","});","32","","34","  const wrapper = shallow(<ProjectKeyInput initialValue=\"key\" onChange={jest.fn()} \/>);","42","  const wrapper = shallow(<ProjectKeyInput onChange={jest.fn()} \/>);","49","  const wrapper = shallow(","50","    <ProjectKeyInput initialValue=\"KEy-with#speci@l_char\" onChange={jest.fn()} \/>","51","  );","57","  (doesComponentExists as jest.Mock<any>).mockResolvedValue(true);","58","  const wrapper = shallow(<ProjectKeyInput initialValue=\"\" onChange={jest.fn()} \/>);"]}]}},"becbd7e7f511acb8b552692b16aa2edd8d785513":{"changes":{"it\/it-tests\/src\/test\/java\/it\/measureHistory\/SincePreviousVersionHistoryTest.java":"MODIFY"},"diff":{"it\/it-tests\/src\/test\/java\/it\/measureHistory\/SincePreviousVersionHistoryTest.java":[{"add":["24","import java.text.SimpleDateFormat;","25","import java.util.Date;","26","import javax.annotation.Nullable;","28","import org.junit.Before;","60","","61","  @Before","62","  public void resetData() throws Exception {","63","    orchestrator.resetData();","64","  }","65","","71","    analyzeProjectWithExclusions(\"0.9\", \"**\/*2.xoo\");","72","    analyzeProject(\"1.0-SNAPSHOT\");","73","    analyzeProject(\"1.0-SNAPSHOT\");","91","  \/**","92","   * SONAR-6356","93","   *\/","94","  @Test","95","  public void since_previous_version_should_use_first_analysis_when_no_version_found() {","96","    analyzeProjectWithDate(\"1.0-SNAPSHOT\", \"2015-10-01\");","97","    \/\/ No difference measure after first analysis","98","    Resource project = getProject(\"files\");","99","    assertThat(project.getPeriod3Date()).isNull();","100","","101","    analyzeProjectWithDate(\"1.0-SNAPSHOT\", \"2015-10-02\");","102","    \/\/ No new version, first analysis is used","103","    project = getProject(\"files\");","104","    assertThat(project.getPeriod3Mode()).isEqualTo(\"previous_version\");","105","    assertThat(toStringDate(project.getPeriod3Date())).isEqualTo(\"2015-10-01\");","106","","107","    analyzeProjectWithDate(\"1.0-SNAPSHOT\", \"2015-10-03\");","108","    \/\/ Still no new version, first analysis is used","109","    project = getProject(\"files\");","110","    assertThat(project.getPeriod3Mode()).isEqualTo(\"previous_version\");","111","    assertThat(toStringDate(project.getPeriod3Date())).isEqualTo(\"2015-10-01\");","112","  }","113","","114","  private static void analyzeProject(String version) {","115","    analyzeProject(version, null, null);","116","  }","117","","118","  private static void analyzeProjectWithExclusions(String version, String exclusions) {","119","    analyzeProject(version, exclusions, null);","120","  }","121","","122","  private static void analyzeProjectWithDate(String version, String date) {","123","    analyzeProject(version, null, date);","124","  }","125","","126","  private static void analyzeProject(String version, @Nullable String exclusions, @Nullable String date) {","132","    if (date != null) {","133","      build.setProperty(\"sonar.projectDate\", date);","134","    }","141","","142","  public static String toStringDate(Date date) {","143","    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");","144","    return sdf.format(date);","145","  }"],"delete":["61","    orchestrator.resetData();","62","    analyzeProject(\"0.9\", \"**\/*2.xoo\");","63","    analyzeProject(\"1.0-SNAPSHOT\", null);","64","    analyzeProject(\"1.0-SNAPSHOT\", null);","82","  private static void analyzeProject(String version, String exclusions) {"]}]}},"776b495d21c108c7125c96aaa15d6b36106a6f39":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/sessions\/components\/LoginForm.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/sessions\/components\/Login.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/sessions\/components\/__tests__\/__snapshots__\/Login-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/sessions\/components\/__tests__\/__snapshots__\/LoginForm-test.tsx.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/sessions\/components\/LoginForm.tsx":[{"add":[],"delete":["21","import GlobalMessagesContainer from '..\/..\/..\/app\/components\/GlobalMessagesContainer';","89","        <GlobalMessagesContainer \/>","90",""]}],"server\/sonar-web\/src\/main\/js\/apps\/sessions\/components\/Login.tsx":[{"add":["22","import GlobalMessagesContainer from '..\/..\/..\/app\/components\/GlobalMessagesContainer';","37","      <GlobalMessagesContainer \/>","38",""],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/sessions\/components\/__tests__\/__snapshots__\/Login-test.tsx.snap":[{"add":["12","  <Connect(GlobalMessages) \/>","31","  <Connect(GlobalMessages) \/>"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/sessions\/components\/__tests__\/__snapshots__\/LoginForm-test.tsx.snap":[{"add":[],"delete":["21","  <Connect(GlobalMessages) \/>","94","  <Connect(GlobalMessages) \/>","167","  <Connect(GlobalMessages) \/>"]}]}},"1da2b46a8136637073020efa4f171b2ee8693191":{"changes":{"server\/sonar-web\/src\/main\/js\/helpers\/__tests__\/markdown-test.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/helpers\/markdown.js":"MODIFY","server\/sonar-docs\/src\/templates\/page.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/helpers\/__tests__\/markdown-test.ts":[{"add":["19","import { getFrontMatter, separateFrontMatter, filterContent } from '..\/markdown';","20","","21","jest.mock('..\/system', () => ({","22","  getInstance: () => 'SonarQube',","23","  isSonarCloud: () => false","24","}));","112","","113","it('replaces {instance}', () => {","114","  expect(","115","    filterContent('This is {instance} content. It replaces all {instance}{instance} messages')","116","  ).toBe('This is SonarQube content. It replaces all SonarQubeSonarQube messages');","117","});"],"delete":["19","import { getFrontMatter, separateFrontMatter } from '..\/markdown';"]}],"server\/sonar-web\/src\/main\/js\/helpers\/markdown.js":[{"add":["75","  const contentWithInstance = content.replace(\/{instance}\/gi, getInstance());"],"delete":["75","  const contentWithInstance = content.replace('{instance}', getInstance());"]}],"server\/sonar-docs\/src\/templates\/page.js":[{"add":["103","  return content.replace(\/{instance}\/gi, 'SonarQube');"],"delete":["103","  return content.replace('{instance}', 'SonarQube');"]}]}},"403901698010a7e3899859dc3eaed32b8e9196e0":{"changes":{"server\/sonar-db-dao\/src\/testFixtures\/java\/org\/sonar\/db\/component\/ComponentTesting.java":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/testFixtures\/java\/org\/sonar\/db\/component\/ComponentTesting.java":[{"add":["179","    return newApplication(organizationDto.getUuid());","180","  }","181","","182","  public static ComponentDto newApplication(String organizationUuid) {","183","    return newView(organizationUuid, Uuids.createFast())"],"delete":["179","    return newView(organizationDto.getUuid(), Uuids.createFast())"]}]}},"5c06629134a4543287b351f46b9382e0e6576e1c":{"changes":{"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v78\/RemoveOrphansFromProjectBranches.java":"MODIFY"},"diff":{"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v78\/RemoveOrphansFromProjectBranches.java":[{"add":["23","import org.sonar.server.platform.db.migration.SupportsBlueGreen;","27","@SupportsBlueGreen"],"delete":[]}]}},"96f2fc0ce3ef6440fda4d34f46b2ebb3b6f0381f":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/__tests__\/__snapshots__\/ActivationFormModal-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/ActivationFormModal.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/__tests__\/__snapshots__\/ActivationFormModal-test.tsx.snap":[{"add":["19","      className=\"modal-body\""],"delete":["19","      className=\"modal-body modal-container\""]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/ActivationFormModal.tsx":[{"add":["19","import * as classNames from 'classnames';","162","          <div className={classNames('modal-body', { 'modal-container': params.length > 0 })}>"],"delete":["161","          <div className=\"modal-body modal-container\">"]}]}},"5d3c140d97e3716cd9e24281983fcaac15006986":{"changes":{"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/component\/ComponentKeyUpdaterDao.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/component\/ComponentKeyUpdaterDaoTest.java":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/component\/ComponentKeyUpdaterDao.java":[{"add":["112","    checkNewNameOfAllModules(modules, stringToReplace, replacementString, mapper);","114","    \/\/ add branches (no check should be done as branch keys cannot be changed by the user)"],"delete":["113","    \/\/ add branches","124","    checkNewNameOfAllModules(modules, stringToReplace, replacementString, mapper);"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/component\/ComponentKeyUpdaterDaoTest.java":[{"add":["164","  public void bulk_updateKey_on_branch_containing_slash() {","165","    ComponentDto project = db.components().insertMainBranch();","166","    ComponentDto branch = db.components().insertProjectBranch(project, b -> b.setKey(\"branch\/with\/slash\"));","167","    String newKey = \"newKey\";","168","","169","    underTest.bulkUpdateKey(dbSession, project.uuid(), project.getKey(), newKey);","170","","171","    assertThat(dbClient.componentDao().selectAllComponentsFromProjectKey(dbSession, newKey)).hasSize(1);","172","    assertThat(dbClient.componentDao().selectAllComponentsFromProjectKey(dbSession, ComponentDto.generateBranchKey(newKey, branch.getBranch()))).hasSize(1);","173","  }","174","","175","  @Test"],"delete":[]}]}},"7666c0e921368a0b560ab289be7ed7af50f41e5e":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/source-viewer\/popups\/coverage-popup.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/source-viewer\/popups\/coverage-popup.js":[{"add":["51","          longName: test.fileName"],"delete":["51","          longName: test.fileLongName"]}]}},"83a1a2b70b11cd2ccee93216851fadc49f09111d":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/forms\/AddGraphMetric.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/forms\/AddGraphMetric.js":[{"add":["62","          ['DATA', 'DISTRIB'].includes(metric.type) ||"],"delete":[]}]}},"c9c9262a4ca404ed4860085d17aaf8ac6b64ca1f":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/__tests__\/__snapshots__\/Summary-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/less\/init\/misc.less":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/App.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/__tests__\/__snapshots__\/Report-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/Activity.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/__tests__\/__snapshots__\/App-test.tsx.snap":"MODIFY","sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/Summary.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/__tests__\/__snapshots__\/Activity-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/Report.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/__tests__\/App-test.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/__tests__\/__snapshots__\/Summary-test.tsx.snap":[{"add":["4","  className=\"huge-spacer-bottom\""],"delete":["4","  className=\"portfolio-section portfolio-section-summary\""]}],"server\/sonar-web\/src\/main\/less\/init\/misc.less":[{"add":["85",".huge-spacer-bottom {","86","  margin-bottom: 40px;","87","}"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/App.tsx":[{"add":["33","import { translate } from '..\/..\/..\/helpers\/l10n';","100","  isEmpty = () => this.state.measures == undefined || this.state.measures['ncloc'] == undefined;","101","","102","  isNotComputed = () =>","103","    this.state.measures && this.state.measures['reliability_rating'] == undefined;","104","","115","  renderEmpty() {","116","    return (","117","      <div className=\"empty-search\">","118","        <h3>{translate('portfolio.empty')}<\/h3>","119","        <p>{translate('portfolio.empty.hint')}<\/p>","120","      <\/div>","121","    );","122","  }","123","","124","  renderWhenNotComputed() {","125","    return (","126","      <div className=\"empty-search\">","127","        <h3>{translate('portfolio.not_computed')}<\/h3>","128","      <\/div>","129","    );","130","  }","131","","132","  renderMain() {","133","    const { component } = this.props;","134","    const { measures, subComponents, totalSubComponents } = this.state;","135","","136","    if (this.isEmpty()) {","137","      return this.renderEmpty();","138","    }","139","","140","    if (this.isNotComputed()) {","141","      return this.renderWhenNotComputed();","142","    }","143","","144","    return (","145","      <div>","146","        <div className=\"portfolio-boxes\">","147","          <ReleasabilityBox component={component.key} measures={measures!} \/>","148","          <ReliabilityBox component={component.key} measures={measures!} \/>","149","          <SecurityBox component={component.key} measures={measures!} \/>","150","          <MaintainabilityBox component={component.key} measures={measures!} \/>","151","        <\/div>","152","","153","        {subComponents != undefined &&","154","        totalSubComponents != undefined && (","155","          <WorstProjects","156","            component={component.key}","157","            subComponents={subComponents}","158","            total={totalSubComponents}","159","          \/>","160","        )}","161","      <\/div>","162","    );","163","  }","164","","167","    const { loading, measures } = this.state;","176","          <div className=\"page-main\">{this.renderMain()}<\/div>","179","            {!this.isEmpty() &&","180","            !this.isNotComputed() && <Summary component={component} measures={measures!} \/>}"],"delete":["111","    const { loading, measures, subComponents, totalSubComponents } = this.state;","120","          <div className=\"page-main\">","121","            {measures != undefined && (","122","              <div className=\"portfolio-boxes\">","123","                <ReleasabilityBox component={component.key} measures={measures} \/>","124","                <ReliabilityBox component={component.key} measures={measures} \/>","125","                <SecurityBox component={component.key} measures={measures} \/>","126","                <MaintainabilityBox component={component.key} measures={measures} \/>","127","              <\/div>","128","            )}","129","","130","            {subComponents != undefined &&","131","            totalSubComponents != undefined && (","132","              <WorstProjects","133","                component={component.key}","134","                subComponents={subComponents}","135","                total={totalSubComponents}","136","              \/>","137","            )}","138","          <\/div>","141","            {measures != undefined && <Summary component={component} measures={measures} \/>}"]}],"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/__tests__\/__snapshots__\/Report-test.tsx.snap":[{"add":["3","<div>","20","<div>"],"delete":["3","<div","4","  className=\"huge-spacer-top\"","5",">","22","<div","23","  className=\"huge-spacer-top\"","24",">"]}],"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/Activity.tsx":[{"add":["99","      <div className=\"huge-spacer-bottom\">"],"delete":["99","      <div className=\"huge-spacer-top\">"]}],"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/__tests__\/__snapshots__\/App-test.tsx.snap":[{"add":["12","      <div>","13","        <div","14","          className=\"portfolio-boxes\"","15","        >","16","          <ReleasabilityBox","17","            component=\"foo\"","18","            measures={","19","              Object {","20","                \"ncloc\": \"173\",","21","                \"reliability_rating\": \"1\",","22","              }","23","            }","24","          \/>","25","          <ReliabilityBox","26","            component=\"foo\"","27","            measures={","28","              Object {","29","                \"ncloc\": \"173\",","30","                \"reliability_rating\": \"1\",","31","              }","32","            }","33","          \/>","34","          <SecurityBox","35","            component=\"foo\"","36","            measures={","37","              Object {","38","                \"ncloc\": \"173\",","39","                \"reliability_rating\": \"1\",","40","              }","41","            }","42","          \/>","43","          <MaintainabilityBox","44","            component=\"foo\"","45","            measures={","46","              Object {","47","                \"ncloc\": \"173\",","48","                \"reliability_rating\": \"1\",","49","              }","50","            }","51","          \/>","52","        <\/div>","53","        <WorstProjects","55","          subComponents={Array []}","56","          total={0}","70","        measures={","71","          Object {","72","            \"ncloc\": \"173\",","73","            \"reliability_rating\": \"1\",","74","          }","75","        }","92","","93","exports[`renders when portfolio is empty 1`] = `","94","<div","95","  className=\"page page-limited\"","96",">","97","  <div","98","    className=\"page-with-sidebar\"","99","  >","100","    <div","101","      className=\"page-main\"","102","    >","103","      <div","104","        className=\"empty-search\"","105","      >","106","        <h3>","107","          portfolio.empty","108","        <\/h3>","109","        <p>","110","          portfolio.empty.hint","111","        <\/p>","112","      <\/div>","113","    <\/div>","114","    <aside","115","      className=\"page-sidebar-fixed\"","116","    >","117","      <Activity","118","        component=\"foo\"","119","      \/>","120","      <Report","121","        component={","122","          Object {","123","            \"key\": \"foo\",","124","            \"name\": \"Foo\",","125","          }","126","        }","127","      \/>","128","    <\/aside>","129","  <\/div>","130","<\/div>","131","`;","132","","133","exports[`renders when portfolio is not computed 1`] = `","134","<div","135","  className=\"page page-limited\"","136",">","137","  <div","138","    className=\"page-with-sidebar\"","139","  >","140","    <div","141","      className=\"page-main\"","142","    >","143","      <div","144","        className=\"empty-search\"","145","      >","146","        <h3>","147","          portfolio.not_computed","148","        <\/h3>","149","      <\/div>","150","    <\/div>","151","    <aside","152","      className=\"page-sidebar-fixed\"","153","    >","154","      <Activity","155","        component=\"foo\"","156","      \/>","157","      <Report","158","        component={","159","          Object {","160","            \"key\": \"foo\",","161","            \"name\": \"Foo\",","162","          }","163","        }","164","      \/>","165","    <\/aside>","166","  <\/div>","167","<\/div>","168","`;"],"delete":["12","      <div","13","        className=\"portfolio-boxes\"","14","      >","15","        <ReleasabilityBox","17","          measures={Object {}}","18","        \/>","19","        <ReliabilityBox","20","          component=\"foo\"","21","          measures={Object {}}","22","        \/>","23","        <SecurityBox","24","          component=\"foo\"","25","          measures={Object {}}","26","        \/>","27","        <MaintainabilityBox","28","          component=\"foo\"","29","          measures={Object {}}","32","      <WorstProjects","33","        component=\"foo\"","34","        subComponents={Array []}","35","        total={0}","36","      \/>","48","        measures={Object {}}"]}],"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["3196","portfolio.empty=This portfolio is empty.","3197","portfolio.empty.hint=This portfolio has no projects, or none of associated projects has lines of code.","3198","portfolio.not_computed=This portfolio is not yet computed."],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/Summary.tsx":[{"add":["37","    <section id=\"portfolio-summary\" className=\"huge-spacer-bottom\">"],"delete":["37","    <section id=\"portfolio-summary\" className=\"portfolio-section portfolio-section-summary\">"]}],"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/__tests__\/__snapshots__\/Activity-test.tsx.snap":[{"add":["4","  className=\"huge-spacer-bottom\""],"delete":["4","  className=\"huge-spacer-top\""]}],"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/Report.tsx":[{"add":["73","        <div>","85","      <div>"],"delete":["73","        <div className=\"huge-spacer-top\">","85","      <div className=\"huge-spacer-top\">"]}],"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/__tests__\/App-test.tsx":[{"add":["51","  wrapper.setState({","52","    loading: false,","53","    measures: { ncloc: '173', reliability_rating: '1' },","54","    subComponents: [],","55","    totalSubComponents: 0","56","  });","57","  expect(wrapper).toMatchSnapshot();","58","});","59","","60","it('renders when portfolio is empty', () => {","61","  const wrapper = shallow(<App component={component} \/>);","62","  wrapper.setState({ loading: false, measures: { reliability_rating: '1' } });","63","  expect(wrapper).toMatchSnapshot();","64","});","65","","66","it('renders when portfolio is not computed', () => {","67","  const wrapper = shallow(<App component={component} \/>);","68","  wrapper.setState({ loading: false, measures: { ncloc: '173' } });"],"delete":["51","  wrapper.setState({ loading: false, measures: {}, subComponents: [], totalSubComponents: 0 });"]}]}},"355b4aaa6a1d177f8c3209e95af203c0b46032fd":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/test\/ws\/ListActionTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/test\/ws\/ListAction.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/test\/ws\/ListActionTest.java":[{"add":["73","  public DbTester db = DbTester.create();","94","  public void list_tests() throws Exception {","116","  public void list_tests_by_test_uuid() throws Exception {","128","  public void list_tests_by_test_file_uuid() throws Exception {","143","  public void list_tests_by_test_file_key() throws Exception {","144","    userSessionRule.addProjectUuidPermissions(CODEVIEWER, project.uuid());","158","  public void list_tests_by_source_file_uuid_and_line_number() throws Exception {","173","  public void list_tests_by_source_file_key_and_line_number() throws Exception {","188","  public void tests_are_paginated() throws Exception {","255","    call(ws.newRequest().setParam(TEST_ID, \"unknown\"));","256","  }","257","","258","  @Test","259","  public void fail_when_test_file_id_is_unknown() throws Exception {","260","    expectedException.expect(NotFoundException.class);","261","    call(ws.newRequest().setParam(TEST_FILE_ID, \"unknown\"));","262","  }","263","","264","  @Test","265","  public void fail_when_test_file_key_is_unknown() throws Exception {","266","    expectedException.expect(NotFoundException.class);","267","    call(ws.newRequest().setParam(TEST_FILE_ID, \"unknown\"));","268","  }","269","","270","  @Test","271","  public void fail_when_source_file_id_is_unknown() throws Exception {","272","    expectedException.expect(NotFoundException.class);","273","    call(ws.newRequest().setParam(SOURCE_FILE_ID, \"unknown\").setParam(SOURCE_FILE_LINE_NUMBER, \"10\"));","274","  }","275","","276","  @Test","277","  public void fail_when_source_file_key_is_unknown() throws Exception {","278","    expectedException.expect(NotFoundException.class);","279","    call(ws.newRequest().setParam(SOURCE_FILE_KEY, \"unknown\").setParam(SOURCE_FILE_LINE_NUMBER, \"10\"));"],"delete":["29","import org.sonar.api.web.UserRole;","74","  public DbTester db = DbTester.create(System2.INSTANCE);","95","  public void return_test() throws Exception {","117","  public void return_tests_based_on_test_uuid() throws Exception {","129","  public void return_tests_based_on_test_file_uuid() throws Exception {","144","  public void return_tests_based_on_test_file_key() throws Exception {","145","    userSessionRule.addComponentPermission(UserRole.CODEVIEWER, project.key(), testFile.key());","159","  public void return_tests_based_on_source_file_uuid_and_line_number() throws Exception {","174","  public void return_tests_based_on_source_file_key_and_line_number() throws Exception {","189","  public void return_pagination() throws Exception {","255","    userSessionRule.addProjectUuidPermissions(USER, project.uuid());","256","    DbFileSources.Test test = newTest(mainFile, 10).build();","257","    insertTests(testFile, test);","258","","260","    expectedException.expectMessage(\"Test with id 'unknown-test-uuid' is not found\");","261","    call(ws.newRequest().setParam(TEST_ID, \"unknown-test-uuid\"));"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/test\/ws\/ListAction.java":[{"add":["230","    userSession.checkComponentUuidPermission(UserRole.CODEVIEWER, testFile.projectUuid());","246","    ComponentDto component = componentFinder.getByUuid(dbSession, componentUuid);"],"delete":["229","    userSession.checkComponentPermission(UserRole.CODEVIEWER, testFileKey);","231","","247","    ComponentDto component = dbClient.componentDao().selectOrFailByUuid(dbSession, componentUuid);"]}]}},"041696c1ddfaa124b3f6ee2680ca8d08d3001e47":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/ComponentSourceSnippetViewer-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/ComponentSourceSnippetViewer.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/ComponentSourceSnippetViewer-test.tsx":[{"add":["170","  wrapper.instance().handleSymbolClick(['foo']);","171","  expect(wrapper.state('highlightedSymbols')).toEqual([]);"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/ComponentSourceSnippetViewer.tsx":[{"add":["292","  handleSymbolClick = (clickedSymbols: string[]) => {","293","    this.setState(({ highlightedSymbols }) => {","294","      const newHighlightedSymbols = clickedSymbols.filter(","295","        symb => !highlightedSymbols.includes(symb)","296","      );","297","      return { highlightedSymbols: newHighlightedSymbols };","298","    });"],"delete":["292","  handleSymbolClick = (highlightedSymbols: string[]) => {","293","    this.setState({ highlightedSymbols });"]}]}},"b1ab22e63bba4a4b7629ea69108d9c57a4e7f5d8":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/events\/PreviewGraph.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/events\/AnalysesList.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/events\/PreviewGraph.js":[{"add":["43","  router: { push: ({ pathname: string, query?: {} }) => void }","135","    this.props.router.push({ pathname: '\/project\/activity', query: { id: this.props.project } });"],"delete":["43","  router: { replace: ({ pathname: string, query?: {} }) => void }","135","    this.props.router.replace({ pathname: '\/project\/activity', query: { id: this.props.project } });"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/events\/AnalysesList.js":[{"add":["34","  router: { push: ({ pathname: string, query?: {} }) => void }"],"delete":["34","  router: { replace: ({ pathname: string, query?: {} }) => void }"]}]}},"1ceb2bbf0a279e63de3fccb3f37e31994958e6c7":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/ClangGCC.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/__tests__\/__snapshots__\/ClangGCC-test.js.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/Msvc.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/__tests__\/__snapshots__\/DotNet-test.js.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/Command.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/__tests__\/__snapshots__\/Msvc-test.js.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/Other.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/DotNet.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/__tests__\/__snapshots__\/Other-test.js.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/styles.css":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/ClangGCC.js":[{"add":["69","      <Command command={command1} isWindows={props.os === 'win'} \/>","70","      <Command command={command2} isWindows={props.os === 'win'} \/>"],"delete":["69","      <Command command={command1} \/>","70","      <Command command={command2} \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/__tests__\/__snapshots__\/ClangGCC-test.js.snap":[{"add":["26","    isWindows={true}","40","    isWindows={true}","77","    isWindows={false}","91","    isWindows={false}","128","    isWindows={false}","142","    isWindows={false}"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/Msvc.js":[{"add":["39","    props.organization && `\/d:sonar.organization=\"${props.organization}\"`,","40","    '\/d:sonar.cfamily.build-wrapper-output=bw-output',","41","    `\/d:sonar.host.url=\"${props.host}\"`,","42","    `\/d:sonar.login=\"${props.token}\"`","45","  const command2 = 'build-wrapper-win-x86-64.exe --out-dir bw-output MsBuild.exe \/t:Rebuild';","47","  const command3 = ['SonarQube.Scanner.MSBuild.exe end', `\/d:sonar.login=\"${props.token}\"`];","63","      <Command command={command1} isWindows={true} \/>","64","      <Command command={command2} isWindows={true} \/>","65","      <Command command={command3} isWindows={true} \/>"],"delete":["39","    props.organization && `\/d:\"sonar.organization=${props.organization}\"`,","40","    '\/d:\"sonar.cfamily.build-wrapper-output=bw-output\"',","41","    `\/d:\"sonar.host.url=${props.host}`,","42","    `\/d:\"sonar.login=${props.token}\"`","45","  const command2 = ['build-wrapper-win-x86-64.exe', '--out-dir bw-output MsBuild.exe \/t:Rebuild'];","47","  const command3 = ['SonarQube.Scanner.MSBuild.exe end', `\/d:\"sonar.login=${props.token}\"`];","63","      <Command command={command1} \/>","64","      <Command command={command2} \/>","65","      <Command command={command3} \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/__tests__\/__snapshots__\/DotNet-test.js.snap":[{"add":["24","        \"\/d:sonar.host.url=\\\\\"host\\\\\"\",","25","        \"\/d:sonar.login=\\\\\"token\\\\\"\",","28","    isWindows={true}","32","    isWindows={true}","38","        \"\/d:sonar.login=\\\\\"token\\\\\"\",","41","    isWindows={true}","75","        \"\/d:sonar.organization=\\\\\"organization\\\\\"\",","76","        \"\/d:sonar.host.url=\\\\\"host\\\\\"\",","77","        \"\/d:sonar.login=\\\\\"token\\\\\"\",","80","    isWindows={true}","84","    isWindows={true}","90","        \"\/d:sonar.login=\\\\\"token\\\\\"\",","93","    isWindows={true}"],"delete":["24","        \"\/d:\\\\\"sonar.host.url=host\",","25","        \"\/d:\\\\\"sonar.login=token\\\\\"\",","36","        \"\/d:\\\\\"sonar.login=token\\\\\"\",","72","        \"\/d:\\\\\"sonar.organization=organization\\\\\"\",","73","        \"\/d:\\\\\"sonar.host.url=host\",","74","        \"\/d:\\\\\"sonar.login=token\\\\\"\",","85","        \"\/d:\\\\\"sonar.login=token\\\\\"\","]}],"server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/Command.js":[{"add":["22","import classNames from 'classnames';","28","  command: string | Array<?string>,","29","  isWindows?: boolean","54","  componentDidUpdate() {","55","    this.clipboard.destroy();","56","    this.clipboard = new Clipboard(this.copyButton);","57","    this.clipboard.on('success', this.showTooltip);","58","  }","59","","79","    const { command, isWindows } = this.props;","81","    const finalCommand = isWindows ? commandArray.join(' ') : commandArray.join(s);","90","      <div","91","        className={classNames('onboarding-command', { 'onboarding-command-windows': isWindows })}>"],"delete":["27","  command: string | Array<?string>","71","    const { command } = this.props;","73","    const finalCommand = commandArray.join(s);","82","      <div className=\"onboarding-command\">"]}],"server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/__tests__\/__snapshots__\/Msvc-test.js.snap":[{"add":["28","        \"\/d:sonar.cfamily.build-wrapper-output=bw-output\",","29","        \"\/d:sonar.host.url=\\\\\"host\\\\\"\",","30","        \"\/d:sonar.login=\\\\\"token\\\\\"\",","33","    isWindows={true}","36","    command=\"build-wrapper-win-x86-64.exe --out-dir bw-output MsBuild.exe \/t:Rebuild\"","37","    isWindows={true}","43","        \"\/d:sonar.login=\\\\\"token\\\\\"\",","46","    isWindows={true}","84","        \"\/d:sonar.organization=\\\\\"organization\\\\\"\",","85","        \"\/d:sonar.cfamily.build-wrapper-output=bw-output\",","86","        \"\/d:sonar.host.url=\\\\\"host\\\\\"\",","87","        \"\/d:sonar.login=\\\\\"token\\\\\"\",","90","    isWindows={true}","93","    command=\"build-wrapper-win-x86-64.exe --out-dir bw-output MsBuild.exe \/t:Rebuild\"","94","    isWindows={true}","100","        \"\/d:sonar.login=\\\\\"token\\\\\"\",","103","    isWindows={true}"],"delete":["28","        \"\/d:\\\\\"sonar.cfamily.build-wrapper-output=bw-output\\\\\"\",","29","        \"\/d:\\\\\"sonar.host.url=host\",","30","        \"\/d:\\\\\"sonar.login=token\\\\\"\",","35","    command={","36","      Array [","37","        \"build-wrapper-win-x86-64.exe\",","38","        \"--out-dir bw-output MsBuild.exe \/t:Rebuild\",","39","      ]","40","    }","46","        \"\/d:\\\\\"sonar.login=token\\\\\"\",","86","        \"\/d:\\\\\"sonar.organization=organization\\\\\"\",","87","        \"\/d:\\\\\"sonar.cfamily.build-wrapper-output=bw-output\\\\\"\",","88","        \"\/d:\\\\\"sonar.host.url=host\",","89","        \"\/d:\\\\\"sonar.login=token\\\\\"\",","94","    command={","95","      Array [","96","        \"build-wrapper-win-x86-64.exe\",","97","        \"--out-dir bw-output MsBuild.exe \/t:Rebuild\",","98","      ]","99","    }","105","        \"\/d:\\\\\"sonar.login=token\\\\\"\","]}],"server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/Other.js":[{"add":["58","      <Command command={command} isWindows={props.os === 'win'} \/>"],"delete":["58","      <Command command={command} \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/DotNet.js":[{"add":["38","    props.organization && `\/d:sonar.organization=\"${props.organization}\"`,","39","    `\/d:sonar.host.url=\"${props.host}\"`,","40","    `\/d:sonar.login=\"${props.token}\"`","45","  const command3 = ['SonarQube.Scanner.MSBuild.exe end', `\/d:sonar.login=\"${props.token}\"`];","60","      <Command command={command1} isWindows={true} \/>","61","      <Command command={command2} isWindows={true} \/>","62","      <Command command={command3} isWindows={true} \/>"],"delete":["38","    props.organization && `\/d:\"sonar.organization=${props.organization}\"`,","39","    `\/d:\"sonar.host.url=${props.host}`,","40","    `\/d:\"sonar.login=${props.token}\"`","45","  const command3 = ['SonarQube.Scanner.MSBuild.exe end', `\/d:\"sonar.login=${props.token}\"`];","60","      <Command command={command1} \/>","61","      <Command command={command2} \/>","62","      <Command command={command3} \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/__tests__\/__snapshots__\/Other-test.js.snap":[{"add":["31","    isWindows={true}","73","    isWindows={false}","115","    isWindows={false}"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/styles.css":[{"add":["64","  user-select: none;","74",".onboarding-command-windows pre {","75","  padding-bottom: 40px;","76","}","77","","78",".onboarding-command-windows button {","79","  top: auto;","80","  top: 40px;","81","}","82",""],"delete":[]}]}},"4e0968c8f845c9a7c0ac766277bcf69377fcb48b":{"changes":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/overview\/index.html.erb":"MODIFY","server\/sonar-server\/src\/main\/resources\/org\/sonar\/server\/dashboard\/widget\/description.html.erb":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/overview\/index.html.erb":[{"add":["14","   root = @resource.root_project","15","   gate_id = Property.value('sonar.qualitygate', root.id, nil)"],"delete":["14","   gate_id = Property.value('sonar.qualitygate', @resource && @resource.id, nil)"]}],"server\/sonar-server\/src\/main\/resources\/org\/sonar\/server\/dashboard\/widget\/description.html.erb":[{"add":["49","       root = @resource.root_project","50","       quality_gate=Property.value('sonar.qualitygate', root.id, nil)"],"delete":["49","       quality_gate=Property.value('sonar.qualitygate', @resource && @resource.id, nil)"]}]}},"34caa99d1d08fc909c24d18d7cc1862021b7e28f":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/FileFacet.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/api\/components.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/DirectoryFacet.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/FileFacet-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/types\/component.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/Sidebar.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/App.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/DirectoryFacet-test.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/FileFacet.tsx":[{"add":["26","import { getFiles } from '..\/..\/..\/api\/components';","28","import { getBranchLikeQuery } from '..\/..\/..\/helpers\/branch-like';","29","import { BranchLike } from '..\/..\/..\/types\/branch-like';","30","import { TreeComponentWithPath } from '..\/..\/..\/types\/component';","34","  branchLike?: BranchLike;","78","    const { branchLike } = this.props;","79","","82","      ...getBranchLikeQuery(branchLike),"],"delete":["26","import { getFiles, TreeComponentWithPath } from '..\/..\/..\/api\/components';"]}],"server\/sonar-web\/src\/main\/js\/api\/components.ts":[{"add":["22","import { ComponentQualifier, TreeComponent, TreeComponentWithPath } from '..\/types\/component';"],"delete":["22","import { ComponentQualifier } from '..\/types\/component';","134","export interface TreeComponent extends T.LightComponent {","135","  id?: string;","136","  name: string;","137","  path?: string;","138","  refId?: string;","139","  refKey?: string;","140","  tags?: string[];","141","  visibility: T.Visibility;","142","}","143","","144","export interface TreeComponentWithPath extends TreeComponent {","145","  path: string;","146","}","147",""]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/DirectoryFacet.tsx":[{"add":["25","import { getDirectories } from '..\/..\/..\/api\/components';","27","import { getBranchLikeQuery } from '..\/..\/..\/helpers\/branch-like';","28","import { BranchLike } from '..\/..\/..\/types\/branch-like';","29","import { TreeComponentWithPath } from '..\/..\/..\/types\/component';","33","  branchLike?: BranchLike;","59","    const { branchLike } = this.props;","60","","63","      ...getBranchLikeQuery(branchLike),"],"delete":["25","import { getDirectories, TreeComponentWithPath } from '..\/..\/..\/api\/components';"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/FileFacet-test.tsx":[{"add":["21","import { getFiles } from '..\/..\/..\/..\/api\/components';","22","import ListStyleFacet from '..\/..\/..\/..\/components\/facet\/ListStyleFacet';","23","import { mockBranch } from '..\/..\/..\/..\/helpers\/mocks\/branch-like';","24","import { mockComponent } from '..\/..\/..\/..\/helpers\/testMocks';","25","import { TreeComponentWithPath } from '..\/..\/..\/..\/types\/component';","29","jest.mock('..\/..\/..\/..\/api\/components', () => ({","30","  getFiles: jest.fn().mockResolvedValue({})","31","}));","32","","33","beforeEach(() => jest.clearAllMocks());","34","","35","const branch = mockBranch();","36","const component = mockComponent();","37","","48","it('should properly search for file', () => {","49","  const wrapper = shallowRender();","50","","51","  const query = 'foo';","52","","53","  wrapper","54","    .find(ListStyleFacet)","55","    .props()","56","    .onSearch(query);","57","","58","  expect(getFiles).toHaveBeenCalledWith({","59","    branch: branch.name,","60","    component: component.key,","61","    q: query,","62","    ps: 30,","63","    p: undefined","64","  });","65","});","66","","91","      branchLike={branch}","92","      componentKey={component.key}"],"delete":["21","import { TreeComponentWithPath } from '..\/..\/..\/..\/api\/components';","59","      componentKey=\"foo\""]}],"server\/sonar-web\/src\/main\/js\/types\/component.ts":[{"add":["44","export interface TreeComponent extends T.LightComponent {","45","  id?: string;","46","  name: string;","47","  path?: string;","48","  refId?: string;","49","  refKey?: string;","50","  tags?: string[];","51","  visibility: T.Visibility;","52","}","53","","54","export interface TreeComponentWithPath extends TreeComponent {","55","  path: string;","56","}","57",""],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/Sidebar.tsx":[{"add":["22","import { BranchLike } from '..\/..\/..\/types\/branch-like';","23","import { ComponentQualifier } from '..\/..\/..\/types\/component';","41","  branchLike?: BranchLike;","63","    const { component, facets, loadingFacets, openFacets, query, branchLike } = this.props;","76","        {component.qualifier !== ComponentQualifier.Directory && (","78","            branchLike={branchLike}","87","          branchLike={branchLike}"],"delete":["60","    const { component, facets, loadingFacets, openFacets, query } = this.props;","73","        {component.qualifier !== 'DIR' && ("]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/App.tsx":[{"add":["930","    const { component, currentUser, userOrganizations, branchLike } = this.props;","955","          branchLike={branchLike}"],"delete":["930","    const { component, currentUser, userOrganizations } = this.props;"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/DirectoryFacet-test.tsx":[{"add":["21","import { getDirectories } from '..\/..\/..\/..\/api\/components';","22","import ListStyleFacet from '..\/..\/..\/..\/components\/facet\/ListStyleFacet';","23","import { mockBranch } from '..\/..\/..\/..\/helpers\/mocks\/branch-like';","24","import { mockComponent } from '..\/..\/..\/..\/helpers\/testMocks';","25","import { TreeComponentWithPath } from '..\/..\/..\/..\/types\/component';","29","jest.mock('..\/..\/..\/..\/api\/components', () => ({","30","  getDirectories: jest.fn().mockResolvedValue({})","31","}));","32","","33","beforeEach(() => jest.clearAllMocks());","34","","35","const branch = mockBranch();","36","const component = mockComponent();","37","","48","it('should properly search for directory', () => {","49","  const wrapper = shallowRender();","50","","51","  const query = 'foo';","52","","53","  wrapper","54","    .find(ListStyleFacet)","55","    .props()","56","    .onSearch(query);","57","","58","  expect(getDirectories).toHaveBeenCalledWith({","59","    branch: branch.name,","60","    component: component.key,","61","    q: query,","62","    ps: 30,","63","    p: undefined","64","  });","65","});","66","","89","      branchLike={branch}","90","      componentKey={component.key}"],"delete":["21","import { TreeComponentWithPath } from '..\/..\/..\/..\/api\/components';","57","      componentKey=\"foo\""]}]}},"ece4346b3e8165d48ea7a064902bc01df2081c24":{"changes":{"sonar-db\/src\/main\/java\/org\/sonar\/db\/source\/FileSourceDto.java":"MODIFY","sonar-db\/src\/test\/java\/org\/sonar\/db\/version\/v51\/FeedFileSourcesBinaryDataTest.java":"MODIFY","sonar-db\/src\/test\/java\/org\/sonar\/db\/source\/FileSourceDtoTest.java":"MODIFY"},"diff":{"sonar-db\/src\/main\/java\/org\/sonar\/db\/source\/FileSourceDto.java":[{"add":["21","import com.google.protobuf.CodedInputStream;","22","import com.google.protobuf.InvalidProtocolBufferException;","40","  private static final String SIZE_LIMIT_EXCEEDED_EXCEPTION_MESSAGE = \"Protocol message was too large.  May be malicious.  \" +","41","    \"Use CodedInputStream.setSizeLimit() to increase the size limit.\";","42","","97","      return decodeRegularSourceData(binaryData);","105","  private static DbFileSources.Data decodeRegularSourceData(byte[] binaryData) throws IOException {","106","    try (LZ4BlockInputStream lz4Input = new LZ4BlockInputStream(new ByteArrayInputStream(binaryData))) {","107","      return DbFileSources.Data.parseFrom(lz4Input);","108","    } catch (InvalidProtocolBufferException e) {","109","      if (SIZE_LIMIT_EXCEEDED_EXCEPTION_MESSAGE.equals(e.getMessage())) {","110","        return decodeHugeSourceData(binaryData);","111","      }","112","      throw e;","116","  private static DbFileSources.Data decodeHugeSourceData(byte[] binaryData) throws IOException {","117","    try (LZ4BlockInputStream lz4Input = new LZ4BlockInputStream(new ByteArrayInputStream(binaryData))) {","118","      CodedInputStream input = CodedInputStream.newInstance(lz4Input);","119","      input.setSizeLimit(Integer.MAX_VALUE);","120","      return DbFileSources.Data.parseFrom(input);"],"delete":["92","      return decodeSourceDataImpl(new ByteArrayInputStream(binaryData));","100","  \/**","101","   * Decompress and deserialize content of column FILE_SOURCES.BINARY_DATA.","102","   * The parameter \"input\" is always closed by this method.","103","   *\/","104","  public static DbFileSources.Data decodeSourceData(InputStream binaryInput) {","105","    try {","106","      return decodeSourceDataImpl(binaryInput);","107","    } catch (IOException e) {","108","      throw new IllegalStateException(\"Fail to decompress and deserialize source data\", e);","112","  private static DbFileSources.Data decodeSourceDataImpl(InputStream binaryInput) throws IOException {","113","    try (LZ4BlockInputStream lz4Input = new LZ4BlockInputStream(binaryInput)) {","114","      return DbFileSources.Data.parseFrom(lz4Input);"]}],"sonar-db\/src\/test\/java\/org\/sonar\/db\/version\/v51\/FeedFileSourcesBinaryDataTest.java":[{"add":["88","      return new FileSourceDto().decodeSourceData(rs.getBytes(1));"],"delete":["21","import java.io.InputStream;","89","      InputStream data = rs.getBinaryStream(1);","90","      return FileSourceDto.decodeSourceData(data);"]}],"sonar-db\/src\/test\/java\/org\/sonar\/db\/source\/FileSourceDtoTest.java":[{"add":["31","  private static final String LOREM_IPSUM = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam ac magna libero. \" +","32","    \"Integer eu quam vulputate, interdum ante quis, sodales mauris. Nam mollis ornare dolor at maximus. Cras pharetra aliquam fringilla. \" +","33","    \"Nunc hendrerit, elit eu mattis fermentum, ligula metus malesuada nunc, non fermentum augue tellus eu odio. Praesent ut vestibulum nibh. \" +","34","    \"Curabitur sit amet dignissim magna, at efficitur dolor. Ut non felis aliquam justo euismod gravida. Morbi eleifend vitae ante eu pulvinar. \" +","35","    \"Aliquam rhoncus magna quis lorem posuere semper.\";","36","","62","      .setBinaryData(new byte[] {1, 2, 3, 4, 5})","63","      .setId(id)","64","      .setFileUuid(fileUuid)","65","      .setProjectUuid(projectUuid);","72","","73","  @Test","74","  public void getSourceData_reads_Data_object_bigger_than_default_size_limit() {","75","    DbFileSources.Data build = createOver64MBDataStructure();","76","    byte[] bytes = FileSourceDto.encodeSourceData(build);","77","","78","    DbFileSources.Data data = new FileSourceDto().decodeSourceData(bytes);","79","    assertThat(data.getLinesCount()).isEqualTo(build.getLinesCount());","80","  }","81","","82","  private static DbFileSources.Data createOver64MBDataStructure() {","83","    DbFileSources.Data.Builder dataBuilder = DbFileSources.Data.newBuilder();","84","    DbFileSources.Line.Builder lineBuilder = DbFileSources.Line.newBuilder();","85","    for (int i = 0; i < 199999; i++) {","86","      dataBuilder.addLines(","87","        lineBuilder.setSource(LOREM_IPSUM)","88","          .setLine(i)","89","          .build());","90","    }","91","    return dataBuilder.build();","92","  }"],"delete":["56","        .setBinaryData(new byte[]{1, 2, 3, 4, 5})","57","        .setId(id)","58","        .setFileUuid(fileUuid)","59","        .setProjectUuid(projectUuid);"]}]}},"983beea417c9ffb0561857d0b7e69a97dfadc91d":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/db\/EmbeddedDatabase.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/db\/EmbeddedDatabaseTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/db\/EmbeddedDatabase.java":[{"add":["21","import java.io.File;","22","import java.sql.DriverManager;","23","import java.sql.SQLException;","33","import static com.google.common.base.Preconditions.checkArgument;","34","import static java.lang.String.format;","35","import static org.apache.commons.lang.StringUtils.isNotEmpty;","36","import static org.sonar.api.database.DatabaseProperties.PROP_EMBEDDED_PORT;","37","import static org.sonar.api.database.DatabaseProperties.PROP_PASSWORD;","38","import static org.sonar.api.database.DatabaseProperties.PROP_PASSWORD_DEFAULT_VALUE;","39","import static org.sonar.api.database.DatabaseProperties.PROP_URL;","40","import static org.sonar.api.database.DatabaseProperties.PROP_USER;","41","import static org.sonar.api.database.DatabaseProperties.PROP_USER_DEFAULT_VALUE;","42","import static org.sonar.process.ProcessProperties.PATH_DATA;","55","    File dbHome = new File(getRequiredSetting(PATH_DATA));","60","    startServer(dbHome);","61","  }","63","  private void startServer(File dbHome) {","64","    String url = getRequiredSetting(PROP_URL);","65","    String port = getRequiredSetting(PROP_EMBEDDED_PORT);","66","    String user = getSetting(PROP_USER, PROP_USER_DEFAULT_VALUE);","67","    String password = getSetting(PROP_PASSWORD, PROP_PASSWORD_DEFAULT_VALUE);","94","  private String getRequiredSetting(String property) {","95","    String value = settings.getString(property);","96","    checkArgument(isNotEmpty(value), \"Missing property %s\", property);","97","    return value;","104","  private static void createDatabase(File dbHome, String user, String password) throws SQLException {","105","    String url = format(\"jdbc:h2:%s\/sonar;USER=%s;PASSWORD=%s\", dbHome.getAbsolutePath(), user, password);"],"delete":["21","import com.google.common.annotations.VisibleForTesting;","27","import org.sonar.api.database.DatabaseProperties;","31","import org.sonar.process.ProcessProperties;","33","import java.io.File;","34","import java.sql.DriverManager;","35","import java.sql.SQLException;","48","    File dbHome = getDataDirectory(settings);","53","    String port = getSetting(DatabaseProperties.PROP_EMBEDDED_PORT, DatabaseProperties.PROP_EMBEDDED_PORT_DEFAULT_VALUE);","54","    String user = getSetting(DatabaseProperties.PROP_USER, DatabaseProperties.PROP_USER_DEFAULT_VALUE);","55","    String password = getSetting(DatabaseProperties.PROP_PASSWORD, DatabaseProperties.PROP_PASSWORD_DEFAULT_VALUE);","56","    String url = getSetting(DatabaseProperties.PROP_URL, DatabaseProperties.PROP_USER_DEFAULT_VALUE);","84","  @VisibleForTesting","85","  File getDataDirectory(Settings settings) {","86","    return new File(settings.getString(ProcessProperties.PATH_DATA));","93","  private void createDatabase(File dbHome, String user, String password) throws SQLException {","94","    String url = String.format(\"jdbc:h2:%s\/sonar;USER=%s;PASSWORD=%s\", dbHome.getAbsolutePath(), user, password);"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/db\/EmbeddedDatabaseTest.java":[{"add":["21","import java.io.IOException;","22","import java.sql.DriverManager;","24","import org.junit.After;","28","import org.junit.rules.TemporaryFolder;","29","import org.junit.rules.Timeout;","31","import org.sonar.api.utils.log.LogTester;","35","import static org.sonar.api.database.DatabaseProperties.PROP_EMBEDDED_PORT;","36","import static org.sonar.api.database.DatabaseProperties.PROP_PASSWORD;","37","import static org.sonar.api.database.DatabaseProperties.PROP_PASSWORD_DEFAULT_VALUE;","38","import static org.sonar.api.database.DatabaseProperties.PROP_URL;","39","import static org.sonar.api.database.DatabaseProperties.PROP_USER;","40","import static org.sonar.api.database.DatabaseProperties.PROP_USER_DEFAULT_VALUE;","41","import static org.sonar.process.ProcessProperties.PATH_DATA;","46","  public ExpectedException expectedException = ExpectedException.none();","47","  @Rule","48","  public LogTester logTester = new LogTester();","49","  @Rule","50","  public TemporaryFolder temporaryFolder = new TemporaryFolder();","51","  @Rule","52","  public Timeout timeout = Timeout.seconds(10);","54","  private EmbeddedDatabase underTest;","55","","56","  @After","57","  public void tearDown() throws Exception {","58","    if (underTest != null) {","59","      underTest.stop();","60","    }","61","  }","62","","63","  @Test","64","  public void start_fails_with_IAE_if_property_Data_Path_is_not_set() {","65","    EmbeddedDatabase underTest = new EmbeddedDatabase(new Settings());","66","","67","    expectedException.expect(IllegalArgumentException.class);","68","    expectedException.expectMessage(\"Missing property \" + PATH_DATA);","69","","70","    underTest.start();","71","  }","72","","73","  @Test","74","  public void start_fails_with_IAE_if_property_Data_Path_is_empty() {","75","    EmbeddedDatabase underTest = new EmbeddedDatabase(new Settings()","76","      .setProperty(PATH_DATA, \"\"));","77","","78","    expectedException.expect(IllegalArgumentException.class);","79","    expectedException.expectMessage(\"Missing property \" + PATH_DATA);","80","","81","    underTest.start();","82","  }","83","","84","  @Test","85","  public void start_fails_with_IAE_if_JDBC_URL_settings_is_not_set() throws IOException {","86","    EmbeddedDatabase underTest = new EmbeddedDatabase(new Settings()","87","      .setProperty(PATH_DATA, temporaryFolder.newFolder().getAbsolutePath()));","88","","89","    expectedException.expect(IllegalArgumentException.class);","90","    expectedException.expectMessage(\"Missing property \" + PROP_URL);","91","","92","    underTest.start();","93","  }","94","","95","  @Test","96","  public void start_fails_with_IAE_if_embedded_port_settings_is_not_set() throws IOException {","97","    EmbeddedDatabase underTest = new EmbeddedDatabase(new Settings()","98","      .setProperty(PATH_DATA, temporaryFolder.newFolder().getAbsolutePath())","99","      .setProperty(PROP_URL, \"jdbc url\"));","100","","101","    expectedException.expect(IllegalArgumentException.class);","102","    expectedException.expectMessage(\"Missing property \" + PROP_EMBEDDED_PORT);","103","","104","    underTest.start();","105","  }","106","","107","  @Test","108","  public void start_ignores_URL_to_create_database_and_uses_default_username_and_password_when_then_are_not_set() throws IOException {","110","    underTest = new EmbeddedDatabase(new Settings()","111","      .setProperty(PATH_DATA, temporaryFolder.newFolder().getAbsolutePath())","112","      .setProperty(PROP_URL, \"jdbc url\")","113","      .setProperty(PROP_EMBEDDED_PORT, \"\" + port));","115","    underTest.start();","117","    checkDbIsUp(port, PROP_USER_DEFAULT_VALUE, PROP_PASSWORD_DEFAULT_VALUE);","118","  }","119","","120","  @Test","121","  public void start_creates_db_with_specified_user_and_password() throws IOException {","122","    int port = NetworkUtils.freePort();","123","    underTest = new EmbeddedDatabase(new Settings()","124","      .setProperty(PATH_DATA, temporaryFolder.newFolder().getAbsolutePath())","125","      .setProperty(PROP_URL, \"jdbc url\")","126","      .setProperty(PROP_EMBEDDED_PORT, \"\" + port)","127","      .setProperty(PROP_USER, \"foo\")","128","      .setProperty(PROP_PASSWORD, \"bar\"));","129","","130","    underTest.start();","131","","132","    checkDbIsUp(port, \"foo\", \"bar\");","133","  }","134","","135","  @Test","136","  public void start_supports_in_memory_H2_JDBC_URL() throws IOException {","137","    int port = NetworkUtils.freePort();","138","    underTest = new EmbeddedDatabase(new Settings()","139","      .setProperty(PATH_DATA, temporaryFolder.newFolder().getAbsolutePath())","140","      .setProperty(PROP_URL, \"jdbc:h2:mem:sonar\")","141","      .setProperty(PROP_EMBEDDED_PORT, \"\" + port)","142","      .setProperty(PROP_USER, \"foo\")","143","      .setProperty(PROP_PASSWORD, \"bar\"));","144","","145","    underTest.start();","146","","147","    checkDbIsUp(port, \"foo\", \"bar\");","148","  }","149","","150","  private void checkDbIsUp(int port, String user, String password) {","152","      String driverUrl = String.format(\"jdbc:h2:tcp:\/\/localhost:%d\/sonar;USER=%s;PASSWORD=%s\", port, user, password);"],"delete":["26","import org.sonar.api.database.DatabaseProperties;","28","import org.sonar.process.ProcessProperties;","29","","30","import java.io.File;","31","import java.sql.DriverManager;","34","import static org.assertj.core.api.Assertions.assertThat;","39","  public ExpectedException throwable = ExpectedException.none();","41","  @Test(timeout = 10000)","42","  public void should_start_and_stop() {","45","    EmbeddedDatabase database = new EmbeddedDatabase(testSettings(port));","46","    database.start();","49","      String driverUrl = String.format(\"jdbc:h2:tcp:\/\/localhost:%d\/sonar;USER=login;PASSWORD=pwd\", port);","55","","56","    database.stop();","59","  @Test","60","  public void should_return_embedded_data_directory() {","61","    Settings settings = testSettings(0);","62","    EmbeddedDatabase database = new EmbeddedDatabase(settings);","63","","64","    File dataDirectory = database.getDataDirectory(settings);","65","    assertThat(dataDirectory).isNotNull();","66","    assertThat(dataDirectory.getPath()).endsWith(\"testDB\");","67","  }","68","","69","  static Settings testSettings(int port) {","70","    return new Settings()","71","      .setProperty(DatabaseProperties.PROP_USER, \"login\")","72","      .setProperty(DatabaseProperties.PROP_PASSWORD, \"pwd\")","73","      .setProperty(DatabaseProperties.PROP_EMBEDDED_PORT, \"\" + port)","74","      .setProperty(ProcessProperties.PATH_DATA, \".\/target\/testDB\");","75","  }"]}]}},"097994df9b06457852baa0eec5313f363eed9cd7":{"changes":{"server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/test\/index\/TestIndexerTest\/P3_F1_long_name.json":"ADD","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/test\/index\/TestIndexerTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/test\/index\/TestIndexDefinition.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/test\/index\/TestIndexerTest\/P3_F1_long_name.json":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/test\/index\/TestIndexerTest.java":[{"add":["138","  @Test","139","  public void long_name_can_be_indexed() throws Exception {","140","    indexTest(\"P3\", \"F1\", \"long_name\", \"U111\");","141","","142","    assertThat(countDocuments()).isEqualTo(1);","143","","144","    List<SearchHit> hits = getDocuments();","145","    Map<String, Object> document = hits.get(0).getSource();","146","    assertThat(hits).hasSize(1);","147","    assertThat(document.get(FIELD_NAME).toString()).hasSize(50000);","148","    assertThat(document.get(FIELD_FILE_UUID)).isEqualTo(\"F1\");","149","  }","150",""],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/test\/index\/TestIndexDefinition.java":[{"add":["68","    mapping.keywordFieldBuilder(FIELD_NAME).disableNorms().disableSearch().disableSortingAndAggregating().build();"],"delete":["68","    mapping.keywordFieldBuilder(FIELD_NAME).disableNorms().disableSearch().build();"]}]}},"01c3e23df232c1006344f4957bf35af92b17a985":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/BuildWrapper.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/__tests__\/__snapshots__\/BuildWrapper-test.js.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/BuildWrapper.js":[{"add":["31","  win: 'build-wrapper-win-x86.zip',","32","  linux: 'build-wrapper-linux-x86.zip',"],"delete":["31","  linux: 'build-wrapper-win-x86.zip',","32","  win: 'build-wrapper-linux-x86.zip',"]}],"server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/__tests__\/__snapshots__\/BuildWrapper-test.js.snap":[{"add":["20","      download=\"build-wrapper-win-x86.zip\"","21","      href=\"\/static\/cpp\/build-wrapper-win-x86.zip\"","48","      download=\"build-wrapper-linux-x86.zip\"","49","      href=\"\/static\/cpp\/build-wrapper-linux-x86.zip\""],"delete":["20","      download=\"build-wrapper-linux-x86.zip\"","21","      href=\"\/static\/cpp\/build-wrapper-linux-x86.zip\"","48","      download=\"build-wrapper-win-x86.zip\"","49","      href=\"\/static\/cpp\/build-wrapper-win-x86.zip\""]}]}},"1002e68f1230b1f024cd2916afd7cf6efcac05ce":{"changes":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/ci\/vendors\/Jenkins.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/ci\/vendors\/JenkinsTest.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/ci\/vendors\/Jenkins.java":[{"add":["44","    \/\/ JENKINS_URL is not enough to identify Jenkins. It can be easily used on a non-Jenkins job.","45","    return isNotBlank(system.envVariable(\"JENKINS_URL\")) && isNotBlank(system.envVariable(\"EXECUTOR_NUMBER\"));"],"delete":["44","    return isNotBlank(system.envVariable(\"JENKINS_URL\"));"]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/ci\/vendors\/JenkinsTest.java":[{"add":["42","    setEnvVariable(\"EXECUTOR_NUMBER\", \"12\");","46","    setEnvVariable(\"EXECUTOR_NUMBER\", \"12\");","47","    assertThat(underTest.isDetected()).isFalse();","48","","49","    setEnvVariable(\"JENKINS_URL\", \"http:\/\/foo\");","50","    setEnvVariable(\"EXECUTOR_NUMBER\", null);"],"delete":[]}]}},"f76f82c6ef66e60e4986521d141514763e5c405a":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/util\/RubyUtilsTest.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/bootstrap\/GlobalContainer.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/server\/ws\/Request.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/utils\/DateUtils.java":"MODIFY","sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/utils\/DateUtilsTest.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/repository\/QualityProfileProviderTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/platformlevel\/PlatformLevel1.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionComponentsTest.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/ProjectAnalysisInfo.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/IssueQueryFactoryTest.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/ProjectAnalysisInfoTest.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/utils\/System2.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/rule\/ActiveRulesProviderTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/IssueQueryFactory.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionTest.java":[{"add":["21","import java.time.Clock;","98","  private IssueQueryFactory issueQueryFactory = new IssueQueryFactory(dbClient, Clock.systemUTC(), userSessionRule);","101","  private SearchResponseLoader searchResponseLoader = new SearchResponseLoader(userSessionRule, dbClient, new ActionFinder(userSessionRule),","102","    new TransitionService(userSessionRule, issueWorkflow));"],"delete":["97","  private IssueQueryFactory issueQueryFactory = new IssueQueryFactory(dbClient, System2.INSTANCE, userSessionRule);","100","  private SearchResponseLoader searchResponseLoader = new SearchResponseLoader(userSessionRule, dbClient, new ActionFinder(userSessionRule), new TransitionService(userSessionRule, issueWorkflow));"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/util\/RubyUtilsTest.java":[{"add":["133","    throwable.expect(RuntimeException.class);"],"delete":["26","import org.sonar.api.utils.SonarException;","134","    throwable.expect(SonarException.class);"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/bootstrap\/GlobalContainer.java":[{"add":["21","import java.time.Clock;","97","      Clock.systemDefaultZone(),"],"delete":[]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/server\/ws\/Request.java":[{"add":["247","    } catch (RuntimeException notDateException) {"],"delete":["34","import org.sonar.api.utils.SonarException;","248","    } catch (SonarException notDateException) {"]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/utils\/DateUtils.java":[{"add":["21","import java.time.Instant;","22","import java.time.LocalDate;","23","import java.time.OffsetDateTime;","24","import java.time.ZoneId;","25","import java.time.format.DateTimeFormatter;","26","import java.time.format.DateTimeParseException;","27","import java.time.temporal.ChronoUnit;","44","  private static final DateTimeFormatter DATETIME_FORMATTER = DateTimeFormatter.ofPattern(DATETIME_FORMAT);","49","  \/**","50","   * Warning: relies on default timezone!","51","   *\/","53","    return d.toInstant().atZone(ZoneId.systemDefault()).toLocalDate().toString();","56","  \/**","57","   * Warning: relies on default timezone!","58","   *\/","60","    return formatDateTime(OffsetDateTime.ofInstant(d.toInstant(), ZoneId.systemDefault()));","63","  \/**","64","   * Warning: relies on default timezone!","65","   *\/","67","    return formatDateTime(OffsetDateTime.ofInstant(Instant.ofEpochMilli(ms), ZoneId.systemDefault()));","70","  \/**","71","   * @since 6.6","72","   *\/","73","  public static String formatDateTime(OffsetDateTime dt) {","74","    return DATETIME_FORMATTER.format(dt);","75","  }","76","","77","  \/**","78","   * Warning: relies on default timezone!","79","   *\/","81","    return date == null ? \"\" : formatDateTime(date);","95","   * Return a date at the start of day.","100","    return Date.from(parseLocalDate(s).atStartOfDay(ZoneId.systemDefault()).toInstant());","125","   * @since 6.6","126","   *\/","127","  public static LocalDate parseLocalDate(String s) {","128","    try {","129","      return LocalDate.parse(s);","130","    } catch (DateTimeParseException e) {","131","      throw MessageException.of(\"The date '\" + s + \"' does not respect format '\" + DATE_FORMAT + \"'\", e);","132","    }","133","  }","134","","135","  \/**","136","   * Parse format {@link #DATE_FORMAT}. This method never throws exception.","137","   *","138","   * @param s any string","139","   * @return the date, {@code null} if parsing error or if parameter is {@code null}","140","   * @since 6.6","141","   *\/","142","  @CheckForNull","143","  public static LocalDate parseLocalDateQuietly(@Nullable String s) {","144","    LocalDate date = null;","145","    if (s != null) {","146","      try {","147","        date = parseLocalDate(s);","148","      } catch (RuntimeException e) {","149","        \/\/ ignore","150","      }","151","","152","    }","153","    return date;","154","  }","155","","156","  \/**","161","    return Date.from(parseOffsetDateTime(s).toInstant());","162","  }","163","","164","  \/**","165","   * @param s string in format {@link #DATETIME_FORMAT}","166","   * @throws SonarException when string cannot be parsed","167","   * @since 6.6","168","   *\/","169","  public static OffsetDateTime parseOffsetDateTime(String s) {","170","    try {","171","      return OffsetDateTime.parse(s, DATETIME_FORMATTER);","172","    } catch (DateTimeParseException e) {","173","      throw MessageException.of(\"The date '\" + s + \"' does not respect format '\" + DATETIME_FORMAT + \"'\", e);","198","   * Parse format {@link #DATETIME_FORMAT}. This method never throws exception.","199","   *","200","   * @param s any string","201","   * @return the datetime, {@code null} if parsing error or if parameter is {@code null}","202","   * @since 6.6","203","   *\/","204","  @CheckForNull","205","  public static OffsetDateTime parseOffsetDateTimeQuietly(@Nullable String s) {","206","    OffsetDateTime datetime = null;","207","    if (s != null) {","208","      try {","209","        datetime = parseOffsetDateTime(s);","210","      } catch (RuntimeException e) {","211","        \/\/ ignore","212","      }","213","","214","    }","215","    return datetime;","216","  }","217","","218","  \/**","219","   * Warning: may rely on default timezone!","230","    OffsetDateTime odt = parseOffsetDateTimeQuietly(stringDate);","231","    if (odt != null) {","232","      return Date.from(odt.toInstant());","235","    LocalDate ld = parseLocalDateQuietly(stringDate);","236","    checkArgument(ld != null, \"Date '%s' cannot be parsed as either a date or date+time\", stringDate);","238","    return Date.from(ld.atStartOfDay(ZoneId.systemDefault()).toInstant());","242","   * Warning: may rely on default timezone!","252","   * So '2016-09-01' would return a date equivalent to '2016-09-02T00:00:00+0000' in GMT (Warning: relies on default timezone!)","284","    return Date.from(date.toInstant().plus(numberOfDays, ChronoUnit.DAYS));"],"delete":["21","import java.io.NotSerializableException;","22","import java.io.ObjectInputStream;","23","import java.io.ObjectOutputStream;","24","import java.lang.ref.Reference;","25","import java.lang.ref.SoftReference;","26","import java.text.DateFormat;","27","import java.text.FieldPosition;","28","import java.text.ParsePosition;","29","import java.text.SimpleDateFormat;","46","  private static final ThreadSafeDateFormat THREAD_SAFE_DATE_FORMAT = new ThreadSafeDateFormat(DATE_FORMAT);","47","  private static final ThreadSafeDateFormat THREAD_SAFE_DATETIME_FORMAT = new ThreadSafeDateFormat(DATETIME_FORMAT);","53","    return THREAD_SAFE_DATE_FORMAT.format(d);","57","    return THREAD_SAFE_DATETIME_FORMAT.format(d);","61","    return THREAD_SAFE_DATETIME_FORMAT.format(new Date(ms));","65","    return date == null ? \"\" : THREAD_SAFE_DATETIME_FORMAT.format(date);","83","    ParsePosition pos = new ParsePosition(0);","84","    Date result = THREAD_SAFE_DATE_FORMAT.parse(s, pos);","85","    if (pos.getIndex() != s.length()) {","86","      throw new SonarException(\"The date '\" + s + \"' does not respect format '\" + DATE_FORMAT + \"'\");","87","    }","88","    return result;","116","","118","    ParsePosition pos = new ParsePosition(0);","119","    Date result = THREAD_SAFE_DATETIME_FORMAT.parse(s, pos);","120","    if (pos.getIndex() != s.length()) {","121","      throw new SonarException(\"The date '\" + s + \"' does not respect format '\" + DATETIME_FORMAT + \"'\");","123","    return result;","157","    Date date = parseDateTimeQuietly(stringDate);","158","    if (date != null) {","159","      return date;","162","    date = parseDateQuietly(stringDate);","163","    checkArgument(date != null, \"Date '%s' cannot be parsed as either a date or date+time\", stringDate);","165","    return date;","178","   * So '2016-09-01' would return a date equivalent to '2016-09-02T00:00:00+0000' in GMT","210","    return org.apache.commons.lang.time.DateUtils.addDays(date, numberOfDays);","213","  static class ThreadSafeDateFormat extends DateFormat {","214","    private final String format;","215","    private final ThreadLocal<Reference<DateFormat>> cache = new ThreadLocal<Reference<DateFormat>>() {","216","      @Override","217","      public Reference<DateFormat> get() {","218","        Reference<DateFormat> softRef = super.get();","219","        if (softRef == null || softRef.get() == null) {","220","          SimpleDateFormat sdf = new SimpleDateFormat(format);","221","          sdf.setLenient(false);","222","          softRef = new SoftReference<>(sdf);","223","          super.set(softRef);","224","        }","225","        return softRef;","226","      }","227","    };","228","","229","    ThreadSafeDateFormat(String format) {","230","      this.format = format;","231","    }","232","","233","    private DateFormat getDateFormat() {","234","      return cache.get().get();","235","    }","236","","237","    @Override","238","    public StringBuffer format(Date date, StringBuffer toAppendTo, FieldPosition fieldPosition) {","239","      return getDateFormat().format(date, toAppendTo, fieldPosition);","240","    }","241","","242","    @Override","243","    public Date parse(String source, ParsePosition pos) {","244","      return getDateFormat().parse(source, pos);","245","    }","246","","247","    private void readObject(ObjectInputStream ois) throws NotSerializableException {","248","      throw new NotSerializableException();","249","    }","250","","251","    private void writeObject(ObjectOutputStream ois) throws NotSerializableException {","252","      throw new NotSerializableException();","253","    }","254","  }"]}],"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/utils\/DateUtilsTest.java":[{"add":["51","    expectedException.expect(MessageException.class);","57","    expectedException.expect(MessageException.class);","70","    expectedException.expect(MessageException.class);","82","    expectedException.expect(MessageException.class);","88","    expectedException.expect(MessageException.class);","102","    assertThat(DateUtils.formatDate(new Date())).hasSize(10);"],"delete":["24","import java.util.ArrayList;","26","import java.util.List;","33","import static org.assertj.core.api.Fail.fail;","54","    expectedException.expect(SonarException.class);","60","    expectedException.expect(SonarException.class);","73","    expectedException.expect(SonarException.class);","85","    expectedException.expect(SonarException.class);","91","    expectedException.expect(SonarException.class);","105","    assertThat(DateUtils.formatDate(new Date()).length()).isEqualTo(10);","196","  \/**","197","   * Cordially copied from XStream unit test","198","   * See http:\/\/koders.com\/java\/fid8A231D75F2C6E6909FB26BCA11C12D08AD05FB50.aspx?s=ThreadSafeDateFormatTest","199","   *\/","200","  @Test","201","  public void shouldBeThreadSafe() throws Exception {","202","    final DateUtils.ThreadSafeDateFormat format = new DateUtils.ThreadSafeDateFormat(\"yyyy-MM-dd'T'HH:mm:ss,S z\");","203","    final Date now = new Date();","204","    final List<Throwable> throwables = new ArrayList<>();","205","","206","    final ThreadGroup tg = new ThreadGroup(\"shouldBeThreadSafe\") {","207","      @Override","208","      public void uncaughtException(Thread t, Throwable e) {","209","        throwables.add(e);","210","        super.uncaughtException(t, e);","211","      }","212","    };","213","","214","    final int[] counter = new int[1];","215","    counter[0] = 0;","216","    final Thread[] threads = new Thread[10];","217","    for (int i = 0; i < threads.length; ++i) {","218","      threads[i] = new Thread(tg, \"JUnit Thread \" + i) {","219","","220","        @Override","221","        public void run() {","222","          int i = 0;","223","          try {","224","            synchronized (this) {","225","              notifyAll();","226","              wait();","227","            }","228","            while (i < 1000 && !interrupted()) {","229","              String formatted = format.format(now);","230","              Thread.yield();","231","              assertThat(now).isEqualTo(format.parse(formatted));","232","              ++i;","233","            }","234","          } catch (Exception e) {","235","            fail(\"Unexpected exception: \" + e);","236","          }","237","          synchronized (counter) {","238","            counter[0] += i;","239","          }","240","        }","241","","242","      };","243","    }","244","","245","    for (int i = 0; i < threads.length; ++i) {","246","      synchronized (threads[i]) {","247","        threads[i].start();","248","        threads[i].wait();","249","      }","250","    }","251","","252","    for (int i = 0; i < threads.length; ++i) {","253","      synchronized (threads[i]) {","254","        threads[i].notifyAll();","255","      }","256","    }","257","","258","    Thread.sleep(1000);","259","","260","    for (int i = 0; i < threads.length; ++i) {","261","      threads[i].interrupt();","262","    }","263","    for (int i = 0; i < threads.length; ++i) {","264","      synchronized (threads[i]) {","265","        threads[i].join();","266","      }","267","    }","268","","269","    assertThat(throwables).isEmpty();","270","    assertThat(counter[0]).isGreaterThanOrEqualTo(threads.length);","271","  }"]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/repository\/QualityProfileProviderTest.java":[{"add":["23","import java.util.Date;","31","import org.sonar.api.utils.DateUtils;","73","    response.add(QualityProfile.newBuilder().setKey(\"profile\").setName(\"profile\").setLanguage(\"lang\").setRulesUpdatedAt(DateUtils.formatDateTime(new Date())).build());"],"delete":["71","    response.add(QualityProfile.newBuilder().setKey(\"profile\").setName(\"profile\").setLanguage(\"lang\").build());"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/platformlevel\/PlatformLevel1.java":[{"add":["21","import java.time.Clock;","104","      Clock.systemDefaultZone(),"],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionComponentsTest.java":[{"add":["22","import java.time.Clock;","96","  private IssueQueryFactory issueQueryFactory = new IssueQueryFactory(dbClient, Clock.systemUTC(), userSession);"],"delete":["95","  private IssueQueryFactory issueQueryFactory = new IssueQueryFactory(dbClient, System2.INSTANCE, userSession);"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/ProjectAnalysisInfo.java":[{"add":["21","import java.time.Clock;","37","  private final Clock clock;","43","  public ProjectAnalysisInfo(Configuration settings, Clock clock) {","45","    this.clock = clock;","59","      return Date.from(clock.instant());","64","    } catch (RuntimeException e) {","66","    }","67","    try {","68","      \/\/ sonar.projectDate may have been specified as a date","70","    } catch (RuntimeException e) {","71","      throw new IllegalArgumentException(\"Illegal value for '\" + CoreProperties.PROJECT_DATE_PROPERTY + \"'\", e);"],"delete":["23","","29","import org.sonar.api.utils.SonarException;","30","import org.sonar.api.utils.System2;","39","  private final System2 system2;","45","  public ProjectAnalysisInfo(Configuration settings, System2 system2) {","47","    this.system2 = system2;","61","      return new Date(system2.now());","63","    Date date;","67","    } catch (SonarException e) {"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/IssueQueryFactoryTest.java":[{"add":["21","import java.time.Clock;","22","import java.time.ZoneOffset;","62","  private Clock clock = mock(Clock.class);","63","  private IssueQueryFactory underTest = new IssueQueryFactory(db.getDbClient(), clock, userSession);","130","  public void creation_date_support_localdate() {","131","    SearchWsRequest request = new SearchWsRequest()","132","      .setCreatedAt(\"2013-04-16\");","133","","134","    IssueQuery query = underTest.create(request);","135","","136","    assertThat(query.createdAt()).isEqualTo(DateUtils.parseDate(\"2013-04-16\"));","137","  }","138","","139","  @Test","140","  public void creation_date_support_zoneddatetime() {","141","    SearchWsRequest request = new SearchWsRequest()","142","      .setCreatedAt(\"2013-04-16T09:08:24+0200\");","143","","144","    IssueQuery query = underTest.create(request);","145","","146","    assertThat(query.createdAt()).isEqualTo(DateUtils.parseDateTime(\"2013-04-16T09:08:24+0200\"));","147","  }","148","","149","  @Test","426","        .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.componentUuids()), IssueQuery::isMainBranch)","427","        .containsOnly(branch.uuid(), singletonList(file.uuid()), false);","438","        .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.projectUuids()), IssueQuery::isMainBranch)","439","        .containsOnly(project.uuid(), singletonList(project.uuid()), true);","443","        .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.projectUuids()), IssueQuery::isMainBranch)","444","        .containsOnly(project.uuid(), singletonList(project.uuid()), true);","464","    when(clock.instant()).thenReturn(now.toInstant());","465","    when(clock.getZone()).thenReturn(ZoneOffset.UTC);"],"delete":["29","import org.sonar.api.utils.System2;","61","  private System2 system = mock(System2.class);","62","  private IssueQueryFactory underTest = new IssueQueryFactory(db.getDbClient(), system, userSession);","405","      .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.componentUuids()), IssueQuery::isMainBranch)","406","      .containsOnly(branch.uuid(), singletonList(file.uuid()), false);","417","      .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.projectUuids()), IssueQuery::isMainBranch)","418","      .containsOnly(project.uuid(), singletonList(project.uuid()), true);","422","      .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.projectUuids()), IssueQuery::isMainBranch)","423","      .containsOnly(project.uuid(), singletonList(project.uuid()), true);","443","    when(system.now()).thenReturn(now.getTime());"]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/ProjectAnalysisInfoTest.java":[{"add":["21","import java.time.Clock;","23","import java.time.OffsetDateTime;","25","import java.time.ZoneOffset;","27","import org.junit.Rule;","29","import org.junit.rules.ExpectedException;","37","","38","  @Rule","39","  public ExpectedException thrown = ExpectedException.none();","40","","41","  @Test","42","  public void testSimpleDateTime() {","43","    MapSettings settings = new MapSettings();","44","    settings.appendProperty(CoreProperties.PROJECT_DATE_PROPERTY, \"2017-01-01T12:13:14+0200\");","45","    settings.appendProperty(CoreProperties.PROJECT_VERSION_PROPERTY, \"version\");","46","    Clock clock = mock(Clock.class);","47","    ProjectAnalysisInfo info = new ProjectAnalysisInfo(settings.asConfig(), clock);","48","    info.start();","49","    OffsetDateTime date = OffsetDateTime.of(2017, 1, 1, 12, 13, 14, 0, ZoneOffset.ofHours(2));","50","","51","    assertThat(info.analysisDate()).isEqualTo(Date.from(date.toInstant()));","52","    assertThat(info.analysisVersion()).isEqualTo(\"version\");","53","  }","54","","59","    Clock clock = mock(Clock.class);","60","    ProjectAnalysisInfo info = new ProjectAnalysisInfo(settings.asConfig(), clock);","65","  }","66","","67","  @Test","68","  public void emptyDate() {","69","    MapSettings settings = new MapSettings();","70","    settings.appendProperty(CoreProperties.PROJECT_DATE_PROPERTY, \"\");","71","    settings.appendProperty(CoreProperties.PROJECT_VERSION_PROPERTY, \"version\");","72","    Clock clock = mock(Clock.class);","73","    ProjectAnalysisInfo info = new ProjectAnalysisInfo(settings.asConfig(), clock);","74","","75","    thrown.expect(RuntimeException.class);","76","","77","    info.start();"],"delete":["27","import org.sonar.api.utils.System2;","37","    settings.appendProperty(CoreProperties.PROJECT_VERSION_PROPERTY, \"version\");","38","    System2 system = mock(System2.class);","39","    ProjectAnalysisInfo info = new ProjectAnalysisInfo(settings.asConfig(), system);","44","    assertThat(info.analysisVersion()).isEqualTo(\"version\");"]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/utils\/System2.java":[{"add":["22","import java.time.Clock;","75","   * @deprecated since 6.6 use {@link Clock} that is available in pico.","77","  @Deprecated"],"delete":[]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/rule\/ActiveRulesProviderTest.java":[{"add":["22","import java.util.Date;","31","import org.sonar.api.utils.DateUtils;","83","      QualityProfile p = QualityProfile.newBuilder().setKey(k).setLanguage(k).setRulesUpdatedAt(DateUtils.formatDateTime(new Date())).build();"],"delete":["81","      QualityProfile p = QualityProfile.newBuilder().setKey(k).setLanguage(k).build();"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/IssueQueryFactory.java":[{"add":["27","import java.time.Clock;","28","import java.time.OffsetDateTime;","29","import java.time.Period;","92","  private final Clock clock;","95","  public IssueQueryFactory(DbClient dbClient, Clock clock, UserSession userSession) {","97","    this.clock = clock;","140","      actualCreatedAfter = Date.from(","141","        OffsetDateTime.now(clock)","142","          .minus(Period.parse(\"P\" + createdInLast.toUpperCase(Locale.ENGLISH)))","143","          .toInstant());","396","  private static void setBranch(IssueQuery.Builder builder, ComponentDto component, @Nullable String branch) {"],"delete":["42","import org.joda.time.DateTime;","43","import org.joda.time.format.ISOPeriodFormat;","47","import org.sonar.api.utils.System2;","92","  private final System2 system;","95","  public IssueQueryFactory(DbClient dbClient, System2 system, UserSession userSession) {","97","    this.system = system;","140","      actualCreatedAfter = new DateTime(system.now()).minus(","141","        ISOPeriodFormat.standard().parsePeriod(\"P\" + createdInLast.toUpperCase(Locale.ENGLISH))).toDate();","394","  private static void setBranch(IssueQuery.Builder builder, ComponentDto component, @Nullable String branch){"]}]}},"717e75bc7827bc798ad455543e6d81bce7be4b9e":{"changes":{"sonar-batch\/src\/main\/java\/org\/sonar\/batch\/scan\/filesystem\/FileIndexer.java":"MODIFY","sonar-batch\/src\/main\/java\/org\/sonar\/batch\/scan\/ProjectLock.java":"MODIFY"},"diff":{"sonar-batch\/src\/main\/java\/org\/sonar\/batch\/scan\/filesystem\/FileIndexer.java":[{"add":["22","import org.apache.commons.lang.StringUtils;","28","import org.sonar.api.batch.fs.InputFile.Type;","34","import org.sonar.batch.scan.ProjectLock;","38","import java.io.IOException;","39","import java.nio.file.FileSystemLoopException;","40","import java.nio.file.FileVisitOption;","41","import java.nio.file.FileVisitResult;","42","import java.nio.file.FileVisitor;","43","import java.nio.file.Files;","45","import java.nio.file.attribute.BasicFileAttributes;","47","import java.util.Collections;","126","        try {","127","          indexDirectory(inputFileBuilder, fileSystem, progress, dirOrFile, type);","128","        } catch (IOException e) {","129","          throw new IllegalStateException(\"Failed to index files\", e);","130","        }","137","  private void indexDirectory(final InputFileBuilder inputFileBuilder, final DefaultModuleFileSystem fileSystem, final Progress status,","138","    final File dirToIndex, final InputFile.Type type) throws IOException {","139","    final Path absDir = dirToIndex.toPath().normalize();","140","    Files.walkFileTree(absDir, Collections.singleton(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE,","141","      new IndexFileVisitor(inputFileBuilder, fileSystem, status, type));","190","  private class IndexFileVisitor implements FileVisitor<Path> {","191","    private InputFileBuilder inputFileBuilder;","192","    private DefaultModuleFileSystem fileSystem;","193","    private Progress status;","194","    private Type type;","195","","196","    IndexFileVisitor(InputFileBuilder inputFileBuilder, DefaultModuleFileSystem fileSystem, Progress status, InputFile.Type type) {","197","      this.inputFileBuilder = inputFileBuilder;","198","      this.fileSystem = fileSystem;","199","      this.status = status;","200","      this.type = type;","201","    }","202","","203","    @Override","204","    public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {","205","      Path fileName = dir.getFileName();","206","      ","207","      if (fileName != null && StringUtils.isNotEmpty(fileName.toString()) && fileName.toString().charAt(0) == '.') {","208","        return FileVisitResult.SKIP_SUBTREE;","209","      }","210","      if (Files.isHidden(dir)) {","211","        return FileVisitResult.SKIP_SUBTREE;","212","      }","213","      return FileVisitResult.CONTINUE;","214","    }","215","","216","    @Override","217","    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {","218","      if (!Files.isHidden(file) && !ProjectLock.LOCK_FILE_NAME.equals(file.getFileName().toString())) {","219","        indexFile(inputFileBuilder, fileSystem, status, file.toFile(), type);","220","      }","221","      return FileVisitResult.CONTINUE;","222","    }","223","","224","    @Override","225","    public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {","226","      if (exc != null && exc instanceof FileSystemLoopException) {","227","        LOG.warn(\"Not indexing due to symlink loop: {}\", file.toFile());","228","        return FileVisitResult.CONTINUE;","229","      }","230","","231","      throw exc;","232","    }","233","","234","    @Override","235","    public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {","236","      return FileVisitResult.CONTINUE;","237","    }","238","  }","239",""],"delete":["22","","23","import org.apache.commons.io.FileUtils;","24","import org.apache.commons.io.filefilter.FileFilterUtils;","25","import org.apache.commons.io.filefilter.HiddenFileFilter;","26","import org.apache.commons.io.filefilter.IOFileFilter;","42","import java.util.Collection;","60","","61","  private static final IOFileFilter DIR_FILTER = FileFilterUtils.and(HiddenFileFilter.VISIBLE, FileFilterUtils.notFileFilter(FileFilterUtils.prefixFileFilter(\".\")));","62","  private static final IOFileFilter FILE_FILTER = FileFilterUtils.and(HiddenFileFilter.VISIBLE, FileFilterUtils.notFileFilter(FileFilterUtils.nameFileFilter(\".sonar_lock\")));","63","","125","        indexDirectory(inputFileBuilder, fileSystem, progress, dirOrFile, type);","132","  private void indexDirectory(InputFileBuilder inputFileBuilder, DefaultModuleFileSystem fileSystem, Progress status, File dirToIndex, InputFile.Type type) {","133","    Collection<File> files = FileUtils.listFiles(dirToIndex, FILE_FILTER, DIR_FILTER);","134","    for (File file : files) {","135","      indexFile(inputFileBuilder, fileSystem, status, file, type);","136","    }"]}],"sonar-batch\/src\/main\/java\/org\/sonar\/batch\/scan\/ProjectLock.java":[{"add":["31","  public static final String LOCK_FILE_NAME = \".sonar_lock\";"],"delete":["31","  static final String LOCK_FILE_NAME = \".sonar_lock\";"]}]}},"bd08542fe3b12d6f8ca20d7f5323dccbb8158d33":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/GithubTab-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/AlmIntegration-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/GithubTab.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/AlmTab-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/AlmIntegrationRenderer.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/AlmBindingDefinitionsTable-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/GitlabTab-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/BitbucketTab-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/BitbucketTab.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/AlmTab-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/AzureTab.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/AzureTab-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/AlmTabRenderer-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/AlmIntegration.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/AlmTab.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/AlmIntegration-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/AlmIntegrationRenderer-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/AlmBindingDefinitionsTable-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/AlmTabRenderer.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/AlmIntegrationRenderer-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/GitlabTab.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/AlmTabRenderer-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/AzureTab-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/GitlabTab-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/AlmBindingDefinitionsTable.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/BitbucketTab-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/GithubTab-test.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/GithubTab-test.tsx.snap":[{"add":["50","    loadingAlmDefinitions={false}","51","    loadingProjectCount={false}"],"delete":["50","    loading={false}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/AlmIntegration-test.tsx":[{"add":["87","      expect(wrapper.state().loadingAlmDefinitions).toBe(false);"],"delete":["87","      expect(wrapper.state().loading).toBe(false);"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/GithubTab.tsx":[{"add":["32","  loadingAlmDefinitions: boolean;","33","  loadingProjectCount: boolean;","40","  const {","41","    branchesEnabled,","42","    component,","43","    multipleAlmEnabled,","44","    definitions,","45","    loadingAlmDefinitions,","46","    loadingProjectCount","47","  } = props;","72","            loadingAlmDefinitions={loadingAlmDefinitions}","73","            loadingProjectCount={loadingProjectCount}"],"delete":["32","  loading: boolean;","39","  const { branchesEnabled, component, multipleAlmEnabled, definitions, loading } = props;","64","            loading={loading}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/AlmTab-test.tsx.snap":[{"add":["22","  loadingAlmDefinitions={false}","23","  loadingProjectCount={false}","30","  submitting={false}"],"delete":["22","  loading={false}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/AlmIntegrationRenderer.tsx":[{"add":["36","  loadingAlmDefinitions: boolean;","37","  loadingProjectCount: boolean;","114","    loadingAlmDefinitions,","115","    loadingProjectCount,","139","          loadingAlmDefinitions={loadingAlmDefinitions}","140","          loadingProjectCount={loadingProjectCount}","149","          loadingAlmDefinitions={loadingAlmDefinitions}","150","          loadingProjectCount={loadingProjectCount}","161","          loadingAlmDefinitions={loadingAlmDefinitions}","162","          loadingProjectCount={loadingProjectCount}","172","          loadingAlmDefinitions={loadingAlmDefinitions}","173","          loadingProjectCount={loadingProjectCount}"],"delete":["36","  loading: boolean;","113","    loading,","137","          loading={loading}","146","          loading={loading}","157","          loading={loading}","167","          loading={loading}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/AlmBindingDefinitionsTable-test.tsx":[{"add":["38","  expect(shallowRender()).toMatchSnapshot('loading');","72","      loading={false}"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/GitlabTab-test.tsx":[{"add":["34","      loadingAlmDefinitions={false}","35","      loadingProjectCount={false}"],"delete":["34","      loading={false}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/BitbucketTab-test.tsx":[{"add":["32","      loadingAlmDefinitions={false}","33","      loadingProjectCount={false}"],"delete":["32","      loading={false}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/BitbucketTab.tsx":[{"add":["34","  loadingAlmDefinitions: boolean;","35","  loadingProjectCount: boolean;","42","  const { multipleAlmEnabled, definitions, loadingAlmDefinitions, loadingProjectCount } = props;","106","        loadingAlmDefinitions={loadingAlmDefinitions}","107","        loadingProjectCount={loadingProjectCount}"],"delete":["34","  loading: boolean;","41","  const { multipleAlmEnabled, definitions, loading } = props;","105","        loading={loading}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/AlmTab-test.tsx":[{"add":["100","      loadingAlmDefinitions={false}","101","      loadingProjectCount={false}"],"delete":["100","      loading={false}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/AzureTab.tsx":[{"add":["28","  loadingAlmDefinitions: boolean;","29","  loadingProjectCount: boolean;","36","  const { multipleAlmEnabled, definitions, loadingAlmDefinitions, loadingProjectCount } = props;","54","        loadingAlmDefinitions={loadingAlmDefinitions}","55","        loadingProjectCount={loadingProjectCount}"],"delete":["28","  loading: boolean;","35","  const { multipleAlmEnabled, definitions, loading } = props;","53","        loading={loading}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/AzureTab-test.tsx":[{"add":["32","      loadingAlmDefinitions={false}","33","      loadingProjectCount={false}"],"delete":["32","      loading={false}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/AlmTabRenderer-test.tsx.snap":[{"add":["29","      loading={false}","98","      loading={false}","107","exports[`should render correctly for multi-ALM binding: loading ALM definitions 1`] = `","134","      loading={false}","135","      onCreate={[MockFunction]}","136","      onDelete={[MockFunction]}","137","      onEdit={[MockFunction]}","138","    \/>","139","  <\/DeferredSpinner>","140","<\/div>","141","`;","142","","143","exports[`should render correctly for multi-ALM binding: loading project count 1`] = `","144","<div","145","  className=\"big-padded\"","146",">","147","  <DeferredSpinner","148","    loading={false}","149","    timeout={100}","150","  >","151","    <AlmBindingDefinitionsTable","152","      additionalColumnsHeaders={","153","        Array [","154","          \"url\",","155","          \"app_id\",","156","        ]","157","      }","158","      alm=\"github\"","159","      definitions={","160","        Array [","161","          Object {","162","            \"additionalColumns\": Array [","163","              \"http:\/\/github.enterprise.com\",","164","              \"123456\",","165","            ],","166","            \"key\": \"key\",","167","          },","168","        ]","169","      }","170","      loading={true}","171","      onCreate={[MockFunction]}","172","      onDelete={[MockFunction]}","173","      onEdit={[MockFunction]}","174","    \/>","175","  <\/DeferredSpinner>","176","<\/div>","177","`;","178","","179","exports[`should render correctly for multi-ALM binding: submitting 1`] = `","180","<div","181","  className=\"big-padded\"","182",">","183","  <DeferredSpinner","184","    loading={false}","185","    timeout={100}","186","  >","187","    <AlmBindingDefinitionsTable","188","      additionalColumnsHeaders={","189","        Array [","190","          \"url\",","191","          \"app_id\",","192","        ]","193","      }","194","      alm=\"github\"","195","      definitions={","196","        Array [","197","          Object {","198","            \"additionalColumns\": Array [","199","              \"http:\/\/github.enterprise.com\",","200","              \"123456\",","201","            ],","202","            \"key\": \"key\",","203","          },","204","        ]","205","      }","206","      loading={false}","242","      loading={false}","353","    loading={true}","398","    loading={true}"],"delete":["105","exports[`should render correctly for multi-ALM binding: loading 1`] = `","277","    loading={false}","322","    loading={false}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/AlmIntegration.tsx":[{"add":["38","  loadingAlmDefinitions: boolean;","39","  loadingProjectCount: boolean;","53","    loadingAlmDefinitions: true,","54","    loadingProjectCount: false","85","    this.setState({ loadingAlmDefinitions: true });","91","            loadingAlmDefinitions: false","97","          this.setState({ loadingAlmDefinitions: false });","111","    this.setState({ loadingProjectCount: true });","117","            loadingProjectCount: false,","124","          this.setState({ loadingProjectCount: false });"],"delete":["38","  loading: boolean;","52","    loading: true","83","    this.setState({ loading: true });","89","            loading: false","95","          this.setState({ loading: false });","109","    this.setState({ loading: true });","115","            loading: false,","122","          this.setState({ loading: false });"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/AlmTab.tsx":[{"add":["36","  loadingAlmDefinitions: boolean;","37","  loadingProjectCount: boolean;","115","      loadingAlmDefinitions,","116","      loadingProjectCount,","134","        loadingAlmDefinitions={loadingAlmDefinitions}","135","        loadingProjectCount={loadingProjectCount}","143","        submitting={submitting}"],"delete":["36","  loading: boolean;","114","      loading,","132","        loading={loading || submitting}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/AlmIntegration-test.tsx.snap":[{"add":["14","  loadingAlmDefinitions={true}","15","  loadingProjectCount={false}"],"delete":["14","  loading={true}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/AlmIntegrationRenderer-test.tsx":[{"add":["26","  expect(shallowRender({ loadingAlmDefinitions: true, loadingProjectCount: true })).toMatchSnapshot(","27","    'loading'","28","  );","43","      loadingAlmDefinitions={false}","44","      loadingProjectCount={false}"],"delete":["26","  expect(shallowRender({ loading: true })).toMatchSnapshot('loading');","41","      loading={false}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/AlmBindingDefinitionsTable-test.tsx.snap":[{"add":["14","      disabled={false}","67","      disabled={false}","133","            disabled={false}","144","            disabled={false}","178","            disabled={false}","189","            disabled={false}","199","exports[`should render correctly: loading 1`] = `","200","<Fragment>","201","  <div","202","    className=\"spacer-top big-spacer-bottom display-flex-space-between\"","203","  >","204","    <h2","205","      className=\"settings-sub-category-name\"","206","    >","207","      settings.almintegration.table.title","208","    <\/h2>","209","    <Button","210","      data-test=\"settings__alm-create\"","211","      disabled={false}","212","      onClick={[MockFunction]}","213","    >","214","      settings.almintegration.table.create","215","    <\/Button>","216","  <\/div>","217","  <table","218","    className=\"data zebra fixed spacer-bottom\"","219","  >","220","    <thead>","221","      <tr>","222","        <th>","223","          settings.almintegration.table.column.name","224","        <\/th>","225","        <th","226","          className=\"action-small text-center\"","227","        >","228","          settings.almintegration.table.column.edit","229","        <\/th>","230","        <th","231","          className=\"action text-center\"","232","        >","233","          settings.almintegration.table.column.delete","234","        <\/th>","235","      <\/tr>","236","    <\/thead>","237","    <tbody>","238","      <tr","239","        data-test=\"settings__alm-empty-table\"","240","      >","241","        <td","242","          colSpan={3}","243","        >","244","          settings.almintegration.table.empty.azure","245","        <\/td>","246","      <\/tr>","247","    <\/tbody>","248","  <\/table>","249","<\/Fragment>","250","`;","251","","264","      disabled={false}"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/AlmTabRenderer.tsx":[{"add":["44","  loadingAlmDefinitions: boolean;","45","  loadingProjectCount: boolean;","53","  submitting: boolean;","70","    loadingAlmDefinitions,","71","    loadingProjectCount,","74","    submitting,","114","        <DeferredSpinner loading={loadingAlmDefinitions}>","120","            loading={loadingProjectCount}","143","          loading={loadingAlmDefinitions || loadingProjectCount || submitting}"],"delete":["44","  loading: boolean;","68","    loading,","110","        <DeferredSpinner loading={loading}>","138","          loading={loading}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/AlmIntegrationRenderer-test.tsx.snap":[{"add":["78","    loadingAlmDefinitions={false}","79","    loadingProjectCount={false}","163","    loadingAlmDefinitions={false}","164","    loadingProjectCount={false}","249","    loadingAlmDefinitions={false}","250","    loadingProjectCount={false}","335","    loadingAlmDefinitions={false}","336","    loadingProjectCount={false}","426","    loadingAlmDefinitions={false}","427","    loadingProjectCount={false}","512","    loadingAlmDefinitions={true}","513","    loadingProjectCount={true}"],"delete":["78","    loading={false}","162","    loading={false}","247","    loading={false}","332","    loading={false}","422","    loading={false}","507","    loading={true}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/GitlabTab.tsx":[{"add":["32","  loadingAlmDefinitions: boolean;","33","  loadingProjectCount: boolean;","40","  const {","41","    branchesEnabled,","42","    component,","43","    multipleAlmEnabled,","44","    definitions,","45","    loadingAlmDefinitions,","46","    loadingProjectCount","47","  } = props;","71","            loadingAlmDefinitions={loadingAlmDefinitions}","72","            loadingProjectCount={loadingProjectCount}"],"delete":["32","  loading: boolean;","39","  const { branchesEnabled, component, multipleAlmEnabled, definitions, loading } = props;","63","            loading={loading}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/AlmTabRenderer-test.tsx":[{"add":["26","  expect(shallowRender({ loadingAlmDefinitions: true })).toMatchSnapshot('loading ALM definitions');","27","  expect(shallowRender({ loadingProjectCount: true })).toMatchSnapshot('loading project count');","28","  expect(shallowRender({ submitting: true })).toMatchSnapshot('submitting');","52","  expect(","53","    shallowRender({ loadingAlmDefinitions: true, multipleAlmEnabled: false })","54","  ).toMatchSnapshot();","70","      loadingAlmDefinitions={false}","71","      loadingProjectCount={false}","78","      submitting={true}"],"delete":["26","  expect(shallowRender({ loading: true })).toMatchSnapshot('loading');","50","  expect(shallowRender({ loading: true, multipleAlmEnabled: false })).toMatchSnapshot();","66","      loading={false}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/AzureTab-test.tsx.snap":[{"add":["34","    loadingAlmDefinitions={false}","35","    loadingProjectCount={false}"],"delete":["34","    loading={false}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/GitlabTab-test.tsx.snap":[{"add":["45","    loadingAlmDefinitions={false}","46","    loadingProjectCount={false}"],"delete":["45","    loading={false}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/AlmBindingDefinitionsTable.tsx":[{"add":["33","  loading: boolean;","40","  const { additionalColumnsHeaders, additionalTableInfo, alm, definitions, loading } = props;","48","        <Button data-test=\"settings__alm-create\" disabled={loading} onClick={props.onCreate}>","89","                  <ButtonIcon disabled={loading} onClick={() => props.onEdit(key)}>","94","                  <DeleteButton disabled={loading} onClick={() => props.onDelete(key)} \/>"],"delete":["39","  const { additionalColumnsHeaders, additionalTableInfo, alm, definitions } = props;","47","        <Button data-test=\"settings__alm-create\" onClick={props.onCreate}>","88","                  <ButtonIcon onClick={() => props.onEdit(key)}>","93","                  <DeleteButton onClick={() => props.onDelete(key)} \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/BitbucketTab-test.tsx.snap":[{"add":["104","    loadingAlmDefinitions={false}","105","    loadingProjectCount={false}"],"delete":["104","    loading={false}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/GithubTab-test.tsx":[{"add":["34","      loadingAlmDefinitions={false}","35","      loadingProjectCount={false}"],"delete":["34","      loading={false}"]}]}},"35f6a66273ba7ee5815b1c35446f17da9b1b6f0b":{"changes":{"sonar-batch\/src\/main\/java\/org\/sonar\/batch\/cpd\/CpdExecutor.java":"MODIFY"},"diff":{"sonar-batch\/src\/main\/java\/org\/sonar\/batch\/cpd\/CpdExecutor.java":[{"add":["112","    progressReport.message(String.format(\"%d\/%d - current file: %s\", count, total, inputFile.absolutePath()));","125","      LOG.warn(\"Timeout during detection of duplications for \" + inputFile.absolutePath());","131","      throw new IllegalStateException(\"Fail during detection of duplication for \" + inputFile.absolutePath(), e);"],"delete":["112","    progressReport.message(String.format(\"%d\/%d - current file: %s\", count, total, inputFile));","125","      LOG.warn(\"Timeout during detection of duplications for \" + inputFile, e);","131","      throw new IllegalStateException(\"Fail during detection of duplication for \" + inputFile, e);"]}]}},"2bf160e29360643f447b03c0e9e301f5ab6fb481":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/search-navigator.css":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/StatusFacet.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/CreationDateFacet.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/facet\/FacetHeader.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/SeverityFacet.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/facet\/__tests__\/__snapshots__\/ListStyleFacet-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/facet\/__tests__\/__snapshots__\/FacetHeader-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/facet\/__tests__\/FacetHeader-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/__snapshots__\/StatusFacet-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/__snapshots__\/TypeFacet-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/TypeFacet.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/ResolutionFacet.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/facet\/ListStyleFacet.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/StandardFacet.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/__snapshots__\/StandardFacet-test.tsx.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/search-navigator.css":[{"add":[],"delete":["86",".search-navigator-facet-box > .spinner {","87","  float: right;","88","  margin-top: -24px;","89","}","90",""]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/StatusFacet.tsx":[{"add":["101","          fetching={this.props.fetching}"],"delete":["28","import DeferredSpinner from '..\/..\/..\/components\/common\/DeferredSpinner';","109","        <DeferredSpinner loading={this.props.fetching} \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/CreationDateFacet.tsx":[{"add":["280","          fetching={this.props.fetching}"],"delete":["34","import DeferredSpinner from '..\/..\/..\/components\/common\/DeferredSpinner';","288","        <DeferredSpinner loading={this.props.fetching} \/>"]}],"server\/sonar-web\/src\/main\/js\/components\/facet\/FacetHeader.tsx":[{"add":["21","import DeferredSpinner from '..\/common\/DeferredSpinner';","22","import HelpTooltip from '..\/controls\/HelpTooltip';","23","import OpenCloseIcon from '..\/icons-components\/OpenCloseIcon';","29","  fetching?: boolean;","73","      <div className=\"search-navigator-facet-header-wrapper display-flex-center\">","95","        {this.props.fetching && (","96","          <span className=\"little-spacer-right\">","97","            <DeferredSpinner \/>","98","          <\/span>","99","        )}","100",""],"delete":["20","import OpenCloseIcon from '..\/icons-components\/OpenCloseIcon';","21","import HelpTooltip from '..\/controls\/HelpTooltip';","71","      <div className=\"search-navigator-facet-header-wrapper\">"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/SeverityFacet.tsx":[{"add":["101","          fetching={this.props.fetching}"],"delete":["28","import DeferredSpinner from '..\/..\/..\/components\/common\/DeferredSpinner';","109","        <DeferredSpinner loading={this.props.fetching} \/>"]}],"server\/sonar-web\/src\/main\/js\/components\/facet\/__tests__\/__snapshots__\/ListStyleFacet-test.tsx.snap":[{"add":["8","    fetching={false}","31","    fetching={false}","122","    fetching={false}","200","    fetching={false}","268","    fetching={false}","348","    fetching={false}","426","    fetching={false}","466","    fetching={false}"],"delete":["21","  <DeferredSpinner","22","    loading={false}","23","    timeout={100}","24","  \/>","52","  <DeferredSpinner","53","    loading={false}","54","    timeout={100}","55","  \/>","140","  <DeferredSpinner","141","    loading={false}","142","    timeout={100}","143","  \/>","221","  <DeferredSpinner","222","    loading={false}","223","    timeout={100}","224","  \/>","292","  <DeferredSpinner","293","    loading={false}","294","    timeout={100}","295","  \/>","375","  <DeferredSpinner","376","    loading={false}","377","    timeout={100}","378","  \/>","456","  <DeferredSpinner","457","    loading={false}","458","    timeout={100}","459","  \/>","499","  <DeferredSpinner","500","    loading={false}","501","    timeout={100}","502","  \/>"]}],"server\/sonar-web\/src\/main\/js\/components\/facet\/__tests__\/__snapshots__\/FacetHeader-test.tsx.snap":[{"add":["4","  className=\"search-navigator-facet-header-wrapper display-flex-center\"","41","  className=\"search-navigator-facet-header-wrapper display-flex-center\"","72","  className=\"search-navigator-facet-header-wrapper display-flex-center\"","96","  className=\"search-navigator-facet-header-wrapper display-flex-center\"","127","  className=\"search-navigator-facet-header-wrapper display-flex-center\"","149","exports[`should render with a spinner if loading 1`] = `","150","<div","151","  className=\"search-navigator-facet-header-wrapper display-flex-center\"","152",">","153","  <span","154","    className=\"search-navigator-facet-header display-flex-center\"","155","  >","156","    foo","157","  <\/span>","158","  <span","159","    className=\"search-navigator-facet-header-value spacer-left spacer-right \"","160","  \/>","161","  <span","162","    className=\"little-spacer-right\"","163","  >","164","    <DeferredSpinner","165","      timeout={100}","166","    \/>","167","  <\/span>","168","<\/div>","169","`;","170","","173","  className=\"search-navigator-facet-header-wrapper display-flex-center\""],"delete":["4","  className=\"search-navigator-facet-header-wrapper\"","41","  className=\"search-navigator-facet-header-wrapper\"","72","  className=\"search-navigator-facet-header-wrapper\"","96","  className=\"search-navigator-facet-header-wrapper\"","127","  className=\"search-navigator-facet-header-wrapper\"","151","  className=\"search-navigator-facet-header-wrapper\""]}],"server\/sonar-web\/src\/main\/js\/components\/facet\/__tests__\/FacetHeader-test.tsx":[{"add":["48","it('should render with a spinner if loading', () => {","49","  expect(shallow(<FacetHeader fetching={true} name=\"foo\" open={false} \/>)).toMatchSnapshot();","50","});","51",""],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/__snapshots__\/StatusFacet-test.tsx.snap":[{"add":["7","    fetching={false}"],"delete":["13","  <DeferredSpinner","14","    loading={false}","15","    timeout={100}","16","  \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/__snapshots__\/TypeFacet-test.tsx.snap":[{"add":["101","    fetching={false}"],"delete":["112","  <DeferredSpinner","113","    loading={false}","114","    timeout={100}","115","  \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/TypeFacet.tsx":[{"add":["144","          fetching={this.props.fetching}"],"delete":["23","import DeferredSpinner from '..\/..\/..\/components\/common\/DeferredSpinner';","152","        <DeferredSpinner loading={this.props.fetching} \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/ResolutionFacet.tsx":[{"add":["117","          fetching={this.props.fetching}"],"delete":["27","import DeferredSpinner from '..\/..\/..\/components\/common\/DeferredSpinner';","125","        <DeferredSpinner loading={this.props.fetching} \/>"]}],"server\/sonar-web\/src\/main\/js\/components\/facet\/ListStyleFacet.tsx":[{"add":["395","          fetching={this.props.fetching}"],"delete":["29","import DeferredSpinner from '..\/common\/DeferredSpinner';","407","        <DeferredSpinner loading={this.props.fetching} \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/StandardFacet.tsx":[{"add":["301","            fetching={this.props.fetchingSonarSourceSecurity}","318","            fetching={this.props.fetchingOwaspTop10}","335","            fetching={this.props.fetchingSansTop25}"],"delete":["21","import DeferredSpinner from '..\/..\/..\/components\/common\/DeferredSpinner';","309","          <DeferredSpinner loading={this.props.fetchingSonarSourceSecurity} \/>","326","          <DeferredSpinner loading={this.props.fetchingOwaspTop10} \/>","343","          <DeferredSpinner loading={this.props.fetchingSansTop25} \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/__snapshots__\/StandardFacet-test.tsx.snap":[{"add":["22","    fetching={false}","63","      fetching={false}","97","      fetching={false}","143","      fetching={false}"],"delete":["27","  <DeferredSpinner","28","    loading={false}","29","    timeout={100}","30","  \/>","75","    <DeferredSpinner","76","      loading={false}","77","      timeout={100}","78","    \/>","112","    <DeferredSpinner","113","      loading={false}","114","      timeout={100}","115","    \/>","161","    <DeferredSpinner","162","      loading={false}","163","      timeout={100}","164","    \/>"]}]}},"497a386161f63e64d5e6dddc50e22f4fea801454":{"changes":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/settings\/_properties.html.erb":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/settings\/_properties.html.erb":[{"add":["180","      <% else","187","      <% end","198","  $j('#properties > form')"],"delete":["180","      <% else ","187","      <% end ","198","  $j(document)"]}]}},"e21fbb25bc5a1b3a4658a78993d51404b6f8204e":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/FileFacet.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/SourceViewerHeaderSlim.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/__tests__\/__snapshots__\/SourceViewerHeaderSlim-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/__snapshots__\/FileFacet-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/FileFacet-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/__tests__\/__snapshots__\/SourceViewerHeader-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/utils.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/Sidebar.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/SourceViewerHeader.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/FileFacet.tsx":[{"add":["31","import { Facet, Query } from '..\/utils';","37","  files: string[];","47","  getFacetItemText = (path: string) => {","48","    return path;","52","    return file.path;","78","          return file.path;","91","  renderFacetItem = (path: string) => {","92","    return this.renderFile(path);","119","        values={this.props.files}"],"delete":["31","import { Facet, Query, ReferencedComponent } from '..\/utils';","37","  fileUuids: string[];","43","  referencedComponents: T.Dict<ReferencedComponent>;","48","  getFilePath = (fileUuid: string) => {","49","    const { referencedComponents } = this.props;","50","    return referencedComponents[fileUuid]","51","      ? collapsePath(referencedComponents[fileUuid].path || '', 15)","52","      : fileUuid;","53","  };","54","","55","  getReferencedComponent = (key: string) => {","56","    const { referencedComponents } = this.props;","57","    const fileUuid = Object.keys(referencedComponents).find(uuid => {","58","      return referencedComponents[uuid].key === key;","59","    });","60","    return fileUuid ? referencedComponents[fileUuid] : undefined;","61","  };","62","","63","  getFacetItemText = (fileUuid: string) => {","64","    const { referencedComponents } = this.props;","65","    return referencedComponents[fileUuid] ? referencedComponents[fileUuid].path || '' : fileUuid;","69","    const component = this.getReferencedComponent(file.key);","70","    return component ? component.uuid : file.key;","96","          const component = this.getReferencedComponent(file.key);","97","          return component && component.uuid;","110","  renderFacetItem = (fileUuid: string) => {","111","    const name = this.getFilePath(fileUuid);","112","    return this.renderFile(name);","139","        values={this.props.fileUuids}"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/SourceViewerHeaderSlim.tsx":[{"add":["56","  const { measures, path, project, projectName, q, subProject, subProjectName } = sourceViewerFile;","106","              files: path,"],"delete":["56","  const {","57","    measures,","58","    path,","59","    project,","60","    projectName,","61","    q,","62","    subProject,","63","    subProjectName,","64","    uuid","65","  } = sourceViewerFile;","115","              fileUuids: uuid,"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/__tests__\/__snapshots__\/SourceViewerHeaderSlim-test.tsx.snap":[{"add":["60","            \"files\": \"foo\/bar.ts\",","154","            \"files\": \"foo\/bar.ts\",","234","            \"files\": \"foo\/bar.ts\",","303","            \"files\": \"foo\/bar.ts\","],"delete":["60","            \"fileUuids\": \"foo-bar\",","154","            \"fileUuids\": \"foo-bar\",","234","            \"fileUuids\": \"foo-bar\",","303","            \"fileUuids\": \"foo-bar\","]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/__snapshots__\/FileFacet-test.tsx.snap":[{"add":["52","  fooUuid"],"delete":["52","  foo\/bar.js"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/FileFacet-test.tsx":[{"add":["26","import { Query } from '..\/..\/utils';","78","    expect(instance.getSearchResultKey({ key: 'bar', path: 'bar' } as TreeComponentWithPath)).toBe(","79","      'bar'","80","    );","94","      files={['foo', 'bar']}"],"delete":["26","import { Query, ReferencedComponent } from '..\/..\/utils';","78","    expect(instance.getSearchResultKey({ key: 'foo' } as TreeComponentWithPath)).toBe('fooUuid');","79","    expect(instance.getSearchResultKey({ key: 'bar' } as TreeComponentWithPath)).toBe('bar');","83","    expect(instance.getFacetItemText('fooUuid')).toBe('foo\/bar.js');","94","      fileUuids={['foo', 'bar']}","100","      referencedComponents={{","101","        fooUuid: { key: 'foo', uuid: 'fooUuid', path: 'foo\/bar.js' } as ReferencedComponent","102","      }}"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/__tests__\/__snapshots__\/SourceViewerHeader-test.tsx.snap":[{"add":["379","                \"files\": \"foo\/bar.ts\",","410","                \"files\": \"foo\/bar.ts\",","441","                \"files\": \"foo\/bar.ts\",","472","                \"files\": \"foo\/bar.ts\","],"delete":["379","                \"fileUuids\": \"foo-bar\",","410","                \"fileUuids\": \"foo-bar\",","441","                \"fileUuids\": \"foo-bar\",","472","                \"fileUuids\": \"foo-bar\","]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/utils.ts":[{"add":["89","    files: parseAsArray(query.files, parseAsString),","127","    files: serializeStringArray(query.files),"],"delete":["89","    files: parseAsArray(query.fileUuids, parseAsString),","127","    fileUuids: serializeStringArray(query.files),","163","    files: 'fileUuids',","176","    fileUuids: 'files',"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/Sidebar.tsx":[{"add":["90","          files={query.files}"],"delete":["90","          fileUuids={query.files}","92","          referencedComponents={this.props.referencedComponentsById}"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/SourceViewerHeader.tsx":[{"add":["83","              files: sourceViewerFile.path,"],"delete":["83","              fileUuids: sourceViewerFile.uuid,"]}]}}}