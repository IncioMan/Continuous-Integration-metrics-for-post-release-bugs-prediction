{"2e4413d7b28913c5a0ede0c43c386e9b3a13aa0d":{"changes":{"server\/sonar-web\/src\/main\/js\/app\/utils\/startReactApp.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/app\/utils\/startReactApp.js":[{"add":["103","                  <Route path=\"codingrules\" onEnter={(nextState, replace) => {","104","                    replace('\/coding_rules' + window.location.hash);","105","                  }}\/>"],"delete":[]}]}},"c9a6b47c6d50ab883af641bf3e3b9ab9c2d63637":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/create\/project\/__tests__\/__snapshots__\/CreateProjectModeSelection-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/create\/project\/CreateProjectModeSelection.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/create\/project\/__tests__\/__snapshots__\/CreateProjectModeSelection-test.tsx.snap":[{"add":[],"delete":["30","        width={80}","88","        width={80}","152","        width={80}","224","        width={80}"]}],"server\/sonar-web\/src\/main\/js\/apps\/create\/project\/CreateProjectModeSelection.tsx":[{"add":[],"delete":["52","            width={80}"]}]}},"bf2b385a2e8b9bfbc5cc66efb1356394c431b3e2":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/issue\/IssueAssignerTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/issue\/IssueAssigner.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/issue\/IssueDto.java":"MODIFY","tests\/src\/test\/java\/org\/sonarqube\/tests\/issue\/AutoAssignTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/issue\/IssueAssignerTest.java":[{"add":["22","import org.junit.Test;","33","import static java.util.stream.Collectors.joining;","34","import static java.util.stream.IntStream.range;","102","  public void dont_store_author_too_long() throws Exception {","103","    String scmAuthor = range(0, 256).mapToObj(i -> \"s\").collect(joining());","104","    addScmUser(scmAuthor, \"John C\");","105","    setSingleChangeset(scmAuthor, 123456789L, \"rev-1\");","106","    DefaultIssue issue = new DefaultIssue().setLine(1);","107","","108","    underTest.onIssue(FILE, issue);","109","","110","    assertThat(issue.authorLogin()).isNull();","111","    assertThat(issue.assignee()).isEqualTo(\"John C\");","112","","113","    assertThat(logTester.logs(LoggerLevel.DEBUG)).contains(\"SCM account '\" + scmAuthor + \"' is too long to be stored as issue author\");","114","  }","115","","116","  @Test"],"delete":["21","import org.junit.Test;","170",""]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/issue\/IssueAssigner.java":[{"add":["30","import org.sonar.db.issue.IssueDto;","78","        if (scmAuthor.length() <= IssueDto.AUTHOR_MAX_SIZE) {","79","          issueUpdater.setNewAuthor(issue, scmAuthor, changeContext);","80","        } else {","81","          LOGGER.debug(\"SCM account '{}' is too long to be stored as issue author\", scmAuthor);","82","        }","86","        String author = Strings.isNullOrEmpty(scmAuthor) ? null : scmAccountToUser.getNullable(scmAuthor);"],"delete":["77","        issueUpdater.setNewAuthor(issue, scmAuthor, changeContext);","81","        String author = issue.authorLogin() == null ? null : scmAccountToUser.getNullable(issue.authorLogin());"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/issue\/IssueDto.java":[{"add":["53","  public static final int AUTHOR_MAX_SIZE = 255;","353","    checkArgument(s == null || s.length() <= AUTHOR_MAX_SIZE, \"Value is too long for issue author login: %s\", s);"],"delete":["352","    checkArgument(s == null || s.length() <= 255, \"Value is too long for issue author login: %s\", s);"]}],"tests\/src\/test\/java\/org\/sonarqube\/tests\/issue\/AutoAssignTest.java":[{"add":["41","import static org.assertj.core.groups.Tuple.tuple;","84","    \/\/ SCM accounts longer than 255","85","    createUser(\"user9\", \"User 9\", \"user9@email.com\", IntStream.range(0, 256).mapToObj(i -> \"s\").collect(Collectors.joining()));","102","    \/\/ SCM accounts longer than 255 chars","103","    verifyIssueAssignee(issues, 10, \"user9\");","119","    assertThat(search(IssueQuery.create().assignees(\"user2\")).list()).hasSize(9);","142","    assertThat(issues)","143","      .extracting(Issue::line, Issue::author)","144","      .containsExactlyInAnyOrder(","145","        tuple(1, \"\"),","146","        tuple(2, \"\"),","147","        tuple(3, \"\"),","148","        tuple(4, \"\"),","149","        tuple(5, \"\"),","150","        tuple(6, \"\"),","151","        tuple(7, \"\"),","152","        tuple(8, \"\"),","153","        tuple(9, \"\"),","154","        tuple(10, \"\"));","163","    assertThat(issues)","164","      .extracting(Issue::line, Issue::author)","165","      .containsExactlyInAnyOrder(","166","        tuple(1, \"user1\"),","167","        tuple(2, \"user2\"),","168","        tuple(3, \"user3name\"),","169","        tuple(4, \"user4name\"),","170","        tuple(5, \"user5@email.com\"),","171","        tuple(6, \"user6@email.com\"),","172","        tuple(7, \"user7scmaccount\"),","173","        tuple(8, \"user8scmaccount\"),","174","        tuple(9, \"user8scmaccount\"),","175","        \/\/ SONAR-8727","176","        tuple(10, \"\"));"],"delete":["83","    \/\/ SCM accounts long then 255 chars will be ignored","84","    createUser(\"user9\", \"User 9\", \"user9@email.com\", IntStream.range(0,256).mapToObj(i -> \"s\").collect(Collectors.joining()));","101","    \/\/ SCM accounts long then 255 chars will be ignored","102","    verifyIssueAssignee(issues, 10, null);","118","    assertThat(search(IssueQuery.create().assignees(\"user2\")).list()).hasSize(8);","141","    for (Issue issue : issues) {","142","      assertThat(issue.author()).isEmpty();","143","    }","152","    for (Issue issue : issues) {","153","      assertThat(issue.author()).isNotEmpty();","154","    }"]}]}},"5b947f0d78f4a63b916b10e626d29398830e5da3":{"changes":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/ce\/CeQueueDtoTest.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/ce\/CeQueueTesting.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/ce\/CeQueueDaoTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/ce\/CeQueueMapper.xml":"MODIFY","server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/queue\/InternalCeQueueImpl.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/ce\/CeQueueDao.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/ce\/CeQueueDto.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/ce\/UpdateIfTest.java":"ADD","server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/cleaning\/CeCleaningSchedulerImpl.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/ce\/CeQueueMapper.java":"MODIFY","server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/queue\/InternalCeQueue.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/ce\/UpdateIf.java":"MODIFY","server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/queue\/InternalCeQueueImplTest.java":"MODIFY","server\/sonar-ce-common\/src\/main\/java\/org\/sonar\/ce\/queue\/CeQueueImpl.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/ce\/ws\/TaskFormatterTest.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/ce\/CeActivityDaoTest.java":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/ce\/CeQueueDtoTest.java":[{"add":[],"delete":["95","","96","  @Test","97","  public void setWorkerUuid_accepts_null_empty_and_string_40_chars_or_less() {","98","    underTest.setWorkerUuid(null);","99","    underTest.setWorkerUuid(\"\");","100","    underTest.setWorkerUuid(\"bar\");","101","    underTest.setWorkerUuid(STR_40_CHARS);","102","  }","103","","104","  @Test","105","  public void setWorkerUuid_throws_IAE_if_value_is_41_chars() {","106","    String str_41_chars = STR_40_CHARS + \"a\";","107","","108","    expectedException.expect(IllegalArgumentException.class);","109","    expectedException.expectMessage(\"worker uuid is too long: \" + str_41_chars);","110","","111","    underTest.setWorkerUuid(str_41_chars);","112","  }"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/ce\/CeQueueTesting.java":[{"add":["21","import java.util.stream.Stream;","22","import org.sonar.db.DbSession;","23","","24","import static com.google.common.base.Preconditions.checkArgument;","27","import static org.assertj.core.api.Assertions.assertThat;","28","import static org.sonar.db.ce.CeQueueDto.Status.IN_PROGRESS;","29","import static org.sonar.db.ce.CeQueueDto.Status.PENDING;","44","      .setUpdatedAt(nextLong());","47","  public static void makeInProgress(DbSession dbSession, String workerUuid, long now, CeQueueDto... ceQueueDtos) {","48","    Stream.of(ceQueueDtos).forEach(ceQueueDto -> {","49","      CeQueueMapper mapper = dbSession.getMapper(CeQueueMapper.class);","50","      int touchedRows = mapper.updateIf(ceQueueDto.getUuid(),","51","        new UpdateIf.NewProperties(IN_PROGRESS, workerUuid, now, now),","52","        new UpdateIf.OldProperties(PENDING));","53","      assertThat(touchedRows).isEqualTo(1);","54","    });","55","  }","57","  public static void reset(DbSession dbSession, long now, CeQueueDto... ceQueueDtos) {","58","    Stream.of(ceQueueDtos).forEach(ceQueueDto -> {","59","      checkArgument(ceQueueDto.getStatus() == IN_PROGRESS);","60","      checkArgument(ceQueueDto.getWorkerUuid() != null);","61","","62","      CeQueueMapper mapper = dbSession.getMapper(CeQueueMapper.class);","63","      int touchedRows = mapper.updateIf(ceQueueDto.getUuid(),","64","        new UpdateIf.NewProperties(PENDING, ceQueueDto.getUuid(), now, now),","65","        new UpdateIf.OldProperties(IN_PROGRESS));","66","      assertThat(touchedRows).isEqualTo(1);","67","    });","68","  }"],"delete":["37","      .setUpdatedAt(nextLong())","38","      .setStartedAt(nextLong());"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/ce\/CeQueueDaoTest.java":[{"add":["44","import static org.assertj.core.groups.Tuple.tuple;","50","import static org.sonar.db.ce.CeQueueTesting.reset;","70","  private System2 alwaysIncreasingSystem2 = new AlwaysIncreasingSystem2();","74","  private CeQueueDao underTestAlwaysIncreasingSystem2 = new CeQueueDao(alwaysIncreasingSystem2);","83","      .setSubmitterUuid(SUBMITTER_LOGIN);","104","        assertThat(saved.getWorkerUuid()).isNull();","115","    assertThat(saved.getWorkerUuid()).isNull();","123","    insertPending(TASK_UUID_1, COMPONENT_UUID_1);","140","    insertPending(TASK_UUID_1, COMPONENT_UUID_1);","141","    insertPending(TASK_UUID_2, COMPONENT_UUID_1);","142","    insertPending(TASK_UUID_3, \"PROJECT_2\");","151","    insertPending(TASK_UUID_1, COMPONENT_UUID_1);","152","    insertPending(TASK_UUID_2, COMPONENT_UUID_1);","153","    insertPending(TASK_UUID_3, \"PROJECT_2\");","160","    insertPending(\"p1\");","161","    insertPending(\"p2\");","162","    insertPending(\"p3\");","163","    makeInProgress(\"w1\", alwaysIncreasingSystem2.now(), insertPending(\"i1\"));","164","    makeInProgress(\"w1\", alwaysIncreasingSystem2.now(), insertPending(\"i2\"));","165","    makeInProgress(\"w1\", alwaysIncreasingSystem2.now(), insertPending(\"i3\"));","173","  public void selectWornout_returns_task_pending_with_a_non_null_startedAt() {","174","    insertPending(\"p1\");","175","    makeInProgress(\"w1\", alwaysIncreasingSystem2.now(), insertPending(\"i1\"));","176","    CeQueueDto resetDto = makeInProgress(\"w1\", alwaysIncreasingSystem2.now(), insertPending(\"i2\"));","177","    makeInProgress(\"w1\", alwaysIncreasingSystem2.now(), insertPending(\"i3\"));","178","    reset(db.getSession(), alwaysIncreasingSystem2.now(), resetDto);","179","","180","    List<CeQueueDto> ceQueueDtos = underTest.selectWornout(db.getSession());","181","    assertThat(ceQueueDtos)","182","      .extracting(CeQueueDto::getStatus, CeQueueDto::getUuid)","183","      .containsOnly(tuple(PENDING, resetDto.getUuid()));","184","  }","185","","186","  @Test","188","    insertPending(TASK_UUID_1, COMPONENT_UUID_1);","199","    CeQueueDto[] worker1 = {insertPending(\"u1\"), insertPending(\"u2\"), insertPending(\"u3\"), insertPending(\"u4\")};","200","    CeQueueDto[] worker2 = {insertPending(\"o1\"), insertPending(\"o2\"), insertPending(\"o3\"), insertPending(\"o4\")};","201","    long startedAt = alwaysIncreasingSystem2.now();","202","    makeInProgress(WORKER_UUID_1, startedAt, worker1[0]);","203","    makeInProgress(WORKER_UUID_1, startedAt, worker1[3]);","204","    makeInProgress(WORKER_UUID_2, startedAt, worker2[0]);","205","    makeInProgress(WORKER_UUID_2, startedAt, worker2[3]);","209","    verifyResetToPendingForWorker(worker1[0], WORKER_UUID_1, startedAt);","210","    verifyUnchangedByResetToPendingForWorker(worker1[1]);","211","    verifyUnchangedByResetToPendingForWorker(worker1[2]);","212","    verifyResetToPendingForWorker(worker1[3], WORKER_UUID_1, startedAt);","213","    verifyInProgressUnchangedByResetToPendingForWorker(worker2[0], WORKER_UUID_2, startedAt);","214","    verifyUnchangedByResetToPendingForWorker(worker2[1]);","215","    verifyUnchangedByResetToPendingForWorker(worker2[2]);","216","    verifyInProgressUnchangedByResetToPendingForWorker(worker2[3], WORKER_UUID_2, startedAt);","221","    CeQueueDto[] worker1 = {insertPending(\"u1\"), insertPending(\"u2\"), insertPending(\"u3\"), insertPending(\"u4\")};","222","    CeQueueDto[] worker2 = {insertPending(\"o1\"), insertPending(\"o2\"), insertPending(\"o3\"), insertPending(\"o4\")};","223","    long startedAt = alwaysIncreasingSystem2.now();","224","    makeInProgress(WORKER_UUID_1, startedAt, worker1[0]);","225","    makeInProgress(WORKER_UUID_1, startedAt, worker1[3]);","226","    makeInProgress(WORKER_UUID_2, startedAt, worker2[0]);","227","    makeInProgress(WORKER_UUID_2, startedAt, worker2[3]);","231","    verifyResetByResetTasks(worker1[0], startedAt);","232","    verifyUnchangedByResetToPendingForWorker(worker1[1]);","233","    verifyUnchangedByResetToPendingForWorker(worker1[2]);","234","    verifyResetByResetTasks(worker1[3], startedAt);","235","    verifyResetByResetTasks(worker2[0], startedAt);","236","    verifyUnchangedByResetToPendingForWorker(worker2[1]);","237","    verifyUnchangedByResetToPendingForWorker(worker2[2]);","238","    verifyResetByResetTasks(worker2[3], startedAt);","243","    CeQueueDto[] worker1 = {insertPending(\"u1\"), insertPending(\"u2\"), insertPending(\"u3\"), insertPending(\"u4\")};","244","    CeQueueDto[] worker2 = {insertPending(\"o1\"), insertPending(\"o2\"), insertPending(\"o3\"), insertPending(\"o4\")};","245","    long startedAt = alwaysIncreasingSystem2.now();","246","    makeInProgress(WORKER_UUID_1, startedAt, worker1[0]);","247","    makeInProgress(WORKER_UUID_1, startedAt, worker1[3]);","248","    makeInProgress(WORKER_UUID_2, startedAt, worker2[0]);","249","    makeInProgress(WORKER_UUID_2, startedAt, worker2[3]);","253","    verifyInProgressUnchangedByResetToPendingForWorker(worker1[0], WORKER_UUID_1, startedAt);","254","    verifyUnchangedByResetToPendingForWorker(worker1[1]);","255","    verifyUnchangedByResetToPendingForWorker(worker1[2]);","256","    verifyInProgressUnchangedByResetToPendingForWorker(worker1[3], WORKER_UUID_1, startedAt);","257","    verifyResetByResetTasks(worker2[0], startedAt);","258","    verifyUnchangedByResetToPendingForWorker(worker2[1]);","259","    verifyUnchangedByResetToPendingForWorker(worker2[2]);","260","    verifyResetByResetTasks(worker2[3], startedAt);","263","  private CeQueueDto makeInProgress(String workerUuid, long startedAt, CeQueueDto ceQueueDto) {","264","    CeQueueTesting.makeInProgress(db.getSession(), workerUuid, startedAt, ceQueueDto);","265","    return underTestAlwaysIncreasingSystem2.selectByUuid(db.getSession(), ceQueueDto.getUuid()).get();","266","  }","267","","268","  private void verifyResetByResetTasks(CeQueueDto original, long startedAt) {","270","    assertThat(dto.getStatus()).isEqualTo(PENDING);","271","    assertThat(dto.getStartedAt()).isEqualTo(startedAt);","273","    assertThat(dto.getUpdatedAt()).isGreaterThan(startedAt);","277","  private void verifyResetToPendingForWorker(CeQueueDto original, String workerUuid, long startedAt) {","279","    assertThat(dto.getStatus()).isEqualTo(PENDING);","280","    assertThat(dto.getStartedAt()).isEqualTo(startedAt);","282","    assertThat(dto.getUpdatedAt()).isGreaterThan(startedAt);","283","    assertThat(dto.getWorkerUuid()).isEqualTo(workerUuid);","295","  private void verifyInProgressUnchangedByResetToPendingForWorker(CeQueueDto original, String workerUuid, long startedAt) {","296","    CeQueueDto dto = db.getDbClient().ceQueueDao().selectByUuid(db.getSession(), original.getUuid()).get();","297","    assertThat(dto.getStatus()).isEqualTo(IN_PROGRESS);","298","    assertThat(dto.getStartedAt()).isEqualTo(startedAt);","299","    assertThat(dto.getCreatedAt()).isEqualTo(original.getCreatedAt());","300","    assertThat(dto.getUpdatedAt()).isEqualTo(startedAt);","301","    assertThat(dto.getWorkerUuid()).isEqualTo(workerUuid);","302","  }","303","","309","    makeInProgress(WORKER_UUID_1, 2_232_222L, insertPending(TASK_UUID_1, COMPONENT_UUID_1));","315","    insertPending(TASK_UUID_1, COMPONENT_UUID_1);","317","    insertPending(TASK_UUID_2, COMPONENT_UUID_2);","345","    insertPending(TASK_UUID_1, COMPONENT_UUID_1);","347","    insertPending(TASK_UUID_2, COMPONENT_UUID_1);","369","    insertPending(newCeQueueDto(TASK_UUID_1)","376","    insertPending(newCeQueueDto(TASK_UUID_3)","383","    insertPending(newCeQueueDto(\"TASK_4\")","390","    insertPending(newCeQueueDto(TASK_UUID_2)","397","    insertPending(newCeQueueDto(\"TASK_5\")","419","    insertPending(newCeQueueDto(TASK_UUID_1)","436","    insertPending(newCeQueueDto(TASK_UUID_1)","453","    insertPending(newCeQueueDto(TASK_UUID_1)","471","    insertPending(newCeQueueDto(TASK_UUID_1)","477","    insertPending(newCeQueueDto(TASK_UUID_2)","483","    insertPending(newCeQueueDto(TASK_UUID_3)","496","    insertPending(newCeQueueDto(TASK_UUID_1)","502","    insertPending(newCeQueueDto(TASK_UUID_2)","508","    insertPending(newCeQueueDto(TASK_UUID_3)","523","  private void insertPending(CeQueueDto dto) {","528","  private CeQueueDto insertPending(String uuid) {","532","    dto.setStatus(PENDING);","539","  private CeQueueDto insertPending(String uuid, String componentUuid) {","544","    dto.setStatus(PENDING);"],"delete":["71","  private CeQueueDao underTestAlwaysIncreasingSystem2 = new CeQueueDao(new AlwaysIncreasingSystem2());","80","      .setSubmitterUuid(SUBMITTER_LOGIN)","81","      .setWorkerUuid(WORKER_UUID_1);","102","        assertThat(saved.getWorkerUuid()).isEqualTo(WORKER_UUID_1);","113","    assertThat(saved.getWorkerUuid()).isEqualTo(WORKER_UUID_1);","121","    insert(TASK_UUID_1, COMPONENT_UUID_1, PENDING);","138","    insert(TASK_UUID_1, COMPONENT_UUID_1, PENDING);","139","    insert(TASK_UUID_2, COMPONENT_UUID_1, PENDING);","140","    insert(TASK_UUID_3, \"PROJECT_2\", PENDING);","149","    insert(TASK_UUID_1, COMPONENT_UUID_1, PENDING);","150","    insert(TASK_UUID_2, COMPONENT_UUID_1, PENDING);","151","    insert(TASK_UUID_3, \"PROJECT_2\", PENDING);","158","    insert(\"p1\", CeQueueDto.Status.PENDING);","159","    insert(\"p2\", CeQueueDto.Status.PENDING);","160","    insert(\"p3\", CeQueueDto.Status.PENDING);","161","    insert(\"i1\", CeQueueDto.Status.IN_PROGRESS);","162","    insert(\"i2\", CeQueueDto.Status.IN_PROGRESS);","163","    insert(\"i3\", CeQueueDto.Status.IN_PROGRESS);","172","    insert(TASK_UUID_1, COMPONENT_UUID_1, PENDING);","183","    long startedAt = 2_099_888L;","184","    CeQueueDto u1 = insert(\"u1\", CeQueueDto.Status.IN_PROGRESS, WORKER_UUID_1, startedAt);","185","    CeQueueDto u2 = insert(\"u2\", CeQueueDto.Status.PENDING, WORKER_UUID_1, startedAt);","186","    CeQueueDto u3 = insert(\"u3\", CeQueueDto.Status.PENDING, WORKER_UUID_1, startedAt);","187","    CeQueueDto u4 = insert(\"u4\", CeQueueDto.Status.IN_PROGRESS, WORKER_UUID_1, startedAt);","188","    CeQueueDto o1 = insert(\"o1\", CeQueueDto.Status.IN_PROGRESS, WORKER_UUID_2, startedAt);","189","    CeQueueDto o2 = insert(\"o2\", CeQueueDto.Status.PENDING, WORKER_UUID_2, startedAt);","190","    CeQueueDto o3 = insert(\"o3\", CeQueueDto.Status.PENDING, WORKER_UUID_2, startedAt);","191","    CeQueueDto o4 = insert(\"o4\", CeQueueDto.Status.IN_PROGRESS,  WORKER_UUID_2, startedAt);","195","    verifyResetToPendingForWorker(u1);","196","    verifyUnchangedByResetToPendingForWorker(u2);","197","    verifyUnchangedByResetToPendingForWorker(u3);","198","    verifyResetToPendingForWorker(u4);","199","    verifyUnchangedByResetToPendingForWorker(o1);","200","    verifyUnchangedByResetToPendingForWorker(o2);","201","    verifyUnchangedByResetToPendingForWorker(o3);","202","    verifyUnchangedByResetToPendingForWorker(o4);","207","    long startedAt = 2_099_888L;","208","    CeQueueDto u1 = insert(\"u1\", CeQueueDto.Status.IN_PROGRESS, WORKER_UUID_1, startedAt);","209","    CeQueueDto u2 = insert(\"u2\", CeQueueDto.Status.PENDING, WORKER_UUID_1, startedAt);","210","    CeQueueDto u3 = insert(\"u3\", CeQueueDto.Status.PENDING, WORKER_UUID_1, startedAt);","211","    CeQueueDto u4 = insert(\"u4\", CeQueueDto.Status.IN_PROGRESS, WORKER_UUID_1, startedAt);","212","    CeQueueDto o1 = insert(\"o1\", CeQueueDto.Status.IN_PROGRESS, WORKER_UUID_2, startedAt);","213","    CeQueueDto o2 = insert(\"o2\", CeQueueDto.Status.PENDING, WORKER_UUID_2, startedAt);","214","    CeQueueDto o3 = insert(\"o3\", CeQueueDto.Status.PENDING, WORKER_UUID_2, startedAt);","215","    CeQueueDto o4 = insert(\"o4\", CeQueueDto.Status.IN_PROGRESS, WORKER_UUID_2, startedAt);","219","    verifyResetByResetTasks(u1);","220","    verifyUnchangedByResetToPendingForWorker(u2);","221","    verifyUnchangedByResetToPendingForWorker(u3);","222","    verifyResetByResetTasks(u4);","223","    verifyResetByResetTasks(o1);","224","    verifyUnchangedByResetToPendingForWorker(o2);","225","    verifyUnchangedByResetToPendingForWorker(o3);","226","    verifyResetByResetTasks(o4);","231","    long startedAt = 2_099_888L;","232","    CeQueueDto u1 = insert(\"u1\", CeQueueDto.Status.IN_PROGRESS, WORKER_UUID_1, startedAt);","233","    CeQueueDto u2 = insert(\"u2\", CeQueueDto.Status.PENDING, WORKER_UUID_1, startedAt);","234","    CeQueueDto u3 = insert(\"u3\", CeQueueDto.Status.PENDING, WORKER_UUID_1, startedAt);","235","    CeQueueDto u4 = insert(\"u4\", CeQueueDto.Status.IN_PROGRESS, WORKER_UUID_1, startedAt);","236","    CeQueueDto o1 = insert(\"o1\", CeQueueDto.Status.IN_PROGRESS, WORKER_UUID_2, startedAt);","237","    CeQueueDto o2 = insert(\"o2\", CeQueueDto.Status.PENDING, WORKER_UUID_2, startedAt);","238","    CeQueueDto o3 = insert(\"o3\", CeQueueDto.Status.PENDING, WORKER_UUID_2, startedAt);","239","    CeQueueDto o4 = insert(\"o4\", CeQueueDto.Status.IN_PROGRESS, WORKER_UUID_2, startedAt);","243","    verifyUnchangedByResetToPendingForWorker(u1);","244","    verifyUnchangedByResetToPendingForWorker(u2);","245","    verifyUnchangedByResetToPendingForWorker(u3);","246","    verifyUnchangedByResetToPendingForWorker(u4);","247","    verifyResetByResetTasks(o1);","248","    verifyUnchangedByResetToPendingForWorker(o2);","249","    verifyUnchangedByResetToPendingForWorker(o3);","250","    verifyResetByResetTasks(o4);","253","  private void verifyResetByResetTasks(CeQueueDto original) {","255","    assertThat(dto.getStatus()).isEqualTo(CeQueueDto.Status.PENDING).isNotEqualTo(original.getStatus());","256","    assertThat(dto.getStartedAt()).isNull();","258","    assertThat(dto.getUpdatedAt()).isGreaterThan(original.getUpdatedAt());","262","  private void verifyResetToPendingForWorker(CeQueueDto original) {","264","    assertThat(dto.getStatus()).isEqualTo(CeQueueDto.Status.PENDING);","265","    assertThat(dto.getStartedAt()).isNull();","267","    assertThat(dto.getUpdatedAt()).isGreaterThan(original.getUpdatedAt());","268","    assertThat(dto.getWorkerUuid()).isEqualTo(original.getWorkerUuid());","285","    insert(TASK_UUID_1, COMPONENT_UUID_1, IN_PROGRESS);","291","    insert(TASK_UUID_1, COMPONENT_UUID_1, PENDING);","293","    insert(TASK_UUID_2, COMPONENT_UUID_2, PENDING);","321","    insert(TASK_UUID_1, COMPONENT_UUID_1, PENDING);","323","    insert(TASK_UUID_2, COMPONENT_UUID_1, PENDING);","345","    insert(newCeQueueDto(TASK_UUID_1)","352","    insert(newCeQueueDto(TASK_UUID_3)","359","    insert(newCeQueueDto(\"TASK_4\")","366","    insert(newCeQueueDto(TASK_UUID_2)","373","    insert(newCeQueueDto(\"TASK_5\")","395","    insert(newCeQueueDto(TASK_UUID_1)","412","    insert(newCeQueueDto(TASK_UUID_1)","429","    insert(newCeQueueDto(TASK_UUID_1)","447","    insert(newCeQueueDto(TASK_UUID_1)","453","    insert(newCeQueueDto(TASK_UUID_2)","459","    insert(newCeQueueDto(TASK_UUID_3)","472","    insert(newCeQueueDto(TASK_UUID_1)","478","    insert(newCeQueueDto(TASK_UUID_2)","484","    insert(newCeQueueDto(TASK_UUID_3)","499","  private void insert(CeQueueDto dto) {","504","  private CeQueueDto insert(String uuid, CeQueueDto.Status status) {","508","    dto.setStatus(status);","515","  private CeQueueDto insert(String uuid, CeQueueDto.Status status, String workerUuid, Long startedAt) {","516","    CeQueueDto dto = new CeQueueDto();","517","    dto.setUuid(uuid);","518","    dto.setTaskType(CeTaskTypes.REPORT);","519","    dto.setStatus(status);","520","    dto.setSubmitterUuid(\"henri\");","521","    dto.setWorkerUuid(workerUuid);","522","    dto.setStartedAt(startedAt);","523","    underTestAlwaysIncreasingSystem2.insert(db.getSession(), dto);","524","    db.getSession().commit();","525","    return dto;","526","  }","527","","528","  private CeQueueDto insert(String uuid, String componentUuid, CeQueueDto.Status status) {","533","    dto.setStatus(status);"]}],"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/ce\/CeQueueMapper.xml":[{"add":["171","      and cq.started_at is null","198","  <select id=\"selectWornout\" resultType=\"org.sonar.db.ce.CeQueueDto\">","199","    select","200","      <include refid=\"columns\"\/>","201","    from","202","      ce_queue cq","203","    where","204","      cq.status = 'PENDING'","205","      and cq.started_at is not null","206","  <\/select>","207",""],"delete":["205","      worker_uuid,","207","      started_at,","217","      #{workerUuid,jdbcType=VARCHAR},","219","      #{startedAt,jdbcType=BIGINT},","228","      started_at=NULL,","257","      started_at=NULL,","274","      started_at=NULL,"]}],"server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/queue\/InternalCeQueueImpl.java":[{"add":["25","import java.util.List;","81","        dbSession.commit();","169","  public void cancelWornOuts() {","170","    try (DbSession dbSession = dbClient.openSession(false)) {","171","      List<CeQueueDto> wornOutTasks = dbClient.ceQueueDao().selectWornout(dbSession);","172","      wornOutTasks.forEach(queueDto -> {","173","        CeActivityDto activityDto = new CeActivityDto(queueDto);","174","        activityDto.setStatus(CeActivityDto.Status.CANCELED);","175","        updateQueueStatus(CeActivityDto.Status.CANCELED, activityDto);","176","        remove(dbSession, queueDto, activityDto);","177","      });","178","    }","179","  }","180","","181","  @Override"],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/ce\/CeQueueDao.java":[{"add":["91","  public List<CeQueueDto> selectWornout(DbSession dbSession) {","92","    return mapper(dbSession).selectWornout();","93","  }","94",""],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/ce\/CeQueueDto.java":[{"add":["100","  \/**","101","   * Accessed by MyBatis through reflexion. Field is otherwise read-only.","102","   *\/","103","  private  void setWorkerUuid(@Nullable String workerUuid) {","112","  \/**","113","   * Accessed by MyBatis through reflexion. Field is otherwise read-only.","114","   *\/","115","  private void setStartedAt(@Nullable Long l) {"],"delete":["100","  public CeQueueDto setWorkerUuid(@Nullable String workerUuid) {","101","    checkArgument(workerUuid == null || workerUuid.length() <= 40, \"worker uuid is too long: %s\", workerUuid);","103","    return this;","111","  public CeQueueDto setStartedAt(@Nullable Long l) {","113","    return this;"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/ce\/UpdateIfTest.java":[{"add":[],"delete":[]}],"server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/cleaning\/CeCleaningSchedulerImpl.java":[{"add":["58","    \/\/ So we skip resetting and cancelling tasks in queue","62","        cancelWornOuts();","77","","78","  private void cancelWornOuts() {","79","    try {","80","      LOG.debug(\"Cancelling any worn out task\");","81","      internalCeQueue.cancelWornOuts();","82","    } catch (Exception e) {","83","      LOG.warn(\"Failed to cancel worn out tasks\", e);","84","    }","85","  }"],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/ce\/CeQueueMapper.java":[{"add":["50","   * Select all pending tasks which have already been started.","51","   *\/","52","  List<CeQueueDto> selectWornout();","53","","54","  \/**"],"delete":[]}],"server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/queue\/InternalCeQueue.java":[{"add":["70","  void cancelWornOuts();","71",""],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/ce\/UpdateIf.java":[{"add":["25","import static com.google.common.base.Preconditions.checkArgument;","41","      long startedAt, long updatedAt) {","42","      checkArgument(workerUuid == null || workerUuid.length() <= 40, \"worker uuid is too long: %s\", workerUuid);"],"delete":["40","      Long startedAt, long updatedAt) {","56","    @CheckForNull"]}],"server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/queue\/InternalCeQueueImplTest.java":[{"add":["45","import org.sonar.db.ce.CeQueueTesting;","262","    CeQueueDto ceQueueDto = db.getDbClient().ceQueueDao().insert(session, new CeQueueDto()","265","      .setStatus(CeQueueDto.Status.PENDING));","266","    makeInProgress(ceQueueDto, \"Dustin\");","319","  public void peek_ignores_in_progress_tasks() {","320","    CeQueueDto dto = db.getDbClient().ceQueueDao().insert(session, new CeQueueDto()","323","      .setStatus(CeQueueDto.Status.PENDING));","324","    makeInProgress(dto, \"foo\");","327","    assertThat(underTest.peek(WORKER_UUID_1)).isEmpty();","352","    insertPending(\"u0\"); \/\/ add a pending one that will be picked so that u1 isn't peek and status reset is visible in DB","353","    CeQueueDto u1 = insertPending(\"u1\");\/\/ will be picked-because older than any of the reset ones","364","    insertPending(\"u0\"); \/\/ add a pending one that will be picked so that u1 isn't peek and status reset is visible in DB","396","      .setStatus(CeQueueDto.Status.PENDING);","398","    makeInProgress(dto, workerUuid);","400","    return db.getDbClient().ceQueueDao().selectByUuid(session, uuid).get();","403","  private CeQueueDto insertPending(String uuid) {","407","      .setStatus(CeQueueDto.Status.PENDING);","457","    CeQueueDto u1 = insertCeQueueDto(\"u1\");","458","    CeQueueDto u2 = insertCeQueueDto(\"u2\");","459","    CeQueueDto u6 = insertInProgress(\"u6\", \"worker1\");","460","    CeQueueDto u7 = insertInProgress(\"u7\", \"worker2\");","461","    CeQueueDto u8 = insertInProgress(\"u8\", \"worker3\");","479","    CeQueueDto u1 = insertCeQueueDto(\"u1\");","480","    CeQueueDto u2 = insertCeQueueDto(\"u2\");","481","    CeQueueDto u6 = insertInProgress(\"u6\", \"worker1\");","482","    CeQueueDto u7 = insertInProgress(\"u7\", \"worker2\");","483","    CeQueueDto u8 = insertInProgress(\"u8\", \"worker3\");","499","    CeQueueDto u1 = insertCeQueueDto(\"u1\");","500","    CeQueueDto u2 = insertCeQueueDto(\"u2\");","501","    CeQueueDto u6 = insertInProgress(\"u6\", \"worker1\");","502","    CeQueueDto u7 = insertInProgress(\"u7\", \"worker2\");","503","    CeQueueDto u8 = insertInProgress(\"u8\", \"worker3\");","526","    assertThat(dto.getStartedAt()).isEqualTo(original.getStartedAt());","538","  private CeQueueDto insertCeQueueDto(String uuid) {","542","      .setStatus(CeQueueDto.Status.PENDING);","609","  private CeQueueDto makeInProgress(CeQueueDto ceQueueDto, String workerUuid) {","610","    CeQueueTesting.makeInProgress(session, workerUuid, system2.now(), ceQueueDto);","611","    return db.getDbClient().ceQueueDao().selectByUuid(session, ceQueueDto.getUuid()).get();","612","  }","613",""],"delete":["261","    db.getDbClient().ceQueueDao().insert(session, new CeQueueDto()","264","      .setStatus(CeQueueDto.Status.PENDING)","265","      .setWorkerUuid(\"Dustin\"));","318","  public void peek_overrides_workerUuid_to_argument() {","319","    db.getDbClient().ceQueueDao().insert(session, new CeQueueDto()","322","      .setStatus(CeQueueDto.Status.PENDING)","323","      .setWorkerUuid(\"must be overriden\"));","326","    underTest.peek(WORKER_UUID_1);","327","","328","    CeQueueDto ceQueueDto = db.getDbClient().ceQueueDao().selectByUuid(session, \"uuid\").get();","329","    assertThat(ceQueueDto.getWorkerUuid()).isEqualTo(WORKER_UUID_1);","354","    insertPending(\"u0\", \"doesn't matter\"); \/\/ add a pending one that will be picked so that u1 isn't peek and status reset is visible in DB","355","    CeQueueDto u1 = insertPending(\"u1\", WORKER_UUID_1);\/\/ will be picked-because older than any of the reset ones","366","    insertPending(\"u0\", \"doesn't matter\"); \/\/ add a pending one that will be picked so that u1 isn't peek and status reset is visible in DB","398","      .setStatus(CeQueueDto.Status.IN_PROGRESS)","399","      .setWorkerUuid(workerUuid);","402","    return dto;","405","  private CeQueueDto insertPending(String uuid, String workerUuid) {","409","      .setStatus(CeQueueDto.Status.PENDING)","410","      .setWorkerUuid(workerUuid);","429","  public void cancel_copies_workerUuid() {","430","    CeQueueDto ceQueueDto = db.getDbClient().ceQueueDao().insert(session, new CeQueueDto()","431","      .setUuid(\"uuid\")","432","      .setTaskType(\"foo\")","433","      .setStatus(CeQueueDto.Status.PENDING)","434","      .setWorkerUuid(\"Dustin\"));","435","    db.commit();","436","","437","    underTest.cancel(db.getSession(), ceQueueDto);","438","","439","    CeActivityDto dto = db.getDbClient().ceActivityDao().selectByUuid(db.getSession(), \"uuid\").get();","440","    assertThat(dto.getWorkerUuid()).isEqualTo(\"Dustin\");","441","  }","442","","443","  @Test","475","    CeQueueDto u1 = insertCeQueueDto(\"u1\", CeQueueDto.Status.PENDING, null);","476","    CeQueueDto u2 = insertCeQueueDto(\"u2\", CeQueueDto.Status.PENDING, \"worker1\");","477","    CeQueueDto u3 = insertCeQueueDto(\"u3\", CeQueueDto.Status.PENDING, null);","478","    CeQueueDto u4 = insertCeQueueDto(\"u4\", CeQueueDto.Status.PENDING, \"worker2\");","479","    CeQueueDto u5 = insertCeQueueDto(\"u5\", CeQueueDto.Status.IN_PROGRESS, null);","480","    CeQueueDto u6 = insertCeQueueDto(\"u6\", CeQueueDto.Status.IN_PROGRESS, \"worker1\");","481","    CeQueueDto u7 = insertCeQueueDto(\"u7\", CeQueueDto.Status.IN_PROGRESS, \"worker2\");","482","    CeQueueDto u8 = insertCeQueueDto(\"u8\", CeQueueDto.Status.IN_PROGRESS, \"worker3\");","489","    verifyUnmodified(u3);","490","    verifyUnmodified(u4);","493","    verifyReset(u5);","503","    CeQueueDto u1 = insertCeQueueDto(\"u1\", CeQueueDto.Status.PENDING, null);","504","    CeQueueDto u2 = insertCeQueueDto(\"u2\", CeQueueDto.Status.PENDING, \"worker1\");","505","    CeQueueDto u3 = insertCeQueueDto(\"u3\", CeQueueDto.Status.PENDING, null);","506","    CeQueueDto u4 = insertCeQueueDto(\"u4\", CeQueueDto.Status.PENDING, \"worker2\");","507","    CeQueueDto u5 = insertCeQueueDto(\"u5\", CeQueueDto.Status.IN_PROGRESS, null);","508","    CeQueueDto u6 = insertCeQueueDto(\"u6\", CeQueueDto.Status.IN_PROGRESS, \"worker1\");","509","    CeQueueDto u7 = insertCeQueueDto(\"u7\", CeQueueDto.Status.IN_PROGRESS, \"worker2\");","510","    CeQueueDto u8 = insertCeQueueDto(\"u8\", CeQueueDto.Status.IN_PROGRESS, \"worker3\");","517","    verifyUnmodified(u3);","518","    verifyUnmodified(u4);","521","    verifyReset(u5);","529","    CeQueueDto u1 = insertCeQueueDto(\"u1\", CeQueueDto.Status.PENDING, null);","530","    CeQueueDto u2 = insertCeQueueDto(\"u2\", CeQueueDto.Status.PENDING, \"worker1\");","531","    CeQueueDto u3 = insertCeQueueDto(\"u3\", CeQueueDto.Status.PENDING, null);","532","    CeQueueDto u4 = insertCeQueueDto(\"u4\", CeQueueDto.Status.PENDING, \"worker2\");","533","    CeQueueDto u5 = insertCeQueueDto(\"u5\", CeQueueDto.Status.IN_PROGRESS, null);","534","    CeQueueDto u6 = insertCeQueueDto(\"u6\", CeQueueDto.Status.IN_PROGRESS, \"worker1\");","535","    CeQueueDto u7 = insertCeQueueDto(\"u7\", CeQueueDto.Status.IN_PROGRESS, \"worker2\");","536","    CeQueueDto u8 = insertCeQueueDto(\"u8\", CeQueueDto.Status.IN_PROGRESS, \"worker3\");","543","    verifyUnmodified(u3);","544","    verifyUnmodified(u4);","547","    verifyReset(u5);","562","    \/\/ StartedAt must be null","563","    assertThat(dto.getStartedAt()).isNull();","575","  private void verifyCanceled(CeQueueDto original) {","576","    assertThat(db.getDbClient().ceQueueDao().selectByUuid(db.getSession(), original.getUuid())).isEmpty();","577","    CeActivityDto dto = db.getDbClient().ceActivityDao().selectByUuid(db.getSession(), original.getUuid()).get();","578","    assertThat(dto.getStatus()).isEqualTo(CeActivityDto.Status.CANCELED);","579","    assertThat(dto.getWorkerUuid()).isEqualTo(original.getWorkerUuid());","580","  }","581","","582","  private CeQueueDto insertCeQueueDto(String uuid, CeQueueDto.Status status, String workerUuid) {","586","      .setStatus(status)","587","      .setWorkerUuid(workerUuid);"]}],"server\/sonar-ce-common\/src\/main\/java\/org\/sonar\/ce\/queue\/CeQueueImpl.java":[{"add":["160","  CeTask loadTask(DbSession dbSession, CeQueueDto dto) {"],"delete":["156","    dto.setStartedAt(null);","161","  protected CeTask loadTask(DbSession dbSession, CeQueueDto dto) {"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/ce\/ws\/TaskFormatterTest.java":[{"add":["41","import static org.sonar.db.ce.CeQueueTesting.makeInProgress;","88","    dto.setStatus(CeQueueDto.Status.PENDING);","92","    db.getDbClient().ceQueueDao().insert(db.getSession(), dto);","93","    makeInProgress(db.getSession(), \"workerUuid\", 1_958_000_000_000L, dto);","94","    CeQueueDto inProgress = db.getDbClient().ceQueueDao().selectByUuid(db.getSession(), dto.getUuid()).get();","96","    Ce.Task wsTask = underTest.formatQueue(db.getSession(), inProgress);","135","    dto.setStatus(CeQueueDto.Status.PENDING);","137","    db.getDbClient().ceQueueDao().insert(db.getSession(), dto);","138","    makeInProgress(db.getSession(), \"workerUuid\", startedAt, dto);","139","    CeQueueDto inProgress = db.getDbClient().ceQueueDao().selectByUuid(db.getSession(), dto.getUuid()).get();","142","    Ce.Task wsTask = underTest.formatQueue(db.getSession(), inProgress);"],"delete":["87","    dto.setStatus(CeQueueDto.Status.IN_PROGRESS);","89","    dto.setStartedAt(1_451_000_000_000L);","93","    Ce.Task wsTask = underTest.formatQueue(db.getSession(), dto);","132","    dto.setStatus(CeQueueDto.Status.IN_PROGRESS);","134","    dto.setStartedAt(startedAt);","137","    Ce.Task wsTask = underTest.formatQueue(db.getSession(), dto);"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/ce\/CeActivityDaoTest.java":[{"add":["43","import static org.sonar.db.ce.CeQueueDto.Status.PENDING;","44","import static org.sonar.db.ce.CeQueueTesting.makeInProgress;","68","    assertThat(dto.getSubmittedAt()).isEqualTo(1_450_000_000_000L);","348","    CeQueueDto creating = new CeQueueDto();","349","    creating.setUuid(uuid);","350","    creating.setStatus(PENDING);","351","    creating.setTaskType(type);","352","    creating.setComponentUuid(componentUuid);","353","    creating.setSubmitterUuid(\"submitter uuid\");","354","    creating.setCreatedAt(1_300_000_000_000L);","356","    db.getDbClient().ceQueueDao().insert(dbSession, creating);","357","    makeInProgress(dbSession, \"worker uuid\", 1_400_000_000_000L, creating);","358","","359","    CeQueueDto ceQueueDto = db.getDbClient().ceQueueDao().selectByUuid(dbSession, uuid).get();","360","","361","    CeActivityDto dto = new CeActivityDto(ceQueueDto);","394","      .map(CeActivityToUuid.INSTANCE::apply)","395","      .collect(MoreCollectors.toList());"],"delete":["66","    assertThat(dto.getSubmittedAt()).isEqualTo(1_300_000_000_000L);","346","    CeQueueDto queueDto = new CeQueueDto();","347","    queueDto.setUuid(uuid);","348","    queueDto.setTaskType(type);","349","    queueDto.setComponentUuid(componentUuid);","350","    queueDto.setSubmitterUuid(\"submitter uuid\");","351","    queueDto.setWorkerUuid(\"worker uuid\");","352","    queueDto.setCreatedAt(1_300_000_000_000L);","354","    CeActivityDto dto = new CeActivityDto(queueDto);","387","        .map(CeActivityToUuid.INSTANCE::apply)","388","        .collect(MoreCollectors.toList());"]}]}},"8d67372e016653106df9fccd746409e3169c63de":{"changes":{"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/PurgeOrphansForCETest.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/PurgeOrphansForCE.java":"MODIFY"},"diff":{"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/PurgeOrphansForCETest.java":[{"add":["21","import com.google.common.collect.ImmutableSet;","23","import java.util.Random;","24","import java.util.Set;","25","import java.util.stream.IntStream;","36","  private static final Set<String> CE_TABLES = ImmutableSet.of(\"CE_QUEUE\", \"CE_ACTIVITY\");","37","  private static final Set<String> CE_CHILD_TABLES = ImmutableSet.of(","38","    \"CE_TASK_CHARACTERISTICS\", \"CE_TASK_INPUT\", \"CE_SCANNER_CONTEXT\");","39","","43","  private Random random = new Random();","48","  public void no_effect_on_empty_db() throws SQLException {","53","  public void delete_rows_from_CE_child_tables_when_ce_tables_are_empty() throws SQLException {","54","    int count = 1 + random.nextInt(5);","55","    IntStream.range(0, count)","56","      .forEach(i -> {","57","        String uuid = i + randomAlphanumeric(10);","58","        insertInChildTables(uuid);","59","      });","60","    CE_CHILD_TABLES.forEach(tableName -> assertThat(db.countRowsOfTable(tableName)).isEqualTo(count));","64","    assertThat(db.countRowsOfTable(\"CE_ACTIVITY\")).isZero();","65","    assertThat(db.countRowsOfTable(\"CE_QUEUE\")).isZero();","66","    CE_CHILD_TABLES.forEach(tableName -> assertThat(db.countRowsOfTable(tableName)).isZero());","70","  public void do_not_delete_rows_from_CE_child_tables_if_parent_in_CE_ACTIVITY() throws SQLException {","71","    int count = 1 + random.nextInt(5);","72","    IntStream.range(0, count)","73","      .forEach(i -> {","74","        String uuid = i + randomAlphanumeric(10);","75","        insertCeActivity(uuid);","76","        insertInChildTables(uuid);","77","      });","78","    CE_CHILD_TABLES.forEach(tableName -> assertThat(db.countRowsOfTable(tableName)).isEqualTo(count));","82","    assertThat(db.countRowsOfTable(\"CE_ACTIVITY\")).isEqualTo(count);","83","    assertThat(db.countRowsOfTable(\"CE_QUEUE\")).isZero();","84","    CE_CHILD_TABLES.forEach(tableName -> assertThat(db.countRowsOfTable(tableName)).isEqualTo(count));","88","  public void do_not_delete_rows_from_CE_child_tables_if_parent_in_CE_QUEUE() throws SQLException {","89","    int count = 1 + random.nextInt(5);","90","    IntStream.range(0, count)","91","      .forEach(i -> {","92","        String uuid = i + randomAlphanumeric(10);","93","        insertCeQueue(uuid);","94","        insertInChildTables(uuid);","95","      });","96","    CE_CHILD_TABLES.forEach(tableName -> assertThat(db.countRowsOfTable(tableName)).isEqualTo(count));","100","    assertThat(db.countRowsOfTable(\"CE_ACTIVITY\")).isZero();","101","    assertThat(db.countRowsOfTable(\"CE_QUEUE\")).isEqualTo(count);","102","    CE_CHILD_TABLES.forEach(tableName -> assertThat(db.countRowsOfTable(tableName)).isEqualTo(count));","103","  }","105","  @Test","106","  public void delete_only_orphan_rows_from_ce_child_tables() throws SQLException {","107","    int withCeActivityParent = 1 + new Random().nextInt(10);","108","    int withCeQueueParent = 1 + new Random().nextInt(10);","109","    int orphans = 1 + new Random().nextInt(10);","110","    IntStream.range(0, withCeActivityParent)","111","      .forEach(i -> {","112","        String uuid = \"ca_\" + i;","113","        insertCeActivity(uuid);","114","        insertInChildTables(uuid);","115","      });","116","    IntStream.range(0, withCeQueueParent)","117","      .forEach(i -> {","118","        String uuid = \"cq_\" + i;","119","        insertCeQueue(uuid);","120","        insertInChildTables(uuid);","121","      });","122","    IntStream.range(0, orphans)","123","      .forEach(i -> {","124","        String uuid = \"orph_\" + i;","125","        insertInChildTables(uuid);","126","      });","128","    underTest.execute();","129","","130","    assertThat(db.countRowsOfTable(\"CE_ACTIVITY\")).isEqualTo(withCeActivityParent);","131","    assertThat(db.countRowsOfTable(\"CE_QUEUE\")).isEqualTo(withCeQueueParent);","132","    CE_CHILD_TABLES.forEach(tableName -> assertThat(db.countRowsOfTable(tableName)).isEqualTo(withCeActivityParent + withCeQueueParent));","133","    CE_CHILD_TABLES.forEach(tableName -> assertThat(db.select(\"select task_uuid as \\\"TASK_UUID\\\" from \" + tableName))","134","      .extracting(t -> (String) t.get(\"TASK_UUID\"))","135","      .allMatch(t -> t.startsWith(\"ca_\") || t.startsWith(\"cq_\")));","136","  }","137","","138","  @Test","139","  public void reentrant_on_empty_db() throws SQLException {","140","    underTest.execute();","141","","142","    underTest.execute();","143","  }","144","","145","  @Test","146","  public void reentrant_on_non_empty_db() throws SQLException {","147","    delete_only_orphan_rows_from_ce_child_tables();","148","","149","    underTest.execute();","167","      \"UPDATED_AT\", now);","168","  }","170","  private void insertCeQueue(String uuid) {","171","    long now = System.currentTimeMillis();","172","","173","    db.executeInsert(\"CE_QUEUE\",","174","      \"UUID\", uuid,","175","      \"TASK_TYPE\", randomAlphanumeric(15),","176","      \"STATUS\", randomAlphanumeric(15),","177","      \"EXECUTION_COUNT\", 0,","178","      \"CREATED_AT\", now,","179","      \"UPDATED_AT\", now);","180","  }","181","","182","  private void insertInChildTables(String uuid) {","183","    insertCeCharacteristics(uuid);"],"delete":["39","  public void test_is_reentrant() throws SQLException {","40","    underTest.execute();","45","  public void purge_should_not_delete_data_containing() throws SQLException {","46","    for (int i = 0; i < 10 ; i++) {","47","      insertCeActivity(randomAlphanumeric(15));","48","    }","52","    assertThat(db.countRowsOfTable(\"CE_ACTIVITY\")).isEqualTo(10);","53","    assertThat(db.countRowsOfTable(\"CE_TASK_CHARACTERISTICS\")).isEqualTo(10 * 10);","54","    assertThat(db.countRowsOfTable(\"CE_TASK_INPUT\")).isEqualTo(10);","55","    assertThat(db.countRowsOfTable(\"CE_SCANNER_CONTEXT\")).isEqualTo(10);","59","  public void purge_should_delete_orphans() throws SQLException {","60","    for (int i = 0; i < 10 ; i++) {","61","      uuid = randomAlphanumeric(20);","62","","63","      insertCeCharacteristics(uuid);","64","      insertCeScannerContext(uuid);","65","      insertCeTaskInput(uuid);","66","    }","70","    assertThat(db.countRowsOfTable(\"CE_ACTIVITY\")).isEqualTo(0);","71","    assertThat(db.countRowsOfTable(\"CE_TASK_CHARACTERISTICS\")).isEqualTo(0);","72","    assertThat(db.countRowsOfTable(\"CE_TASK_INPUT\")).isEqualTo(0);","73","    assertThat(db.countRowsOfTable(\"CE_SCANNER_CONTEXT\")).isEqualTo(0);","77","  public void purge_should_keep_existant_ce_activity_and_delete_orphans() throws SQLException {","78","    for (int i = 0; i < 5 ; i++) {","79","      insertCeActivity(randomAlphanumeric(15));","80","      uuid = randomAlphanumeric(20);","81","","82","      insertCeCharacteristics(uuid);","83","      insertCeScannerContext(uuid);","84","      insertCeTaskInput(uuid);","85","    }","89","    assertThat(db.countRowsOfTable(\"CE_ACTIVITY\")).isEqualTo(5);","90","    assertThat(db.countRowsOfTable(\"CE_TASK_CHARACTERISTICS\")).isEqualTo(5 * 10);","91","    assertThat(db.countRowsOfTable(\"CE_TASK_INPUT\")).isEqualTo(5);","92","    assertThat(db.countRowsOfTable(\"CE_SCANNER_CONTEXT\")).isEqualTo(5);","94","    assertThat(","95","      db.selectFirst(\"select count(*) as count from ce_task_characteristics ctc where length(task_uuid) = 20\")","96","        .get(\"COUNT\")","97","    ).isEqualTo(0L);","98","    assertThat(","99","      db.selectFirst(\"select count(*) as count from ce_task_input ctc where length(task_uuid) = 20\")","100","        .get(\"COUNT\")","101","    ).isEqualTo(0L);","102","    assertThat(","103","      db.selectFirst(\"select count(*) as count from ce_scanner_context ctc where length(task_uuid) = 20\")","104","        .get(\"COUNT\")","105","    ).isEqualTo(0L);","107","    assertThat(","108","      db.selectFirst(\"select count(*) as count from ce_task_characteristics ctc where not exists (select 1 from ce_activity ca where ca.uuid = ctc.task_uuid)\")","109","        .get(\"COUNT\")","110","    ).isEqualTo(0L);","111","    assertThat(","112","      db.selectFirst(\"select count(*) as count from ce_task_input cti where not exists (select 1 from ce_activity ca where ca.uuid = cti.task_uuid)\")","113","        .get(\"COUNT\")","114","    ).isEqualTo(0L);","115","    assertThat(","116","      db.selectFirst(\"select count(*) as count from ce_scanner_context csc where not exists (select 1 from ce_activity ca where ca.uuid = csc.task_uuid)\")","117","        .get(\"COUNT\")","118","    ).isEqualTo(0L);","136","      \"UPDATED_AT\", now","137","    );","141","","142","    for (int i = 0; i < 10; i++) {","143","      insertCeCharacteristics(uuid);","144","    }"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/PurgeOrphansForCE.java":[{"add":["26","import static java.util.Arrays.asList;","27","","41","    for (String tableName : asList(\"ce_task_characteristics\", \"ce_task_input\", \"ce_scanner_context\")) {","42","      deleteOrphansFrom(context, tableName);","46","  private void deleteOrphansFrom(Context context, String tableName) throws SQLException {","47","    String query = buildDeleteFromQuery(tableName, \"c\",","48","      \"not exists (select 1 from ce_activity ca where ca.uuid = c.task_uuid)\" +","49","        \"and not exists (select 1 from ce_queue cq where cq.uuid = c.task_uuid)\");","51","    context.prepareUpsert(query)","56","  private String buildDeleteFromQuery(String tableName, String alias, String whereClause) {","57","    String dialectId = getDialect().getId();","58","    if (\"mssql\".equals(dialectId) || \"mysql\".equals(dialectId)) {","59","      return \"delete \" + alias + \" from \" + tableName + \" as \" + alias + \" where \" + whereClause;","60","    }","61","    return \"delete from \" + tableName + \" \" + alias + \" where \" + whereClause;","63",""],"delete":["39","    switch (getDialect().getId()) {","40","      case \"mssql\":","41","      case \"mysql\":","42","        executeForMySQLAndMsSQL(context);","43","        break;","44","      default:","45","        executeGeneric(context);","46","        break;","50","  private static void executeGeneric(Context context) throws SQLException {","51","    context.prepareUpsert(\"delete from ce_task_characteristics ctc where not exists (select 1 from ce_activity ca where ca.uuid = ctc.task_uuid)\")","52","      .execute()","53","      .commit();","55","    context.prepareUpsert(\"delete from ce_task_input cti where not exists (select 1 from ce_activity ca where ca.uuid = cti.task_uuid)\")","56","      .execute()","57","      .commit();","58","","59","    context.prepareUpsert(\"delete from ce_scanner_context csc where not exists (select 1 from ce_activity ca where ca.uuid = csc.task_uuid)\")","64","  private static void executeForMySQLAndMsSQL(Context context) throws SQLException {","65","    context.prepareUpsert(\"delete ctc from ce_task_characteristics as ctc where not exists (select 1 from ce_activity ca where ca.uuid = ctc.task_uuid)\")","66","      .execute()","67","      .commit();","68","","69","    context.prepareUpsert(\"delete cti from ce_task_input as cti where not exists (select 1 from ce_activity ca where ca.uuid = cti.task_uuid)\")","70","      .execute()","71","      .commit();","72","","73","    context.prepareUpsert(\"delete csc from ce_scanner_context as csc where not exists (select 1 from ce_activity ca where ca.uuid = csc.task_uuid)\")","74","      .execute()","75","      .commit();","76",""]}]}},"b922a7648b5a6d4a26a659900ceb8644cbc5c10b":{"changes":{"server\/sonar-webserver-webapi\/src\/test\/resources\/org\/sonar\/server\/issue\/ws\/SearchActionTest\/filter_by_leak_period_has_no_effect_on_prs.json":"ADD","server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionComponentsTest.java":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/issue\/ws\/SearchAction.java":"MODIFY","server\/sonar-webserver-es\/src\/main\/java\/org\/sonar\/server\/issue\/index\/IssueQueryFactory.java":"MODIFY","server\/sonar-webserver-es\/src\/test\/java\/org\/sonar\/server\/issue\/index\/IssueQueryFactoryTest.java":"MODIFY","server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/hotspot\/ws\/SearchActionTest.java":"MODIFY","server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionTest.java":"MODIFY","server\/sonar-webserver-es\/src\/main\/java\/org\/sonar\/server\/issue\/index\/IssueIndex.java":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/hotspot\/ws\/SearchAction.java":"MODIFY","server\/sonar-webserver-webapi\/src\/test\/resources\/org\/sonar\/server\/issue\/ws\/SearchActionTest\/filter_by_leak_period.json":"ADD"},"diff":{"server\/sonar-webserver-webapi\/src\/test\/resources\/org\/sonar\/server\/issue\/ws\/SearchActionTest\/filter_by_leak_period_has_no_effect_on_prs.json":[{"add":[],"delete":[]}],"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionComponentsTest.java":[{"add":["170","      .containsExactlyInAnyOrder(issue1.getKey());","175","      .containsExactlyInAnyOrder(issue1.getKey());","486","      .extracting(Issue::getKey, Issue::getComponent, Issue::getProject, Issue::getBranch, Issue::hasBranch)","487","      .containsExactlyInAnyOrder(","488","        tuple(issueOnProject1Branch1.getKey(), project1Branch1.getKey(), project1Branch1.getKey(), project1Branch1.getBranch(), true),","489","        tuple(issueOnFileOnProject1Branch1.getKey(), fileOnProject1Branch1.getKey(), project1Branch1.getKey(), project1Branch1.getBranch(), true),","490","        tuple(issueOnProject2.getKey(), project2.getKey(), project2.getKey(), \"\", false));","498","      .extracting(Issue::getKey, Issue::getComponent, Issue::getBranch)","499","      .containsExactlyInAnyOrder(","500","        tuple(issueOnProject1Branch1.getKey(), project1Branch1.getKey(), project1Branch1.getBranch()),","501","        tuple(issueOnFileOnProject1Branch1.getKey(), fileOnProject1Branch1.getKey(), project1Branch1.getBranch()));","672","      .extracting(Issue::getKey, Issue::getComponent, Issue::getBranch)","673","      .containsExactlyInAnyOrder(tuple(branchIssue.getKey(), branchFile.getKey(), branchFile.getBranch()));","680","      .extracting(Issue::getKey, Issue::getComponent, Issue::getBranch)","681","      .containsExactlyInAnyOrder(tuple(branchIssue.getKey(), branchFile.getKey(), branchFile.getBranch()));","688","      .extracting(Issue::getKey, Issue::getComponent, Issue::getBranch)","689","      .containsExactlyInAnyOrder(tuple(branchIssue.getKey(), branchFile.getKey(), branchFile.getBranch()));"],"delete":["170","        .containsExactlyInAnyOrder(issue1.getKey());","175","        .containsExactlyInAnyOrder(issue1.getKey());","486","        .extracting(Issue::getKey, Issue::getComponent, Issue::getProject, Issue::getBranch, Issue::hasBranch)","487","        .containsExactlyInAnyOrder(","488","          tuple(issueOnProject1Branch1.getKey(), project1Branch1.getKey(), project1Branch1.getKey(), project1Branch1.getBranch(), true),","489","          tuple(issueOnFileOnProject1Branch1.getKey(), fileOnProject1Branch1.getKey(), project1Branch1.getKey(), project1Branch1.getBranch(), true),","490","          tuple(issueOnProject2.getKey(), project2.getKey(), project2.getKey(), \"\", false));","498","        .extracting(Issue::getKey, Issue::getComponent, Issue::getBranch)","499","        .containsExactlyInAnyOrder(","500","          tuple(issueOnProject1Branch1.getKey(), project1Branch1.getKey(), project1Branch1.getBranch()),","501","          tuple(issueOnFileOnProject1Branch1.getKey(), fileOnProject1Branch1.getKey(), project1Branch1.getBranch()));","672","        .extracting(Issue::getKey, Issue::getComponent, Issue::getBranch)","673","        .containsExactlyInAnyOrder(tuple(branchIssue.getKey(), branchFile.getKey(), branchFile.getBranch()));","680","        .extracting(Issue::getKey, Issue::getComponent, Issue::getBranch)","681","        .containsExactlyInAnyOrder(tuple(branchIssue.getKey(), branchFile.getKey(), branchFile.getBranch()));","688","        .extracting(Issue::getKey, Issue::getComponent, Issue::getBranch)","689","        .containsExactlyInAnyOrder(tuple(branchIssue.getKey(), branchFile.getKey(), branchFile.getBranch()));"]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/issue\/ws\/SearchAction.java":[{"add":["309","        \"If this parameter is set to a truthy value, createdAfter must not be set and one component uuid or key must be provided.\")"],"delete":["309","        \"If this parameter is set to a truthy value, createdAfter must not be set and one component id or key must be provided.\")"]}],"server\/sonar-webserver-es\/src\/main\/java\/org\/sonar\/server\/issue\/index\/IssueQueryFactory.java":[{"add":["97","  private static final Set<String> QUALIFIERS_WITHOUT_LEAK_PERIOD = new HashSet<>(Arrays.asList(Qualifiers.APP, Qualifiers.VIEW, Qualifiers.SUBVIEW));","171","      checkArgument(createdAfter == null || createdInLast == null, format(\"Parameters %s and %s cannot be set simultaneously\", PARAM_CREATED_AFTER, PARAM_CREATED_IN_LAST));","175","      checkArgument(createdInLast == null, format(\"Parameters %s and %s cannot be set simultaneously\", PARAM_CREATED_IN_LAST, PARAM_SINCE_LEAK_PERIOD));","176","","179","","180","      if (!QUALIFIERS_WITHOUT_LEAK_PERIOD.contains(component.qualifier()) && request.getPullRequest() == null) {","181","        Date createdAfterFromSnapshot = findCreatedAfterFromComponentUuid(dbSession, component);","182","        setCreatedAfterFromDates(builder, createdAfterFromSnapshot, null, false);","183","      }","189","    \/\/ if last analysis has no period date, then no issue should be considered new.","190","    return snapshot.map(s -> longToDate(s.getPeriodDate())).orElseGet(() -> new Date(clock.millis()));","325","    if (request.getSinceLeakPeriod() == null || !request.getSinceLeakPeriod() || request.getPullRequest() != null) {","337",""],"delete":["97","","147","    checkArgument(createdAfter == null || createdInLast == null, format(\"Parameters %s and %s cannot be set simultaneously\", PARAM_CREATED_AFTER, PARAM_CREATED_IN_LAST));","148","","178","      Date createdAfterFromSnapshot = findCreatedAfterFromComponentUuid(dbSession, component);","179","      setCreatedAfterFromDates(builder, createdAfterFromSnapshot, createdInLast, false);","183","  @CheckForNull","186","    return snapshot.map(s -> longToDate(s.getPeriodDate())).orElse(null);","321","    if (request.getSinceLeakPeriod() == null || !request.getSinceLeakPeriod()) {"]}],"server\/sonar-webserver-es\/src\/test\/java\/org\/sonar\/server\/issue\/index\/IssueQueryFactoryTest.java":[{"add":["26","import java.util.Map;","46","import static org.assertj.core.api.Assertions.tuple;","280","    when(clock.millis()).thenReturn(now.getTime());","297","    assertThat(result.createdAfterByProjectUuids().entrySet()).extracting(Map.Entry::getKey, e -> e.getValue().date(), e -> e.getValue().inclusive()).containsOnly(","298","      tuple(project1.uuid(), new Date(analysis1.getPeriodDate()), false));","397","      .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.projectUuids()), IssueQuery::isMainBranch)","398","      .containsOnly(branch.uuid(), singletonList(project.uuid()), false);","403","      .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.projectUuids()), IssueQuery::isMainBranch)","404","      .containsOnly(branch.uuid(), singletonList(project.uuid()), false);","416","      .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.fileUuids()), IssueQuery::isMainBranch)","417","      .containsOnly(branch.uuid(), singletonList(file.uuid()), false);","423","      .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.fileUuids()), IssueQuery::isMainBranch)","424","      .containsOnly(branch.uuid(), singletonList(file.uuid()), false);","430","      .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.fileUuids()), IssueQuery::isMainBranch)","431","      .containsOnly(branch.uuid(), singletonList(file.uuid()), false);","444","      .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.componentUuids()), IssueQuery::isMainBranch)","445","      .containsOnly(branch.uuid(), singletonList(file.uuid()), false);","456","      .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.projectUuids()), IssueQuery::isMainBranch)","457","      .containsOnly(project.uuid(), singletonList(project.uuid()), true);","461","      .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.projectUuids()), IssueQuery::isMainBranch)","462","      .containsOnly(project.uuid(), singletonList(project.uuid()), true);","497","      .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.projectUuids()), IssueQuery::isMainBranch)","498","      .containsOnly(applicationBranch1.uuid(), Collections.emptyList(), false);","505","      .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.projectUuids()), IssueQuery::isMainBranch)","506","      .containsOnly(applicationBranch1.uuid(), singletonList(project1.uuid()), false);"],"delete":["294","    assertThat(result.createdAfterByProjectUuids().get(project1.uuid()).date().getTime()).isEqualTo(analysis1.getPeriodDate());","295","    assertThat(result.createdAfterByProjectUuids().get(project1.uuid()).inclusive()).isFalse();","394","        .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.projectUuids()), IssueQuery::isMainBranch)","395","        .containsOnly(branch.uuid(), singletonList(project.uuid()), false);","400","        .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.projectUuids()), IssueQuery::isMainBranch)","401","        .containsOnly(branch.uuid(), singletonList(project.uuid()), false);","413","        .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.fileUuids()), IssueQuery::isMainBranch)","414","        .containsOnly(branch.uuid(), singletonList(file.uuid()), false);","420","        .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.fileUuids()), IssueQuery::isMainBranch)","421","        .containsOnly(branch.uuid(), singletonList(file.uuid()), false);","427","        .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.fileUuids()), IssueQuery::isMainBranch)","428","        .containsOnly(branch.uuid(), singletonList(file.uuid()), false);","441","        .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.componentUuids()), IssueQuery::isMainBranch)","442","        .containsOnly(branch.uuid(), singletonList(file.uuid()), false);","453","        .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.projectUuids()), IssueQuery::isMainBranch)","454","        .containsOnly(project.uuid(), singletonList(project.uuid()), true);","458","        .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.projectUuids()), IssueQuery::isMainBranch)","459","        .containsOnly(project.uuid(), singletonList(project.uuid()), true);","494","        .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.projectUuids()), IssueQuery::isMainBranch)","495","        .containsOnly(applicationBranch1.uuid(), Collections.emptyList(), false);","502","        .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.projectUuids()), IssueQuery::isMainBranch)","503","        .containsOnly(applicationBranch1.uuid(), singletonList(project1.uuid()), false);"]}],"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/hotspot\/ws\/SearchActionTest.java":[{"add":["42","import org.sonar.api.impl.utils.TestSystem2;","106","  private TestSystem2 system2 = new TestSystem2();","116","  private SearchAction underTest = new SearchAction(dbClient, userSessionRule, issueIndex, responseFormatter, system2);","727","      .isInstanceOf(IllegalArgumentException.class)","728","      .hasMessage(\"Parameter 'onlyMine' can be used with parameter 'projectKey' only\");","741","      .isInstanceOf(IllegalArgumentException.class)","742","      .hasMessage(\"Parameter 'onlyMine' requires user to be logged in\");","1343","      .executeProtobuf(SearchWsResponse.class);","1354","  public void returns_nothing_when_sinceLeakPeriod_is_true_and_no_period_exists() {","1355","    long referenceDate = 800_996_999_332L;","1356","","1357","    system2.setNow(referenceDate + 10_000);","1358","    ComponentDto project = dbTester.components().insertPublicProject();","1359","    userSessionRule.registerComponents(project);","1360","    indexPermissions();","1361","    ComponentDto file = dbTester.components().insertComponent(newFileDto(project));","1362","    dbTester.components().insertSnapshot(project, t -> t.setPeriodDate(referenceDate).setLast(false));","1363","    dbTester.components().insertSnapshot(project, t -> t.setPeriodDate(null).setLast(true));","1364","    RuleDefinitionDto rule = newRule(SECURITY_HOTSPOT);","1365","    IssueDto afterRef = dbTester.issues().insertHotspot(rule, project, file, t -> t.setIssueCreationTime(referenceDate + 1000));","1366","    IssueDto atRef = dbTester.issues().insertHotspot(rule, project, file, t -> t.setType(SECURITY_HOTSPOT).setIssueCreationTime(referenceDate));","1367","    IssueDto beforeRef = dbTester.issues().insertHotspot(rule, project, file, t -> t.setIssueCreationTime(referenceDate - 1000));","1368","    indexIssues();","1369","","1370","    SearchWsResponse responseAll = newRequest(project)","1371","      .executeProtobuf(SearchWsResponse.class);","1372","    assertThat(responseAll.getHotspotsList())","1373","      .extracting(SearchWsResponse.Hotspot::getKey)","1374","      .containsExactlyInAnyOrder(Stream.of(afterRef, atRef, beforeRef)","1375","        .map(IssueDto::getKey)","1376","        .toArray(String[]::new));","1377","","1378","    SearchWsResponse responseOnLeak = newRequest(project,","1379","      t -> t.setParam(\"sinceLeakPeriod\", \"true\"))","1380","      .executeProtobuf(SearchWsResponse.class);","1381","    assertThat(responseOnLeak.getHotspotsList()).isEmpty();","1382","  }","1383","","1384","  @Test","1385","  public void returnsall_issues_when_sinceLeakPeriod_is_true_and_is_pr() {","1386","    long referenceDate = 800_996_999_332L;","1387","","1388","    system2.setNow(referenceDate + 10_000);","1389","    ComponentDto project = dbTester.components().insertPublicProject();","1390","    ComponentDto pr = dbTester.components().insertProjectBranch(project, b -> b.setBranchType(BranchType.PULL_REQUEST).setKey(\"pr\"));","1391","    userSessionRule.registerComponents(project);","1392","    indexPermissions();","1393","    ComponentDto file = dbTester.components().insertComponent(newFileDto(pr));","1394","    dbTester.components().insertSnapshot(project, t -> t.setPeriodDate(referenceDate).setLast(true));","1395","    dbTester.components().insertSnapshot(pr, t -> t.setPeriodDate(null).setLast(true));","1396","    RuleDefinitionDto rule = newRule(SECURITY_HOTSPOT);","1397","    IssueDto afterRef = dbTester.issues().insertHotspot(rule, pr, file, t -> t.setIssueCreationTime(referenceDate + 1000));","1398","    IssueDto atRef = dbTester.issues().insertHotspot(rule, pr, file, t -> t.setType(SECURITY_HOTSPOT).setIssueCreationTime(referenceDate));","1399","    IssueDto beforeRef = dbTester.issues().insertHotspot(rule, pr, file, t -> t.setIssueCreationTime(referenceDate - 1000));","1400","    indexIssues();","1401","","1402","    SearchWsResponse responseAll = newRequest(project).setParam(\"pullRequest\", \"pr\")","1403","      .executeProtobuf(SearchWsResponse.class);","1404","    assertThat(responseAll.getHotspotsList())","1405","      .extracting(SearchWsResponse.Hotspot::getKey)","1406","      .containsExactlyInAnyOrder(Stream.of(afterRef, atRef, beforeRef)","1407","        .map(IssueDto::getKey)","1408","        .toArray(String[]::new));","1409","","1410","    SearchWsResponse responseOnLeak = newRequest(project,","1411","      t -> t.setParam(\"sinceLeakPeriod\", \"true\").setParam(\"pullRequest\", \"pr\"))","1412","      .executeProtobuf(SearchWsResponse.class);","1413","    assertThat(responseOnLeak.getHotspotsList()).hasSize(3);","1414","  }","1415","","1416","  @Test","1441","          .setMessage(\"message-\" + i)"],"delete":["52","import org.sonar.db.organization.OrganizationDto;","115","  private SearchAction underTest = new SearchAction(dbClient, userSessionRule, issueIndex, responseFormatter);","726","        .isInstanceOf(IllegalArgumentException.class)","727","        .hasMessage(\"Parameter 'onlyMine' can be used with parameter 'projectKey' only\");","740","        .isInstanceOf(IllegalArgumentException.class)","741","        .hasMessage(\"Parameter 'onlyMine' requires user to be logged in\");","1342","        .executeProtobuf(SearchWsResponse.class);","1377","          .setMessage(\"message-\" +i)"]}],"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionTest.java":[{"add":["46","import org.sonar.db.component.BranchType;","49","import org.sonar.db.component.SnapshotDto;","98","import static org.sonar.db.component.ComponentDto.PULL_REQUEST_SEPARATOR;","111","import static org.sonarqube.ws.client.issue.IssuesWsParameters.PARAM_PULL_REQUEST;","113","import static org.sonarqube.ws.client.issue.IssuesWsParameters.PARAM_SINCE_LEAK_PERIOD;","516","  public void filter_by_leak_period() {","517","    UserDto john = db.users().insertUser(u -> u.setLogin(\"john\").setName(\"John\").setEmail(\"john@email.com\"));","518","    UserDto alice = db.users().insertUser(u -> u.setLogin(\"alice\").setName(\"Alice\").setEmail(\"alice@email.com\"));","519","    OrganizationDto organization = db.organizations().insert();","520","    ComponentDto project = db.components().insertComponent(ComponentTesting.newPublicProjectDto(organization, \"PROJECT_ID\").setDbKey(\"PROJECT_KEY\"));","521","    SnapshotDto snapshotDto = db.components().insertSnapshot(project, s -> s.setLast(true).setPeriodDate(parseDateTime(\"2014-09-05T00:00:00+0100\").getTime()));","522","    indexPermissions();","523","","524","    ComponentDto file = db.components().insertComponent(newFileDto(project, null, \"FILE_ID\").setDbKey(\"FILE_KEY\"));","525","    RuleDto rule = newIssueRule();","526","    IssueDto issue1 = newDto(rule, file, project)","527","      .setIssueCreationDate(parseDateTime(\"2014-09-04T00:00:00+0100\"))","528","      .setIssueUpdateDate(parseDateTime(\"2017-12-04T00:00:00+0100\"))","529","      .setEffort(10L)","530","      .setStatus(\"OPEN\")","531","      .setKee(\"82fd47d4-b650-4037-80bc-7b112bd4eac2\")","532","      .setSeverity(\"MAJOR\")","533","      .setAssigneeUuid(john.getUuid());","534","    IssueDto issue2 = newDto(rule, file, project)","535","      .setIssueCreationDate(parseDateTime(\"2014-09-06T00:00:00+0100\"))","536","      .setIssueUpdateDate(parseDateTime(\"2017-12-04T00:00:00+0100\"))","537","      .setEffort(10L)","538","      .setStatus(\"OPEN\")","539","      .setKee(\"7b112bd4-b650-4037-80bc-82fd47d4eac2\")","540","      .setSeverity(\"MAJOR\")","541","      .setAssigneeUuid(alice.getUuid());","542","    dbClient.issueDao().insert(session, issue1, issue2);","543","    session.commit();","544","    indexIssues();","545","","546","    userSession.logIn(john);","547","","548","    ws.newRequest()","549","      .setParam(PARAM_SINCE_LEAK_PERIOD, \"true\")","550","      .setParam(PARAM_COMPONENT_KEYS, \"PROJECT_KEY\")","551","      .execute()","552","      .assertJson(this.getClass(), \"filter_by_leak_period.json\");","553","  }","554","","555","  @Test","556","  public void filter_by_leak_period_without_a_period() {","557","    UserDto john = db.users().insertUser(u -> u.setLogin(\"john\").setName(\"John\").setEmail(\"john@email.com\"));","558","    UserDto alice = db.users().insertUser(u -> u.setLogin(\"alice\").setName(\"Alice\").setEmail(\"alice@email.com\"));","559","    OrganizationDto organization = db.organizations().insert();","560","    ComponentDto project = db.components().insertComponent(ComponentTesting.newPublicProjectDto(organization, \"PROJECT_ID\").setDbKey(\"PROJECT_KEY\"));","561","    SnapshotDto snapshotDto = db.components().insertSnapshot(project);","562","    indexPermissions();","563","    ComponentDto file = db.components().insertComponent(newFileDto(project, null, \"FILE_ID\").setDbKey(\"FILE_KEY\"));","564","    RuleDto rule = newIssueRule();","565","    IssueDto issue1 = newDto(rule, file, project)","566","      .setIssueCreationDate(parseDateTime(\"2014-09-04T00:00:00+0100\"))","567","      .setIssueUpdateDate(parseDateTime(\"2017-12-04T00:00:00+0100\"))","568","      .setEffort(10L)","569","      .setStatus(\"OPEN\")","570","      .setKee(\"82fd47d4-b650-4037-80bc-7b112bd4eac2\")","571","      .setSeverity(\"MAJOR\")","572","      .setAssigneeUuid(john.getUuid());","573","    IssueDto issue2 = newDto(rule, file, project)","574","      .setIssueCreationDate(parseDateTime(\"2014-09-04T00:00:00+0100\"))","575","      .setIssueUpdateDate(parseDateTime(\"2017-12-04T00:00:00+0100\"))","576","      .setEffort(10L)","577","      .setStatus(\"OPEN\")","578","      .setKee(\"7b112bd4-b650-4037-80bc-82fd47d4eac2\")","579","      .setSeverity(\"MAJOR\")","580","      .setAssigneeUuid(alice.getUuid());","581","    dbClient.issueDao().insert(session, issue1, issue2);","582","    session.commit();","583","    indexIssues();","584","","585","    userSession.logIn(john);","586","","587","    ws.newRequest()","588","      .setParam(PARAM_COMPONENT_KEYS, \"PROJECT_KEY\")","589","      .setParam(PARAM_SINCE_LEAK_PERIOD, \"true\")","590","      .execute()","591","      .assertJson(this.getClass(), \"empty_result.json\");","592","  }","593","","594","  @Test","595","  public void filter_by_leak_period_has_no_effect_on_prs() {","596","    UserDto john = db.users().insertUser(u -> u.setLogin(\"john\").setName(\"John\").setEmail(\"john@email.com\"));","597","    UserDto alice = db.users().insertUser(u -> u.setLogin(\"alice\").setName(\"Alice\").setEmail(\"alice@email.com\"));","598","    OrganizationDto organization = db.organizations().insert();","599","    ComponentDto project = db.components().insertPublicProject(organization, c -> c.setUuid(\"PROJECT_ID\").setDbKey(\"PROJECT_KEY\"));","600","    ComponentDto pr = db.components().insertProjectBranch(project, b -> b.setBranchType(BranchType.PULL_REQUEST).setKey(\"pr\"));","601","    SnapshotDto snapshotDto = db.components().insertSnapshot(pr);","602","    indexPermissions();","603","    ComponentDto file = db.components().insertComponent(newFileDto(pr, null, \"FILE_ID\").setDbKey(\"FILE_KEY\" + PULL_REQUEST_SEPARATOR + \"pr\"));","604","    RuleDto rule = newIssueRule();","605","    IssueDto issue1 = newDto(rule, file, pr)","606","      .setIssueCreationDate(parseDateTime(\"2014-09-04T00:00:00+0100\"))","607","      .setIssueUpdateDate(parseDateTime(\"2017-12-04T00:00:00+0100\"))","608","      .setEffort(10L)","609","      .setStatus(\"OPEN\")","610","      .setKee(\"82fd47d4-b650-4037-80bc-7b112bd4eac2\")","611","      .setSeverity(\"MAJOR\")","612","      .setAssigneeUuid(john.getUuid());","613","    IssueDto issue2 = newDto(rule, file, pr)","614","      .setIssueCreationDate(parseDateTime(\"2014-09-04T00:00:00+0100\"))","615","      .setIssueUpdateDate(parseDateTime(\"2017-12-04T00:00:00+0100\"))","616","      .setEffort(10L)","617","      .setStatus(\"OPEN\")","618","      .setKee(\"7b112bd4-b650-4037-80bc-82fd47d4eac2\")","619","      .setSeverity(\"MAJOR\")","620","      .setAssigneeUuid(alice.getUuid());","621","    dbClient.issueDao().insert(session, issue1, issue2);","622","    session.commit();","623","    indexIssues();","624","","625","    userSession.logIn(john);","626","","627","    ws.newRequest()","628","      .setParam(PARAM_COMPONENT_KEYS, \"PROJECT_KEY\")","629","      .setParam(PARAM_PULL_REQUEST, \"pr\")","630","      .setParam(PARAM_SINCE_LEAK_PERIOD, \"true\")","631","      .execute()","632","      .assertJson(this.getClass(), \"filter_by_leak_period_has_no_effect_on_prs.json\");","633","  }","634","","635","  @Test","747","      .isEmpty();","779","      .extracting(Issue::getKey)","780","      .containsExactlyInAnyOrder(issue2.getKey());","956","      .isInstanceOf(IllegalArgumentException.class)","957","      .hasMessage(\"Value of parameter 'types' (SECURITY_HOTSPOT) must be one of: [CODE_SMELL, BUG, VULNERABILITY]\");"],"delete":["622","        .isEmpty();","654","        .extracting(Issue::getKey)","655","        .containsExactlyInAnyOrder(issue2.getKey());","831","        .isInstanceOf(IllegalArgumentException.class)","832","        .hasMessage(\"Value of parameter 'types' (SECURITY_HOTSPOT) must be one of: [CODE_SMELL, BUG, VULNERABILITY]\");"]}],"server\/sonar-webserver-es\/src\/main\/java\/org\/sonar\/server\/issue\/index\/IssueIndex.java":[{"add":["640","    Preconditions.checkArgument(createdAfter == null || createdAfter.compareTo(new Date(system.now())) <= 0,"],"delete":["640","    Preconditions.checkArgument(createdAfter == null || createdAfter.before(new Date(system.now())),"]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/hotspot\/ws\/SearchAction.java":[{"add":["26","import java.util.Date;","47","import org.sonar.api.utils.System2;","105","  private System2 system2;","107","  public SearchAction(DbClient dbClient, UserSession userSession, IssueIndex issueIndex, HotspotWsResponseFormatter responseFormatter, System2 system2) {","112","    this.system2 = system2;","297","      if (wsRequest.isSinceLeakPeriod() && !wsRequest.getPullRequest().isPresent()) {","298","        Date sinceDate = dbClient.snapshotDao().selectLastAnalysisByComponentUuid(dbSession, p.uuid())","300","          .orElseGet(() -> new Date(system2.now()));","301","        builder.createdAfter(sinceDate, false);"],"delete":["104","  public SearchAction(DbClient dbClient, UserSession userSession, IssueIndex issueIndex,","105","    HotspotWsResponseFormatter responseFormatter) {","294","      if (wsRequest.isSinceLeakPeriod()) {","295","        dbClient.snapshotDao().selectLastAnalysisByComponentUuid(dbSession, p.uuid())","297","          .ifPresent(d -> builder.createdAfter(d, false));"]}],"server\/sonar-webserver-webapi\/src\/test\/resources\/org\/sonar\/server\/issue\/ws\/SearchActionTest\/filter_by_leak_period.json":[{"add":[],"delete":[]}]}},"a8aa40bd9bd4fea44111def143fa792b07b6013d":{"changes":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/measures\/CoreMetrics.java":"MODIFY","sonar-core\/src\/test\/java\/org\/sonar\/core\/i18n\/DefaultI18nTest.java":"MODIFY"},"diff":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["1982","metric.sqale_index.description=Total effort (in hours) to fix all the issues on the component and therefore to comply to all the requirements."],"delete":["1982","metric.sqale_index.description=Total effort (in days) to fix all the issues on the component and therefore to comply to all the requirements."]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/measures\/CoreMetrics.java":[{"add":["1937","    .setDescription(\"Total effort (in hours) to fix all the issues on the component and therefore to comply to all the requirements.\")"],"delete":["1937","    .setDescription(\"Total effort (in days) to fix all the issues on the component and therefore to comply to all the requirements.\")"]}],"sonar-core\/src\/test\/java\/org\/sonar\/core\/i18n\/DefaultI18nTest.java":[{"add":["43","  private DefaultI18n underTest;"],"delete":["43","  DefaultI18n underTest;"]}]}},"617fceff874f700ea12a90a2f1ad3ca083481ae9":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/issue\/IssueAssignerTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/issue\/IssueAssigner.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/issue\/IssueAssignerTest.java":[{"add":["161","  public void when_noscm_data_is_available_defaultAssignee_should_be_used() throws Exception {","162","    DefaultIssue issue = new DefaultIssue().setLine(null);","163","","164","    when(defaultAssignee.loadDefaultAssigneeLogin()).thenReturn(\"DefaultAssignee\");","165","    underTest.onIssue(FILE, issue);","166","","167","    assertThat(issue.assignee()).isEqualTo(\"DefaultAssignee\");","168","  }","169","","170","","171","  @Test"],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/issue\/IssueAssigner.java":[{"add":["75","","79","","80","      if (issue.assignee() == null) {","81","        String author = issue.authorLogin() == null ? null : scmAccountToUser.getNullable(issue.authorLogin());","82","        String assigneeLogin = StringUtils.defaultIfEmpty(author, defaultAssignee.loadDefaultAssigneeLogin());","83","","84","        issueUpdater.setNewAssignee(issue, assigneeLogin, changeContext);","85","      }"],"delete":["72","    boolean authorWasSet = false;","78","        authorWasSet = true;","80","    }","81","    if (authorWasSet && issue.assignee() == null) {","82","      String assigneeLogin = StringUtils.defaultIfEmpty(scmAccountToUser.getNullable(issue.authorLogin()), defaultAssignee.loadDefaultAssigneeLogin());","83","      issueUpdater.setNewAssignee(issue, assigneeLogin, changeContext);"]}]}},"e763c1f4f9403ef2a6f345545cdeec52fe3294e2":{"changes":{"server\/sonar-web\/src\/main\/js\/helpers\/l10n.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/helpers\/l10n.js":[{"add":["39","  return window.navigator.languages ? window.navigator.languages[0] : window.navigator.language;"],"delete":["39","  const locale = window.navigator.languages ? window.navigator.languages[0] : window.navigator.language;","40","  const tags = locale.split('-');","41","  const [region, ...other] = tags;","42","  return [region.toLowerCase(), ...other.map(t => t.toUpperCase())].join('_');"]}]}},"d68eabbdec9d5c6744a89aab66b7d2d30e122829":{"changes":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/facets\/rule-facet.js":"MODIFY"},"diff":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["90","manual=Manual"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/facets\/rule-facet.js":[{"add":["34","              var lang = rule.langName || window.t('manual');","37","                text: '(' + lang + ') ' + rule.name"],"delete":["36","                text: '(' + rule.langName + ') ' + rule.name"]}]}},"d9f6471696f213f574fe574a13158ed456b2158e":{"changes":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/template\/PermissionTemplateDaoTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/permission\/template\/PermissionTemplateDao.java":"MODIFY","server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/permission\/template\/PermissionTemplateMapper.xml":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/user\/ws\/DeactivateActionTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/permission\/template\/PermissionTemplateMapper.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/user\/ws\/DeactivateAction.java":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/template\/PermissionTemplateDaoTest.java":[{"add":["445","  @Test","446","  public void delete_user_permissions_by_user_id() {","447","    OrganizationDto organization = db.organizations().insert();","448","    OrganizationDto anotherOrganization = db.organizations().insert();","449","    UserDto user = db.users().insertUser();","450","    UserDto anotherUser = db.users().insertUser();","451","    PermissionTemplateDto template = db.permissionTemplates().insertTemplate(organization);","452","    PermissionTemplateDto anotherTemplate = db.permissionTemplates().insertTemplate(anotherOrganization);","453","    String permission = \"PERMISSION\";","454","    db.permissionTemplates().addUserToTemplate(template.getId(), user.getId(), permission);","455","    db.permissionTemplates().addUserToTemplate(template.getId(), anotherUser.getId(), permission);","456","    db.permissionTemplates().addUserToTemplate(anotherTemplate.getId(), user.getId(), permission);","457","","458","    underTest.deleteUserPermissionsByUserId(dbSession, user.getId());","459","    db.commit();","460","","461","    assertThat(db.select(\"select template_id as \\\"templateId\\\", user_id as \\\"userId\\\", permission_reference as \\\"permission\\\" from perm_templates_users\"))","462","      .extracting((row) -> row.get(\"templateId\"), (row) -> row.get(\"userId\"), (row) -> row.get(\"permission\"))","463","      .containsOnly(tuple(template.getId(), anotherUser.getId().longValue(), permission));","464","  }","465",""],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/permission\/template\/PermissionTemplateDao.java":[{"add":["185","  public void deleteUserPermissionsByUserId(DbSession dbSession, int userId) {","186","    mapper(dbSession).deleteUserPermissionsByUserId(userId);","187","  }","188",""],"delete":["107",""]}],"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/permission\/template\/PermissionTemplateMapper.xml":[{"add":["67","  <delete id=\"deleteUserPermissionsByUserId\" parameterType=\"integer\">","68","    delete from perm_templates_users","69","    where","70","    user_id = #{userId,jdbcType=INTEGER}","71","  <\/delete>","72",""],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/user\/ws\/DeactivateActionTest.java":[{"add":["33","import org.sonar.db.permission.template.PermissionTemplateDto;","34","import org.sonar.db.permission.template.PermissionTemplateUserDto;","165","  public void deactivate_user_deletes_his_permission_templates() {","166","    logInAsSystemAdministrator();","167","    UserDto user = insertUser(newUserDto());","168","    PermissionTemplateDto template = db.permissionTemplates().insertTemplate();","169","    PermissionTemplateDto anotherTemplate = db.permissionTemplates().insertTemplate();","170","    db.permissionTemplates().addUserToTemplate(template.getId(), user.getId(), USER);","171","    db.permissionTemplates().addUserToTemplate(anotherTemplate.getId(), user.getId(), CODEVIEWER);","172","","173","    deactivate(user.getLogin()).getInput();","174","","175","    assertThat(db.getDbClient().permissionTemplateDao().selectUserPermissionsByTemplateId(dbSession, template.getId())).extracting(PermissionTemplateUserDto::getUserId).isEmpty();","176","    assertThat(db.getDbClient().permissionTemplateDao().selectUserPermissionsByTemplateId(dbSession, anotherTemplate.getId())).extracting(PermissionTemplateUserDto::getUserId).isEmpty();","177","  }","178","","179","  @Test"],"delete":["155","    db.commit();","172","    db.commit();"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/permission\/template\/PermissionTemplateMapper.java":[{"add":["48","  void deleteUserPermissionsByUserId(@Param(\"userId\") int userId);","49",""],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/user\/ws\/DeactivateAction.java":[{"add":["95","      Integer userId = user.getId();","98","      dbClient.propertiesDao().deleteByQuery(dbSession, PropertyQuery.builder().setUserId(userId).build());","99","      dbClient.userGroupDao().deleteByUserId(dbSession, userId);","100","      dbClient.userPermissionDao().deleteByUserId(dbSession, userId);","101","      dbClient.permissionTemplateDao().deleteUserPermissionsByUserId(dbSession, userId);","102","      dbClient.organizationMemberDao().deleteByUserId(dbSession, userId);","103","      dbClient.userDao().deactivateUserById(dbSession, userId);"],"delete":["96","      dbClient.userGroupDao().deleteByUserId(dbSession, user.getId());","97","      dbClient.propertiesDao().deleteByQuery(dbSession, PropertyQuery.builder().setUserId(user.getId()).build());","98","      dbClient.userPermissionDao().deleteByUserId(dbSession, user.getId());","100","      dbClient.organizationMemberDao().deleteByUserId(dbSession, user.getId());","101","      dbClient.userDao().deactivateUserById(dbSession, user.getId());"]}]}},"7fce1bdc21b78e6fb0e12e0703762af1af9326ff":{"changes":{"tests\/src\/test\/java\/org\/sonarqube\/tests\/projectAdministration\/ProjectKeyUpdateTest.java":"MODIFY"},"diff":{"tests\/src\/test\/java\/org\/sonarqube\/tests\/projectAdministration\/ProjectKeyUpdateTest.java":[{"add":["73","    assertThat(isProjectInDatabase(\"one\")).isFalse();","74","    assertThat(isProjectInDatabase(\"two\")).isTrue();","75","    assertThat(isComponentInDatabase(\"one\")).isFalse();","76","    assertThat(isComponentInDatabase(\"two\")).isTrue();","90","    assertThat(isProjectInDatabase(\"one\")).isFalse();","94","    assertThat(isProjectInDatabase(\"one\")).isFalse();","95","    assertThat(isProjectInDatabase(\"two\")).isTrue();","130","    assertThat(isComponentInDatabase(initialKey)).isFalse();","131","    assertThat(isComponentInDatabase(newKey)).isTrue();","157","    assertThat(isComponentInDatabase(initialKey)).isFalse();","158","    assertThat(isComponentInDatabase(newKey)).isTrue();","205","  private boolean isProjectInDatabase(String projectKey) {","206","    return orchestrator.getDatabase().countSql(String.format(\"select count(id) from projects where qualifier='TRK' and kee='%s'\", projectKey)) == 1L;","209","  private boolean isComponentInDatabase(String componentKey) {","210","    return orchestrator.getDatabase().countSql(String.format(\"select count(id) from projects where kee='%s'\", componentKey)) == 1L;"],"delete":["44","import org.sonarqube.ws.client.project.SearchWsRequest;","48","import static java.util.Arrays.asList;","49","import static java.util.Collections.singletonList;","76","    assertThat(isInProjectsSearch(organization, \"one\")).isFalse();","77","    assertThat(isInProjectsSearch(organization, \"two\")).isTrue();","78","    assertThat(isInComponentSearch(organization, \"one\")).isFalse();","79","    assertThat(isInComponentSearch(organization, \"two\")).isTrue();","93","    assertThat(isInProjectsSearch(organization, \"one\")).isFalse();","97","    assertThat(isInProjectsSearch(organization, \"one\")).isFalse();","98","    assertThat(isInProjectsSearch(organization, \"two\")).isTrue();","133","    assertThat(isInComponentSearch(organization, initialKey)).isFalse();","134","    assertThat(isInComponentSearch(organization, newKey)).isTrue();","160","    assertThat(isInComponentSearch(organization, initialKey)).isFalse();","161","    assertThat(isInComponentSearch(organization, newKey)).isTrue();","190","","209","  \/**","210","   * Projects administration page - uses database","211","   *\/","212","  private boolean isInProjectsSearch(Organizations.Organization organization, String key) {","213","    WsProjects.SearchWsResponse response = tester.wsClient().projects().search(","214","      SearchWsRequest.builder().setOrganization(organization.getKey()).setQuery(key).setQualifiers(singletonList(\"TRK\")).build());","215","    return response.getComponentsCount() > 0;","218","  private boolean isInComponentSearch(Organizations.Organization organization, String key) {","219","    org.sonarqube.ws.client.component.SearchWsRequest request = new org.sonarqube.ws.client.component.SearchWsRequest()","220","      .setQualifiers(asList(\"TRK\", \"BRC\"))","221","      .setQuery(key)","222","      .setOrganization(organization.getKey());","223","    return tester.wsClient().components().search(request).getComponentsCount() == 1L;"]}]}},"ddc9196bb76ac88fc1a652d0585515eb43190218":{"changes":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/mediumtest\/ScannerMediumTester.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/branch\/BranchConfigurationLoader.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/scan\/branch\/BranchConfigurationProviderTest.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/branch\/BranchConfigurationProvider.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/mediumtest\/ScannerMediumTester.java":[{"add":["472","    public BranchConfiguration load(Map<String, String> projectSettings, ProjectBranches branches, ProjectPullRequests pullRequests) {"],"delete":["37","import java.util.function.Supplier;","473","    public BranchConfiguration load(Map<String, String> localSettings, Supplier<Map<String, String>> settingsSupplier, ProjectBranches branches, ProjectPullRequests pullRequests) {"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/branch\/BranchConfigurationLoader.java":[{"add":["26","  BranchConfiguration load(Map<String, String> projectSettings, ProjectBranches branches, ProjectPullRequests pullRequests);"],"delete":["22","import java.util.function.Supplier;","27","  BranchConfiguration load(Map<String, String> localSettings, Supplier<Map<String, String>> remoteSettingsSupplier, ProjectBranches branches, ProjectPullRequests pullRequests);"]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/scan\/branch\/BranchConfigurationProviderTest.java":[{"add":["32","import org.sonar.scanner.scan.ProjectConfiguration;","42","  private ProjectConfiguration projectConfiguration = mock(ProjectConfiguration.class);","48","  private Map<String, String> projectSettings = new HashMap<>();;","59","    when(projectConfiguration.getProperties()).thenReturn(projectSettings);","65","    BranchConfiguration configuration = provider.provide(null, projectConfiguration, branches, pullRequests);","66","    assertThat(provider.provide(null, projectConfiguration, branches, pullRequests)).isSameAs(configuration);","71","    when(loader.load(eq(projectSettings), eq(branches), eq(pullRequests))).thenReturn(config);","73","    BranchConfiguration result = provider.provide(loader, projectConfiguration, branches, pullRequests);","80","    BranchConfiguration result = provider.provide(null, projectConfiguration, branches, pullRequests);"],"delete":["21","import java.util.Collections;","32","import org.sonar.scanner.bootstrap.GlobalConfiguration;","37","import static org.mockito.ArgumentMatchers.any;","38","import static org.mockito.ArgumentMatchers.anyMap;","41","import static org.mockito.Mockito.verify;","46","  private GlobalConfiguration globalConfiguration = mock(GlobalConfiguration.class);","52","  private Map<String, String> globalPropertiesMap = new HashMap<>();;","63","    when(globalConfiguration.getProperties()).thenReturn(globalPropertiesMap);","69","    BranchConfiguration configuration = provider.provide(null, globalConfiguration, reactor, globalServerSettings, projectServerSettings, branches, pullRequests);","70","    assertThat(provider.provide(null, globalConfiguration, reactor, globalServerSettings, projectServerSettings, branches, pullRequests)).isSameAs(configuration);","75","    when(loader.load(eq(globalPropertiesMap), any(Supplier.class), eq(branches), eq(pullRequests))).thenReturn(config);","77","    BranchConfiguration result = provider.provide(loader, globalConfiguration, reactor, globalServerSettings, projectServerSettings, branches, pullRequests);","83","  public void settings_should_include_command_line_args_with_highest_priority() {","84","    when(globalConfiguration.getProperties()).thenReturn(Collections.singletonMap(\"key\", \"global\"));","85","    when(projectServerSettings.properties()).thenReturn(Collections.singletonMap(\"key\", \"settings\"));","86","    when(root.properties()).thenReturn(Collections.singletonMap(\"key\", \"root\"));","87","    provider.provide(loader, globalConfiguration, reactor, globalServerSettings, projectServerSettings, branches, pullRequests);","88","    verify(loader).load(anyMap(), settingsCaptor.capture(), any(ProjectBranches.class), any(ProjectPullRequests.class));","89","","90","    Map<String, String> map = settingsCaptor.getValue().get();","91","    assertThat(map.get(\"key\")).isEqualTo(\"root\");","92","  }","93","","94","  @Test","96","    BranchConfiguration result = provider.provide(null, globalConfiguration, reactor, globalServerSettings, projectServerSettings, branches, pullRequests);"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/branch\/BranchConfigurationProvider.java":[{"add":["26","import org.sonar.scanner.scan.ProjectConfiguration;","35","  public BranchConfiguration provide(@Nullable BranchConfigurationLoader loader, ProjectConfiguration projectConfiguration,","36","    ProjectBranches branches, ProjectPullRequests pullRequests) {","42","        branchConfiguration = loader.load(projectConfiguration.getProperties(), branches, pullRequests);"],"delete":["21","import java.util.HashMap;","22","import java.util.Map;","23","import java.util.function.Supplier;","26","import org.sonar.api.batch.bootstrap.ProjectDefinition;","27","import org.sonar.api.batch.bootstrap.ProjectReactor;","31","import org.sonar.scanner.bootstrap.GlobalConfiguration;","32","import org.sonar.scanner.bootstrap.GlobalServerSettings;","33","import org.sonar.scanner.scan.ProjectServerSettings;","42","  public BranchConfiguration provide(@Nullable BranchConfigurationLoader loader, GlobalConfiguration globalConfiguration, ProjectReactor reactor,","43","                                     GlobalServerSettings globalServerSettings, ProjectServerSettings projectServerSettings,","44","                                     ProjectBranches branches, ProjectPullRequests pullRequests) {","50","        Supplier<Map<String, String>> settingsSupplier = createSettingsSupplier(reactor.getRoot(), globalServerSettings, projectServerSettings);","51","        branchConfiguration = loader.load(globalConfiguration.getProperties(), settingsSupplier, branches, pullRequests);","57","","58","  private static Supplier<Map<String, String>> createSettingsSupplier(ProjectDefinition root,","59","                                                                      GlobalServerSettings globalServerSettings, ProjectServerSettings projectServerSettings) {","60","    \/\/ we can't get ProjectConfiguration because it creates a circular dependency.","61","    \/\/ We create our own settings which will only be loaded if needed.","62","    return () -> {","63","      Map<String, String> settings = new HashMap<>();","64","      settings.putAll(globalServerSettings.properties());","65","      settings.putAll(projectServerSettings.properties());","66","      settings.putAll(root.properties());","67","      return settings;","68","    };","69","  }"]}]}},"9b235dda465394be414f0e7e52094b930ccad175":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/ui\/ViewProxyTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ui\/ViewProxy.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/ui\/ViewProxyTest.java":[{"add":["360","  @Override","365","  @Override","377","  @Override","382","  @Override","390","  @Override","395","  @Override","403","  @Override","408","  @Override","416","  @Override","421","  @Override","432","  @Override","437","  @Override"],"delete":["350","","351","  @Test","352","  public void is_authorized_on_component_viewer_bypass() {","353","","354","    @NavigationSection(NavigationSection.RESOURCE)","355","    @UserRole(UserRole.VIEWER)","356","    class MyView extends FakeView {","357","      MyView() {","358","        super(\"fake\");","359","      }","360","    }","361","","362","    ViewProxy proxy = new ViewProxy<View>(new MyView());","363","","364","    MockUserSession.set();","365","    assertThat(proxy.isUserAuthorized(newProjectDto(\"abcd\"))).isTrue();","366","  }","367","","368","  @Test","369","  public void is_authorized_on_component_user_bypass() {","370","","371","    @NavigationSection(NavigationSection.RESOURCE)","372","    @UserRole(UserRole.USER)","373","    class MyView extends FakeView {","374","      MyView() {","375","        super(\"fake\");","376","      }","377","    }","378","","379","    ViewProxy proxy = new ViewProxy<View>(new MyView());","380","","381","    MockUserSession.set();","382","    assertThat(proxy.isUserAuthorized(newProjectDto(\"abcd\"))).isTrue();","383","  }"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ui\/ViewProxy.java":[{"add":["287","      authorized |= UserSession.get().hasProjectPermissionByUuid(userRole, component.uuid());"],"delete":["287","      authorized |= (UserRole.VIEWER.equals(userRole)","288","        || UserRole.USER.equals(userRole)","289","        || UserSession.get().hasProjectPermissionByUuid(userRole, component.uuid()));"]}]}},"013e08a1b4f395c6616775fc5e5ea27ad61b2c6e":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/widgets\/barchart.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/widgets\/barchart.js":[{"add":["28","const DATE_FORMAT = 'YYYY-MM-DDTHH:mm:ssZZ';","29","","55","      endDate: options.endDate ? moment(options.endDate) : null","102","            return moment(d.val).format(DATE_FORMAT);","105","            const ending = i < data.length - 1 ? moment(data[i + 1].val) : options.endDate;","106","            if (ending) {","107","              return ending.format(DATE_FORMAT);","108","            } else {","109","              return '';","115","            if (ending) {","116","              const isSameDay = ending.diff(beginning, 'days') <= 1;","117","              return d.text + '<br>' + beginning.format('LL') + (isSameDay ? '' : (' \u2013 ' + ending.format('LL')));","118","            } else {","119","              return d.text + '<br>' + beginning.format('LL');","120","            }"],"delete":["33","    endDate: moment().add(1, 'days').format('YYYY-MM-DD'),","54","      endDate: moment(options.endDate)","101","            return moment(d.val).format('YYYY-MM-DD');","104","            const beginning = moment(d.val);","105","            const ending = i < data.length - 1 ? moment(data[i + 1].val).subtract(1, 'days') : options.endDate;","106","            const isSameDay = ending.diff(beginning, 'days') <= 1;","107","            if (isSameDay) {","108","              ending.add(1, 'days');","110","            return ending.format('YYYY-MM-DD');","115","            const isSameDay = ending.diff(beginning, 'days') <= 1;","116","            return d.text + '<br>' + beginning.format('LL') + (isSameDay ? '' : (' \u2013 ' + ending.format('LL')));"]}]}},"247ff315c93202bfffa1aaf928e757c9db8ba1fa":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/index\/IssueIndex.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/index\/IssueIndexTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/index\/IssueIndex.java":[{"add":["35","import java.util.Optional;","415","        getCreatedAtFacet(query, filters, esQuery).ifPresent(a -> esSearch.addAggregation(a));","449","  private Optional<AggregationBuilder> getCreatedAtFacet(IssueQuery query, Map<String, QueryBuilder> filters, QueryBuilder esQuery) {","450","    long startTime;","452","    if (createdAfter == null) {","453","      Optional<Long> minDate = getMinCreatedAt(filters, esQuery);","454","      if (!minDate.isPresent()) {","455","        return Optional.empty();","456","      }","457","      startTime = minDate.get();","458","    } else {","459","      startTime = createdAfter.getTime();","460","    }","462","    long endTime = createdBefore == null ? system.now() : createdBefore.getTime();","465","    DateHistogramInterval bucketSize = DateHistogramInterval.YEAR;","487","    return Optional.of(dateHistogram);","490","  private Optional<Long> getMinCreatedAt(Map<String, QueryBuilder> filters, QueryBuilder esQuery) {","509","","511","    System.out.println(\"min=\" + actualValue);","513","      return Optional.empty();","515","    return Optional.of(actualValue.longValue());"],"delete":["414","        esSearch.addAggregation(getCreatedAtFacet(query, filters, esQuery));","448","  private AggregationBuilder getCreatedAtFacet(IssueQuery query, Map<String, QueryBuilder> filters, QueryBuilder esQuery) {","449","    long now = system.now();","450","","451","    DateHistogramInterval bucketSize = DateHistogramInterval.YEAR;","453","    long startTime = createdAfter == null ? getMinCreatedAt(filters, esQuery) : createdAfter.getTime();","455","    long endTime = createdBefore == null ? now : createdBefore.getTime();","458","","480","    return dateHistogram;","483","  private long getMinCreatedAt(Map<String, QueryBuilder> filters, QueryBuilder esQuery) {","504","      return Long.MIN_VALUE;","505","    } else {","506","      return actualValue.longValue();"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/index\/IssueIndexTest.java":[{"add":["869","    assertThat(createdAt).isNull();"],"delete":["31","import org.elasticsearch.test.ESTestCase;","870","    assertThat(createdAt).isEmpty();"]}]}},"45fe2d05b66ad79545b10fdd89a31fdc9ebb632a":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/test\/ws\/ListActionTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/test\/ws\/ListAction.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/test\/index\/TestIndexTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/test\/ws\/ListActionTest.java":[{"add":["27","import org.junit.rules.ExpectedException;","37","import org.sonar.server.exceptions.NotFoundException;","52","  public ExpectedException expectedException = ExpectedException.none();","53","  @Rule","55","  @Rule","56","  public DbTester db = DbTester.create(System2.INSTANCE);","59","  TestIndex testIndex;","205","  @Test","206","  public void fail_when_test_uuid_is_unknown() throws Exception {","207","    expectedException.expect(NotFoundException.class);","208","    expectedException.expectMessage(\"Test with id 'unknown-test-uuid' is not found\");","209","","210","    ws.newGetRequest(\"api\/tests\", \"list\")","211","      .setParam(ListAction.TEST_ID, \"unknown-test-uuid\")","212","      .execute();","213","  }","214",""],"delete":["46","  @Rule","47","  public DbTester db = DbTester.create(System2.INSTANCE);","48","","54","","56","  TestIndex testIndex;"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/test\/ws\/ListAction.java":[{"add":["52","import static org.sonar.server.ws.WsUtils.checkFoundWithOptional;","88","          \"<\/ul>\",","89","        TEST_ID, TEST_FILE_ID, TEST_FILE_KEY, SOURCE_FILE_ID, SOURCE_FILE_KEY, SOURCE_FILE_LINE_NUMBER))","147","      dbClient.closeSession(dbSession);","241","    TestDoc testDoc = checkFoundWithOptional(testIndex.getNullableByTestUuid(testUuid), \"Test with id '%s' is not found\", testUuid);","242","    checkComponentUuidPermission(dbSession, testDoc.fileUuid());"],"delete":["37","import org.sonar.db.MyBatis;","88","          \"<\/ul>\", TEST_ID, TEST_FILE_ID, TEST_FILE_KEY, SOURCE_FILE_ID, SOURCE_FILE_KEY, SOURCE_FILE_LINE_NUMBER))","146","      MyBatis.closeQuietly(dbSession);","240","    checkComponentUuidPermission(dbSession, testIndex.getByTestUuid(testUuid).fileUuid());"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/test\/index\/TestIndexTest.java":[{"add":["21","import com.google.common.base.Optional;","32","import static org.assertj.guava.api.Assertions.assertThat;","103","  public void getNullableByTestUuid() throws Exception {","104","    es.putDocuments(TestIndexDefinition.INDEX, TestIndexDefinition.TYPE,","105","      newTestDoc(\"1\", \"TESTFILE1\", newCoverageBlock(\"3\"), newCoverageBlock(\"4\"), newCoverageBlock(\"5\")),","106","      newTestDoc(\"2\", \"TESTFILE1\", newCoverageBlock(\"5\"), newCoverageBlock(\"6\"), newCoverageBlock(\"7\")));","107","","108","    Optional<TestDoc> result = underTest.getNullableByTestUuid(\"1\");","109","","110","    assertThat(result).isPresent();","111","    TestDoc test = result.get();","112","    assertThat(test.testUuid()).isEqualTo(\"1\");","113","    assertThat(test.fileUuid()).isEqualTo(\"TESTFILE1\");","114","    assertThat(test.name()).isEqualTo(\"name-1\");","115","    assertThat(test.durationInMs()).isEqualTo(1L);","116","    assertThat(test.status()).isEqualTo(\"status-1\");","117","    assertThat(test.message()).isEqualTo(\"message-1\");","118","    assertThat(test.coveredFiles()).hasSize(3);","119","    assertThat(test.coveredFiles()).extractingResultOf(\"fileUuid\").containsOnly(\"main-uuid-3\", \"main-uuid-4\", \"main-uuid-5\");","120","  }","121","","122","  @Test","123","  public void getNullableByTestUuid_with_absent_value() {","124","    Optional<TestDoc> result = underTest.getNullableByTestUuid(\"unknown-uuid\");","125","","126","    assertThat(result).isAbsent();","127","  }","128","","129","  @Test"],"delete":[]}]}},"b3840f39050b6a805c321748c84726038ccb3f6a":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/about\/components\/AboutApp.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/about\/components\/AboutApp.tsx":[{"add":["19","import { sanitize } from 'dompurify';","162","              \/\/ eslint-disable-next-line react\/no-danger","163","              dangerouslySetInnerHTML={{ __html: sanitize(customText) }}"],"delete":["161","              \/\/ Safe: Defined by instance admin","162","              dangerouslySetInnerHTML={{ __html: customText }}"]}]}},"590a9d5d2cd511bde4f7763478fb7f6b8d0e2faa":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/__tests__\/utils-test.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/pullRequests\/__tests__\/PullRequestOverview-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/pullRequests\/PullRequestOverview.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/types\/quality-gates.ts":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/__tests__\/utils-test.ts":[{"add":["64","          level: 'OK',"],"delete":["64","          level: 'WARNING',"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/pullRequests\/__tests__\/PullRequestOverview-test.tsx":[{"add":["26","import { PR_METRICS } from '..\/..\/utils';","106","it('should correctly fetch all required metrics for a passing QG', async () => {","107","  const wrapper = shallowRender({ conditions: [] });","109","  expect(getMeasuresAndMeta).toBeCalledWith('my-project', PR_METRICS, expect.any(Object));","110","});","111","","112","it('should correctly fetch all required metrics for a failing QG', async () => {","113","  const wrapper = shallowRender({","114","    conditions: [mockQualityGateStatusCondition({ level: 'ERROR', metric: 'foo' })]","115","  });","116","  await waitAndUpdate(wrapper);","117","  expect(getMeasuresAndMeta).toBeCalledWith(","118","    'my-project',","119","    [...PR_METRICS, 'foo'],","120","    expect.any(Object)","121","  );"],"delete":["105","it('should correctly handle a WS failure', async () => {","106","  (getMeasuresAndMeta as jest.Mock).mockRejectedValueOnce({});","107","  const fetchBranchStatus = jest.fn().mockRejectedValue({});","108","  const wrapper = shallowRender({ fetchBranchStatus });","109","","111","  expect(wrapper.type()).toBeNull();"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/pullRequests\/PullRequestOverview.tsx":[{"add":["20","import { differenceBy, uniq } from 'lodash';","51","  fetchBranchStatus: (branchLike: BranchLike, projectKey: string) => void;","76","    if (this.props.conditions === undefined) {","77","      this.fetchBranchStatusData();","78","    } else {","79","      this.fetchBranchData();","80","    }","81","  }","82","","83","  componentDidUpdate(prevProps: Props) {","84","    if (this.conditionsHaveChanged(prevProps)) {","85","      this.fetchBranchData();","86","    }","93","  conditionsHaveChanged = (prevProps: Props) => {","94","    const prevConditions = prevProps.conditions ?? [];","95","    const newConditions = this.props.conditions ?? [];","96","    const diff = differenceBy(","97","      prevConditions.filter(c => c.level === 'ERROR'),","98","      newConditions.filter(c => c.level === 'ERROR'),","99","      c => c.metric","100","    );","101","","102","    return (","103","      (prevProps.conditions === undefined && this.props.conditions !== undefined) || diff.length > 0","104","    );","105","  };","106","","107","  fetchBranchStatusData = () => {","112","    this.props.fetchBranchStatus(branchLike, key);","113","  };","114","","115","  fetchBranchData = () => {","116","    const {","117","      branchLike,","118","      component: { key },","119","      conditions","120","    } = this.props;","124","    const metricKeys =","125","      conditions !== undefined","126","        ? \/\/ Also load metrics that apply to failing QG conditions.","127","          uniq([...PR_METRICS, ...conditions.filter(c => c.level !== 'OK').map(c => c.metric)])","128","        : PR_METRICS;","129","","130","    getMeasuresAndMeta(key, metricKeys, {","131","      additionalFields: 'metrics',","132","      ...getBranchLikeQuery(branchLike)","133","    }).then(","134","      ({ component, metrics }) => {"],"delete":["50","  fetchBranchStatus: (branchLike: BranchLike, projectKey: string) => Promise<void>;","75","    this.fetchBranchData();","82","  fetchBranchData = () => {","90","    Promise.all([","91","      getMeasuresAndMeta(key, PR_METRICS, {","92","        additionalFields: 'metrics',","93","        ...getBranchLikeQuery(branchLike)","94","      }),","95","      this.props.fetchBranchStatus(branchLike, key)","96","    ]).then(","97","      ([{ component, metrics }]) => {"]}],"server\/sonar-web\/src\/main\/js\/types\/quality-gates.ts":[{"add":["46","  status: T.Status;","69","  level: T.Status;"],"delete":["46","  status: string;","69","  level: string;"]}]}},"eacba88db0a44e34156e9e31d315ef31d61e726a":{"changes":{"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/permission\/ws\/template\/TemplateGroupsActionTest.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/template\/PermissionTemplateDaoTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/permission\/template\/PermissionTemplateMapper.xml":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/template\/GroupWithPermissionTemplateDaoTest.java":"MODIFY","server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/permission\/ws\/template\/TemplateUsersActionTest.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/template\/UserWithPermissionTemplateDaoTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/permission\/PermissionQuery.java":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/permission\/ws\/template\/TemplateUsersAction.java":"MODIFY"},"diff":{"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/permission\/ws\/template\/TemplateGroupsActionTest.java":[{"add":["21","import java.util.stream.IntStream;","27","import org.sonar.api.web.UserRole;","41","import org.sonar.server.permission.ws.BasePermissionWsTest;","53","import static org.sonar.db.permission.PermissionQuery.DEFAULT_PAGE_SIZE;","150","    GroupDto group4 = db.users().insertGroup(db.getDefaultOrganization(), \"group-4-name\");","152","    addGroupToTemplate(newPermissionTemplateGroup(ADMIN, anotherTemplate.getId(), group4.getId()));","159","    assertThat(response.getGroupsList()).extracting(\"name\").containsExactly(\"Anyone\", \"group-1-name\", \"group-2-name\", \"group-3-name\", \"group-4-name\");","163","    assertThat(response.getGroups(3).getPermissionsList()).isEmpty();","294","  public void search_ignores_other_template_and_is_ordered_by_groups_with_permission_then_by_name_when_many_groups() {","295","    OrganizationDto defaultOrg = db.getDefaultOrganization();","296","    PermissionTemplateDto template = addTemplateToDefaultOrganization();","297","    PermissionTemplateDto otherTemplate = db.permissionTemplates().insertTemplate(defaultOrg);","298","    IntStream.rangeClosed(1, DEFAULT_PAGE_SIZE + 1).forEach(i -> {","299","      GroupDto group = db.users().insertGroup(defaultOrg, \"Group-\" + i);","300","      db.permissionTemplates().addGroupToTemplate(otherTemplate, group, UserRole.USER);","301","    });","302","    String lastGroupName = \"Group-\" + (DEFAULT_PAGE_SIZE + 1);","303","    db.permissionTemplates().addGroupToTemplate(template, db.users().selectGroup(defaultOrg, lastGroupName).get(), UserRole.USER);","304","    loginAsAdmin(db.getDefaultOrganization());","305","","306","    WsGroupsResponse response = newRequest()","307","      .setParam(PARAM_TEMPLATE_ID, template.getUuid())","308","      .executeProtobuf(WsGroupsResponse.class);","309","","310","    assertThat(response.getGroupsList())","311","      .extracting(\"name\")","312","      .hasSize(DEFAULT_PAGE_SIZE)","313","      .startsWith(\"Anyone\", lastGroupName, \"Group-1\");","314","  }","315","","316","  @Test","398","    db.commit();"],"delete":["38","import org.sonar.server.permission.ws.BasePermissionWsTest;","93","    commit();","149","    commit();","156","    assertThat(response.getGroupsList()).extracting(\"name\").containsExactly(\"Anyone\", \"group-1-name\", \"group-2-name\", \"group-3-name\");","180","    commit();","207","    commit();","225","    commit();","246","    commit();","264","    commit();","283","    commit();","386","  private void commit() {","387","    db.commit();","388","  }"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/template\/PermissionTemplateDaoTest.java":[{"add":["71","  public void create_permission_template() {","89","  public void select_permission_template_by_uuid() {","170","  public void delete_permission_template() {","204","  public void add_user_permission_to_template() {","217","  public void remove_user_permission_from_template() {","233","  public void add_group_permission_to_template() {","265","  public void add_group_permission_to_anyone() {"],"delete":["56","","72","  public void should_create_permission_template() {","90","  public void should_select_permission_template_by_uuid() {","171","  public void should_delete_permission_template() {","205","  public void should_add_user_permission_to_template() {","218","  public void should_remove_user_permission_from_template() {","234","  public void should_add_group_permission_to_template() {","266","  public void should_add_group_permission_to_anyone() {"]}],"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/permission\/template\/PermissionTemplateMapper.xml":[{"add":["141","    LEFT JOIN perm_templates_users ptu ON ptu.user_id=u.id","142","      AND ptu.template_id=#{templateId}","143","    INNER JOIN organization_members om ON u.id=om.user_id","144","      AND om.organization_uuid=#{query.organizationUuid}","183","      AND ptg.template_id=#{templateId}","192","    FROM groups g","193","    LEFT JOIN perm_templates_groups ptg ON","194","      ptg.template_id=#{templateId}","196","      g.organization_uuid=#{query.organizationUuid,jdbcType=VARCHAR}"],"delete":["141","    LEFT JOIN perm_templates_users ptu ON ptu.user_id=u.id AND ptu.template_id=#{templateId}","142","    INNER JOIN organization_members om ON u.id=om.user_id AND om.organization_uuid=#{query.organizationUuid}","189","    FROM perm_templates_groups ptg"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/template\/GroupWithPermissionTemplateDaoTest.java":[{"add":["40","import static org.sonar.db.permission.PermissionQuery.DEFAULT_PAGE_SIZE;","106","  public void selectGroupNamesByQueryAndTemplate_is_order_by_groups_with_permission_then_by_name_when_many_groups() {","107","    OrganizationDto organization = db.organizations().insert();","108","    PermissionTemplateDto template = permissionTemplateDbTester.insertTemplate(organization);","109","    IntStream.rangeClosed(1, DEFAULT_PAGE_SIZE + 1).forEach(i -> {","110","      db.users().insertGroup(organization, \"Group-\" + i);","111","    });","112","","113","    String lastGroupName = \"Group-\" + (DEFAULT_PAGE_SIZE + 1);","114","    permissionTemplateDbTester.addGroupToTemplate(template, db.users().selectGroup(organization, lastGroupName).get(), UserRole.USER);","115","","116","    PermissionQuery query = PermissionQuery.builder().setOrganizationUuid(organization.getUuid()).build();","117","    assertThat(underTest.selectGroupNamesByQueryAndTemplate(db.getSession(), query, template.getId()))","118","      .hasSize(DEFAULT_PAGE_SIZE)","119","      .startsWith(\"Anyone\", lastGroupName, \"Group-1\");","120","  }","121","","122","  @Test","123","  public void selectGroupNamesByQueryAndTemplate_ignores_other_template_and_is_ordered_by_groups_with_permission_then_by_name_when_many_groups() {","124","    OrganizationDto organization = db.organizations().insert();","125","    PermissionTemplateDto template = permissionTemplateDbTester.insertTemplate(organization);","126","    PermissionTemplateDto otherTemplate = permissionTemplateDbTester.insertTemplate(organization);","127","    IntStream.rangeClosed(1, DEFAULT_PAGE_SIZE + 1).forEach(i -> {","128","      GroupDto group = db.users().insertGroup(organization, \"Group-\" + i);","129","      permissionTemplateDbTester.addGroupToTemplate(otherTemplate, group, UserRole.USER);","130","    });","131","","132","    String lastGroupName = \"Group-\" + (DEFAULT_PAGE_SIZE + 1);","133","    permissionTemplateDbTester.addGroupToTemplate(template, db.users().selectGroup(organization, lastGroupName).get(), UserRole.USER);","134","","135","    PermissionQuery query = PermissionQuery.builder().setOrganizationUuid(organization.getUuid()).build();","136","    assertThat(underTest.selectGroupNamesByQueryAndTemplate(db.getSession(), query, template.getId()))","137","      .hasSize(DEFAULT_PAGE_SIZE)","138","      .startsWith(\"Anyone\", lastGroupName, \"Group-1\");","139","  }","140","","141","  @Test","159","    GroupDto group = db.users().insertGroup(organization, \"Group\");"],"delete":["93","","123","    GroupDto group = db.users().insertGroup(newGroupDto().setName(\"Group\"));"]}],"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/permission\/ws\/template\/TemplateUsersActionTest.java":[{"add":["21","import java.util.stream.IntStream;","27","import org.sonar.api.web.UserRole;","30","import org.sonar.db.organization.OrganizationDto;","42","import org.sonar.server.permission.ws.BasePermissionWsTest;","53","import static org.sonar.db.permission.PermissionQuery.DEFAULT_PAGE_SIZE;","221","  public void search_ignores_other_template_and_is_ordered_by_users_with_permission_when_many_users() {","222","    OrganizationDto defaultOrg = db.getDefaultOrganization();","223","    PermissionTemplateDto template = addTemplateToDefaultOrganization();","224","    \/\/ Add another template having some users with permission to make sure it's correctly ignored","225","    PermissionTemplateDto otherTemplate = db.permissionTemplates().insertTemplate(defaultOrg);","226","    IntStream.rangeClosed(1, DEFAULT_PAGE_SIZE + 1).forEach(i -> {","227","      UserDto user = db.users().insertUser(\"User-\" + i);","228","      db.organizations().addMember(db.getDefaultOrganization(), user);","229","      db.permissionTemplates().addUserToTemplate(otherTemplate, user, UserRole.USER);","230","    });","231","    String lastLogin = \"User-\" + (DEFAULT_PAGE_SIZE + 1);","232","    db.permissionTemplates().addUserToTemplate(template, db.users().selectUserByLogin(lastLogin).get(), UserRole.USER);","233","    loginAsAdmin(defaultOrg);","234","","235","    Permissions.UsersWsResponse response = newRequest(null, null)","236","      .setParam(PARAM_TEMPLATE_NAME, template.getName())","237","      .executeProtobuf(Permissions.UsersWsResponse.class);","238","","239","    assertThat(response.getUsersList())","240","      .extracting(\"login\")","241","      .hasSize(DEFAULT_PAGE_SIZE)","242","      .startsWith(lastLogin);","243","  }","244","","245","  @Test"],"delete":["38","import org.sonar.server.permission.ws.BasePermissionWsTest;"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/template\/UserWithPermissionTemplateDaoTest.java":[{"add":["22","import java.util.stream.IntStream;","40","import static org.sonar.db.permission.PermissionQuery.DEFAULT_PAGE_SIZE;","164","  public void selectUserLoginsByQueryAndTemplate_is_order_by_groups_with_permission_when_many_users() {","165","    OrganizationDto organization = db.organizations().insert();","166","    PermissionTemplateDto template = db.permissionTemplates().insertTemplate(organization);","167","    \/\/ Add another template having some users with permission to make sure it's correctly ignored","168","    PermissionTemplateDto otherTemplate = db.permissionTemplates().insertTemplate(organization);","169","    IntStream.rangeClosed(1, DEFAULT_PAGE_SIZE + 1).forEach(i -> {","170","      UserDto user = db.users().insertUser(\"User-\" + i);","171","      db.organizations().addMember(organization, user);","172","      db.permissionTemplates().addUserToTemplate(otherTemplate, user, UserRole.USER);","173","    });","174","    String lastLogin = \"User-\" + (DEFAULT_PAGE_SIZE + 1);","175","    db.permissionTemplates().addUserToTemplate(template, db.users().selectUserByLogin(lastLogin).get(), UserRole.USER);","176","","177","    PermissionQuery query = PermissionQuery.builder().setOrganizationUuid(organization.getUuid()).build();","178","    assertThat(underTest.selectUserLoginsByQueryAndTemplate(db.getSession(), query, template.getId()))","179","      .hasSize(DEFAULT_PAGE_SIZE)","180","      .startsWith(lastLogin);","181","  }","182","","183","  @Test","258",""],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/permission\/PermissionQuery.java":[{"add":[],"delete":["52","  private final String template;","72","    this.template = builder.template;","93","  \/\/ TODO remove it, it should not be in the query, but set as a separate parameter","94","  @Deprecated","95","  public String template() {","96","    return template;","97","  }","98","","141","    private String template;","158","    public Builder setTemplate(@Nullable String template) {","159","      this.template = template;","160","      return this;","161","    }","162",""]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/permission\/ws\/template\/TemplateUsersAction.java":[{"add":["38","import org.sonar.server.permission.RequestValidator;"],"delete":["40","import org.sonar.server.permission.RequestValidator;","123","      .setTemplate(template.getUuid())"]}]}},"36a2571ece01e51f104523ed98f43e6f27f03f75":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/App.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/__tests__\/__snapshots__\/App-test.tsx.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/App.tsx":[{"add":["120","      <div className=\"page page-limited\">","121","        <div className=\"empty-search\">","122","          <h3>","123","            {!this.state.measures || !this.state.measures['projects']","124","              ? translate('portfolio.empty')","125","              : translate('portfolio.no_lines_of_code')}","126","          <\/h3>","127","        <\/div>","134","      <div className=\"page page-limited\">","135","        <div className=\"empty-search\">","136","          <h3>{translate('portfolio.not_computed')}<\/h3>","137","        <\/div>"],"delete":["120","      <div className=\"empty-search\">","121","        <h3>","122","          {!this.state.measures || !this.state.measures['projects']","123","            ? translate('portfolio.empty')","124","            : translate('portfolio.no_lines_of_code')}","125","        <\/h3>","132","      <div className=\"empty-search\">","133","        <h3>{translate('portfolio.not_computed')}<\/h3>"]}],"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/__tests__\/__snapshots__\/App-test.tsx.snap":[{"add":["150","  className=\"page page-limited\"","152","  <div","153","    className=\"empty-search\"","154","  >","155","    <h3>","156","      portfolio.empty","157","    <\/h3>","158","  <\/div>","164","  className=\"page page-limited\"","166","  <div","167","    className=\"empty-search\"","168","  >","169","    <h3>","170","      portfolio.not_computed","171","    <\/h3>","172","  <\/div>"],"delete":["150","  className=\"empty-search\"","152","  <h3>","153","    portfolio.empty","154","  <\/h3>","160","  className=\"empty-search\"","162","  <h3>","163","    portfolio.not_computed","164","  <\/h3>"]}]}},"e314496d2198c3d827dd7baa7ec1c8fe5a4f6fb1":{"changes":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/dashboard\/configure.html.erb":"MODIFY","server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/server_id_configuration\/index.html.erb":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/dashboard\/configure.html.erb":[{"add":["61","    portal.highlightWidget('<%= escape_javascript(params[:highlight]) -%>');"],"delete":["61","    portal.highlightWidget(<%= escape_javascript(params[:highlight]) -%>);"]}],"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/server_id_configuration\/index.html.erb":[{"add":["10","            <span class=\"<%= @bad_id ? 'error' : 'notice' -%>\" id=\"server_id\"><big><%= h @server_id -%><\/big><\/span>","25","        <input type=\"text\" name=\"organisation\" value=\"<%= h @organisation -%>\" size=\"50\"\/>","36","        <input type=\"text\" name=\"address\" value=\"<%= h @address -%>\"\/>"],"delete":["10","            <span class=\"<%= @bad_id ? 'error' : 'notice' -%>\" id=\"server_id\"><big><%= @server_id -%><\/big><\/span>","25","        <input type=\"text\" name=\"organisation\" value=\"<%= @organisation -%>\" size=\"50\"\/>","36","        <input type=\"text\" name=\"address\" value=\"<%= @address -%>\"\/>"]}]}},"4812e6d383f4c1385771fab50c1edb339f5937fb":{"changes":{"server\/sonar-docs\/src\/layouts\/layout.css":"MODIFY","server\/sonar-docs\/src\/templates\/page.tsx":"MODIFY"},"diff":{"server\/sonar-docs\/src\/layouts\/layout.css":[{"add":["665",".collapse div > a:first-child {","679",".collapse div > a:first-child:hover {","683",".collapse.close div > a:first-child {","687",".collapse.close div > * {","691",".collapse.close div > a:first-child {","695",".collapse div *:last-child {","699",".collapse div .alert {"],"delete":["665",".collapse > a:first-child {","679",".collapse > a:first-child:hover {","683",".collapse.close > a:first-child {","687",".collapse.close > * {","691",".collapse.close > a:first-child {","695",".collapse *:last-child {","699",".collapse .alert {"]}],"server\/sonar-docs\/src\/templates\/page.tsx":[{"add":["44","      const customBlockWrapper = collapsables[i].querySelector('.custom-block-body');","45","      if (customBlockWrapper) {","46","        let firstChild = customBlockWrapper.firstElementChild;","47","        if (firstChild) {","48","          firstChild.outerHTML = firstChild.outerHTML","49","            .replace(\/<h2\/gi, '<a href=\"#\"')","50","            .replace(\/<\\\/h2>\/gi, '<\/a>');","51","","52","          \/\/ We changed the element. It's reference is no longer correct in some","53","          \/\/ browsers. Fetch it again.","54","          firstChild = customBlockWrapper.firstElementChild;","55","          firstChild!.addEventListener('click', (event: Event & { currentTarget: HTMLElement }) => {","56","            event.preventDefault();","57","            if (","58","              event.currentTarget.parentElement &&","59","              event.currentTarget.parentElement.parentElement","60","            ) {","61","              event.currentTarget.parentElement.parentElement.classList.toggle('close');","62","            }","63","          });","64","        }"],"delete":["44","      const firstChild = collapsables[i].firstElementChild;","45","      if (firstChild) {","46","        firstChild.outerHTML = firstChild.outerHTML","47","          .replace(\/<h2\/gi, '<a href=\"#\"')","48","          .replace(\/<\\\/h2>\/gi, '<\/a>');","49","        firstChild.addEventListener('click', (event: Event & { currentTarget: HTMLElement }) => {","50","          event.preventDefault();","51","          if (event.currentTarget.parentElement) {","52","            event.currentTarget.parentElement.classList.toggle('close');","53","          }","54","        });"]}]}},"c23100da7c62f1f6933b30b60d9333a96c73db44":{"changes":{"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/ComponentNavMenu.js":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ui\/ws\/ComponentAction.java":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/ComponentNavMenu.js":[{"add":["127","    const adminLinks = this.renderAdministrationLinks();","128","    if (!adminLinks.some(link => link != null)) {","131","","145","          {adminLinks}","151","  renderAdministrationLinks() {","152","    return [","153","      this.renderSettingsLink(),","154","      this.renderProfilesLink(),","155","      this.renderQualityGateLink(),","156","      this.renderCustomMeasuresLink(),","157","      this.renderLinksLink(),","158","      this.renderPermissionsLink(),","159","      this.renderBackgroundTasksLink(),","160","      this.renderUpdateKeyLink(),","161","      ...this.renderAdminExtensions(),","162","      this.renderDeletionLink()","163","    ];","164","  }","165","","171","      <li key=\"settings\">","186","      <li key=\"profiles\">","201","      <li key=\"quality_gate\">","216","      <li key=\"custom_measures\">","231","      <li key=\"links\">","246","      <li key=\"permissions\">","261","      <li key=\"background_tasks\">","276","      <li key=\"update_key\">","298","      <li key=\"project_delete\">"],"delete":["56","  shouldShowAdministration() {","57","    return Object.keys(this.props.conf).some(key => this.props.conf[key]);","58","  }","59","","131","    if (!this.shouldShowAdministration()) {","147","          {this.renderSettingsLink()}","148","          {this.renderProfilesLink()}","149","          {this.renderQualityGateLink()}","150","          {this.renderCustomMeasuresLink()}","151","          {this.renderLinksLink()}","152","          {this.renderPermissionsLink()}","153","          {this.renderBackgroundTasksLink()}","154","          {this.renderUpdateKeyLink()}","155","          {this.renderAdminExtensions()}","156","          {this.renderDeletionLink()}","167","      <li>","182","      <li>","197","      <li>","212","      <li>","227","      <li>","242","      <li>","257","      <li>","272","      <li>","294","      <li>"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ui\/ws\/ComponentAction.java":[{"add":["249","    boolean showBackgroundTasks = isProjectAdmin && (isProject || Qualifiers.VIEW.equals(component.qualifier()));","262","    json.prop(\"showBackgroundTasks\", showBackgroundTasks);"],"delete":["261","    json.prop(\"showBackgroundTasks\", isProjectAdmin);"]}]}},"bc9b9edb7c887a74c47c59d615c48ae7024ab392":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/index\/IssueIndex.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/index\/IssueIndexTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/index\/IssueIndex.java":[{"add":["477","    \/\/ from GMT to server TZ","487","      \/\/ ES dateHistogram bounds are inclusive while createdBefore parameter is exclusive","488","      .extendedBounds(startTime, endTime - 1_000L);"],"delete":["486","      .extendedBounds(startTime, endTime);"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/index\/IssueIndexTest.java":[{"add":["73","  IssueIndex underTest;","89","    underTest = new IssueIndex(tester.client(), system, userSessionRule);","100","    Issue loaded = underTest.getByKey(issue.key());","114","    Issue result = underTest.getByKey(issue.key());","125","    Issue result = underTest.getByKey(issue.key());","136","    Issue result = underTest.getByKey(issue.key());","142","    underTest.getByKey(\"unknown\");","153","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).issueKeys(newArrayList(\"1\", \"2\")).build(), new SearchOptions()).getDocs()).hasSize(2);","154","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).issueKeys(newArrayList(\"1\")).build(), new SearchOptions()).getDocs()).hasSize(1);","155","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).issueKeys(newArrayList(\"3\", \"4\")).build(), new SearchOptions()).getDocs()).isEmpty();","172","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).build(), new SearchOptions()).getDocs()).hasSize(6);","173","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(\"unknown\")).build(), new SearchOptions()).getDocs()).isEmpty();","186","    SearchResult<IssueDoc> result = underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"projectUuids\")));","204","      underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).moduleUuids(newArrayList(file.uuid())).build(), new SearchOptions()).getDocs())","207","      underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).moduleUuids(newArrayList(module.uuid())).build(), new SearchOptions()).getDocs())","210","      underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).moduleUuids(newArrayList(subModule.uuid())).build(), new SearchOptions())","214","      underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).moduleUuids(newArrayList(project.uuid())).build(), new SearchOptions()).getDocs())","217","      underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).moduleUuids(newArrayList(\"unknown\")).build(), new SearchOptions()).getDocs())","240","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).fileUuids(newArrayList(file1.uuid(), file2.uuid(), file3.uuid())).build(), new SearchOptions())","242","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).fileUuids(newArrayList(file1.uuid())).build(), new SearchOptions())","244","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).moduleRootUuids(newArrayList(subModule.uuid())).build(), new SearchOptions())","246","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).moduleRootUuids(newArrayList(module.uuid())).build(), new SearchOptions())","248","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).build(), new SearchOptions())","250","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).viewUuids(newArrayList(view)).build(), new SearchOptions())","252","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(\"unknown\")).build(), new SearchOptions())","275","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(\"unknown\")).build(), new SearchOptions()).getDocs()).isEmpty();","276","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).build(), new SearchOptions()).getDocs()).hasSize(6);","277","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).viewUuids(newArrayList(view)).build(), new SearchOptions()).getDocs()).hasSize(6);","278","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).moduleUuids(newArrayList(module.uuid())).build(), new SearchOptions()).getDocs()).hasSize(2);","279","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).moduleUuids(newArrayList(subModule.uuid())).build(), new SearchOptions()).getDocs()).hasSize(2); \/\/ XXX","282","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).fileUuids(newArrayList(file1.uuid())).build(), new SearchOptions()).getDocs()).hasSize(1);","283","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).fileUuids(newArrayList(file1.uuid(), file2.uuid(), file3.uuid())).build(), new SearchOptions()).getDocs())","301","    SearchResult<IssueDoc> result = underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"fileUuids\")));","317","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).directories(newArrayList(\"\/src\/main\/xoo\")).build(), new SearchOptions()).getDocs()).hasSize(1);","318","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).directories(newArrayList(\"\/\")).build(), new SearchOptions()).getDocs()).hasSize(1);","319","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).directories(newArrayList(\"unknown\")).build(), new SearchOptions()).getDocs()).isEmpty();","332","    SearchResult<IssueDoc> result = underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"directories\")));","357","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).viewUuids(newArrayList(view1)).build(), new SearchOptions()).getDocs()).hasSize(2);","358","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).viewUuids(newArrayList(view2)).build(), new SearchOptions()).getDocs()).hasSize(1);","359","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).viewUuids(newArrayList(view1, view2)).build(), new SearchOptions()).getDocs()).hasSize(3);","360","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).viewUuids(newArrayList(\"unknown\")).build(), new SearchOptions()).getDocs()).isEmpty();","372","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).severities(newArrayList(Severity.INFO, Severity.MAJOR)).build(), new SearchOptions()).getDocs()).hasSize(2);","373","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).severities(newArrayList(Severity.INFO)).build(), new SearchOptions()).getDocs()).hasSize(1);","374","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).severities(newArrayList(Severity.BLOCKER)).build(), new SearchOptions()).getDocs()).isEmpty();","387","    SearchResult<IssueDoc> result = underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"severities\")));","401","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).statuses(newArrayList(Issue.STATUS_CLOSED, Issue.STATUS_OPEN)).build(), new SearchOptions()).getDocs()).hasSize(2);","402","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).statuses(newArrayList(Issue.STATUS_CLOSED)).build(), new SearchOptions()).getDocs()).hasSize(1);","403","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).statuses(newArrayList(Issue.STATUS_CONFIRMED)).build(), new SearchOptions()).getDocs()).isEmpty();","416","    SearchResult<IssueDoc> result = underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"statuses\")));","431","      underTest.search(IssueQuery.builder(userSessionRule).resolutions(newArrayList(Issue.RESOLUTION_FALSE_POSITIVE, Issue.RESOLUTION_FIXED)).build(), new SearchOptions()).getDocs())","433","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).resolutions(newArrayList(Issue.RESOLUTION_FALSE_POSITIVE)).build(), new SearchOptions()).getDocs()).hasSize(1);","434","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).resolutions(newArrayList(Issue.RESOLUTION_REMOVED)).build(), new SearchOptions()).getDocs()).isEmpty();","447","    SearchResult<IssueDoc> result = underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"resolutions\")));","462","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).resolved(true).build(), new SearchOptions()).getDocs()).hasSize(1);","463","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).resolved(false).build(), new SearchOptions()).getDocs()).hasSize(2);","464","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).resolved(null).build(), new SearchOptions()).getDocs()).hasSize(3);","475","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).rules(newArrayList(ruleKey)).build(), new SearchOptions()).getDocs()).hasSize(1);","476","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).rules(newArrayList(RuleKey.of(\"rule\", \"without issue\"))).build(), new SearchOptions()).getDocs()).isEmpty();","487","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).languages(newArrayList(\"xoo\")).build(),","489","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).languages(newArrayList(\"unknown\")).build(), new SearchOptions()).getDocs()).isEmpty();","500","    SearchResult<IssueDoc> result = underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"languages\")));","515","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).assignees(newArrayList(\"steph\")).build(), new SearchOptions()).getDocs()).hasSize(1);","516","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).assignees(newArrayList(\"steph\", \"simon\")).build(), new SearchOptions()).getDocs()).hasSize(2);","517","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).assignees(newArrayList(\"unknown\")).build(), new SearchOptions()).getDocs()).isEmpty();","531","    SearchResult<IssueDoc> result = underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"assignees\")));","547","    SearchResult<IssueDoc> result = underTest.search(IssueQuery.builder(userSessionRule).assignees(Arrays.asList(\"j-b\")).build(),","563","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).assigned(true).build(), new SearchOptions()).getDocs()).hasSize(1);","564","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).assigned(false).build(), new SearchOptions()).getDocs()).hasSize(2);","565","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).assigned(null).build(), new SearchOptions()).getDocs()).hasSize(3);","578","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).authors(newArrayList(\"steph\")).build(), new SearchOptions()).getDocs()).hasSize(1);","579","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).authors(newArrayList(\"steph\", \"simon\")).build(), new SearchOptions()).getDocs()).hasSize(2);","580","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).authors(newArrayList(\"unknown\")).build(), new SearchOptions()).getDocs()).isEmpty();","594","    SearchResult<IssueDoc> result = underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"authors\")));","608","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).createdAfter(parseDate(\"2014-09-19\")).build(), new SearchOptions()).getDocs()).hasSize(2);","610","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).createdAfter(parseDate(\"2014-09-20\")).build(), new SearchOptions()).getDocs()).hasSize(2);","611","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).createdAfter(parseDate(\"2014-09-21\")).build(), new SearchOptions()).getDocs()).hasSize(1);","612","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).createdAfter(parseDate(\"2014-09-25\")).build(), new SearchOptions()).getDocs()).isEmpty();","624","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).createdBefore(parseDate(\"2014-09-19\")).build(), new SearchOptions()).getDocs()).isEmpty();","626","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).createdBefore(parseDate(\"2014-09-20\")).build(), new SearchOptions()).getDocs()).isEmpty();","627","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).createdBefore(parseDate(\"2014-09-21\")).build(), new SearchOptions()).getDocs()).hasSize(1);","628","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).createdBefore(parseDate(\"2014-09-25\")).build(), new SearchOptions()).getDocs()).hasSize(2);","641","    assertThat(underTest.search(IssueQuery.builder(userSessionRule)","646","    assertThat(underTest.search(IssueQuery.builder(userSessionRule)","651","    assertThat(underTest.search(IssueQuery.builder(userSessionRule)","656","    assertThat(underTest.search(IssueQuery.builder(userSessionRule)","661","    assertThat(underTest.search(IssueQuery.builder(userSessionRule)","666","    assertThat(underTest.search(IssueQuery.builder(userSessionRule)","671","    assertThat(underTest.search(IssueQuery.builder(userSessionRule)","685","    assertThat(underTest.search(IssueQuery.builder(userSessionRule)","689","    assertThat(underTest.search(IssueQuery.builder(userSessionRule)","697","      underTest.search(IssueQuery.builder(userSessionRule).createdAfter(parseDate(\"2014-09-20\")).createdBefore(parseDate(\"2014-09-19\")).build(),","708","      underTest.search(IssueQuery.builder(userSessionRule).createdAfter(new Date(Long.MAX_VALUE)).build(), new SearchOptions());","722","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).createdAt(parseDate(\"2014-09-20\")).build(), new SearchOptions()).getDocs()).hasSize(1);","723","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).createdAt(parseDate(\"2014-09-21\")).build(), new SearchOptions()).getDocs()).isEmpty();","736","    SearchResult<IssueDoc> result = underTest.search(query, options);","754","    Map<String, Long> createdAt = underTest.search(IssueQuery.builder(userSessionRule)","770","    Map<String, Long> createdAt = underTest.search(IssueQuery.builder(userSessionRule)","787","    Map<String, Long> createdAt = underTest.search(IssueQuery.builder(userSessionRule)","802","  public void facet_on_created_at_with_one_day() {","803","    SearchOptions SearchOptions = fixtureForCreatedAtFacet();","804","","805","    Map<String, Long> createdAt = underTest.search(IssueQuery.builder(userSessionRule)","806","        .createdAfter(parseDateTime(\"2014-09-01T00:00:00-0100\"))","807","        .createdBefore(parseDateTime(\"2014-09-02T00:00:00-0100\")).build(),","808","      SearchOptions).getFacets().get(\"createdAt\");","809","    assertThat(createdAt).containsOnly(","810","      entry(\"2014-09-01T01:00:00+0000\", 2L));","811","  }","812","","813","  @Test","817","    Map<String, Long> createdAt = underTest.search(IssueQuery.builder(userSessionRule)","836","    Map<String, Long> createdAt = underTest.search(IssueQuery.builder(userSessionRule)","851","    Map<String, Long> createdAt = underTest.search(IssueQuery.builder(userSessionRule).build(),","883","    SearchResult<IssueDoc> result = underTest.search(query.build(), new SearchOptions().setPage(2, 10));","887","    result = underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().setOffset(0).setLimit(5));","891","    result = underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().setOffset(2).setLimit(0));","908","    SearchResult<IssueDoc> result = underTest.search(query.build(), new SearchOptions().setLimit(Integer.MAX_VALUE));","923","    SearchResult<IssueDoc> result = underTest.search(query.build(), new SearchOptions());","929","    result = underTest.search(query.build(), new SearchOptions());","948","    SearchResult<IssueDoc> result = underTest.search(query.build(), new SearchOptions());","956","    result = underTest.search(query.build(), new SearchOptions());","974","    SearchResult<IssueDoc> result = underTest.search(query.build(), new SearchOptions());","980","    result = underTest.search(query.build(), new SearchOptions());","996","    SearchResult<IssueDoc> result = underTest.search(query.build(), new SearchOptions());","1002","    result = underTest.search(query.build(), new SearchOptions());","1018","    SearchResult<IssueDoc> result = underTest.search(query.build(), new SearchOptions());","1024","    result = underTest.search(query.build(), new SearchOptions());","1041","    SearchResult<IssueDoc> result = underTest.search(query.build(), new SearchOptions());","1048","    result = underTest.search(query.build(), new SearchOptions());","1075","    SearchResult<IssueDoc> result = underTest.search(query.build(), new SearchOptions());","1086","    result = underTest.search(query.build(), new SearchOptions());","1114","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions()).getDocs()).hasSize(1);","1117","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions()).getDocs()).hasSize(1);","1120","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions()).getDocs()).hasSize(2);","1123","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions()).getDocs()).isEmpty();","1126","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project3.uuid())).build(), new SearchOptions()).getDocs()).isEmpty();","1146","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions()).getDocs()).hasSize(1);","1149","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions()).getDocs()).hasSize(1);","1152","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions()).getDocs()).hasSize(0);","1155","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project3.key())).build(), new SearchOptions()).getDocs()).hasSize(0);","1171","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions()).getDocs()).hasSize(1);","1192","    List<IssueDoc> issues = Lists.newArrayList(underTest.selectIssuesForBatch(file));","1224","    assertThat(Lists.newArrayList(underTest.selectIssuesForBatch(project))).hasSize(3);","1225","    assertThat(Lists.newArrayList(underTest.selectIssuesForBatch(module))).hasSize(3);","1226","    assertThat(Lists.newArrayList(underTest.selectIssuesForBatch(subModule))).hasSize(2);","1227","    assertThat(Lists.newArrayList(underTest.selectIssuesForBatch(file))).hasSize(1);","1228","    assertThat(Lists.newArrayList(underTest.selectIssuesForBatch(ComponentTesting.newProjectDto()))).isEmpty();","1234","      underTest.selectIssuesForBatch(new ComponentDto().setScope(Scopes.DIRECTORY));","1255","    assertThat(Lists.newArrayList(underTest.selectIssuesForBatch(project1))).hasSize(1);","1258","    assertThat(Lists.newArrayList(underTest.selectIssuesForBatch(project2))).isEmpty();"],"delete":["73","  IssueIndex index;","89","    index = new IssueIndex(tester.client(), system, userSessionRule);","100","    Issue loaded = index.getByKey(issue.key());","114","    Issue result = index.getByKey(issue.key());","125","    Issue result = index.getByKey(issue.key());","136","    Issue result = index.getByKey(issue.key());","142","    index.getByKey(\"unknown\");","153","    assertThat(index.search(IssueQuery.builder(userSessionRule).issueKeys(newArrayList(\"1\", \"2\")).build(), new SearchOptions()).getDocs()).hasSize(2);","154","    assertThat(index.search(IssueQuery.builder(userSessionRule).issueKeys(newArrayList(\"1\")).build(), new SearchOptions()).getDocs()).hasSize(1);","155","    assertThat(index.search(IssueQuery.builder(userSessionRule).issueKeys(newArrayList(\"3\", \"4\")).build(), new SearchOptions()).getDocs()).isEmpty();","172","    assertThat(index.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).build(), new SearchOptions()).getDocs()).hasSize(6);","173","    assertThat(index.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(\"unknown\")).build(), new SearchOptions()).getDocs()).isEmpty();","186","    SearchResult<IssueDoc> result = index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"projectUuids\")));","204","      index.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).moduleUuids(newArrayList(file.uuid())).build(), new SearchOptions()).getDocs())","207","      index.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).moduleUuids(newArrayList(module.uuid())).build(), new SearchOptions()).getDocs())","210","      index.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).moduleUuids(newArrayList(subModule.uuid())).build(), new SearchOptions())","214","      index.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).moduleUuids(newArrayList(project.uuid())).build(), new SearchOptions()).getDocs())","217","      index.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).moduleUuids(newArrayList(\"unknown\")).build(), new SearchOptions()).getDocs())","240","    assertThat(index.search(IssueQuery.builder(userSessionRule).fileUuids(newArrayList(file1.uuid(), file2.uuid(), file3.uuid())).build(), new SearchOptions())","242","    assertThat(index.search(IssueQuery.builder(userSessionRule).fileUuids(newArrayList(file1.uuid())).build(), new SearchOptions())","244","    assertThat(index.search(IssueQuery.builder(userSessionRule).moduleRootUuids(newArrayList(subModule.uuid())).build(), new SearchOptions())","246","    assertThat(index.search(IssueQuery.builder(userSessionRule).moduleRootUuids(newArrayList(module.uuid())).build(), new SearchOptions())","248","    assertThat(index.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).build(), new SearchOptions())","250","    assertThat(index.search(IssueQuery.builder(userSessionRule).viewUuids(newArrayList(view)).build(), new SearchOptions())","252","    assertThat(index.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(\"unknown\")).build(), new SearchOptions())","275","    assertThat(index.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(\"unknown\")).build(), new SearchOptions()).getDocs()).isEmpty();","276","    assertThat(index.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).build(), new SearchOptions()).getDocs()).hasSize(6);","277","    assertThat(index.search(IssueQuery.builder(userSessionRule).viewUuids(newArrayList(view)).build(), new SearchOptions()).getDocs()).hasSize(6);","278","    assertThat(index.search(IssueQuery.builder(userSessionRule).moduleUuids(newArrayList(module.uuid())).build(), new SearchOptions()).getDocs()).hasSize(2);","279","    assertThat(index.search(IssueQuery.builder(userSessionRule).moduleUuids(newArrayList(subModule.uuid())).build(), new SearchOptions()).getDocs()).hasSize(2); \/\/ XXX","282","    assertThat(index.search(IssueQuery.builder(userSessionRule).fileUuids(newArrayList(file1.uuid())).build(), new SearchOptions()).getDocs()).hasSize(1);","283","    assertThat(index.search(IssueQuery.builder(userSessionRule).fileUuids(newArrayList(file1.uuid(), file2.uuid(), file3.uuid())).build(), new SearchOptions()).getDocs())","301","    SearchResult<IssueDoc> result = index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"fileUuids\")));","317","    assertThat(index.search(IssueQuery.builder(userSessionRule).directories(newArrayList(\"\/src\/main\/xoo\")).build(), new SearchOptions()).getDocs()).hasSize(1);","318","    assertThat(index.search(IssueQuery.builder(userSessionRule).directories(newArrayList(\"\/\")).build(), new SearchOptions()).getDocs()).hasSize(1);","319","    assertThat(index.search(IssueQuery.builder(userSessionRule).directories(newArrayList(\"unknown\")).build(), new SearchOptions()).getDocs()).isEmpty();","332","    SearchResult<IssueDoc> result = index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"directories\")));","357","    assertThat(index.search(IssueQuery.builder(userSessionRule).viewUuids(newArrayList(view1)).build(), new SearchOptions()).getDocs()).hasSize(2);","358","    assertThat(index.search(IssueQuery.builder(userSessionRule).viewUuids(newArrayList(view2)).build(), new SearchOptions()).getDocs()).hasSize(1);","359","    assertThat(index.search(IssueQuery.builder(userSessionRule).viewUuids(newArrayList(view1, view2)).build(), new SearchOptions()).getDocs()).hasSize(3);","360","    assertThat(index.search(IssueQuery.builder(userSessionRule).viewUuids(newArrayList(\"unknown\")).build(), new SearchOptions()).getDocs()).isEmpty();","372","    assertThat(index.search(IssueQuery.builder(userSessionRule).severities(newArrayList(Severity.INFO, Severity.MAJOR)).build(), new SearchOptions()).getDocs()).hasSize(2);","373","    assertThat(index.search(IssueQuery.builder(userSessionRule).severities(newArrayList(Severity.INFO)).build(), new SearchOptions()).getDocs()).hasSize(1);","374","    assertThat(index.search(IssueQuery.builder(userSessionRule).severities(newArrayList(Severity.BLOCKER)).build(), new SearchOptions()).getDocs()).isEmpty();","387","    SearchResult<IssueDoc> result = index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"severities\")));","401","    assertThat(index.search(IssueQuery.builder(userSessionRule).statuses(newArrayList(Issue.STATUS_CLOSED, Issue.STATUS_OPEN)).build(), new SearchOptions()).getDocs()).hasSize(2);","402","    assertThat(index.search(IssueQuery.builder(userSessionRule).statuses(newArrayList(Issue.STATUS_CLOSED)).build(), new SearchOptions()).getDocs()).hasSize(1);","403","    assertThat(index.search(IssueQuery.builder(userSessionRule).statuses(newArrayList(Issue.STATUS_CONFIRMED)).build(), new SearchOptions()).getDocs()).isEmpty();","416","    SearchResult<IssueDoc> result = index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"statuses\")));","431","      index.search(IssueQuery.builder(userSessionRule).resolutions(newArrayList(Issue.RESOLUTION_FALSE_POSITIVE, Issue.RESOLUTION_FIXED)).build(), new SearchOptions()).getDocs())","433","    assertThat(index.search(IssueQuery.builder(userSessionRule).resolutions(newArrayList(Issue.RESOLUTION_FALSE_POSITIVE)).build(), new SearchOptions()).getDocs()).hasSize(1);","434","    assertThat(index.search(IssueQuery.builder(userSessionRule).resolutions(newArrayList(Issue.RESOLUTION_REMOVED)).build(), new SearchOptions()).getDocs()).isEmpty();","447","    SearchResult<IssueDoc> result = index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"resolutions\")));","462","    assertThat(index.search(IssueQuery.builder(userSessionRule).resolved(true).build(), new SearchOptions()).getDocs()).hasSize(1);","463","    assertThat(index.search(IssueQuery.builder(userSessionRule).resolved(false).build(), new SearchOptions()).getDocs()).hasSize(2);","464","    assertThat(index.search(IssueQuery.builder(userSessionRule).resolved(null).build(), new SearchOptions()).getDocs()).hasSize(3);","475","    assertThat(index.search(IssueQuery.builder(userSessionRule).rules(newArrayList(ruleKey)).build(), new SearchOptions()).getDocs()).hasSize(1);","476","    assertThat(index.search(IssueQuery.builder(userSessionRule).rules(newArrayList(RuleKey.of(\"rule\", \"without issue\"))).build(), new SearchOptions()).getDocs()).isEmpty();","487","    assertThat(index.search(IssueQuery.builder(userSessionRule).languages(newArrayList(\"xoo\")).build(),","489","    assertThat(index.search(IssueQuery.builder(userSessionRule).languages(newArrayList(\"unknown\")).build(), new SearchOptions()).getDocs()).isEmpty();","500","    SearchResult<IssueDoc> result = index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"languages\")));","515","    assertThat(index.search(IssueQuery.builder(userSessionRule).assignees(newArrayList(\"steph\")).build(), new SearchOptions()).getDocs()).hasSize(1);","516","    assertThat(index.search(IssueQuery.builder(userSessionRule).assignees(newArrayList(\"steph\", \"simon\")).build(), new SearchOptions()).getDocs()).hasSize(2);","517","    assertThat(index.search(IssueQuery.builder(userSessionRule).assignees(newArrayList(\"unknown\")).build(), new SearchOptions()).getDocs()).isEmpty();","531","    SearchResult<IssueDoc> result = index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"assignees\")));","547","    SearchResult<IssueDoc> result = index.search(IssueQuery.builder(userSessionRule).assignees(Arrays.asList(\"j-b\")).build(),","563","    assertThat(index.search(IssueQuery.builder(userSessionRule).assigned(true).build(), new SearchOptions()).getDocs()).hasSize(1);","564","    assertThat(index.search(IssueQuery.builder(userSessionRule).assigned(false).build(), new SearchOptions()).getDocs()).hasSize(2);","565","    assertThat(index.search(IssueQuery.builder(userSessionRule).assigned(null).build(), new SearchOptions()).getDocs()).hasSize(3);","578","    assertThat(index.search(IssueQuery.builder(userSessionRule).authors(newArrayList(\"steph\")).build(), new SearchOptions()).getDocs()).hasSize(1);","579","    assertThat(index.search(IssueQuery.builder(userSessionRule).authors(newArrayList(\"steph\", \"simon\")).build(), new SearchOptions()).getDocs()).hasSize(2);","580","    assertThat(index.search(IssueQuery.builder(userSessionRule).authors(newArrayList(\"unknown\")).build(), new SearchOptions()).getDocs()).isEmpty();","594","    SearchResult<IssueDoc> result = index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"authors\")));","608","    assertThat(index.search(IssueQuery.builder(userSessionRule).createdAfter(parseDate(\"2014-09-19\")).build(), new SearchOptions()).getDocs()).hasSize(2);","610","    assertThat(index.search(IssueQuery.builder(userSessionRule).createdAfter(parseDate(\"2014-09-20\")).build(), new SearchOptions()).getDocs()).hasSize(2);","611","    assertThat(index.search(IssueQuery.builder(userSessionRule).createdAfter(parseDate(\"2014-09-21\")).build(), new SearchOptions()).getDocs()).hasSize(1);","612","    assertThat(index.search(IssueQuery.builder(userSessionRule).createdAfter(parseDate(\"2014-09-25\")).build(), new SearchOptions()).getDocs()).isEmpty();","624","    assertThat(index.search(IssueQuery.builder(userSessionRule).createdBefore(parseDate(\"2014-09-19\")).build(), new SearchOptions()).getDocs()).isEmpty();","626","    assertThat(index.search(IssueQuery.builder(userSessionRule).createdBefore(parseDate(\"2014-09-20\")).build(), new SearchOptions()).getDocs()).isEmpty();","627","    assertThat(index.search(IssueQuery.builder(userSessionRule).createdBefore(parseDate(\"2014-09-21\")).build(), new SearchOptions()).getDocs()).hasSize(1);","628","    assertThat(index.search(IssueQuery.builder(userSessionRule).createdBefore(parseDate(\"2014-09-25\")).build(), new SearchOptions()).getDocs()).hasSize(2);","641","    assertThat(index.search(IssueQuery.builder(userSessionRule)","646","    assertThat(index.search(IssueQuery.builder(userSessionRule)","651","    assertThat(index.search(IssueQuery.builder(userSessionRule)","656","    assertThat(index.search(IssueQuery.builder(userSessionRule)","661","    assertThat(index.search(IssueQuery.builder(userSessionRule)","666","    assertThat(index.search(IssueQuery.builder(userSessionRule)","671","    assertThat(index.search(IssueQuery.builder(userSessionRule)","685","    assertThat(index.search(IssueQuery.builder(userSessionRule)","689","    assertThat(index.search(IssueQuery.builder(userSessionRule)","697","      index.search(IssueQuery.builder(userSessionRule).createdAfter(parseDate(\"2014-09-20\")).createdBefore(parseDate(\"2014-09-19\")).build(),","708","      index.search(IssueQuery.builder(userSessionRule).createdAfter(new Date(Long.MAX_VALUE)).build(), new SearchOptions());","722","    assertThat(index.search(IssueQuery.builder(userSessionRule).createdAt(parseDate(\"2014-09-20\")).build(), new SearchOptions()).getDocs()).hasSize(1);","723","    assertThat(index.search(IssueQuery.builder(userSessionRule).createdAt(parseDate(\"2014-09-21\")).build(), new SearchOptions()).getDocs()).isEmpty();","736","    SearchResult<IssueDoc> result = index.search(query, options);","754","    Map<String, Long> createdAt = index.search(IssueQuery.builder(userSessionRule)","770","    Map<String, Long> createdAt = index.search(IssueQuery.builder(userSessionRule)","787","    Map<String, Long> createdAt = index.search(IssueQuery.builder(userSessionRule)","805","    Map<String, Long> createdAt = index.search(IssueQuery.builder(userSessionRule)","824","    Map<String, Long> createdAt = index.search(IssueQuery.builder(userSessionRule)","839","    Map<String, Long> createdAt = index.search(IssueQuery.builder(userSessionRule).build(),","871","    SearchResult<IssueDoc> result = index.search(query.build(), new SearchOptions().setPage(2, 10));","875","    result = index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().setOffset(0).setLimit(5));","879","    result = index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().setOffset(2).setLimit(0));","896","    SearchResult<IssueDoc> result = index.search(query.build(), new SearchOptions().setLimit(Integer.MAX_VALUE));","911","    SearchResult<IssueDoc> result = index.search(query.build(), new SearchOptions());","917","    result = index.search(query.build(), new SearchOptions());","936","    SearchResult<IssueDoc> result = index.search(query.build(), new SearchOptions());","944","    result = index.search(query.build(), new SearchOptions());","962","    SearchResult<IssueDoc> result = index.search(query.build(), new SearchOptions());","968","    result = index.search(query.build(), new SearchOptions());","984","    SearchResult<IssueDoc> result = index.search(query.build(), new SearchOptions());","990","    result = index.search(query.build(), new SearchOptions());","1006","    SearchResult<IssueDoc> result = index.search(query.build(), new SearchOptions());","1012","    result = index.search(query.build(), new SearchOptions());","1029","    SearchResult<IssueDoc> result = index.search(query.build(), new SearchOptions());","1036","    result = index.search(query.build(), new SearchOptions());","1063","    SearchResult<IssueDoc> result = index.search(query.build(), new SearchOptions());","1074","    result = index.search(query.build(), new SearchOptions());","1102","    assertThat(index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions()).getDocs()).hasSize(1);","1105","    assertThat(index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions()).getDocs()).hasSize(1);","1108","    assertThat(index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions()).getDocs()).hasSize(2);","1111","    assertThat(index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions()).getDocs()).isEmpty();","1114","    assertThat(index.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project3.uuid())).build(), new SearchOptions()).getDocs()).isEmpty();","1134","    assertThat(index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions()).getDocs()).hasSize(1);","1137","    assertThat(index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions()).getDocs()).hasSize(1);","1140","    assertThat(index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions()).getDocs()).hasSize(0);","1143","    assertThat(index.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project3.key())).build(), new SearchOptions()).getDocs()).hasSize(0);","1159","    assertThat(index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions()).getDocs()).hasSize(1);","1180","    List<IssueDoc> issues = Lists.newArrayList(index.selectIssuesForBatch(file));","1212","    assertThat(Lists.newArrayList(index.selectIssuesForBatch(project))).hasSize(3);","1213","    assertThat(Lists.newArrayList(index.selectIssuesForBatch(module))).hasSize(3);","1214","    assertThat(Lists.newArrayList(index.selectIssuesForBatch(subModule))).hasSize(2);","1215","    assertThat(Lists.newArrayList(index.selectIssuesForBatch(file))).hasSize(1);","1216","    assertThat(Lists.newArrayList(index.selectIssuesForBatch(ComponentTesting.newProjectDto()))).isEmpty();","1222","      index.selectIssuesForBatch(new ComponentDto().setScope(Scopes.DIRECTORY));","1243","    assertThat(Lists.newArrayList(index.selectIssuesForBatch(project1))).hasSize(1);","1246","    assertThat(Lists.newArrayList(index.selectIssuesForBatch(project2))).isEmpty();"]}]}},"087481a53525549b11fe3fce15534b489a44b4cf":{"changes":{"server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/httpd\/HttpAction.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/ce\/http\/CeHttpClient.java":"MODIFY","server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/httpd\/CeHttpUtils.java":"ADD","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/ws\/ChangeLogLevelAction.java":"MODIFY","server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/logging\/ChangeLogLevelHttpActionTest.java":"ADD","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/platform\/ws\/ChangeLogLevelActionTest.java":"MODIFY","server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/logging\/package-info.java":"ADD","server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/logging\/ChangeLogLevelHttpAction.java":"ADD","server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/systeminfo\/SystemInfoHttpActionTest.java":"MODIFY","server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/CeHttpModule.java":"MODIFY","server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/container\/ComputeEngineContainerImplTest.java":"MODIFY"},"diff":{"server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/httpd\/HttpAction.java":[{"add":["29"," * is started by the Pico Container). It's the action's responsibility to call the method"],"delete":["29"," * is started by the Pico Container). It's the action's responsability to call the method"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/ce\/http\/CeHttpClient.java":[{"add":["24","import okhttp3.OkHttpClient;","25","import okhttp3.RequestBody;","28","import org.sonar.api.utils.log.LoggerLevel;","29","import org.sonar.api.utils.log.Loggers;","32","import org.sonar.server.platform.ws.ChangeLogLevelAction;","42","  private static final String PATH_CHANGE_LOG_LEVEL = \"changeLogLevel\";","43","  private static final String PATH_SYSTEM_INFO = \"systemInfo\";","44","","57","    return call(SystemInfoActionClient.INSTANCE);","58","  }","59","","60","  private enum SystemInfoActionClient implements ActionClient<Optional<ProtobufSystemInfo.SystemInfo>> {","61","    INSTANCE;","62","","63","    @Override","64","    public String getPath() {","65","      return PATH_SYSTEM_INFO;","66","    }","67","","68","    @Override","69","    public Optional<ProtobufSystemInfo.SystemInfo> getDefault() {","70","      return Optional.empty();","71","    }","72","","73","    @Override","74","    public Optional<ProtobufSystemInfo.SystemInfo> call(String url) throws Exception {","75","      byte[] protobuf = IOUtils.toByteArray(new URI(url));","76","      return Optional.of(ProtobufSystemInfo.SystemInfo.parseFrom(protobuf));","77","    }","78","  }","79","","80","  public void changeLogLevel(LoggerLevel level) {","81","    call(new ChangeLogLevelActionClient(level));","82","  }","83","","84","  private static final class ChangeLogLevelActionClient implements ActionClient<Void> {","85","    private final LoggerLevel newLogLevel;","86","","87","    private ChangeLogLevelActionClient(LoggerLevel newLogLevel) {","88","      this.newLogLevel = newLogLevel;","89","    }","90","","91","    @Override","92","    public String getPath() {","93","      return PATH_CHANGE_LOG_LEVEL;","94","    }","95","","96","    @Override","97","    public Void getDefault() {","98","      return null;","99","    }","100","","101","    @Override","102","    public Void call(String url) throws Exception {","103","      okhttp3.Request request = new okhttp3.Request.Builder()","104","        .post(RequestBody.create(null, new byte[0]))","105","        .url(url + \"?level=\" + newLogLevel.name())","106","        .build();","107","      okhttp3.Response response = new OkHttpClient().newCall(request).execute();","108","      if (response.code() != 200) {","109","        Loggers.get(ChangeLogLevelAction.class).error(","110","          \"Failed to change log level in Compute Engine. Code was '{}' and response was '{}'\",","111","          response.code(),","112","          response.body().string());","113","      }","114","      return null;","115","    }","116","  }","117","","118","  private <T> T call(ActionClient<T> actionClient) {","121","        return actionClient.call(commands.getHttpUrl() + \"\/\" + actionClient.getPath());","123","      return actionClient.getDefault();","128","","129","  private interface ActionClient<T> {","130","    \/**","131","     * Path of the action.","132","     *\/","133","    String getPath();","134","","135","    \/**","136","     * Value to return when the Compute Engine is not ready.","137","     *\/","138","    T getDefault();","139","","140","    \/**","141","     * Delegates to perform the call to the Compute Engine's specified absolute URL.","142","     *\/","143","    T call(String url) throws Exception;","144","  }"],"delete":["51","        String url = commands.getHttpUrl() + \"\/systemInfo\";","52","        byte[] protobuf = IOUtils.toByteArray(new URI(url));","53","        return Optional.of(ProtobufSystemInfo.SystemInfo.parseFrom(protobuf));","55","      return Optional.empty();"]}],"server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/httpd\/CeHttpUtils.java":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/ws\/ChangeLogLevelAction.java":[{"add":["26","import org.sonar.ce.http.CeHttpClient;","38","  private final CeHttpClient ceHttpClient;","40","  public ChangeLogLevelAction(UserSession userSession, ServerLogging logging, Database db, CeHttpClient ceHttpClient) {","44","    this.ceHttpClient = ceHttpClient;","68","    ceHttpClient.changeLogLevel(level);"],"delete":["38","  public ChangeLogLevelAction(UserSession userSession, ServerLogging logging, Database db) {"]}],"server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/logging\/ChangeLogLevelHttpActionTest.java":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/platform\/ws\/ChangeLogLevelActionTest.java":[{"add":["26","import org.sonar.ce.http.CeHttpClient;","43","  private ServerLogging serverLogging = mock(ServerLogging.class);","44","  private Database db = mock(Database.class);","45","  private CeHttpClient ceHttpClient = mock(CeHttpClient.class);","46","  private ChangeLogLevelAction underTest = new ChangeLogLevelAction(userSession, serverLogging, db, ceHttpClient);","47","  private WsActionTester actionTester = new WsActionTester(underTest);","58","    verify(ceHttpClient).changeLogLevel(LoggerLevel.DEBUG);","71","    verify(ceHttpClient).changeLogLevel(LoggerLevel.TRACE);"],"delete":["39","","43","  ServerLogging serverLogging = mock(ServerLogging.class);","44","  Database db = mock(Database.class);","45","  ChangeLogLevelAction underTest = new ChangeLogLevelAction(userSession, serverLogging, db);","46","  WsActionTester actionTester = new WsActionTester(underTest);"]}],"server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/logging\/package-info.java":[{"add":[],"delete":[]}],"server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/logging\/ChangeLogLevelHttpAction.java":[{"add":[],"delete":[]}],"server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/systeminfo\/SystemInfoHttpActionTest.java":[{"add":["34","import static fi.iki.elonen.NanoHTTPD.Response.Status.METHOD_NOT_ALLOWED;","35","import static fi.iki.elonen.NanoHTTPD.Response.Status.OK;","39","import static org.sonar.ce.httpd.CeHttpUtils.createHttpSession;"],"delete":["34","import static fi.iki.elonen.NanoHTTPD.Response.Status.*;","38","import static org.mockito.Mockito.when;","79","  private NanoHTTPD.IHTTPSession createHttpSession(NanoHTTPD.Method method) {","80","    NanoHTTPD.IHTTPSession res = mock(NanoHTTPD.IHTTPSession.class);","81","    when(res.getMethod()).thenReturn(method);","82","    return res;","83","  }","84",""]}],"server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/CeHttpModule.java":[{"add":["22","import org.sonar.ce.logging.ChangeLogLevelHttpAction;","31","      SystemInfoHttpAction.class,","32","      ChangeLogLevelHttpAction.class);"],"delete":["30","      SystemInfoHttpAction.class);"]}],"server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/container\/ComputeEngineContainerImplTest.java":[{"add":["90","          + 79 \/\/ level 4","91","          + 4 \/\/ content of CeConfigurationModule","92","          + 3 \/\/ content of CeHttpModule"],"delete":["90","          + 75 \/\/ level 4","91","          + 7 \/\/ content of CeConfigurationModule","92","          + 2 \/\/ content of CeHttpModule"]}]}},"6b9cd9de97c3a80a4f30418592413ec7327fbec5":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/setting\/ThreadLocalSettings.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/setting\/ThreadLocalSettingsTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/setting\/ThreadLocalSettings.java":[{"add":["23","import java.util.Collections;","29","import org.apache.ibatis.exceptions.PersistenceException;","60","  private Map<String, String> getPropertyDbFailureCache = Collections.emptyMap();","61","  private Map<String, String> getPropertiesDbFailureCache = Collections.emptyMap();","103","      return Optional.ofNullable(load(key));","114","      loadedValue = load(key);","120","  private String load(String key) {","121","    try {","122","      return settingLoader.load(key);","123","    } catch (PersistenceException e) {","124","      return getPropertyDbFailureCache.get(key);","125","    }","126","  }","127","","161","    Map<String, String> settings = CACHE.get();","163","    \/\/ update cache of settings to be used in case of DB connectivity error","164","    this.getPropertyDbFailureCache = settings;","170","    loadAll(builder);","171","    systemProps.forEach((key, value) -> builder.put((String) key, (String) value));","174","","175","  private void loadAll(ImmutableMap.Builder<String, String> builder) {","176","    try {","177","      ImmutableMap.Builder<String, String> cacheBuilder = ImmutableMap.builder();","178","      settingLoader.loadAll(cacheBuilder);","179","      Map<String, String> cache = cacheBuilder.build();","180","      builder.putAll(cache);","181","      getPropertiesDbFailureCache = cache;","182","    } catch (PersistenceException e) {","183","      builder.putAll(getPropertiesDbFailureCache);","184","    }","185","  }"],"delete":["99","      return Optional.ofNullable(settingLoader.load(key));","110","      loadedValue = settingLoader.load(key);","155","    settingLoader.loadAll(builder);","156","    systemProps.entrySet().forEach(entry -> builder.put((String) entry.getKey(), (String) entry.getValue()));"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/setting\/ThreadLocalSettingsTest.java":[{"add":["29","import org.apache.ibatis.exceptions.PersistenceException;","38","import static org.apache.commons.lang.RandomStringUtils.randomAlphanumeric;","41","import static org.mockito.Matchers.any;","42","import static org.mockito.Mockito.doAnswer;","43","import static org.mockito.Mockito.doThrow;","55","  private MapSettingLoader dbSettingLoader = new MapSettingLoader();","172","  public void getProperties_is_not_cached_in_thread_cache() {","173","    insertPropertyIntoDb(\"foo\", \"bar\");","174","    underTest = create(Collections.emptyMap());","175","    underTest.load();","176","","177","    assertThat(underTest.getProperties())","178","      .containsOnly(entry(\"foo\", \"bar\"));","179","","180","    insertPropertyIntoDb(\"foo2\", \"bar2\");","181","    assertThat(underTest.getProperties())","182","      .containsOnly(entry(\"foo\", \"bar\"), entry(\"foo2\", \"bar2\"));","183","","184","    underTest.unload();","185","","186","    assertThat(underTest.getProperties())","187","      .containsOnly(entry(\"foo\", \"bar\"), entry(\"foo2\", \"bar2\"));","188","  }","189","","190","  @Test","257","  @Test","258","  public void getProperties_return_empty_if_DB_error_on_first_call_ever_out_of_thread_cache() {","259","    SettingLoader settingLoaderMock = mock(SettingLoader.class);","260","    PersistenceException toBeThrown = new PersistenceException(\"Faking an error connecting to DB\");","261","    doThrow(toBeThrown).when(settingLoaderMock).loadAll(any(ImmutableMap.Builder.class));","262","    underTest = new ThreadLocalSettings(new PropertyDefinitions(), new Properties(), settingLoaderMock);","263","","264","    assertThat(underTest.getProperties())","265","      .isEmpty();","266","  }","267","","268","  @Test","269","  public void getProperties_returns_empty_if_DB_error_on_first_call_ever_in_thread_cache() {","270","    SettingLoader settingLoaderMock = mock(SettingLoader.class);","271","    PersistenceException toBeThrown = new PersistenceException(\"Faking an error connecting to DB\");","272","    doThrow(toBeThrown).when(settingLoaderMock).loadAll(any(ImmutableMap.Builder.class));","273","    underTest = new ThreadLocalSettings(new PropertyDefinitions(), new Properties(), settingLoaderMock);","274","    underTest.load();","275","","276","    assertThat(underTest.getProperties())","277","      .isEmpty();","278","  }","279","","280","  @Test","281","  public void getProperties_return_properties_from_previous_thread_cache_if_DB_error_on_not_first_call() {","282","    String key = randomAlphanumeric(3);","283","    String value1 = randomAlphanumeric(4);","284","    String value2 = randomAlphanumeric(5);","285","    SettingLoader settingLoaderMock = mock(SettingLoader.class);","286","    PersistenceException toBeThrown = new PersistenceException(\"Faking an error connecting to DB\");","287","    doAnswer(invocationOnMock -> {","288","      ImmutableMap.Builder<String, String> builder = (ImmutableMap.Builder<String, String>) invocationOnMock.getArguments()[0];","289","      builder.put(key, value1);","290","      return null;","291","    }).doThrow(toBeThrown)","292","      .doAnswer(invocationOnMock -> {","293","        ImmutableMap.Builder<String, String> builder = (ImmutableMap.Builder<String, String>) invocationOnMock.getArguments()[0];","294","        builder.put(key, value2);","295","        return null;","296","      })","297","      .when(settingLoaderMock)","298","      .loadAll(any(ImmutableMap.Builder.class));","299","    underTest = new ThreadLocalSettings(new PropertyDefinitions(), new Properties(), settingLoaderMock);","300","","301","    underTest.load();","302","    assertThat(underTest.getProperties())","303","      .containsOnly(entry(key, value1));","304","    underTest.unload();","305","","306","    underTest.load();","307","    assertThat(underTest.getProperties())","308","      .containsOnly(entry(key, value1));","309","    underTest.unload();","310","","311","    underTest.load();","312","    assertThat(underTest.getProperties())","313","      .containsOnly(entry(key, value2));","314","    underTest.unload();","315","  }","316","","317","  @Test","318","  public void get_returns_empty_if_DB_error_on_first_call_ever_out_of_thread_cache() {","319","    SettingLoader settingLoaderMock = mock(SettingLoader.class);","320","    PersistenceException toBeThrown = new PersistenceException(\"Faking an error connecting to DB\");","321","    String key = randomAlphanumeric(3);","322","    doThrow(toBeThrown).when(settingLoaderMock).load(key);","323","    underTest = new ThreadLocalSettings(new PropertyDefinitions(), new Properties(), settingLoaderMock);","324","","325","    assertThat(underTest.get(key)).isEmpty();","326","  }","327","","328","  @Test","329","  public void get_returns_empty_if_DB_error_on_first_call_ever_in_thread_cache() {","330","    SettingLoader settingLoaderMock = mock(SettingLoader.class);","331","    PersistenceException toBeThrown = new PersistenceException(\"Faking an error connecting to DB\");","332","    String key = randomAlphanumeric(3);","333","    doThrow(toBeThrown).when(settingLoaderMock).load(key);","334","    underTest = new ThreadLocalSettings(new PropertyDefinitions(), new Properties(), settingLoaderMock);","335","    underTest.load();","336","","337","    assertThat(underTest.get(key)).isEmpty();","338","  }","339",""],"delete":["47","","48","  private MapSettingLoader dbSettingLoader = new MapSettingLoader();","49",""]}]}},"c448fdb79b7768cfbfd481ab15e25b823ef45a25":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/web-api\/styles\/web-api.css":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/web-api\/styles\/web-api.css":[{"add":["86","","87",".web-api-params td code {","88","  white-space: normal;","89","  word-wrap: break-word;","90","}"],"delete":[]}]}},"60d5ed1ee8daf428dc11494eae18cb5664d95683":{"changes":{"\/dev\/null":"DELETE","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/qualityprofile\/ActiveRuleTest.java":"ADD","sonar-db\/src\/main\/resources\/org\/sonar\/db\/qualityprofile\/ActiveRuleMapper.xml":"MODIFY"},"diff":{"\/dev\/null":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/qualityprofile\/ActiveRuleTest.java":[{"add":[],"delete":[]}],"sonar-db\/src\/main\/resources\/org\/sonar\/db\/qualityprofile\/ActiveRuleMapper.xml":[{"add":["19","    INNER JOIN rules_profiles qp ON qp.id=a.profile_id","20","    INNER JOIN rules r ON r.id = a.rule_id","35","    INNER JOIN rules_profiles qp ON qp.id=a.profile_id","37","    LEFT JOIN active_rules active_rule_parent ON active_rule_parent.profile_id=profile_parent.id AND a.rule_id=active_rule_parent.rule_id"],"delete":["19","    LEFT JOIN rules_profiles qp ON qp.id=a.profile_id","20","    LEFT JOIN rules r ON r.id = a.rule_id","23","","36","    LEFT JOIN rules_profiles qp ON qp.id=a.profile_id","38","    LEFT JOIN active_rules active_rule_parent ON active_rule_parent.profile_id=profile_parent.id AND","39","    a.rule_id=active_rule_parent.rule_id","94",""]}]}},"47d02a5e043b7a97c420bc47dfadb9d4b4b3c6eb":{"changes":{"sonar-application\/src\/main\/assembly\/conf\/sonar.properties":"MODIFY"},"diff":{"sonar-application\/src\/main\/assembly\/conf\/sonar.properties":[{"add":["103","# TCP port for incoming HTTP connections. Default value is 9000."],"delete":["103","","104","# TCP port for incoming HTTP connections. Disabled when value is -1."]}]}},"c769d5e095106fe0e922255d192c562ffef2f918":{"changes":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/db\/migrate\/540_create_activities_table.rb":"MODIFY","server\/sonar-web\/src\/main\/webapp\/WEB-INF\/gems\/gems\/activerecord-2.3.15\/lib\/active_record\/connection_adapters\/abstract\/schema_statements.rb":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/db\/migrate\/540_create_activities_table.rb":[{"add":["33","      t.column 'log_key', :string, :limit => 250"],"delete":["33","      t.column 'log_key', :string"]}],"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/gems\/gems\/activerecord-2.3.15\/lib\/active_record\/connection_adapters\/abstract\/schema_statements.rb":[{"add":["371","            # sonar: add missing :limit => 255 to not break mysql on some windows environments","372","            schema_migrations_table.column :version, :string, :null => false, :limit => 255"],"delete":["371","            schema_migrations_table.column :version, :string, :null => false"]}]}},"619214a968a6887d14da7f3eee66ecaba85145ee":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ce\/ws\/ActivityAction.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ce\/ws\/ActivityAction.java":[{"add":["75","  private static final String[] POSSIBLE_QUALIFIERS = new String[] {Qualifiers.PROJECT, Qualifiers.APP, Qualifiers.VIEW};"],"delete":["75","  private static final String[] POSSIBLE_QUALIFIERS = new String[] {Qualifiers.PROJECT, Qualifiers.APP, Qualifiers.VIEW, \"DEV\", Qualifiers.MODULE};"]}]}},"5e36feac9416523f4eb4fb94415db49e6ec01e7d":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/system\/utils.ts":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/system\/utils.ts":[{"add":["49","  return omit(sysInfoObject, [","50","    HEALTH_FIELD,","51","    HEALTHCAUSES_FIELD,","52","    'Name',","53","    PLUGINS_FIELD,","54","    SETTINGS_FIELD","55","  ]);"],"delete":["49","  return omit(sysInfoObject, [HEALTH_FIELD, HEALTHCAUSES_FIELD, 'Name', SETTINGS_FIELD]);"]}]}},"84d63b4b2cc9461695f0a892818e2874a8b14650":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/usergroups\/ws\/SearchAction.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/plugins\/ws\/UpdatesAction.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/plugins\/ws\/AvailableAction.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/usergroups\/ws\/SearchAction.java":[{"add":["63","      .setDescription(\"Search for user groups.<br>\" +","64","        \"Requires to be logged.\")"],"delete":["63","      .setDescription(\"Search for user groups <br>.\" +","64","        \"Require to be logged.\")"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/plugins\/ws\/UpdatesAction.java":[{"add":["79","        \"Update status values are: [COMPATIBLE, INCOMPATIBLE, REQUIRES_UPGRADE, DEPS_REQUIRE_UPGRADE].<br\/>\" +"],"delete":["79","        \"Update status values are: [COMPATIBLE, INCOMPATIBLE, REQUIRES_UPGRADE, DEPS_REQUIRE_UPGRADE]<br\/>.\" +"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/plugins\/ws\/AvailableAction.java":[{"add":["65","        \"<\/ul>\" +"],"delete":["65","        \"<\/ul>.<br\/>\" +"]}]}},"b9f35c95ac7a7dbf853fb9f58f2c7b4688fa6e1d":{"changes":{"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/permission\/AuthorizationMapper.xml":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/permission\/AuthorizationMapper.xml":[{"add":["402","    select u.login","403","    from users u","404","    where","405","      u.login in <foreach collection=\"logins\" open=\"(\" close=\")\" item=\"login\" separator=\",\">#{login,jdbcType=VARCHAR}<\/foreach>","406","      and (","407","        exists (","408","          select 1","409","          from user_roles ur","410","          inner join projects p on p.id = ur.resource_id and p.organization_uuid = ur.organization_uuid","411","          where","412","            p.kee =  #{projectKey,jdbcType=VARCHAR}","413","            and ur.role = #{permission,jdbcType=VARCHAR}","414","            and ur.user_id = u.id","415","        ) or exists (","416","          select 1","417","          from projects p","418","          inner join group_roles gr on gr.resource_id = p.id and gr.organization_uuid = p.organization_uuid","419","          inner join groups_users gu on gu.group_id = gr.group_id","420","          where","421","            p.kee  =  #{projectKey,jdbcType=VARCHAR}","422","            and gu.user_id = u.id","423","            and gr.role = #{permission,jdbcType=VARCHAR}","424","        )","425","        <if test=\"permission == 'user' or permission == 'codeviewer'\">","426","          or exists (","427","            select 1","428","            from projects p","429","            where","430","              p.kee =  #{projectKey,jdbcType=VARCHAR}","431","              and p.private = ${_false}","432","          )","433","        <\/if>","434","      )"],"delete":["402","      SELECT u.login","403","      FROM users u","404","      INNER JOIN user_roles ur ON ur.user_id = u.id","405","      INNER JOIN projects p ON p.kee = #{projectKey,jdbcType=VARCHAR}","406","      WHERE","407","        ur.organization_uuid = p.organization_uuid","408","        AND ur.resource_id = p.id","409","        AND ur.role = #{permission,jdbcType=VARCHAR}","410","        AND u.login IN <foreach collection=\"logins\" open=\"(\" close=\")\" item=\"login\" separator=\",\">#{login}<\/foreach>","411","","412","      UNION","413","","414","      SELECT u.login","415","      FROM users u","416","      INNER JOIN projects p ON p.kee = #{projectKey,jdbcType=VARCHAR}","417","      INNER JOIN group_roles gr ON gr.organization_uuid = p.organization_uuid","418","      INNER JOIN groups_users gu ON gr.group_id = gu.group_id","419","      WHERE","420","        gu.user_id = u.id","421","        AND gr.role = #{permission,jdbcType=VARCHAR}","422","        AND u.login IN <foreach collection=\"logins\" open=\"(\" close=\")\" item=\"login\" separator=\",\">#{login}<\/foreach>","423","","424","    <if test=\"permission == 'user' or permission == 'codeviewer'\">","425","      UNION","426","","427","      SELECT u.login","428","      FROM users u","429","      INNER JOIN projects p ON p.kee = #{projectKey,jdbcType=VARCHAR}","430","      WHERE","431","        p.private = ${_false}","432","        AND u.login IN <foreach collection=\"logins\" open=\"(\" close=\")\" item=\"login\" separator=\",\">#{login}<\/foreach>","433","    <\/if>"]}]}},"b45880c057dafd84c9e47be48a061374e316d3d1":{"changes":{"server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/webhook\/WebhookCallerImpl.java":"MODIFY","server\/sonar-server-common\/src\/test\/java\/org\/sonar\/server\/webhook\/HttpUrlHelperTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/webhook\/ws\/ListAction.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/webhook\/WebhookTesting.java":"MODIFY","server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/webhook\/HttpUrlHelper.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/webhook\/ws\/ListActionTest.java":"MODIFY"},"diff":{"server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/webhook\/WebhookCallerImpl.java":[{"add":["70","      builder.setEffectiveUrl(HttpUrlHelper.obfuscateCredentials(webhook.getUrl(), url));"],"delete":["70","      builder.setEffectiveUrl(HttpUrlHelper.toEffectiveUrl(webhook.getUrl(), url));"]}],"server\/sonar-server-common\/src\/test\/java\/org\/sonar\/server\/webhook\/HttpUrlHelperTest.java":[{"add":["33","import static org.sonar.server.webhook.HttpUrlHelper.obfuscateCredentials;","39","  @UseDataProvider(\"obfuscateCredentialsUseCases\")","40","  public void verify_obfuscateCredentials(String originalUrl, String expectedUrl) {","41","    assertThat(obfuscateCredentials(originalUrl, HttpUrl.parse(originalUrl)))","42","      .isEqualTo(obfuscateCredentials(originalUrl))","43","      .isEqualTo(expectedUrl);","47","  public static Object[][] obfuscateCredentialsUseCases() {"],"delete":["38","  @UseDataProvider(\"toEffectiveUrlUseCases\")","39","  public void verify_toEffectiveUrl(String originalUrl, String expectedUrl) {","40","    assertThat(HttpUrlHelper.toEffectiveUrl(originalUrl, HttpUrl.parse(originalUrl))).isEqualTo(expectedUrl);","44","  public static Object[][] toEffectiveUrlUseCases() {"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/webhook\/ws\/ListAction.java":[{"add":["44","import static org.sonar.server.webhook.HttpUrlHelper.obfuscateCredentials;","146","          .setUrl(obfuscateCredentials(webhook.getUrl()));"],"delete":["140","      .stream()","146","          .setUrl(webhook.getUrl());"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/webhook\/WebhookTesting.java":[{"add":["21","import java.util.Arrays;","22","import java.util.function.Consumer;","51","  @SafeVarargs","52","  public static WebhookDto newOrganizationWebhook(String name, String organizationUuid, Consumer<WebhookDto>... consumers) {","53","    return getWebhookDto(consumers)","58","  @SafeVarargs","59","  private static WebhookDto getWebhookDto(Consumer<WebhookDto>... consumers) {","60","    WebhookDto res = new WebhookDto()","65","    Arrays.stream(consumers).forEach(consumer -> consumer.accept(res));","66","    return res;"],"delete":["49","  public static WebhookDto newOrganizationWebhook(String name, String organizationUuid) {","50","    return getWebhookDto()","55","  private static WebhookDto getWebhookDto() {","56","    return new WebhookDto()"]}],"server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/webhook\/HttpUrlHelper.java":[{"add":["31","public final class HttpUrlHelper {","36","  public static String obfuscateCredentials(String originalUrl) {","37","    HttpUrl parsedUrl = HttpUrl.parse(originalUrl);","38","    if (parsedUrl != null) {","39","      return obfuscateCredentials(originalUrl, parsedUrl);","40","    }","41","    return originalUrl;","42","  }","43","","54","  static String obfuscateCredentials(String originalUrl, HttpUrl parsedUrl) {","103","  @CheckForNull"],"delete":["31","final class HttpUrlHelper {","46","  public static String toEffectiveUrl(String originalUrl, HttpUrl parsedUrl) {"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/webhook\/ws\/ListActionTest.java":[{"add":["150","  public void obfuscate_credentials_in_webhook_URLs() {","151","    String url = \"http:\/\/foo:barouf@toto\/bop\";","152","    String expectedUrl = \"http:\/\/***:******@toto\/bop\";","153","    WebhookDto webhook1 = webhookDbTester.insert(newOrganizationWebhook(\"aaa\", defaultOrganizationProvider.get().getUuid(), t -> t.setUrl(url)));","154","    webhookDeliveryDbTester.insert(newDto(\"WH1-DELIVERY-1-UUID\", webhook1.getUuid(), \"COMPONENT_1\", \"TASK_1\").setCreatedAt(BEFORE));","155","    webhookDeliveryDbTester.insert(newDto(\"WH1-DELIVERY-2-UUID\", webhook1.getUuid(), \"COMPONENT_1\", \"TASK_2\").setCreatedAt(NOW));","156","    WebhookDto webhook2 = webhookDbTester.insert(newOrganizationWebhook(\"bbb\", db.getDefaultOrganization().getUuid(), t -> t.setUrl(url)));","157","","158","    userSession.logIn().addPermission(ADMINISTER, db.getDefaultOrganization().getUuid());","159","","160","    ListResponse response = wsActionTester.newRequest().executeProtobuf(ListResponse.class);","161","","162","    List<Webhooks.ListResponseElement> elements = response.getWebhooksList();","163","    assertThat(elements)","164","      .hasSize(2)","165","      .extracting(Webhooks.ListResponseElement::getUrl)","166","      .containsOnly(expectedUrl);","167","  }","168","","169","  @Test"],"delete":[]}]}},"440c8093d3f5b7128aaf93775b91984430990f4a":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/preview-graph\/PreviewGraphTooltipsContent.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/styles.css":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/preview-graph\/__tests__\/__snapshots__\/PreviewGraphTooltipsContent-test.tsx.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/preview-graph\/PreviewGraphTooltipsContent.tsx":[{"add":["39","      <td>","40","        <div className=\"text-ellipsis overview-analysis-graph-tooltip-description\">","41","          {translatedName}","42","        <\/div>"],"delete":["39","      <td className=\"text-ellipsis overview-analysis-graph-tooltip-description\">","40","        {translatedName}"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/styles.css":[{"add":["418","  max-width: 80px;"],"delete":["418","  max-width: 120px;"]}],"server\/sonar-web\/src\/main\/js\/components\/preview-graph\/__tests__\/__snapshots__\/PreviewGraphTooltipsContent-test.tsx.snap":[{"add":["18","  <td>","19","    <div","20","      className=\"text-ellipsis overview-analysis-graph-tooltip-description\"","21","    >","22","      Code Smells","23","    <\/div>"],"delete":["18","  <td","19","    className=\"text-ellipsis overview-analysis-graph-tooltip-description\"","20","  >","21","    Code Smells"]}]}},"48feb5a6bd658c638b0cdd03231d0799fde533c0":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/queue\/ReportSubmitter.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/step\/ValidateProjectStep.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/queue\/ReportSubmitterTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/step\/ValidateProjectStepTest.java":"MODIFY","tests\/src\/test\/java\/org\/sonarqube\/tests\/analysis\/ScannerTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/queue\/ReportSubmitter.java":[{"add":["21","import com.google.common.base.Optional;","23","import java.util.ArrayList;","31","import org.sonar.api.resources.Scopes;","47","import org.sonar.server.exceptions.BadRequestException;","52","import static com.google.common.base.Preconditions.checkArgument;","53","import static java.lang.String.format;","54","import static org.sonar.core.permission.GlobalPermissions.SCAN_EXECUTION;","55","import static org.sonar.server.component.NewComponent.newComponentBuilder;","56","import static org.sonar.server.user.AbstractUserSession.insufficientPrivilegesException;","91","      Optional<ComponentDto> component = dbClient.componentDao().selectByKey(dbSession, effectiveProjectKey);","92","      validateProject(dbSession, component, projectKey);","93","      ensureOrganizationIsConsistent(component, organizationDto);","94","      ComponentDto project = component.or(() -> createProject(dbSession, organizationDto, projectKey, projectBranch, projectName));","117","  private void validateProject(DbSession dbSession, Optional<ComponentDto> project, String rawProjectKey) {","118","    List<String> errors = new ArrayList<>();","119","    if (!project.isPresent()) {","120","      return;","121","    }","122","","123","    ComponentDto component = project.get();","124","    if (!Qualifiers.PROJECT.equals(component.qualifier()) || !Scopes.PROJECT.equals(component.scope())) {","125","      errors.add(format(\"Component '%s' is not a project\", rawProjectKey));","126","    }","127","    if (!project.get().projectUuid().equals(project.get().uuid())) {","128","      \/\/ Project key is already used as a module of another project","129","      ComponentDto anotherBaseProject = dbClient.componentDao().selectOrFailByUuid(dbSession, project.get().projectUuid());","130","      errors.add(format(\"The project '%s' is already defined in SonarQube but as a module of project '%s'. \"","131","        + \"If you really want to stop directly analysing project '%s', please first delete it from SonarQube and then relaunch the analysis of project '%s'.\",","132","        rawProjectKey, anotherBaseProject.getKey(), anotherBaseProject.getKey(), rawProjectKey));","133","    }","134","    if (!errors.isEmpty()) {","135","      throw BadRequestException.create(errors);","136","    }","137","  }","138",""],"delete":["21","import static com.google.common.base.Preconditions.checkArgument;","22","import static java.lang.String.format;","23","import static org.sonar.core.permission.GlobalPermissions.SCAN_EXECUTION;","24","import static org.sonar.server.component.NewComponent.newComponentBuilder;","25","import static org.sonar.server.user.AbstractUserSession.insufficientPrivilegesException;","26","","32","","34","","56","import com.google.common.base.Optional;","91","      Optional<ComponentDto> opt = dbClient.componentDao().selectByKey(dbSession, effectiveProjectKey);","92","      ensureOrganizationIsConsistent(opt, organizationDto);","93","      ComponentDto project = opt.or(() -> createProject(dbSession, organizationDto, projectKey, projectBranch, projectName));"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/step\/ValidateProjectStep.java":[{"add":["51"," * <li>module key is not valid<\/li>"],"delete":["27","import org.sonar.api.resources.Qualifiers;","28","import org.sonar.api.resources.Scopes;","53"," * <li>branch is not valid<\/li>","54"," * <li>project or module key is not valid<\/li>","117","      validateBatchKey(rawProject);","120","      validateRootIsProject(baseProject);","121","      validateProjectKey(baseProject, rawProjectKey);","125","    private void validateRootIsProject(Optional<ComponentDto> baseProject) {","126","      if (baseProject.isPresent()) {","127","        ComponentDto componentDto = baseProject.get();","128","        \/\/ the scope field is verified for excluding the project copies generated by portfolios","129","        if (!Qualifiers.PROJECT.equals(componentDto.qualifier()) || !Scopes.PROJECT.equals(componentDto.scope())) {","130","          validationMessages.add(format(\"Component (uuid=%s, key=%s) is not a project\", rawProject.getUuid(), rawProject.getKey()));","131","        }","132","      }","133","    }","134","","135","    private void validateProjectKey(Optional<ComponentDto> baseProject, String rawProjectKey) {","136","      if (baseProject.isPresent() && !baseProject.get().projectUuid().equals(baseProject.get().uuid())) {","137","        \/\/ Project key is already used as a module of another project","138","        ComponentDto anotherBaseProject = componentDao.selectOrFailByUuid(session, baseProject.get().projectUuid());","139","        validationMessages.add(format(\"The project \\\"%s\\\" is already defined in SonarQube but as a module of project \\\"%s\\\". \"","140","          + \"If you really want to stop directly analysing project \\\"%s\\\", please first delete it from SonarQube and then relaunch the analysis of project \\\"%s\\\".\",","141","          rawProjectKey, anotherBaseProject.getDbKey(), anotherBaseProject.getDbKey(), rawProjectKey));","142","      }","143","    }","144",""]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/queue\/ReportSubmitterTest.java":[{"add":["50","import org.sonar.server.exceptions.BadRequestException;","57","import static java.lang.String.format;","60","import static org.junit.Assert.fail;","70","import static org.sonar.db.component.ComponentTesting.newModuleDto;","83","  public ExpectedException expectedException = ExpectedException.none();","116","        .thenReturn(true);","172","        .thenReturn(true);","203","        .thenReturn(true);","222","        .thenReturn(true);","266","    expectedException.expect(ForbiddenException.class);","270","  @Test","271","  public void fail_with_NotFoundException_if_organization_with_specified_key_does_not_exist() {","272","    expectedException.expect(NotFoundException.class);","273","    expectedException.expectMessage(\"Organization with key 'fop' does not exist\");","274","","275","    underTest.submit(\"fop\", PROJECT_KEY, null, null, null \/* method will fail before parameter is used *\/);","276","  }","277","","278","  @Test","279","  public void fail_with_organizationKey_does_not_match_organization_of_specified_component() {","280","    userSession.logIn().setRoot();","281","    OrganizationDto organization = db.organizations().insert();","282","    ComponentDto project = db.components().insertPrivateProject(organization);","283","    mockSuccessfulPrepareSubmitCall();","284","","285","    underTest.submit(organization.getKey(), project.getDbKey(), null, project.name(), IOUtils.toInputStream(\"{binary}\"));","286","  }","287","","288","  @Test","289","  public void fail_if_component_is_not_a_project() {","290","    ComponentDto component = db.components().insertPublicPortfolio(db.getDefaultOrganization());","291","    userSession.logIn().addProjectPermission(SCAN_EXECUTION, component);","292","    mockSuccessfulPrepareSubmitCall();","293","","294","    expectedException.expect(BadRequestException.class);","295","    expectedException.expectMessage(format(\"Component '%s' is not a project\", component.getKey()));","296","","297","    underTest.submit(defaultOrganizationKey, component.getDbKey(), null, component.name(), IOUtils.toInputStream(\"{binary}\"));","298","  }","299","","300","  @Test","301","  public void fail_if_project_key_already_exists_as_module() {","302","    ComponentDto project = db.components().insertPrivateProject(db.getDefaultOrganization());","303","    ComponentDto module = db.components().insertComponent(newModuleDto(project));","304","    userSession.logIn().addProjectPermission(SCAN_EXECUTION, project);","305","    mockSuccessfulPrepareSubmitCall();","306","","307","    try {","308","      underTest.submit(defaultOrganizationKey, module.getDbKey(), null, module.name(), IOUtils.toInputStream(\"{binary}\"));","309","      fail();","310","    } catch (BadRequestException e) {","311","      assertThat(e.errors()).contains(","312","        format(\"The project '%s' is already defined in SonarQube but as a module of project '%s'. \" +","313","          \"If you really want to stop directly analysing project '%s', please first delete it from SonarQube and then relaunch the analysis of project '%s'.\",","314","          module.getKey(), project.getKey(), project.getKey(), module.getKey()));","315","    }","316","  }","317","","318","  @Test","319","  public void fail_with_forbidden_exception_when_no_scan_permission() {","320","    expectedException.expect(ForbiddenException.class);","321","","322","    underTest.submit(defaultOrganizationKey, PROJECT_KEY, null, PROJECT_NAME, IOUtils.toInputStream(\"{binary}\"));","323","  }","324","","325","  @Test","326","  public void fail_with_forbidden_exception_on_new_project_when_only_project_scan_permission() {","327","    userSession.addProjectPermission(SCAN_EXECUTION, ComponentTesting.newPrivateProjectDto(db.getDefaultOrganization(), PROJECT_UUID));","328","","329","    mockSuccessfulPrepareSubmitCall();","330","    when(componentUpdater.create(any(DbSession.class), any(NewComponent.class), eq(null))).thenReturn(new ComponentDto().setUuid(PROJECT_UUID).setDbKey(PROJECT_KEY));","331","","332","    expectedException.expect(ForbiddenException.class);","333","    underTest.submit(defaultOrganizationKey, PROJECT_KEY, null, PROJECT_NAME, IOUtils.toInputStream(\"{binary}\"));","334","  }","335",""],"delete":["79","  public ExpectedException thrown = ExpectedException.none();","102","  public void submit_fails_with_NotFoundException_if_organization_with_specified_key_does_not_exist() {","103","    thrown.expect(NotFoundException.class);","104","    thrown.expectMessage(\"Organization with key 'fop' does not exist\");","105","","106","    underTest.submit(\"fop\", PROJECT_KEY, null, null, null \/* method will fail before parameter is used *\/);","107","  }","108","","109","  @Test","110","  public void submit_fails_with_organizationKey_does_not_match_organization_of_specified_component() {","111","    userSession.logIn().setRoot();","112","    OrganizationDto organization = db.organizations().insert();","113","    ComponentDto project = db.components().insertPrivateProject(organization);","114","    mockSuccessfulPrepareSubmitCall();","115","","116","    underTest.submit(organization.getKey(), project.getDbKey(), null, project.name(), IOUtils.toInputStream(\"{binary}\"));","117","  }","118","","119","  @Test","130","      .thenReturn(true);","186","      .thenReturn(true);","217","      .thenReturn(true);","236","      .thenReturn(true);","268","  @Test","269","  public void fail_with_forbidden_exception_when_no_scan_permission() {","270","    thrown.expect(ForbiddenException.class);","271","","272","    underTest.submit(defaultOrganizationKey, PROJECT_KEY, null, PROJECT_NAME, IOUtils.toInputStream(\"{binary}\"));","273","  }","274","","275","  @Test","276","  public void fail_with_forbidden_exception_on_new_project_when_only_project_scan_permission() {","277","    userSession.addProjectPermission(SCAN_EXECUTION, ComponentTesting.newPrivateProjectDto(db.getDefaultOrganization(), PROJECT_UUID));","278","","279","    mockSuccessfulPrepareSubmitCall();","280","    when(componentUpdater.create(any(DbSession.class), any(NewComponent.class), eq(null))).thenReturn(new ComponentDto().setUuid(PROJECT_UUID).setDbKey(PROJECT_KEY));","281","","282","    thrown.expect(ForbiddenException.class);","283","    underTest.submit(defaultOrganizationKey, PROJECT_KEY, null, PROJECT_NAME, IOUtils.toInputStream(\"{binary}\"));","284","  }","285","","298","    thrown.expect(ForbiddenException.class);"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/step\/ValidateProjectStepTest.java":[{"add":[],"delete":["73","  public void fail_if_root_component_is_not_a_project_in_db() {","74","    reportReader.putComponent(ScannerReport.Component.newBuilder()","75","      .setRef(1)","76","      .setType(ComponentType.PROJECT)","77","      .setKey(PROJECT_KEY)","78","      .build());","79","    treeRootHolder.setRoot(ReportComponent.builder(Component.Type.PROJECT, 1).setUuid(\"ABCD\").setKey(PROJECT_KEY).build());","80","","81","    ComponentDto project = ComponentTesting.newView(dbTester.organizations().insert(), \"ABCD\").setDbKey(PROJECT_KEY);","82","    dbClient.componentDao().insert(dbTester.getSession(), project);","83","    dbTester.getSession().commit();","84","","85","    thrown.expect(MessageException.class);","86","    thrown.expectMessage(\"Validation of project failed:\\n\" +","87","      \"  o Component (uuid=ABCD, key=PROJECT_KEY) is not a project\");","88","","89","    underTest.execute();","90","  }","91","","92","  @Test","93","  public void fail_on_invalid_key() {","94","    String invalidProjectKey = \"Project\\\\Key\";","95","","96","    reportReader.putComponent(ScannerReport.Component.newBuilder()","97","      .setRef(1)","98","      .setType(ComponentType.PROJECT)","99","      .setKey(invalidProjectKey)","100","      .addChildRef(2)","101","      .build());","102","    reportReader.putComponent(ScannerReport.Component.newBuilder()","103","      .setRef(2)","104","      .setType(ComponentType.MODULE)","105","      .setKey(\"Module$Key\")","106","      .build());","107","    treeRootHolder.setRoot(ReportComponent.builder(Component.Type.PROJECT, 1).setUuid(\"ABCD\").setKey(invalidProjectKey).addChildren(","108","      ReportComponent.builder(Component.Type.MODULE, 2).setUuid(\"BCDE\").setKey(\"Module$Key\").build())","109","      .build());","110","","111","    thrown.expect(MessageException.class);","112","    thrown.expectMessage(\"Validation of project failed:\\n\" +","113","      \"  o \\\"Project\\\\Key\\\" is not a valid project or module key. Allowed characters are alphanumeric, '-', '_', '.' and ':', with at least one non-digit.\\n\" +","114","      \"  o \\\"Module$Key\\\" is not a valid project or module key. Allowed characters are alphanumeric, '-', '_', '.' and ':', with at least one non-digit\");","115","","116","    underTest.execute();","117","  }","118","","119","  @Test","185","  public void fail_if_project_key_already_exists_as_module() {","186","    String anotherProjectKey = \"ANOTHER_PROJECT_KEY\";","187","","188","    reportReader.putComponent(ScannerReport.Component.newBuilder()","189","      .setRef(1)","190","      .setType(ComponentType.PROJECT)","191","      .setKey(PROJECT_KEY)","192","      .addChildRef(2)","193","      .build());","194","    reportReader.putComponent(ScannerReport.Component.newBuilder()","195","      .setRef(2)","196","      .setType(ComponentType.MODULE)","197","      .setKey(MODULE_KEY)","198","      .build());","199","","200","    ComponentDto anotherProject = ComponentTesting.newPrivateProjectDto(dbTester.organizations().insert()).setDbKey(anotherProjectKey);","201","    dbClient.componentDao().insert(dbTester.getSession(), anotherProject);","202","    ComponentDto module = ComponentTesting.newModuleDto(\"ABCD\", anotherProject).setDbKey(PROJECT_KEY);","203","    dbClient.componentDao().insert(dbTester.getSession(), module);","204","    dbTester.getSession().commit();","205","","206","    treeRootHolder.setRoot(ReportComponent.builder(Component.Type.PROJECT, 1).setUuid(\"ABCD\").setKey(PROJECT_KEY).addChildren(","207","      ReportComponent.builder(Component.Type.MODULE, 2).setUuid(\"BCDE\").setKey(MODULE_KEY).build())","208","      .build());","209","","210","    thrown.expect(MessageException.class);","211","    thrown.expectMessage(\"Validation of project failed:\\n\" +","212","      \"  o Component (uuid=ABCD, key=PROJECT_KEY) is not a project\\n\" +","213","      \"  o The project \\\"\" + PROJECT_KEY + \"\\\" is already defined in SonarQube but as a module of project \\\"\" + anotherProjectKey + \"\\\". \" +","214","      \"If you really want to stop directly analysing project \\\"\" + anotherProjectKey + \"\\\", please first delete it from SonarQube and then relaunch the analysis of project \\\"\"","215","      + PROJECT_KEY + \"\\\".\");","216","","217","    underTest.execute();","218","  }","219","","220","  @Test"]}],"tests\/src\/test\/java\/org\/sonarqube\/tests\/analysis\/ScannerTest.java":[{"add":["335","  @Test","336","  public void display_explicit_message_when_using_existing_module_key_as_project_key() {","337","    String projectKey = \"com.sonarsource.it.samples:multi-modules-sample\";","338","    String moduleKey = \"com.sonarsource.it.samples:multi-modules-sample:module_a\";","339","    scan(\"shared\/xoo-multi-modules-sample\", \"sonar.projectKey\", projectKey);","340","","341","    BuildResult buildResult = scanQuietly(\"shared\/xoo-sample\", \"sonar.projectKey\", moduleKey);","342","    assertThat(buildResult.getLastStatus()).isEqualTo(1);","343","    assertThat(buildResult.getLogs())","344","      .contains(String.format(\"Component '%s' is not a project\", moduleKey))","345","      .contains(String.format(\"The project '%s' is already defined in SonarQube but as a module of project '%s'. If you really want to stop directly analysing project '%s', \" +","346","        \"please first delete it from SonarQube and then relaunch the analysis of project '%s'\", moduleKey, projectKey, projectKey, moduleKey));","347","  }","348",""],"delete":[]}]}},"23f172629a20af2d2101db70707061b82167b5c4":{"changes":{"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/global\/GlobalNavMenu.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/nav\/global\/__tests__\/__snapshots__\/GlobalNavMenu-test.tsx.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/global\/GlobalNavMenu.tsx":[{"add":["23","import { getQualityGatesUrl } from '..\/..\/..\/..\/helpers\/urls';","48","        <Link className={classNames({ active })} to=\"\/projects\">","70","    const active = this.props.location.pathname.startsWith('\/issues');","100","        <Link activeClassName=\"active\" to=\"\/coding_rules\">"],"delete":["23","import { getQualityGatesUrl, getBaseUrl } from '..\/..\/..\/..\/helpers\/urls';","37","  activeLink(url: string) {","38","    return window.location.pathname.indexOf(getBaseUrl() + url) === 0 ? 'active' : undefined;","39","  }","40","","52","        <Link activeClassName={classNames({ active })} to=\"\/projects\">","74","    const active = this.props.location.pathname === 'issues';","104","        <Link className={this.activeLink('\/coding_rules')} to=\"\/coding_rules\">"]}],"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/global\/__tests__\/__snapshots__\/GlobalNavMenu-test.tsx.snap":[{"add":["8","      className=\"\"","35","      activeClassName=\"active\""],"delete":["8","      activeClassName=\"\""]}]}},"de048e14399224bab6e00bf70c68679987462b27":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/meta\/Meta.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/OverviewApp.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/meta\/Meta.tsx":[{"add":["56","    const isApp = qualifier === 'APP';","107","        {!isPrivate &&","108","          (isProject || isApp) && (","109","            <BadgesModal","110","              branchLike={branchLike}","111","              metrics={metrics}","112","              onSonarCloud={onSonarCloud}","113","              project={component.key}","114","              qualifier={component.qualifier}","115","            \/>","116","          )}"],"delete":["106","        {!isPrivate && (","107","          <BadgesModal","108","            branchLike={branchLike}","109","            metrics={metrics}","110","            onSonarCloud={onSonarCloud}","111","            project={component.key}","112","            qualifier={component.qualifier}","113","          \/>","114","        )}"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/OverviewApp.tsx":[{"add":["178","    const isApp = component.qualifier === 'APP';","184","            ? translate(isApp ? 'portfolio.app.empty' : 'overview.project.empty')","186","                isApp ? 'portfolio.app.no_lines_of_code' : 'overview.project.no_lines_of_code'"],"delete":["178","    const isProject = component.qualifier === 'TRK';","184","            ? translate(isProject ? 'overview.project.empty' : 'portfolio.app.empty')","186","                isProject ? 'overview.project.no_lines_of_code' : 'portfolio.app.no_lines_of_code'"]}]}},"2e24cfd57b9ffa406a95018f23bc5034567a761a":{"changes":{"\/dev\/null":"DELETE","sonar-batch\/src\/test\/java\/org\/sonar\/batch\/scan\/ProjectReactorBuilderTest.java":"MODIFY","it\/it-tests\/src\/test\/java\/batch\/suite\/ProjectBuilderTest.java":"MODIFY","sonar-batch\/src\/main\/java\/org\/sonar\/batch\/scan\/ProjectReactorBuilder.java":"MODIFY","sonar-batch\/src\/test\/resources\/org\/sonar\/batch\/scan\/ProjectReactorBuilderTest\/multi-module-repeated-id\/sonar-project.properties":"MODIFY","sonar-batch\/src\/test\/resources\/org\/sonar\/batch\/scan\/ProjectReactorBuilderTest\/multi-module-duplicate-id\/sonar-project.properties":"ADD"},"diff":{"\/dev\/null":[{"add":[],"delete":[]}],"sonar-batch\/src\/test\/java\/org\/sonar\/batch\/scan\/ProjectReactorBuilderTest.java":[{"add":["29","import org.apache.commons.lang.StringUtils;","30","import org.junit.Before;","31","import org.junit.Rule;","32","import org.junit.Test;","33","import org.junit.rules.ExpectedException;","34","import org.sonar.api.batch.AnalysisMode;","35","import org.sonar.api.batch.bootstrap.ProjectDefinition;","36","import org.sonar.api.batch.bootstrap.ProjectReactor;","37","import org.sonar.batch.analysis.AnalysisProperties;","38","import org.sonar.test.TestUtils;","41","import static org.mockito.Mockito.mock;","42","import static org.mockito.Mockito.when;","50","","55","","91","  public void modulesDuplicateIds() {","93","    thrown.expectMessage(\"Two modules have the same id: 'module1'. Each module must have a unique id.\");","94","","95","    loadProjectDefinition(\"multi-module-duplicate-id\");","96","  }","97","","98","  @Test","99","  public void modulesRepeatedIds() {","100","    ProjectDefinition rootProject = loadProjectDefinition(\"multi-module-repeated-id\");","101","","102","    List<ProjectDefinition> modules = rootProject.getSubProjects();","103","    assertThat(modules.size()).isEqualTo(1);","104","    \/\/ Module 1","105","    ProjectDefinition module1 = modules.get(0);","106","    assertThat(module1.getKey()).isEqualTo(\"com.foo.project:module1\");","107","    assertThat(module1.getName()).isEqualTo(\"Foo Module 1\");","108","","109","    \/\/ Module 1 -> Module 1","110","    ProjectDefinition module1_module1 = module1.getSubProjects().get(0);","111","    assertThat(module1_module1.getKey()).isEqualTo(\"com.foo.project:module1:module1\");","112","    assertThat(module1_module1.getName()).isEqualTo(\"Foo Sub Module 1\");","478","","483","","555","    ProjectReactor projectReactor = new ProjectReactorBuilder(bootstrapProps, mode).execute();","558",""],"delete":["21","import org.apache.commons.lang.StringUtils;","22","import org.junit.Before;","23","import org.sonar.api.batch.AnalysisMode;","24","import org.sonar.batch.analysis.AnalysisProperties;","26","import org.junit.Rule;","27","import org.junit.Test;","28","import org.junit.rules.ExpectedException;","29","import org.sonar.api.batch.bootstrap.ProjectDefinition;","30","import org.sonar.api.batch.bootstrap.ProjectReactor;","31","import org.sonar.test.TestUtils;","32","","41","import static org.mockito.Mockito.when;","42","","43","import static org.mockito.Mockito.mock;","52","  ","57","  ","93","  public void modulesRepeatedIds() {","95","    thrown.expectMessage(\"Two modules have the same id: module1\");","96","    loadProjectDefinition(\"multi-module-repeated-id\");","462","  ","467","    ","539","    ProjectReactor projectReactor = new ProjectReactorBuilder(bootstrapProps,mode).execute();","542","  "]}],"it\/it-tests\/src\/test\/java\/batch\/suite\/ProjectBuilderTest.java":[{"add":["13","import util.ItUtils;","14","","15","import static org.assertj.core.api.Assertions.assertThat;"],"delete":["7","import static org.assertj.core.api.Assertions.assertThat;","8","","9","import com.sonar.orchestrator.build.BuildFailureException;","10","","11","import com.sonar.orchestrator.build.SonarRunner;","12","import util.ItUtils;","49","  @Test","50","  \/\/ SONAR-6665","51","  public void errorSubModuleSameName() {","52","    SonarRunner build = SonarRunner.create(ItUtils.projectDir(\"batch\/multi-module-repeated-names\"));","53","","54","    try {","55","      orchestrator.executeBuild(build);","56","    } catch (BuildFailureException e) {","57","      assertThat(e.getResult().getLogs()).contains(\"Two modules have the same id: module1\");","58","    }","59","  }","60",""]}],"sonar-batch\/src\/main\/java\/org\/sonar\/batch\/scan\/ProjectReactorBuilder.java":[{"add":["119","    Map<String, Map<String, String>> propertiesByModuleIdPath = new HashMap<>();","120","    extractPropertiesByModule(propertiesByModuleIdPath, \"\", \"\", taskProps.properties());","121","    ProjectDefinition rootProject = defineRootProject(propertiesByModuleIdPath.get(\"\"), null);","123","    defineChildren(rootProject, propertiesByModuleIdPath, \"\");","126","    taskProps.properties().putAll(propertiesByModuleIdPath.get(\"\"));","131","  private static void extractPropertiesByModule(Map<String, Map<String, String>> propertiesByModuleIdPath, String currentModuleId, String currentModuleIdPath,","132","    Map<String, String> parentProperties) {","133","    if (propertiesByModuleIdPath.containsKey(currentModuleIdPath)) {","134","      throw new IllegalStateException(String.format(\"Two modules have the same id: '%s'. Each module must have a unique id.\", currentModuleId));","156","    propertiesByModuleIdPath.put(currentModuleIdPath, currentModuleProperties);","159","      String subModuleIdPath = currentModuleIdPath.isEmpty() ? moduleId : (currentModuleIdPath + \".\" + moduleId);","160","      extractPropertiesByModule(propertiesByModuleIdPath, moduleId, subModuleIdPath, currentModuleProperties);","236","  private void defineChildren(ProjectDefinition parentProject, Map<String, Map<String, String>> propertiesByModuleIdPath, String parentModuleIdPath) {","240","        String moduleIdPath = parentModuleIdPath.isEmpty() ? moduleId : (parentModuleIdPath + \".\" + moduleId);","241","        Map<String, String> moduleProps = propertiesByModuleIdPath.get(moduleIdPath);","246","        defineChildren(childProject, propertiesByModuleIdPath, moduleIdPath);"],"delete":["119","    Map<String, Map<String, String>> propertiesByModuleId = new HashMap<>();","120","    extractPropertiesByModule(propertiesByModuleId, \"\", taskProps.properties());","121","    ProjectDefinition rootProject = defineRootProject(propertiesByModuleId.get(\"\"), null);","123","    defineChildren(rootProject, propertiesByModuleId);","126","    taskProps.properties().putAll(propertiesByModuleId.get(\"\"));","131","  private static void extractPropertiesByModule(Map<String, Map<String, String>> propertiesByModuleId, String currentModuleId, Map<String, String> parentProperties) {","132","    if (propertiesByModuleId.containsKey(currentModuleId)) {","133","      throw new IllegalStateException(String.format(\"Two modules have the same id: %s. Each module must have a unique id.\", currentModuleId));","155","    propertiesByModuleId.put(currentModuleId, currentModuleProperties);","158","      extractPropertiesByModule(propertiesByModuleId, moduleId, currentModuleProperties);","234","  private void defineChildren(ProjectDefinition parentProject, Map<String, Map<String, String>> propertiesByModuleId) {","238","        Map<String, String> moduleProps = propertiesByModuleId.get(moduleId);","243","        defineChildren(childProject, propertiesByModuleId);"]}],"sonar-batch\/src\/test\/resources\/org\/sonar\/batch\/scan\/ProjectReactorBuilderTest\/multi-module-repeated-id\/sonar-project.properties":[{"add":[],"delete":["12","module1.sonar.projectKey=com.foo.project.module1","17","module1.module1.sonar.projectKey=com.foo.project.module1.module1"]}],"sonar-batch\/src\/test\/resources\/org\/sonar\/batch\/scan\/ProjectReactorBuilderTest\/multi-module-duplicate-id\/sonar-project.properties":[{"add":[],"delete":[]}]}},"3f40e0bcabc43f283e69782dd1b30d7203841188":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/debt\/DebtRulesXMLImporter.java":"MODIFY","server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/debt\/DebtRulesXMLImporterTest\/ignore_remediation_cost_having_zero_value.xml":"ADD","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/debt\/DebtRulesXMLImporterTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/debt\/DebtRulesXMLImporter.java":[{"add":["35","import org.sonar.server.debt.DebtModelXMLExporter.*;","36","","37","import javax.annotation.CheckForNull;","38","import javax.annotation.Nonnull;","39","import javax.annotation.Nullable;","40","import javax.xml.stream.XMLInputFactory;","41","import javax.xml.stream.XMLStreamException;","42","","43","import java.io.Reader;","44","import java.io.StringReader;","45","import java.util.List;","48","import static java.lang.Boolean.FALSE;","49","import static java.lang.Boolean.TRUE;","50","import static javax.xml.stream.XMLInputFactory.*;","51","import static org.apache.commons.lang.StringUtils.isNotBlank;","52","import static org.sonar.api.server.debt.DebtRemediationFunction.Type.CONSTANT_ISSUE;","53","import static org.sonar.api.server.debt.DebtRemediationFunction.Type.LINEAR;","54","import static org.sonar.api.utils.Duration.MINUTE;","55","import static org.sonar.server.debt.DebtCharacteristicsXMLImporter.convertKey;","56","import static org.sonar.server.debt.DebtModelXMLExporter.*;","90","    xmlFactory.setProperty(IS_COALESCING, TRUE);","91","    xmlFactory.setProperty(IS_NAMESPACE_AWARE, FALSE);","92","    xmlFactory.setProperty(SUPPORT_DTD, FALSE);","93","    xmlFactory.setProperty(IS_VALIDATING, FALSE);","111","            ruleDebt.setSubCharacteristicKey(convertKey(parentKey));","135","    if (isNotBlank(ruleRepositoryKey) && isNotBlank(ruleKey)) {","161","        textValue = \"mn\".equals(textValue) ? MINUTE : textValue;","170","    Property coefficientProperty = properties.coefficient();","171","    String coefficient = coefficientProperty == null ? null : coefficientProperty.toDuration();","172","    Property offsetProperty = properties.offset();","173","    String offset = offsetProperty == null ? null : offsetProperty.toDuration();","174","    if (function != null && (coefficient != null || offset != null)) {","182","    if (\"constant_resource\".equals(function)) {","183","      validationMessages.addWarningText(String.format(\"Constant\/file function is no longer used, technical debt definitions on '%s' are ignored.\", ruleKey));","184","      return null;","185","    }","188","      return createRuleDebt(ruleKey, LINEAR.name(), coefficient, null, validationMessages);","190","    if (CONSTANT_ISSUE.name().equalsIgnoreCase(function) && coefficient != null && offset == null) {","191","      return createRuleDebt(ruleKey, CONSTANT_ISSUE.name(), null, coefficient, validationMessages);","192","    }","193","    return new RuleDebt().setRuleKey(ruleKey).setFunction(function.toUpperCase()).setCoefficient(coefficient).setOffset(offset);","197","    List<Property> list;","200","      this.list = newArrayList();","204","      this.list.add(property);","221","      return Iterables.find(list, new PropertyMatchKey(key), null);","259","  private static class PropertyMatchKey implements Predicate<Property> {","262","    public PropertyMatchKey(String key) {"],"delete":["25","import java.io.Reader;","26","import java.io.StringReader;","27","import java.util.List;","28","import javax.annotation.CheckForNull;","29","import javax.annotation.Nonnull;","30","import javax.annotation.Nullable;","31","import javax.xml.stream.XMLInputFactory;","32","import javax.xml.stream.XMLStreamException;","41","import org.sonar.api.server.debt.DebtRemediationFunction;","44","import org.sonar.server.debt.DebtModelXMLExporter.RuleDebt;","47","import static org.sonar.server.debt.DebtModelXMLExporter.CHARACTERISTIC;","48","import static org.sonar.server.debt.DebtModelXMLExporter.CHARACTERISTIC_KEY;","49","import static org.sonar.server.debt.DebtModelXMLExporter.PROPERTY;","50","import static org.sonar.server.debt.DebtModelXMLExporter.PROPERTY_COEFFICIENT;","51","import static org.sonar.server.debt.DebtModelXMLExporter.PROPERTY_FUNCTION;","52","import static org.sonar.server.debt.DebtModelXMLExporter.PROPERTY_KEY;","53","import static org.sonar.server.debt.DebtModelXMLExporter.PROPERTY_OFFSET;","54","import static org.sonar.server.debt.DebtModelXMLExporter.PROPERTY_TEXT_VALUE;","55","import static org.sonar.server.debt.DebtModelXMLExporter.PROPERTY_VALUE;","56","import static org.sonar.server.debt.DebtModelXMLExporter.REPOSITORY_KEY;","57","import static org.sonar.server.debt.DebtModelXMLExporter.RULE_KEY;","91","    xmlFactory.setProperty(XMLInputFactory.IS_COALESCING, Boolean.TRUE);","92","    xmlFactory.setProperty(XMLInputFactory.IS_NAMESPACE_AWARE, Boolean.FALSE);","93","    xmlFactory.setProperty(XMLInputFactory.SUPPORT_DTD, Boolean.FALSE);","94","    xmlFactory.setProperty(XMLInputFactory.IS_VALIDATING, Boolean.FALSE);","112","            ruleDebt.setSubCharacteristicKey(DebtCharacteristicsXMLImporter.convertKey(parentKey));","136","    if (StringUtils.isNotBlank(ruleRepositoryKey) && StringUtils.isNotBlank(ruleKey)) {","162","        textValue = \"mn\".equals(textValue) ? Duration.MINUTE : textValue;","171","    if (function != null) {","172","","173","      Property coefficientProperty = properties.coefficient();","174","      String coefficient = coefficientProperty != null ? coefficientProperty.toDuration() : null;","175","      Property offsetProperty = properties.offset();","176","      String offset = offsetProperty != null ? offsetProperty.toDuration() : null;","177","","187","      return new RuleDebt().setRuleKey(ruleKey).setFunction(DebtRemediationFunction.Type.LINEAR.name()).setCoefficient(coefficient);","188","    } else if (\"constant_resource\".equals(function)) {","189","      validationMessages.addWarningText(String.format(\"Constant\/file function is no longer used, technical debt definitions on '%s' are ignored.\", ruleKey));","190","    } else if (DebtRemediationFunction.Type.CONSTANT_ISSUE.name().equalsIgnoreCase(function) && coefficient != null && offset == null) {","191","      return new RuleDebt().setRuleKey(ruleKey).setFunction(DebtRemediationFunction.Type.CONSTANT_ISSUE.name()).setOffset(coefficient);","192","    } else {","193","      return new RuleDebt().setRuleKey(ruleKey).setFunction(function.toUpperCase()).setCoefficient(coefficient).setOffset(offset);","195","    return null;","199","    List<Property> properties;","202","      this.properties = newArrayList();","206","      this.properties.add(property);","223","      return Iterables.find(properties, new PropertyMathKey(key), null);","261","  private static class PropertyMathKey implements Predicate<Property> {","264","    public PropertyMathKey(String key) {","274",""]}],"server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/debt\/DebtRulesXMLImporterTest\/ignore_remediation_cost_having_zero_value.xml":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/debt\/DebtRulesXMLImporterTest.java":[{"add":["23","import java.nio.charset.StandardCharsets;","24","import java.util.List;","182","  public void ignore_remediation_cost_having_zero_value() throws Exception {","183","    String xml = getFileContent(\"ignore_remediation_cost_having_zero_value.xml\");","184","","185","    List<RuleDebt> results = importer.importXML(xml, validationMessages);","186","    assertThat(results).isEmpty();","187","  }","188","","189","  @Test"],"delete":["28","import java.nio.charset.StandardCharsets;","29","import java.util.List;","30",""]}]}},"1de29b3cc0b22983c78362f3f0c5b370d0dcb264":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/models\/filter.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/models\/filter.js":[{"add":["4","      return baseUrl + '\/api\/issue_filters\/show\/' + this.id;"],"delete":["4","      return '\/api\/issue_filters\/show\/' + this.id;"]}]}},"c189245cda6020e46179bb1d0c9f54497440883b":{"changes":{"sonar-batch\/src\/test\/java\/org\/sonar\/batch\/mediumtest\/fs\/FileSystemMediumTest.java":"MODIFY"},"diff":{"sonar-batch\/src\/test\/java\/org\/sonar\/batch\/mediumtest\/fs\/FileSystemMediumTest.java":[{"add":["236","      \/\/ check that symlink was not resolved to target","237","      assertThat(result.inputFiles()).extractingResultOf(\"path\").toString().startsWith(projectDir.toString());","238","    }","239","  }","240","","241","  \/\/ SONAR-6719","242","  @Test","243","  public void scanProjectWithWrongCase() {","244","    if (System2.INSTANCE.isOsWindows()) {","245","      File projectDir = new File(\"src\/test\/resources\/mediumtest\/xoo\/sample\");","246","      TaskResult result = tester","247","        .newScanTask(new File(projectDir, \"sonar-project.properties\"))","248","        .property(\"sonar.sources\", \"SRC\")","249","        .start();","250","","251","      assertThat(result.inputFiles()).hasSize(3);","252","      assertThat(result.inputFiles()).extractingResultOf(\"relativePath\").startsWith(\"src\");"],"delete":[]}]}},"c1fcb6ce731e688578179aa7e1c2d4169246b9aa":{"changes":{"server\/sonar-web\/src\/main\/less\/pages\/issues.less":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/templates\/issues-workspace-list-component.hbs":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/templates\/issues-workspace-header.hbs":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/controller.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/less\/pages\/issues.less":[{"add":[],"delete":["51",".issues-workspace-list-component-part {","52","  margin-right: 10px;","53","  border-bottom: none;","54","}","55",""]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/templates\/issues-workspace-list-component.hbs":[{"add":["0","<div class=\"component-name issues-workspace-list-component\">","1","  <a class=\"component-name-parent link-no-underline\" href=\"{{dashboardUrl project}}\">","5","    <a class=\"component-name-parent link-no-underline\" href=\"{{dashboardUrl subProject}}\">","9","  <a class=\"component-name-file link-no-underline\" href=\"{{dashboardUrl component}}\">"],"delete":["0","<div class=\"issues-workspace-list-component\">","1","  <a class=\"issues-workspace-list-component-part\" href=\"{{dashboardUrl project}}\">","5","    <a class=\"issues-workspace-list-component-part\" href=\"{{dashboardUrl subProject}}\">","9","  <a class=\"issues-workspace-list-component-part\" href=\"{{dashboardUrl component}}\">"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/templates\/issues-workspace-header.hbs":[{"add":["2","    <div class=\"component-name\">","3","      <div class=\"component-name-parent\">","4","        <a class=\"js-back\">{{t \"issues.return_to_list\"}}<\/a>&nbsp;&nbsp;&nbsp;","5","      <\/div>","7","      {{#with state.component}}","8","        <div class=\"component-name-parent\">","9","          {{qualifierIcon \"TRK\"}}&nbsp;<a href=\"{{dashboardUrl project}}\" title=\"{{projectName}}\">{{projectName}}<\/a>","10","        <\/div>","11","        {{#if subProject}}","12","          <div class=\"component-name-parent\">","13","            {{qualifierIcon \"TRK\"}}&nbsp;<a href=\"{{dashboardUrl subProject}}\" title=\"{{subProjectName}}\">{{subProjectName}}<\/a>","14","          <\/div>","15","        {{\/if}}","16","        <div class=\"component-name-file\">","17","          {{qualifierIcon qualifier}}&nbsp;<a href=\"{{dashboardUrl key}}\" title=\"{{name}}\">{{name}}<\/a>","18","        <\/div>","19","      {{\/with}}","20","    <\/div>"],"delete":["2","    <a class=\"js-back\">{{t \"issues.return_to_list\"}}<\/a>&nbsp;&nbsp;&nbsp;","4","    {{#with state.component}}","5","      {{qualifierIcon \"TRK\"}}&nbsp;<a href=\"{{dashboardUrl project}}\" title=\"{{projectName}}\">{{projectName}}<\/a>","6","      &nbsp;&nbsp;","7","      {{qualifierIcon qualifier}}&nbsp;<a href=\"{{dashboardUrl key}}\" title=\"{{name}}\">{{name}}<\/a>","8","    {{\/with}}"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/controller.js":[{"add":["202","        subProject: issue.get('subProject'),","203","        subProjectName: issue.get('subProjectLongName'),"],"delete":[]}]}},"cf0128cceea80d2637dff20713d6de9182394242":{"changes":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/controllers\/sessions_controller.rb":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/controllers\/sessions_controller.rb":[{"add":["29","    # Needed to bypass session fixation vulnerability (https:\/\/jira.sonarsource.com\/browse\/SONAR-6880)","30","    reset_session","31",""],"delete":[]}]}},"f8a905f962697cee341f9b1c266844091b8d3be7":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ws\/WebServiceEngine.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/ws\/WebServiceEngineTest.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/utils\/text\/JsonWriter.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ws\/WebServiceEngine.java":[{"add":["21","import com.google.common.base.Throwables;","143","    try (JsonWriter json = JsonWriter.of(new OutputStreamWriter(stream.output(), StandardCharsets.UTF_8))) {","147","    } catch (Exception e) {","148","      \/\/ Do not hide the potential exception raised in the try block.","149","      Throwables.propagate(e);"],"delete":["141","    JsonWriter json = JsonWriter.of(new OutputStreamWriter(stream.output(), StandardCharsets.UTF_8));","143","    try {","147","    } finally {","148","      \/\/ TODO if close() fails, the runtime exception should not hide the potential exception raised in the try block.","149","      json.close();"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/ws\/WebServiceEngineTest.java":[{"add":["30","import org.junit.rules.ExpectedException;","37","import org.sonar.api.utils.text.JsonWriter;","44","import static org.mockito.Matchers.any;","45","import static org.mockito.Mockito.doThrow;","54","  @Rule","55","  public ExpectedException expectedException = ExpectedException.none();","56","","310","  public void render_real_exception_when_failing_to_write_json_errors() {","311","    ValidatingRequest request = new TestRequest().setMethod(\"GET\").setPath(\"\/api\/system\/fail_to_write_errors\");","312","    DumbResponse response = new DumbResponse();","313","","314","    expectedException.expect(IllegalArgumentException.class);","315","    expectedException.expectMessage(\"Error!\");","316","    underTest.execute(request, response);","317","  }","318","","319","  @Test","348","        .setHandler((request, response) -> {","349","          try {","350","            response.stream().output().write(\"good\".getBytes());","351","          } catch (IOException e) {","352","            throw new IllegalStateException(e);","357","        .setHandler((request, response) -> {","358","          try {","359","            response.stream().output().write(\"pong\".getBytes());","360","          } catch (IOException e) {","361","            throw new IllegalStateException(e);","365","        .setHandler((request, response) -> {","366","          throw new IllegalStateException(\"Unexpected\");","369","        .setHandler((request, response) -> {","370","          throw new BadRequestException(\"bad.request.reason\", 0);","374","        .setHandler((request, response) -> {","375","          Errors errors = new Errors();","376","          for (int count = 0; count < Integer.valueOf(request.param(\"count\")); count++) {","377","            errors.add(Message.of(\"Bad request reason #\" + count));","379","          throw new BadRequestException(errors);","383","        .setHandler((request, response) -> {","384","          Errors errors = new Errors();","385","          for (int count = 0; count < Integer.valueOf(request.param(\"count\")); count++) {","386","            errors.add(Message.of(\"bad.request.reason\", count));","388","          throw new BadRequestException(errors);","389","        });","390","      createNewDefaultAction(newController, \"fail_to_write_errors\")","391","        .setHandler((request, response) -> {","392","          Errors errors = mock(Errors.class);","393","          \/\/ Try to simulate an error when generating JSON errors","394","          doThrow(new IllegalArgumentException(\"Error!\")).when(errors).writeJson(any(JsonWriter.class), any(I18n.class));","395","          throw new BadRequestException(errors);","398","        .setHandler((request, response) -> response.noContent());","401","        .setHandler((request, response) -> response.newJsonWriter().prop(\"unknown\", request.param(\"unknown\")));","408","      print.setHandler((request, response) -> {","409","        try {","410","          request.param(\"format\");","411","          IOUtils.write(","412","            request.mandatoryParam(\"message\") + \" by \" + request.param(\"author\", \"nobody\"), response.stream().output());","413","        } catch (IOException e) {","414","          throw new IllegalStateException(e);"],"delete":["31","import org.sonar.api.server.ws.Request;","32","import org.sonar.api.server.ws.RequestHandler;","333","        .setHandler(new RequestHandler() {","334","          @Override","335","          public void handle(Request request, Response response) {","336","            try {","337","              response.stream().output().write(\"good\".getBytes());","338","            } catch (IOException e) {","339","              throw new IllegalStateException(e);","340","            }","345","        .setHandler(new RequestHandler() {","346","          @Override","347","          public void handle(Request request, Response response) {","348","            try {","349","              response.stream().output().write(\"pong\".getBytes());","350","            } catch (IOException e) {","351","              throw new IllegalStateException(e);","352","            }","356","        .setHandler(new RequestHandler() {","357","          @Override","358","          public void handle(Request request, Response response) {","359","            throw new IllegalStateException(\"Unexpected\");","360","          }","363","        .setHandler(new RequestHandler() {","364","          @Override","365","          public void handle(Request request, Response response) {","366","            throw new BadRequestException(\"bad.request.reason\", 0);","367","          }","371","        .setHandler(new RequestHandler() {","372","          @Override","373","          public void handle(Request request, Response response) {","374","            Errors errors = new Errors();","375","            for (int count = 0; count < Integer.valueOf(request.param(\"count\")); count++) {","376","              errors.add(Message.of(\"Bad request reason #\" + count));","377","            }","378","            throw new BadRequestException(errors);","383","        .setHandler(new RequestHandler() {","384","          @Override","385","          public void handle(Request request, Response response) {","386","            Errors errors = new Errors();","387","            for (int count = 0; count < Integer.valueOf(request.param(\"count\")); count++) {","388","              errors.add(Message.of(\"bad.request.reason\", count));","389","            }","390","            throw new BadRequestException(errors);","394","        .setHandler(new RequestHandler() {","395","          @Override","396","          public void handle(Request request, Response response) {","397","            response.noContent();","398","          }","399","        });","402","        .setHandler(new RequestHandler() {","403","          @Override","404","          public void handle(Request request, Response response) {","405","            response.newJsonWriter().prop(\"unknown\", request.param(\"unknown\"));","406","          }","407","        });","414","      print.setHandler(new RequestHandler() {","415","        @Override","416","        public void handle(Request request, Response response) {","417","          try {","418","            request.param(\"format\");","419","            IOUtils.write(","420","              request.mandatoryParam(\"message\") + \" by \" + request.param(\"author\", \"nobody\"), response.stream().output());","421","          } catch (IOException e) {","422","            throw new IllegalStateException(e);","423","          }"]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/utils\/text\/JsonWriter.java":[{"add":["61","public class JsonWriter implements AutoCloseable {","381","  @Override"],"delete":["61","public class JsonWriter {"]}]}},"cfabfcbc0c4dc65000a2d1aca4212f7b1e720889":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/__tests__\/__snapshots__\/RuleDetailsIssues-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/RuleDetails.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/__tests__\/RuleDetailsIssues-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/RuleDetailsIssues.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/__tests__\/__snapshots__\/RuleDetailsIssues-test.tsx.snap":[{"add":[],"delete":["30","                \"types\": undefined,","73","                    \"types\": undefined,","103","                    \"types\": undefined,","104","                  },","105","                }","106","              }","107","            >","108","              5","109","            <\/Link>","110","          <\/td>","111","        <\/tr>","112","      <\/tbody>","113","    <\/table>","114","  <\/DeferredSpinner>","115","<\/div>","116","`;","117","","118","exports[`should handle hotspot rules 1`] = `","119","<div","120","  className=\"js-rule-issues coding-rule-section\"","121",">","122","  <div","123","    className=\"coding-rule-section-separator\"","124","  \/>","125","  <DeferredSpinner","126","    loading={false}","127","    timeout={100}","128","  >","129","    <h3","130","      className=\"coding-rules-detail-title\"","131","    >","132","      coding_rules.issues","133","      <span","134","        className=\"little-spacer-left\"","135","      >","136","        (","137","        <Link","138","          onlyActiveOnIndex={false}","139","          style={Object {}}","140","          to={","141","            Object {","142","              \"pathname\": \"\/organizations\/org\/issues\",","143","              \"query\": Object {","144","                \"resolved\": \"false\",","145","                \"rules\": \"foo\",","146","                \"types\": \"VULNERABILITY,SECURITY_HOTSPOT\",","147","              },","148","            }","149","          }","150","        >","151","          18","152","        <\/Link>","153","        )","154","      <\/span>","155","    <\/h3>","156","    <table","157","      className=\"coding-rules-detail-list coding-rules-most-violated-projects\"","158","    >","159","      <tbody>","160","        <tr>","161","          <td","162","            className=\"coding-rules-detail-list-name\"","163","            colSpan={2}","164","          >","165","            coding_rules.most_violating_projects","166","          <\/td>","167","        <\/tr>","168","        <tr","169","          key=\"sample-key\"","170","        >","171","          <td","172","            className=\"coding-rules-detail-list-name\"","173","          >","174","            Sample","175","          <\/td>","176","          <td","177","            className=\"coding-rules-detail-list-parameters\"","178","          >","179","            <Link","180","              onlyActiveOnIndex={false}","181","              style={Object {}}","182","              to={","183","                Object {","184","                  \"pathname\": \"\/organizations\/org\/issues\",","185","                  \"query\": Object {","186","                    \"projects\": \"sample-key\",","187","                    \"resolved\": \"false\",","188","                    \"rules\": \"foo\",","189","                    \"types\": \"VULNERABILITY,SECURITY_HOTSPOT\",","190","                  },","191","                }","192","              }","193","            >","194","              13","195","            <\/Link>","196","          <\/td>","197","        <\/tr>","198","        <tr","199","          key=\"example-key\"","200","        >","201","          <td","202","            className=\"coding-rules-detail-list-name\"","203","          >","204","            Example","205","          <\/td>","206","          <td","207","            className=\"coding-rules-detail-list-parameters\"","208","          >","209","            <Link","210","              onlyActiveOnIndex={false}","211","              style={Object {}}","212","              to={","213","                Object {","214","                  \"pathname\": \"\/organizations\/org\/issues\",","215","                  \"query\": Object {","216","                    \"projects\": \"example-key\",","217","                    \"resolved\": \"false\",","218","                    \"rules\": \"foo\",","219","                    \"types\": \"VULNERABILITY,SECURITY_HOTSPOT\","]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/RuleDetails.tsx":[{"add":["260","          {!ruleDetails.isTemplate && ruleDetails.type !== 'SECURITY_HOTSPOT' && ("],"delete":["260","          {!ruleDetails.isTemplate && ("]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/__tests__\/RuleDetailsIssues-test.tsx":[{"add":["46","  const wrapper = shallowRender();","53","      rules: 'foo'","57","});","58","","59","function shallowRender(props: Partial<RuleDetailsIssues['props']> = {}) {","60","  return shallow(","61","    <RuleDetailsIssues","62","      appState={{ branchesEnabled: false }}","63","      organization=\"org\"","64","      ruleDetails={{ key: 'foo', type: 'BUG' }}","65","      {...props}","66","    \/>","67","  );"],"delete":["46","  await check('BUG', undefined);","47","});","48","","49","it('should handle hotspot rules', async () => {","50","  await check('SECURITY_HOTSPOT', ['VULNERABILITY', 'SECURITY_HOTSPOT']);","51","});","52","","53","async function check(ruleType: T.RuleType, requestedTypes: T.RuleType[] | undefined) {","54","  const wrapper = shallow(","55","    <RuleDetailsIssues","56","      appState={{ branchesEnabled: false }}","57","      organization=\"org\"","58","      ruleDetails={{ key: 'foo', type: ruleType }}","59","    \/>","60","  );","67","      rules: 'foo',","68","      types: requestedTypes && requestedTypes.join()"]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/RuleDetailsIssues.tsx":[{"add":["49","  state: State = { loading: false };","67","    const {","68","      ruleDetails: { key },","69","      organization","70","    } = this.props;","71","","74","      {","75","        resolved: 'false',","76","        rules: key,","77","        organization","78","      },","103","    const {","104","      ruleDetails: { key },","105","      organization","106","    } = this.props;","107","","112","    const path = getIssuesUrl({ resolved: 'false', rules: key }, organization);","132","    const {","133","      ruleDetails: { key },","134","      organization","135","    } = this.props;","136","","138","      { resolved: 'false', rules: key, projects: project.key },","139","      organization"],"delete":["49","  state: State = { loading: true };","66","  getBaseIssuesQuery = () => ({","67","    resolved: 'false',","68","    rules: this.props.ruleDetails.key,","69","    types:","70","      this.props.ruleDetails.type === 'SECURITY_HOTSPOT'","71","        ? ['VULNERABILITY', 'SECURITY_HOTSPOT'].join()","72","        : undefined","73","  });","74","","78","      { ...this.getBaseIssuesQuery(), organization: this.props.organization },","107","    const path = getIssuesUrl(this.getBaseIssuesQuery(), this.props.organization);","128","      { ...this.getBaseIssuesQuery(), projects: project.key },","129","      this.props.organization"]}]}},"37915e1548b5a706b0aed606ee3250e3496850b0":{"changes":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/issue\/ModuleIssues.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/issue\/ModuleIssuesTest.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/issue\/ModuleIssues.java":[{"add":["21","import com.google.common.base.Strings;","75","  private static ScannerReport.Issue createReportIssue(Issue issue, int componentRef, String ruleName, String activeRuleSeverity) {","90","    locationBuilder.setComponentRef(componentRef);","99","    applyFlows(componentRef, builder, locationBuilder, textRangeBuilder, issue);","103","  private static void applyFlows(int componentRef, ScannerReport.Issue.Builder builder, ScannerReport.IssueLocation.Builder locationBuilder,","112","        int locationComponentRef = ((DefaultInputComponent) location.inputComponent()).batchId();","113","        if (locationComponentRef != componentRef) {","114","          \/\/ Some analyzers are trying to report cross file secondary locations. The API was designed to support it, but server side is not","115","          \/\/ ready to handle it (especially the UI)","116","          \/\/ So let's skip them for now (SONAR-9929)","117","          continue;","118","        }","120","        locationBuilder.setComponentRef(locationComponentRef);"],"delete":["22","","38","import com.google.common.base.Strings;","39","","77","  private static ScannerReport.Issue createReportIssue(Issue issue, int batchId, String ruleName, String activeRuleSeverity) {","92","    locationBuilder.setComponentRef(batchId);","101","    applyFlows(builder, locationBuilder, textRangeBuilder, issue);","105","  private static void applyFlows(ScannerReport.Issue.Builder builder, ScannerReport.IssueLocation.Builder locationBuilder,","115","        locationBuilder.setComponentRef(((DefaultInputComponent) location.inputComponent()).batchId());"]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/issue\/ModuleIssuesTest.java":[{"add":["21","import java.util.Arrays;","185","  \/\/ SONAR-9929 Filter secondary locations that are on different files","186","  @Test","187","  public void skip_cross_file_secondary_locations() {","188","    ruleBuilder.add(SQUID_RULE_KEY).setName(SQUID_RULE_NAME);","189","    activeRulesBuilder.create(SQUID_RULE_KEY).setSeverity(Severity.INFO).setName(SQUID_RULE_NAME).activate();","190","    initModuleIssues();","191","","192","    DefaultIssue issue = new DefaultIssue()","193","      .at(new DefaultIssueLocation().on(file).at(file.selectLine(3)).message(\"Foo\"))","194","      .forRule(SQUID_RULE_KEY)","195","      .addFlow(Arrays.asList(new DefaultIssueLocation().on(file).at(file.selectLine(4)).message(\"Location 1\"),","196","        new DefaultIssueLocation().on(new TestInputFileBuilder(\"foo\", \"src\/Foo2.php\").initMetadata(\"Foo\\nBar\\nBiz\\n\").build()).at(file.selectLine(3)).message(\"Location outside\")));","197","    when(filters.accept(anyString(), any(ScannerReport.Issue.class))).thenReturn(true);","198","","199","    boolean added = moduleIssues.initAndAddIssue(issue);","200","","201","    assertThat(added).isTrue();","202","    ArgumentCaptor<ScannerReport.Issue> argument = ArgumentCaptor.forClass(ScannerReport.Issue.class);","203","    verify(reportPublisher.getWriter()).appendComponentIssue(eq(file.batchId()), argument.capture());","204","    assertThat(argument.getValue().getFlow(0).getLocationList()).hasSize(1);","205","  }","206",""],"delete":[]}]}},"1d2eb3b5ac8a23c5c4aa1b1ede5ce3f24840ce8a":{"changes":{"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/measure\/LiveMeasureComparator.java":"ADD","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/PersistLiveMeasuresStep.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/measure\/live\/LiveMeasureComputerImpl.java":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/measure\/LiveMeasureComparator.java":[{"add":[],"delete":[]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/PersistLiveMeasuresStep.java":[{"add":["43","import org.sonar.db.measure.LiveMeasureComparator;","120","        measuresByMetricKey.getValue().stream()","124","          \/\/ To prevent deadlock, live measures are ordered the same way as in LiveMeasureComputerImpl#refreshComponentsOnSameProject","125","          .sorted(LiveMeasureComparator.INSTANCE)","126","          .forEach(lm -> {","127","            dao.insertOrUpdate(dbSession, lm, marker);","128","            total++;","129","          });","143",""],"delete":["24","import java.util.Iterator;","45","import org.sonar.db.measure.LiveMeasureDto;","112","      int count = 0;","122","        Iterator<LiveMeasureDto> liveMeasures = measuresByMetricKey.getValue().stream()","126","          .iterator();","127","        while (liveMeasures.hasNext()) {","128","          dao.insertOrUpdate(dbSession, liveMeasures.next(), marker);","129","          count++;","130","          total++;","131","          if (count % 100 == 0) {","132","            \/\/ use short transactions to avoid potential deadlocks on MySQL","133","            \/\/ https:\/\/jira.sonarsource.com\/browse\/SONAR-10117?focusedCommentId=153555&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-153555","134","            dbSession.commit();","135","          }","136","        }"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/measure\/live\/LiveMeasureComputerImpl.java":[{"add":["38","import org.sonar.db.measure.LiveMeasureComparator;","44","import org.sonar.server.measure.DebtRatingGrid;","45","import org.sonar.server.measure.Rating;","138","    matrix.getChanged().sorted(LiveMeasureComparator.INSTANCE)","139","      .forEach(m -> dbClient.liveMeasureDao().insertOrUpdate(dbSession, m, null));"],"delete":["41","import org.sonar.server.measure.DebtRatingGrid;","42","import org.sonar.server.measure.Rating;","137","    matrix.getChanged().forEach(m -> dbClient.liveMeasureDao().insertOrUpdate(dbSession, m, null));"]}]}},"73e1d5bb27a020277499fe0be5d059184c59c233":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/IssuesSourceViewer.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/IssuesSourceViewer.tsx":[{"add":["119","      const allMessagesEmpty =","120","        locations !== undefined && locations.every(location => !location.msg);","135","            displayLocationMarkers={!allMessagesEmpty}"],"delete":["119","","134","            displayLocationMarkers={false}"]}]}},"9c3628f7f4d5745c010cb2f958129495fdcda632":{"changes":{"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v79\/TruncateEnvAndSystemVarsFromScannerContext.java":"ADD","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v79\/DbVersion79Test.java":"ADD","server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v79\/TruncateEnvAndSystemVarsFromScannerContextTest\/ce_scanner_context.sql":"ADD","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v79\/TruncateEnvAndSystemVarsFromScannerContextTest.java":"ADD","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v79\/DbVersion79.java":"ADD","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/report\/AnalysisContextReportPublisherTest.java":"MODIFY","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/MigrationConfigurationModuleTest.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/MigrationConfigurationModule.java":"MODIFY","server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/container\/ComputeEngineContainerImplTest.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/AnalysisContextReportPublisher.java":"MODIFY"},"diff":{"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v79\/TruncateEnvAndSystemVarsFromScannerContext.java":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v79\/DbVersion79Test.java":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v79\/TruncateEnvAndSystemVarsFromScannerContextTest\/ce_scanner_context.sql":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v79\/TruncateEnvAndSystemVarsFromScannerContextTest.java":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v79\/DbVersion79.java":[{"add":[],"delete":[]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/report\/AnalysisContextReportPublisherTest.java":[{"add":["153","    assertThat(lines).containsExactly(","254","    assertThat(lines).containsExactly("],"delete":["153","    assertThat(lines).containsExactly(\"Environment variables:\",","154","      \"System properties:\",","165","  public void shouldNotDumpSQPropsInSystemProps() throws Exception {","166","    logTester.setLevel(LoggerLevel.DEBUG);","167","    ScannerReportWriter writer = new ScannerReportWriter(temp.newFolder());","168","    Properties props = new Properties();","169","    props.setProperty(COM_FOO, \"bar\");","170","    props.setProperty(SONAR_SKIP, \"true\");","171","    when(system2.properties()).thenReturn(props);","172","    DefaultInputModule rootModule = new DefaultInputModule(ProjectDefinition.create()","173","      .setBaseDir(temp.newFolder())","174","      .setWorkDir(temp.newFolder())","175","      .setProperty(\"sonar.projectKey\", \"foo\")","176","      .setProperty(COM_FOO, \"bar\")","177","      .setProperty(SONAR_SKIP, \"true\"));","178","    when(store.allModules()).thenReturn(singletonList(rootModule));","179","    when(hierarchy.root()).thenReturn(rootModule);","180","","181","    publisher.init(writer);","182","","183","    List<String> lines = FileUtils.readLines(writer.getFileStructure().analysisLog(), StandardCharsets.UTF_8);","184","    assertThat(lines).containsExactly(\"Environment variables:\",","185","      \"System properties:\",","186","      \"  - com.foo=bar\",","187","      \"SonarQube plugins:\",","188","      \"Global server settings:\",","189","      \"Project server settings:\",","190","      \"Project scanner properties:\",","191","      \"  - sonar.projectKey=foo\",","192","      \"  - sonar.skip=true\");","193","  }","194","","195","  @Test","196","  public void shouldNotDumpEnvTwice() throws Exception {","197","    logTester.setLevel(LoggerLevel.DEBUG);","198","    ScannerReportWriter writer = new ScannerReportWriter(temp.newFolder());","199","","200","    Map<String, String> env = new HashMap<>();","201","    env.put(FOO, \"BAR\");","202","    env.put(BIZ, \"BAZ\");","203","    when(system2.envVariables()).thenReturn(env);","204","    DefaultInputModule rootModule = new DefaultInputModule(ProjectDefinition.create()","205","      .setBaseDir(temp.newFolder())","206","      .setWorkDir(temp.newFolder())","207","      .setProperty(\"sonar.projectKey\", \"foo\")","208","      .setProperty(\"env.\" + FOO, \"BAR\"));","209","    when(store.allModules()).thenReturn(singletonList(rootModule));","210","    when(hierarchy.root()).thenReturn(rootModule);","211","    publisher.init(writer);","212","","213","    String content = FileUtils.readFileToString(writer.getFileStructure().analysisLog(), StandardCharsets.UTF_8);","214","    assertThat(content).containsOnlyOnce(FOO);","215","    assertThat(content).containsOnlyOnce(BIZ);","216","    assertThat(content).containsSubsequence(BIZ, FOO);","217","","218","","219","    content = FileUtils.readFileToString(writer.getFileStructure().analysisLog(), StandardCharsets.UTF_8);","220","    assertThat(content).containsOnlyOnce(FOO);","221","    assertThat(content).containsOnlyOnce(BIZ);","222","    assertThat(content).doesNotContain(\"env.\" + FOO);","223","  }","224","","225","  @Test","316","    assertThat(lines).containsExactly(\"Environment variables:\",","317","      \"System properties:\","]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/MigrationConfigurationModuleTest.java":[{"add":["39","        + 20"],"delete":["39","        + 19"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/MigrationConfigurationModule.java":[{"add":["44","import org.sonar.server.platform.db.migration.version.v79.DbVersion79;","70","      DbVersion79.class,"],"delete":[]}],"server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/container\/ComputeEngineContainerImplTest.java":[{"add":["124","          + 23 \/\/ MigrationConfigurationModule"],"delete":["124","          + 22 \/\/ MigrationConfigurationModule"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/AnalysisContextReportPublisher.java":[{"add":[],"delete":["29","import java.util.Properties;","38","import org.sonar.api.utils.log.Logger;","39","import org.sonar.api.utils.log.Loggers;","53","  private static final Logger LOG = Loggers.get(AnalysisContextReportPublisher.class);","54","","83","      if (LOG.isDebugEnabled()) {","84","        writeEnvVariables(fileWriter);","85","        writeSystemProps(fileWriter);","86","      }","103","  private void writeSystemProps(BufferedWriter fileWriter) throws IOException {","104","    fileWriter.write(\"System properties:\\n\");","105","    Properties sysProps = system.properties();","106","    for (String prop : new TreeSet<>(sysProps.stringPropertyNames())) {","107","      if (prop.startsWith(SONAR_PROP_PREFIX)) {","108","        continue;","109","      }","110","      fileWriter.append(String.format(KEY_VALUE_FORMAT, prop, sysProps.getProperty(prop))).append('\\n');","111","    }","112","  }","113","","114","  private void writeEnvVariables(BufferedWriter fileWriter) throws IOException {","115","    fileWriter.append(\"Environment variables:\\n\");","116","    Map<String, String> envVariables = system.envVariables();","117","    new TreeSet<>(envVariables.keySet())","118","      .forEach(envKey -> {","119","        try {","120","          String envValue = isSensitiveEnvVariable(envKey) ? \"******\" : envVariables.get(envKey);","121","          fileWriter.append(String.format(KEY_VALUE_FORMAT, envKey, envValue)).append('\\n');","122","        } catch (IOException e) {","123","          throw new IllegalStateException(e);","124","        }","125","      });","126","  }","127","","201","  private static boolean isSensitiveEnvVariable(String key) {","202","    return key.contains(\"_TOKEN\") || key.contains(\"_PASSWORD\") || key.contains(\"_SECURED\");","203","  }","204",""]}]}}}