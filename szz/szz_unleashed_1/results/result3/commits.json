{"f5d0d6237b0e52afcb1981953a7c08baee794915":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/changelog\/Changelog.tsx":"MODIFY","sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/changelog\/__tests__\/Changelog-test.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/changelog\/Changelog.tsx":[{"add":["40","    e => -Number(parseDate(e.date)),"],"delete":["23","import * as startOfMinute from 'date-fns\/start_of_minute';","41","    e => -Number(startOfMinute(parseDate(e.date))),"]}],"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["1505","my_account.tokens_last_usage=Last use"],"delete":["1505","my_account.tokens_last_usage=Last usage"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/changelog\/__tests__\/Changelog-test.tsx":[{"add":["81","","82","it('should render events sorted by time and action', () => {","83","  const events = [","84","    createEvent({ date: '2019-02-07T14:03:45', action: 'DEACTIVATED' }),","85","    createEvent({ date: '2019-02-07T14:03:14', action: 'DEACTIVATED' }),","86","    createEvent({ date: '2019-02-07T14:03:14', action: 'ACTIVATED' }),","87","    createEvent({ date: '2019-02-07T14:03:07', action: 'ACTIVATED' })","88","  ];","89","  const changelog = shallow(<Changelog events={events} organization={null} \/>);","90","  const rows = changelog.find('tbody').find('tr');","91","","92","  const getAction = (index: number) =>","93","    rows","94","      .at(index)","95","      .childAt(2)","96","      .childAt(0)","97","      .text();","98","","99","  expect(getAction(0)).toBe('quality_profiles.changelog.DEACTIVATED');","100","  expect(getAction(1)).toBe('quality_profiles.changelog.ACTIVATED');","101","  expect(getAction(2)).toBe('quality_profiles.changelog.DEACTIVATED');","102","  expect(getAction(3)).toBe('quality_profiles.changelog.ACTIVATED');","103","});"],"delete":[]}]}},"7197bceddc7c51d51cd46e22b68cdc71d277aa65":{"changes":{"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/ui\/ws\/ComponentActionTest.java":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/ui\/ws\/ComponentAction.java":"MODIFY"},"diff":{"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/ui\/ws\/ComponentActionTest.java":[{"add":["155","  public void return_favourite_for_branch() {","156","    ComponentDto project = insertOrganizationAndProject();","157","    ComponentDto branch = componentDbTester.insertProjectBranch(project, b -> b.setKey(\"feature1\").setUuid(\"xyz\"));    UserDto user = db.users().insertUser(\"obiwan\");","158","    propertyDbTester.insertProperty(new PropertyDto().setKey(\"favourite\").setResourceId(project.getId()).setUserId(user.getId()));","159","    userSession.logIn(user).addProjectPermission(UserRole.USER, project);","160","    init();","161","","162","    String json = ws.newRequest()","163","      .setParam(\"componentKey\", project.getKey())","164","      .setParam(\"branch\", branch.getBranch())","165","      .execute()","166","      .getInput();","167","","168","    assertJson(json).isSimilarTo(\"{\\n\" +","169","      \"  \\\"organization\\\": \\\"my-org\\\",\\n\" +","170","      \"  \\\"key\\\": \\\"polop\\\",\\n\" +","171","      \"  \\\"isFavorite\\\": true,\\n\" +","172","      \"  \\\"id\\\": \\\"xyz\\\",\\n\" +","173","      \"  \\\"branch\\\": \\\"feature1\\\",\" +","174","      \"  \\\"name\\\": \\\"Polop\\\",\\n\" +","175","      \"  \\\"description\\\": \\\"test project\\\"\\n\" +","176","      \"}\\n\");","177","  }","178","","179","  @Test"],"delete":[]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/ui\/ws\/ComponentAction.java":[{"add":["166","        boolean isFavourite = isFavourite(session, rootProject);","167","        writeComponent(json, component, org, analysis.orElse(null), isFavourite);","197","      String almId = b.getAlm().getId();","221","  private void writeComponent(JsonWriter json, ComponentDto component, OrganizationDto organizationDto, @Nullable SnapshotDto analysis, boolean isFavourite) {","227","      .prop(\"isFavorite\", isFavourite);"],"delete":["166","        writeComponent(json, session, component, org, analysis.orElse(null));","196","      String almId = String.valueOf(b.getAlm().getId());","220","  private void writeComponent(JsonWriter json, DbSession session, ComponentDto component, OrganizationDto organizationDto, @Nullable SnapshotDto analysis) {","226","      .prop(\"isFavorite\", isFavourite(session, component));"]}]}},"d41c7785f74e96ea1cc0295860524aa3fc29dd3a":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/projects\/main.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/projects\/main.js":[{"add":["184","    this.setState({ ready: false });"],"delete":[]}]}},"19988ce90b9b35481ee22b5760d4a5e53aedcd16":{"changes":{"sonar-db\/src\/main\/java\/org\/sonar\/db\/version\/v60\/PopulateUuidPathColumnOnProjects.java":"MODIFY"},"diff":{"sonar-db\/src\/main\/java\/org\/sonar\/db\/version\/v60\/PopulateUuidPathColumnOnProjects.java":[{"add":["120","      .mapToObj(relations.snapshotsById::get)","123","      .collect(toCollection(ArrayList::new));"],"delete":["120","      .mapToObj(snapshotId -> relations.snapshotsById.get(snapshotId))","123","      .collect(toCollection(() -> new ArrayList<>()));"]}]}},"38d1fb46dece0d6c767108f1c02759a4df6216bf":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/__tests__\/App-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/IssuesList.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/Issue.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/IssueView.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/ListItem.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/Issue.css":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/App.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/__tests__\/App-test.tsx":[{"add":["22","import {","23","  mockCurrentUser,","24","  mockRouter,","25","  mockIssue,","26","  mockLocation","27","} from '..\/..\/..\/..\/helpers\/testMocks';","55","  instance.handleIssueCheck('foo');","56","  instance.handleIssueCheck('bar');","118","it('should fetch issues for component', async () => {","119","  const wrapper = shallowRender({","120","    fetchIssues: fetchIssuesMockFactory(),","121","    location: mockLocation({","122","      query: { open: '0' }","123","    })","124","  });","125","  const instance = wrapper.instance();","126","  await waitAndUpdate(wrapper);","127","  expect(wrapper.state('issues')).toHaveLength(2);","128","","129","  await instance.fetchIssuesForComponent('', 0, 30);","130","  expect(wrapper.state('issues')).toHaveLength(6);","131","});","132","","133","it('should fetch issues until defined', async () => {","134","  const mockDone = (_lastIssue: T.Issue, paging: T.Paging) =>","135","    paging.total <= paging.pageIndex * paging.pageSize;","136","","137","  const wrapper = shallowRender({","138","    fetchIssues: fetchIssuesMockFactory(),","139","    location: mockLocation({","140","      query: { open: '0' }","141","    })","142","  });","143","  const instance = wrapper.instance();","144","  await waitAndUpdate(wrapper);","145","","146","  const result = await instance.fetchIssuesUntil(1, mockDone);","147","  expect(result.issues).toHaveLength(6);","148","  expect(result.paging.pageIndex).toBe(3);","149","});","150","","151","function fetchIssuesMockFactory(keyCount = 0, lineCount = 1) {","152","  return jest.fn().mockImplementation(({ p }: any) =>","153","    Promise.resolve({","154","      components: [referencedComponent],","155","      effortTotal: 1,","156","      facets: FACETS,","157","      issues: [","158","        mockIssue(false, {","159","          key: '' + keyCount++,","160","          textRange: {","161","            startLine: lineCount++,","162","            endLine: lineCount,","163","            startOffset: 0,","164","            endOffset: 15","165","          }","166","        }),","167","        mockIssue(false, {","168","          key: '' + keyCount++,","169","          textRange: {","170","            startLine: lineCount++,","171","            endLine: lineCount,","172","            startOffset: 0,","173","            endOffset: 15","174","          }","175","        })","176","      ],","177","      languages: [],","178","      paging: { pageIndex: p || 1, pageSize: 2, total: 6 },","179","      rules: [],","180","      users: []","181","    })","182","  );","183","}","184",""],"delete":["22","import { mockCurrentUser, mockRouter } from '..\/..\/..\/..\/helpers\/testMocks';","34","const eventNoShiftKey = { shiftKey: false } as MouseEvent;","35","const eventWithShiftKey = { shiftKey: true } as MouseEvent;","36","","47","it('should be able to check\/uncheck a group of issues with the Shift key', async () => {","48","  const wrapper = shallowRender();","49","  await waitAndUpdate(wrapper);","50","  expect(wrapper.state().issues.length).toBe(4);","51","","52","  const instance = wrapper.instance();","53","  instance.handleIssueCheck('foo', eventNoShiftKey);","54","  expect(wrapper.state().checked.length).toBe(1);","55","","56","  instance.handleIssueCheck('fourth', eventWithShiftKey);","57","  expect(wrapper.state().checked.length).toBe(4);","58","","59","  instance.handleIssueCheck('third', eventNoShiftKey);","60","  expect(wrapper.state().checked.length).toBe(3);","61","","62","  instance.handleIssueCheck('foo', eventWithShiftKey);","63","  expect(wrapper.state().checked.length).toBe(1);","64","});","65","","66","it('should avoid non-existing keys', async () => {","67","  const wrapper = shallowRender();","68","  await waitAndUpdate(wrapper);","69","  expect(wrapper.state().issues.length).toBe(4);","70","","71","  const instance = wrapper.instance();","72","  instance.handleIssueCheck('foo', eventNoShiftKey);","73","  expect(wrapper.state().checked.length).toBe(1);","74","","75","  instance.handleIssueCheck('non-existing-key', eventWithShiftKey);","76","  expect(wrapper.state().checked.length).toBe(1);","77","});","78","","85","  instance.handleIssueCheck('foo', eventNoShiftKey);","86","  instance.handleIssueCheck('bar', eventNoShiftKey);"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/IssuesList.tsx":[{"add":["30","  onIssueCheck: ((issueKey: string) => void) | undefined;"],"delete":["30","  onIssueCheck: ((issueKey: string, event: { shiftKey?: boolean }) => void) | undefined;"]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/Issue.tsx":[{"add":["33","  onCheck?: (issue: string) => void;","99","    key('space', 'issues', () => {","101","        this.props.onCheck(this.props.issue.key);"],"delete":["33","  onCheck?: (issue: string, event: { shiftKey?: boolean }) => void;","99","    key('space', 'issues', (event: KeyboardEvent) => {","101","        this.props.onCheck(this.props.issue.key, event);"]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/IssueView.tsx":[{"add":["21","import { updateIssue } from '.\/actions';","25","import Checkbox from '..\/controls\/Checkbox';","37","  onCheck?: (issue: string) => void;","45","  handleCheck = (_checked: boolean) => {","47","      this.props.onCheck(this.props.issue.key);","113","          <>","114","            <Checkbox","115","              checked={this.props.checked || false}","116","              className=\"issue-checkbox-container\"","117","              onCheck={this.handleCheck}","119","          <\/>"],"delete":["24","import { updateIssue } from '.\/actions';","36","  onCheck?: (issue: string, event: { shiftKey?: boolean }) => void;","44","  handleCheck = (event: React.MouseEvent) => {","45","    event.preventDefault();","47","      this.props.onCheck(this.props.issue.key, event);","113","          <a className=\"js-toggle issue-checkbox-container\" href=\"#\" onClick={this.handleCheck}>","114","            <i","115","              className={classNames('issue-checkbox', 'icon-checkbox', {","116","                'icon-checkbox-checked': this.props.checked","117","              })}","119","          <\/a>"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/ListItem.tsx":[{"add":["30","  onCheck: ((issueKey: string) => void) | undefined;"],"delete":["30","  onCheck: ((issueKey: string, event: { shiftKey?: boolean }) => void) | undefined;"]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/Issue.css":[{"add":["209","  display: flex;","210","  justify-content: center;","211","  align-items: center;"],"delete":["209","  display: block;","226",".issue-checkbox {","227","  position: absolute;","228","  top: 50%;","229","  left: 50%;","230","  margin: -8px 0 0 -8px;","231","}","232",""]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/App.tsx":[{"add":["23","import { keyBy, omit, without } from 'lodash';","494","    done: (lastIssue: T.Issue, paging: T.Paging) => boolean","496","    const recursiveFetch = (","497","      p: number,","498","      issues: T.Issue[]","499","    ): Promise<{ issues: T.Issue[]; paging: T.Paging }> => {","500","      return this.fetchIssuesPage(p)","501","        .then(response => {","502","          return {","503","            issues: [...issues, ...response.issues],","504","            paging: response.paging","505","          };","506","        })","507","        .then(({ issues, paging }) => {","508","          return done(issues[issues.length - 1], paging)","509","            ? { issues, paging }","510","            : recursiveFetch(p + 1, issues);","511","        });","512","    };","514","    return recursiveFetch(p, []);","554","    const done = (lastIssue: T.Issue, paging: T.Paging) => {","564","    if (done(issues[issues.length - 1], paging)) {","744","  handleIssueCheck = (issue: string) => {","745","    this.setState(state => ({","746","      checkAll: false,","747","      checked: state.checked.includes(issue)","748","        ? without(state.checked, issue)","749","        : [...state.checked, issue]","750","    }));"],"delete":["23","import { keyBy, omit, union, without } from 'lodash';","118","  lastChecked?: string;","495","    done: (issues: T.Issue[], paging: T.Paging) => boolean","497","    return this.fetchIssuesPage(p).then(response => {","498","      const { issues, paging } = response;","500","      return done(issues, paging)","501","        ? { issues, paging }","502","        : this.fetchIssuesUntil(p + 1, done).then(nextResponse => {","503","            return {","504","              issues: [...issues, ...nextResponse.issues],","505","              paging: nextResponse.paging","506","            };","507","          });","508","    });","548","    const done = (issues: T.Issue[], paging: T.Paging) => {","552","      const lastIssue = issues[issues.length - 1];","559","    if (done(issues, paging)) {","739","  handleIssueCheck = (issue: string, event: { shiftKey?: boolean }) => {","740","    \/\/ Selecting multiple issues with shift+click","741","    const { lastChecked } = this.state;","742","    if (event.shiftKey && lastChecked) {","743","      this.setState(state => {","744","        const issueKeys = state.issues.map(issue => issue.key);","745","        const currentIssueIndex = issueKeys.indexOf(issue);","746","        const lastSelectedIndex = issueKeys.indexOf(lastChecked);","747","        const shouldCheck = state.checked.includes(lastChecked);","748","        let { checked } = state;","749","        if (currentIssueIndex < 0) {","750","          return null;","751","        }","752","        const start = Math.min(currentIssueIndex, lastSelectedIndex);","753","        const end = Math.max(currentIssueIndex, lastSelectedIndex);","754","        for (let i = start; i < end + 1; i++) {","755","          checked = shouldCheck","756","            ? union(checked, [state.issues[i].key])","757","            : without(checked, state.issues[i].key);","758","        }","759","        return { checkAll: false, checked };","760","      });","761","    } else {","762","      this.setState(state => ({","763","        checkAll: false,","764","        lastChecked: issue,","765","        checked: state.checked.includes(issue)","766","          ? without(state.checked, issue)","767","          : [...state.checked, issue]","768","      }));","769","    }"]}]}},"8d8bafa84419df39eedeb8fe95af916c792219fb":{"changes":{"server\/sonar-docs\/src\/pages\/requirements\/requirements.md":"MODIFY"},"diff":{"server\/sonar-docs\/src\/pages\/requirements\/requirements.md":[{"add":["24","SonarQube scanners require version 8 or 11 of the JVM and the SonarQube server requires version 11. Versions beyond Java 11 are not officially supported. ","25","","26","The SonarQube Java analyzer is able to analyze any kind of Java source files regardless of the version of Java they comply to. ","30","| Java           | Server                    | Scanners                  |"],"delete":["24","The SonarQube Java analyzer is able to analyze any kind of Java source files regardless of the version of Java they comply to. However, SonarQube analysis requires version 8+ of the JVM and the SonarQube Server requires version 11+.","28","| Java           | Server                    | Analysis                  |"]}]}},"18af892e0df11889eb699c4e562e6bbd979b559f":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/components\/MeasureContent.js":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/measure\/ws\/ComponentTreeSortTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/measure\/ws\/ComponentTreeSort.java":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/components\/MeasureContent.js":[{"add":["135","      opts.s = isDiff ? 'metricPeriod' : 'metric';"],"delete":["135","      opts.s = isDiff ? 'metricPeriod,name' : 'metric,name';"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/measure\/ws\/ComponentTreeSortTest.java":[{"add":["140","  public void sort_by_name_ascending_in_case_of_equality() {","141","    components = newArrayList(","142","      newComponentWithoutSnapshotId(\"PROJECT 12\", Qualifiers.PROJECT, \"PROJECT_PATH_1\"),","143","      newComponentWithoutSnapshotId(\"PROJECT 11\", Qualifiers.PROJECT, \"PROJECT_PATH_1\"),","144","      newComponentWithoutSnapshotId(\"PROJECT 0\", Qualifiers.PROJECT, \"PROJECT_PATH_2\"));","145","","146","    ComponentTreeWsRequest wsRequest = newRequest(newArrayList(PATH_SORT), false, null);","147","","148","    List<ComponentDto> result = sortComponents(wsRequest);","149","","150","    assertThat(result).extracting(\"name\").containsExactly(\"PROJECT 0\", \"PROJECT 11\", \"PROJECT 12\");","151","  }","152","","153","  @Test"],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/measure\/ws\/ComponentTreeSort.java":[{"add":["88","    primaryOrdering = primaryOrdering.compound(componentNameOrdering(true));"],"delete":[]}]}},"75cb959484359498dcda14e520c95db0c8789ec5":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/store\/rootReducer.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/components\/CopyQualityGateForm.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/store\/rootReducer.js":[{"add":["45","        qualityGates: state.qualityGates.filter(","46","          candidate => candidate.id !== action.qualityGate.id","47","        ),","48","        qualityGate: state.qualityGate.id === action.qualityGate.id ? undefined : state.qualityGate"],"delete":["45","        qualityGates: state.qualityGates.filter(candidate => candidate.id !== action.qualityGate.id)"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/components\/CopyQualityGateForm.tsx":[{"add":["23","import { ResetButtonLink, SubmitButton } from '..\/..\/..\/components\/ui\/buttons';","118","            <SubmitButton className=\"js-confirm\" disabled={submitDisabled}>","120","            <\/SubmitButton>"],"delete":["23","import { Button, ResetButtonLink } from '..\/..\/..\/components\/ui\/buttons';","118","            <Button className=\"js-confirm\" disabled={submitDisabled}>","120","            <\/Button>"]}]}},"87be67f27468e489a1160b545ad678ee37f0406e":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/projects\/filters\/Filter.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/projects\/filters\/Filter.tsx":[{"add":["75","      if (Array.isArray(value) && (event.ctrlKey || event.metaKey)) {"],"delete":["75","      if (Array.isArray(value) && event.ctrlKey) {"]}]}},"4029e97abc4ee6b5abd2f6e04d9814a8fa31074b":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/qualityGate\/__tests__\/QualityGateCondition-test.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/qualityGate\/QualityGateCondition.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/styles.css":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/qualityGate\/QualityGateConditions.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/qualityGate\/__tests__\/__snapshots__\/QualityGateCondition-test.js.snap":"ADD"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/qualityGate\/__tests__\/QualityGateCondition-test.js":[{"add":["23","const mockRatingCondition = metric => ({","24","  actual: '3',","25","  error: '1',","26","  level: 'ERROR',","27","  measure: {","28","    metric: {","29","      key: metric,","30","      type: 'RATING',","31","      name: metric","32","    },","33","    value: '3'","34","  },","35","  op: 'GT',","36","  metric","37","});","38","","39","it('open_issues', () => {","48","        name: 'Open open_issues'","55","  expect(shallow(","56","      <QualityGateCondition component={{ key: 'abcd-key' }} periods={[]} condition={condition}\/>","57","  )).toMatchSnapshot();","58","});","60","it('new_open_issues', () => {","61","  const condition = {","62","    actual: '10',","63","    error: '0',","64","    level: 'ERROR',","65","    measure: {","66","      metric: {","67","        key: 'new_open_issues',","68","        type: 'INT',","69","        name: 'new_open_issues'","70","      },","71","      value: '10'","72","    },","73","    metric: 'new_open_issues',","74","    op: 'GT'","75","  };","76","  expect(shallow(","77","      <QualityGateCondition component={{ key: 'abcd-key' }} periods={[]} condition={condition}\/>","78","  )).toMatchSnapshot();","79","});","81","it('reliability_rating', () => {","82","  const condition = mockRatingCondition('reliability_rating');","83","  expect(shallow(","84","      <QualityGateCondition component={{ key: 'abcd-key' }} periods={[]} condition={condition}\/>","85","  )).toMatchSnapshot();","86","});","87","","88","it('security_rating', () => {","89","  const condition = mockRatingCondition('security_rating');","90","  expect(shallow(","91","      <QualityGateCondition component={{ key: 'abcd-key' }} periods={[]} condition={condition}\/>","92","  )).toMatchSnapshot();","93","});","94","","95","it('sqale_rating', () => {","96","  const condition = mockRatingCondition('sqale_rating');","97","  expect(shallow(","98","      <QualityGateCondition component={{ key: 'abcd-key' }} periods={[]} condition={condition}\/>","99","  )).toMatchSnapshot();","100","});","101","","102","it('new_reliability_rating', () => {","103","  const condition = mockRatingCondition('new_reliability_rating');","104","  expect(shallow(","105","      <QualityGateCondition component={{ key: 'abcd-key' }} periods={[]} condition={condition}\/>","106","  )).toMatchSnapshot();","107","});","108","","109","it('new_security_rating', () => {","110","  const condition = mockRatingCondition('new_security_rating');","111","  expect(shallow(","112","      <QualityGateCondition component={{ key: 'abcd-key' }} periods={[]} condition={condition}\/>","113","  )).toMatchSnapshot();","114","});","115","","116","it('new_sqale_rating', () => {","117","  const condition = mockRatingCondition('new_sqale_rating');","118","  expect(shallow(","119","      <QualityGateCondition component={{ key: 'abcd-key' }} periods={[]} condition={condition}\/>","120","  )).toMatchSnapshot();"],"delete":["22","import { DrilldownLink } from '..\/..\/..\/..\/components\/shared\/drilldown-link';","24","it('should render DrilldownLink', () => {","25","  const component = {","26","    id: 'abcd',","27","    key: 'abcd-key'","28","  };","29","  const periods = [];","38","        name: 'Open Issues'","46","  const output = shallow(","47","      <QualityGateCondition","48","          component={component}","49","          periods={periods}","50","          condition={condition}\/>","51","  );","53","  const link = output.find(DrilldownLink);","54","  expect(link.prop('component')).toBe('abcd-key');","55","  expect(link.prop('metric')).toBe('open_issues');"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/qualityGate\/QualityGateCondition.js":[{"add":["19","\/\/ @flow","22","import { Link } from 'react-router';","28","import { getComponentIssuesUrl } from '..\/..\/..\/helpers\/urls';","30","export default class QualityGateCondition extends React.Component {","31","  props: {","32","    component: { key: string },","33","    periods: Array<{","34","      index: number,","35","      date: string,","36","      mode: string,","37","      parameter?: string","38","    }>,","39","    condition: {","40","      level: string,","41","      measure: {","42","        metric: {","43","          key: string,","44","          name: string,","45","          type: string","46","        },","47","        value: string","48","      },","49","      op: string,","50","      period: number,","51","      error: string,","52","      warning: string","53","    }","54","  };","56","  getIssuesUrl (sinceLeakPeriod: boolean, customQuery: {}) {","57","    const query: Object = {","58","      resolved: 'false',","59","      ...customQuery","60","    };","61","    if (sinceLeakPeriod) {","62","      Object.assign(query, { sinceLeakPeriod: 'true' });","63","    }","64","    return getComponentIssuesUrl(this.props.component.key, query);","65","  }","67","  getUrlForCodeSmells (sinceLeakPeriod: boolean) {","68","    return this.getIssuesUrl(sinceLeakPeriod, { types: 'CODE_SMELL' });","69","  }","71","  getUrlForBugsOrVulnerabilities (type: string, sinceLeakPeriod: boolean) {","72","    const RATING_TO_SEVERITIES_MAPPING = {","73","      '1': 'BLOCKER,CRITICAL,MAJOR,MINOR',","74","      '2': 'BLOCKER,CRITICAL,MAJOR',","75","      '3': 'BLOCKER,CRITICAL',","76","      '4': 'BLOCKER'","77","    };","79","    const { condition } = this.props;","80","    const threshold = condition.level === 'ERROR' ? condition.error : condition.warning;","82","    return this.getIssuesUrl(sinceLeakPeriod, {","83","      types: type,","84","      severities: RATING_TO_SEVERITIES_MAPPING[threshold]","85","    });","86","  }","88","  getUrlForType (type: string, sinceLeakPeriod: boolean) {","89","    return type === 'CODE_SMELL' ?","90","        this.getUrlForCodeSmells(sinceLeakPeriod) :","91","        this.getUrlForBugsOrVulnerabilities(type, sinceLeakPeriod);","92","  }","93","","94","  wrapWithLink (children: Object) {","95","    const { component, periods, condition } = this.props;","96","","97","    const period = getPeriod(periods, condition.period);","98","    const periodDate = getPeriodDate(period);","99","","100","    const className = classNames(","101","        'overview-quality-gate-condition',","102","        'overview-quality-gate-condition-' + condition.level.toLowerCase(),","103","        { 'overview-quality-gate-condition-leak': period != null }","104","    );","105","","106","    const metricKey = condition.measure.metric.key;","107","","108","    const RATING_METRICS_MAPPING = {","109","      'reliability_rating': ['BUG', false],","110","      'new_reliability_rating': ['BUG', true],","111","      'security_rating': ['VULNERABILITY', false],","112","      'new_security_rating': ['VULNERABILITY', true],","113","      'sqale_rating': ['CODE_SMELL', false],","114","      'new_sqale_rating': ['CODE_SMELL', true]","115","    };","116","","117","    return RATING_METRICS_MAPPING[metricKey] ? (","118","            <Link to={this.getUrlForType(...RATING_METRICS_MAPPING[metricKey])} className={className}>","119","              {children}","120","            <\/Link>","121","        ) : (","123","                className={className}","125","                metric={condition.measure.metric.key}","128","              {children}","130","        );","131","  }","132","","133","  render () {","134","    const { periods, condition } = this.props;","135","","136","    const { measure } = condition;","137","    const { metric } = measure;","138","","139","    const isRating = metric.type === 'RATING';","140","    const isDiff = isDiffMetric(metric.key);","141","","142","    const threshold = condition.level === 'ERROR' ?","143","        condition.error :","144","        condition.warning;","145","","146","    const actual = condition.period ?","147","        getPeriodValue(measure, condition.period) :","148","        measure.value;","149","    const period = getPeriod(periods, condition.period);","150","","151","    const operator = isRating ?","152","        translate('quality_gates.operator', condition.op, 'rating') :","153","        translate('quality_gates.operator', condition.op);","154","","155","    return this.wrapWithLink(","156","        <div className=\"overview-quality-gate-condition-container\">","157","          <div className=\"overview-quality-gate-condition-value\">","158","            <Measure measure={{ value: actual, leak: actual }} metric={metric}\/>","175","    );","176","  }","177","}"],"delete":["21","import { ComponentType, PeriodsListType, EnhancedConditionType } from '..\/propTypes';","28","const QualityGateCondition = ({ component, periods, condition }) => {","29","  const { measure } = condition;","30","  const { metric } = measure;","32","  const isRating = metric.type === 'RATING';","33","  const isDiff = isDiffMetric(metric.key);","35","  const threshold = condition.level === 'ERROR' ?","36","      condition.error :","37","      condition.warning;","39","  const actual = condition.period ?","40","      getPeriodValue(measure, condition.period) :","41","      measure.value;","42","  const period = getPeriod(periods, condition.period);","44","  const periodDate = getPeriodDate(period);","45","  const operator = isRating ?","46","      translate('quality_gates.operator', condition.op, 'rating') :","47","      translate('quality_gates.operator', condition.op);","49","  const className = classNames(","50","      'overview-quality-gate-condition',","51","      'overview-quality-gate-condition-' + condition.level.toLowerCase(),","52","      { 'overview-quality-gate-condition-leak': period != null }","53","  );","55","  return (","56","      <li className={className}>","57","        <div className=\"overview-quality-gate-condition-container\">","58","          <div className=\"overview-quality-gate-condition-value\">","60","                className={isRating ? 'link-no-underline' : null}","62","                metric={metric.key}","65","              <Measure measure={{ value: actual, leak: actual }} metric={metric}\/>","83","      <\/li>","84","  );","85","};","86","","87","QualityGateCondition.propTypes = {","88","  component: ComponentType.isRequired,","89","  periods: PeriodsListType.isRequired,","90","  condition: EnhancedConditionType.isRequired","91","};","92","","93","export default QualityGateCondition;"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/styles.css":[{"add":["49","  display: block;","55","  color: #444;","56","  transition: none;","57","}","58","","59",".overview-quality-gate-condition:hover,","60",".overview-quality-gate-condition:focus {","61","  border-width: 2px;","62","  color: #444;","63","}","64","","65",".overview-quality-gate-condition:hover .overview-quality-gate-condition-container,","66",".overview-quality-gate-condition:focus .overview-quality-gate-condition-container {","67","  padding: 9px;"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/qualityGate\/QualityGateConditions.js":[{"add":["104","        <div id=\"overview-quality-gate-conditions-list\"","105","             className=\"overview-quality-gate-conditions-list clearfix\">","113","        <\/div>"],"delete":["104","        <ul","105","            className=\"overview-quality-gate-conditions-list clearfix\"","106","            id=\"overview-quality-gate-conditions-list\">","114","        <\/ul>"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/qualityGate\/__tests__\/__snapshots__\/QualityGateCondition-test.js.snap":[{"add":[],"delete":[]}]}},"5c03e3bf05097c98a88223339cf300b613b61c0d":{"changes":{"\/dev\/null":"DELETE","it\/it-tests\/src\/test\/resources\/administration\/UsersPageTest\/generate_and_revoke_user_token.html":"ADD","it\/it-tests\/src\/test\/java\/it\/administration\/UsersPageTest.java":"MODIFY","it\/it-tests\/src\/test\/resources\/administration\/UsersPageTest\/admin_should_change_its_own_password.html":"ADD"},"diff":{"\/dev\/null":[{"add":[],"delete":[]}],"it\/it-tests\/src\/test\/resources\/administration\/UsersPageTest\/generate_and_revoke_user_token.html":[{"add":[],"delete":[]}],"it\/it-tests\/src\/test\/java\/it\/administration\/UsersPageTest.java":[{"add":["36","      \"\/administration\/UsersPageTest\/generate_and_revoke_user_token.html\"","44","      \"\/administration\/UsersPageTest\/admin_should_change_its_own_password.html\""],"delete":["24","import org.junit.BeforeClass;","27","import org.sonarqube.ws.client.PostRequest;","28","import org.sonarqube.ws.client.WsClient;","31","import static util.ItUtils.newAdminWsClient;","32","","37","  private static WsClient adminWsClient;","38","","39","  @BeforeClass","40","  public static void setUp() {","41","    adminWsClient = newAdminWsClient(orchestrator);","42","  }","47","      \"\/administration\/UsersUITest\/generate_and_revoke_user_token.html\"","54","    createUser(\"users-page-user\", \"User\");","55","    makeAdmin(\"users-page-user\");","56","","58","      \"\/administration\/UsersUITest\/admin_should_change_its_own_password.html\"","61","","62","    deactivateUser(\"users-page-user\");","63","  }","64","","65","  private static void createUser(String login, String name) {","66","    adminWsClient.wsConnector().call(","67","      new PostRequest(\"api\/users\/create\")","68","        .setParam(\"login\", login)","69","        .setParam(\"name\", name)","70","        .setParam(\"password\", \"password\"));","71","  }","72","","73","  private static void makeAdmin(String login) {","74","    adminWsClient.wsConnector().call(","75","      new PostRequest(\"api\/permissions\/add_user\")","76","        .setParam(\"login\", login)","77","        .setParam(\"permission\", \"admin\"));","78","  }","79","","80","  private static void deactivateUser(String login) {","81","    adminWsClient.wsConnector().call(","82","      new PostRequest(\"api\/users\/deactivate\")","83","        .setParam(\"login\", login));"]}],"it\/it-tests\/src\/test\/resources\/administration\/UsersPageTest\/admin_should_change_its_own_password.html":[{"add":[],"delete":[]}]}},"0644be43e7d604609c02f600e7067d6d429137b5":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/meta\/MetaSize.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/styles.css":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/ui\/SizeRating.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/meta\/MetaSize.js":[{"add":["24","import SizeRating from '..\/..\/..\/components\/ui\/SizeRating';","45","            <span className=\"spacer-right\">","46","              <SizeRating value={ncloc.value}\/>","47","            <\/span>"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/styles.css":[{"add":["321","  line-height: 24px;","322","  font-size: 18px;"],"delete":["321","  line-height: 1;","322","  font-size: 24px;"]}],"server\/sonar-web\/src\/main\/js\/components\/ui\/SizeRating.js":[{"add":["19","\/\/ @flow","26","  props: {","27","    value: number,","28","    small?: boolean,","29","    muted?: boolean"],"delete":["25","  static propTypes = {","26","    value: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]),","27","    small: React.PropTypes.bool,","28","    muted: React.PropTypes.bool"]}]}},"7e7b3471c9aef526a64325bb60755e9a45b42ade":{"changes":{"server\/sonar-docs\/src\/layouts\/layout.css":"MODIFY","server\/sonar-docs\/src\/components\/__tests__\/VersionSelect-test.tsx":"ADD","server\/sonar-docs\/src\/components\/__tests__\/Sidebar-test.tsx":"MODIFY","server\/sonar-docs\/src\/components\/VersionSelect.tsx":"MODIFY","server\/sonar-docs\/src\/components\/Sidebar.tsx":"MODIFY","server\/sonar-docs\/src\/components\/__tests__\/__snapshots__\/VersionSelect-test.tsx.snap":"ADD","server\/sonar-docs\/src\/@types\/types.d.ts":"MODIFY","server\/sonar-docs\/src\/components\/__tests__\/__snapshots__\/Sidebar-test.tsx.snap":"MODIFY","server\/sonar-docs\/static\/DocsVersions.json":"MODIFY"},"diff":{"server\/sonar-docs\/src\/layouts\/layout.css":[{"add":["495","  text-align: left;","497","  white-space: nowrap;"],"delete":["495","  text-align: center;"]}],"server\/sonar-docs\/src\/components\/__tests__\/VersionSelect-test.tsx":[{"add":[],"delete":[]}],"server\/sonar-docs\/src\/components\/__tests__\/Sidebar-test.tsx":[{"add":["61","    { \"value\": \"3.0\", \"current\": true },","62","    { \"value\": \"2.0\", \"current\": false, \"lts\": true },","67","it('should render correctly', async () => {","69","  await new Promise(setImmediate);","70","","71","  expect(wrapper).toMatchSnapshot('default');","72","  expect(wrapper.setProps({ version: '1.0' })).toMatchSnapshot('show warning');","73","  expect(wrapper.setProps({ version: '2.0' })).toMatchSnapshot('lts');","77","  return shallow<Sidebar>(","106","      version=\"3.0\""],"delete":["61","    { \"value\": \"2.0\", \"current\": true },","66","it('should render correctly', () => {","68","  expect(wrapper).toMatchSnapshot();","72","  return shallow(","101","      version=\"2.0\""]}],"server\/sonar-docs\/src\/components\/VersionSelect.tsx":[{"add":["64","                      <span className={version.current || version.lts ? 'current' : ''}>","65","                        {version.value + (version.lts ? ' LTS' : '')}","66","                      <\/span>"],"delete":["64","                      <span className={version.current ? 'current' : ''}>{version.value}<\/span>"]}],"server\/sonar-docs\/src\/components\/Sidebar.tsx":[{"add":["167","    const { version } = this.props;","168","","170","    const ltsVersion = versions.find(v => v.lts);","171","","173","      currentVersion && version === 'latest' ? currentVersion.value : version;","175","    const isOnLTSVersion = ltsVersion && version === ltsVersion.value;","176","","184","              src={`\/${version}\/images\/SonarQubeIcon.svg`}","194","          {this.state.loaded && !isOnCurrentVersion && !isOnLTSVersion && (","196","              This is an archived version of the doc for <b>SonarQube version {version}<\/b>.{' '}","197","              <a href=\"\/\">See Documentation<\/a> for current functionnality.","214","            <img alt=\"Community\" src={`\/${version}\/images\/community.svg`} \/> Community","221","            <img alt=\"Twitter\" src={`\/${version}\/images\/twitter.svg`} \/>","228","            <img alt=\"Product News\" src={`\/${version}\/images\/newspaper.svg`} \/>"],"delete":["169","      currentVersion && this.props.version === 'latest' ? currentVersion.value : this.props.version;","178","              src={`\/${this.props.version}\/images\/SonarQubeIcon.svg`}","188","          {this.state.loaded && !isOnCurrentVersion && (","190","              This is an archived version of the doc for{' '}","191","              <b>SonarQube version {this.props.version}<\/b>. <a href=\"\/\">See Documentation<\/a> for","192","              current functionnality.","209","            <img alt=\"Community\" src={`\/${this.props.version}\/images\/community.svg`} \/> Community","216","            <img alt=\"Twitter\" src={`\/${this.props.version}\/images\/twitter.svg`} \/>","223","            <img alt=\"Product News\" src={`\/${this.props.version}\/images\/newspaper.svg`} \/>"]}],"server\/sonar-docs\/src\/components\/__tests__\/__snapshots__\/VersionSelect-test.tsx.snap":[{"add":[],"delete":[]}],"server\/sonar-docs\/src\/@types\/types.d.ts":[{"add":["23","  lts?: boolean;"],"delete":[]}],"server\/sonar-docs\/src\/components\/__tests__\/__snapshots__\/Sidebar-test.tsx.snap":[{"add":["2","exports[`should render correctly: default 1`] = `","3","<div","4","  className=\"page-sidebar\"","5",">","6","  <div","7","    className=\"sidebar-header\"","8","  >","9","    <ForwardRef","10","      to=\"\/\"","11","    >","12","      <img","13","        alt=\"Continuous Code Quality\"","14","        className=\"sidebar-logo\"","15","        src=\"\/3.0\/images\/SonarQubeIcon.svg\"","16","        title=\"Continuous Code Quality\"","17","        width=\"160\"","18","      \/>","19","    <\/ForwardRef>","20","    <VersionSelect","21","      isOnCurrentVersion={true}","22","      selectedVersionValue=\"3.0\"","23","      versions={","24","        Array [","25","          Object {","26","            \"current\": true,","27","            \"value\": \"3.0\",","28","          },","29","          Object {","30","            \"current\": false,","31","            \"lts\": true,","32","            \"value\": \"2.0\",","33","          },","34","          Object {","35","            \"current\": false,","36","            \"value\": \"1.0\",","37","          },","38","        ]","39","      }","40","    \/>","41","  <\/div>","42","  <div","43","    className=\"page-indexes\"","44","  >","45","    <Search","46","      navigation={","47","        Array [","48","          \"\/foo\/\",","49","          Object {","50","            \"children\": Array [","51","              \"\/foo\/bar\/\",","52","              \"\/foo\/baz\/\",","53","              Object {","54","                \"children\": Array [","55","                  \"\/foo\/baz\/bar\/\",","56","                  \"\/foo\/baz\/foo\/\",","57","                  Object {","58","                    \"children\": Array [","59","                      \"\/foo\/baz\/foo\/bar\/\",","60","                      \"\/foo\/baz\/foo\/baz\",","61","                    ],","62","                    \"title\": \"Foo Baz Foo subs\",","63","                  },","64","                ],","65","                \"title\": \"Foo Baz subs\",","66","              },","67","            ],","68","            \"title\": \"Foo subs\",","69","          },","70","          \"\/bar\/\",","71","          Object {","72","            \"children\": Array [","73","              Object {","74","                \"title\": \"External link 1\",","75","                \"url\": \"http:\/\/example.com\/1\",","76","              },","77","              \"\/bar\/foo\/\",","78","            ],","79","            \"title\": \"Bar subs\",","80","          },","81","          Object {","82","            \"title\": \"External link 2\",","83","            \"url\": \"http:\/\/example.com\/2\",","84","          },","85","        ]","86","      }","87","      onResultsChange={[Function]}","88","      pages={","89","        Array [","90","          Object {","91","            \"fields\": Object {","92","              \"slug\": \"\/foo\/\",","93","            },","94","            \"frontmatter\": Object {","95","              \"title\": \"Foo\",","96","            },","97","          },","98","          Object {","99","            \"fields\": Object {","100","              \"slug\": \"\/foo\/baz\/bar\",","101","            },","102","            \"frontmatter\": Object {","103","              \"title\": \"Foo Baz Bar\",","104","            },","105","          },","106","          Object {","107","            \"fields\": Object {","108","              \"slug\": \"\/bar\/\",","109","            },","110","            \"frontmatter\": Object {","111","              \"title\": \"Bar\",","112","            },","113","          },","114","        ]","115","      }","116","    \/>","117","    <nav>","118","      <PageLink","119","        className=\"page-indexes-link\"","120","        key=\"\/foo\/\"","121","        location={","122","          Object {","123","            \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","124","          }","125","        }","126","        node={","127","          Object {","128","            \"fields\": Object {","129","              \"slug\": \"\/foo\/\",","130","            },","131","            \"frontmatter\": Object {","132","              \"title\": \"Foo\",","133","            },","134","          }","135","        }","136","      \/>","137","      <CategoryLink","138","        key=\"Foo subs\"","139","        location={","140","          Object {","141","            \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","142","          }","143","        }","144","        openByDefault={true}","145","        title=\"Foo subs\"","146","      >","147","        <CategoryLink","148","          key=\"Foo Baz subs\"","149","          location={","150","            Object {","151","              \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","152","            }","153","          }","154","          openByDefault={true}","155","          title=\"Foo Baz subs\"","156","        >","157","          <Component \/>","158","          <CategoryLink","159","            key=\"Foo Baz Foo subs\"","160","            location={","161","              Object {","162","                \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","163","              }","164","            }","165","            openByDefault={true}","166","            title=\"Foo Baz Foo subs\"","167","          \/>","168","        <\/CategoryLink>","169","      <\/CategoryLink>","170","      <PageLink","171","        className=\"page-indexes-link\"","172","        key=\"\/bar\/\"","173","        location={","174","          Object {","175","            \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","176","          }","177","        }","178","        node={","179","          Object {","180","            \"fields\": Object {","181","              \"slug\": \"\/bar\/\",","182","            },","183","            \"frontmatter\": Object {","184","              \"title\": \"Bar\",","185","            },","186","          }","187","        }","188","      \/>","189","      <CategoryLink","190","        key=\"Bar subs\"","191","        location={","192","          Object {","193","            \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","194","          }","195","        }","196","        openByDefault={false}","197","        title=\"Bar subs\"","198","      >","199","        <ExternalLink","200","          external=\"http:\/\/example.com\/1\"","201","          key=\"External link 1\"","202","          title=\"External link 1\"","203","        \/>","204","      <\/CategoryLink>","205","      <ExternalLink","206","        external=\"http:\/\/example.com\/2\"","207","        key=\"External link 2\"","208","        title=\"External link 2\"","209","      \/>","210","    <\/nav>","211","  <\/div>","212","  <div","213","    className=\"sidebar-footer\"","214","  >","215","    <a","216","      href=\"https:\/\/www.sonarqube.org\/\"","217","      rel=\"noopener noreferrer\"","218","      target=\"_blank\"","219","    >","220","      <DownloadIcon \/>","221","       SonarQube","222","    <\/a>","223","    <a","224","      href=\"https:\/\/community.sonarsource.com\/\"","225","      rel=\"noopener noreferrer\"","226","      target=\"_blank\"","227","    >","228","      <img","229","        alt=\"Community\"","230","        src=\"\/3.0\/images\/community.svg\"","231","      \/>","232","       Community","233","    <\/a>","234","    <a","235","      className=\"icon-only\"","236","      href=\"https:\/\/twitter.com\/SonarQube\"","237","      rel=\"noopener noreferrer\"","238","      target=\"_blank\"","239","    >","240","      <img","241","        alt=\"Twitter\"","242","        src=\"\/3.0\/images\/twitter.svg\"","243","      \/>","244","    <\/a>","245","    <a","246","      className=\"icon-only\"","247","      href=\"https:\/\/www.sonarqube.org\/whats-new\/\"","248","      rel=\"noopener noreferrer\"","249","      target=\"_blank\"","250","    >","251","      <img","252","        alt=\"Product News\"","253","        src=\"\/3.0\/images\/newspaper.svg\"","254","      \/>","255","      <span","256","        className=\"tooltip\"","257","      >","258","        Product News","259","      <\/span>","260","    <\/a>","261","  <\/div>","262","<\/div>","263","`;","264","","265","exports[`should render correctly: lts 1`] = `","284","      isOnCurrentVersion={false}","286","      versions={","287","        Array [","288","          Object {","289","            \"current\": true,","290","            \"value\": \"3.0\",","291","          },","292","          Object {","293","            \"current\": false,","294","            \"lts\": true,","295","            \"value\": \"2.0\",","296","          },","297","          Object {","298","            \"current\": false,","299","            \"value\": \"1.0\",","300","          },","301","        ]","302","      }","527","","528","exports[`should render correctly: show warning 1`] = `","529","<div","530","  className=\"page-sidebar\"","531",">","532","  <div","533","    className=\"sidebar-header\"","534","  >","535","    <ForwardRef","536","      to=\"\/\"","537","    >","538","      <img","539","        alt=\"Continuous Code Quality\"","540","        className=\"sidebar-logo\"","541","        src=\"\/1.0\/images\/SonarQubeIcon.svg\"","542","        title=\"Continuous Code Quality\"","543","        width=\"160\"","544","      \/>","545","    <\/ForwardRef>","546","    <VersionSelect","547","      isOnCurrentVersion={false}","548","      selectedVersionValue=\"1.0\"","549","      versions={","550","        Array [","551","          Object {","552","            \"current\": true,","553","            \"value\": \"3.0\",","554","          },","555","          Object {","556","            \"current\": false,","557","            \"lts\": true,","558","            \"value\": \"2.0\",","559","          },","560","          Object {","561","            \"current\": false,","562","            \"value\": \"1.0\",","563","          },","564","        ]","565","      }","566","    \/>","567","    <div","568","      className=\"alert alert-warning\"","569","    >","570","      This is an archived version of the doc for ","571","      <b>","572","        SonarQube version ","573","        1.0","574","      <\/b>","575","      .","576","       ","577","      <a","578","        href=\"\/\"","579","      >","580","        See Documentation","581","      <\/a>","582","       for current functionnality.","583","    <\/div>","584","  <\/div>","585","  <div","586","    className=\"page-indexes\"","587","  >","588","    <Search","589","      navigation={","590","        Array [","591","          \"\/foo\/\",","592","          Object {","593","            \"children\": Array [","594","              \"\/foo\/bar\/\",","595","              \"\/foo\/baz\/\",","596","              Object {","597","                \"children\": Array [","598","                  \"\/foo\/baz\/bar\/\",","599","                  \"\/foo\/baz\/foo\/\",","600","                  Object {","601","                    \"children\": Array [","602","                      \"\/foo\/baz\/foo\/bar\/\",","603","                      \"\/foo\/baz\/foo\/baz\",","604","                    ],","605","                    \"title\": \"Foo Baz Foo subs\",","606","                  },","607","                ],","608","                \"title\": \"Foo Baz subs\",","609","              },","610","            ],","611","            \"title\": \"Foo subs\",","612","          },","613","          \"\/bar\/\",","614","          Object {","615","            \"children\": Array [","616","              Object {","617","                \"title\": \"External link 1\",","618","                \"url\": \"http:\/\/example.com\/1\",","619","              },","620","              \"\/bar\/foo\/\",","621","            ],","622","            \"title\": \"Bar subs\",","623","          },","624","          Object {","625","            \"title\": \"External link 2\",","626","            \"url\": \"http:\/\/example.com\/2\",","627","          },","628","        ]","629","      }","630","      onResultsChange={[Function]}","631","      pages={","632","        Array [","633","          Object {","634","            \"fields\": Object {","635","              \"slug\": \"\/foo\/\",","636","            },","637","            \"frontmatter\": Object {","638","              \"title\": \"Foo\",","639","            },","640","          },","641","          Object {","642","            \"fields\": Object {","643","              \"slug\": \"\/foo\/baz\/bar\",","644","            },","645","            \"frontmatter\": Object {","646","              \"title\": \"Foo Baz Bar\",","647","            },","648","          },","649","          Object {","650","            \"fields\": Object {","651","              \"slug\": \"\/bar\/\",","652","            },","653","            \"frontmatter\": Object {","654","              \"title\": \"Bar\",","655","            },","656","          },","657","        ]","658","      }","659","    \/>","660","    <nav>","661","      <PageLink","662","        className=\"page-indexes-link\"","663","        key=\"\/foo\/\"","664","        location={","665","          Object {","666","            \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","667","          }","668","        }","669","        node={","670","          Object {","671","            \"fields\": Object {","672","              \"slug\": \"\/foo\/\",","673","            },","674","            \"frontmatter\": Object {","675","              \"title\": \"Foo\",","676","            },","677","          }","678","        }","679","      \/>","680","      <CategoryLink","681","        key=\"Foo subs\"","682","        location={","683","          Object {","684","            \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","685","          }","686","        }","687","        openByDefault={true}","688","        title=\"Foo subs\"","689","      >","690","        <CategoryLink","691","          key=\"Foo Baz subs\"","692","          location={","693","            Object {","694","              \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","695","            }","696","          }","697","          openByDefault={true}","698","          title=\"Foo Baz subs\"","699","        >","700","          <Component \/>","701","          <CategoryLink","702","            key=\"Foo Baz Foo subs\"","703","            location={","704","              Object {","705","                \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","706","              }","707","            }","708","            openByDefault={true}","709","            title=\"Foo Baz Foo subs\"","710","          \/>","711","        <\/CategoryLink>","712","      <\/CategoryLink>","713","      <PageLink","714","        className=\"page-indexes-link\"","715","        key=\"\/bar\/\"","716","        location={","717","          Object {","718","            \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","719","          }","720","        }","721","        node={","722","          Object {","723","            \"fields\": Object {","724","              \"slug\": \"\/bar\/\",","725","            },","726","            \"frontmatter\": Object {","727","              \"title\": \"Bar\",","728","            },","729","          }","730","        }","731","      \/>","732","      <CategoryLink","733","        key=\"Bar subs\"","734","        location={","735","          Object {","736","            \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","737","          }","738","        }","739","        openByDefault={false}","740","        title=\"Bar subs\"","741","      >","742","        <ExternalLink","743","          external=\"http:\/\/example.com\/1\"","744","          key=\"External link 1\"","745","          title=\"External link 1\"","746","        \/>","747","      <\/CategoryLink>","748","      <ExternalLink","749","        external=\"http:\/\/example.com\/2\"","750","        key=\"External link 2\"","751","        title=\"External link 2\"","752","      \/>","753","    <\/nav>","754","  <\/div>","755","  <div","756","    className=\"sidebar-footer\"","757","  >","758","    <a","759","      href=\"https:\/\/www.sonarqube.org\/\"","760","      rel=\"noopener noreferrer\"","761","      target=\"_blank\"","762","    >","763","      <DownloadIcon \/>","764","       SonarQube","765","    <\/a>","766","    <a","767","      href=\"https:\/\/community.sonarsource.com\/\"","768","      rel=\"noopener noreferrer\"","769","      target=\"_blank\"","770","    >","771","      <img","772","        alt=\"Community\"","773","        src=\"\/1.0\/images\/community.svg\"","774","      \/>","775","       Community","776","    <\/a>","777","    <a","778","      className=\"icon-only\"","779","      href=\"https:\/\/twitter.com\/SonarQube\"","780","      rel=\"noopener noreferrer\"","781","      target=\"_blank\"","782","    >","783","      <img","784","        alt=\"Twitter\"","785","        src=\"\/1.0\/images\/twitter.svg\"","786","      \/>","787","    <\/a>","788","    <a","789","      className=\"icon-only\"","790","      href=\"https:\/\/www.sonarqube.org\/whats-new\/\"","791","      rel=\"noopener noreferrer\"","792","      target=\"_blank\"","793","    >","794","      <img","795","        alt=\"Product News\"","796","        src=\"\/1.0\/images\/newspaper.svg\"","797","      \/>","798","      <span","799","        className=\"tooltip\"","800","      >","801","        Product News","802","      <\/span>","803","    <\/a>","804","  <\/div>","805","<\/div>","806","`;"],"delete":["2","exports[`should render correctly 1`] = `","21","      isOnCurrentVersion={true}","23","      versions={Array []}"]}],"server\/sonar-docs\/static\/DocsVersions.json":[{"add":["3","  { \"value\": \"7.1\", \"current\": false, \"lts\": true },"],"delete":["3","  { \"value\": \"7.1\", \"current\": false },"]}]}},"6eac2ab8175deb961aad976de301d80c3fa1ae77":{"changes":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/meta\/MetaQualityProfiles.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/styles.css":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/types.ts":"MODIFY"},"diff":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["2425","overview.deleted_profile={0} has been deleted since the last analysis."],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/meta\/MetaQualityProfiles.tsx":[{"add":["28","import { ComponentQualityProfile } from '..\/..\/..\/app\/types';","37","  profiles: ComponentQualityProfile[];","58","    const requests = this.props.profiles","59","      .filter(p => !p.deleted)","60","      .map(profile => this.loadDeprecatedRulesForProfile(profile.key));","92","  renderProfile(profile: ComponentQualityProfile) {","99","        {profile.deleted ? (","100","          profile.name","101","        ) : (","102","          <Link to={getQualityProfileUrl(profile.name, profile.language, this.props.organization)}>","103","            {profile.name}","104","          <\/Link>","105","        )}","109","    if (profile.deleted) {","110","      const tooltip = translateWithParameters('overview.deleted_profile', profile.name);","111","      return (","112","        <Tooltip key={profile.key} overlay={tooltip}>","113","          <li className=\"overview-deleted-profile\">{inner}<\/li>","114","        <\/Tooltip>","115","      );","116","    }","117",""],"delete":["36","  profiles: { key: string; language: string; name: string }[];","57","    const requests = this.props.profiles.map(profile =>","58","      this.loadDeprecatedRulesForProfile(profile.key)","59","    );","91","  renderProfile(profile: { key: string; language: string; name: string }) {","95","    const path = getQualityProfileUrl(profile.name, profile.language, this.props.organization);","96","","100","        <Link to={path}>{profile.name}<\/Link>"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/styles.css":[{"add":["472",".overview-deleted-profile,"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/app\/types.ts":[{"add":["74","  qualityProfiles?: ComponentQualityProfile[];","94","export interface ComponentQualityProfile {","95","  deleted?: boolean;","96","  key: string;","97","  language: string;","98","  name: string;","99","}","100",""],"delete":["74","  qualityProfiles?: { key: string; language: string; name: string }[];"]}]}},"4b9c8ad09c0dbf6b148f0de8d9062716755e1d28":{"changes":{"server\/sonar-docs\/src\/layouts\/components\/ExternalLink.js":"MODIFY","server\/sonar-docs\/src\/layouts\/components\/CategoryLink.js":"MODIFY","server\/sonar-docs\/src\/templates\/page.css":"MODIFY","server\/sonar-docs\/src\/layouts\/components\/Sidebar.js":"MODIFY","server\/sonar-docs\/src\/layouts\/components\/SubpageLink.js":"MODIFY"},"diff":{"server\/sonar-docs\/src\/layouts\/components\/ExternalLink.js":[{"add":["24","    <a className=\"page-indexes-link\" href={external} rel=\"noopener noreferrer\" target=\"_blank\">","25","      <DetachIcon \/>","26","      {title}","27","    <\/a>"],"delete":["24","    <div>","25","      <h2>","26","        <a href={external} target=\"_blank\">","27","          <DetachIcon \/>","28","          {title}","29","        <\/a>","30","      <\/h2>","31","    <\/div>"]}],"server\/sonar-docs\/src\/layouts\/components\/CategoryLink.js":[{"add":["46","        {node ? (","47","          <Link","48","            className={isCurrentPage || open ? 'page-indexes-link active' : 'page-indexes-link'}","49","            to={url}","50","            title={node.frontmatter.title}>","51","            {node.frontmatter.title}","52","          <\/Link>","53","        ) : (","54","          <a","55","            className={isCurrentPage || open ? 'page-indexes-link active' : 'page-indexes-link'}","56","            href=\"#\"","57","            onClick={this.toggle}>","58","            {open ? <ChevronUpIcon \/> : <ChevronDownIcon \/>}","59","            {title}","60","          <\/a>","61","        )}"],"delete":["46","        <h2 className={isCurrentPage || open ? 'active' : ''}>","47","          {node ? (","48","            <Link to={url} title={node.frontmatter.title}>","49","              {node.frontmatter.title}","50","            <\/Link>","51","          ) : (","52","            <a href=\"#\" onClick={this.toggle}>","53","              {open ? <ChevronUpIcon \/> : <ChevronDownIcon \/>}","54","              {title}","55","            <\/a>","56","          )}","57","        <\/h2>"]}],"server\/sonar-docs\/src\/templates\/page.css":[{"add":["230",".page-indexes-link {","242",".page-indexes-link:hover {","246",".page-indexes-link.active {","250",".page-indexes-link,","251",".sub-menu-link {","257",".page-indexes-link svg {","266",".sub-menu-link {","272",".sub-menu-link:hover,","273",".sub-menu-link.active {"],"delete":["230",".page-indexes h2 {","242",".page-indexes h2:hover {","246",".page-indexes h2.active {","250",".page-indexes h2 a,","251",".page-indexes h3 a {","257",".page-indexes h2 svg {","266",".sub-menu h3 {","272",".sub-menu a:hover,","273",".sub-menu a.active {"]}],"server\/sonar-docs\/src\/layouts\/components\/Sidebar.js":[{"add":["78","    const items = tree.map(item => {","105","    return <nav>{items}<\/nav>;"],"delete":["78","    return tree.map(item => {"]}],"server\/sonar-docs\/src\/layouts\/components\/SubpageLink.js":[{"add":["26","      <Link","27","        className={displayHeading ? 'sub-menu-link active' : 'sub-menu-link'}","28","        to={node.fields.slug}>","29","        {node.frontmatter.title}","30","      <\/Link>"],"delete":["26","      <h3>","27","        <Link className={displayHeading ? 'active' : ''} to={node.fields.slug}>","28","          {node.frontmatter.title}","29","        <\/Link>","30","      <\/h3>"]}]}},"b38ba09393410b3511a00c76b6a788d74bf10a47":{"changes":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/scan\/branch\/BranchConfigurationProviderTest.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/branch\/BranchConfigurationProvider.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/scan\/branch\/BranchConfigurationProviderTest.java":[{"add":["23","import static org.mockito.ArgumentMatchers.anyMap;","27","import static org.mockito.Mockito.verify;","30","import java.util.Collections;","31","import java.util.HashMap;","32","import java.util.Map;","33","import java.util.function.Supplier;","34","","35","import org.junit.Before;","36","import org.junit.Test;","37","import org.mockito.ArgumentCaptor;","38","import org.mockito.Captor;","39","import org.mockito.MockitoAnnotations;","40","import org.sonar.api.batch.bootstrap.ProjectDefinition;","41","import org.sonar.api.batch.bootstrap.ProjectReactor;","42","import org.sonar.scanner.bootstrap.GlobalConfiguration;","43","import org.sonar.scanner.repository.settings.SettingsLoader;","44","","47","  private GlobalConfiguration globalConfiguration = mock(GlobalConfiguration.class);","48","  private BranchConfigurationLoader loader = mock(BranchConfigurationLoader.class);","49","  private BranchConfiguration config = mock(BranchConfiguration.class);","50","  private ProjectBranches branches = mock(ProjectBranches.class);","51","  private ProjectPullRequests pullRequests = mock(ProjectPullRequests.class);","52","  private ProjectReactor reactor = mock(ProjectReactor.class);;","53","  private Map<String, String> globalPropertiesMap = new HashMap<>();;","55","  private ProjectDefinition root = mock(ProjectDefinition.class);","56","  private SettingsLoader settingsLoader = mock(SettingsLoader.class);","57","","58","  @Captor","59","  private ArgumentCaptor<Supplier<Map<String, String>>> settingsCaptor;","63","    MockitoAnnotations.initMocks(this);","66","    when(reactor.getRoot()).thenReturn(root);","71","    BranchConfiguration configuration = provider.provide(null, globalConfiguration, reactor, settingsLoader, branches, pullRequests);","72","    assertThat(provider.provide(null, globalConfiguration, reactor, settingsLoader, branches, pullRequests)).isSameAs(configuration);","79","    BranchConfiguration result = provider.provide(loader, globalConfiguration, reactor, settingsLoader, branches, pullRequests);","85","  public void settings_should_include_command_line_args_with_highest_priority() {","86","    when(globalConfiguration.getProperties()).thenReturn(Collections.singletonMap(\"key\", \"global\"));","87","    when(settingsLoader.load(anyString())).thenReturn(Collections.singletonMap(\"key\", \"settings\"));","88","    when(root.properties()).thenReturn(Collections.singletonMap(\"key\", \"root\"));","89","    provider.provide(loader, globalConfiguration, reactor, settingsLoader, branches, pullRequests);","90","    verify(loader).load(anyMap(), settingsCaptor.capture(), any(ProjectBranches.class), any(ProjectPullRequests.class));","91","","92","    Map<String, String> map = settingsCaptor.getValue().get();","93","    assertThat(map.get(\"key\")).isEqualTo(\"root\");","94","  }","95","","96","  @Test","98","    BranchConfiguration result = provider.provide(null, globalConfiguration, reactor, settingsLoader, branches, pullRequests);"],"delete":["21","import java.util.HashMap;","22","import java.util.Map;","23","import java.util.function.Supplier;","24","import org.junit.Before;","25","import org.junit.Test;","26","import org.sonar.api.batch.bootstrap.ProjectKey;","27","import org.sonar.scanner.bootstrap.GlobalConfiguration;","28","import org.sonar.scanner.repository.settings.SettingsLoader;","29","","39","  private GlobalConfiguration globalConfiguration;","40","  private BranchConfigurationLoader loader;","41","  private BranchConfiguration config;","42","  private ProjectBranches branches;","43","  private ProjectPullRequests pullRequests;","44","  private ProjectKey projectKey;","45","  private Map<String, String> globalPropertiesMap;","47","  private SettingsLoader settingsLoader;","51","    globalConfiguration = mock(GlobalConfiguration.class);","52","    loader = mock(BranchConfigurationLoader.class);","53","    config = mock(BranchConfiguration.class);","54","    branches = mock(ProjectBranches.class);","55","    pullRequests = mock(ProjectPullRequests.class);","56","    settingsLoader = mock(SettingsLoader.class);","57","    projectKey = mock(ProjectKey.class);","58","    globalPropertiesMap = new HashMap<>();","65","    BranchConfiguration configuration = provider.provide(null, globalConfiguration, projectKey, settingsLoader, branches, pullRequests);","66","    assertThat(provider.provide(null, globalConfiguration, projectKey, settingsLoader, branches, pullRequests)).isSameAs(configuration);","73","    BranchConfiguration result = provider.provide(loader, globalConfiguration, projectKey, settingsLoader, branches, pullRequests);","80","    BranchConfiguration result = provider.provide(null, globalConfiguration, projectKey, settingsLoader, branches, pullRequests);"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/branch\/BranchConfigurationProvider.java":[{"add":["24","","27","import org.sonar.api.batch.bootstrap.ProjectDefinition;","28","import org.sonar.api.batch.bootstrap.ProjectReactor;","42","  public BranchConfiguration provide(@Nullable BranchConfigurationLoader loader, GlobalConfiguration globalConfiguration, ProjectReactor reactor,","49","        Supplier<Map<String, String>> settingsSupplier = createSettingsSupplier(globalConfiguration, reactor.getRoot(), settingsLoader);","57","  private static Supplier<Map<String, String>> createSettingsSupplier(GlobalConfiguration globalConfiguration, ProjectDefinition root, SettingsLoader settingsLoader) {","58","    \/\/ we can't get ProjectSettings because it creates a circular dependency.","59","    \/\/ We create our own settings which will only be loaded if needed.","63","      settings.putAll(settingsLoader.load(root.getKeyWithBranch()));","64","      settings.putAll(root.properties());"],"delete":["26","import org.sonar.api.batch.bootstrap.ProjectKey;","40","  public BranchConfiguration provide(@Nullable BranchConfigurationLoader loader, GlobalConfiguration globalConfiguration, ProjectKey projectKey,","47","        Supplier<Map<String, String>> settingsSupplier = createSettingsSupplier(globalConfiguration, projectKey, settingsLoader);","55","  private static Supplier<Map<String, String>> createSettingsSupplier(GlobalConfiguration globalConfiguration, ProjectKey projectKey, SettingsLoader settingsLoader) {","59","      settings.putAll(settingsLoader.load(projectKey.get()));"]}]}},"f6f52d114ec91f37716e515d6d880819ea7e96fd":{"changes":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/component\/index.html.erb":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/component\/index.html.erb":[{"add":["1","  <% if @resource %>","12","  <% end %>"],"delete":[]}]}},"4df60a42ed232f82c6c97c00296c4dbb8ac4398e":{"changes":{"\/dev\/null":"DELETE","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/RuleUpdaterTest.java":"ADD"},"diff":{"\/dev\/null":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/RuleUpdaterTest.java":[{"add":[],"delete":[]}]}},"21fbe3697bdb6e66016ef8d0bea49da574e02e7d":{"changes":{"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/global\/GlobalNav.css":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/global\/GlobalNav.css":[{"add":["77","  white-space: nowrap;"],"delete":[]}]}},"8d727d037967e6d2a3c6a998e48f3ebcee6059b0":{"changes":{"server\/sonar-process-monitor\/src\/test\/java\/org\/sonar\/process\/monitor\/JavaProcessLauncherTest.java":"MODIFY","server\/sonar-process-monitor\/src\/main\/java\/org\/sonar\/process\/monitor\/JavaProcessLauncher.java":"MODIFY"},"diff":{"server\/sonar-process-monitor\/src\/test\/java\/org\/sonar\/process\/monitor\/JavaProcessLauncherTest.java":[{"add":["24","import org.junit.rules.ExpectedException;","32","  @Rule","33","  public ExpectedException expectedException = ExpectedException.none();","40","","41","    expectedException.expect(IllegalStateException.class);","42","    expectedException.expectMessage(\"Fail to launch [es]\");","43","","44","    \/\/ command is not correct (missing options), java.lang.ProcessBuilder#start()","45","    \/\/ throws an exception","46","    launcher.launch(command);"],"delete":["27","import static org.assertj.core.api.Assertions.assertThat;","28","import static org.junit.Assert.fail;","29","","40","    try {","41","      \/\/ command is not correct (missing options), java.lang.ProcessBuilder#start()","42","      \/\/ throws an exception","43","      launcher.launch(command);","44","      fail();","45","    } catch (IllegalStateException e) {","46","      assertThat(e).hasMessage(\"Fail to launch [es]\");","47","    }"]}],"server\/sonar-process-monitor\/src\/main\/java\/org\/sonar\/process\/monitor\/JavaProcessLauncher.java":[{"add":["107","    return new File(new File(System.getProperty(\"java.home\")), \"bin\" + separator + \"java\").getAbsolutePath();","117","      propertiesFile = File.createTempFile(\"sq-process\", \"properties\", tempDir);"],"delete":["107","    return new File(new File(System.getProperty(\"java.home\")),","108","      \"bin\" + separator + \"java\").getAbsolutePath();","118","      propertiesFile = File.createTempFile(\"sq-process\", \"properties\");"]}]}},"7f8837b1ac4c2b10549be59bcb0d25fb290bb5d4":{"changes":{"server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/OAuth2AuthenticationParametersImpl.java":"MODIFY","server\/sonar-webserver-auth\/src\/test\/java\/org\/sonar\/server\/authentication\/OAuth2AuthenticationParametersImplTest.java":"MODIFY"},"diff":{"server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/OAuth2AuthenticationParametersImpl.java":[{"add":["30","import java.util.regex.Pattern;","47","  private static final Pattern VALID_RETURN_TO = Pattern.compile(\"^\/\\\\w.*\");","152","    String sanitizedUrl = url.trim();","153","    boolean isValidUrl = VALID_RETURN_TO.matcher(sanitizedUrl).matches();","154","    if (!isValidUrl) {","155","      return empty();","156","    }","157","","158","    return Optional.of(sanitizedUrl);","159","  }"],"delete":["149","    if (url.startsWith(\"\/\/\") || url.startsWith(\"\/\\\\\")) {","150","      return empty();","151","    }","152","    if (!url.startsWith(\"\/\")) {","153","      return empty();","154","    }","155","    return Optional.of(url);","156","  }"]}],"server\/sonar-webserver-auth\/src\/test\/java\/org\/sonar\/server\/authentication\/OAuth2AuthenticationParametersImplTest.java":[{"add":["21","import com.tngtech.java.junit.dataprovider.DataProvider;","22","import com.tngtech.java.junit.dataprovider.DataProviderRunner;","29","import org.junit.runner.RunWith;","39","@RunWith(DataProviderRunner.class)","99","  @DataProvider({\"http:\/\/example.com\", \"\/\\t\/example.com\", \"\/\/local_file\", \"\/\\\\local_file\", \"something_else\"})","100","  public void return_to_is_not_set_when_not_local(String url) {","101","    when(request.getParameter(\"return_to\")).thenReturn(url);"],"delete":["95","  public void return_to_is_not_set_when_not_local() {","96","    when(request.getParameter(\"return_to\")).thenReturn(\"http:\/\/external_url\");","97","    underTest.init(request, response);","98","    verify(response, never()).addCookie(any());","100","    when(request.getParameter(\"return_to\")).thenReturn(\"\/\/local_file\");","102","    verify(response, never()).addCookie(any());","104","    when(request.getParameter(\"return_to\")).thenReturn(\"\/\\\\local_file\");","105","    underTest.init(request, response);","106","    verify(response, never()).addCookie(any());","107","","108","    when(request.getParameter(\"return_to\")).thenReturn(\"something_else\");","109","    underTest.init(request, response);"]}]}},"cef2b46aa0d547dd1404fb7d01b0ee6b642276cf":{"changes":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/sensor\/DefaultSensorStorageTest.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/sensor\/DefaultSensorStorage.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/sensor\/DefaultSensorStorageTest.java":[{"add":["23","import java.util.ArrayList;","24","import java.util.List;","40","import org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage;","118","  public void should_merge_coverage() {","119","    DefaultInputFile file = new TestInputFileBuilder(\"foo\", \"src\/Foo.php\").setLines(5).build();","120","","121","    DefaultCoverage coverage = new DefaultCoverage(underTest);","122","    coverage.onFile(file).lineHits(3, 1);","123","","124","    DefaultCoverage coverage2 = new DefaultCoverage(underTest);","125","    coverage2.onFile(file).lineHits(1, 1);","126","","127","    underTest.store(coverage);","128","    underTest.store(coverage2);","129","","130","    List<ScannerReport.LineCoverage> lineCoverage = new ArrayList<>();","131","    reportReader.readComponentCoverage(file.scannerId()).forEachRemaining(lineCoverage::add);","132","    assertThat(lineCoverage).containsExactly(","133","      \/\/ should be sorted by line","134","      ScannerReport.LineCoverage.newBuilder().setLine(1).setHits(true).build(),","135","      ScannerReport.LineCoverage.newBuilder().setLine(3).setHits(true).build());","136","","137","  }","138","","139","  @Test"],"delete":[]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/sensor\/DefaultSensorStorage.java":[{"add":["27","import java.util.TreeMap;","334","    SortedMap<Integer, ScannerReport.LineCoverage.Builder> coveragePerLine = reloadExistingCoverage(inputFile);","347","  private SortedMap<Integer, ScannerReport.LineCoverage.Builder> reloadExistingCoverage(DefaultInputFile inputFile) {","348","    SortedMap<Integer, ScannerReport.LineCoverage.Builder> coveragePerLine = new TreeMap<>();","362","  private void mergeLineCoverageValues(int lineCount, SortedMap<Integer, Integer> valueByLine, SortedMap<Integer, ScannerReport.LineCoverage.Builder> coveragePerLine,"],"delete":["23","import java.util.LinkedHashMap;","334","    Map<Integer, ScannerReport.LineCoverage.Builder> coveragePerLine = reloadExistingCoverage(inputFile);","347","  private Map<Integer, ScannerReport.LineCoverage.Builder> reloadExistingCoverage(DefaultInputFile inputFile) {","348","    Map<Integer, ScannerReport.LineCoverage.Builder> coveragePerLine = new LinkedHashMap<>();","362","  private void mergeLineCoverageValues(int lineCount, SortedMap<Integer, Integer> valueByLine, Map<Integer, ScannerReport.LineCoverage.Builder> coveragePerLine,"]}]}},"05f2a1332ceae679ae8c0e13cb95bb1eb4eccd29":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/organization\/OrganizationValidation.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/organization\/OrganizationValidationImplTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/organization\/ws\/UpdateActionTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/organization\/ws\/CreateActionTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/organization\/ws\/CreateAction.java":"MODIFY","tests\/src\/test\/java\/org\/sonarqube\/tests\/organization\/OrganizationTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/organization\/OrganizationValidationImpl.java":"MODIFY","tests\/src\/test\/java\/org\/sonarqube\/tests\/organization\/PersonalOrganizationTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/organization\/OrganizationValidation.java":[{"add":["25","  int KEY_MIN_LENGTH = 1;","27","  int NAME_MIN_LENGTH = 1;"],"delete":["25","  int KEY_MIN_LENGTH = 2;","27","  int NAME_MIN_LENGTH = 2;"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/organization\/OrganizationValidationImplTest.java":[{"add":["50","    expectedException.expectMessage(\"Key must not be empty\");","56","  public void checkValidKey_throws_IAE_if_key_is_empty() {","58","    expectedException.expectMessage(\"Key must not be empty\");","60","    underTest.checkKey(\"\");","111","  public void checkValidName_throws_IAE_if_empty() {","113","    expectedException.expectMessage(\"Name must not be empty\");"],"delete":["50","    expectedException.expectMessage(\"Key '' must be at least 2 chars long\");","56","  public void checkValidKey_throws_IAE_if_arg_is_1_char_long() {","58","    expectedException.expectMessage(\"Key 'a' must be at least 2 chars long\");","60","    underTest.checkKey(\"a\");","111","  public void checkValidName_throws_IAE_if_arg_is_empty() {","113","    expectedException.expectMessage(\"Name '' must be at least 2 chars long\");","119","  public void checkValidName_throws_IAE_if_arg_is_1_char_long() {","120","    expectedException.expect(IllegalArgumentException.class);","121","    expectedException.expectMessage(\"Name 'a' must be at least 2 chars long\");","122","","123","    underTest.checkName(\"a\");","124","  }","125","","126","  @Test"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/organization\/ws\/UpdateActionTest.java":[{"add":["175","  public void request_fails_if_name_is_empty() {","179","    expectedException.expectMessage(\"Name must not be empty\");","181","    executeKeyRequest(SOME_KEY, \"\");"],"delete":["175","  public void request_fails_if_name_is_one_char_long() {","179","    expectedException.expectMessage(\"Name 'a' must be at least 2 chars long\");","181","    executeKeyRequest(SOME_KEY, \"a\");"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/organization\/ws\/CreateActionTest.java":[{"add":["31","import org.sonar.api.utils.internal.TestSystem2;","34","import org.sonar.core.util.UuidFactoryFast;","69","import static org.sonar.server.organization.ws.OrganizationsWsSupport.PARAM_KEY;","70","import static org.sonar.server.organization.ws.OrganizationsWsSupport.PARAM_NAME;","77","  private static final long NOW = 1_200_000L;","78","","79","  private System2 system2 = new TestSystem2().setNow(NOW);","92","  private MapSettings settings = new MapSettings().setProperty(ORGANIZATIONS_ANYONE_CAN_CREATE, false);","96","  private OrganizationCreation organizationCreation = new OrganizationCreationImpl(dbClient, system2, UuidFactoryFast.getInstance(), organizationValidation, settings.asConfig(),","97","    userIndexer,","101","  private WsActionTester wsTester = new WsActionTester(","102","    new CreateAction(settings.asConfig(), userSession, dbClient, new OrganizationsWsSupport(organizationValidation),","103","      organizationValidation,","104","      organizationCreation, organizationFlags));","115","    assertThat(action.handler()).isNotNull();","142","    createUserAndLogInAsSystemAdministrator();","151","  public void request_succeeds_if_user_is_system_administrator_and_logged_in_users_cannot_create_organizations() {","152","    createUserAndLogInAsSystemAdministrator();","153","    dbTester.qualityGates().insertBuiltInQualityGate();","154","","155","    verifyResponseAndDb(executeRequest(\"foo\"), \"foo\", \"foo\", NOW);","156","  }","157","","158","  @Test","159","  public void request_succeeds_if_user_is_system_administrator_and_logged_in_users_can_create_organizations() {","160","    createUserAndLogInAsSystemAdministrator();","161","    settings.setProperty(ORGANIZATIONS_ANYONE_CAN_CREATE, true);","162","    dbTester.qualityGates().insertBuiltInQualityGate();","163","","164","    verifyResponseAndDb(executeRequest(\"foo\"), \"foo\", \"foo\", NOW);","165","  }","166","","167","  @Test","168","  public void request_succeeds_if_user_is_not_system_administrator_and_logged_in_users_can_create_organizations() {","169","    UserDto user = dbTester.users().insertUser();","170","    userSession.logIn(user);","171","    settings.setProperty(ORGANIZATIONS_ANYONE_CAN_CREATE, true);","172","    dbTester.qualityGates().insertBuiltInQualityGate();","173","","174","    verifyResponseAndDb(executeRequest(\"foo\"), \"foo\", \"foo\", NOW);","175","  }","176","","177","  @Test","178","  public void request_succeeds_if_name_is_two_chars_long() {","179","    createUserAndLogInAsSystemAdministrator();","180","    dbTester.qualityGates().insertBuiltInQualityGate();","181","","182","    verifyResponseAndDb(executeRequest(\"ab\"), \"ab\", \"ab\", NOW);","183","  }","184","","185","  @Test","186","  public void request_succeeds_if_name_is_64_char_long() {","187","    createUserAndLogInAsSystemAdministrator();","188","    dbTester.qualityGates().insertBuiltInQualityGate();","189","","190","    String name = STRING_65_CHARS_LONG.substring(0, 64);","191","","192","    verifyResponseAndDb(executeRequest(name), name, name.substring(0, 32), NOW);","193","  }","194","","195","  @Test","196","  public void request_succeeds_if_key_is_2_chars_long() {","197","    createUserAndLogInAsSystemAdministrator();","198","    dbTester.qualityGates().insertBuiltInQualityGate();","199","","200","    verifyResponseAndDb(executeRequest(\"foo\", \"ab\"), \"foo\", \"ab\", NOW);","201","  }","202","","203","  @Test","204","  public void requests_succeeds_if_key_is_32_chars_long() {","205","    createUserAndLogInAsSystemAdministrator();","206","    dbTester.qualityGates().insertBuiltInQualityGate();","207","","208","    String key = STRING_65_CHARS_LONG.substring(0, 32);","209","","210","    verifyResponseAndDb(executeRequest(\"foo\", key), \"foo\", key, NOW);","211","  }","212","","213","  @Test","214","  public void request_succeeds_if_description_url_and_avatar_are_not_specified() {","215","    createUserAndLogInAsSystemAdministrator();","216","    dbTester.qualityGates().insertBuiltInQualityGate();","217","","218","    CreateWsResponse response = executeRequest(\"foo\", \"bar\", null, null, null);","219","","220","    verifyResponseAndDb(response, \"foo\", \"bar\", null, null, null, NOW);","221","  }","222","","223","  @Test","224","  public void request_succeeds_if_description_url_and_avatar_are_specified() {","225","    createUserAndLogInAsSystemAdministrator();","226","    dbTester.qualityGates().insertBuiltInQualityGate();","227","","228","    CreateWsResponse response = executeRequest(\"foo\", \"bar\", \"moo\", \"doo\", \"boo\");","229","    verifyResponseAndDb(response, \"foo\", \"bar\", \"moo\", \"doo\", \"boo\", NOW);","230","  }","231","","232","  @Test","233","  public void request_succeeds_to_generate_key_from_name_more_then_32_chars_long() {","234","    createUserAndLogInAsSystemAdministrator();","235","    dbTester.qualityGates().insertBuiltInQualityGate();","236","","237","    String name = STRING_65_CHARS_LONG.substring(0, 33);","238","","239","    CreateWsResponse response = executeRequest(name);","240","    verifyResponseAndDb(response, name, name.substring(0, 32), NOW);","241","  }","242","","243","  @Test","244","  public void request_generates_key_ignoring_multiple_following_spaces() {","245","    createUserAndLogInAsSystemAdministrator();","246","    dbTester.qualityGates().insertBuiltInQualityGate();","247","","248","    String name = \"ab   cd\";","249","","250","    CreateWsResponse response = executeRequest(name);","251","    verifyResponseAndDb(response, name, \"ab-cd\", NOW);","252","  }","253","","254","  @Test","255","  public void request_succeeds_if_description_is_256_chars_long() {","256","    createUserAndLogInAsSystemAdministrator();","257","    String description = STRING_257_CHARS_LONG.substring(0, 256);","258","    dbTester.qualityGates().insertBuiltInQualityGate();","259","","260","    CreateWsResponse response = executeRequest(\"foo\", \"bar\", description, null, null);","261","    verifyResponseAndDb(response, \"foo\", \"bar\", description, null, null, NOW);","262","  }","263","","264","  @Test","265","  public void request_succeeds_if_url_is_256_chars_long() {","266","    createUserAndLogInAsSystemAdministrator();","267","    String url = STRING_257_CHARS_LONG.substring(0, 256);","268","    dbTester.qualityGates().insertBuiltInQualityGate();","269","","270","    CreateWsResponse response = executeRequest(\"foo\", \"bar\", null, url, null);","271","    verifyResponseAndDb(response, \"foo\", \"bar\", null, url, null, NOW);","272","  }","273","","274","  @Test","275","  public void request_succeeds_if_avatar_is_256_chars_long() {","276","    createUserAndLogInAsSystemAdministrator();","277","    String avatar = STRING_257_CHARS_LONG.substring(0, 256);","278","    dbTester.qualityGates().insertBuiltInQualityGate();","279","","280","    CreateWsResponse response = executeRequest(\"foo\", \"bar\", null, null, avatar);","281","    verifyResponseAndDb(response, \"foo\", \"bar\", null, null, avatar, NOW);","282","  }","283","","284","  @Test","285","  public void request_creates_owners_group_with_all_permissions_for_new_organization_and_add_current_user_to_it() {","286","    UserDto user = dbTester.users().insertUser();","287","    userSession.logIn(user).setSystemAdministrator();","288","    dbTester.qualityGates().insertBuiltInQualityGate();","289","","290","    executeRequest(\"orgFoo\");","291","","292","    DbSession dbSession = dbTester.getSession();","293","    OrganizationDto organization = dbClient.organizationDao().selectByKey(dbSession, \"orgfoo\").get();","294","    Optional<GroupDto> groupDtoOptional = dbClient.groupDao().selectByName(dbSession, organization.getUuid(), \"Owners\");","295","    assertThat(groupDtoOptional).isNotEmpty();","296","    GroupDto groupDto = groupDtoOptional.get();","297","    assertThat(groupDto.getDescription()).isEqualTo(\"Owners of organization orgFoo\");","298","    assertThat(dbClient.groupPermissionDao().selectGlobalPermissionsOfGroup(dbSession, groupDto.getOrganizationUuid(), groupDto.getId()))","299","      .containsOnly(GlobalPermissions.ALL.toArray(new String[GlobalPermissions.ALL.size()]));","300","    List<UserMembershipDto> members = dbClient.groupMembershipDao().selectMembers(","301","      dbSession,","302","      UserMembershipQuery.builder()","303","        .organizationUuid(organization.getUuid())","304","        .groupId(groupDto.getId())","305","        .membership(UserMembershipQuery.IN).build(),","306","      0, Integer.MAX_VALUE);","307","    assertThat(members)","308","      .extracting(UserMembershipDto::getLogin)","309","      .containsOnly(user.getLogin());","310","  }","311","","312","  @Test","313","  public void request_creates_members_group_and_add_current_user_to_it() {","314","    UserDto user = dbTester.users().insertUser();","315","    userSession.logIn(user).setSystemAdministrator();","316","    dbTester.qualityGates().insertBuiltInQualityGate();","317","","318","    executeRequest(\"orgFoo\");","319","","320","    DbSession dbSession = dbTester.getSession();","321","    OrganizationDto organization = dbClient.organizationDao().selectByKey(dbSession, \"orgfoo\").get();","322","    Optional<GroupDto> groupDtoOptional = dbClient.groupDao().selectByName(dbSession, organization.getUuid(), \"Members\");","323","    assertThat(groupDtoOptional).isNotEmpty();","324","    GroupDto groupDto = groupDtoOptional.get();","325","    assertThat(groupDto.getDescription()).isEqualTo(\"All members of the organization\");","326","    assertThat(dbClient.groupPermissionDao().selectGlobalPermissionsOfGroup(dbSession, groupDto.getOrganizationUuid(), groupDto.getId())).isEmpty();","327","    List<UserMembershipDto> members = dbClient.groupMembershipDao().selectMembers(","328","      dbSession,","329","      UserMembershipQuery.builder()","330","        .organizationUuid(organization.getUuid())","331","        .groupId(groupDto.getId())","332","        .membership(UserMembershipQuery.IN).build(),","333","      0, Integer.MAX_VALUE);","334","    assertThat(members)","335","      .extracting(UserMembershipDto::getLogin)","336","      .containsOnly(user.getLogin());","337","  }","338","","339","  @Test","340","  public void request_creates_default_template_for_owner_group() {","341","    UserDto user = dbTester.users().insertUser();","342","    userSession.logIn(user).setSystemAdministrator();","343","    dbTester.qualityGates().insertBuiltInQualityGate();","344","","345","    executeRequest(\"orgFoo\");","346","","347","    OrganizationDto organization = dbClient.organizationDao().selectByKey(dbSession, \"orgfoo\").get();","348","    GroupDto ownersGroup = dbClient.groupDao().selectByName(dbSession, organization.getUuid(), \"Owners\").get();","349","    GroupDto defaultGroup = dbClient.groupDao().selectByName(dbSession, organization.getUuid(), \"Members\").get();","350","    PermissionTemplateDto defaultTemplate = dbClient.permissionTemplateDao().selectByName(dbSession, organization.getUuid(), \"default template\");","351","    assertThat(defaultTemplate.getName()).isEqualTo(\"Default template\");","352","    assertThat(defaultTemplate.getDescription()).isEqualTo(\"Default permission template of organization orgFoo\");","353","    DefaultTemplates defaultTemplates = dbClient.organizationDao().getDefaultTemplates(dbSession, organization.getUuid()).get();","354","    assertThat(defaultTemplates.getProjectUuid()).isEqualTo(defaultTemplate.getUuid());","355","    assertThat(defaultTemplates.getViewUuid()).isNull();","356","    assertThat(dbClient.permissionTemplateDao().selectGroupPermissionsByTemplateId(dbSession, defaultTemplate.getId()))","357","      .extracting(PermissionTemplateGroupDto::getGroupId, PermissionTemplateGroupDto::getPermission)","358","      .containsOnly(","359","        tuple(ownersGroup.getId(), UserRole.ADMIN), tuple(ownersGroup.getId(), UserRole.ISSUE_ADMIN), tuple(ownersGroup.getId(), GlobalPermissions.SCAN_EXECUTION),","360","        tuple(defaultGroup.getId(), UserRole.USER), tuple(defaultGroup.getId(), UserRole.CODEVIEWER));","361","  }","362","","363","  @Test","364","  public void request_set_user_as_member_of_organization() {","365","    UserDto user = dbTester.users().insertUser();","366","    userSession.logIn(user).setSystemAdministrator();","367","    dbTester.qualityGates().insertBuiltInQualityGate();","368","","369","    executeRequest(\"foo\", \"bar\");","370","","371","    OrganizationDto organization = dbClient.organizationDao().selectByKey(dbSession, \"bar\").get();","372","    assertThat(dbClient.organizationMemberDao().select(dbSession, organization.getUuid(), user.getId())).isPresent();","373","    assertThat(userIndex.getNullableByLogin(user.getLogin()).organizationUuids()).contains(organization.getUuid());","374","  }","375","","376","  @Test","377","  public void create_organization_with_name_having_one_character() {","378","    createUserAndLogInAsSystemAdministrator();","379","    dbTester.qualityGates().insertBuiltInQualityGate();","380","","381","    wsTester.newRequest()","382","      .setParam(PARAM_NAME, \"a\")","383","      .execute();","384","","385","    OrganizationDto organization = dbClient.organizationDao().selectByKey(dbTester.getSession(), \"a\").get();","386","    assertThat(organization.getKey()).isEqualTo(\"a\");","387","    assertThat(organization.getName()).isEqualTo(\"a\");","388","  }","389","","390","  @Test","391","  public void request_fails_if_name_param_is_missing() {","392","    createUserAndLogInAsSystemAdministrator();","393","","394","    expectedException.expect(IllegalArgumentException.class);","395","    expectedException.expectMessage(\"The 'name' parameter is missing\");","396","","397","    executeRequest(null);","398","  }","399","","400","  @Test","401","  public void request_fails_if_name_is_empty() {","402","    createUserAndLogInAsSystemAdministrator();","403","","404","    expectedException.expect(IllegalArgumentException.class);","405","    expectedException.expectMessage(\"Name must not be empty\");","406","","407","    wsTester.newRequest()","408","      .setParam(PARAM_NAME, \"\")","409","      .execute();","410","  }","411","","412","  @Test","413","  public void request_fails_if_name_is_65_chars_long() {","414","    createUserAndLogInAsSystemAdministrator();","415","","416","    expectedException.expect(IllegalArgumentException.class);","417","    expectedException.expectMessage(\"'name' length (65) is longer than the maximum authorized (64)\");","418","","419","    executeRequest(STRING_65_CHARS_LONG);","420","  }","421","","422","  @Test","423","  public void request_fails_if_key_is_33_chars_long() {","424","    createUserAndLogInAsSystemAdministrator();","425","","426","    String key = STRING_65_CHARS_LONG.substring(0, 33);","427","","428","    expectedException.expect(IllegalArgumentException.class);","429","    expectedException.expectMessage(\"'key' length (33) is longer than the maximum authorized (32)\");","430","","431","    executeRequest(\"foo\", key);","432","  }","433","","434","  @Test","435","  public void requests_fails_if_key_contains_non_ascii_chars_but_dash() {","436","    createUserAndLogInAsSystemAdministrator();","437","","438","    expectedException.expect(IllegalArgumentException.class);","439","    expectedException.expectMessage(\"Key '\" + \"ab@\" + \"' contains at least one invalid char\");","440","","441","    executeRequest(\"foo\", \"ab@\");","442","  }","443","","444","  @Test","445","  public void request_fails_if_key_starts_with_a_dash() {","446","    createUserAndLogInAsSystemAdministrator();","447","","448","    expectedException.expect(IllegalArgumentException.class);","449","    expectedException.expectMessage(\"Key '\" + \"-ab\" + \"' contains at least one invalid char\");","450","","451","    executeRequest(\"foo\", \"-ab\");","452","  }","453","","454","  @Test","455","  public void request_fails_if_key_ends_with_a_dash() {","456","    createUserAndLogInAsSystemAdministrator();","457","","458","    expectedException.expect(IllegalArgumentException.class);","459","    expectedException.expectMessage(\"Key '\" + \"ab-\" + \"' contains at least one invalid char\");","460","","461","    executeRequest(\"foo\", \"ab-\");","462","  }","463","","464","  @Test","465","  public void request_fails_if_key_contains_space() {","466","    createUserAndLogInAsSystemAdministrator();","467","","468","    expectedException.expect(IllegalArgumentException.class);","469","    expectedException.expectMessage(\"Key '\" + \"a b\" + \"' contains at least one invalid char\");","470","","471","    executeRequest(\"foo\", \"a b\");","472","  }","473","","474","  @Test","475","  public void request_fails_if_key_is_empty() {","476","    createUserAndLogInAsSystemAdministrator();","477","","478","    expectedException.expect(IllegalArgumentException.class);","479","    expectedException.expectMessage(\"Key must not be empty\");","480","","481","    wsTester.newRequest()","482","      .setParam(PARAM_KEY, \"\")","483","      .setParam(PARAM_NAME, \"foo\")","484","      .execute();","485","  }","486","","487","  @Test","488","  public void request_fails_if_key_is_specified_and_already_exists_in_DB() {","489","    createUserAndLogInAsSystemAdministrator();","490","    OrganizationDto org = dbTester.organizations().insert(o -> o.setKey(\"the-key\"));","491","","492","    expectedException.expect(IllegalArgumentException.class);","493","    expectedException.expectMessage(\"Key '\" + org.getKey() + \"' is already used. Specify another one.\");","494","","495","    executeRequest(\"foo\", org.getKey());","496","  }","497","","498","  @Test","499","  public void request_fails_if_key_computed_from_name_already_exists_in_DB() {","500","    createUserAndLogInAsSystemAdministrator();","501","    String key = STRING_65_CHARS_LONG.substring(0, 32);","502","    dbTester.organizations().insert(o -> o.setKey(key));","503","    String name = STRING_65_CHARS_LONG.substring(0, 64);","504","","505","    expectedException.expect(IllegalArgumentException.class);","506","    expectedException.expectMessage(\"Key '\" + key + \"' generated from name '\" + name + \"' is already used. Specify one.\");","507","","508","    executeRequest(name);","509","  }","510","","511","  @Test","512","  public void request_fails_if_url_is_257_chars_long() {","513","    createUserAndLogInAsSystemAdministrator();","514","","515","    expectedException.expect(IllegalArgumentException.class);","516","    expectedException.expectMessage(\"'url' length (257) is longer than the maximum authorized (256)\");","517","","518","    executeRequest(\"foo\", \"bar\", null, STRING_257_CHARS_LONG, null);","519","  }","520","","521","  @Test","522","  public void request_fails_if_description_is_257_chars_long() {","523","    createUserAndLogInAsSystemAdministrator();","524","","525","    expectedException.expect(IllegalArgumentException.class);","526","    expectedException.expectMessage(\"'description' length (257) is longer than the maximum authorized (256)\");","527","","528","    executeRequest(\"foo\", \"bar\", STRING_257_CHARS_LONG, null, null);","529","  }","530","","531","  @Test","532","  public void request_fails_if_avatar_is_257_chars_long() {","533","    createUserAndLogInAsSystemAdministrator();","534","","535","    expectedException.expect(IllegalArgumentException.class);","536","    expectedException.expectMessage(\"'avatar' length (257) is longer than the maximum authorized (256)\");","537","","538","    executeRequest(\"foo\", \"bar\", null, null, STRING_257_CHARS_LONG);","539","  }","540","","541","  @Test","575","    createUserAndLogInAsSystemAdministrator();","613","  private void verifyResponseAndDb(CreateWsResponse response, String name, String key, long createdAt) {","614","    verifyResponseAndDb(response, name, key, null, null, null, createdAt);","617","  private void verifyResponseAndDb(CreateWsResponse response, String name, String key, @Nullable String description, @Nullable String url, @Nullable String avatar,","618","    long createdAt) {","638","    OrganizationDto dto = dbClient.organizationDao().selectByKey(dbTester.getSession(), key).get();","639","    assertThat(dto.getUuid()).isNotNull();","649","  private void createUserAndLogInAsSystemAdministrator() {","650","    UserDto user = dbTester.users().insertUser();","651","    userIndexer.indexOnStartup(new HashSet<>());"],"delete":["25","import org.junit.Before;","34","import org.sonar.core.util.UuidFactory;","35","import org.sonar.core.util.Uuids;","69","import static org.mockito.Mockito.when;","76","  private static final String SOME_UUID = \"uuid\";","77","  private static final long SOME_DATE = 1_200_000L;","79","  private System2 system2 = mock(System2.class);","92","  private MapSettings settings = new MapSettings()","93","    .setProperty(ORGANIZATIONS_ANYONE_CAN_CREATE, false);","94","  private UuidFactory uuidFactory = mock(UuidFactory.class);","98","  private OrganizationCreation organizationCreation = new OrganizationCreationImpl(dbClient, system2, uuidFactory, organizationValidation, settings.asConfig(), userIndexer,","102","  private UserDto user;","103","","104","  private CreateAction underTest = new CreateAction(settings.asConfig(), userSession, dbClient, new OrganizationsWsSupport(organizationValidation), organizationValidation,","105","    organizationCreation, organizationFlags);","106","","107","  private WsActionTester wsTester = new WsActionTester(underTest);","108","","109","  @Before","110","  public void setUp() {","111","    user = dbTester.users().insertUser();","112","    userIndexer.indexOnStartup(new HashSet<>());","113","    userSession.logIn(user);","114","  }","125","    assertThat(action.handler()).isEqualTo(underTest);","152","    logInAsSystemAdministrator();","153","    mockForSuccessfulInsert(Uuids.UUID_EXAMPLE_01, SOME_DATE);","193","  public void request_succeeds_if_user_is_system_administrator_and_logged_in_users_cannot_create_organizations() {","194","    logInAsSystemAdministrator();","195","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","196","    dbTester.qualityGates().insertBuiltInQualityGate();","197","","198","    verifyResponseAndDb(executeRequest(\"foo\"), SOME_UUID, \"foo\", \"foo\", SOME_DATE);","199","  }","200","","201","  @Test","202","  public void request_succeeds_if_user_is_system_administrator_and_logged_in_users_can_create_organizations() {","203","    logInAsSystemAdministrator();","204","    settings.setProperty(ORGANIZATIONS_ANYONE_CAN_CREATE, true);","205","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","206","    dbTester.qualityGates().insertBuiltInQualityGate();","207","","208","    verifyResponseAndDb(executeRequest(\"foo\"), SOME_UUID, \"foo\", \"foo\", SOME_DATE);","209","  }","210","","211","  @Test","212","  public void request_succeeds_if_user_is_not_system_administrator_and_logged_in_users_can_create_organizations() {","213","    userSession.logIn(user);","214","    settings.setProperty(ORGANIZATIONS_ANYONE_CAN_CREATE, true);","215","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","216","    dbTester.qualityGates().insertBuiltInQualityGate();","217","","218","    verifyResponseAndDb(executeRequest(\"foo\"), SOME_UUID, \"foo\", \"foo\", SOME_DATE);","219","  }","220","","221","  @Test","222","  public void request_fails_if_name_param_is_missing() {","223","    logInAsSystemAdministrator();","224","","225","    expectedException.expect(IllegalArgumentException.class);","226","    expectedException.expectMessage(\"The 'name' parameter is missing\");","227","","228","    executeRequest(null);","229","  }","230","","231","  @Test","232","  public void request_fails_if_name_is_one_char_long() {","233","    logInAsSystemAdministrator();","234","","235","    expectedException.expect(IllegalArgumentException.class);","236","    expectedException.expectMessage(\"Name 'a' must be at least 2 chars long\");","237","","238","    executeRequest(\"a\");","239","  }","240","","241","  @Test","242","  public void request_succeeds_if_name_is_two_chars_long() {","243","    logInAsSystemAdministrator();","244","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","245","    dbTester.qualityGates().insertBuiltInQualityGate();","246","","247","    verifyResponseAndDb(executeRequest(\"ab\"), SOME_UUID, \"ab\", \"ab\", SOME_DATE);","248","  }","249","","250","  @Test","251","  public void request_fails_if_name_is_65_chars_long() {","252","    logInAsSystemAdministrator();","253","","254","    expectedException.expect(IllegalArgumentException.class);","255","    expectedException.expectMessage(\"'name' length (65) is longer than the maximum authorized (64)\");","256","","257","    executeRequest(STRING_65_CHARS_LONG);","258","  }","259","","260","  @Test","261","  public void request_succeeds_if_name_is_64_char_long() {","262","    logInAsSystemAdministrator();","263","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","264","    dbTester.qualityGates().insertBuiltInQualityGate();","265","","266","    String name = STRING_65_CHARS_LONG.substring(0, 64);","267","","268","    verifyResponseAndDb(executeRequest(name), SOME_UUID, name, name.substring(0, 32), SOME_DATE);","269","  }","270","","271","  @Test","272","  public void request_fails_if_key_one_char_long() {","273","    logInAsSystemAdministrator();","274","","275","    expectedException.expect(IllegalArgumentException.class);","276","    expectedException.expectMessage(\"Key 'a' must be at least 2 chars long\");","277","","278","    executeRequest(\"foo\", \"a\");","279","  }","280","","281","  @Test","282","  public void request_fails_if_key_is_33_chars_long() {","283","    logInAsSystemAdministrator();","284","","285","    String key = STRING_65_CHARS_LONG.substring(0, 33);","286","","287","    expectedException.expect(IllegalArgumentException.class);","288","    expectedException.expectMessage(\"'key' length (33) is longer than the maximum authorized (32)\");","289","","290","    executeRequest(\"foo\", key);","291","  }","292","","293","  @Test","294","  public void request_succeeds_if_key_is_2_chars_long() {","295","    logInAsSystemAdministrator();","296","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","297","    dbTester.qualityGates().insertBuiltInQualityGate();","298","","299","    verifyResponseAndDb(executeRequest(\"foo\", \"ab\"), SOME_UUID, \"foo\", \"ab\", SOME_DATE);","300","  }","301","","302","  @Test","303","  public void requests_succeeds_if_key_is_32_chars_long() {","304","    logInAsSystemAdministrator();","305","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","306","    dbTester.qualityGates().insertBuiltInQualityGate();","307","","308","    String key = STRING_65_CHARS_LONG.substring(0, 32);","309","","310","    verifyResponseAndDb(executeRequest(\"foo\", key), SOME_UUID, \"foo\", key, SOME_DATE);","311","  }","312","","313","  @Test","314","  public void requests_fails_if_key_contains_non_ascii_chars_but_dash() {","315","    logInAsSystemAdministrator();","316","","317","    requestFailsWithInvalidCharInKey(\"ab@\");","318","  }","319","","320","  @Test","321","  public void request_fails_if_key_starts_with_a_dash() {","322","    logInAsSystemAdministrator();","323","","324","    requestFailsWithInvalidCharInKey(\"-ab\");","325","  }","326","","327","  @Test","328","  public void request_fails_if_key_ends_with_a_dash() {","329","    logInAsSystemAdministrator();","330","","331","    requestFailsWithInvalidCharInKey(\"ab-\");","332","  }","333","","334","  @Test","335","  public void request_fails_if_key_contains_space() {","336","    logInAsSystemAdministrator();","337","","338","    requestFailsWithInvalidCharInKey(\"a b\");","339","  }","340","","341","  private void requestFailsWithInvalidCharInKey(String key) {","342","    expectedException.expect(IllegalArgumentException.class);","343","    expectedException.expectMessage(\"Key '\" + key + \"' contains at least one invalid char\");","344","","345","    executeRequest(\"foo\", key);","346","  }","347","","348","  @Test","349","  public void request_fails_if_key_is_specified_and_already_exists_in_DB() {","350","    logInAsSystemAdministrator();","351","    OrganizationDto org = dbTester.organizations().insert(o -> o.setKey(\"the-key\"));","352","","353","    expectedException.expect(IllegalArgumentException.class);","354","    expectedException.expectMessage(\"Key '\" + org.getKey() + \"' is already used. Specify another one.\");","355","","356","    executeRequest(\"foo\", org.getKey());","357","  }","358","","359","  @Test","360","  public void request_fails_if_key_computed_from_name_already_exists_in_DB() {","361","    logInAsSystemAdministrator();","362","    String key = STRING_65_CHARS_LONG.substring(0, 32);","363","    dbTester.organizations().insert(o -> o.setKey(key));","364","","365","    String name = STRING_65_CHARS_LONG.substring(0, 64);","366","","367","    expectedException.expect(IllegalArgumentException.class);","368","    expectedException.expectMessage(\"Key '\" + key + \"' generated from name '\" + name + \"' is already used. Specify one.\");","369","","370","    executeRequest(name);","371","  }","372","","373","  @Test","374","  public void request_succeeds_if_description_url_and_avatar_are_not_specified() {","375","    logInAsSystemAdministrator();","376","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","377","    dbTester.qualityGates().insertBuiltInQualityGate();","378","","379","    CreateWsResponse response = executeRequest(\"foo\", \"bar\", null, null, null);","380","    verifyResponseAndDb(response, SOME_UUID, \"foo\", \"bar\", null, null, null, SOME_DATE);","381","  }","382","","383","  @Test","384","  public void request_succeeds_if_description_url_and_avatar_are_specified() {","385","    logInAsSystemAdministrator();","386","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","387","    dbTester.qualityGates().insertBuiltInQualityGate();","388","","389","    CreateWsResponse response = executeRequest(\"foo\", \"bar\", \"moo\", \"doo\", \"boo\");","390","    verifyResponseAndDb(response, SOME_UUID, \"foo\", \"bar\", \"moo\", \"doo\", \"boo\", SOME_DATE);","391","  }","392","","393","  @Test","394","  public void request_succeeds_to_generate_key_from_name_more_then_32_chars_long() {","395","    logInAsSystemAdministrator();","396","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","397","    dbTester.qualityGates().insertBuiltInQualityGate();","398","","399","    String name = STRING_65_CHARS_LONG.substring(0, 33);","400","","401","    CreateWsResponse response = executeRequest(name);","402","    verifyResponseAndDb(response, SOME_UUID, name, name.substring(0, 32), SOME_DATE);","403","  }","404","","405","  @Test","406","  public void request_generates_key_ignoring_multiple_following_spaces() {","407","    logInAsSystemAdministrator();","408","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","409","    dbTester.qualityGates().insertBuiltInQualityGate();","410","","411","    String name = \"ab   cd\";","412","","413","    CreateWsResponse response = executeRequest(name);","414","    verifyResponseAndDb(response, SOME_UUID, name, \"ab-cd\", SOME_DATE);","415","  }","416","","417","  @Test","418","  public void request_fails_if_description_is_257_chars_long() {","419","    logInAsSystemAdministrator();","420","","421","    expectedException.expect(IllegalArgumentException.class);","422","    expectedException.expectMessage(\"'description' length (257) is longer than the maximum authorized (256)\");","423","","424","    executeRequest(\"foo\", \"bar\", STRING_257_CHARS_LONG, null, null);","425","  }","426","","427","  @Test","428","  public void request_succeeds_if_description_is_256_chars_long() {","429","    logInAsSystemAdministrator();","430","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","431","    String description = STRING_257_CHARS_LONG.substring(0, 256);","432","    dbTester.qualityGates().insertBuiltInQualityGate();","433","","434","    CreateWsResponse response = executeRequest(\"foo\", \"bar\", description, null, null);","435","    verifyResponseAndDb(response, SOME_UUID, \"foo\", \"bar\", description, null, null, SOME_DATE);","436","  }","437","","438","  @Test","439","  public void request_fails_if_url_is_257_chars_long() {","440","    logInAsSystemAdministrator();","441","","442","    expectedException.expect(IllegalArgumentException.class);","443","    expectedException.expectMessage(\"'url' length (257) is longer than the maximum authorized (256)\");","444","","445","    executeRequest(\"foo\", \"bar\", null, STRING_257_CHARS_LONG, null);","446","  }","447","","448","  @Test","449","  public void request_succeeds_if_url_is_256_chars_long() {","450","    logInAsSystemAdministrator();","451","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","452","    String url = STRING_257_CHARS_LONG.substring(0, 256);","453","    dbTester.qualityGates().insertBuiltInQualityGate();","454","","455","    CreateWsResponse response = executeRequest(\"foo\", \"bar\", null, url, null);","456","    verifyResponseAndDb(response, SOME_UUID, \"foo\", \"bar\", null, url, null, SOME_DATE);","457","  }","458","","459","  @Test","460","  public void request_fails_if_avatar_is_257_chars_long() {","461","    logInAsSystemAdministrator();","462","","463","    expectedException.expect(IllegalArgumentException.class);","464","    expectedException.expectMessage(\"'avatar' length (257) is longer than the maximum authorized (256)\");","465","","466","    executeRequest(\"foo\", \"bar\", null, null, STRING_257_CHARS_LONG);","467","  }","468","","469","  @Test","470","  public void request_succeeds_if_avatar_is_256_chars_long() {","471","    logInAsSystemAdministrator();","472","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","473","    String avatar = STRING_257_CHARS_LONG.substring(0, 256);","474","    dbTester.qualityGates().insertBuiltInQualityGate();","475","","476","    CreateWsResponse response = executeRequest(\"foo\", \"bar\", null, null, avatar);","477","    verifyResponseAndDb(response, SOME_UUID, \"foo\", \"bar\", null, null, avatar, SOME_DATE);","478","  }","479","","480","  @Test","481","  public void request_creates_owners_group_with_all_permissions_for_new_organization_and_add_current_user_to_it() {","482","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","483","    UserDto user = dbTester.users().insertUser();","484","    userSession.logIn(user).setSystemAdministrator();","485","    dbTester.qualityGates().insertBuiltInQualityGate();","486","","487","    executeRequest(\"orgFoo\");","488","","489","    DbSession dbSession = dbTester.getSession();","490","    OrganizationDto organization = dbClient.organizationDao().selectByKey(dbSession, \"orgfoo\").get();","491","    Optional<GroupDto> groupDtoOptional = dbClient.groupDao().selectByName(dbSession, organization.getUuid(), \"Owners\");","492","    assertThat(groupDtoOptional).isNotEmpty();","493","    GroupDto groupDto = groupDtoOptional.get();","494","    assertThat(groupDto.getDescription()).isEqualTo(\"Owners of organization orgFoo\");","495","    assertThat(dbClient.groupPermissionDao().selectGlobalPermissionsOfGroup(dbSession, groupDto.getOrganizationUuid(), groupDto.getId()))","496","      .containsOnly(GlobalPermissions.ALL.toArray(new String[GlobalPermissions.ALL.size()]));","497","    List<UserMembershipDto> members = dbClient.groupMembershipDao().selectMembers(","498","      dbSession,","499","      UserMembershipQuery.builder()","500","        .organizationUuid(organization.getUuid())","501","        .groupId(groupDto.getId())","502","        .membership(UserMembershipQuery.IN).build(),","503","      0, Integer.MAX_VALUE);","504","    assertThat(members)","505","      .extracting(UserMembershipDto::getLogin)","506","      .containsOnly(user.getLogin());","507","  }","508","","509","  @Test","510","  public void request_creates_members_group_and_add_current_user_to_it() {","511","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","512","    UserDto user = dbTester.users().insertUser();","513","    userSession.logIn(user).setSystemAdministrator();","514","    dbTester.qualityGates().insertBuiltInQualityGate();","515","","516","    executeRequest(\"orgFoo\");","517","","518","    DbSession dbSession = dbTester.getSession();","519","    OrganizationDto organization = dbClient.organizationDao().selectByKey(dbSession, \"orgfoo\").get();","520","    Optional<GroupDto> groupDtoOptional = dbClient.groupDao().selectByName(dbSession, organization.getUuid(), \"Members\");","521","    assertThat(groupDtoOptional).isNotEmpty();","522","    GroupDto groupDto = groupDtoOptional.get();","523","    assertThat(groupDto.getDescription()).isEqualTo(\"All members of the organization\");","524","    assertThat(dbClient.groupPermissionDao().selectGlobalPermissionsOfGroup(dbSession, groupDto.getOrganizationUuid(), groupDto.getId())).isEmpty();","525","    List<UserMembershipDto> members = dbClient.groupMembershipDao().selectMembers(","526","      dbSession,","527","      UserMembershipQuery.builder()","528","        .organizationUuid(organization.getUuid())","529","        .groupId(groupDto.getId())","530","        .membership(UserMembershipQuery.IN).build(),","531","      0, Integer.MAX_VALUE);","532","    assertThat(members)","533","      .extracting(UserMembershipDto::getLogin)","534","      .containsOnly(user.getLogin());","535","  }","536","","537","  @Test","538","  public void request_creates_default_template_for_owner_group() {","539","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","540","    UserDto user = dbTester.users().insertUser();","541","    userSession.logIn(user).setSystemAdministrator();","542","    dbTester.qualityGates().insertBuiltInQualityGate();","543","","544","    executeRequest(\"orgFoo\");","545","","546","    OrganizationDto organization = dbClient.organizationDao().selectByKey(dbSession, \"orgfoo\").get();","547","    GroupDto ownersGroup = dbClient.groupDao().selectByName(dbSession, organization.getUuid(), \"Owners\").get();","548","    GroupDto defaultGroup = dbClient.groupDao().selectByName(dbSession, organization.getUuid(), \"Members\").get();","549","    PermissionTemplateDto defaultTemplate = dbClient.permissionTemplateDao().selectByName(dbSession, organization.getUuid(), \"default template\");","550","    assertThat(defaultTemplate.getName()).isEqualTo(\"Default template\");","551","    assertThat(defaultTemplate.getDescription()).isEqualTo(\"Default permission template of organization orgFoo\");","552","    DefaultTemplates defaultTemplates = dbClient.organizationDao().getDefaultTemplates(dbSession, organization.getUuid()).get();","553","    assertThat(defaultTemplates.getProjectUuid()).isEqualTo(defaultTemplate.getUuid());","554","    assertThat(defaultTemplates.getViewUuid()).isNull();","555","    assertThat(dbClient.permissionTemplateDao().selectGroupPermissionsByTemplateId(dbSession, defaultTemplate.getId()))","556","      .extracting(PermissionTemplateGroupDto::getGroupId, PermissionTemplateGroupDto::getPermission)","557","      .containsOnly(","558","        tuple(ownersGroup.getId(), UserRole.ADMIN), tuple(ownersGroup.getId(), UserRole.ISSUE_ADMIN), tuple(ownersGroup.getId(), GlobalPermissions.SCAN_EXECUTION),","559","        tuple(defaultGroup.getId(), UserRole.USER), tuple(defaultGroup.getId(), UserRole.CODEVIEWER));","560","  }","561","","562","  @Test","563","  public void request_set_user_as_member_of_organization() {","564","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","565","    UserDto user = dbTester.users().insertUser();","566","    userSession.logIn(user).setSystemAdministrator();","567","    dbTester.qualityGates().insertBuiltInQualityGate();","568","","569","    executeRequest(\"orgFoo\");","570","","571","    assertThat(dbClient.organizationMemberDao().select(dbSession, SOME_UUID, user.getId())).isPresent();","572","    assertThat(userIndex.getNullableByLogin(user.getLogin()).organizationUuids()).contains(SOME_UUID);","573","  }","574","","575","  @Test","578","    logInAsSystemAdministrator();","586","  private void mockForSuccessfulInsert(String uuid, long now) {","587","    when(uuidFactory.create()).thenReturn(uuid);","588","    when(system2.now()).thenReturn(now);","589","  }","590","","621","  private void verifyResponseAndDb(CreateWsResponse response,","622","                                   String uuid, String name, String key,","623","                                   long createdAt) {","624","    verifyResponseAndDb(response, uuid, name, key, null, null, null, createdAt);","627","  private void verifyResponseAndDb(CreateWsResponse response,","628","                                   String id, String name, String key,","629","                                   @Nullable String description, @Nullable String url, @Nullable String avatar,","630","                                   long createdAt) {","650","    OrganizationDto dto = dbClient.organizationDao().selectByUuid(dbTester.getSession(), id).get();","651","    assertThat(dto.getUuid()).isEqualTo(id);","661","  private void logInAsSystemAdministrator() {"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/organization\/ws\/CreateAction.java":[{"add":["24","import org.sonar.api.server.ws.Change;","76","      .setChangelog(new Change(\"7.2\", \"Minimal number of character of name and key is one character\"))","85","        \"Otherwise, it must be between 1 and 32 chars long. All chars must be lower-case letters (a to z), digits or dash (but dash can neither be trailing nor heading)\")"],"delete":["83","        \"Otherwise, it must be between 2 and 32 chars long. All chars must be lower-case letters (a to z), digits or dash (but dash can neither be trailing nor heading)\")"]}],"tests\/src\/test\/java\/org\/sonarqube\/tests\/organization\/OrganizationTest.java":[{"add":["32","import org.sonarqube.ws.Organizations;","194","    User user = tester.users().generateMember(organization);","195","    tester.wsClient().permissions().addUser(new AddUserRequest().setLogin(user.getLogin()).setOrganization(organization.getKey()).setPermission(\"provisioning\"));","196","    tester.wsClient().permissions().addUser(new AddUserRequest().setLogin(user.getLogin()).setOrganization(organization.getKey()).setPermission(\"scan\"));","284","  @Test","285","  public void create_organization_having_name_of_one_character() {","286","    tester.organizations().generate(o -> o.setName(\"A\"));","287","","288","    Organizations.SearchWsResponse search = tester.organizations().service().search(new SearchRequest());","289","","290","    assertThat(search.getOrganizationsList())","291","      .extracting(Organization::getName).contains(\"A\");","292","  }","293",""],"delete":["45","import org.sonarqube.ws.client.permissions.PermissionsService;","194","    User user = tester.users().generate();","195","    Group group = tester.groups().generate(organization);","196","    \/\/ users.removeGroups(\"sonar-users\");","197","    tester.organizations().service().addMember(new AddMemberRequest().setOrganization(organization.getKey()).setLogin(user.getLogin()));","198","    addPermissionsToUser(organization.getKey(), user.getLogin(), \"provisioning\", \"scan\");","231","  private void addPermissionsToUser(String orgKeyAndName, String login, String permission, String... otherPermissions) {","232","    PermissionsService permissionsService = tester.wsClient().permissions();","233","    permissionsService.addUser(new AddUserRequest().setLogin(login).setOrganization(orgKeyAndName).setPermission(permission));","234","    for (String otherPermission : otherPermissions) {","235","      permissionsService.addUser(new AddUserRequest().setLogin(login).setOrganization(orgKeyAndName).setPermission(otherPermission));","236","    }","237","  }","238",""]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/organization\/OrganizationValidationImpl.java":[{"add":["34","    checkArgument(keyCandidate.length() >= KEY_MIN_LENGTH, \"Key must not be empty\");","45","    checkArgument(nameCandidate.length() >= NAME_MIN_LENGTH, \"Name must not be empty\");"],"delete":["34","    checkArgument(keyCandidate.length() >= KEY_MIN_LENGTH, \"Key '%s' must be at least %s chars long\", keyCandidate, KEY_MIN_LENGTH);","45","    checkArgument(nameCandidate.length() >= NAME_MIN_LENGTH, \"Name '%s' must be at least %s chars long\", nameCandidate, NAME_MIN_LENGTH);"]}],"tests\/src\/test\/java\/org\/sonarqube\/tests\/organization\/PersonalOrganizationTest.java":[{"add":["23","import org.assertj.core.api.Java6Assertions;","34","import static org.assertj.core.api.Java6Assertions.tuple;","46","    tester.settings().setGlobalSettings(\"sonar.organizations.createPersonalOrg\", \"true\");","62","","63","  @Test","64","  public void create_personal_for_user_having_one_character_size_name() {","65","    tester.users().generate(u -> u.setName(\"A\"));","66","","67","    List<Organizations.Organization> organizations = tester.organizations().service().search(new SearchRequest()).getOrganizationsList();","68","    Java6Assertions.assertThat(organizations)","69","      .extracting(Organizations.Organization::getName, Organizations.Organization::getGuarded)","70","      .contains(tuple(\"A\", true));","71","  }"],"delete":["36","  private static final String SETTING_CREATE_PERSONAL_ORG = \"sonar.organizations.createPersonalOrg\";","37","","46","    tester.settings().setGlobalSettings(SETTING_CREATE_PERSONAL_ORG, \"true\");"]}]}},"fbdba9e77ae6162ca628895002fb513ee7f093fd":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/utils-test.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/ComponentSourceSnippetViewer.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/SnippetViewer.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/utils.ts":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/utils-test.ts":[{"add":["84","    const locations = [","85","      mockFlowLocation({","86","        textRange: { startLine: 16, startOffset: 10, endLine: 16, endOffset: 14 }","87","      }),","88","      mockFlowLocation({","89","        textRange: { startLine: 19, startOffset: 2, endLine: 19, endOffset: 3 }","90","      })","91","    ];","92","    const results = createSnippets({","93","      locations,","94","      issue: mockIssue(false, locations[1]),","95","      addIssueLocation: false","96","    });","99","    expect(results[0]).toEqual({ index: 0, start: 14, end: 28 });","103","    const locations = [","104","      mockFlowLocation({","105","        textRange: { startLine: 16, startOffset: 10, endLine: 16, endOffset: 14 }","106","      }),","107","      mockFlowLocation({","108","        textRange: { startLine: 47, startOffset: 2, endLine: 47, endOffset: 3 }","109","      }),","110","      mockFlowLocation({","111","        textRange: { startLine: 14, startOffset: 2, endLine: 14, endOffset: 3 }","112","      })","113","    ];","114","    const results = createSnippets({","115","      locations,","116","      issue: mockIssue(false, locations[2]),","117","      addIssueLocation: false","118","    });","121","    expect(results[0]).toEqual({ index: 0, start: 12, end: 23 });","126","    const locations = [","127","      mockFlowLocation({","128","        textRange: { startLine: 16, startOffset: 10, endLine: 16, endOffset: 14 }","129","      }),","130","      mockFlowLocation({","131","        textRange: { startLine: 47, startOffset: 2, endLine: 47, endOffset: 3 }","132","      }),","133","      mockFlowLocation({","134","        textRange: { startLine: 23, startOffset: 2, endLine: 23, endOffset: 3 }","135","      }),","136","      mockFlowLocation({","137","        textRange: { startLine: 18, startOffset: 2, endLine: 18, endOffset: 3 }","138","      })","139","    ];","140","    const results = createSnippets({","141","      locations,","142","      issue: mockIssue(false, locations[0]),","143","      addIssueLocation: false","144","    });","147","    expect(results[0]).toEqual({ index: 0, start: 14, end: 25 });","152","    const locations = [","153","      mockFlowLocation({","154","        textRange: { startLine: 47, startOffset: 2, endLine: 47, endOffset: 3 }","155","      }),","156","      mockFlowLocation({","157","        textRange: { startLine: 22, startOffset: 2, endLine: 22, endOffset: 3 }","158","      })","159","    ];","160","    const results = createSnippets({","161","      locations,","162","      issue: mockIssue(false, {","163","        textRange: { startLine: 5, endLine: 5, startOffset: 0, endOffset: 0 }","164","      }),","165","      addIssueLocation: true","166","    });","173","    const locations = [","174","      mockFlowLocation({","175","        textRange: { startLine: 16, startOffset: 10, endLine: 16, endOffset: 14 }","176","      }),","177","      mockFlowLocation({","178","        textRange: { startLine: 19, startOffset: 2, endLine: 19, endOffset: 3 }","179","      })","180","    ];","181","    const results = createSnippets({","182","      locations,","183","      issue: mockIssue(false, locations[1]),","184","      addIssueLocation: false","185","    });"],"delete":["84","    const results = createSnippets(","85","      [","86","        mockFlowLocation({","87","          textRange: { startLine: 16, startOffset: 10, endLine: 16, endOffset: 14 }","88","        }),","89","        mockFlowLocation({","90","          textRange: { startLine: 19, startOffset: 2, endLine: 19, endOffset: 3 }","91","        })","92","      ],","93","      false","94","    );","97","    expect(results[0]).toEqual({ index: 0, start: 14, end: 21 });","101","    const results = createSnippets(","102","      [","103","        mockFlowLocation({","104","          textRange: { startLine: 16, startOffset: 10, endLine: 16, endOffset: 14 }","105","        }),","106","        mockFlowLocation({","107","          textRange: { startLine: 47, startOffset: 2, endLine: 47, endOffset: 3 }","108","        }),","109","        mockFlowLocation({","110","          textRange: { startLine: 14, startOffset: 2, endLine: 14, endOffset: 3 }","111","        })","112","      ],","113","      false","114","    );","117","    expect(results[0]).toEqual({ index: 0, start: 12, end: 18 });","122","    const results = createSnippets(","123","      [","124","        mockFlowLocation({","125","          textRange: { startLine: 16, startOffset: 10, endLine: 16, endOffset: 14 }","126","        }),","127","        mockFlowLocation({","128","          textRange: { startLine: 47, startOffset: 2, endLine: 47, endOffset: 3 }","129","        }),","130","        mockFlowLocation({","131","          textRange: { startLine: 22, startOffset: 2, endLine: 22, endOffset: 3 }","132","        }),","133","        mockFlowLocation({","134","          textRange: { startLine: 18, startOffset: 2, endLine: 18, endOffset: 3 }","135","        })","136","      ],","137","      false","138","    );","141","    expect(results[0]).toEqual({ index: 0, start: 14, end: 24 });","146","    const results = createSnippets(","147","      [","148","        mockFlowLocation({","149","          textRange: { startLine: 47, startOffset: 2, endLine: 47, endOffset: 3 }","150","        }),","151","        mockFlowLocation({","152","          textRange: { startLine: 22, startOffset: 2, endLine: 22, endOffset: 3 }","153","        })","154","      ],","155","      false,","156","      mockIssue(false, { textRange: { startLine: 5, endLine: 5, startOffset: 0, endOffset: 0 } })","157","    );","164","    const results = createSnippets(","165","      [","166","        mockFlowLocation({","167","          textRange: { startLine: 16, startOffset: 10, endLine: 16, endOffset: 14 }","168","        }),","169","        mockFlowLocation({","170","          textRange: { startLine: 19, startOffset: 2, endLine: 19, endOffset: 3 }","171","        })","172","      ],","173","      true","174","    );"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/ComponentSourceSnippetViewer.tsx":[{"add":["89","    const snippets = createSnippets({","90","      locations: this.props.snippetGroup.locations,","91","      issue: this.props.issue,","92","      addIssueLocation: this.props.issue.secondaryLocations.length > 0","93","    });","119","  \/*","120","   * Clean after animation","121","   *\/","122","  cleanDom(index: number) {","123","    const nodes = this.getNodes(index);","124","","125","    if (!nodes) {","126","      return;","127","    }","128","","129","    const { wrapper, table } = nodes;","130","","131","    table.style.marginTop = '';","132","    wrapper.style.maxHeight = '';","133","  }","134","","238","            this.cleanDom(snippetIndex);"],"delete":["89","    const snippets = createSnippets(","90","      this.props.snippetGroup.locations,","91","      this.props.last,","92","      this.props.issue.secondaryLocations.length > 0 ? this.props.issue : undefined","93","    );"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/SnippetViewer.tsx":[{"add":["20","import * as React from 'react';","32","import { inSnippet, LINES_BELOW_ISSUE } from '.\/utils';","187","      ? Math.max(0, LINES_BELOW_ISSUE - (bottomLine - lowestVisibleIssue))"],"delete":["19","import * as React from 'react';","32","import { inSnippet, LINES_BELOW_LAST } from '.\/utils';","187","      ? Math.max(0, LINES_BELOW_LAST - (bottomLine - lowestVisibleIssue))"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/utils.ts":[{"add":["22","export const LINES_BELOW_ISSUE = 9;","56","function addLinesBellow(params: { issue: T.Issue; locationEnd: number }) {","57","  const { issue, locationEnd } = params;","58","  const issueEndLine = (issue.textRange && issue.textRange.endLine) || 0;","59","","60","  if (!issueEndLine || issueEndLine === locationEnd) {","61","    return locationEnd + LINES_BELOW_ISSUE;","62","  }","63","","64","  return locationEnd + LINES_BELOW;","65","}","66","","67","export function createSnippets(params: {","68","  locations: T.FlowLocation[];","69","  issue: T.Issue;","70","  addIssueLocation: boolean;","71","}): T.Snippet[] {","72","  const { locations, issue, addIssueLocation } = params;","75","  return (addIssueLocation ? [getPrimaryLocation(issue), ...locations] : locations).reduce(","78","      const endIndex = addLinesBellow({ issue, locationEnd: loc.textRange.endLine });"],"delete":["22","export const LINES_BELOW_LAST = 9;","56","export function createSnippets(","57","  locations: T.FlowLocation[],","58","  last: boolean,","59","  issue?: T.Issue","60","): T.Snippet[] {","63","  return (issue ? [getPrimaryLocation(issue), ...locations] : locations).reduce(","66","      const endIndex =","67","        loc.textRange.endLine +","68","        ((issue && index === 0) || (last && index === locations.length - 1)","69","          ? LINES_BELOW_LAST","70","          : LINES_BELOW);"]}]}},"9d33d9fa1a229413e5c131bcb0bfcae72a8fc87b":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/branch\/ws\/ListAction.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/setting\/ws\/ValuesAction.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/branch\/ws\/ListAction.java":[{"add":["41","import org.sonar.db.permission.OrganizationPermission;","166","      !userSession.hasComponentPermission(SCAN_EXECUTION, component) &&","167","      !userSession.hasPermission(OrganizationPermission.SCAN, component.getOrganizationUuid())) {"],"delete":["165","      !userSession.hasComponentPermission(SCAN_EXECUTION, component)) {"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/setting\/ws\/ValuesAction.java":[{"add":["41","import org.sonar.db.permission.OrganizationPermission;","157","    if (!userSession.hasComponentPermission(USER, component) &&","158","        !userSession.hasComponentPermission(SCAN_EXECUTION, component) &&","159","        !userSession.hasPermission(OrganizationPermission.SCAN, component.getOrganizationUuid())) {","160","        throw insufficientPrivilegesException();"],"delete":["156","    if (!userSession.hasComponentPermission(USER, component) && !userSession.hasComponentPermission(SCAN_EXECUTION, component)) {","157","      throw insufficientPrivilegesException();"]}]}},"856a11e8266edf43d70d3781d30ac017435685bb":{"changes":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/UserPermissionDaoTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/permission\/ws\/UsersAction.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/permission\/ws\/UsersActionTest.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/PermissionQueryTest.java":"MODIFY","server\/sonar-server\/src\/main\/resources\/org\/sonar\/server\/permission\/ws\/users-example.json":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/permission\/UserPermissionMapper.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/permission\/ws\/GroupsAction.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/permission\/UserPermissionDao.java":"MODIFY","server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/permission\/UserPermissionMapper.xml":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/permission\/PermissionQuery.java":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/UserPermissionDaoTest.java":[{"add":["263","  public void selectUserIdsByQueryAndScope_with_organization_scope() {","264","    OrganizationDto org1 = db.organizations().insert();","265","    OrganizationDto org2 = db.organizations().insert();","266","    UserDto user1 = insertUser(u -> u.setLogin(\"login1\").setName(\"Marius\").setEmail(\"email1@email.com\"), org1, org2);","267","    UserDto user2 = insertUser(u -> u.setLogin(\"login2\").setName(\"Marie\").setEmail(\"email2@email.com\"), org1, org2);","268","    ComponentDto project1 = db.components().insertPrivateProject(org1);","269","    ComponentDto project2 = db.components().insertPrivateProject(org2);","270","    addProjectPermission(org1, USER, user1, project1);","271","    addGlobalPermission(org1, PROVISIONING, user1);","272","    addProjectPermission(org2, ISSUE_ADMIN, user2, project2);","273","    PermissionQuery query = PermissionQuery.builder().setOrganizationUuid(org1.getUuid()).build();","274","","275","    List<Integer> result = underTest.selectUserIdsByQueryAndScope(dbSession, query);","276","","277","    \/\/ users with any kind of global permissions are first on the list and then sorted by name","278","    assertThat(result).containsExactly(user1.getId(), user2.getId());","279","  }","280","","281","  @Test","282","  public void selectUserIdsByQueryAndScope_with_project_scope() {","283","    OrganizationDto org1 = db.organizations().insert();","284","    OrganizationDto org2 = db.organizations().insert();","285","    UserDto user1 = insertUser(u -> u.setLogin(\"login1\").setName(\"Marius\").setEmail(\"email1@email.com\"), org1, org2);","286","    UserDto user2 = insertUser(u -> u.setLogin(\"login2\").setName(\"Marie\").setEmail(\"email2@email.com\"), org1, org2);","287","    ComponentDto project1 = db.components().insertPrivateProject(org1);","288","    ComponentDto project2 = db.components().insertPrivateProject(org2);","289","    addProjectPermission(org1, USER, user1, project1);","290","    addGlobalPermission(org1, PROVISIONING, user1);","291","    addProjectPermission(org2, ISSUE_ADMIN, user2, project2);","292","    PermissionQuery query = PermissionQuery.builder()","293","      .setOrganizationUuid(org1.getUuid())","294","      .setComponentUuid(project1.uuid())","295","      .setComponentId(project1.getId())","296","      .build();","297","","298","    List<Integer> result = underTest.selectUserIdsByQueryAndScope(dbSession, query);","299","","300","    \/\/ users with any this projects permissions are first on the list and then sorted by name","301","    assertThat(result).containsExactly(user1.getId(), user2.getId());","302","  }","303","","304","  @Test"],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/permission\/ws\/UsersAction.java":[{"add":["133","    project.ifPresent(projectId -> {","134","      permissionQuery.setComponentUuid(projectId.getUuid());","135","      permissionQuery.setComponentId(projectId.getId());","136","    });","172","    List<Integer> orderedIds = dbClient.userPermissionDao().selectUserIdsByQueryAndScope(dbSession, query);","181","    PermissionQuery.Builder queryBuilder = PermissionQuery.builder()","183","      .withAtLeastOnePermission();","184","    project.ifPresent(p -> queryBuilder.setComponentUuid(p.getUuid()));","185","    return dbClient.userPermissionDao().selectUserPermissionsByQuery(dbSession, queryBuilder.build(), userIds);"],"delete":["133","    project.ifPresent(projectId -> permissionQuery.setComponentUuid(projectId.getUuid()));","169","    List<Integer> orderedIds = dbClient.userPermissionDao().selectUserIdsByQuery(dbSession, query);","178","    PermissionQuery query = PermissionQuery.builder()","180","      .setComponentUuid(project.map(ProjectId::getUuid).orElse(null))","181","      .withAtLeastOnePermission()","182","      .build();","183","    return dbClient.userPermissionDao().selectUserPermissionsByQuery(dbSession, query, userIds);"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/permission\/ws\/UsersActionTest.java":[{"add":["78","    UserDto user2 = db.users().insertUser(newUserDto().setLogin(\"adam.west\").setName(\"Adam West\").setEmail(\"adamwest@adamwest.com\"));","80","    UserDto user3 = db.users().insertUser(newUserDto().setLogin(\"george.orwell\").setName(\"George Orwell\").setEmail(\"george.orwell@1984.net\"));","81","    db.organizations().addMember(db.getDefaultOrganization(), user3);","85","    db.users().insertPermissionOnUser(user3, SCAN);"],"delete":["78","    UserDto user2 = db.users().insertUser(newUserDto().setLogin(\"george.orwell\").setName(\"George Orwell\").setEmail(\"george.orwell@1984.net\"));","83","    db.users().insertPermissionOnUser(user2, SCAN);"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/PermissionQueryTest.java":[{"add":["36","      .setComponentId(1234L)","43","    assertThat(quey.getComponentId()).isEqualTo(1234L);"],"delete":[]}],"server\/sonar-server\/src\/main\/resources\/org\/sonar\/server\/permission\/ws\/users-example.json":[{"add":["4","    \"total\": 3","20","    },","21","    {","22","      \"login\": \"adam.west\",","23","      \"name\": \"Adam West\",","24","      \"email\": \"adamwest@adamwest.com\",","25","      \"avatar\": \"9b55aba24cc5ee533294334bd20abb34\",","26","      \"permissions\": []"],"delete":["4","    \"total\": 2"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/permission\/UserPermissionMapper.java":[{"add":["33","   * Fetch user ids based on permission query and only in a specific scope (global permissions only, organization permissions only or project permissions only)","34","   *\/","35","  List<Integer> selectUserIdsByQueryAndScope(@Param(\"query\") PermissionQuery query);","36","","37","  \/**"],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/permission\/ws\/GroupsAction.java":[{"add":["127","      permissionQuery.setComponentId(project.get().getId());"],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/permission\/UserPermissionDao.java":[{"add":["53","    return paginate(mapper(dbSession).selectUserIdsByQuery(query), query);","54","  }","55","","56","  public List<Integer> selectUserIdsByQueryAndScope(DbSession dbSession, PermissionQuery query) {","57","    return paginate(mapper(dbSession).selectUserIdsByQueryAndScope(query), query);","58","  }","59","","60","","61","  private static List<Integer> paginate(List<Integer> results, PermissionQuery query) {","62","    return results"],"delete":["53","    return mapper(dbSession).selectUserIdsByQuery(query)"]}],"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/permission\/UserPermissionMapper.xml":[{"add":["29","  <select id=\"selectUserIdsByQueryAndScope\" parameterType=\"map\" resultType=\"int\">","30","    select","31","    u.id, lower(u.name)","32","    from users u","33","    left join user_roles ur on ur.user_id = u.id and ur.organization_uuid=#{query.organizationUuid,jdbcType=VARCHAR}","34","    <choose>","35","      <when test=\"query.componentId == null\">","36","        and ur.resource_id is null","37","      <\/when>","38","      <otherwise>","39","        and ur.resource_id = #{query.componentId,jdbcType=BIGINT}","40","      <\/otherwise>","41","    <\/choose>","42","    left join projects p on ur.resource_id = p.id","43","    inner join organization_members om on u.id=om.user_id and om.organization_uuid=#{query.organizationUuid,jdbcType=VARCHAR}","44","    <where>","45","      <include refid=\"sqlQueryFilters\" \/>","46","    <\/where>","47","    group by u.id, lower(u.name)","48","    order by case when (count(distinct ur.role) > 0) then 1 else 2 end asc, lower(u.name) asc","49","  <\/select>","50",""],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/permission\/PermissionQuery.java":[{"add":["50","  private final Long componentId;","70","    this.componentId = builder.componentId;","104","  public Long getComponentId() {","105","    return componentId;","106","  }","107","","108","  @CheckForNull","139","    private Long componentId;","167","    public Builder setComponentId(Long componentId) {","168","      this.componentId = componentId;","169","      return this;","170","    }","171",""],"delete":[]}]}},"f02eeba4ef9908da5d6e5ea969e91a22c6c443cd":{"changes":{"sonar-core\/src\/main\/java\/org\/sonar\/core\/component\/ComponentKeys.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/component\/DefaultBranchImpl.java":"MODIFY","sonar-core\/src\/test\/java\/org\/sonar\/core\/component\/ComponentKeysTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/component\/ComponentUpdater.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/ProjectReactorValidator.java":"MODIFY"},"diff":{"sonar-core\/src\/main\/java\/org\/sonar\/core\/component\/ComponentKeys.java":[{"add":["113","  public static boolean isValidLegacyBranch(String branchCandidate) {"],"delete":["113","  public static boolean isValidBranch(String branchCandidate) {"]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/component\/DefaultBranchImpl.java":[{"add":["49","    if (!ComponentKeys.isValidLegacyBranch(branchName)) {"],"delete":["49","    if (!ComponentKeys.isValidBranch(branchName)) {"]}],"sonar-core\/src\/test\/java\/org\/sonar\/core\/component\/ComponentKeysTest.java":[{"add":["70","    assertThat(ComponentKeys.isValidLegacyBranch(\"\")).isTrue();","71","    assertThat(ComponentKeys.isValidLegacyBranch(\"abc\")).isTrue();","72","    assertThat(ComponentKeys.isValidLegacyBranch(\"0123\")).isTrue();","73","    assertThat(ComponentKeys.isValidLegacyBranch(\"ab 12\")).isFalse();","74","    assertThat(ComponentKeys.isValidLegacyBranch(\"ab_12\")).isTrue();","75","    assertThat(ComponentKeys.isValidLegacyBranch(\"ab\/12\")).isTrue();","76","    assertThat(ComponentKeys.isValidLegacyBranch(\"ab\\\\12\")).isFalse();","77","    assertThat(ComponentKeys.isValidLegacyBranch(\"ab\\n\")).isFalse();"],"delete":["70","    assertThat(ComponentKeys.isValidBranch(\"\")).isTrue();","71","    assertThat(ComponentKeys.isValidBranch(\"abc\")).isTrue();","72","    assertThat(ComponentKeys.isValidBranch(\"0123\")).isTrue();","73","    assertThat(ComponentKeys.isValidBranch(\"ab 12\")).isFalse();","74","    assertThat(ComponentKeys.isValidBranch(\"ab_12\")).isTrue();","75","    assertThat(ComponentKeys.isValidBranch(\"ab\/12\")).isTrue();","76","    assertThat(ComponentKeys.isValidBranch(\"ab\\\\12\")).isFalse();","77","    assertThat(ComponentKeys.isValidBranch(\"ab\\n\")).isFalse();"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/component\/ComponentUpdater.java":[{"add":["102","    checkLegacyBranchFormat(newComponent.qualifier(), newComponent.deprecatedBranch());","171","  private void checkLegacyBranchFormat(String qualifier, @Nullable String branch) {","172","    checkRequest(branch == null || ComponentKeys.isValidLegacyBranch(branch),"],"delete":["102","    checkBranchFormat(newComponent.qualifier(), newComponent.deprecatedBranch());","171","  private void checkBranchFormat(String qualifier, @Nullable String branch) {","172","    checkRequest(branch == null || ComponentKeys.isValidBranch(branch),"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/ProjectReactorValidator.java":[{"add":["87","    validateLegacyBranch(validationMessages, deprecatedBranchName);","124","  private static void validateLegacyBranch(List<String> validationMessages, @Nullable String branch) {","125","    if (isNotEmpty(branch) && !ComponentKeys.isValidLegacyBranch(branch)) {"],"delete":["87","    validateBranch(validationMessages, deprecatedBranchName);","124","  private static void validateBranch(List<String> validationMessages, @Nullable String branch) {","125","    if (isNotEmpty(branch) && !ComponentKeys.isValidBranch(branch)) {"]}]}},"3ed705ce1fbd9cc1f1b2a07da0a8de21d677e54c":{"changes":{"server\/sonar-docs\/src\/pages\/extend\/developing-plugin.md":"MODIFY"},"diff":{"server\/sonar-docs\/src\/pages\/extend\/developing-plugin.md":[{"add":["416","   "],"delete":[]}]}},"a2c0562b148c6bc7c43aa5b8f191ba6cdea41d30":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/__tests__\/__snapshots__\/BulkChange-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/BulkChange.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/__tests__\/__snapshots__\/BulkChange-test.tsx.snap":[{"add":["103","    overlayPlacement=\"bottom-left\""],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/BulkChange.tsx":[{"add":["27","import { PopupPlacement } from 'sonar-ui-common\/components\/ui\/popups';","104","          overlayPlacement={PopupPlacement.BottomLeft}"],"delete":[]}]}},"66ebeab366167d2a5aef1d7f935234481a9d5e31":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/test\/ws\/ListAction.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/test\/index\/TestIndex.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/test\/index\/TestIndexTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/test\/ws\/ListAction.java":[{"add":["239","    checkComponentUuidPermission(dbSession, testIndex.getByTestUuid(testUuid).fileUuid());"],"delete":["239","    checkComponentUuidPermission(dbSession, testIndex.searchByTestUuid(testUuid).fileUuid());"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/test\/index\/TestIndex.java":[{"add":["90","  public TestDoc getByTestUuid(String testUuid) {"],"delete":["90","  public TestDoc searchByTestUuid(String testUuid) {"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/test\/index\/TestIndexTest.java":[{"add":["88","    TestDoc test = underTest.getByTestUuid(\"1\");"],"delete":["88","    TestDoc test = underTest.searchByTestUuid(\"1\");"]}]}},"474f76882a1c04451f9a210a59aa8efa1039426d":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/common\/LocationIndex.css":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/common\/LocationIndex.css":[{"add":["48","  margin-left: -22px;"],"delete":["48","  position: absolute;","49","  margin-left: -4px;","50","  transform: translateX(-100%);","51","}","52","","53",".location-index.is-leading + .is-leading {","54","  position: relative;","55","  transform: none;"]}]}},"d95a02b5fc788882ad59ad338b6a0b2a879dd2f3":{"changes":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/ChangedLinesPublisher.java":"MODIFY","sonar-plugin-api-impl\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/DefaultInputFile.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/report\/ChangedLinesPublisherTest.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/ChangedLinesPublisher.java":[{"add":["27","import org.sonar.api.batch.fs.internal.DefaultInputFile;","28","import org.sonar.api.batch.fs.internal.DefaultInputProject;","30","import org.sonar.api.impl.utils.ScannerUtils;","90","      DefaultInputFile inputFile = e.getValue();","93","      \/\/ detect unchanged last empty line","94","      if (changedLines.size() + 1 == inputFile.lines() && inputFile.lineLength(inputFile.lines()) == 0) {","95","        changedLines.add(inputFile.lines());","96","      }","97",""],"delete":["31","import org.sonar.api.batch.fs.internal.DefaultInputFile;","32","import org.sonar.api.batch.fs.internal.DefaultInputProject;","38","import org.sonar.api.impl.utils.ScannerUtils;"]}],"sonar-plugin-api-impl\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/DefaultInputFile.java":[{"add":["342","  public int lineLength(int line) {"],"delete":["342","  private int lineLength(int line) {"]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/report\/ChangedLinesPublisherTest.java":[{"add":["35","import org.sonar.api.batch.scm.ScmProvider;","36","import org.sonar.scanner.fs.InputModuleHierarchy;","115","    DefaultInputFile fileWithChangedLines = createInputFile(\"path1\", \"l1\\nl2\\nl3\\n\");","116","    DefaultInputFile fileWithoutChangedLines = createInputFile(\"path2\", \"l1\\nl2\\nl3\\n\");","124","    assertPublished(fileWithChangedLines, new HashSet<>(Arrays.asList(1, 10)));","128","  @Test","129","  public void write_last_line_as_changed_if_all_other_lines_are_changed_and_last_line_is_empty() {","130","    DefaultInputFile fileWithChangedLines = createInputFile(\"path1\", \"l1\\nl2\\nl3\\n\");","131","    DefaultInputFile fileWithoutChangedLines = createInputFile(\"path2\", \"l1\\nl2\\nl3\\n\");","132","    Set<Path> paths = new HashSet<>(Arrays.asList(BASE_DIR.resolve(\"path1\"), BASE_DIR.resolve(\"path2\")));","133","    Set<Integer> lines = new HashSet<>(Arrays.asList(1, 2, 3));","134","    when(provider.branchChangedLines(TARGET_BRANCH, BASE_DIR, paths)).thenReturn(Collections.singletonMap(BASE_DIR.resolve(\"path1\"), lines));","135","    when(inputComponentStore.allChangedFilesToPublish()).thenReturn(Arrays.asList(fileWithChangedLines, fileWithoutChangedLines));","136","","137","    publisher.publish(writer);","138","","139","    assertPublished(fileWithChangedLines, new HashSet<>(Arrays.asList(1, 2, 3, 4)));","140","    assertPublished(fileWithoutChangedLines, Collections.emptySet());","141","  }","142","","143","  @Test","144","  public void dont_write_last_line_as_changed_if_its_not_empty() {","145","    DefaultInputFile fileWithChangedLines = createInputFile(\"path1\", \"l1\\nl2\\nl3\\nl4\");","146","    DefaultInputFile fileWithoutChangedLines = createInputFile(\"path2\", \"l1\\nl2\\nl3\\nl4\");","147","    Set<Path> paths = new HashSet<>(Arrays.asList(BASE_DIR.resolve(\"path1\"), BASE_DIR.resolve(\"path2\")));","148","    Set<Integer> lines = new HashSet<>(Arrays.asList(1, 2, 3));","149","    when(provider.branchChangedLines(TARGET_BRANCH, BASE_DIR, paths)).thenReturn(Collections.singletonMap(BASE_DIR.resolve(\"path1\"), lines));","150","    when(inputComponentStore.allChangedFilesToPublish()).thenReturn(Arrays.asList(fileWithChangedLines, fileWithoutChangedLines));","151","","152","    publisher.publish(writer);","153","","154","    assertPublished(fileWithChangedLines, new HashSet<>(Arrays.asList(1, 2, 3)));","155","    assertPublished(fileWithoutChangedLines, Collections.emptySet());","156","  }","157","","158","  private DefaultInputFile createInputFile(String path, String contents) {","160","      .setContents(contents)"],"delete":["32","import org.sonar.api.batch.scm.ScmProvider;","35","import org.sonar.scanner.fs.InputModuleHierarchy;","115","    DefaultInputFile fileWithChangedLines = createInputFile(\"path1\");","116","    DefaultInputFile fileWithoutChangedLines = createInputFile(\"path2\");","124","    assertPublished(fileWithChangedLines, lines);","128","  private DefaultInputFile createInputFile(String path) {"]}]}},"c70f3440c22884fbb2af047acc5fbd164d8a5158":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/startup\/RegisterMetrics.java":"MODIFY","sonar-db\/src\/main\/java\/org\/sonar\/db\/metric\/MetricMapper.java":"MODIFY","sonar-db\/src\/main\/resources\/org\/sonar\/db\/metric\/MetricMapper.xml":"MODIFY","sonar-db\/src\/main\/java\/org\/sonar\/db\/metric\/MetricDao.java":"MODIFY","sonar-db\/src\/test\/java\/org\/sonar\/db\/metric\/MetricDaoTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/startup\/RegisterMetrics.java":[{"add":["104","      if (!nonUpdatedBase.isUserManaged() && dbClient.metricDao().disableCustomByKey(session, nonUpdatedBase.getKey())) {"],"delete":["104","      if (!nonUpdatedBase.isUserManaged()) {","106","        dbClient.metricDao().disableCustomByKey(session, nonUpdatedBase.getKey());"]}],"sonar-db\/src\/main\/java\/org\/sonar\/db\/metric\/MetricMapper.java":[{"add":["49","  int disableByKey(@Param(\"key\") String key);"],"delete":["49","  void disableByKey(@Param(\"key\") String key);"]}],"sonar-db\/src\/main\/resources\/org\/sonar\/db\/metric\/MetricMapper.xml":[{"add":["138","    and enabled=${_true}"],"delete":[]}],"sonar-db\/src\/main\/java\/org\/sonar\/db\/metric\/MetricDao.java":[{"add":["143","  \/**","144","   * Disable a metric and return {@code false} if the metric does not exist","145","   * or is already disabled.","146","   *\/","147","  public boolean disableCustomByKey(DbSession session, String key) {","148","    return mapper(session).disableByKey(key) == 1;"],"delete":["143","  public void disableCustomByKey(final DbSession session, String key) {","144","    mapper(session).disableByKey(key);"]}],"sonar-db\/src\/test\/java\/org\/sonar\/db\/metric\/MetricDaoTest.java":[{"add":["299","    boolean updated = underTest.disableCustomByKey(session, \"metric-key\");","300","    assertThat(updated).isTrue();","304","","305","    \/\/ disable again -> zero rows are touched","306","    updated = underTest.disableCustomByKey(session, \"metric-key\");","307","    assertThat(updated).isFalse();"],"delete":["299","    underTest.disableCustomByKey(session, \"metric-key\");"]}]}},"5d361e9ec5437d9402d95939b630796494416021":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/views\/gate-projects-view.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/views\/ChangeProjectsView.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/users\/groups-view.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SelectList\/index.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/groups\/users-view.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/permission-templates\/views\/GroupsView.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/permission-templates\/views\/UsersView.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/views\/gate-projects-view.js":[{"add":["20","import escapeHtml from 'escape-html';","36","      dangerouslyUnescapedHtmlFormat(item) {","37","        return escapeHtml(item.name);"],"delete":["35","      format(item) {","36","        return item.name;"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/views\/ChangeProjectsView.js":[{"add":["45","      dangerouslyUnescapedHtmlFormat(item) {"],"delete":["45","      format(item) {"]}],"server\/sonar-web\/src\/main\/js\/apps\/users\/groups-view.js":[{"add":["19","import escapeHtml from 'escape-html';","34","      dangerouslyUnescapedHtmlFormat(item) {","35","        return (","36","          `${escapeHtml(item.name)}<br>` +","37","          `<span class=\"note\">${escapeHtml(item.description)}<\/span>`","38","        );"],"delete":["33","      format(item) {","34","        return `${item.name}<br><span class=\"note\">${item.description}<\/span>`;"]}],"server\/sonar-web\/src\/main\/js\/components\/SelectList\/index.js":[{"add":["22","import escapeHtml from 'escape-html';","92","    this.$el.html(this.template(this.settings.dangerouslyUnescapedHtmlFormat(this.model.toJSON())));","415","  dangerouslyUnescapedHtmlFormat(item) {","416","    return escapeHtml(item.value);"],"delete":["91","    this.$el.html(this.template(this.settings.format(this.model.toJSON())));","414","  format(item) {","415","    return item.value;"]}],"server\/sonar-web\/src\/main\/js\/apps\/groups\/users-view.js":[{"add":["19","import escapeHtml from 'escape-html';","34","      dangerouslyUnescapedHtmlFormat(item) {","35","        return `${escapeHtml(item.name)}<br><span class=\"note\">${escapeHtml(item.login)}<\/span>`;"],"delete":["33","      format(item) {","34","        return `${item.name}<br><span class=\"note\">${item.login}<\/span>`;"]}],"server\/sonar-web\/src\/main\/js\/apps\/permission-templates\/views\/GroupsView.js":[{"add":["19","import escapeHtml from 'escape-html';","41","      dangerouslyUnescapedHtmlFormat(item) {","42","        return escapeHtml(item.name);"],"delete":["40","      format(item) {","41","        return item.name;"]}],"server\/sonar-web\/src\/main\/js\/apps\/permission-templates\/views\/UsersView.js":[{"add":["19","import escapeHtml from 'escape-html';","68","      dangerouslyUnescapedHtmlFormat(item) {","69","        return `${escapeHtml(item.name)}<br><span class=\"note\">${escapeHtml(item.login)}<\/span>`;"],"delete":["67","      format(item) {","68","        return `${item.name}<br><span class=\"note\">${item.login}<\/span>`;"]}]}},"0df26fe8b6e2273ddd5e6db253c4408abc55447c":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/projects\/filters\/__tests__\/__snapshots__\/SearchFilterContainer-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/PageHeader.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projects\/filters\/SearchFilterContainer.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/projects\/filters\/__tests__\/__snapshots__\/SearchFilterContainer-test.tsx.snap":[{"add":["10","    value=\"\""],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/PageHeader.tsx":[{"add":["84","      <SearchFilterContainer onQueryChange={props.onQueryChange} query={props.query} \/>"],"delete":["84","      <SearchFilterContainer","85","        onQueryChange={props.onQueryChange}","86","        organization={props.organization}","87","        query={props.query}","88","      \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/projects\/filters\/SearchFilterContainer.tsx":[{"add":["25","  onQueryChange: (change: { search?: string }) => void;","29","  handleSearch = (search?: string) => {","30","    this.props.onQueryChange({ search });","40","          value={this.props.query.search || ''}"],"delete":["24","  className?: string;","26","  onQueryChange: (change: T.RawQuery) => void;","27","  organization?: { key: string };","31","  handleSearch = (userQuery?: string) => {","32","    this.props.onQueryChange({ search: userQuery });"]}]}},"a8e86376906473e4b9b0d5eec23ae8b918e39e7a":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/setting\/ThreadLocalSettings.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/setting\/ThreadLocalSettingsTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/setting\/ThreadLocalSettings.java":[{"add":[],"delete":["36","import static com.google.common.base.Preconditions.checkState;","148","   *","149","   * @throws IllegalStateException if the current thread already has specific cache","152","    checkState(CACHE.get() == null,","153","      \"load called twice for thread '%s' or state wasn't cleared last time it was used\", Thread.currentThread().getName());"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/setting\/ThreadLocalSettingsTest.java":[{"add":["37","import static java.util.Collections.emptyMap;","81","    assertThat(underTest.get(\"foo\")).hasValue(\"bar\");","90","    assertThat(underTest.get(\"foo\")).hasValue(\"bar\");","103","    assertThat(underTest.get(\"foo\")).hasValue(\"bar\");","150","    assertThat(underTest.get(\"foo\")).hasValue(\"1\");","160","    assertThat(underTest.get(\"foo\")).hasValue(\"from db\");","172","    assertThat(underTest.get(\"foo\")).hasValue(\"from system\");","210","    assertThat(underTest.get(A_KEY)).hasValue(\"v1\");","214","    assertThat(underTest.get(A_KEY)).hasValue(\"v1\");","219","    assertThat(underTest.get(A_KEY)).hasValue(\"v1\");","226","  public void load_invalidates_cache_if_unload_has_not_been_called() {","227","    underTest = create(emptyMap());","229","    underTest.set(\"foo\", \"bar\");","230","    \/\/ unload() is not called","233","    assertThat(underTest.get(\"foo\")).isEmpty();","345","  private void insertPropertyIntoDb(String key, String value) {"],"delete":["80","    assertThat(underTest.get(\"foo\").get()).isEqualTo(\"bar\");","89","    assertThat(underTest.get(\"foo\").get()).isEqualTo(\"bar\");","102","    assertThat(underTest.get(\"foo\").get()).isEqualTo(\"bar\");","149","    assertThat(underTest.get(\"foo\").get()).isEqualTo(\"1\");","159","    assertThat(underTest.get(\"foo\").get()).isEqualTo(\"from db\");","171","    assertThat(underTest.get(\"foo\").get()).isEqualTo(\"from system\");","209","    assertThat(underTest.get(A_KEY).get()).isEqualTo(\"v1\");","213","    assertThat(underTest.get(A_KEY).get()).isEqualTo(\"v1\");","218","    assertThat(underTest.get(A_KEY).get()).isEqualTo(\"v1\");","225","  public void load_throws_ISE_if_load_called_twice_without_unload_in_between() {","226","    underTest = create(Collections.emptyMap());","228","","229","    expectedException.expect(IllegalStateException.class);","230","    expectedException.expectMessage(\"load called twice for thread '\" + Thread.currentThread().getName()","231","      + \"' or state wasn't cleared last time it was used\");","345","  private void insertPropertyIntoDb(String key, @Nullable String value) {"]}]}},"80063c314e8e77cd4426f195aa05e6d266573c13":{"changes":{"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/ce\/ws\/ActivityActionTest.java":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/ce\/ws\/ActivityAction.java":"MODIFY"},"diff":{"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/ce\/ws\/ActivityActionTest.java":[{"add":["31","import org.sonar.api.utils.log.LogTester;","32","import org.sonar.api.utils.log.LoggerLevel;","394","    assertThat(result.getTasksCount()).isEqualTo(1);","580","  @Test","581","  public void filter_out_duplicate_tasks_in_progress_and_success(){","582","    logInAsSystemAdministrator();","583","    ComponentDto project1 = db.components().insertPrivateProject();","584","    ComponentDto project2 = db.components().insertPrivateProject();","585","    ComponentDto project3 = db.components().insertPrivateProject();","586","    insertQueue(\"T2\", project2, IN_PROGRESS);","587","    insertQueue(\"T3\", project3, IN_PROGRESS);","588","    insertActivity(\"T1\", project1, SUCCESS);","589","    insertActivity(\"T2\", project2, SUCCESS);","590","","591","    ActivityResponse response = ws.newRequest().setParam(\"status\", \"FAILED,IN_PROGRESS,SUCCESS\").executeProtobuf(ActivityResponse.class);","592","","593","    assertThat(response.getTasksList())","594","      .extracting(Task::getId)","595","      .containsExactlyInAnyOrder(\"T1\",\"T2\",\"T3\");","596","  }","597",""],"delete":["392","    assertThat(result.getTasksCount()).isEqualTo(2);"]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/ce\/ws\/ActivityAction.java":[{"add":["29","import java.util.stream.StreamSupport;","58","import static java.util.stream.Collectors.toSet;","279","    Set<String> pastIds = StreamSupport","280","      .stream(pastTasks.spliterator(), false)","281","      .map(Ce.Task::getId)","282","      .collect(toSet());","283","","286","      if (nbInsertedTasks < pageSize && !pastIds.contains(queuedTask.getId())) {"],"delete":["279","      if (nbInsertedTasks < pageSize) {"]}]}},"83dd467a6b49b6048b86b1eb8a9416926a1d1077":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/account\/containers\/SecurityContainer.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/account\/components\/Security.js":"MODIFY","server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/account\/index.html.erb":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/account\/containers\/SecurityContainer.js":[{"add":["24","  return { user: state.user };"],"delete":["24","  return {","25","    user: state.user,","26","    canChangePassword: window.sonarqube.user.canChangePassword","27","  };"]}],"server\/sonar-web\/src\/main\/js\/apps\/account\/components\/Security.js":[{"add":["24","export default function Security ({ user }) {","32","          {user.local && ("],"delete":["24","export default function Security ({ user, canChangePassword }) {","32","          {canChangePassword && ("]}],"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/account\/index.html.erb":[{"add":[],"delete":["3","      canChangePassword: <%= User.editable_password? ? 'true' : 'false' -%>,"]}]}},"668947a3d283074ea36006b9932ae91855f8ca73":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/__tests__\/App-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/App.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/__tests__\/App-test.tsx":[{"add":["22","import { getComponents } from '..\/..\/..\/api\/components';","24","import Search from '..\/Search';","32","jest.mock('..\/..\/..\/api\/components', () => ({","33","  getComponents: jest.fn().mockResolvedValue({ paging: { total: 0 }, components: [] })","34","}));","46","  jest.clearAllMocks();","77","it('should handle date filtering', () => {","78","  const wrapper = shallowRender();","79","  wrapper","80","    .find(Search)","81","    .props()","82","    .onDateChanged(new Date('2019-11-14T06:55:02.663Z'));","83","  expect(getComponents).toHaveBeenCalledWith({","84","    ...defaultSearchParameters,","85","    qualifiers: 'TRK',","86","    analyzedBefore: '2019-11-14'","87","  });","88","});","89","","97","  (getComponents as jest.Mock).mockImplementation(() =>","133","  expect((getComponents as jest.Mock).mock.calls).toHaveLength(2);","148","  return shallow<App>("],"delete":["30","jest.mock('..\/..\/..\/api\/components', () => ({ getComponents: jest.fn() }));","31","","32","const getComponents = require('..\/..\/..\/api\/components').getComponents as jest.Mock<any>;","44","  getComponents","45","    .mockImplementation(() => Promise.resolve({ paging: { total: 0 }, components: [] }))","46","    .mockClear();","84","  getComponents.mockImplementation(() =>","120","  expect(getComponents.mock.calls).toHaveLength(2);","135","  return shallow("]}],"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/App.tsx":[{"add":["23","import { toShortNotSoISOString } from 'sonar-ui-common\/helpers\/dates';","88","      analyzedBefore: analyzedBefore && toShortNotSoISOString(analyzedBefore),"],"delete":["23","import { toNotSoISOString } from 'sonar-ui-common\/helpers\/dates';","88","      analyzedBefore: analyzedBefore && toNotSoISOString(analyzedBefore),"]}]}},"49fd8bb0901062db0ac8a2a4cdf7d550f732bf65":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/styles.css":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/styles\/components\/issues.css":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/styles.css":[{"add":["141","  border: 1px solid transparent;","146","  border: 1px dashed #dd4040;","147","  transition: all 0.3s ease;","148","}","149","","150",".issues .issue:focus {","151","  outline: none;"],"delete":["141","  outline: 1px dashed transparent;","146","  outline-color: #dd4040;"]}],"server\/sonar-web\/src\/main\/js\/app\/styles\/components\/issues.css":[{"add":["28","  box-shadow: inset 0px 0px 0px 1px #ffeaea;","29","  transition: all 0.3s ease, border 0 ease;","38","  box-shadow: none;","39","  border: 1px solid #dd4040 !important;"],"delete":["28","  box-shadow: 0px 0px 0px 1px #ffeaea;","29","  transition: all 0.3s ease;","38","  box-shadow: 0px 0px 0px 1px #dd4040;"]}]}},"e4f8927d7f668f1deb5be2d058447a4b2b644f0b":{"changes":{"server\/sonar-webserver\/src\/main\/java\/org\/sonar\/server\/app\/TomcatErrorHandling.java":"ADD","server\/sonar-webserver\/src\/test\/java\/org\/sonar\/server\/app\/TomcatErrorHandlingTest.java":"ADD","server\/sonar-webserver\/src\/main\/java\/org\/sonar\/server\/app\/EmbeddedTomcat.java":"MODIFY"},"diff":{"server\/sonar-webserver\/src\/main\/java\/org\/sonar\/server\/app\/TomcatErrorHandling.java":[{"add":[],"delete":[]}],"server\/sonar-webserver\/src\/test\/java\/org\/sonar\/server\/app\/TomcatErrorHandlingTest.java":[{"add":[],"delete":[]}],"server\/sonar-webserver\/src\/main\/java\/org\/sonar\/server\/app\/EmbeddedTomcat.java":[{"add":["60","    new TomcatErrorHandling().configure(tomcat);"],"delete":[]}]}},"d234df518982af0f6194b457929786b06b7e32fe":{"changes":{"server\/sonar-web\/src\/main\/js\/helpers\/urls.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/workspace\/__tests__\/__snapshots__\/WorkspaceRuleViewer-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/withAppState.tsx":"ADD","server\/sonar-web\/src\/main\/js\/components\/workspace\/__tests__\/WorkspaceRuleViewer-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/workspace\/__tests__\/WorkspaceRuleDetails-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/workspace\/WorkspaceRuleDetails.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/helpers\/urls.ts":[{"add":["213","  return getRulesUrl({ open: rule, rule_key: rule }, organization); \/\/ eslint-disable-line camelcase"],"delete":["213","  \/* eslint-disable camelcase *\/","214","  return getRulesUrl({ open: rule, rule_key: rule }, organization);","215","  \/* eslint-enable camelcase *\/"]}],"server\/sonar-web\/src\/main\/js\/components\/workspace\/__tests__\/__snapshots__\/WorkspaceRuleViewer-test.tsx.snap":[{"add":["30","    <Connect(withAppState(WorkspaceRuleDetails))"],"delete":["30","    <WorkspaceRuleDetails"]}],"server\/sonar-web\/src\/main\/js\/components\/withAppState.tsx":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/components\/workspace\/__tests__\/WorkspaceRuleViewer-test.tsx":[{"add":["37","  const details = wrapper.findWhere(w => w.name().includes('WorkspaceRuleDetails'));","38","  details.prop<Function>('onLoad')({ name: 'Foo' });"],"delete":["37","  wrapper.find('WorkspaceRuleDetails').prop<Function>('onLoad')({ name: 'Foo' });"]}],"server\/sonar-web\/src\/main\/js\/components\/workspace\/__tests__\/WorkspaceRuleDetails-test.tsx":[{"add":["21","import { WorkspaceRuleDetails } from '..\/WorkspaceRuleDetails';","33","    <WorkspaceRuleDetails","34","      appState={{ organizationsEnabled: false }}","35","      onLoad={jest.fn()}","36","      organizationKey={undefined}","37","      ruleKey=\"foo\"","38","    \/>","49","    <WorkspaceRuleDetails","50","      appState={{ organizationsEnabled: false }}","51","      onLoad={onLoad}","52","      organizationKey={undefined}","53","      ruleKey=\"foo\"","54","    \/>"],"delete":["21","import WorkspaceRuleDetails from '..\/WorkspaceRuleDetails';","33","    <WorkspaceRuleDetails onLoad={jest.fn()} organizationKey={undefined} ruleKey=\"foo\" \/>","44","    <WorkspaceRuleDetails onLoad={onLoad} organizationKey={undefined} ruleKey=\"foo\" \/>"]}],"server\/sonar-web\/src\/main\/js\/components\/workspace\/WorkspaceRuleDetails.tsx":[{"add":["21","import { withAppState } from '..\/withAppState';","26","import { RuleDetails, AppState } from '..\/..\/app\/types';","30","  appState: Pick<AppState, 'organizationsEnabled'>;","42","export class WorkspaceRuleDetails extends React.PureComponent<Props, State> {","92","    const { organizationsEnabled } = this.props.appState;","93","    const organization = organizationsEnabled ? organizationKey : undefined;","104","              organization={organization}","111","              organization={organization}","120","","121","export default withAppState(WorkspaceRuleDetails);"],"delete":["25","import { RuleDetails } from '..\/..\/app\/types';","40","export default class WorkspaceRuleDetails extends React.PureComponent<Props, State> {","100","              organization={organizationKey}","107","              organization={organizationKey}"]}]}},"fc10db309e0ef2124b2c3c1469bea606642bcf69":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/measure\/live\/IssueCounter.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/measure\/live\/IssueMetricFormulaFactoryImplTest.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/IssueCounterTest.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/IssueCounter.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/measure\/live\/IssueCounter.java":[{"add":["32","import static org.sonar.api.rules.RuleType.SECURITY_HOTSPOT;","33","","119","      if (group.getRuleType() != SECURITY_HOTSPOT.getDbConstant()) {","120","        absolute += group.getCount();","121","        if (group.isInLeak()) {","122","          leak += group.getCount();","123","        }"],"delete":["117","      absolute += group.getCount();","118","      if (group.isInLeak()) {","119","        leak += group.getCount();"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/measure\/live\/IssueMetricFormulaFactoryImplTest.java":[{"add":["126","      \/\/ exclude security hotspot","127","      newGroup(RuleType.SECURITY_HOTSPOT).setSeverity(Severity.CRITICAL).setCount(15),","152","      \/\/ exclude security hotspot","153","      newResolvedGroup(Issue.RESOLUTION_WONT_FIX, Issue.STATUS_RESOLVED).setCount(15).setRuleType(RuleType.SECURITY_HOTSPOT.getDbConstant()),","174","      \/\/ exclude security hotspot","175","      newGroup(RuleType.SECURITY_HOTSPOT).setStatus(Issue.STATUS_OPEN).setCount(12),","189","      \/\/ exclude security hotspot","190","      newGroup(RuleType.SECURITY_HOTSPOT).setEffort(9).setInLeak(true),","191","      newGroup(RuleType.SECURITY_HOTSPOT).setEffort(11).setInLeak(false),","533","      newGroup(RuleType.SECURITY_HOTSPOT).setEffort(9.0).setInLeak(true),"],"delete":[]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/IssueCounterTest.java":[{"add":["333","    underTest.onIssue(FILE2, createSecurityHotspot());","342","    assertThat(measureRepository.getRawMeasure(FILE1, ISSUES_METRIC).get().getIntValue()).isEqualTo(0);","343","    assertThat(measureRepository.getRawMeasure(FILE1, OPEN_ISSUES_METRIC).get().getIntValue()).isEqualTo(0);","346","    assertThat(measureRepository.getRawMeasure(FILE2, ISSUES_METRIC).get().getIntValue()).isEqualTo(0);","347","    assertThat(measureRepository.getRawMeasure(FILE2, OPEN_ISSUES_METRIC).get().getIntValue()).isEqualTo(0);","352","    assertThat(measureRepository.getRawMeasure(PROJECT, ISSUES_METRIC).get().getIntValue()).isEqualTo(0);","353","    assertThat(measureRepository.getRawMeasure(PROJECT, OPEN_ISSUES_METRIC).get().getIntValue()).isEqualTo(0);"],"delete":["333","    underTest.onIssue(FILE1, createSecurityHotspot());","342","    assertThat(measureRepository.getRawMeasure(FILE1, ISSUES_METRIC).get().getIntValue()).isEqualTo(2);","343","    assertThat(measureRepository.getRawMeasure(FILE1, OPEN_ISSUES_METRIC).get().getIntValue()).isEqualTo(2);","346","    assertThat(measureRepository.getRawMeasure(FILE2, ISSUES_METRIC).get().getIntValue()).isEqualTo(1);","347","    assertThat(measureRepository.getRawMeasure(FILE2, OPEN_ISSUES_METRIC).get().getIntValue()).isEqualTo(1);","352","    assertThat(measureRepository.getRawMeasure(PROJECT, ISSUES_METRIC).get().getIntValue()).isEqualTo(3);","353","    assertThat(measureRepository.getRawMeasure(PROJECT, OPEN_ISSUES_METRIC).get().getIntValue()).isEqualTo(3);"]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/IssueCounter.java":[{"add":["135","    if (issue.type() == RuleType.SECURITY_HOTSPOT) {","136","      return;","137","    }","138","","284","      counterForPeriod.add(issue);"],"delete":["280","      if (issue.type() != RuleType.SECURITY_HOTSPOT) {","281","        counterForPeriod.add(issue);","282","      }"]}]}},"ce59355081e759025cd0426ac8e315c603c2272b":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/setting\/ws\/SettingsFinder.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/setting\/ws\/ValuesAction.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/setting\/ws\/Setting.java":"MODIFY","sonar-db\/src\/main\/resources\/org\/sonar\/db\/property\/PropertiesMapper.xml":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/setting\/ws\/SettingsFinder.java":[{"add":["57","      .map(property -> Setting.createFromDto(property, getPropertySets(property.getKey(), propertySets, null), definitions.get(property.getKey())))","78","        Setting.createFromDto(propertyDto, getPropertySets(propertyKey, propertySets, componentId), definitions.get(propertyKey)));"],"delete":["57","      .map(property -> Setting.createForDto(property, getPropertySets(property.getKey(), propertySets, null), definitions.get(property.getKey())))","78","        Setting.createForDto(propertyDto, getPropertySets(propertyKey, propertySets, componentId), definitions.get(propertyKey)));"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/setting\/ws\/ValuesAction.java":[{"add":["113","      List<Setting> settings = loadSettings(dbSession, component, keysToDisplayMap.keySet());","114","      return new ValuesResponseBuilder(settings, component, keysToDisplayMap).build();","160","      .map(Setting::createFromDefinition)"],"delete":["113","      return new ValuesResponseBuilder(loadSettings(dbSession, component, keysToDisplayMap.keySet()), component, keysToDisplayMap).build();","159","      .map(Setting::createForDefinition)"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/setting\/ws\/Setting.java":[{"add":["62","  public static Setting createFromDto(PropertyDto propertyDto, List<PropertyDto> propertyDtoSetValues, @Nullable PropertyDefinition definition){","66","  public static Setting createFromDefinition(PropertyDefinition definition){"],"delete":["62","  public static Setting createForDto(PropertyDto propertyDto, List<PropertyDto> propertyDtoSetValues, @Nullable PropertyDefinition definition){","66","  public static Setting createForDefinition(PropertyDefinition definition){"]}],"sonar-db\/src\/main\/resources\/org\/sonar\/db\/property\/PropertiesMapper.xml":[{"add":["132","    order by p.id"],"delete":[]}]}},"2904c7846d8233f71a6340c6f7f884537bdc7b6a":{"changes":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/server\/ws\/Request.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ws\/WebServiceEngine.java":"MODIFY","sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/server\/ws\/RequestTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/ws\/L10nWs.java":"MODIFY"},"diff":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/server\/ws\/Request.java":[{"add":["84","    return parseInt(key, s);","94","    return parseLong(key, s);","150","    return s == null ? defaultValue : parseInt(key, s);","160","    return s == null ? defaultValue : parseLong(key, s);","172","    return s == null ? null : parseInt(key, s);","178","    return s == null ? null : parseLong(key, s);","212","          throw new IllegalArgumentException(String.format(\"'%s' cannot be parsed as either a date or date+time\", s));","222","    if (s == null) {","223","      return null;","225","","226","    try {","227","      return DateUtils.parseDate(s);","228","    } catch (SonarException notDateException) {","229","      throw new IllegalArgumentException(notDateException);","230","    }","243","  private static int parseInt(String key, String value) {","244","    try {","245","      return Integer.parseInt(value);","246","    } catch (NumberFormatException expection) {","247","      throw new IllegalArgumentException(String.format(\"The '%s' parameter cannot be parsed as an integer value: %s\", key, value));","248","    }","249","  }","250","","251","  private static long parseLong(String key, String value) {","252","    try {","253","      return Long.parseLong(value);","254","    } catch (NumberFormatException expection) {","255","      throw new IllegalArgumentException(String.format(\"The '%s' parameter cannot be parsed as a long value: %s\", key, value));","256","    }","257","  }","258",""],"delete":["84","    return Integer.parseInt(s);","94","    return Long.parseLong(s);","150","    return s == null ? defaultValue : Integer.parseInt(s);","160","    return s == null ? defaultValue : Long.parseLong(s);","172","    return s == null ? null : Integer.parseInt(s);","178","    return s == null ? null : Long.parseLong(s);","212","          throw new SonarException(String.format(\"'%s' cannot be parsed as either a date or date+time\", s));","222","    if (s != null) {","223","      return DateUtils.parseDate(s);","225","    return null;"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ws\/WebServiceEngine.java":[{"add":[],"delete":["100","","102","      \/\/ TODO replace by BadRequestException in Request#mandatoryParam()"]}],"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/server\/ws\/RequestTest.java":[{"add":["22","import java.io.InputStream;","23","import java.util.Map;","24","import javax.annotation.Nullable;","27","import org.junit.Rule;","29","import org.junit.rules.ExpectedException;","39","  @Rule","40","  public ExpectedException expectedException = ExpectedException.none();","41","","42","  FakeRequest underTest = new FakeRequest();","43","","44","  @Before","45","  public void before() {","46","    WebService.Context context = new WebService.Context();","47","    new FakeWs().define(context);","48","","49","    underTest.setAction(context.controller(\"my_controller\").action(\"my_action\"));","50","  }","51","","52","  @Test","53","  public void has_param() {","54","    underTest.setParam(\"a_required_string\", \"foo\");","55","","56","    assertThat(underTest.hasParam(\"a_required_string\")).isTrue();","57","    assertThat(underTest.hasParam(\"unknown\")).isFalse();","58","  }","59","","60","  @Test","61","  public void required_param_is_missing() {","62","    expectedException.expect(IllegalArgumentException.class);","63","    expectedException.expectMessage(\"The 'required_param' parameter is missing\");","64","","65","    underTest.mandatoryParam(\"required_param\");","66","  }","67","","68","  @Test","69","  public void required_param() {","70","    underTest.setParam(\"a_required_string\", \"foo\");","71","    underTest.setParam(\"a_required_number\", \"42\");","72","    underTest.setParam(\"a_required_boolean\", \"true\");","73","    underTest.setParam(\"a_required_enum\", \"BETA\");","74","","75","    assertThat(underTest.mandatoryParam(\"a_required_string\")).isEqualTo(\"foo\");","76","    assertThat(underTest.mandatoryParamAsBoolean(\"a_required_boolean\")).isTrue();","77","    assertThat(underTest.mandatoryParamAsInt(\"a_required_number\")).isEqualTo(42);","78","    assertThat(underTest.mandatoryParamAsLong(\"a_required_number\")).isEqualTo(42L);","79","    assertThat(underTest.mandatoryParamAsEnum(\"a_required_enum\", RuleStatus.class)).isEqualTo(RuleStatus.BETA);","80","  }","81","","82","  @Test","83","  public void required_param_as_strings() {","84","    underTest.setParam(\"a_required_string\", \"foo,bar\");","85","","86","    assertThat(underTest.mandatoryParamAsStrings(\"a_required_string\")).containsExactly(\"foo\", \"bar\");","87","  }","88","","89","  @Test","90","  public void fail_if_no_required_param_as_strings() {","91","    expectedException.expect(IllegalArgumentException.class);","92","    expectedException.expectMessage(\"The 'a_required_string' parameter is missing\");","93","","94","    underTest.mandatoryParamAsStrings(\"a_required_string\");","95","  }","96","","97","  @Test","98","  public void default_value_of_optional_param() {","99","    assertThat(underTest.param(\"has_default_string\")).isEqualTo(\"the_default_string\");","100","  }","101","","102","  @Test","103","  public void param_as_string() {","104","    assertThat(underTest.setParam(\"a_string\", \"foo\").param(\"a_string\")).isEqualTo(\"foo\");","105","    assertThat(underTest.setParam(\"a_string\", \" f o o \\r\\n \").param(\"a_string\")).isEqualTo(\"f o o\");","106","  }","107","","108","  @Test","109","  public void null_param() {","110","    assertThat(underTest.param(\"a_string\")).isNull();","111","    assertThat(underTest.paramAsBoolean(\"a_boolean\")).isNull();","112","    assertThat(underTest.paramAsInt(\"a_number\")).isNull();","113","    assertThat(underTest.paramAsLong(\"a_number\")).isNull();","114","  }","115","","116","  @Test","117","  public void param_as_int() {","118","    assertThat(underTest.setParam(\"a_number\", \"123\").paramAsInt(\"a_number\")).isEqualTo(123);","119","    assertThat(underTest.setParam(\"a_number\", \"123\").paramAsInt(\"a_number\", 42)).isEqualTo(123);","120","    assertThat(underTest.setParam(\"a_number\", null).paramAsInt(\"a_number\", 42)).isEqualTo(123);","121","  }","122","","123","  @Test","124","  public void fail_when_param_is_not_an_int() {","125","    expectedException.expect(IllegalArgumentException.class);","126","    expectedException.expectMessage(\"The 'a_number' parameter cannot be parsed as an integer value: not-an-int\");","127","","128","    assertThat(underTest.setParam(\"a_number\", \"not-an-int\").paramAsInt(\"a_number\")).isEqualTo(123);","129","  }","130","","131","  @Test","132","  public void fail_when_param_is_not_an_int_with_default_value() {","133","    expectedException.expect(IllegalArgumentException.class);","134","    expectedException.expectMessage(\"The 'a_number' parameter cannot be parsed as an integer value: not_an_int\");","135","","136","    underTest.setParam(\"a_number\", \"not_an_int\").paramAsInt(\"a_number\", 42);","137","  }","138","","139","  @Test","140","  public void param_as_long() {","141","    assertThat(underTest.setParam(\"a_number\", \"123\").paramAsLong(\"a_number\")).isEqualTo(123L);","142","    assertThat(underTest.setParam(\"a_number\", \"123\").paramAsLong(\"a_number\", 42L)).isEqualTo(123L);","143","    assertThat(underTest.setParam(\"a_number\", null).paramAsLong(\"a_number\", 42L)).isEqualTo(123L);","144","  }","145","","146","  @Test","147","  public void fail_when_param_is_not_a_long() {","148","    expectedException.expect(IllegalArgumentException.class);","149","    expectedException.expectMessage(\"The 'a_number' parameter cannot be parsed as a long value: not_a_long\");","150","","151","    underTest.setParam(\"a_number\", \"not_a_long\").paramAsLong(\"a_number\");","152","  }","153","","154","  @Test","155","  public void fail_when_param_is_not_a_long_with_default_value() {","156","    expectedException.expect(IllegalArgumentException.class);","157","    expectedException.expectMessage(\"The 'a_number' parameter cannot be parsed as a long value: not_a_long\");","158","","159","    underTest.setParam(\"a_number\", \"not_a_long\").paramAsLong(\"a_number\", 42L);","160","  }","161","","162","  @Test","163","  public void param_as_boolean() {","164","    assertThat(underTest.setParam(\"a_boolean\", \"true\").paramAsBoolean(\"a_boolean\")).isTrue();","165","    assertThat(underTest.setParam(\"a_boolean\", \"yes\").paramAsBoolean(\"a_boolean\")).isTrue();","166","    assertThat(underTest.setParam(\"a_boolean\", \"false\").paramAsBoolean(\"a_boolean\")).isFalse();","167","    assertThat(underTest.setParam(\"a_boolean\", \"no\").paramAsBoolean(\"a_boolean\")).isFalse();","168","  }","169","","170","  @Test","171","  public void fail_if_incorrect_param_as_boolean() {","172","    expectedException.expect(IllegalArgumentException.class);","173","    expectedException.expectMessage(\"Property a_boolean is not a boolean value: oui\");","174","","175","    underTest.setParam(\"a_boolean\", \"oui\").paramAsBoolean(\"a_boolean\");","176","  }","177","","178","  @Test","179","  public void param_as_enum() {","180","    assertThat(underTest.setParam(\"a_enum\", \"BETA\").paramAsEnum(\"a_enum\", RuleStatus.class)).isEqualTo(RuleStatus.BETA);","181","  }","182","","183","  @Test","184","  public void param_as_enums() {","185","    assertThat(underTest.setParam(\"a_enum\", \"BETA,READY\").paramAsEnums(\"a_enum\", RuleStatus.class)).containsOnly(","186","      RuleStatus.BETA, RuleStatus.READY);","187","  }","188","","189","  @Test","190","  public void param_as_date() {","191","    assertThat(underTest.setParam(\"a_date\", \"2014-05-27\").paramAsDate(\"a_date\")).isEqualTo(DateUtils.parseDate(\"2014-05-27\"));","192","  }","193","","194","  @Test","195","  public void fail_when_param_as_date_not_a_date() {","196","    expectedException.expect(IllegalArgumentException.class);","197","    expectedException.expectMessage(\"The date 'polop' does not respect format 'yyyy-MM-dd'\");","198","","199","    underTest.setParam(\"a_date\", \"polop\").paramAsDate(\"a_date\");","200","  }","201","","202","  @Test","203","  public void param_as_datetime() {","204","    assertThat(underTest.setParam(\"a_datetime\", \"2014-05-27T15:50:45+0100\").paramAsDateTime(\"a_datetime\")).isEqualTo(DateUtils.parseDateTime(\"2014-05-27T15:50:45+0100\"));","205","    assertThat(underTest.setParam(\"a_datetime\", \"2014-05-27\").paramAsDateTime(\"a_datetime\")).isEqualTo(DateUtils.parseDate(\"2014-05-27\"));","206","  }","207","","208","  @Test","209","  public void fail_when_param_as_datetime_not_a_datetime() {","210","    expectedException.expect(IllegalArgumentException.class);","211","    expectedException.expectMessage(\"'polop' cannot be parsed as either a date or date+time\");","212","","213","    underTest.setParam(\"a_datetime\", \"polop\").paramAsDateTime(\"a_datetime\");","214","  }","215","","216","  @Test","217","  public void param_as_strings() {","218","    assertThat(underTest.paramAsStrings(\"a_string\")).isNull();","219","    assertThat(underTest.setParam(\"a_string\", \"\").paramAsStrings(\"a_string\")).isEmpty();","220","    assertThat(underTest.setParam(\"a_string\", \"bar\").paramAsStrings(\"a_string\")).containsExactly(\"bar\");","221","    assertThat(underTest.setParam(\"a_string\", \"bar,baz\").paramAsStrings(\"a_string\")).containsExactly(\"bar\", \"baz\");","222","    assertThat(underTest.setParam(\"a_string\", \"bar , baz\").paramAsStrings(\"a_string\")).containsExactly(\"bar\", \"baz\");","223","  }","224","","225","  @Test","226","  public void deprecated_key() {","227","    assertThat(underTest.setParam(\"deprecated_param\", \"bar\").param(\"new_param\")).isEqualTo(\"bar\");","228","  }","229","","230","  @Test","231","  public void fail_if_param_is_not_defined() {","232","    expectedException.expect(IllegalArgumentException.class);","233","    expectedException.expectMessage(\"BUG - parameter 'unknown' is undefined for action 'my_action'\");","234","","235","    underTest.param(\"unknown\");","236","  }","237","","238","  @Test","239","  public void verify_possible_values() {","240","    underTest.setParam(\"has_possible_values\", \"foo\");","241","    assertThat(underTest.param(\"has_possible_values\")).isEqualTo(\"foo\");","242","  }","243","","244","  @Test","245","  public void fail_if_not_a_possible_value() {","246","    underTest.setParam(\"has_possible_values\", \"not_possible\");","247","","248","    expectedException.expect(IllegalArgumentException.class);","249","    expectedException.expectMessage(\"Value of parameter 'has_possible_values' (not_possible) must be one of: [foo, bar]\");","250","","251","    underTest.param(\"has_possible_values\");","252","  }","253","","254","  @Test","255","  public void param_as_input_stream() throws Exception {","256","    assertThat(underTest.paramAsInputStream(\"a_string\")).isNull();","257","    assertThat(IOUtils.toString(underTest.setParam(\"a_string\", \"\").paramAsInputStream(\"a_string\"))).isEmpty();","258","    assertThat(IOUtils.toString(underTest.setParam(\"a_string\", \"foo\").paramAsInputStream(\"a_string\"))).isEqualTo(\"foo\");","259","  }","260","","261","  private static class FakeRequest extends ValidatingRequest {","280","    public FakeRequest setParam(String key, @Nullable String value) {","300","  private static class FakeWs implements WebService {"],"delete":["28","import org.sonar.api.utils.SonarException;","29","","30","import javax.annotation.Nullable;","31","","32","import java.io.InputStream;","33","import java.util.Map;","36","import static org.junit.Assert.fail;","41","  private static class SimpleRequest extends ValidatingRequest {","60","    public SimpleRequest setParam(String key, @Nullable String value) {","80","  private static class SimpleWs implements WebService {","119","  SimpleRequest request = new SimpleRequest();","120","","121","  @Before","122","  public void before() {","123","    WebService.Context context = new WebService.Context();","124","    new SimpleWs().define(context);","125","    request.setAction(context.controller(\"my_controller\").action(\"my_action\"));","126","  }","127","","128","  @Test","129","  public void has_param() {","130","    request.setParam(\"a_required_string\", \"foo\");","131","","132","    assertThat(request.hasParam(\"a_required_string\")).isTrue();","133","    assertThat(request.hasParam(\"unknown\")).isFalse();","134","  }","135","","136","  @Test","137","  public void required_param_is_missing() {","138","    try {","139","      request.mandatoryParam(\"required_param\");","140","      fail();","141","    } catch (IllegalArgumentException e) {","142","      assertThat(e).hasMessage(\"The 'required_param' parameter is missing\");","143","    }","144","  }","145","","146","  @Test","147","  public void required_param() {","148","    request.setParam(\"a_required_string\", \"foo\");","149","    request.setParam(\"a_required_number\", \"42\");","150","    request.setParam(\"a_required_boolean\", \"true\");","151","    request.setParam(\"a_required_enum\", \"BETA\");","152","","153","    assertThat(request.mandatoryParam(\"a_required_string\")).isEqualTo(\"foo\");","154","    assertThat(request.mandatoryParamAsBoolean(\"a_required_boolean\")).isTrue();","155","    assertThat(request.mandatoryParamAsInt(\"a_required_number\")).isEqualTo(42);","156","    assertThat(request.mandatoryParamAsLong(\"a_required_number\")).isEqualTo(42L);","157","    assertThat(request.mandatoryParamAsEnum(\"a_required_enum\", RuleStatus.class)).isEqualTo(RuleStatus.BETA);","158","  }","159","","160","  @Test","161","  public void required_param_as_strings() {","162","    try {","163","      request.mandatoryParamAsStrings(\"a_required_string\");","164","    } catch (IllegalArgumentException e) {","165","      assertThat(e).hasMessage(\"The 'a_required_string' parameter is missing\");","166","    }","167","","168","    request.setParam(\"a_required_string\", \"foo,bar\");","169","    assertThat(request.mandatoryParamAsStrings(\"a_required_string\")).containsExactly(\"foo\", \"bar\");","170","  }","171","","172","  @Test","173","  public void default_value_of_optional_param() {","174","    assertThat(request.param(\"has_default_string\")).isEqualTo(\"the_default_string\");","175","  }","176","","177","  @Test","178","  public void param_as_string() {","179","    assertThat(request.setParam(\"a_string\", \"foo\").param(\"a_string\")).isEqualTo(\"foo\");","180","    assertThat(request.setParam(\"a_string\", \" f o o \\r\\n \").param(\"a_string\")).isEqualTo(\"f o o\");","181","  }","182","","183","  @Test","184","  public void null_param() {","185","    assertThat(request.param(\"a_string\")).isNull();","186","    assertThat(request.paramAsBoolean(\"a_boolean\")).isNull();","187","    assertThat(request.paramAsInt(\"a_number\")).isNull();","188","    assertThat(request.paramAsLong(\"a_number\")).isNull();","189","  }","190","","191","  @Test","192","  public void param_as_int() {","193","    assertThat(request.setParam(\"a_number\", \"123\").paramAsInt(\"a_number\")).isEqualTo(123);","194","  }","195","","196","  @Test","197","  public void param_as_long() {","198","    assertThat(request.setParam(\"a_number\", \"123\").paramAsLong(\"a_number\")).isEqualTo(123L);","199","    assertThat(request.setParam(\"a_number\", \"123\").paramAsLong(\"a_number\", 42L)).isEqualTo(123L);","200","    assertThat(request.setParam(\"a_number\", null).paramAsLong(\"a_number\", 42L)).isEqualTo(123L);","201","  }","202","","203","  @Test","204","  public void param_as_boolean() {","205","    assertThat(request.setParam(\"a_boolean\", \"true\").paramAsBoolean(\"a_boolean\")).isTrue();","206","    assertThat(request.setParam(\"a_boolean\", \"yes\").paramAsBoolean(\"a_boolean\")).isTrue();","207","    assertThat(request.setParam(\"a_boolean\", \"false\").paramAsBoolean(\"a_boolean\")).isFalse();","208","    assertThat(request.setParam(\"a_boolean\", \"no\").paramAsBoolean(\"a_boolean\")).isFalse();","209","    try {","210","      request.setParam(\"a_boolean\", \"oui\").paramAsBoolean(\"a_boolean\");","211","      fail();","212","    } catch (IllegalArgumentException e) {","213","      assertThat(e).hasMessage(\"Property a_boolean is not a boolean value: oui\");","214","    }","215","  }","216","","217","  @Test","218","  public void param_as_enum() {","219","    assertThat(request.setParam(\"a_enum\", \"BETA\").paramAsEnum(\"a_enum\", RuleStatus.class)).isEqualTo(RuleStatus.BETA);","220","  }","221","","222","  @Test","223","  public void param_as_enums() {","224","    assertThat(request.setParam(\"a_enum\", \"BETA,READY\").paramAsEnums(\"a_enum\", RuleStatus.class)).containsOnly(","225","      RuleStatus.BETA, RuleStatus.READY);","226","  }","227","","228","  @Test","229","  public void param_as_date() {","230","    assertThat(request.setParam(\"a_date\", \"2014-05-27\").paramAsDate(\"a_date\")).isEqualTo(DateUtils.parseDate(\"2014-05-27\"));","231","  }","232","","233","  @Test","234","  public void param_as_datetime() {","235","    assertThat(request.setParam(\"a_datetime\", \"2014-05-27T15:50:45+0100\").paramAsDateTime(\"a_datetime\")).isEqualTo(DateUtils.parseDateTime(\"2014-05-27T15:50:45+0100\"));","236","    assertThat(request.setParam(\"a_datetime\", \"2014-05-27\").paramAsDateTime(\"a_datetime\")).isEqualTo(DateUtils.parseDate(\"2014-05-27\"));","237","    try {","238","      request.setParam(\"a_datetime\", \"polop\").paramAsDateTime(\"a_datetime\");","239","    } catch (SonarException error) {","240","      assertThat(error.getMessage()).isEqualTo(\"'polop' cannot be parsed as either a date or date+time\");","241","    }","242","  }","243","","244","  @Test","245","  public void param_as_strings() {","246","    assertThat(request.paramAsStrings(\"a_string\")).isNull();","247","    assertThat(request.setParam(\"a_string\", \"\").paramAsStrings(\"a_string\")).isEmpty();","248","    assertThat(request.setParam(\"a_string\", \"bar\").paramAsStrings(\"a_string\")).containsExactly(\"bar\");","249","    assertThat(request.setParam(\"a_string\", \"bar,baz\").paramAsStrings(\"a_string\")).containsExactly(\"bar\", \"baz\");","250","    assertThat(request.setParam(\"a_string\", \"bar , baz\").paramAsStrings(\"a_string\")).containsExactly(\"bar\", \"baz\");","251","  }","252","","253","  @Test","254","  public void deprecated_key() {","255","    assertThat(request.setParam(\"deprecated_param\", \"bar\").param(\"new_param\")).isEqualTo(\"bar\");","256","  }","257","","258","  @Test","259","  public void fail_if_param_is_not_defined() {","260","    try {","261","      request.param(\"unknown\");","262","    } catch (IllegalArgumentException e) {","263","      assertThat(e).hasMessage(\"BUG - parameter 'unknown' is undefined for action 'my_action'\");","264","    }","265","  }","266","","267","  @Test","268","  public void verify_possible_values() {","269","    request.setParam(\"has_possible_values\", \"foo\");","270","    assertThat(request.param(\"has_possible_values\")).isEqualTo(\"foo\");","271","","272","    try {","273","      request.setParam(\"has_possible_values\", \"not_possible\");","274","      request.param(\"has_possible_values\");","275","    } catch (IllegalArgumentException e) {","276","      assertThat(e).hasMessage(\"Value of parameter 'has_possible_values' (not_possible) must be one of: [foo, bar]\");","277","    }","278","  }","279","","280","  @Test","281","  public void param_as_input_stream() throws Exception {","282","    assertThat(request.paramAsInputStream(\"a_string\")).isNull();","283","    assertThat(IOUtils.toString(request.setParam(\"a_string\", \"\").paramAsInputStream(\"a_string\"))).isEmpty();","284","    assertThat(IOUtils.toString(request.setParam(\"a_string\", \"foo\").paramAsInputStream(\"a_string\"))).isEqualTo(\"foo\");","285","  }"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/ws\/L10nWs.java":[{"add":[],"delete":["78",""]}]}},"30edd004be7d356a446735766d7edb9c4ef6cbc1":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/BulkApplyTemplateModal.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/create\/components\/__tests__\/ProjectKeyInput-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/__tests__\/BulkApplyTemplateModal-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/SourceViewerHeader.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/BulkApplyTemplateModal.tsx":[{"add":["90","            qualifiers: this.props.qualifier,"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/create\/components\/__tests__\/ProjectKeyInput-test.tsx":[{"add":["61","","62","it('should handle Change', async () => {","63","  const onChange = jest.fn();","64","  const wrapper = shallow(<ProjectKeyInput onChange={onChange} value=\"\" \/>);","65","  await waitAndUpdate(wrapper);","66","","67","  wrapper.find('input').simulate('change', { currentTarget: { value: 'key' } });","68","","69","  expect(wrapper.state('touched')).toBe(true);","70","  expect(onChange).toBeCalledWith('key');","71","});","72","","73","it('should ignore promise return if value has been changed in the meantime', async () => {","74","  const onChange = (value: string) => wrapper.setProps({ value });","75","  const wrapper = shallow(<ProjectKeyInput onChange={onChange} value=\"\" \/>);","76","  await waitAndUpdate(wrapper);","77","","78","  wrapper.find('input').simulate('change', { currentTarget: { value: 'exists' } });","79","  wrapper.find('input').simulate('change', { currentTarget: { value: 'exists%' } });","80","","81","  jest.runAllTimers();","82","  await new Promise(setImmediate);","83","","84","  expect(wrapper.state('touched')).toBe(true);","85","  expect(wrapper.state('error')).toBe('onboarding.create_project.project_key.error');","86","});"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/__tests__\/BulkApplyTemplateModal-test.tsx":[{"add":["73","  const wrapper = shallow(render({ qualifier: 'VW', selection: ['proj1', 'proj2'] }));","90","    qualifiers: 'VW',"],"delete":["73","  const wrapper = shallow(render({ selection: ['proj1', 'proj2'] }));"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/SourceViewerHeader.tsx":[{"add":["75","    return (","76","      issues &&","77","      issues.length > 0 && (","104","      )","105","    );"],"delete":["75","    if (issues && issues.length > 0) {","76","      return (","103","      );","104","    }"]}]}},"1e1af62df661c8c43786bae8de2bf74f2d00d33d":{"changes":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY"},"diff":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["2577","component_navigation.status.failed=The last background task has failed.","2578","component_navigation.status.failed_X=The {type} has failed.","2579","component_navigation.status.failed.admin=The last background task has failed. More details available on the {url} page.","2580","component_navigation.status.failed_X.admin=The {type} has failed. More details available on the {url} page.","2582","component_navigation.status.failed_branch_X=The last {type} on this project ({branch}) failed.","2584","component_navigation.status.failed_branch_X.admin=The last {type} on this project ({branch}) failed. More details available on the {url} page."],"delete":["2577","component_navigation.status.failed=The last analysis has failed.","2578","component_navigation.status.failed.admin=The last analysis has failed. More details available on the {url} page."]}]}},"66fe88392e8301a9b7dba39a234cefe4ad9cd1ef":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/actions.ts":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/actions.ts":[{"add":["27","    return {","28","      locationsNavigator: true,","29","      selectedFlowIndex,","30","      \/\/ Also reset index = -1 to 0, we don't want to start on the issue when enabling the location navigator","31","      selectedLocationIndex:","32","        !selectedLocationIndex || selectedLocationIndex < 0 ? 0 : selectedLocationIndex","33","    };"],"delete":["20","import { allLocationsEmpty } from '.\/utils';","28","    if (!allLocationsEmpty(openIssue, selectedFlowIndex)) {","29","      return {","30","        locationsNavigator: true,","31","        selectedFlowIndex,","32","        \/\/ Also reset index = -1 to 0, we don't want to start on the issue when enabling the location navigator","33","        selectedLocationIndex:","34","          !selectedLocationIndex || selectedLocationIndex < 0 ? 0 : selectedLocationIndex","35","      };","36","    }"]}]}},"1cef2be2d888440727f9c90c75b4a2d263c55702":{"changes":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/report\/ComponentsPublisherTest.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/ComponentsPublisher.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/report\/ComponentsPublisherTest.java":[{"add":["23","import java.nio.file.Files;","198","  public void should_write_relative_path_to_root_for_modules_in_flat_hierarchy() throws IOException {","199","    Path rootBaseDir = temp.newFolder().toPath();","200","    Path module1BaseDir = rootBaseDir.resolve(\"module1\");","201","    Path module2BaseDir = rootBaseDir.resolve(\"module2\");","202","    Files.createDirectories(module1BaseDir);","203","    Files.createDirectories(module2BaseDir);","204","","205","    ProjectDefinition rootDef = ProjectDefinition.create()","206","      .setKey(\"foo\")","207","      .setProperty(CoreProperties.PROJECT_VERSION_PROPERTY, \"1.0\")","208","      .setName(\"Root project\")","209","      .setDescription(\"Root description\")","210","      .setBaseDir(rootBaseDir.toFile())","211","      .setWorkDir(temp.newFolder());","212","    DefaultInputModule root = new DefaultInputModule(rootDef, 1);","213","","214","    ProjectDefinition module1Def = ProjectDefinition.create()","215","      .setKey(\"module1k\")","216","      .setName(\"Module1\")","217","      .setDescription(\"Module description\")","218","      .setBaseDir(module1BaseDir.toFile())","219","      .setWorkDir(temp.newFolder());","220","    rootDef.addSubProject(module1Def);","221","    DefaultInputModule module1 = new DefaultInputModule(module1Def, 2);","222","","223","    ProjectDefinition module2Def = ProjectDefinition.create()","224","      .setKey(\"module2k\")","225","      .setName(\"Module2\")","226","      .setDescription(\"Module description\")","227","      .setBaseDir(module2BaseDir.toFile())","228","      .setWorkDir(temp.newFolder());","229","    module1Def.addSubProject(module2Def);","230","    DefaultInputModule module2 = new DefaultInputModule(module2Def, 3);","231","","232","    Map<DefaultInputModule, DefaultInputModule> modules = new HashMap<>();","233","    modules.put(module2, module1);","234","    modules.put(module1, root);","235","    moduleHierarchy = new DefaultInputModuleHierarchy(modules);","236","    tree.index(module2, module1);","237","    tree.index(module1, root);","238","    ComponentsPublisher publisher = new ComponentsPublisher(moduleHierarchy, tree, branchConfiguration);","239","    publisher.publish(writer);","240","","241","    assertThat(reader.readComponent(2).getProjectRelativePath()).isEqualTo(\"module1\");","242","    assertThat(reader.readComponent(3).getProjectRelativePath()).isEqualTo(\"module2\");","243","  }","244","","245","  @Test"],"delete":[]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/ComponentsPublisher.java":[{"add":["76","   * Writes the tree of components recursively, deep-first.","77","   *","127","    }","129","    String projectRelativePath = getProjectRelativePath(component);","130","    if (projectRelativePath != null) {","131","      builder.setProjectRelativePath(projectRelativePath);"],"delete":["76","   * Writes the tree of components recursively, deep-first. ","127","      String projectRelativePath = getProjectRelativePath(component);","128","      if (projectRelativePath != null) {","129","        builder.setProjectRelativePath(projectRelativePath);","130","      }"]}]}},"d1fadbe08865e7bb38c7a278148053e793422818":{"changes":{"server\/sonar-process-monitor\/src\/main\/java\/org\/sonar\/process\/monitor\/Monitor.java":"MODIFY"},"diff":{"server\/sonar-process-monitor\/src\/main\/java\/org\/sonar\/process\/monitor\/Monitor.java":[{"add":["453","    if (t == null || Thread.currentThread() == t) {"],"delete":["453","    if (t == null) {"]}]}},"839fff93961cd93c14fd2986825a8b778e846c4a":{"changes":{"server\/sonar-server-common\/src\/test\/java\/org\/sonar\/server\/rule\/index\/RuleIndexerTest.java":"MODIFY","server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/rule\/index\/RuleIndexer.java":"MODIFY"},"diff":{"server\/sonar-server-common\/src\/test\/java\/org\/sonar\/server\/rule\/index\/RuleIndexerTest.java":[{"add":["36","import org.sonar.db.rule.RuleMetadataDto;","41","import static java.util.Collections.emptyList;","42","import static java.util.Collections.emptySet;","76","    underTest.index(dbSession, emptyList());","108","    RuleMetadataDto metadata = RuleTesting.newRuleMetadata(rule, organization).setTags(ImmutableSet.of(\"bla\"));","109","    dbTester.getDbClient().ruleDao().insertOrUpdate(dbTester.getSession(), metadata);","126","  public void delete_rule_extension_from_index_when_setting_rule_tags_to_empty() {","127","    RuleDefinitionDto rule = dbTester.rules().insert(r -> r.setRuleKey(RuleTesting.randomRuleKeyOfMaximumLength()));","128","    underTest.commitAndIndex(dbTester.getSession(), rule.getId());","129","    OrganizationDto organization = dbTester.organizations().insert();","130","    RuleMetadataDto metadata = RuleTesting.newRuleMetadata(rule, organization).setTags(ImmutableSet.of(\"bla\"));","131","    dbTester.getDbClient().ruleDao().insertOrUpdate(dbTester.getSession(), metadata);","132","    underTest.commitAndIndex(dbTester.getSession(), rule.getId(), organization);","133","","134","    \/\/ index tags","135","    RuleExtensionDoc doc = new RuleExtensionDoc()","136","      .setRuleId(rule.getId())","137","      .setScope(RuleExtensionScope.organization(organization.getUuid()));","138","    assertThat(es.getIds(RuleIndexDefinition.INDEX_TYPE_RULE_EXTENSION)).contains(doc.getId());","139","","140","    \/\/ update db table \"rules_metadata\" with empty tags and delete tags from index","141","    metadata = RuleTesting.newRuleMetadata(rule, organization).setTags(emptySet());","142","    dbTester.getDbClient().ruleDao().insertOrUpdate(dbTester.getSession(), metadata);","143","    underTest.commitAndIndex(dbTester.getSession(), rule.getId(), organization);","144","    assertThat(es.getIds(RuleIndexDefinition.INDEX_TYPE_RULE_EXTENSION)).doesNotContain(doc.getId());","145","  }","146","","147","  @Test"],"delete":["22","import java.util.Collections;","74","    underTest.index(dbSession, Collections.emptyList());","106","    dbTester.rules().insertOrUpdateMetadata(rule, organization, m -> m.setTags(ImmutableSet.of(\"bla\")));"]}],"server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/rule\/index\/RuleIndexer.java":[{"add":["178","    docIds.forEach(docId -> bulkIndexer.addDeletion(INDEX_TYPE_RULE_EXTENSION, docId.getId(), String.valueOf(docId.getRuleId())));"],"delete":["178","    docIds.forEach(docId -> bulkIndexer.addDeletion(INDEX_TYPE_RULE_EXTENSION, docId.getId(), docId.getId()));"]}]}},"2104453573fa15d1c5c3f8cee703d2cf3ccced55":{"changes":{"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/component\/ComponentMapper.xml":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/component\/ComponentDaoTest.java":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/component\/ComponentMapper.xml":[{"add":["342","        and not exists(","343","          select 1 from snapshots sp","344","          inner join project_branches pb on sp.component_uuid = pb.uuid","345","          where pb.project_uuid = p.uuid","346","        )"],"delete":[]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/component\/ComponentDaoTest.java":[{"add":["906","    ComponentDto provisionedProject = db.components()","907","      .insertPrivateProject(organization, p -> p.setDbKey(\"provisioned.project\").setName(\"Provisioned Project\"));","908","    ComponentDto provisionedPortfolio = db.components().insertPrivatePortfolio(organization);","909","","910","    SnapshotDto analyzedProject = db.components().insertProjectAndSnapshot(newPrivateProjectDto(organization));","911","    SnapshotDto analyzedDisabledProject = db.components().insertProjectAndSnapshot(newPrivateProjectDto(organization)","912","      .setEnabled(false));","913","    SnapshotDto analyzedPortfolio = db.components().insertProjectAndSnapshot(ComponentTesting.newView(organization));","914","","930","      .containsOnly(provisionedProject.uuid(), provisionedPortfolio.uuid());","950","  public void selectByQuery_onProvisionedOnly_filters_projects_with_analysis_on_branch() {","951","    Supplier<ComponentQuery.Builder> query = () -> ComponentQuery.builder()","952","      .setQualifiers(Qualifiers.PROJECT)","953","      .setOnProvisionedOnly(true);","954","","955","    \/\/ the project does not have any analysis","956","    OrganizationDto organization = db.organizations().insert();","957","    ComponentDto project = db.components().insertMainBranch(organization);","958","    assertThat(underTest.selectByQuery(dbSession, organization.getUuid(), query.get().build(), 0, 10))","959","      .extracting(ComponentDto::uuid)","960","      .containsOnly(project.uuid());","961","","962","    \/\/ the project does not have analysis of main branch but only","963","    \/\/ analysis of non-main branches","964","    ComponentDto branchWithoutAnalysis = db.components().insertProjectBranch(project);","965","    ComponentDto branchWithAnalysis = db.components().insertProjectBranch(project);","966","    db.components().insertSnapshot(branchWithAnalysis);","967","    assertThat(underTest.selectByQuery(dbSession, organization.getUuid(), query.get().build(), 0, 10))","968","      .isEmpty();","969","  }","970","","971","  @Test"],"delete":["905","    ComponentDto provisionedProject = db.components()","906","      .insertComponent(newPrivateProjectDto(organization).setDbKey(\"provisioned.project\").setName(\"Provisioned Project\"));","907","    ComponentDto provisionedView = db.components().insertView(organization);","908","    String projectUuid = db.components().insertProjectAndSnapshot(newPrivateProjectDto(organization)).getComponentUuid();","909","    String disabledProjectUuid = db.components().insertProjectAndSnapshot(newPrivateProjectDto(organization).setEnabled(false)).getComponentUuid();","910","    String viewUuid = db.components().insertProjectAndSnapshot(ComponentTesting.newView(organization)).getComponentUuid();","912","    Set<String> projectQualifiers = newHashSet(Qualifiers.PROJECT);","928","      .containsOnly(provisionedProject.uuid(), provisionedView.uuid());"]}]}},"489831d3073f67cb838fd607fa90a344125c33f2":{"changes":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/qualityprofile\/QProfileChangeDaoTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualityprofile\/ws\/ChangelogAction.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/qualityprofile\/ws\/ChangelogActionTest.java":"MODIFY","sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/qualityprofile\/ChangelogWsRequest.java":"ADD","sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/qualityprofile\/QualityProfilesService.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/qualityprofile\/QProfileChangeDao.java":"MODIFY","tests\/src\/test\/java\/org\/sonarqube\/tests\/qualityProfile\/QualityProfilesWsTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/qualityprofile\/QProfileChangeMapper.java":"MODIFY","server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/qualityprofile\/QProfileChangeMapper.xml":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/qualityprofile\/QProfileChangeDaoTest.java":[{"add":["190","  public void countByQuery() {","193","    long start = system2.now();","197","    long end = system2.now();","199","    assertThat(underTest.countByQuery(dbSession, new QProfileChangeQuery(profile1.getKee()))).isEqualTo(2);","200","    assertThat(underTest.countByQuery(dbSession, new QProfileChangeQuery(profile2.getKee()))).isEqualTo(1);","201","    assertThat(underTest.countByQuery(dbSession, new QProfileChangeQuery(\"does_not_exist\"))).isEqualTo(0);","202","","203","    QProfileChangeQuery query = new QProfileChangeQuery(profile1.getKee());","204","    query.setToExcluded(start);","205","    assertThat(underTest.countByQuery(dbSession, query)).isEqualTo(0);","206","","207","    QProfileChangeQuery query2 = new QProfileChangeQuery(profile1.getKee());","208","    query2.setToExcluded(end);","209","    assertThat(underTest.countByQuery(dbSession, query2)).isEqualTo(2);","222","    assertThat(underTest.countByQuery(dbSession, new QProfileChangeQuery(profile1.getKee()))).isEqualTo(0);","223","    assertThat(underTest.countByQuery(dbSession, new QProfileChangeQuery(profile2.getKee()))).isEqualTo(1);","233","    assertThat(underTest.countByQuery(dbSession, new QProfileChangeQuery(profile1.getKee()))).isEqualTo(1);"],"delete":["190","  public void countForQProfileUuid() {","197","    assertThat(underTest.countForQProfileUuid(dbSession, profile1.getKee())).isEqualTo(2);","198","    assertThat(underTest.countForQProfileUuid(dbSession, profile2.getKee())).isEqualTo(1);","199","    assertThat(underTest.countForQProfileUuid(dbSession, \"does_not_exist\")).isEqualTo(0);","212","    assertThat(underTest.countForQProfileUuid(dbSession, profile1.getKee())).isEqualTo(0);","213","    assertThat(underTest.countForQProfileUuid(dbSession, profile2.getKee())).isEqualTo(1);","223","    assertThat(underTest.countForQProfileUuid(dbSession, profile1.getKee())).isEqualTo(1);"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualityprofile\/ws\/ChangelogAction.java":[{"add":["110","      int total = dbClient.qProfileChangeDao().countByQuery(dbSession, query);"],"delete":["110","      int total = dbClient.qProfileChangeDao().countForQProfileUuid(dbSession, query.getProfileUuid());"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/qualityprofile\/ws\/ChangelogActionTest.java":[{"add":["59","import static org.sonarqube.ws.client.qualityprofile.QualityProfileWsParameters.PARAM_SINCE;","236","  public void changelog_filter_by_since() throws Exception {","237","    QProfileDto qualityProfile = dbTester.qualityProfiles().insert(organization);","238","    system2.setNow(DateUtils.parseDateTime(\"2011-04-25T01:15:42+0100\").getTime());","239","    QProfileChangeDto change = QualityProfileTesting.newQProfileChangeDto()","240","      .setUuid(null)","241","      .setCreatedAt(0)","242","      .setRulesProfileUuid(qualityProfile.getRulesProfileUuid());","243","    DbSession session = dbTester.getSession();","244","    dbTester.getDbClient().qProfileChangeDao().insert(session, change);","245","    session.commit();","246","","247","    String response = ws.newRequest()","248","      .setMethod(\"GET\")","249","      .setParam(PARAM_KEY, qualityProfile.getKee())","250","      .setParam(PARAM_SINCE, \"2011-04-25T01:15:42+0100\")","251","      .execute()","252","      .getInput();","253","","254","    assertThat(response).contains(\"\\\"total\\\":1\");","255","","256","    String response2 = ws.newRequest()","257","      .setMethod(\"GET\")","258","      .setParam(PARAM_KEY, qualityProfile.getKee())","259","      .setParam(PARAM_SINCE, \"2011-04-25T01:15:43+0100\")","260","      .execute()","261","      .getInput();","262","","263","    assertThat(response2).contains(\"\\\"total\\\":0\");","264","  }","265","","266","  @Test"],"delete":[]}],"sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/qualityprofile\/ChangelogWsRequest.java":[{"add":[],"delete":[]}],"sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/qualityprofile\/QualityProfilesService.java":[{"add":["61","import static org.sonarqube.ws.client.qualityprofile.QualityProfileWsParameters.PARAM_KEY;","64","import static org.sonarqube.ws.client.qualityprofile.QualityProfileWsParameters.PARAM_NAME;","68","import static org.sonarqube.ws.client.qualityprofile.QualityProfileWsParameters.PARAM_PARENT_QUALITY_PROFILE;","244","","245","  public String changelog(ChangelogWsRequest request) {","246","    PostRequest postRequest = new PostRequest(path(\"changelog\"))","247","      .setParam(\"language\", request.getLanguage())","248","      .setParam(\"organization\", request.getOrganization())","249","      .setParam(\"qualityProfile\", request.getQualityProfile());","250","    if (request.getP() != null) {","251","      postRequest.setParam(\"p\", request.getP());","252","    }","253","    if (request.getPs() != null) {","254","      postRequest.setParam(\"ps\", request.getPs());","255","    }","256","    if (request.getSince() != null) {","257","      postRequest.setParam(\"since\", request.getSince());","258","    }","259","    if (request.getTo() != null) {","260","      postRequest.setParam(\"to\", request.getTo());","261","    }","262","    return call(postRequest).content();","263","  }"],"delete":["62","import static org.sonarqube.ws.client.qualityprofile.QualityProfileWsParameters.PARAM_NAME;","66","import static org.sonarqube.ws.client.qualityprofile.QualityProfileWsParameters.PARAM_PARENT_QUALITY_PROFILE;","68","import static org.sonarqube.ws.client.qualityprofile.QualityProfileWsParameters.PARAM_KEY;","69","import static org.sonarqube.ws.client.qualityprofile.QualityProfileWsParameters.PARAM_QUALITY_PROFILE;"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/qualityprofile\/QProfileChangeDao.java":[{"add":["52","  \/**","53","   * Note: offset and limit of the query object will be ignored","54","   *\/","55","  public int countByQuery(DbSession dbSession, QProfileChangeQuery query) {","56","    return mapper(dbSession).countByQuery(query);"],"delete":["52","  public int countForQProfileUuid(DbSession dbSession, String profileUuid) {","53","    return mapper(dbSession).countForQProfileUuid(profileUuid);"]}],"tests\/src\/test\/java\/org\/sonarqube\/tests\/qualityProfile\/QualityProfilesWsTest.java":[{"add":["23","import org.json.JSONException;","27","import org.skyscreamer.jsonassert.JSONAssert;","28","import org.skyscreamer.jsonassert.JSONCompareMode;","40","import org.sonarqube.ws.client.qualityprofile.ChangelogWsRequest;","50","  private static final String EXPECTED_CHANGELOG = \"{\\\"total\\\":2,\\\"p\\\":1,\\\"ps\\\":50,\\\"events\\\":[\" +","51","    \"{\\\"authorLogin\\\":\\\"admin\\\",\\\"authorName\\\":\\\"Administrator\\\",\\\"action\\\":\\\"ACTIVATED\\\",\\\"ruleKey\\\":\\\"xoo:OneIssuePerLine\\\",\\\"ruleName\\\":\\\"One Issue Per Line\\\",\\\"params\\\":{\\\"severity\\\":\\\"MAJOR\\\"}},\" +","52","    \"{\\\"authorLogin\\\":\\\"admin\\\",\\\"authorName\\\":\\\"Administrator\\\",\\\"action\\\":\\\"ACTIVATED\\\",\\\"ruleKey\\\":\\\"xoo:OneBugIssuePerLine\\\",\\\"ruleName\\\":\\\"One Bug Issue Per Line\\\",\\\"params\\\":{\\\"severity\\\":\\\"MAJOR\\\"}}\" +","53","    \"]}\";","54","  private static final String EXPECTED_CHANGELOG_EMPTY = \"{\\\"total\\\":0,\\\"p\\\":1,\\\"ps\\\":50,\\\"events\\\":[]}\";","55","","130","  @Test","131","  public void changelog() throws JSONException {","132","    Organization org = tester.organizations().generate();","133","    CreateWsResponse.QualityProfile profile = tester.qProfiles().createXooProfile(org);","134","","135","    String changelog = tester.wsClient().qualityProfiles().changelog(ChangelogWsRequest.builder()","136","      .setOrganization(org.getKey())","137","      .setLanguage(profile.getLanguage())","138","      .setQualityProfile(profile.getName())","139","      .build());","140","    JSONAssert.assertEquals(EXPECTED_CHANGELOG_EMPTY, changelog, JSONCompareMode.STRICT);","141","","142","    tester.qProfiles().activateRule(profile, RULE_ONE_BUG_PER_LINE);","143","    tester.qProfiles().activateRule(profile, RULE_ONE_ISSUE_PER_LINE);","144","","145","    String changelog2 = tester.wsClient().qualityProfiles().changelog(ChangelogWsRequest.builder()","146","      .setOrganization(org.getKey())","147","      .setLanguage(profile.getLanguage())","148","      .setQualityProfile(profile.getName())","149","      .build());","150","    JSONAssert.assertEquals(EXPECTED_CHANGELOG, changelog2, JSONCompareMode.LENIENT);","151","","152","    String changelog3 = tester.wsClient().qualityProfiles().changelog(ChangelogWsRequest.builder()","153","      .setOrganization(org.getKey())","154","      .setLanguage(profile.getLanguage())","155","      .setQualityProfile(profile.getName())","156","      .setSince(\"2999-12-31T23:59:59+0000\")","157","      .build());","158","    JSONAssert.assertEquals(EXPECTED_CHANGELOG_EMPTY, changelog3, JSONCompareMode.STRICT);","159","  }","160",""],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/qualityprofile\/QProfileChangeMapper.java":[{"add":["31","  int countByQuery(@Param(\"query\") QProfileChangeQuery query);"],"delete":["31","  int countForQProfileUuid(@Param(\"qProfileUuid\") String qProfileUuid);"]}],"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/qualityprofile\/QProfileChangeMapper.xml":[{"add":["33","  <select id=\"countByQuery\" resultType=\"int\">","35","    <include refid=\"sqlSelectByQuery\" \/>","39","    select <include refid=\"selectColumns\" \/>","41","    order by qpc.created_at desc","47","    select <include refid=\"selectColumns\" \/>","49","    order by qpc.created_at desc","57","    select <include refid=\"selectColumns\" \/>","59","    order by qpc.created_at desc"],"delete":["33","  <select id=\"countForQProfileUuid\" resultType=\"int\">","35","    from qprofile_changes qpc","36","    inner join rules_profiles rp on rp.kee = qpc.rules_profile_uuid","37","    inner join org_qprofiles oqp on oqp.rules_profile_uuid = rp.kee","38","    where","39","      oqp.uuid = #{qProfileUuid, jdbcType=VARCHAR}","65","    select <include refid=\"selectColumns\" \/>","77","    order by qpc.created_at desc"]}]}},"dca7417787b33677ce4387d332e4fa25cfa0c5be":{"changes":{"\/dev\/null":"DELETE","server\/sonar-webserver\/src\/main\/java\/org\/sonar\/server\/platform\/platformlevel\/PlatformLevel4.java":"MODIFY"},"diff":{"\/dev\/null":[{"add":[],"delete":[]}],"server\/sonar-webserver\/src\/main\/java\/org\/sonar\/server\/platform\/platformlevel\/PlatformLevel4.java":[{"add":[],"delete":["60","import org.sonar.server.debt.DebtModelPluginRepository;","61","import org.sonar.server.debt.DebtModelXMLExporter;","62","import org.sonar.server.debt.DebtRulesXMLImporter;","434","      \/\/ technical debt","435","      DebtModelPluginRepository.class,","436","      DebtModelXMLExporter.class,","437","      DebtRulesXMLImporter.class,","438",""]}]}}}