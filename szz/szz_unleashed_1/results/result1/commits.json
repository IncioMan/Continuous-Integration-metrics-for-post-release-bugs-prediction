{"a815f59e579ff2eef9e31fb6ca981d436072b220":{"changes":{"server\/sonar-docs\/src\/templates\/page.tsx":"MODIFY"},"diff":{"server\/sonar-docs\/src\/templates\/page.tsx":[{"add":["159","        `<!-- sonarcloud -->[\\\\s\\\\S]*<h2>${heading.value!.replace(","160","          \/[.*+?^${}()|[\\]\\\\]\/g,","161","          '\\\\$&'","162","        )}<\\\\\/h2>[\\\\s\\\\S]*<!-- \/sonarcloud -->`,"],"delete":["159","        `<!-- sonarcloud -->[\\\\s\\\\S]*<h2>${heading.value}<\\\\\/h2>[\\\\s\\\\S]*<!-- \/sonarcloud -->`,"]}]}},"8bc4086d095f80bef3946f493357f70cf093c0c7":{"changes":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/DefinitionDefaults.js":"MODIFY"},"diff":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["1005","settings.reset_confirm.title=Reset Setting","1006","settings.reset_confirm.description=Are you sure that you want to reset this setting ?"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/DefinitionDefaults.js":[{"add":["21","import Modal from 'react-modal';","25","\/*::","26","type Props = {","27","  isDefault: boolean,","28","  onReset: () => void,","29","  setting: Object","30","};","31","*\/","32","\/*::","33","type State = { reseting: boolean };","34","*\/","35","","37","  \/*:: props: Props; *\/","38","  state \/*: State*\/ = { reseting: false };","39","","40","  handleClose = () => {","41","    this.setState({ reseting: false });","44","  handleReset = (e \/*: Event & {target: HTMLElement} *\/) => {","47","    this.setState({ reseting: true });","48","  };","49","","50","  handleSubmit = (event \/*: Event *\/) => {","51","    event.preventDefault();","53","    this.handleClose();","54","  };","55","","56","  renderModal() {","57","    const header = translate('settings.reset_confirm.title');","58","    return (","59","      <Modal","60","        isOpen={true}","61","        contentLabel={header}","62","        className=\"modal\"","63","        overlayClassName=\"modal-overlay\"","64","        onRequestClose={this.handleClose}>","65","        <header className=\"modal-head\">","66","          <h2>","67","            {header}","68","          <\/h2>","69","        <\/header>","70","        <form onSubmit={this.handleSubmit}>","71","          <div className=\"modal-body\">","72","            <p>","73","              {translate('settings.reset_confirm.description')}","74","            <\/p>","75","          <\/div>","76","          <footer className=\"modal-foot\">","77","            <button className=\"button-red\">","78","              {translate('reset_verb')}","79","            <\/button>","80","            <button type=\"reset\" className=\"button-link\" onClick={this.handleClose}>","81","              {translate('cancel')}","82","            <\/button>","83","          <\/footer>","84","        <\/form>","85","      <\/Modal>","86","    );","104","            <button onClick={this.handleReset}>","113","        {this.state.reseting && this.renderModal()}"],"delete":["21","import PropTypes from 'prop-types';","26","  static propTypes = {","27","    setting: PropTypes.object.isRequired,","28","    isDefault: PropTypes.bool.isRequired,","29","    onReset: PropTypes.func.isRequired","32","  handleReset(e \/*: Object *\/) {","53","            <button onClick={e => this.handleReset(e)}>"]}]}},"f457ba93734048ec9b7e2e980d18827d1d2a507f":{"changes":{"server\/sonar-web\/src\/main\/js\/main\/nav\/global\/search-view.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/main\/nav\/global\/search-view.js":[{"add":["200","      \/\/ if the input value has changed since we sent the request,","201","      \/\/ just ignore the output, because another request already sent","202","      if (q !== that._bufferedValue) {","203","        return;","204","      }","205",""],"delete":["144","    if (this.searchRequest != null && this.searchRequest.abort != null) {","145","      this.searchRequest.abort();","146","    }"]}]}},"240fbd41e6be19711c02d991d1aae3d169cfc0a9":{"changes":{"server\/sonar-web\/src\/main\/js\/app\/components\/__tests__\/ComponentContainer-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/ComponentContainer.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/app\/components\/__tests__\/ComponentContainer-test.tsx":[{"add":["163","  (getTasksForComponent as jest.Mock<any>)","164","    .mockResolvedValueOnce({","165","      queue: [{ id: 'foo', status: STATUSES.IN_PROGRESS }]","166","    })","167","    .mockResolvedValueOnce({","168","      queue: []","169","    });","171","","172","  \/\/ First round, there's something in the queue, and component navigation was","173","  \/\/ not called again (it's called once at mount, hence the 1 times assertion","174","  \/\/ here).","179","  jest.runOnlyPendingTimers();","180","","181","  \/\/ Second round, the queue is now empty, hence we assume the previous task","182","  \/\/ was done. We immediately load the component again.","184","","185","  \/\/ Trigger the update.","187","  \/\/ The component was correctly re-loaded.","189","  \/\/ The status API call will be called 1 final time after the component is","190","  \/\/ fully loaded, so the total will be 3.","193","  \/\/ Make sure the timeout was cleared. It should not be called again.","196","  \/\/ The number of calls haven't changed.","201","it('reloads component after task progress finished, and moves straight to current', async () => {","202","  jest.useFakeTimers();","203","  (getComponentData as jest.Mock<any>).mockResolvedValueOnce({","204","    component: { key: 'bar' }","205","  });","206","  (getTasksForComponent as jest.Mock<any>)","207","    .mockResolvedValueOnce({ queue: [] })","208","    .mockResolvedValueOnce({ queue: [], current: { id: 'foo', status: STATUSES.SUCCESS } });","209","  const wrapper = shallowRender();","210","","211","  \/\/ First round, nothing in the queue, and component navigation was not called","212","  \/\/ again (it's called once at mount, hence the 1 times assertion here).","213","  await waitAndUpdate(wrapper);","214","  expect(getComponentNavigation).toHaveBeenCalledTimes(1);","215","  expect(getTasksForComponent).toHaveBeenCalledTimes(1);","216","","217","  jest.runOnlyPendingTimers();","218","","219","  \/\/ Second round, nothing in the queue, BUT a success task is current. This","220","  \/\/ means the queue was processed too quick for us to see, and we didn't see","221","  \/\/ any pending tasks in the queue. So we immediately load the component again.","222","  expect(getTasksForComponent).toHaveBeenCalledTimes(2);","223","","224","  \/\/ Trigger the update.","225","  await waitAndUpdate(wrapper);","226","  \/\/ The component was correctly re-loaded.","227","  expect(getComponentNavigation).toHaveBeenCalledTimes(2);","228","  \/\/ The status API call will be called 1 final time after the component is","229","  \/\/ fully loaded, so the total will be 3.","230","  expect(getTasksForComponent).toHaveBeenCalledTimes(3);","231","});","232",""],"delete":["163","  const inProgressTask = { id: 'foo', status: STATUSES.IN_PROGRESS } as T.Task;","164","  (getTasksForComponent as jest.Mock<any>).mockResolvedValueOnce({ queue: [inProgressTask] });","170","  jest.runAllTimers();"]}],"server\/sonar-web\/src\/main\/js\/app\/components\/ComponentContainer.tsx":[{"add":["195","                (!currentTask && newCurrentTask) ||","196","                (currentTask && newCurrentTask && currentTask.id !== newCurrentTask.id);"],"delete":["195","                currentTask && newCurrentTask && currentTask.id !== newCurrentTask.id;"]}]}},"4691d62918615ce3eb313dad0c405c332a3775b4":{"changes":{"server\/sonar-docs\/src\/layouts\/layout.css":"MODIFY","server\/sonar-docs\/src\/components\/HeadingsLink.tsx":"MODIFY","server\/sonar-docs\/src\/components\/__tests__\/__snapshots__\/HeadingsLink-test.tsx.snap":"ADD","server\/sonar-docs\/src\/components\/__tests__\/HeadingsLink-test.tsx":"ADD"},"diff":{"server\/sonar-docs\/src\/layouts\/layout.css":[{"add":["331","  float: right;","332","  margin-top: 80px;","333","}","334","","335",".page-container .headings-container-fixed {","336","  position: fixed;","337","  width: inherit;","339","  border-left: 1px solid #cfd3d7;","340","  z-index: 100;","341","  background: white;"],"delete":["330","  float: right;","332","  border-left: 1px solid #cfd3d7;"]}],"server\/sonar-docs\/src\/components\/HeadingsLink.tsx":[{"add":["43","      )","53","      activeIndex: -1,","64","  scrollHandler = () => {","65","    if (this.skipScrollingHandler) {","66","      this.skipScrollingHandler = false;","67","      return;","68","    }","69","","70","    const scrollTop = window.pageYOffset || document.body.scrollTop;","71","    this.highlightHeading(scrollTop);","72","  };","73","","83","    this.setState({ activeIndex: headingIndex });","115","      <div className=\"headings-container\">","116","        <div className=\"headings-container-fixed\">","117","          <span>On this page<\/span>","118","          <ul>","119","            {headers.map((header, index) => {","120","              return (","121","                <HeadingAnchor","122","                  active={this.state.activeIndex === index}","123","                  clickHandler={this.clickHandler}","124","                  index={index + 1}","125","                  key={index}>","126","                  {header.value}","127","                <\/HeadingAnchor>","128","              );","129","            })}","130","          <\/ul>","131","        <\/div>"],"delete":["23","const MINIMUM_TOP_MARGIN = 80;","33","  marginTop: number;","45","      ),","46","      marginTop: MINIMUM_TOP_MARGIN","52","    this.scrollHandler();","76","    const scrollLimit = document.body.scrollHeight - document.body.clientHeight;","77","    this.setState({","78","      activeIndex: headingIndex,","79","      marginTop: Math.max(MINIMUM_TOP_MARGIN, Math.min(scrollTop, scrollLimit))","80","    });","101","  scrollHandler = () => {","102","    if (this.skipScrollingHandler) {","103","      this.skipScrollingHandler = false;","104","      return;","105","    }","106","","107","    const scrollTop = window.pageYOffset || document.body.scrollTop;","108","    this.highlightHeading(scrollTop);","109","  };","110","","122","      <div className=\"headings-container\" style={{ marginTop: this.state.marginTop + 'px' }}>","123","        <span>On this page<\/span>","124","        <ul>","125","          {headers.map((header, index) => {","126","            return (","127","              <HeadingAnchor","128","                active={this.state.activeIndex === index}","129","                clickHandler={this.clickHandler}","130","                index={index + 1}","131","                key={index}>","132","                {header.value}","133","              <\/HeadingAnchor>","134","            );","135","          })}","136","        <\/ul>"]}],"server\/sonar-docs\/src\/components\/__tests__\/__snapshots__\/HeadingsLink-test.tsx.snap":[{"add":[],"delete":[]}],"server\/sonar-docs\/src\/components\/__tests__\/HeadingsLink-test.tsx":[{"add":[],"delete":[]}]}},"721de262d732560c98256e7935017f6d5dd142a3":{"changes":{"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/webhook\/ws\/WebhookSupportTest.java":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/webhook\/ws\/WebhookSupport.java":"MODIFY"},"diff":{"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/webhook\/ws\/WebhookSupportTest.java":[{"add":["80","      .hasMessage(\"Invalid URL: loopback and wildcard addresses are not allowed for webhooks.\");"],"delete":["80","      .hasMessage(\"Invalid URL\");"]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/webhook\/ws\/WebhookSupport.java":[{"add":["62","        throw new IllegalArgumentException(\"Invalid URL: loopback and wildcard addresses are not allowed for webhooks.\");"],"delete":["62","        throw new IllegalArgumentException(\"Invalid URL\");"]}]}},"d3f1775ff556addcd4b666cf971aa9da2a176795":{"changes":{"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/history\/MigrationHistoryMeddler.java":"ADD","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/history\/MigrationHistoryMeddlerTest.java":"ADD","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/history\/MigrationHistoryImpl.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/MigrationConfigurationModule.java":"MODIFY","server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/container\/ComputeEngineContainerImplTest.java":"MODIFY","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/history\/MigrationHistoryImplTest.java":"MODIFY"},"diff":{"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/history\/MigrationHistoryMeddler.java":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/history\/MigrationHistoryMeddlerTest.java":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/history\/MigrationHistoryImpl.java":[{"add":["42","  private final MigrationHistoryMeddler migrationHistoryMeddler;","44","  public MigrationHistoryImpl(Database database, MigrationHistoryMeddler migrationHistoryMeddler) {","46","    this.migrationHistoryMeddler = migrationHistoryMeddler;","53","      migrationHistoryMeddler.meddle(this);"],"delete":["43","  public MigrationHistoryImpl(Database database) {"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/MigrationConfigurationModule.java":[{"add":["23","import org.sonar.server.platform.db.migration.history.MigrationHistoryMeddler;","78","      MigrationHistoryImpl.class,","79","      MigrationHistoryMeddler.class);"],"delete":["77","      MigrationHistoryImpl.class);"]}],"server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/container\/ComputeEngineContainerImplTest.java":[{"add":["124","          + 24 \/\/ MigrationConfigurationModule"],"delete":["124","          + 23 \/\/ MigrationConfigurationModule"]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/history\/MigrationHistoryImplTest.java":[{"add":["33","import static org.mockito.Mockito.mock;","34","import static org.mockito.Mockito.verify;","42","  private MigrationHistoryMeddler migrationHistoryMeddler = mock(MigrationHistoryMeddler.class);","43","  private MigrationHistoryImpl underTest = new MigrationHistoryImpl(dbTester.database(), migrationHistoryMeddler);","46","  public void start_does_not_fail_if_table_history_exists_and_calls_meddler() {","48","","49","    verify(migrationHistoryMeddler).meddle(underTest);"],"delete":["40","  private MigrationHistoryImpl underTest = new MigrationHistoryImpl(dbTester.database());","43","  public void start_does_not_fail_if_table_history_exists() {"]}]}},"ac73ac876fae3d027b9ffc83a79b8d324d409a04":{"changes":{"sonar-core\/src\/test\/java\/org\/sonar\/core\/issue\/tracking\/TrackerTest.java":"MODIFY","sonar-core\/src\/main\/java\/org\/sonar\/core\/issue\/tracking\/Tracking.java":"MODIFY","sonar-core\/src\/main\/java\/org\/sonar\/core\/issue\/tracking\/BlockRecognizer.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/batch\/issue\/tracking\/ServerIssueFromWs.java":"MODIFY","sonar-core\/src\/main\/java\/org\/sonar\/core\/issue\/tracking\/Trackable.java":"MODIFY"},"diff":{"sonar-core\/src\/test\/java\/org\/sonar\/core\/issue\/tracking\/TrackerTest.java":[{"add":["32","import static org.apache.commons.lang.StringUtils.trim;","41","  public static final RuleKey RULE_USE_DIAMOND = RuleKey.of(\"java\", \"UseDiamond\");","42","","353","  \/**","354","   * https:\/\/jira.sonarsource.com\/browse\/SONAR-7595","355","   *\/","356","  @Test","357","  public void match_only_one_issue_when_multiple_blocks_match_the_same_block() {","358","    FakeInput baseInput = FakeInput.createForSourceLines(","359","      \"public class Toto {\",","360","      \"  private final Deque<Set<DataItem>> one = new ArrayDeque<Set<DataItem>>();\",","361","      \"  private final Deque<Set<DataItem>> two = new ArrayDeque<Set<DataItem>>();\",","362","      \"  private final Deque<Integer> three = new ArrayDeque<Integer>();\",","363","      \"  private final Deque<Set<Set<DataItem>>> four = new ArrayDeque<Set<DataItem>>();\");","364","    Issue base1 = baseInput.createIssueOnLine(2, RULE_USE_DIAMOND, \"Use diamond\");","365","    baseInput.createIssueOnLine(3, RULE_USE_DIAMOND, \"Use diamond\");","366","    baseInput.createIssueOnLine(4, RULE_USE_DIAMOND, \"Use diamond\");","367","    baseInput.createIssueOnLine(5, RULE_USE_DIAMOND, \"Use diamond\");","368","","369","    FakeInput rawInput = FakeInput.createForSourceLines(","370","      \"public class Toto {\",","371","      \"  \/\/ move all lines\",","372","      \"  private final Deque<Set<DataItem>> one = new ArrayDeque<Set<DataItem>>();\",","373","      \"  private final Deque<Set<DataItem>> two = new ArrayDeque<>();\",","374","      \"  private final Deque<Integer> three = new ArrayDeque<>();\",","375","      \"  private final Deque<Set<Set<DataItem>>> four = new ArrayDeque<>();\");","376","    Issue raw1 = rawInput.createIssueOnLine(3, RULE_USE_DIAMOND, \"Use diamond\");","377","","378","    Tracking<Issue, Issue> tracking = tracker.track(rawInput, baseInput);","379","    assertThat(tracking.getUnmatchedBases()).hasSize(3);","380","    assertThat(tracking.baseFor(raw1)).isEqualTo(base1);","381","  }","382","","392","      this.message = trim(message);"],"delete":["359","      this.message = message;"]}],"sonar-core\/src\/main\/java\/org\/sonar\/core\/issue\/tracking\/Tracking.java":[{"add":["90","    if (!rawToBase.containsKey(raw)) {","91","      rawToBase.put(raw, base);","92","      baseToRaw.put(base, raw);","93","    }"],"delete":["90","    rawToBase.put(raw, base);","91","    baseToRaw.put(base, raw);"]}],"sonar-core\/src\/main\/java\/org\/sonar\/core\/issue\/tracking\/BlockRecognizer.java":[{"add":["77","    \/\/ Check if remaining number of lines exceeds threshold. It avoids processing too many combinations.","78","    if (basesByLine.keySet().size() * rawsByLine.keySet().size() >= 250_000) {","79","      return;","80","    }","81","","82","    List<LinePair> possibleLinePairs = Lists.newArrayList();","83","    for (Integer baseLine : basesByLine.keySet()) {","84","      for (Integer rawLine : rawsByLine.keySet()) {","85","        int weight = lengthOfMaximalBlock(baseInput.getLineHashSequence(), baseLine, rawInput.getLineHashSequence(), rawLine);","86","        possibleLinePairs.add(new LinePair(baseLine, rawLine, weight));","88","    }","89","    Collections.sort(possibleLinePairs, LinePairComparator.INSTANCE);","90","    for (LinePair linePair : possibleLinePairs) {","91","      \/\/ High probability that baseLine has been moved to rawLine, so we can map all issues on baseLine to all issues on rawLine","92","      map(rawsByLine.get(linePair.rawLine), basesByLine.get(linePair.baseLine), tracking);"],"delete":["77","    \/\/ Check if remaining number of lines exceeds threshold","78","    if (basesByLine.keySet().size() * rawsByLine.keySet().size() < 250000) {","79","      List<LinePair> possibleLinePairs = Lists.newArrayList();","80","      for (Integer baseLine : basesByLine.keySet()) {","81","        for (Integer rawLine : rawsByLine.keySet()) {","82","          int weight = lengthOfMaximalBlock(baseInput.getLineHashSequence(), baseLine, rawInput.getLineHashSequence(), rawLine);","83","          possibleLinePairs.add(new LinePair(baseLine, rawLine, weight));","84","        }","86","      Collections.sort(possibleLinePairs, LinePairComparator.INSTANCE);","87","      for (LinePair linePair : possibleLinePairs) {","88","        \/\/ High probability that baseLine has been moved to rawLine, so we can map all Issues on baseLine to all Issues on rawLine","89","        map(rawsByLine.get(linePair.rawLine), basesByLine.get(linePair.baseLine), tracking);","90","      }"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/batch\/issue\/tracking\/ServerIssueFromWs.java":[{"add":["23","import org.sonar.core.issue.tracking.Trackable;","24","","25","import static org.apache.commons.lang.StringUtils.trim;","62","    return dto.hasMsg() ? trim(dto.getMsg()) : \"\";"],"delete":["22","","23","import org.sonar.core.issue.tracking.Trackable;","61","    return dto.hasMsg() ? dto.getMsg() : \"\";"]}],"sonar-core\/src\/main\/java\/org\/sonar\/core\/issue\/tracking\/Trackable.java":[{"add":["33","  \/**","34","   * Trimmed message of issue","35","   *\/"],"delete":[]}]}},"ec250533041c5ef7536b7f6bec76fcca7fcd6fa7":{"changes":{"server\/sonar-web\/src\/main\/less\/components\/navbar.less":"MODIFY","server\/sonar-web\/src\/main\/js\/main\/nav\/global\/global-nav-search.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/less\/components\/navbar.less":[{"add":["246","","247","","248",".global-navbar-search-dropdown {","249","  max-height: 80vh;","250","  overflow-y: auto;","251","  overflow-x: hidden;","252","}"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/main\/nav\/global\/global-nav-search.js":[{"add":["101","          <div ref=\"container\" className=\"dropdown-menu dropdown-menu-right global-navbar-search-dropdown\"><\/div>"],"delete":["101","          <div ref=\"container\" className=\"dropdown-menu dropdown-menu-right\"><\/div>"]}]}},"88131a33e07fe611f32883079614d1e768f60076":{"changes":{"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/hotspot\/ws\/AssignActionTest.java":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/hotspot\/ws\/AssignAction.java":"MODIFY"},"diff":{"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/hotspot\/ws\/AssignActionTest.java":[{"add":["142","    insertAndLoginAsUserWithProjectUserPermission(randomAlphanumeric(10), project, UserRole.USER);","143","    UserDto assignee = insertUserWithProjectUserPermission(randomAlphanumeric(15), project);","144","","145","    when(issueFieldsSetter.assign(eq(hotspot.toDefaultIssue()), userMatcher(assignee), any(IssueChangeContext.class))).thenReturn(true);","146","","147","    executeRequest(hotspot, assignee.getLogin(), null);","148","","149","    verifyFieldSetters(assignee, null);","150","  }","151","","152","  @Test","153","  public void assign_hotspot_to_someone_for_private_project_branch() {","154","    ComponentDto project = dbTester.components().insertPrivateProject();","155","    ComponentDto branch = dbTester.components().insertProjectBranch(project);","156","    ComponentDto file = dbTester.components().insertComponent(newFileDto(branch));","157","    IssueDto hotspot = dbTester.issues().insertHotspot(branch, file);","158","","159","    insertAndLoginAsUserWithProjectUserPermission(randomAlphanumeric(10), project, UserRole.USER);","175","    insertAndLoginAsUserWithProjectUserPermission(randomAlphanumeric(10), project, UserRole.USER);","182","      .hasMessage(\"Provided user with login '%s' does not have 'Browse' permission to project\", assignee.getLogin());","183","  }","184","","185","  @Test","186","  public void fail_if_assignee_does_not_have_access_for_private_project_branch() {","187","    ComponentDto project = dbTester.components().insertPrivateProject();","188","    ComponentDto branch = dbTester.components().insertProjectBranch(project);","189","    ComponentDto file = dbTester.components().insertComponent(newFileDto(branch));","190","    IssueDto hotspot = dbTester.issues().insertHotspot(branch, file);","191","","192","    insertAndLoginAsUserWithProjectUserPermission(randomAlphanumeric(10), project, UserRole.USER);","193","    UserDto assignee = insertUser(randomAlphanumeric(15));","194","","195","    when(issueFieldsSetter.assign(eq(hotspot.toDefaultIssue()), userMatcher(assignee), any(IssueChangeContext.class))).thenReturn(true);","196","","197","    assertThatThrownBy(() -> executeRequest(hotspot, assignee.getLogin(), null))","198","      .isInstanceOf(IllegalArgumentException.class)","199","      .hasMessage(\"Provided user with login '%s' does not have 'Browse' permission to project\", assignee.getLogin());","209","    UserDto me = insertAndLoginAsUserWithProjectUserPermission(randomAlphanumeric(10), project, UserRole.USER);","334","    UserDto me = insertAndLoginAsUserWithProjectUserPermission(randomAlphanumeric(10), project, UserRole.CODEVIEWER);","475","  private UserDto insertAndLoginAsUserWithProjectUserPermission(String login, ComponentDto project, String permission) {","479","        dbClient.componentDao().selectByUuid(dbTester.getSession(), project.uuid()).get());"],"delete":["142","    insertAndLoginAsUserWithProjectUserPermission(randomAlphanumeric(10), hotspot, project, UserRole.USER);","158","    insertAndLoginAsUserWithProjectUserPermission(randomAlphanumeric(10), hotspot, project, UserRole.USER);","165","      .hasMessage(\"Provided user with login '%s' does not have access to project\", assignee.getLogin());","175","    UserDto me = insertAndLoginAsUserWithProjectUserPermission(randomAlphanumeric(10), hotspot, project, UserRole.USER);","300","    UserDto me = insertAndLoginAsUserWithProjectUserPermission(randomAlphanumeric(10), hotspot, project, UserRole.CODEVIEWER);","441","  private UserDto insertAndLoginAsUserWithProjectUserPermission(String login, IssueDto issue, ComponentDto project, String permission) {","445","        dbClient.componentDao().selectByUuid(dbTester.getSession(), issue.getProjectUuid()).get(),","446","        dbClient.componentDao().selectByUuid(dbTester.getSession(), issue.getComponentUuid()).get());"]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/hotspot\/ws\/AssignAction.java":[{"add":["76","      .setDescription(\"Login of the assignee with 'Browse' project permission\")","131","  private void checkAssigneeProjectPermission(DbSession dbSession, UserDto assignee, String issueProjectUuid) {","132","    ComponentDto componentDto = checkFoundWithOptional(dbClient.componentDao().selectByUuid(dbSession, issueProjectUuid),","134","    String mainProjectUuid = componentDto.getMainBranchProjectUuid() == null ? componentDto.uuid() : componentDto.getMainBranchProjectUuid();","135","    if (componentDto.isPrivate() && !hasProjectPermission(dbSession, assignee.getUuid(), mainProjectUuid)) {","136","      throw new IllegalArgumentException(String.format(\"Provided user with login '%s' does not have 'Browse' permission to project\", assignee.getLogin()));"],"delete":["76","      .setDescription(\"Login of the assignee\")","131","  private void checkAssigneeProjectPermission(DbSession dbSession, UserDto assignee, String projectUuid) {","132","    ComponentDto componentDto = checkFoundWithOptional(dbClient.componentDao().selectByUuid(dbSession, projectUuid),","134","    if (componentDto.isPrivate() && !hasProjectPermission(dbSession, assignee.getUuid(), projectUuid)) {","135","      throw new IllegalArgumentException(String.format(\"Provided user with login '%s' does not have access to project\", assignee.getLogin()));"]}]}},"5bc1fd00c729e6bec1d5b38e42235dcf7ff7d16a":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/es\/EsUtils.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/RuleServiceMediumTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/es\/EsUtilsTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/es\/EsUtils.java":[{"add":["46","","47","  \/**","48","   * See https:\/\/www.elastic.co\/guide\/en\/elasticsearch\/reference\/current\/query-dsl-regexp-query.html","49","   *\/","50","  private static final Pattern SPECIAL_REGEX_CHARS = Pattern.compile(\"[#@&~<>\\\"{}()\\\\[\\\\].+*?^$\\\\\\\\|]\");"],"delete":["46","  private static final Pattern SPECIAL_REGEX_CHARS = Pattern.compile(\"[{}()\\\\[\\\\].+*?^$\\\\\\\\|]\");"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/RuleServiceMediumTest.java":[{"add":["105","    assertThat(service.listTags(\"<foo>\", 10)).isEmpty();"],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/es\/EsUtilsTest.java":[{"add":["90","    assertThat(escapeSpecialRegexChars(\"<\")).isEqualTo(\"\\\\<\");","91","    assertThat(escapeSpecialRegexChars(\">\")).isEqualTo(\"\\\\>\");","92","    assertThat(escapeSpecialRegexChars(\"\\\"\")).isEqualTo(\"\\\\\\\"\");","93","    assertThat(escapeSpecialRegexChars(\"#\")).isEqualTo(\"\\\\#\");","94","    assertThat(escapeSpecialRegexChars(\"~\")).isEqualTo(\"\\\\~\");","95","    assertThat(escapeSpecialRegexChars(\"$\")).isEqualTo(\"\\\\$\");","96","    assertThat(escapeSpecialRegexChars(\"&\")).isEqualTo(\"\\\\&\");","97","    assertThat(escapeSpecialRegexChars(\"?\")).isEqualTo(\"\\\\?\");","98","    assertThat(escapeSpecialRegexChars(\"a bit of | & #<\\\"$ .* ^ everything\")).isEqualTo(\"a bit of \\\\| \\\\& \\\\#\\\\<\\\\\\\"\\\\$ \\\\.\\\\* \\\\^ everything\");"],"delete":["90","    assertThat(escapeSpecialRegexChars(\"a bit of | $ .* ^ everything\")).isEqualTo(\"a bit of \\\\| \\\\$ \\\\.\\\\* \\\\^ everything\");"]}]}},"cf3ee4bb926ec71b716c7d358c688a8575e631c6":{"changes":{"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v85\/DeleteProjectAlmSettingsOrphans.java":"MODIFY"},"diff":{"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v85\/DeleteProjectAlmSettingsOrphans.java":[{"add":["36","      + \"projects p on pas.project_uuid = p.uuid where p.uuid is null\");"],"delete":["36","      + \"projects p on pas.project_uuid = p.uuid where p.uuid is null;\");"]}]}},"90970dd0e1c0858d328bf535d17e83e1580574af":{"changes":{"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/webhook\/ws\/WebhooksWsParameters.java":"MODIFY","server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/webhook\/ws\/CreateActionTest.java":"MODIFY"},"diff":{"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/webhook\/ws\/WebhooksWsParameters.java":[{"add":["35","  static final int PROJECT_KEY_PARAM_MAXIMUM_LENGTH = 400;"],"delete":["35","  static final int PROJECT_KEY_PARAM_MAXIMUM_LENGTH = 100;"]}],"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/webhook\/ws\/CreateActionTest.java":[{"add":["100","  public void create_a_webhook_with_400_length_project_key() {","101","    String longProjectKey = generateStringWithLength(400);","102","    ComponentDto project = componentDbTester.insertPrivateProject(componentDto -> componentDto.setDbKey(longProjectKey));","103","","104","    userSession.logIn().addProjectPermission(ADMIN, project);","105","","106","    CreateWsResponse response = wsActionTester.newRequest()","107","      .setParam(\"project\", longProjectKey)","108","      .setParam(\"name\", NAME_WEBHOOK_EXAMPLE_001)","109","      .setParam(\"url\", URL_WEBHOOK_EXAMPLE_001)","110","      .setParam(\"secret\", \"a_secret\")","111","      .executeProtobuf(CreateWsResponse.class);","112","","113","    assertThat(response.getWebhook()).isNotNull();","114","    assertThat(response.getWebhook().getKey()).isNotNull();","115","    assertThat(response.getWebhook().getName()).isEqualTo(NAME_WEBHOOK_EXAMPLE_001);","116","    assertThat(response.getWebhook().getUrl()).isEqualTo(URL_WEBHOOK_EXAMPLE_001);","117","    assertThat(response.getWebhook().getSecret()).isEqualTo(\"a_secret\");","118","  }","119","","120","  @Test","374","","375","  @Test","376","  public void throw_IllegalArgumentException_if_project_key_greater_than_400() {","377","    String longProjectKey = generateStringWithLength(401);","378","    userSession.logIn().addPermission(ADMINISTER, defaultOrganizationProvider.get().getUuid());","379","","380","    expectedException.expect(IllegalArgumentException.class);","381","    expectedException.expectMessage(\"'project' length (401) is longer than the maximum authorized (400)\");","382","","383","    wsActionTester.newRequest()","384","      .setParam(\"project\", longProjectKey)","385","      .setParam(\"name\", NAME_WEBHOOK_EXAMPLE_001)","386","      .setParam(\"url\", URL_WEBHOOK_EXAMPLE_001)","387","      .setParam(\"secret\", \"a_secret\")","388","      .executeProtobuf(CreateWsResponse.class);","389","  }","390","","391","","392","  private static String generateStringWithLength(int length) {","393","    StringBuilder sb = new StringBuilder(length);","394","    for (int i = 0; i < length; i++) {","395","      sb.append(\"x\");","396","    }","397","    return sb.toString();","398","  }","399",""],"delete":[]}]}},"fb298d9f2f06625cb15a5a2d87f45ca4a3c5452e":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/RegisterRulesTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/RegisterRules.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/RegisterRulesTest.java":[{"add":["49","import static com.google.common.collect.Sets.newHashSet;","133","    rule1.setTags(newHashSet(\"usertag1\", \"usertag2\"));","178","  public void add_new_tag() {","179","    execute(new RulesDefinition() {","180","      @Override","181","      public void define(RulesDefinition.Context context) {","182","        RulesDefinition.NewRepository repo = context.createRepository(\"fake\", \"java\");","183","        repo.createRule(\"rule1\")","184","          .setName(\"Rule One\")","185","          .setHtmlDescription(\"Description of Rule One\")","186","          .setTags(\"tag1\");","187","        repo.done();","188","      }","189","    });","190","","191","    RuleDto rule = dbClient.ruleDao().selectOrFailByKey(dbTester.getSession(), RULE_KEY1);","192","    assertThat(rule.getSystemTags()).containsOnly(\"tag1\");","193","","194","    execute(new RulesDefinition() {","195","      @Override","196","      public void define(RulesDefinition.Context context) {","197","        RulesDefinition.NewRepository repo = context.createRepository(\"fake\", \"java\");","198","        repo.createRule(\"rule1\")","199","          .setName(\"Rule One\")","200","          .setHtmlDescription(\"Description of Rule One\")","201","          .setTags(\"tag1\", \"tag2\");","202","        repo.done();","203","      }","204","    });","205","","206","    rule = dbClient.ruleDao().selectOrFailByKey(dbTester.getSession(), RULE_KEY1);","207","    assertThat(rule.getSystemTags()).containsOnly(\"tag1\", \"tag2\");","208","  }","209","","210","  @Test","368","  @Test","369","  public void remove_system_tags_when_plugin_does_not_provide_any() {","370","    \/\/ Rule already exists in DB, with some system tags","371","    dbClient.ruleDao().insert(dbTester.getSession(), new RuleDto()","372","      .setRuleKey(\"rule1\")","373","      .setRepositoryKey(\"findbugs\")","374","      .setName(\"Rule One\")","375","      .setDescription(\"Rule one description\")","376","      .setDescriptionFormat(RuleDto.Format.HTML)","377","      .setSystemTags(newHashSet(\"tag1\", \"tag2\"))","378","      );","379","    dbTester.getSession().commit();","380","","381","    \/\/ Synchronize rule without tag","382","    execute(new FindbugsRepository());","383","","384","    List<RuleDto> rules = dbClient.ruleDao().selectAll(dbTester.getSession());","385","    assertThat(rules).hasSize(1);","386","    RuleDto result = rules.get(0);","387","    assertThat(result.getKey()).isEqualTo(RuleKey.of(\"findbugs\", \"rule1\"));","388","    assertThat(result.getSystemTags()).isEmpty();","389","  }","390",""],"delete":["21","import com.google.common.collect.Sets;","133","    rule1.setTags(Sets.newHashSet(\"usertag1\", \"usertag2\"));"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/RegisterRules.java":[{"add":["61","import static com.google.common.collect.Sets.intersection;","79","    ActiveRuleIndexer activeRuleIndexer, Languages languages, System2 system2) {","346","    } else if (dto.getSystemTags().size() != ruleDef.tags().size() ||","347","      !dto.getSystemTags().containsAll(ruleDef.tags())","348","      || !intersection(dto.getTags(), ruleDef.tags()).isEmpty()) {"],"delete":["26","import com.google.common.collect.Sets;","79","                       ActiveRuleIndexer activeRuleIndexer, Languages languages, System2 system2) {","204","    if (!dto.getSystemTags().containsAll(def.tags())) {","205","      dto.setSystemTags(def.tags());","206","      changed = true;","207","    }","350","    } else if (!dto.getSystemTags().containsAll(ruleDef.tags())","351","      || !Sets.intersection(dto.getTags(), ruleDef.tags()).isEmpty()) {"]}]}},"7afe15b7747ac583e1837a582e276a10242c07af":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/create\/project\/__tests__\/__snapshots__\/CreateProjectModeSelection-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/create\/project\/CreateProjectModeSelection.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/create\/project\/__tests__\/__snapshots__\/CreateProjectModeSelection-test.tsx.snap":[{"add":["95","      className=\"button button-huge big-spacer-left display-flex-column create-project-mode-type-bbs disabled\"","96","      disabled={true}","158","      className=\"button button-huge big-spacer-left display-flex-column create-project-mode-type-bbs disabled\"","229","      className=\"button button-huge big-spacer-left display-flex-column create-project-mode-type-bbs disabled\""],"delete":["95","      className=\"button button-huge big-spacer-left display-flex-column create-project-mode-type-bbs\"","96","      disabled={false}","158","      className=\"button button-huge big-spacer-left display-flex-column create-project-mode-type-bbs\"","229","      className=\"button button-huge big-spacer-left display-flex-column create-project-mode-type-bbs\""]}],"server\/sonar-web\/src\/main\/js\/apps\/create\/project\/CreateProjectModeSelection.tsx":[{"add":["19","import * as classNames from 'classnames';","34","  const bbsBindingDisabled = bbsBindingCount !== 1 || loadingBindings;","61","          className={classNames(","62","            'button button-huge big-spacer-left display-flex-column create-project-mode-type-bbs',","63","            { disabled: bbsBindingDisabled }","64","          )}","65","          disabled={bbsBindingDisabled}","85","          {!loadingBindings && bbsBindingDisabled && ("],"delete":["59","          className=\"button button-huge big-spacer-left display-flex-column create-project-mode-type-bbs\"","60","          disabled={bbsBindingCount !== 1}","80","          {!loadingBindings && bbsBindingCount !== 1 && ("]}]}},"a66fbbffe4a12a21014ba08aa80edd31a0a6e5d9":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/index\/RuleIndex.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/es\/EsUtils.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/RuleServiceMediumTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/es\/EsUtilsTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/index\/RuleIndex.java":[{"add":["71","import static org.sonar.server.es.EsUtils.escapeSpecialRegexChars;","480","      termsAggregation.include(\".*\" + escapeSpecialRegexChars(query) + \".*\");"],"delete":["479","      termsAggregation.include(\".*\" + query + \".*\");"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/es\/EsUtils.java":[{"add":["33","import java.util.regex.Pattern;","46","  private static final Pattern SPECIAL_REGEX_CHARS = Pattern.compile(\"[{}()\\\\[\\\\].+*?^$\\\\\\\\|]\");","98","  \/**","99","   * Escapes regexp special characters so that text can be forwarded from end-user input","100","   * to Elasticsearch regexp query (for instance attributes \"include\" and \"exclude\" of","101","   * term aggregations.","102","   *\/","103","  public static String escapeSpecialRegexChars(String str) {","104","    return SPECIAL_REGEX_CHARS.matcher(str).replaceAll(\"\\\\\\\\$0\");","105","  }","106",""],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/RuleServiceMediumTest.java":[{"add":["79","    insertRule(RuleKey.of(\"javascript\", \"S001\"), newHashSet(\"tag1\", \"misra++\"), newHashSet(\"sys1\", \"sys2\"));","83","    assertThat(service.listTags(\"\", 10)).containsOnly(\"tag1\", \"misra++\", \"tag2\", \"sys1\", \"sys2\");","86","    assertThat(service.listTags(\"misra\", 10)).containsOnly(\"misra++\");","87","    assertThat(service.listTags(\"misra+\", 10)).containsOnly(\"misra++\");","88","    assertThat(service.listTags(\"++\", 10)).containsOnly(\"misra++\");","94","","95","    assertThat(service.listTags(\"misra-\", 10)).isEmpty();","96","  }","97","","98","  @Test","99","  public void listTags_returns_empty_results_if_filter_contains_regexp_special_characters() {","100","    insertRule(RuleKey.of(\"javascript\", \"S001\"), newHashSet(\"misra++\"), newHashSet(\"sys1\", \"sys2\"));","101","","102","    assertThat(service.listTags(\"mis[\", 10)).isEmpty();","103","    assertThat(service.listTags(\"mis\\\\d\", 10)).isEmpty();","104","    assertThat(service.listTags(\".*\", 10)).isEmpty();"],"delete":["79","    insertRule(RuleKey.of(\"javascript\", \"S001\"), newHashSet(\"tag1\"), newHashSet(\"sys1\", \"sys2\"));"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/es\/EsUtilsTest.java":[{"add":["35","import static org.sonar.server.es.EsUtils.escapeSpecialRegexChars;","77","","78","  @Test","79","  public void test_escapeSpecialRegexChars() {","80","    assertThat(escapeSpecialRegexChars(\"\")).isEqualTo(\"\");","81","    assertThat(escapeSpecialRegexChars(\"foo\")).isEqualTo(\"foo\");","82","    assertThat(escapeSpecialRegexChars(\"FOO\")).isEqualTo(\"FOO\");","83","    assertThat(escapeSpecialRegexChars(\"foo++\")).isEqualTo(\"foo\\\\+\\\\+\");","84","    assertThat(escapeSpecialRegexChars(\"foo[]\")).isEqualTo(\"foo\\\\[\\\\]\");","85","    assertThat(escapeSpecialRegexChars(\".*\")).isEqualTo(\"\\\\.\\\\*\");","86","    assertThat(escapeSpecialRegexChars(\"foo\\\\d\")).isEqualTo(\"foo\\\\\\\\d\");","87","    assertThat(escapeSpecialRegexChars(\"^\")).isEqualTo(\"\\\\^\");","88","    assertThat(escapeSpecialRegexChars(\"$\")).isEqualTo(\"\\\\$\");","89","    assertThat(escapeSpecialRegexChars(\"|\")).isEqualTo(\"\\\\|\");","90","    assertThat(escapeSpecialRegexChars(\"a bit of | $ .* ^ everything\")).isEqualTo(\"a bit of \\\\| \\\\$ \\\\.\\\\* \\\\^ everything\");","91","  }"],"delete":[]}]}},"76558f8bb1c7c7fff227e343d764656e97094453":{"changes":{"server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v67\/CleanupDisabledUsersTest\/users.sql":"ADD","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v67\/DbVersion67Test.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v67\/DbVersion67.java":"MODIFY","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v67\/CleanupDisabledUsersTest.java":"ADD","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v67\/CleanupDisabledUsers.java":"ADD"},"diff":{"server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v67\/CleanupDisabledUsersTest\/users.sql":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v67\/DbVersion67Test.java":[{"add":["38","    verifyMigrationCount(underTest, 4);"],"delete":["38","    verifyMigrationCount(underTest, 3);"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v67\/DbVersion67.java":[{"add":["31","      .add(1833, \"Cleanup disabled users\", CleanupDisabledUsers.class)"],"delete":[]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v67\/CleanupDisabledUsersTest.java":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v67\/CleanupDisabledUsers.java":[{"add":[],"delete":[]}]}},"8cdfa2d78c714a11a7f23608d45dd1976bc13ea3":{"changes":{"server\/sonar-docs\/src\/pages\/requirements\/requirements.md":"MODIFY","server\/sonar-docs\/src\/pages\/sonarcloud\/integrations\/vsts.md":"MODIFY","server\/sonar-docs\/src\/pages\/extend\/adding-coding-rules.md":"MODIFY","server\/sonar-docs\/src\/pages\/analysis\/analysis-parameters.md":"MODIFY","server\/sonar-docs\/README.md":"MODIFY","server\/sonar-docs\/src\/pages\/sonarcloud\/integrations\/github.md":"MODIFY","server\/sonar-docs\/src\/pages\/analysis\/languages\/javascript.md":"MODIFY","server\/sonar-docs\/src\/pages\/analysis\/scan\/sonarscanner-for-msbuild.md":"MODIFY","server\/sonar-docs\/src\/layouts\/layout.css":"MODIFY","server\/sonar-docs\/src\/pages\/analysis\/languages\/java.md":"MODIFY","server\/sonar-docs\/src\/pages\/analysis\/languages\/php.md":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/documentation\/styles.css":"MODIFY","server\/sonar-docs\/src\/pages\/analysis\/security_configuration.md":"MODIFY","server\/sonar-docs\/src\/pages\/extend\/deploying-to-marketplace.md":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/docs\/DocMarkdownBlock.css":"MODIFY","server\/sonar-docs\/src\/pages\/setup\/install-server.md":"MODIFY","server\/sonar-docs\/src\/pages\/setup\/upgrading.md":"MODIFY","server\/sonar-docs\/src\/pages\/analysis\/languages\/python.md":"MODIFY","server\/sonar-docs\/src\/pages\/extend\/developing-plugin.md":"MODIFY","server\/sonar-docs\/src\/pages\/project-administration\/narrowing-the-focus.md":"MODIFY","server\/sonar-docs\/src\/pages\/analysis\/overview.md":"MODIFY"},"diff":{"server\/sonar-docs\/src\/pages\/requirements\/requirements.md":[{"add":["7","[[warning]]","8","| **Note:** _On Mac OS X it is highly recommended to install Oracle JDK 11 instead of the corresponding Oracle JRE since the JRE installation does not fully set up your Java environment properly. See [this post](http:\/\/stackoverflow.com\/questions\/15624667\/mac-osx-java-terminal-version-incorrect) for more information._"],"delete":["7","![](\/images\/exclamation.svg) **Note:** _On Mac OS X it is highly recommended to install Oracle JDK 11 instead of the corresponding Oracle JRE since the JRE installation does not fully set up your Java environment properly. See [this post](http:\/\/stackoverflow.com\/questions\/15624667\/mac-osx-java-terminal-version-incorrect) for more information._"]}],"server\/sonar-docs\/src\/pages\/sonarcloud\/integrations\/vsts.md":[{"add":["12","| Only work and school Azure DevOps accounts are authorized to login on SonarCloud."],"delete":["12","| ![Warning](\/images\/exclamation.svg) Only work and school Azure DevOps accounts are authorized to login on SonarCloud."]}],"server\/sonar-docs\/src\/pages\/extend\/adding-coding-rules.md":[{"add":["13","| Before implementing a new coding rule, you should consider whether it is specific to your own context or might benefit others. If it might benefit others, you can propose it on the [Community Forum](https:\/\/community.sonarsource.com\/). If there is shared interest, then it might be implemented for you directly in the related language plugin. It means less maintenance for you, and benefit to others."],"delete":["13","| ![](\/images\/info.svg) Before implementing a new coding rule, you should consider whether it is specific to your own context or might benefit others. If it might benefit others, you can propose it on the [Community Forum](https:\/\/community.sonarsource.com\/). If there is shared interest, then it might be implemented for you directly in the related language plugin. It means less maintenance for you, and benefit to others."]}],"server\/sonar-docs\/src\/pages\/analysis\/analysis-parameters.md":[{"add":["98","| These parameters are listed for completeness, but are deprecated and should not be used in new analyses."],"delete":["98","| ![](\/images\/cross.svg) These parameters are listed for completeness, but are deprecated and should not be used in new analyses."]}],"server\/sonar-docs\/README.md":[{"add":[],"delete":["261","You can also put icons inside messages:","262","","263","```","264","[[danger]]","265","| ![](\/images\/cross.svg) This is a **danger** message.","266","```","267",""]}],"server\/sonar-docs\/src\/pages\/sonarcloud\/integrations\/github.md":[{"add":["22","[[warning]]","23","| This is currently a Beta feature which does not work for all languages and comes with limitations. "],"delete":["22","![](\/images\/exclamation.svg) This is currently a Beta feature which does not work for all languages and comes with limitations. "]}],"server\/sonar-docs\/src\/pages\/analysis\/languages\/javascript.md":[{"add":["33","| This feature is deprecated","73","[[warning]]","74","| When overriding a visit method, you must call the `super` method in order to allow the visitor to visit the rest of the tree."],"delete":["33","| ![](\/images\/exclamation.svg) This feature is deprecated","73","![](\/images\/exclamation.svg) When overriding a visit method, you must call the `super` method in order to allow the visitor to visit the rest of the tree."]}],"server\/sonar-docs\/src\/pages\/analysis\/scan\/sonarscanner-for-msbuild.md":[{"add":["112","| The \"begin\" step will modify your build like this:"],"delete":["112","| ![](\/images\/exclamation.svg) The \"begin\" step will modify your build like this:"]}],"server\/sonar-docs\/src\/layouts\/layout.css":[{"add":["538","  background-image: url(..\/images\/info.svg);","540","  background-position: 10px 15px;","541","  background-repeat: no-repeat;","542","  background-size: 24px;","543","  padding-left: 40px;","570","  background-image: url(..\/images\/cross.svg);","586","  background-color: #ffefbc;","587","  background-image: url(..\/images\/alerts\/danger.svg);","604","  background-image: url(..\/images\/check.svg);"],"delete":["580","  background: #ffefbc url(..\/images\/alerts\/danger.svg) no-repeat;","581","  background-position: 10px 15px;","582","  background-size: 24px;","583","  padding-left: 40px;","584","}","585","","586",".page-sidebar .alert-warning {","587","  background-position: 10px 10px;"]}],"server\/sonar-docs\/src\/pages\/analysis\/languages\/java.md":[{"add":["35","| Android users, Jack doesn't provide the required `.class` files."],"delete":["35","| ![](\/images\/exclamation.svg) Android users, Jack doesn't provide the required `.class` files."]}],"server\/sonar-docs\/src\/pages\/analysis\/languages\/php.md":[{"add":["65","[[warning]]","66","| When overriding a visit method, you must call the super method in order to allow the visitor to visit the children the node."],"delete":["65","![](\/images\/exclamation.svg) When overriding a visit method, you must call the super method in order to allow the visitor to visit the children the node."]}],"server\/sonar-web\/src\/main\/js\/apps\/documentation\/styles.css":[{"add":["101",".documentation-content.markdown .alert .custom-block-body {","102","  padding-left: 24px;","103","  background-position: left 6px;","104","  background-repeat: no-repeat;","105","}","106","","107",".documentation-content.markdown .alert-success .custom-block-body {","108","  background-image: url(\/images\/check.svg);","109","}","110","","111",".documentation-content.markdown .alert-info .custom-block-body {","112","  background-image: url(\/images\/info.svg);","113","}","114","","115",".documentation-content.markdown .alert-warning .custom-block-body {","116","  background-image: url(\/images\/exclamation.svg);","117","}","118","","119",".documentation-content.markdown .alert-error .custom-block-body,","120",".documentation-content.markdown .alert-danger .custom-block-body {","121","  background-image: url(\/images\/cross.svg);","122","}","123",""],"delete":[]}],"server\/sonar-docs\/src\/pages\/analysis\/security_configuration.md":[{"add":["92","| The configuration works per rule. There is no way to share configuration between rules. "],"delete":["92","| ![](\/images\/info.svg) The configuration works per rule. There is no way to share configuration between rules. "]}],"server\/sonar-docs\/src\/pages\/extend\/deploying-to-marketplace.md":[{"add":["43","| We reserve the right to exclude from the Marketplace plugins that we feel would be a dis-service to the community."],"delete":["43","| ![](\/images\/info.svg) We reserve the right to exclude from the Marketplace plugins that we feel would be a dis-service to the community."]}],"server\/sonar-web\/src\/main\/js\/components\/docs\/DocMarkdownBlock.css":[{"add":["33",".markdown-content .alert-error,","34",".markdown-content .alert-danger {","40",".markdown-content .alert-error .alert-icon,","41",".markdown-content .alert-danger .alert-icon {"],"delete":["33",".markdown-content .alert-error {","39",".markdown-content .alert-error .alert-icon {"]}],"server\/sonar-docs\/src\/pages\/setup\/install-server.md":[{"add":["14","[[warning]]","15","| Collation **MUST** be case-sensitive (CS) and accent-sensitive (AS).  ","16","| `READ_COMMITED_SNAPSHOT` **MUST** be set on the SonarQube database."],"delete":["14","![](\/images\/exclamation.svg) Collation **MUST** be case-sensitive (CS) and accent-sensitive (AS).","15","","16","![](\/images\/exclamation.svg) `READ_COMMITED_SNAPSHOT` **MUST** be set on the SonarQube database."]}],"server\/sonar-docs\/src\/pages\/setup\/upgrading.md":[{"add":["15","[[info]]","16","| **Planning to Upgrade to a Commercial Edition?**  ","17","| If you are moving to 6.7 LTS and installing a Commercial Edition, please read this [documentation](https:\/\/docs.sonarqube.org\/display\/SONARQUBE67\/SonarSource+Editions).","20","| Before you start, back up your SonarQube Database. Upgrade problems are rare, but you'll want the backup if anything does happen."],"delete":["15","![](\/images\/info.svg) **Planning to Upgrade to a Commercial Edition?**","16","If you are moving to 6.7 LTS and installing a Commercial Edition, please read this [documentation](https:\/\/docs.sonarqube.org\/display\/SONARQUBE67\/SonarSource+Editions).","19","| ![](\/images\/exclamation.svg) Before you start, back up your SonarQube Database. Upgrade problems are rare, but you'll want the backup if anything does happen."]}],"server\/sonar-docs\/src\/pages\/analysis\/languages\/python.md":[{"add":["75","[[warning]]","76","| When overriding a visit method, you must call the super method in order to allow the visitor to visit the children the node."],"delete":["75","![](\/images\/exclamation.svg) When overriding a visit method, you must call the super method in order to allow the visitor to visit the children the node."]}],"server\/sonar-docs\/src\/pages\/extend\/developing-plugin.md":[{"add":["255","| Compilation does not fail if incorrect dependencies are defined, such as a scanner extension trying to call a web server extension. Still it will fail at runtime when plugin is loaded.","278","| The command `mvn dependency:tree` gives the list of all dependencies, including transitive ones.","336","| Values of the properties suffixed with `.secured` are not available to non-authorized users (anonymous and users without project or global administration rights). `.secured` is needed for passwords, for instance."],"delete":["255","| ![](\/images\/exclamation.svg) Compilation does not fail if incorrect dependencies are defined, such as a scanner extension trying to call a web server extension. Still it will fail at runtime when plugin is loaded.","278","| ![](\/images\/info.svg) The command `mvn dependency:tree` gives the list of all dependencies, including transitive ones.","336","| ![](\/images\/info.svg) Values of the properties suffixed with `.secured` are not available to non-authorized users (anonymous and users without project or global administration rights). `.secured` is needed for passwords, for instance."]}],"server\/sonar-docs\/src\/pages\/project-administration\/narrowing-the-focus.md":[{"add":["93","| You can find the fully qualified rule ID on the Rule definition."],"delete":["93","| ![](\/images\/info.svg) You can find the fully qualified rule ID on the Rule definition."]}],"server\/sonar-docs\/src\/pages\/analysis\/overview.md":[{"add":["26","[[info]]","27","| Remember that depending on which cloud solution you are using for your developments, you can rely on dedicated integrations to help you:"],"delete":["26","![Info](\/images\/info.svg) Remember that depending on which cloud solution you are using for your developments, you can rely on dedicated integrations to help you:"]}]}},"7a4e71586a11644181f593aed3b23692ba887cdc":{"changes":{"\/dev\/null":"DELETE","sonar-application\/src\/main\/assembly\/lib\/jdbc\/mssql\/sqljdbc42.jar":"ADD","tests\/upgrade\/pom.xml":"MODIFY","it\/it-tests\/pom.xml":"MODIFY","sonar-db\/pom.xml":"MODIFY"},"diff":{"\/dev\/null":[{"add":[],"delete":[]}],"sonar-application\/src\/main\/assembly\/lib\/jdbc\/mssql\/sqljdbc42.jar":[{"add":[],"delete":[]}],"tests\/upgrade\/pom.xml":[{"add":["93","          <artifactId>sqljdbc<\/artifactId>","94","          <version>4.2<\/version>","96","          <systemPath>${project.basedir}\/..\/..\/sonar-application\/src\/main\/assembly\/lib\/jdbc\/mssql\/sqljdbc42.jar"],"delete":["93","          <artifactId>sqljdbc41<\/artifactId>","94","          <version>4.1<\/version>","96","          <systemPath>${project.basedir}\/..\/..\/sonar-application\/src\/main\/assembly\/lib\/jdbc\/mssql\/sqljdbc41.jar"]}],"it\/it-tests\/pom.xml":[{"add":["193","          <artifactId>sqljdbc<\/artifactId>","194","          <version>4.2<\/version>","196","          <systemPath>${project.basedir}\/..\/..\/sonar-application\/src\/main\/assembly\/lib\/jdbc\/mssql\/sqljdbc42.jar"],"delete":["193","          <artifactId>sqljdbc41<\/artifactId>","194","          <version>4.1<\/version>","196","          <systemPath>${project.basedir}\/..\/..\/sonar-application\/src\/main\/assembly\/lib\/jdbc\/mssql\/sqljdbc41.jar"]}],"sonar-db\/pom.xml":[{"add":["217","          <artifactId>sqljdbc<\/artifactId>","218","          <version>4.2<\/version>","220","          <systemPath>${project.basedir}\/..\/sonar-application\/src\/main\/assembly\/lib\/jdbc\/mssql\/sqljdbc42.jar"],"delete":["217","          <artifactId>sqljdbc41<\/artifactId>","218","          <version>4.1<\/version>","220","          <systemPath>${project.basedir}\/..\/sonar-application\/src\/main\/assembly\/lib\/jdbc\/mssql\/sqljdbc41.jar"]}]}},"416c2af8844a41cfd078e80c38be96f15f76ee9e":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/components\/Conditions.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/components\/Conditions.js":[{"add":["67","    const existingConditions = conditions.filter(condition =>","68","      metrics.find(metric => metric.key === condition.metric)","69","    );","70","","71","    const sortedConditions = sortBy(","72","      existingConditions,","73","      condition => metrics.find(metric => metric.key === condition.metric).name","74","    );","77","    const savedConditions = existingConditions.filter(condition => condition.id != null);"],"delete":["67","    const sortedConditions = sortBy(conditions, condition => {","68","      return metrics.find(metric => metric.key === condition.metric).name;","69","    });","72","    const savedConditions = conditions.filter(condition => condition.id != null);"]}]}},"e0ae4a26c5dad932325b50de173d845688f89dbd":{"changes":{"server\/sonar-web\/src\/main\/js\/helpers\/measures.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/helpers\/measures.js":[{"add":["268","function shouldDisplayDaysInShortFormat (days) {","396","        formatMeasure(maintainabilityGrid[0] * 100, 'PERCENT')","397","    );","405","      formatMeasure(maintainabilityRatingThreshold * 100, 'PERCENT')","406","  );"],"delete":["268","function shouldDisplayDaysInShortFormat(days) {","368","","397","        `${maintainabilityGrid[0]}%`);","405","      `${maintainabilityRatingThreshold}%`);"]}]}},"654e8d189d064d173e8ec05631e8aa4a48715628":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/templates\/rule\/coding-rules-rule-meta.hbs":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/templates\/rule\/coding-rules-rule-meta.hbs":[{"add":["11","  <h3 class=\"page-title coding-rules-detail-header\">","12","    <big>{{name}}<\/big>","13","  <\/h3>"],"delete":["1","  <h3 class=\"page-title coding-rules-detail-header\">","2","    <big>{{name}}<\/big>","3","  <\/h3>"]}]}},"98ea3f7b2f39f6c63d3c50e6bc1f9ef1adfbe189":{"changes":{"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/projectInformation\/__tests__\/__snapshots__\/ProjectInformationRenderer-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/projectInformation\/ProjectInformationRenderer.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/projectInformation\/__tests__\/__snapshots__\/ProjectInformationRenderer-test.tsx.snap":[{"add":[],"delete":["308","      <MetaQualityGate","309","        qualityGate={","310","          Object {","311","            \"isDefault\": true,","312","            \"key\": \"30\",","313","            \"name\": \"Sonar way\",","314","          }","315","        }","316","      \/>","317","      <Connect(MetaQualityProfiles)","318","        headerClassName=\"big-spacer-top\"","319","        profiles={","320","          Array [","321","            Object {","322","              \"deleted\": false,","323","              \"key\": \"my-qp\",","324","              \"language\": \"ts\",","325","              \"name\": \"Sonar way\",","326","            },","327","          ]","328","        }","329","      \/>","330","    <\/div>","331","    <div","332","      className=\"big-padded bordered-bottom\"","333","    >"]}],"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/projectInformation\/ProjectInformationRenderer.tsx":[{"add":["81","        {!isApp &&","82","          (component.qualityGate ||","83","            (component.qualityProfiles && component.qualityProfiles.length > 0)) && (","84","            <>","85","              <div className=\"big-padded bordered-bottom\">","86","                {component.qualityGate && <MetaQualityGate qualityGate={component.qualityGate} \/>}","88","                {component.qualityProfiles && component.qualityProfiles.length > 0 && (","89","                  <MetaQualityProfiles","90","                    headerClassName={component.qualityGate ? 'big-spacer-top' : undefined}","91","                    profiles={component.qualityProfiles}","92","                  \/>","93","                )}","94","              <\/div>","95","            <\/>","96","          )}"],"delete":["81","        {(component.qualityGate ||","82","          (component.qualityProfiles && component.qualityProfiles.length > 0)) && (","83","          <>","84","            <div className=\"big-padded bordered-bottom\">","85","              {component.qualityGate && <MetaQualityGate qualityGate={component.qualityGate} \/>}","87","              {component.qualityProfiles && component.qualityProfiles.length > 0 && (","88","                <MetaQualityProfiles","89","                  headerClassName={component.qualityGate ? 'big-spacer-top' : undefined}","90","                  profiles={component.qualityProfiles}","91","                \/>","92","              )}","93","            <\/div>","94","          <\/>","95","        )}"]}]}},"f93996b7262dae19c2f3e91c00b240d4bd4feb7e":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/__tests__\/__snapshots__\/QualityGateCondition-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/QualityGateCondition.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/styles.css":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/__tests__\/__snapshots__\/QualityGateCondition-test.tsx.snap":[{"add":["23","      className=\"overview-quality-gate-condition-value text-center spacer-right\"","65","      className=\"overview-quality-gate-condition-value text-center spacer-right\"","118","      className=\"overview-quality-gate-condition-value text-center spacer-right\"","171","      className=\"overview-quality-gate-condition-value text-center spacer-right\"","213","      className=\"overview-quality-gate-condition-value text-center spacer-right\"","265","      className=\"overview-quality-gate-condition-value text-center spacer-right\"","317","      className=\"overview-quality-gate-condition-value text-center spacer-right\"","370","      className=\"overview-quality-gate-condition-value text-center spacer-right\"","421","      className=\"overview-quality-gate-condition-value text-center spacer-right\""],"delete":["23","      className=\"overview-quality-gate-condition-value text-center\"","65","      className=\"overview-quality-gate-condition-value text-center\"","118","      className=\"overview-quality-gate-condition-value text-center\"","171","      className=\"overview-quality-gate-condition-value text-center\"","213","      className=\"overview-quality-gate-condition-value text-center\"","265","      className=\"overview-quality-gate-condition-value text-center\"","317","      className=\"overview-quality-gate-condition-value text-center\"","370","      className=\"overview-quality-gate-condition-value text-center\"","421","      className=\"overview-quality-gate-condition-value text-center\""]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/QualityGateCondition.tsx":[{"add":["134","        <div className=\"overview-quality-gate-condition-value text-center spacer-right\">"],"delete":["134","        <div className=\"overview-quality-gate-condition-value text-center\">"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/styles.css":[{"add":["152","    calc(3 * var(--gridSize));","157","  flex: 0 0 20%;"],"delete":["152","    calc(4 * var(--gridSize));","158","  margin-right: 10px;","160","","161","  \/* for consistency with ratings *\/","162","  min-width: 24px;"]}]}},"6ffa50da1317f51b78aba845c0cddb7030987e72":{"changes":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/settings\/_settings.html.erb":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/settings\/_settings.html.erb":[{"add":["17","            <% if !category.key.blank?-%>","18","              <tr id=\"select_<%= category.key -%>\" class=\"select <%= cycle('even', 'odd', :name => 'category') -%> <%= 'selected' if @category.key==category.key -%>\">","19","                <td class=\"category\">","20","                  <% if @resource %>","21","                    <a href=\"<%= url_for(:controller => 'project', :action => 'settings') -%>?id=<%= url_encode(@resource.key) -%>&category=<%= url_encode(category.key) -%>\"><%= h category_name(category) -%><\/a>","22","                  <% else %>","23","                    <%= link_to category_name(category), :category => category.key -%>","24","                  <% end %>","25","                <\/td>","26","              <\/tr>","27","            <% end -%>"],"delete":["17","            <tr id=\"select_<%= category.key -%>\" class=\"select <%= cycle('even', 'odd', :name => 'category') -%> <%= 'selected' if @category.key==category.key -%>\">","18","              <td class=\"category\">","19","                <% if @resource %>","20","                  <a href=\"<%= url_for(:controller => 'project', :action => 'settings') -%>?id=<%= url_encode(@resource.key) -%>&category=<%= url_encode(category.key) -%>\"><%= h category_name(category) -%><\/a>","21","                <% else %>","22","                  <%= link_to category_name(category), :category => category.key -%>","23","                <% end %>","24","              <\/td>","25","            <\/tr>"]}]}},"af746806513116025cfea334ad2debfa0f5c34e2":{"changes":{"sonar-db\/src\/main\/java\/org\/sonar\/db\/component\/ResourceIndexDao.java":"MODIFY","sonar-db\/src\/test\/java\/org\/sonar\/db\/component\/ResourceIndexDaoTest.java":"MODIFY"},"diff":{"sonar-db\/src\/main\/java\/org\/sonar\/db\/component\/ResourceIndexDao.java":[{"add":["204","      dto.setKey(substring(key, position, position + MAXIMUM_KEY_SIZE));"],"delete":["204","      dto.setKey(substring(key, position, MAXIMUM_KEY_SIZE));"]}],"sonar-db\/src\/test\/java\/org\/sonar\/db\/component\/ResourceIndexDaoTest.java":[{"add":["160","    ComponentDto project = new ComponentDto().setKey(\"the_key\").setName(longName).setScope(Scopes.PROJECT).setQualifier(Qualifiers.PROJECT);"],"delete":["160","    ComponentDto project = new ComponentDto().setId(1L).setKey(\"the_key\").setName(longName).setScope(Scopes.PROJECT).setQualifier(Qualifiers.PROJECT);"]}]}},"de3df7e5fea866d114b402a6c9fe71545e2afcdc":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/facets\/query-facet.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/facets\/query-facet.js":[{"add":["28","      'submit form': 'onFormSubmit',","29","      'search input': 'onInputSearch'","47","  onInputSearch () {","48","    this.applyFacet();","49","  },","50","","54","    const value = this.$('input').val();","55","    if (this.buffer !== value) {","56","      this.buffer = value;","57","      obj[property] = value;","58","      this.options.app.state.updateFilter(obj, { force: true });","59","    }"],"delete":["28","      'submit form': 'onFormSubmit'","49","    obj[property] = this.$('input').val();","50","    this.options.app.state.updateFilter(obj, { force: true });"]}]}},"422912b59e4ffd99d05f45eae4b9289f2e7f6646":{"changes":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/metric\/MetricDtoTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/metric\/MetricDto.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/metric\/MetricDtoValidator.java":"ADD","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/setting\/ws\/SetActionTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/metric\/ws\/UpdateActionTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/metric\/ws\/CreateActionTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/util\/MetricKeyValidator.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/metric\/DefaultMetricFinderTest.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/metric\/MetricDaoTest.java":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/metric\/MetricDtoTest.java":[{"add":["21","import org.junit.Rule;","23","import org.junit.rules.ExpectedException;","25","import static com.google.common.base.Strings.repeat;","32","  @Rule","33","  public ExpectedException expectedException = ExpectedException.none();","34","","35","  private MetricDto underTest = new MetricDto();","81","","82","  @Test","83","  public void fail_if_key_longer_than_64_characters() {","84","    String a65 = repeat(\"a\", 65);","85","","86","    expectedException.expect(IllegalArgumentException.class);","87","    expectedException.expectMessage(\"Metric key length (65) is longer than the maximum authorized (64). '\" + a65 + \"' was provided.\");","88","","89","    underTest.setKey(a65);","90","  }","91","","92","  @Test","93","  public void fail_if_name_longer_than_64_characters() {","94","    String a65 = repeat(\"a\", 65);","95","","96","    expectedException.expect(IllegalArgumentException.class);","97","    expectedException.expectMessage(\"Metric name length (65) is longer than the maximum authorized (64). '\" + a65 + \"' was provided.\");","98","","99","    underTest.setShortName(a65);","100","  }","101","","102","  @Test","103","  public void fail_if_description_longer_than_255_characters() {","104","    String a256 = repeat(\"a\", 256);","105","","106","    expectedException.expect(IllegalArgumentException.class);","107","    expectedException.expectMessage(\"Metric description length (256) is longer than the maximum authorized (255). '\" + a256 + \"' was provided.\");","108","","109","    underTest.setDescription(a256);","110","  }"],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/metric\/MetricDto.java":[{"add":["27","import static org.sonar.db.metric.MetricDtoValidator.validateDescription;","28","import static org.sonar.db.metric.MetricDtoValidator.validateKey;","29","import static org.sonar.db.metric.MetricDtoValidator.validateShortName;","78","  public MetricDto setKey(String key) {","79","    this.kee = validateKey(key);","88","    this.shortName = validateShortName(shortName);","110","    this.description = validateDescription(description);"],"delete":["75","  public MetricDto setKey(String name) {","76","    this.kee = name;","85","    this.shortName = shortName;","107","    this.description = description;"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/metric\/MetricDtoValidator.java":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/setting\/ws\/SetActionTest.java":[{"add":["320","      .builder(\"my_key\")","329","    dbClient.metricDao().insert(dbSession, newMetricDto().setKey(\"metric_key_1\"));","330","    dbClient.metricDao().insert(dbSession, newMetricDto().setKey(\"metric_key_2\"));","333","    callForMultiValueGlobalSetting(\"my_key\", newArrayList(\"metric_key_1\", \"metric_key_2\"));","335","    assertGlobalSetting(\"my_key\", \"metric_key_1,metric_key_2\");","466","      .builder(\"my_key\")","475","    dbClient.metricDao().insert(dbSession, newMetricDto().setKey(\"metric_key\"));","476","    dbClient.metricDao().insert(dbSession, newMetricDto().setKey(\"metric_disabled_key\").setEnabled(false));","480","    expectedException.expectMessage(\"Error when validating metric setting with key 'my_key' and values [metric_key, metric_disabled_key]. A value is not a valid metric key.\");","482","    callForMultiValueGlobalSetting(\"my_key\", newArrayList(\"metric_key\", \"metric_disabled_key\"));"],"delete":["320","      .builder(\"my.key\")","329","    dbClient.metricDao().insert(dbSession, newMetricDto().setKey(\"metric.key.1\"));","330","    dbClient.metricDao().insert(dbSession, newMetricDto().setKey(\"metric.key.2\"));","333","    callForMultiValueGlobalSetting(\"my.key\", newArrayList(\"metric.key.1\", \"metric.key.2\"));","335","    assertGlobalSetting(\"my.key\", \"metric.key.1,metric.key.2\");","466","      .builder(\"my.key\")","475","    dbClient.metricDao().insert(dbSession, newMetricDto().setKey(\"metric.key\"));","476","    dbClient.metricDao().insert(dbSession, newMetricDto().setKey(\"metric.disabled.key\").setEnabled(false));","480","    expectedException.expectMessage(\"Error when validating metric setting with key 'my.key' and values [metric.key, metric.disabled.key]. A value is not a valid metric key.\");","482","    callForMultiValueGlobalSetting(\"my.key\", newArrayList(\"metric.key\", \"metric.disabled.key\"));"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/metric\/ws\/UpdateActionTest.java":[{"add":["209","    expectedException.expect(IllegalArgumentException.class);","210","    expectedException.expectMessage(\"Malformed metric key 'not well formatted key'. Allowed characters are alphanumeric, '-', '_', with at least one non-digit.\");","211",""],"delete":["205","    expectedException.expect(IllegalArgumentException.class);","206",""]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/metric\/ws\/CreateActionTest.java":[{"add":["260","    expectedException.expectMessage(\"Malformed metric key '123:456'. Allowed characters are alphanumeric, '-', '_', with at least one non-digit.\");"],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/util\/MetricKeyValidator.java":[{"add":[],"delete":["22",""]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/metric\/DefaultMetricFinderTest.java":[{"add":["24","import org.sonar.api.measures.Metric;","27","import org.sonar.db.metric.MetricDto;","29","import static org.assertj.core.api.Assertions.assertThat;","30","import static org.sonar.db.metric.MetricTesting.newMetricDto;","36","  public DbTester db = DbTester.create(System2.INSTANCE);","38","  private DefaultMetricFinder underTest = new DefaultMetricFinder(db.getDbClient());","40","  @Test","41","  public void findAll_enabled() {","42","    db.getDbClient().metricDao().insert(db.getSession(), newMetricDto());","43","    db.getDbClient().metricDao().insert(db.getSession(), newMetricDto());","44","    db.getDbClient().metricDao().insert(db.getSession(), newMetricDto().setEnabled(false));","45","    db.commit();","46","","47","    assertThat(underTest.findAll()).hasSize(2);","51","  public void findAll_by_keys() {","52","    db.getDbClient().metricDao().insert(db.getSession(), newMetricDto().setKey(\"ncloc\"));","53","    db.getDbClient().metricDao().insert(db.getSession(), newMetricDto().setKey(\"foo\"));","54","    db.getDbClient().metricDao().insert(db.getSession(), newMetricDto().setKey(\"coverage\"));","55","    db.commit();","56","","57","    assertThat(underTest.findAll(Arrays.asList(\"ncloc\", \"foo\"))).extracting(Metric::getKey).containsExactlyInAnyOrder(\"ncloc\", \"foo\")","58","      .doesNotContain(\"coverage\");","59","","63","  public void findById() {","64","    MetricDto firstMetric = db.getDbClient().metricDao().insert(db.getSession(), newMetricDto());","65","    MetricDto secondMetric = db.getDbClient().metricDao().insert(db.getSession(), newMetricDto());","66","    db.commit();","67","","68","    assertThat(underTest.findById(firstMetric.getId())).extracting(Metric::getKey).containsExactly(firstMetric.getKey());","72","  public void findByKey() {","73","    MetricDto firstMetric = db.getDbClient().metricDao().insert(db.getSession(), newMetricDto());","74","    MetricDto secondMetric = db.getDbClient().metricDao().insert(db.getSession(), newMetricDto());","75","    db.commit();","77","    assertThat(underTest.findByKey(secondMetric.getKey())).extracting(Metric::getKey).containsExactly(secondMetric.getKey());"],"delete":["22","import org.junit.Before;","26","import org.sonar.db.DbClient;","28","import org.sonar.db.TestDBSessions;","29","import org.sonar.db.metric.MetricDao;","31","import static org.hamcrest.core.Is.is;","32","import static org.hamcrest.core.IsNull.nullValue;","33","import static org.junit.Assert.assertThat;","39","  public DbTester dbTester = DbTester.create(System2.INSTANCE);","41","  DefaultMetricFinder finder;","43","  @Before","44","  public void setUp() {","45","    dbTester.prepareDbUnit(DefaultMetricFinderTest.class, \"shared.xml\");","46","    finder = new DefaultMetricFinder(new DbClient(dbTester.database(), dbTester.myBatis(), new TestDBSessions(dbTester.myBatis()), new MetricDao()));","50","  public void shouldFindAll() {","51","    assertThat(finder.findAll().size(), is(2));","55","  public void shouldFindByKeys() {","56","    assertThat(finder.findAll(Arrays.asList(\"ncloc\", \"foo\", \"coverage\")).size(), is(2));","60","  public void shouldFindById() {","61","    assertThat(finder.findById(1).getKey(), is(\"ncloc\"));","62","    assertThat(finder.findById(3), nullValue());","63","  }","65","  @Test","66","  public void shouldFindByKey() {","67","    assertThat(finder.findByKey(\"ncloc\").getKey(), is(\"ncloc\"));","68","    assertThat(finder.findByKey(\"disabled\"), nullValue());"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/metric\/MetricDaoTest.java":[{"add":["38","  public DbTester db = DbTester.create(System2.INSTANCE);","40","  public ExpectedException expectedException = ExpectedException.none();","42","  private DbSession dbSession = db.getSession();","44","  private MetricDao underTest = new MetricDao();","48","    db.prepareDbUnit(getClass(), \"shared.xml\");","50","    MetricDto result = underTest.selectByKey(dbSession, \"coverage\");","69","    result = underTest.selectByKey(dbSession, \"disabled\");","74","  @Test","76","    expectedException.expect(RowNotFoundException.class);","77","","78","    underTest.selectOrFailByKey(dbSession, \"unknown\");","83","    db.prepareDbUnit(getClass(), \"manual_metric.xml\");","85","    MetricDto result = underTest.selectByKey(dbSession, \"manual\");","105","    db.prepareDbUnit(getClass(), \"shared.xml\");","107","    assertThat(underTest.selectEnabled(dbSession)).hasSize(2);","112","    db.prepareDbUnit(getClass(), \"shared.xml\");","114","    assertThat(underTest.selectAll(dbSession)).extracting(\"id\").containsExactly(2, 3, 1);","119","    underTest.insert(dbSession, new MetricDto()","135","    MetricDto result = underTest.selectByKey(dbSession, \"coverage\");","155","    underTest.insert(dbSession, new MetricDto()","185","    dbSession.commit();","187","    assertThat(db.countRowsOfTable(\"metrics\")).isEqualTo(2);","192","    MetricDto metric = underTest.insert(dbSession, newMetricDto());","194","    MetricDto result = underTest.selectById(dbSession, metric.getId());","201","    MetricDto metric = underTest.insert(dbSession, newMetricDto());","203","    MetricDto result = underTest.selectOrFailById(dbSession, metric.getId());","210","    expectedException.expect(RowNotFoundException.class);","212","    underTest.selectOrFailById(dbSession, 42L);","217","    MetricDto metric1 = underTest.insert(dbSession, newMetricDto());","218","    MetricDto metric2 = underTest.insert(dbSession, newMetricDto());","220","    List<MetricDto> result = underTest.selectByIds(dbSession, newHashSet(metric1.getId(), metric2.getId()));","227","    MetricDto metric = underTest.insert(dbSession, newMetricDto().setKey(\"first-key\"));","229","    underTest.update(dbSession, metric.setKey(\"second-key\"));","231","    MetricDto result = underTest.selectByKey(dbSession, \"second-key\");","237","    underTest.insert(dbSession, newMetricDto().setEnabled(true).setUserManaged(true));","238","    underTest.insert(dbSession, newMetricDto().setEnabled(true).setUserManaged(true));","239","    underTest.insert(dbSession, newMetricDto().setEnabled(false));","241","    int result = underTest.countEnabled(dbSession, true);","248","    underTest.insert(dbSession, newMetricDto().setDomain(\"first-domain\").setEnabled(true));","249","    underTest.insert(dbSession, newMetricDto().setDomain(\"second-domain\").setEnabled(true));","250","    underTest.insert(dbSession, newMetricDto().setDomain(\"second-domain\").setEnabled(true));","251","    underTest.insert(dbSession, newMetricDto().setDomain(\"third-domain\").setEnabled(true));","253","    List<String> domains = underTest.selectEnabledDomains(dbSession);","260","    underTest.insert(dbSession, newMetricDto().setKey(\"first-key\"));","261","    underTest.insert(dbSession, newMetricDto().setKey(\"second-key\"));","262","    underTest.insert(dbSession, newMetricDto().setKey(\"third-key\"));","264","    List<MetricDto> result = underTest.selectByKeys(dbSession, Arrays.asList(\"first-key\", \"second-key\", \"third-key\"));","272","    MetricDto metric1 = underTest.insert(dbSession, newMetricDto().setEnabled(true).setUserManaged(true));","273","    MetricDto metric2 = underTest.insert(dbSession, newMetricDto().setEnabled(true).setUserManaged(true));","275","    underTest.disableCustomByIds(dbSession, Arrays.asList(metric1.getId(), metric2.getId()));","277","    List<MetricDto> result = underTest.selectByIds(dbSession, newHashSet(metric1.getId(), metric2.getId()));","284","    underTest.insert(dbSession, newMetricDto().setKey(\"metric-key\").setEnabled(true).setUserManaged(true));","286","    boolean updated = underTest.disableCustomByKey(dbSession, \"metric-key\");","289","    MetricDto result = underTest.selectByKey(dbSession, \"metric-key\");","293","    updated = underTest.disableCustomByKey(dbSession, \"metric-key\");","299","    underTest.insert(dbSession, newMetricDto().setKey(\"metric-key\"));","301","    MetricDto result = underTest.selectOrFailByKey(dbSession, \"metric-key\");","309","    underTest.insert(dbSession, newMetricDto().setUserManaged(true).setEnabled(true));","310","    underTest.insert(dbSession, newMetricDto().setUserManaged(true).setEnabled(true));","311","    underTest.insert(dbSession, newMetricDto().setUserManaged(true).setEnabled(true));","312","    underTest.insert(dbSession, newMetricDto().setUserManaged(false).setEnabled(true));","313","    underTest.insert(dbSession, newMetricDto().setUserManaged(true).setEnabled(false));","315","    List<MetricDto> result = underTest.selectEnabled(dbSession, true, 0, 100);","322","    underTest.insert(dbSession, newMetricDto().setUserManaged(true).setEnabled(true).setKey(\"metric-key\"));","323","    underTest.insert(dbSession, newMetricDto().setUserManaged(false).setEnabled(true).setKey(\"another-metric-key\"));","324","    underTest.insert(dbSession, newMetricDto().setUserManaged(true).setEnabled(false).setKey(\"third-metric-key\"));","326","    List<MetricDto> result = underTest.selectAvailableCustomMetricsByComponentUuid(dbSession, \"project-uuid\");"],"delete":["23","import org.junit.After;","24","import org.junit.Before;","37","","41","  public DbTester dbTester = DbTester.create(System2.INSTANCE);","43","  public ExpectedException thrown = ExpectedException.none();","45","  DbSession session;","47","  MetricDao underTest;","48","","49","  @Before","50","  public void createDao() {","51","    session = dbTester.myBatis().openSession(false);","52","    underTest = new MetricDao();","53","  }","54","","55","  @After","56","  public void tearDown() {","57","    session.close();","58","  }","62","    dbTester.prepareDbUnit(getClass(), \"shared.xml\");","64","    MetricDto result = underTest.selectByKey(session, \"coverage\");","83","    result = underTest.selectByKey(session, \"disabled\");","88","  @Test(expected = RowNotFoundException.class)","90","    underTest.selectOrFailByKey(session, \"unknown\");","95","    dbTester.prepareDbUnit(getClass(), \"manual_metric.xml\");","97","    MetricDto result = underTest.selectByKey(session, \"manual\");","117","    dbTester.prepareDbUnit(getClass(), \"shared.xml\");","119","    assertThat(underTest.selectEnabled(session)).hasSize(2);","124","    dbTester.prepareDbUnit(getClass(), \"shared.xml\");","126","    assertThat(underTest.selectAll(session)).extracting(\"id\").containsExactly(2, 3, 1);","131","    underTest.insert(session, new MetricDto()","147","    MetricDto result = underTest.selectByKey(session, \"coverage\");","167","    underTest.insert(session, new MetricDto()","197","    session.commit();","199","    assertThat(dbTester.countRowsOfTable(\"metrics\")).isEqualTo(2);","204","    MetricDto metric = underTest.insert(session, newMetricDto());","206","    MetricDto result = underTest.selectById(session, metric.getId());","213","    MetricDto metric = underTest.insert(session, newMetricDto());","215","    MetricDto result = underTest.selectOrFailById(session, metric.getId());","222","    thrown.expect(RowNotFoundException.class);","224","    underTest.selectOrFailById(session, 42L);","229","    MetricDto metric1 = underTest.insert(session, newMetricDto());","230","    MetricDto metric2 = underTest.insert(session, newMetricDto());","232","    List<MetricDto> result = underTest.selectByIds(session, newHashSet(metric1.getId(), metric2.getId()));","239","    MetricDto metric = underTest.insert(session, newMetricDto().setKey(\"first-key\"));","241","    underTest.update(session, metric.setKey(\"second-key\"));","243","    MetricDto result = underTest.selectByKey(session, \"second-key\");","249","    underTest.insert(session, newMetricDto().setEnabled(true).setUserManaged(true));","250","    underTest.insert(session, newMetricDto().setEnabled(true).setUserManaged(true));","251","    underTest.insert(session, newMetricDto().setEnabled(false));","253","    int result = underTest.countEnabled(session, true);","260","    underTest.insert(session, newMetricDto().setDomain(\"first-domain\").setEnabled(true));","261","    underTest.insert(session, newMetricDto().setDomain(\"second-domain\").setEnabled(true));","262","    underTest.insert(session, newMetricDto().setDomain(\"second-domain\").setEnabled(true));","263","    underTest.insert(session, newMetricDto().setDomain(\"third-domain\").setEnabled(true));","265","    List<String> domains = underTest.selectEnabledDomains(session);","272","    underTest.insert(session, newMetricDto().setKey(\"first-key\"));","273","    underTest.insert(session, newMetricDto().setKey(\"second-key\"));","274","    underTest.insert(session, newMetricDto().setKey(\"third-key\"));","276","    List<MetricDto> result = underTest.selectByKeys(session, Arrays.asList(\"first-key\", \"second-key\", \"third-key\"));","284","    MetricDto metric1 = underTest.insert(session, newMetricDto().setEnabled(true).setUserManaged(true));","285","    MetricDto metric2 = underTest.insert(session, newMetricDto().setEnabled(true).setUserManaged(true));","287","    underTest.disableCustomByIds(session, Arrays.asList(metric1.getId(), metric2.getId()));","289","    List<MetricDto> result = underTest.selectByIds(session, newHashSet(metric1.getId(), metric2.getId()));","296","    underTest.insert(session, newMetricDto().setKey(\"metric-key\").setEnabled(true).setUserManaged(true));","298","    boolean updated = underTest.disableCustomByKey(session, \"metric-key\");","301","    MetricDto result = underTest.selectByKey(session, \"metric-key\");","305","    updated = underTest.disableCustomByKey(session, \"metric-key\");","311","    underTest.insert(session, newMetricDto().setKey(\"metric-key\"));","313","    MetricDto result = underTest.selectOrFailByKey(session, \"metric-key\");","321","    underTest.insert(session, newMetricDto().setUserManaged(true).setEnabled(true));","322","    underTest.insert(session, newMetricDto().setUserManaged(true).setEnabled(true));","323","    underTest.insert(session, newMetricDto().setUserManaged(true).setEnabled(true));","324","    underTest.insert(session, newMetricDto().setUserManaged(false).setEnabled(true));","325","    underTest.insert(session, newMetricDto().setUserManaged(true).setEnabled(false));","327","    List<MetricDto> result = underTest.selectEnabled(session, true, 0, 100);","334","    underTest.insert(session, newMetricDto().setUserManaged(true).setEnabled(true).setKey(\"metric-key\"));","335","    underTest.insert(session, newMetricDto().setUserManaged(false).setEnabled(true).setKey(\"another-metric-key\"));","336","    underTest.insert(session, newMetricDto().setUserManaged(true).setEnabled(false).setKey(\"third-metric-key\"));","338","    List<MetricDto> result = underTest.selectAvailableCustomMetricsByComponentUuid(session, \"project-uuid\");","342",""]}]}},"cd45a1067c9f249f9fd3e28a4f4fb957c846906a":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/measure\/live\/IssueMetricFormulaFactoryImplTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/qualitymodel\/DebtRatingGrid.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/qualitymodel\/DebtRatingGridTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/measure\/live\/IssueMetricFormulaFactoryImplTest.java":[{"add":["256","    \/\/ A is 5% --> min debt is exactly 200*0.05=10","260","      .assertThatValueIs(CoreMetrics.SQALE_RATING, Rating.A);","632","    \/\/ A is 5% --> min debt is exactly 200*0.05=10","636","      .assertThatLeakValueIs(CoreMetrics.NEW_MAINTAINABILITY_RATING, Rating.A);"],"delete":["256","    \/\/ B is 5% --> min debt is exactly 200*0.05=10","260","      .assertThatValueIs(CoreMetrics.SQALE_RATING, Rating.B);","632","    \/\/ B is 5% --> min debt is exactly 200*0.05=10","636","      .assertThatLeakValueIs(CoreMetrics.NEW_MAINTAINABILITY_RATING, Rating.B);"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/qualitymodel\/DebtRatingGrid.java":[{"add":["23","import java.util.EnumMap;","24","import java.util.Map;","27","import static com.google.common.base.Preconditions.checkState;","28","import static java.lang.String.format;","31","import static org.sonar.server.computation.task.projectanalysis.qualitymodel.Rating.A;","32","import static org.sonar.server.computation.task.projectanalysis.qualitymodel.Rating.B;","33","import static org.sonar.server.computation.task.projectanalysis.qualitymodel.Rating.C;","34","import static org.sonar.server.computation.task.projectanalysis.qualitymodel.Rating.D;","35","import static org.sonar.server.computation.task.projectanalysis.qualitymodel.Rating.E;","40","  private final EnumMap<Rating, Bounds> ratingBounds;","49","      this.ratingBounds = buildRatingBounds(gridValues);","56","  public DebtRatingGrid(double[] gridValues) {","57","    this.gridValues = Arrays.copyOf(gridValues, gridValues.length);","58","    this.ratingBounds = buildRatingBounds(gridValues);","59","  }","60","","61","  private static EnumMap<Rating, Bounds> buildRatingBounds(double[] gridValues) {","62","    checkState(gridValues.length == 4, \"Rating grid should contains 4 values\");","63","    EnumMap<Rating, Bounds> ratingBounds = new EnumMap<>(Rating.class);","64","    ratingBounds.put(A, new Bounds(0d, gridValues[0]));","65","    ratingBounds.put(B, new Bounds(gridValues[0], gridValues[1]));","66","    ratingBounds.put(C, new Bounds(gridValues[1], gridValues[2]));","67","    ratingBounds.put(D, new Bounds(gridValues[2], gridValues[3]));","68","    ratingBounds.put(E, new Bounds(gridValues[3], Double.MAX_VALUE));","69","    return ratingBounds;","70","  }","71","","72","  public Rating getRatingForDensity(double value) {","73","    return ratingBounds.entrySet().stream()","74","      .filter(e -> e.getValue().match(value))","75","      .map(Map.Entry::getKey)","76","      .findFirst()","77","      .orElseThrow(() -> new IllegalArgumentException(format(\"Invalid value '%s'\", value)));","92","  private static class Bounds {","93","    private final double lowerBound;","94","    private final double higherBound;","95","    private final boolean isLowerBoundInclusive;","96","","97","    private Bounds(double lowerBound, double higherBound) {","98","      this.lowerBound = lowerBound;","99","      this.higherBound = higherBound;","100","      this.isLowerBoundInclusive = lowerBound == 0;","101","    }","102","","103","    boolean match(double value) {","104","      boolean lowerBoundMatch = isLowerBoundInclusive ? (value >= lowerBound) : (value > lowerBound);","105","      return lowerBoundMatch && value <= higherBound;","106","    }","107","  }","108",""],"delete":["24","import org.sonar.api.utils.MessageException;","32","","33","  public DebtRatingGrid(double[] gridValues) {","34","    this.gridValues = Arrays.copyOf(gridValues, gridValues.length);","35","  }","50","  public Rating getRatingForDensity(double density) {","51","    for (Rating rating : Rating.values()) {","52","      double lowerBound = getGradeLowerBound(rating);","53","      if (density >= lowerBound) {","54","        return rating;","55","      }","56","    }","57","    throw MessageException.of(\"The rating density value should be between 0 and \" + Double.MAX_VALUE + \" and got \" + density);"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/qualitymodel\/DebtRatingGridTest.java":[{"add":["51","    assertThat(ratingGrid.getRatingForDensity(0.1)).isEqualTo(A);","53","    assertThat(ratingGrid.getRatingForDensity(0.2)).isEqualTo(B);","55","    assertThat(ratingGrid.getRatingForDensity(0.5)).isEqualTo(C);","57","    assertThat(ratingGrid.getRatingForDensity(1)).isEqualTo(D);","62","  public void density_matching_exact_grid_values() {","63","    assertThat(ratingGrid.getRatingForDensity(0.1)).isEqualTo(A);","64","    assertThat(ratingGrid.getRatingForDensity(0.2)).isEqualTo(B);","65","    assertThat(ratingGrid.getRatingForDensity(0.5)).isEqualTo(C);","66","    assertThat(ratingGrid.getRatingForDensity(1)).isEqualTo(D);","70","  public void convert_int_to_rating() {","79","  public void fail_on_invalid_density() {","80","    throwable.expect(IllegalArgumentException.class);","81","    throwable.expectMessage(\"Invalid value '-1.0'\");","82","","83","    ratingGrid.getRatingForDensity(-1);","84","  }","85","","86","  @Test","87","  public void fail_to_concert_invalid_value() {","91","","92","  @Test","93","  public void fail_on_invalid_grid() {","94","    throwable.expect(IllegalStateException.class);","95","    throwable.expectMessage(\"Rating grid should contains 4 values\");","96","","97","    ratingGrid = new DebtRatingGrid(new double[] {0.1, 0.2, 0.5});","98","  }"],"delete":["27","","52","    assertThat(ratingGrid.getRatingForDensity(0.1)).isEqualTo(B);","54","    assertThat(ratingGrid.getRatingForDensity(0.2)).isEqualTo(C);","56","    assertThat(ratingGrid.getRatingForDensity(0.5)).isEqualTo(D);","58","    assertThat(ratingGrid.getRatingForDensity(1)).isEqualTo(E);","63","  public void fail_on_invalid_density() {","64","    throwable.expect(RuntimeException.class);","65","","66","    ratingGrid.getRatingForDensity(-1);","70","  public void convert_int_to_rating() throws Exception {","79","  public void fail_to_concert_invalid_value() throws Exception {"]}]}},"ccf24581e2de42c829513b6270eac15bb0c0e9e7":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/issue\/views\/comment-form-view.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/issue\/views\/comment-form-view.js":[{"add":["51","    disableForm: function () {","52","      this.$(':input').prop('disabled', true);","53","    },","54","","55","    enableForm: function () {","56","      this.$(':input').prop('disabled', false);","57","    },","58","","71","      this.disableForm();","72","      return $.post(url, data)","73","          .done(function () {","74","            that.options.detailView.updateAfterAction(true);","75","          }).fail(function () {","76","            that.enableForm();","77","          });"],"delete":["63","      return $.post(url, data).done(function () {","64","        that.options.detailView.updateAfterAction(true);","65","      });"]}]}},"68cc9d45565f01dfe68c03d133cbc6591be0a544":{"changes":{"sonar-application\/build.gradle":"MODIFY"},"diff":{"sonar-application\/build.gradle":[{"add":["67","  bundledPlugin 'org.sonarsource.python:sonar-python-plugin:1.14.1.3143@jar'"],"delete":["67","  bundledPlugin 'org.sonarsource.python:sonar-python-plugin:1.14.0.3086@jar'"]}]}},"2060793a67a2e145332bcd780b166a76b9bb0672":{"changes":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/batch\/report\/AnalysisContextReportPublisher.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/batch\/report\/AnalysisContextReportPublisherTest.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/batch\/report\/AnalysisContextReportPublisher.java":[{"add":["117","    for (String prop : new TreeSet<>(props.keySet())) {","118","      dumpPropIfNotSensitive(fileWriter, prop, props.get(prop));","135","        dumpPropIfNotSensitive(fileWriter, prop, moduleSpecificProps.get(prop));","142","  private static void dumpPropIfNotSensitive(BufferedWriter fileWriter, String prop, String value) throws IOException {","143","    fileWriter.append(String.format(KEY_VALUE_FORMAT, prop, sensitive(prop) ? \"******\" : value)).append('\\n');","144","  }","145",""],"delete":["117","    for (String env : new TreeSet<>(props.keySet())) {","118","      fileWriter.append(String.format(KEY_VALUE_FORMAT, env, props.get(env))).append('\\n');","135","        fileWriter.append(String.format(KEY_VALUE_FORMAT, prop, sensitive(prop) ? \"******\" : moduleSpecificProps.get(prop))).append('\\n');"]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/batch\/report\/AnalysisContextReportPublisherTest.java":[{"add":["183","  public void shouldNotDumpSensitiveModuleProperties() throws Exception {","203","  \/\/ SONAR-7598","204","  @Test","205","  public void shouldNotDumpSensitiveGlobalProperties() throws Exception {","206","    ScannerReportWriter writer = new ScannerReportWriter(temp.newFolder());","207","    when(globalRepositories.globalSettings()).thenReturn(ImmutableMap.of(\"sonar.login\", \"my_token\", \"sonar.password\", \"azerty\", \"sonar.cpp.license.secured\", \"AZERTY\"));","208","","209","    publisher.init(writer);","210","","211","    assertThat(FileUtils.readFileToString(writer.getFileStructure().analysisLog())).containsSequence(","212","      \"sonar.cpp.license.secured=******\",","213","      \"sonar.login=******\",","214","      \"sonar.password=******\");","215","  }","216",""],"delete":["183","  public void shouldNotDumpSensitiveProperties() throws Exception {"]}]}},"c22e7f7e57a85b5e11dd071ab681eca650bbe477":{"changes":{"it\/it-tests\/src\/test\/resources\/issue\/IssueFilterTest\/with-many-rules.xml":"ADD","it\/it-tests\/src\/test\/java\/util\/ItUtils.java":"MODIFY","it\/it-tests\/src\/test\/resources\/issue\/IssueFilterOnCommonRulesTest\/xoo-common-rules-profile.xml":"ADD","it\/it-tests\/src\/test\/java\/it\/issue\/IssueFilterTest.java":"ADD","it\/it-tests\/src\/test\/java\/it\/Category2Suite.java":"MODIFY","it\/it-tests\/src\/test\/java\/it\/issue\/IssueFilterOnCommonRulesTest.java":"ADD"},"diff":{"it\/it-tests\/src\/test\/resources\/issue\/IssueFilterTest\/with-many-rules.xml":[{"add":[],"delete":[]}],"it\/it-tests\/src\/test\/java\/util\/ItUtils.java":[{"add":["216","  public static void setServerProperties(Orchestrator orchestrator, @Nullable String componentKey, String... properties) {","217","    for (int i = 0; i < properties.length; i += 2) {","218","      setServerProperty(orchestrator, componentKey, properties[i], properties[i + 1]);","219","    }","220","  }","221",""],"delete":[]}],"it\/it-tests\/src\/test\/resources\/issue\/IssueFilterOnCommonRulesTest\/xoo-common-rules-profile.xml":[{"add":[],"delete":[]}],"it\/it-tests\/src\/test\/java\/it\/issue\/IssueFilterTest.java":[{"add":[],"delete":[]}],"it\/it-tests\/src\/test\/java\/it\/Category2Suite.java":[{"add":["30","import it.issue.IssueFilterOnCommonRulesTest;","31","import it.issue.IssueFilterTest;","77","  IssueFilterOnCommonRulesTest.class,","78","  IssueFilterTest.class,"],"delete":[]}],"it\/it-tests\/src\/test\/java\/it\/issue\/IssueFilterOnCommonRulesTest.java":[{"add":[],"delete":[]}]}},"c98857962b32056da0858a3286ac634b2b52dc66":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/platform\/ws\/StatusActionTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/ws\/StatusAction.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/platform\/ws\/StatusActionTest.java":[{"add":["146","  public void status_is_STATUS_STARTING_if_platform_is_SAFEMODE_and_databaseMigration_is_SUCCEEDED() throws Exception {","147","    verifyStatus(Platform.Status.SAFEMODE, DatabaseMigrationState.Status.SUCCEEDED, STATUS_STARTING);","166","  public void status_is_STARTING_if_platform_is_STARTING_and_databaseMigration_is_SUCCEEDED() throws Exception {","167","    verifyStatus(Platform.Status.STARTING, DatabaseMigrationState.Status.SUCCEEDED, STATUS_STARTING);"],"delete":["146","  public void status_is_MIGRATION_RUNNING_if_platform_is_SAFEMODE_and_databaseMigration_is_SUCCEEDED() throws Exception {","147","    verifyStatus(Platform.Status.SAFEMODE, DatabaseMigrationState.Status.SUCCEEDED, STATUS_MIGRATION_RUNNING);","166","  public void status_is_MIGRATION_RUNNING_if_platform_is_STARTING_and_databaseMigration_is_SUCCEEDED() throws Exception {","167","    verifyStatus(Platform.Status.STARTING, DatabaseMigrationState.Status.SUCCEEDED, STATUS_MIGRATION_RUNNING);"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/ws\/StatusAction.java":[{"add":["137","        return Status.STARTING;","153","        return Status.STARTING;"],"delete":["137","        return Status.DB_MIGRATION_RUNNING;","153","        \/\/ status of Platform will change to STARTING _before_ DatabaseMigration status becomes SUCCEEDED","154","        \/\/ (see DatabaseMigrationImpl#doDatabaseMigration, platform's restart is requested _before_ DatabaseMigration status is updated)","155","        \/\/ so, in theory, this case can not happen","156","        return Status.DB_MIGRATION_RUNNING;"]}]}},"8af697d69441500c42dfc5d8954d44314d65a00b":{"changes":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/branch\/ProjectBranches.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/branch\/ProjectBranches.java":[{"add":["21","import java.util.HashMap;","25","import javax.annotation.Nullable;","36","  @Nullable","37","  private final String defaultBranchName;","38","","40","    this.branches = new HashMap<>();","41","    String mainBranchName = null;","42","    for (BranchInfo branch : branchInfos) {","43","      String branchName = branch.name();","44","      this.branches.put(branchName, branch);","45","      if (branch.isMain()) {","46","        mainBranchName = branchName;","47","      }","48","    }","49","    this.defaultBranchName = mainBranchName;","60","","61","  @CheckForNull","62","  public String defaultBranchName() {","63","    return defaultBranchName;","64","  }"],"delete":["23","import java.util.function.Function;","24","import java.util.stream.Collectors;","37","    branches = branchInfos.stream().collect(Collectors.toMap(BranchInfo::name, Function.identity()));"]}]}},"9112c817aaf6d3273888cc3ef82245f4fcda3b4b":{"changes":{"server\/sonar-main\/src\/main\/java\/org\/sonar\/application\/AppLogging.java":"MODIFY","server\/sonar-main\/src\/test\/java\/org\/sonar\/application\/AppLoggingTest.java":"MODIFY","server\/sonar-process\/src\/test\/java\/org\/sonar\/process\/logging\/LogbackHelperTest.java":"MODIFY","server\/sonar-process\/src\/test\/java\/org\/sonar\/process\/logging\/TestILoggingEvent.java":"ADD","server\/sonar-process\/src\/test\/java\/org\/sonar\/process\/logging\/EscapedMessageConverterTest.java":"ADD","server\/sonar-process\/src\/main\/java\/org\/sonar\/process\/logging\/EscapedMessageConverter.java":"ADD","server\/sonar-process\/src\/test\/java\/org\/sonar\/process\/logging\/PatternLayoutEncoderTest.java":"ADD","server\/sonar-webserver-core\/src\/test\/java\/org\/sonar\/server\/app\/WebServerProcessLoggingTest.java":"MODIFY","server\/sonar-process\/src\/main\/java\/org\/sonar\/process\/logging\/PatternLayoutEncoder.java":"ADD","server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/logging\/CeProcessLoggingTest.java":"MODIFY","server\/sonar-process\/src\/main\/java\/org\/sonar\/process\/logging\/LogbackHelper.java":"MODIFY"},"diff":{"server\/sonar-main\/src\/main\/java\/org\/sonar\/application\/AppLogging.java":[{"add":["33","import org.sonar.process.logging.PatternLayoutEncoder;"],"delete":["24","import ch.qos.logback.classic.encoder.PatternLayoutEncoder;"]}],"server\/sonar-main\/src\/test\/java\/org\/sonar\/application\/AppLoggingTest.java":[{"add":["45","import org.sonar.process.logging.PatternLayoutEncoder;"],"delete":["24","import ch.qos.logback.classic.encoder.PatternLayoutEncoder;"]}],"server\/sonar-process\/src\/test\/java\/org\/sonar\/process\/logging\/LogbackHelperTest.java":[{"add":[],"delete":["23","import ch.qos.logback.classic.encoder.PatternLayoutEncoder;"]}],"server\/sonar-process\/src\/test\/java\/org\/sonar\/process\/logging\/TestILoggingEvent.java":[{"add":[],"delete":[]}],"server\/sonar-process\/src\/test\/java\/org\/sonar\/process\/logging\/EscapedMessageConverterTest.java":[{"add":[],"delete":[]}],"server\/sonar-process\/src\/main\/java\/org\/sonar\/process\/logging\/EscapedMessageConverter.java":[{"add":[],"delete":[]}],"server\/sonar-process\/src\/test\/java\/org\/sonar\/process\/logging\/PatternLayoutEncoderTest.java":[{"add":[],"delete":[]}],"server\/sonar-webserver-core\/src\/test\/java\/org\/sonar\/server\/app\/WebServerProcessLoggingTest.java":[{"add":["49","import org.sonar.process.logging.PatternLayoutEncoder;","510","    OutputStreamAppender appender = (OutputStreamAppender) rootLogger.getAppender(\"file_web\");","513","    assertThat(((LayoutWrappingEncoder) encoder).getLayout()).isInstanceOf(LogbackJsonLayout.class);"],"delete":["24","import ch.qos.logback.classic.encoder.PatternLayoutEncoder;","510","    OutputStreamAppender appender = (OutputStreamAppender)rootLogger.getAppender(\"file_web\");","513","    assertThat(((LayoutWrappingEncoder)encoder).getLayout()).isInstanceOf(LogbackJsonLayout.class);"]}],"server\/sonar-process\/src\/main\/java\/org\/sonar\/process\/logging\/PatternLayoutEncoder.java":[{"add":[],"delete":[]}],"server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/logging\/CeProcessLoggingTest.java":[{"add":["41","import org.sonar.process.logging.PatternLayoutEncoder;"],"delete":["24","import ch.qos.logback.classic.encoder.PatternLayoutEncoder;"]}],"server\/sonar-process\/src\/main\/java\/org\/sonar\/process\/logging\/LogbackHelper.java":[{"add":[],"delete":["24","import ch.qos.logback.classic.encoder.PatternLayoutEncoder;"]}]}},"d81f32001f8a50acb51f0d9851a192269b870740":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/MetricBox.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/__tests__\/__snapshots__\/MetricBox-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/portfolio\/utils.ts":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/MetricBox.tsx":[{"add":["28","import { GraphType } from '..\/..\/..\/types\/project-activity';","119","          <ActivityLink","120","            component={component}","121","            metric={keys.activity || keys.rating}","122","            graph={GraphType.custom}","123","          \/>"],"delete":["118","          <ActivityLink component={component} metric={keys.activity || keys.rating} \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/__tests__\/__snapshots__\/MetricBox-test.tsx.snap":[{"add":["52","        graph=\"custom\"","53","        metric=\"reliability_rating,bugs\"","133","        graph=\"custom\"","214","        graph=\"custom\"","259","        graph=\"custom\""],"delete":["52","        metric=\"reliability_rating\""]}],"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/utils.ts":[{"add":["68","    last_change: 'last_change_on_reliability_rating',","69","    activity: 'reliability_rating,bugs'","84","    last_change: 'last_change_on_security_review_rating',","85","    activity: 'security_review_rating,security_hotspots'","92","    last_change: 'last_change_on_maintainability_rating',","93","    activity: 'sqale_rating,code_smells'"],"delete":["68","    last_change: 'last_change_on_reliability_rating'","83","    last_change: 'last_change_on_security_review_rating'","90","    last_change: 'last_change_on_maintainability_rating'"]}]}},"30938a6522f09c9a6c79cf7e3d3ffdc985924130":{"changes":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/CoreProperties.java":"MODIFY"},"diff":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/CoreProperties.java":[{"add":["257","  @Deprecated"],"delete":[]}]}},"7630d660953cba8eee725a6a46c89dbf658bf1a0":{"changes":{"it\/it-tests\/src\/test\/java\/it\/customMeasure\/CustomMeasuresTest.java":"MODIFY","it\/it-tests\/src\/test\/java\/it\/measureHistory\/DifferentialPeriodsTest.java":"MODIFY"},"diff":{"it\/it-tests\/src\/test\/java\/it\/customMeasure\/CustomMeasuresTest.java":[{"add":["41","  private static final String PROJECT_KEY = \"sample\";","42",""],"delete":["41","  public static final String PROJECT_KEY = \"sample\";"]}],"it\/it-tests\/src\/test\/java\/it\/measureHistory\/DifferentialPeriodsTest.java":[{"add":["40","import static util.ItUtils.runProjectAnalysis;","46","  static final String MULTI_MODULE_PROJECT_KEY = \"com.sonarsource.it.samples:multi-modules-sample\";","79","    runProjectAnalysis(orchestrator, \"shared\/xoo-sample\", \"sonar.projectDate\", formatDate(addDays(new Date(), -60)));","84","    runProjectAnalysis(orchestrator, \"shared\/xoo-sample\", \"sonar.projectDate\", formatDate(addDays(new Date(), -20)));","95","    runProjectAnalysis(orchestrator, \"shared\/xoo-sample\");","118","    runProjectAnalysis(orchestrator, \"shared\/xoo-sample\", \"sonar.projectDate\", formatDate(addDays(new Date(), -15)));","123","    runProjectAnalysis(orchestrator, \"shared\/xoo-sample\");","126","    runProjectAnalysis(orchestrator, \"shared\/xoo-sample\");","147","    runProjectAnalysis(orchestrator, \"shared\/xoo-sample\");","154","    runProjectAnalysis(orchestrator, \"shared\/xoo-sample\");","160","  \/**","161","   * SONAR-7237","162","   *\/","163","  @Test","164","  public void ensure_differential_measures_are_computed_when_adding_new_component_after_period() throws Exception {","165","    orchestrator.getServer().provisionProject(MULTI_MODULE_PROJECT_KEY, MULTI_MODULE_PROJECT_KEY);","166","    setServerProperty(orchestrator, MULTI_MODULE_PROJECT_KEY, \"sonar.timemachine.period1\", \"30\");","167","","168","    \/\/ Execute an analysis 60 days ago without module b","169","    orchestrator.getServer().associateProjectToQualityProfile(MULTI_MODULE_PROJECT_KEY, \"xoo\", \"empty\");","170","    runProjectAnalysis(orchestrator, \"shared\/xoo-multi-modules-sample\",","171","      \"sonar.projectDate\", formatDate(addDays(new Date(), -60)),","172","      \"sonar.modules\", \"module_a\"","173","    );","174","","175","    \/\/ Second analysis, 20 days ago, issues will be created","176","    orchestrator.getServer().restoreProfile(FileLocation.ofClasspath(\"\/measureHistory\/one-issue-per-line-profile.xml\"));","177","    orchestrator.getServer().associateProjectToQualityProfile(MULTI_MODULE_PROJECT_KEY, \"xoo\", \"one-issue-per-line\");","178","    runProjectAnalysis(orchestrator, \"shared\/xoo-multi-modules-sample\",","179","      \"sonar.projectDate\", formatDate(addDays(new Date(), -20)),","180","      \"sonar.modules\", \"module_a,module_b\"","181","    );","182","","183","    \/\/ Variation on module b should exist","184","    Resource ncloc = orchestrator.getServer().getWsClient()","185","      .find(ResourceQuery.createForMetrics(MULTI_MODULE_PROJECT_KEY + \":module_b\", \"ncloc\").setIncludeTrends(true));","186","    List<Measure> measures = ncloc.getMeasures();","187","    assertThat(measures.get(0).getVariation1()).isEqualTo(24);","188","  }","189",""],"delete":["22","import com.sonar.orchestrator.build.SonarRunner;","41","import static util.ItUtils.projectDir;","79","    orchestrator.executeBuild(SonarRunner.create(projectDir(\"shared\/xoo-sample\"))","80","      .setProperty(\"sonar.projectDate\", formatDate(addDays(new Date(), -60))));","85","    orchestrator.executeBuild(SonarRunner.create(projectDir(\"shared\/xoo-sample\"))","86","        .setProperty(\"sonar.projectDate\", formatDate(addDays(new Date(), -20))));","97","    orchestrator.executeBuild(SonarRunner.create(projectDir(\"shared\/xoo-sample\")));","120","    orchestrator.executeBuild(SonarRunner.create(projectDir(\"shared\/xoo-sample\"))","121","      .setProperty(\"sonar.projectDate\", formatDate(addDays(new Date(), -15))));","126","    orchestrator.executeBuild(SonarRunner.create(projectDir(\"shared\/xoo-sample\")));","129","    orchestrator.executeBuild(SonarRunner.create(projectDir(\"shared\/xoo-sample\")));","150","    orchestrator.executeBuild(SonarRunner.create(projectDir(\"shared\/xoo-sample\")));","157","    orchestrator.executeBuild(SonarRunner.create(projectDir(\"shared\/xoo-sample\")));","158",""]}]}},"9cb8739c465cbd26842fff6eb03d05a75f77a9c8":{"changes":{"server\/sonar-server-common\/src\/test\/java\/org\/sonar\/server\/organization\/DefaultOrganizationProviderImplTest.java":"MODIFY","server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/organization\/DefaultOrganizationProviderImpl.java":"MODIFY"},"diff":{"server\/sonar-server-common\/src\/test\/java\/org\/sonar\/server\/organization\/DefaultOrganizationProviderImplTest.java":[{"add":["21","import org.junit.After;","56","  @After","57","  public void tearDown() {","58","    underTest.unload();","59","  }","60","","123","  public void load_resets_thread_local_when_called_twice() {","124","    insertOrganization(ORGANIZATION_DTO_1, DATE_1);","125","    dbClient.internalPropertiesDao().save(dbSession, DEFAULT_ORGANIZATION, ORGANIZATION_DTO_1.getUuid());","126","    dbSession.commit();","128","    underTest.load();","129","    DefaultOrganization org1 = underTest.get();","130","","131","    underTest.load();","132","    DefaultOrganization org2 = underTest.get();","133","    assertThat(org1).isNotSameAs(org2);"],"delete":["31","import static org.assertj.core.api.Assertions.fail;","118","  public void load_fails_with_ISE_when_called_twice_without_unload_in_between() {","119","    underTest.load();","121","    try {","122","      underTest.load();","123","      fail(\"A IllegalStateException should have been raised\");","124","    } catch (IllegalStateException e) {","125","      assertThat(e).hasMessage(\"load called twice for thread '\" + Thread.currentThread().getName() + \"' or state wasn't cleared last time it was used\");","126","    } finally {","127","      underTest.unload();","128","    }"]}],"server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/organization\/DefaultOrganizationProviderImpl.java":[{"add":[],"delete":["72","    checkState(","73","      CACHE.get() == null,","74","      \"load called twice for thread '%s' or state wasn't cleared last time it was used\",","75","      Thread.currentThread().getName());"]}]}},"b9d1c53b683a6274091b14897d57888e99a4876a":{"changes":{"server\/sonar-docs\/src\/components\/PluginMetaData.tsx":"MODIFY","server\/sonar-docs\/gatsby-config.js":"MODIFY","server\/sonar-docs\/package.json":"MODIFY","server\/sonar-docs\/yarn.lock":"MODIFY"},"diff":{"server\/sonar-docs\/src\/components\/PluginMetaData.tsx":[{"add":["84","      \/\/ The following uses an older syntax for createNodeIterator() in order","85","      \/\/ to support IE11","86","      \/\/ - IE doesn't support the new { acceptNode: (node: Node) => number }","87","      \/\/   format for the 3rd parameter, and instead expects to get it passed","88","      \/\/   the function directly. Modern browsers support both paradigms as a","89","      \/\/   fallback, so we fallback to the old one.","90","      \/\/ - IE11 requires the 4th argument.","91","      \/\/ @ts-ignore: tsc requires an additional comment at the function call.","92","      const iterator = document.createNodeIterator(","93","        pageContainer,","94","        NodeFilter.SHOW_COMMENT,","95","        \/\/ @ts-ignore: IE11 doesn't support the { acceptNode: () => number } format.","96","        (_: Node) => NodeFilter.FILTER_ACCEPT,","97","        \/\/ @ts-ignore: IE11 requires the 4th argument.","98","        false","99","      );"],"delete":["84","      const iterator = document.createNodeIterator(pageContainer, NodeFilter.SHOW_COMMENT, {","85","        acceptNode: (_: Node) => NodeFilter.FILTER_ACCEPT","86","      });"]}],"server\/sonar-docs\/gatsby-config.js":[{"add":["31","      resolve: `gatsby-plugin-polyfill-io`,","32","      options: {","33","        features: [`Promise`, `fetch`, `Object.assign`, `Symbol`, `Array.from`]","34","      }","35","    },","36","    {"],"delete":[]}],"server\/sonar-docs\/package.json":[{"add":["10","    \"gatsby-plugin-polyfill-io\": \"1.1.0\","],"delete":[]}],"server\/sonar-docs\/yarn.lock":[{"add":["5053","gatsby-plugin-polyfill-io@^1.1.0:","5054","  version \"1.1.0\"","5055","  resolved \"https:\/\/repox.jfrog.io\/repox\/api\/npm\/npm\/gatsby-plugin-polyfill-io\/-\/gatsby-plugin-polyfill-io-1.1.0.tgz#61424c773ae123680e50b9a6692a4b939a1e6e13\"","5056","  integrity sha1-YUJMdzrhI2gOULmmaSpLk5oebhM=","5057","  dependencies:","5058","    babel-runtime \"^6.26.0\"","5059",""],"delete":[]}]}},"18d88fb429fbee1fb7b8aa4fc7d2dcb3021bb093":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/users\/templates\/users-tokens.hbs":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/account\/templates\/account-tokens.hbs":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/users\/templates\/users-tokens.hbs":[{"add":["20","            <div title=\"{{name}}\">","21","              {{limitString name}}","22","            <\/div>","59","    <input type=\"text\" required maxlength=\"100\" placeholder=\"Enter Token Name\">","66","        New token \"{{limitString newToken.name}}\" has been created. Make sure you copy it now, you won\u2019t be able to see it again!"],"delete":["20","            {{name}}","57","    <input type=\"text\" required maxlength=\"30\" placeholder=\"Enter Token Name\">","64","        New token \"{{newToken.name}}\" has been created. Make sure you copy it now, you won\u2019t be able to see it again!"]}],"server\/sonar-web\/src\/main\/js\/apps\/account\/templates\/account-tokens.hbs":[{"add":["7","  <table class=\"data\">","8","    <thead>","9","    <tr>","10","      <th>Name<\/th>","11","      <th class=\"text-right\">Created<\/th>","12","      <th>&nbsp;<\/th>","13","    <\/tr>","14","    <\/thead>","15","    <tbody>","16","    {{#each tokens}}","18","        <td>","19","          <div title=\"{{name}}\">","20","            {{limitString name}}","21","          <\/div>","22","        <\/td>","23","        <td class=\"thin nowrap text-right\">","24","          {{d createdAt}}","25","        <\/td>","26","        <td class=\"thin nowrap text-right\">","27","          <div class=\"big-spacer-left\">","28","            <form class=\"js-revoke-token-form\" data-token=\"{{name}}\">","29","              {{#if deleting}}","30","                <button class=\"button-red active input-small\">Sure?<\/button>","31","              {{else}}","32","                <button class=\"button-red input-small\">Revoke<\/button>","33","              {{\/if}}","34","            <\/form>","35","          <\/div>","36","        <\/td>","38","    {{else}}","39","      <tr>","40","        <td colspan=\"3\">","41","          <span class=\"note\">No tokens<\/span>","42","        <\/td>","43","      <\/tr>","44","    {{\/each}}","45","    <\/tbody>","46","  <\/table>","56","  <input type=\"text\" required maxlength=\"100\" placeholder=\"Enter Token Name\">","63","      New token \"{{limitString newToken.name}}\" has been created. Make sure you copy it now, you won\u2019t be able to see it","64","      again!"],"delete":["7","  <div class=\"abs-width-400\">","8","    <table class=\"data\">","9","      <thead>","11","        <th>Name<\/th>","12","        <th class=\"text-right\">Created<\/th>","13","        <th>&nbsp;<\/th>","15","      <\/thead>","16","      <tbody>","17","      {{#each tokens}}","18","        <tr>","19","          <td>","20","            {{name}}","21","          <\/td>","22","          <td class=\"thin nowrap text-right\">","23","            {{d createdAt}}","24","          <\/td>","25","          <td class=\"thin nowrap text-right\">","26","            <div class=\"big-spacer-left\">","27","              <form class=\"js-revoke-token-form\" data-token=\"{{name}}\">","28","                {{#if deleting}}","29","                  <button class=\"button-red active input-small\">Sure?<\/button>","30","                {{else}}","31","                  <button class=\"button-red input-small\">Revoke<\/button>","32","                {{\/if}}","33","              <\/form>","34","            <\/div>","35","          <\/td>","36","        <\/tr>","37","      {{else}}","38","        <tr>","39","          <td colspan=\"3\">","40","            <span class=\"note\">No tokens<\/span>","41","          <\/td>","42","        <\/tr>","43","      {{\/each}}","44","      <\/tbody>","45","    <\/table>","46","  <\/div>","56","  <input type=\"text\" required maxlength=\"30\" placeholder=\"Enter Token Name\">","63","      New token \"{{newToken.name}}\" has been created. Make sure you copy it now, you won\u2019t be able to see it again!"]}]}},"17c555878368e96a2ccdf79f2921a01814adaf6f":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/settings\/styles.css":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/settings\/styles.css":[{"add":["28","  margin: 0 -20px;","29","  padding: 10px 20px;","30","  border-top: 1px solid rgba(0, 0, 0, 0);","31","  border-bottom: 1px solid rgba(0, 0, 0, 0);"],"delete":["33","  margin: -10px -20px;","34","  padding: 9px 20px;"]}]}},"ba40f3dab6efc2e6004a9329947ac37437afe4c1":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/permission-templates\/components\/ListHeader.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/permission-templates\/components\/ListHeader.js":[{"add":["46","        <div className=\"permission-column-inner\">","47","          <span className=\"text-middle\">{translate('projects_role', permission.key)}<\/span>","48","          <HelpTooltip className=\"spacer-left\" overlay={this.renderTooltip(permission)} \/>","49","        <\/div>"],"delete":["46","        <span className=\"text-middle\">{translate('projects_role', permission.key)}<\/span>","47","        <HelpTooltip className=\"spacer-left\" overlay={this.renderTooltip(permission)} \/>"]}]}},"0616b2d9acf1a4f1512695d869db9363e4a9a704":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/ProjectRow.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/__tests__\/__snapshots__\/ProjectRow-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/styles\/init\/misc.css":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/ProjectRow.tsx":[{"add":["67","        <td className=\"nowrap hide-overflow\" style={{ maxWidth: 400 }}>"],"delete":["67","        <td className=\"nowrap\">"]}],"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/__tests__\/__snapshots__\/ProjectRow-test.tsx.snap":[{"add":["52","    className=\"nowrap hide-overflow\"","53","    style={","54","      Object {","55","        \"maxWidth\": 400,","56","      }","57","    }","146","    className=\"nowrap hide-overflow\"","147","    style={","148","      Object {","149","        \"maxWidth\": 400,","150","      }","151","    }"],"delete":["52","    className=\"nowrap\"","141","    className=\"nowrap\""]}],"server\/sonar-web\/src\/main\/js\/app\/styles\/init\/misc.css":[{"add":["30","table.hide-overflow td,","31","td.hide-overflow,","32","th.hide-overflow {","33","  text-overflow: ellipsis;","34","  overflow: hidden;","35","}","36",""],"delete":[]}]}},"87714eac31a67db8d55af07b7e6411eb64bce2a8":{"changes":{"server\/sonar-web\/src\/main\/js\/api\/components.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/DirectoryFacet.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/DirectoryFacet-test.tsx":"ADD","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/__snapshots__\/DirectoryFacet-test.tsx.snap":"ADD"},"diff":{"server\/sonar-web\/src\/main\/js\/api\/components.ts":[{"add":["162","export function getDirectories(data: GetTreeParams) {","163","  return getTree<TreeComponentWithPath>({ ...data, qualifiers: 'DIR' });","164","}","165",""],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/DirectoryFacet.tsx":[{"add":["25","import { getDirectories, TreeComponentWithPath } from '..\/..\/..\/api\/components';","32","  fetching: boolean;","38","  stats: Facet | undefined;","42","  getFacetItemText = (path: string) => {","43","    return collapsePath(path, 15);","46","  getSearchResultKey = (directory: TreeComponentWithPath) => {","47","    return directory.path;","50","  getSearchResultText = (directory: TreeComponentWithPath) => {","55","    return getDirectories({","60","    }).then(({ components, paging }) => ({","61","      paging,","62","      results: components.filter(dir => dir.path !== undefined)","63","    }));","66","  loadSearchResultCount = (directories: TreeComponentWithPath[]) => {","68","      directories: directories.map(directory => directory.path)","79","  renderFacetItem = (path: string) => {","80","    return this.renderDirectory(collapsePath(path, 15));","83","  renderSearchResult = (directory: TreeComponentWithPath, term: string) => {","84","    return this.renderDirectory(highlightTerm(collapsePath(directory.path, 15), term));","89","      <ListStyleFacet<TreeComponentWithPath>"],"delete":["25","import { getTree, TreeComponent } from '..\/..\/..\/api\/components';","31","  fetching: boolean;","38","  stats: T.Dict<number> | undefined;","42","  getFacetItemText = (directory: string) => {","43","    return collapsePath(directory, 15);","46","  getSearchResultKey = (directory: TreeComponent) => {","47","    return directory.name;","50","  getSearchResultText = (directory: TreeComponent) => {","55","    return getTree({","58","      qualifiers: 'DIR',","61","    }).then(({ components, paging }) => ({ paging, results: components }));","64","  loadSearchResultCount = (directories: TreeComponent[]) => {","66","      directories: directories.map(directory => directory.name)","77","  renderFacetItem = (directory: string) => {","78","    return this.renderDirectory(collapsePath(directory, 15));","81","  renderSearchResult = (directory: TreeComponent, term: string) => {","82","    return this.renderDirectory(highlightTerm(collapsePath(directory.name), term));","87","      <ListStyleFacet<TreeComponent>"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/DirectoryFacet-test.tsx":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/__snapshots__\/DirectoryFacet-test.tsx.snap":[{"add":[],"delete":[]}]}},"f831f6244ff31d74d8c8454ad144848780643d71":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/ComponentSourceSnippetViewer.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/ComponentSourceSnippetViewer.tsx":[{"add":["315","        linePopup={this.props.linePopup}"],"delete":[]}]}},"230d3af0d9c51679ca6dda09248e45d5060e0c65":{"changes":{"server\/sonar-docs\/src\/components\/__tests__\/navTreeUtils-test.ts":"MODIFY","server\/sonar-docs\/src\/components\/__tests__\/Sidebar-test.tsx":"MODIFY","server\/sonar-docs\/src\/components\/navTreeUtils.ts":"MODIFY","server\/sonar-docs\/src\/components\/__tests__\/__snapshots__\/Sidebar-test.tsx.snap":"MODIFY"},"diff":{"server\/sonar-docs\/src\/components\/__tests__\/navTreeUtils-test.ts":[{"add":["69","    expect(getOpenChainFromPath('latest\/path\/value\/', navTree)).toEqual([navTree[0]]);","86","    expect(testPathAgainstUrl('\/path\/foo', '\/1.0\/path\/foo\/')).toBe(true);","87","    expect(testPathAgainstUrl('\/path\/foo', '\/latest\/path\/foo\/')).toBe(true);"],"delete":[]}],"server\/sonar-docs\/src\/components\/__tests__\/Sidebar-test.tsx":[{"add":["74","      location={{ pathname: '\/2.0\/foo\/baz\/foo\/bar' } as Location}"],"delete":["74","      location={{ pathname: '\/foo\/baz\/foo\/bar' } as Location}"]}],"server\/sonar-docs\/src\/components\/navTreeUtils.ts":[{"add":["87","  return trimSlashes(url).replace(\/^(latest|\\d+\\.\\d+)\\\/\/, '') === trimSlashes(path);","88","}","89","","90","function trimSlashes(string: string) {","93","  return string.replace(leadingRegEx, '').replace(trailingRegEx, '');"],"delete":["89","  return (","90","    path.replace(leadingRegEx, '').replace(trailingRegEx, '') ===","91","    url.replace(leadingRegEx, '').replace(trailingRegEx, '')","92","  );"]}],"server\/sonar-docs\/src\/components\/__tests__\/__snapshots__\/Sidebar-test.tsx.snap":[{"add":["107","            \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","125","            \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","135","              \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","146","                \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","159","            \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","177","            \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\","],"delete":["107","            \"pathname\": \"\/foo\/baz\/foo\/bar\",","125","            \"pathname\": \"\/foo\/baz\/foo\/bar\",","135","              \"pathname\": \"\/foo\/baz\/foo\/bar\",","146","                \"pathname\": \"\/foo\/baz\/foo\/bar\",","159","            \"pathname\": \"\/foo\/baz\/foo\/bar\",","177","            \"pathname\": \"\/foo\/baz\/foo\/bar\","]}]}},"b1a9efa8aada0e789b32ffb1fcaa22a40e1cb240":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/IssueQueryService.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/IssueQueryServiceTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/IssueQueryService.java":[{"add":["465","    if (stringDate == null) {","466","      return null;","467","    }","468","","469","    try {","470","      return DateUtils.parseDateTime(stringDate);","471","    } catch (SonarException notDateTime) {","473","        return DateUtils.parseDate(stringDate);","474","      } catch (SonarException notDateEither) {","475","        throw new IllegalArgumentException(String.format(\"'%s' cannot be parsed as either a date or date+time\", stringDate));"],"delete":["465","    if (stringDate != null) {","467","        return DateUtils.parseDateTime(stringDate);","468","      } catch (SonarException notDateTime) {","469","        try {","470","          return DateUtils.parseDate(stringDate);","471","        } catch (SonarException notDateEither) {","472","          throw new SonarException(String.format(\"'%s' cannot be parsed as either a date or date+time\", stringDate));","473","        }","476","    return null;"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/IssueQueryServiceTest.java":[{"add":["61","import static org.mockito.Mockito.mock;","71","  DbClient dbClient = mock(DbClient.class);","72","  DbSession session = mock(DbSession.class);","73","  ComponentDao componentDao = mock(ComponentDao.class);","74","  AuthorDao authorDao = mock(AuthorDao.class);","75","  ComponentService componentService = mock(ComponentService.class);","76","  System2 system = mock(System2.class);","78","  IssueQueryService underTest;","94","    underTest = new IssueQueryService(dbClient, componentService, system, userSessionRule);","140","    IssueQuery query = underTest.createFromMap(map);","176","    IssueQuery query = underTest.createFromMap(map);","197","      underTest.createFromMap(map);","211","      underTest.createFromMap(map);","225","      underTest.createFromMap(map);","239","    IssueQuery query = underTest.createFromMap(map);","253","      underTest.createFromMap(map);","270","    IssueQuery query = underTest.createFromMap(map);","283","    IssueQuery query = underTest.createFromMap(map);","295","    IssueQuery query = underTest.createFromMap(map);","311","    IssueQuery query = underTest.createFromMap(map);","328","    IssueQuery query = underTest.createFromMap(map);","342","    IssueQuery query = underTest.createFromMap(map);","366","    IssueQuery query = underTest.createFromMap(map);","379","    IssueQuery query = underTest.createFromMap(map);","395","    IssueQuery query = underTest.createFromMap(map);","409","    IssueQuery query = underTest.createFromMap(map);","421","    IssueQuery query = underTest.createFromMap(map);","432","      underTest.createFromMap(map);","446","    assertThat(underTest.createFromMap(map).createdAfter()).isEqualTo(DateUtils.parseDateTime(\"2012-04-30T07:35:00+0100\"));","454","    underTest.createFromRequest(new SearchWsRequest()","464","    underTest.createFromRequest(new SearchWsRequest().setSinceLeakPeriod(true));","472","    underTest.createFromRequest(new SearchWsRequest()","475","      .setProjectUuids(Collections.singletonList(\"project-uuid\")));","476","  }","477","","478","  @Test","479","  public void fail_if_date_is_not_formatted_correctly() {","480","    expectedException.expect(IllegalArgumentException.class);","481","    expectedException.expectMessage(\"'unknown-date' cannot be parsed as either a date or date+time\");","482","","483","    underTest.createFromRequest(new SearchWsRequest()","484","      .setCreatedAfter(\"unknown-date\"));","485",""],"delete":["34","import org.junit.runner.RunWith;","36","import org.mockito.Mock;","38","import org.mockito.runners.MockitoJUnitRunner;","66","@RunWith(MockitoJUnitRunner.class)","74","  @Mock","75","  DbClient dbClient;","77","  @Mock","78","  DbSession session;","79","","80","  @Mock","81","  ComponentDao componentDao;","82","","83","  @Mock","84","  AuthorDao authorDao;","85","","86","  @Mock","87","  ComponentService componentService;","88","","89","  @Mock","90","  System2 system;","91","","92","  IssueQueryService issueQueryService;","108","    issueQueryService = new IssueQueryService(dbClient, componentService, system, userSessionRule);","154","    IssueQuery query = issueQueryService.createFromMap(map);","190","    IssueQuery query = issueQueryService.createFromMap(map);","211","      issueQueryService.createFromMap(map);","225","      issueQueryService.createFromMap(map);","239","      issueQueryService.createFromMap(map);","253","    IssueQuery query = issueQueryService.createFromMap(map);","267","      issueQueryService.createFromMap(map);","284","    IssueQuery query = issueQueryService.createFromMap(map);","297","    IssueQuery query = issueQueryService.createFromMap(map);","309","    IssueQuery query = issueQueryService.createFromMap(map);","325","    IssueQuery query = issueQueryService.createFromMap(map);","342","    IssueQuery query = issueQueryService.createFromMap(map);","356","    IssueQuery query = issueQueryService.createFromMap(map);","380","    IssueQuery query = issueQueryService.createFromMap(map);","393","    IssueQuery query = issueQueryService.createFromMap(map);","409","    IssueQuery query = issueQueryService.createFromMap(map);","423","    IssueQuery query = issueQueryService.createFromMap(map);","435","    IssueQuery query = issueQueryService.createFromMap(map);","446","      issueQueryService.createFromMap(map);","460","    assertThat(issueQueryService.createFromMap(map).createdAfter()).isEqualTo(DateUtils.parseDateTime(\"2012-04-30T07:35:00+0100\"));","468","    issueQueryService.createFromRequest(new SearchWsRequest()","478","    issueQueryService.createFromRequest(new SearchWsRequest().setSinceLeakPeriod(true));","486","    issueQueryService.createFromRequest(new SearchWsRequest()","489","      .setProjectUuids(Collections.singletonList(\"project-uuid\"))","490","      );"]}]}},"2278146794b220eb8b859759527a8578370bb0fa":{"changes":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/report\/ComponentsPublisherTest.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/ComponentsPublisher.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/report\/ComponentsPublisherTest.java":[{"add":["157","  public void should_set_modified_name_with_branch() throws IOException {","158","    ProjectAnalysisInfo projectAnalysisInfo = mock(ProjectAnalysisInfo.class);","159","    when(projectAnalysisInfo.analysisDate()).thenReturn(DateUtils.parseDate(\"2012-12-12\"));","160","","161","    ProjectDefinition rootDef = ProjectDefinition.create()","162","      .setKey(\"foo\")","163","      .setDescription(\"Root description\")","164","      .setBaseDir(temp.newFolder())","165","      .setWorkDir(temp.newFolder())","166","      .setProperty(CoreProperties.PROJECT_BRANCH_PROPERTY, \"my_branch\");","167","","168","    DefaultInputModule root = new DefaultInputModule(rootDef, 1);","169","","170","    moduleHierarchy = mock(InputModuleHierarchy.class);","171","    when(moduleHierarchy.root()).thenReturn(root);","172","","173","    ComponentsPublisher publisher = new ComponentsPublisher(moduleHierarchy, tree, branchConfiguration);","174","    publisher.publish(writer);","175","    Component rootProtobuf = reader.readComponent(1);","176","    assertThat(rootProtobuf.getKey()).isEqualTo(\"foo\");","177","    assertThat(rootProtobuf.getName()).isEqualTo(\"foo my_branch\");","178","  }","179","","180","  @Test"],"delete":[]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/ComponentsPublisher.java":[{"add":["260","      return module.definition().getName() + \" \" + module.definition().getBranch();"],"delete":["260","      return module.definition().getOriginalName() + \" \" + module.definition().getBranch();"]}]}},"3b2e5214686f9a386a35e035dc75ff0a836b8976":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/util\/GlobalLockManager.java":"ADD","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/telemetry\/TelemetryDaemonTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/platformlevel\/PlatformLevel4.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/telemetry\/TelemetryDaemon.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/util\/GlobalLockManagerTest.java":"ADD","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/platformlevel\/PlatformLevel1.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/util\/GlobalLockManager.java":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/telemetry\/TelemetryDaemonTest.java":[{"add":["31","import org.mockito.internal.matchers.Any;","53","import org.sonar.server.util.GlobalLockManager;","61","import static org.mockito.ArgumentMatchers.any;","62","import static org.mockito.ArgumentMatchers.anyInt;","99","  private final GlobalLockManager lockManager = mock(GlobalLockManager.class);","110","  private TelemetryDaemon communityUnderTest = new TelemetryDaemon(communityDataLoader, client, settings.asConfig(), internalProperties, lockManager, system2);","115","  private TelemetryDaemon commercialUnderTest = new TelemetryDaemon(commercialDataLoader, client, settings.asConfig(), internalProperties, lockManager, system2);","131","    when(lockManager.tryLock(any(), anyInt())).thenReturn(true);","183","    when(lockManager.tryLock(any(), anyInt())).thenReturn(true);","206","    when(lockManager.tryLock(any(), anyInt())).thenReturn(true);","216","    when(lockManager.tryLock(any(), anyInt())).thenReturn(true);","230","    when(lockManager.tryLock(any(), anyInt())).thenReturn(true);","246","    when(lockManager.tryLock(any(), anyInt())).thenReturn(true);","259","    when(lockManager.tryLock(any(), anyInt())).thenReturn(true);","275","    when(lockManager.tryLock(any(), anyInt())).thenReturn(true);","290","    when(lockManager.tryLock(any(), anyInt())).thenReturn(true);","306","    when(lockManager.tryLock(any(), anyInt())).thenReturn(true);","318","    when(lockManager.tryLock(any(), anyInt())).thenReturn(true);","332","    when(lockManager.tryLock(any(), anyInt())).thenReturn(true);","349","    when(lockManager.tryLock(any(), anyInt())).thenReturn(true);"],"delete":["105","  private TelemetryDaemon communityUnderTest = new TelemetryDaemon(communityDataLoader, client, settings.asConfig(), internalProperties, system2);","110","  private TelemetryDaemon commercialUnderTest = new TelemetryDaemon(commercialDataLoader, client, settings.asConfig(), internalProperties, system2);"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/platformlevel\/PlatformLevel4.java":[{"add":["521","      ProjectIndexersImpl.class,","523","      \/\/ telemetry","524","      TelemetryDataLoader.class,","525","      TelemetryDaemon.class,","526","      TelemetryClient.class","527","","528","    );"],"delete":["521","      ProjectIndexersImpl.class);","523","    \/\/ telemetry","524","    add(TelemetryDataLoader.class);","525","    addIfStartupLeader(TelemetryDaemon.class, TelemetryClient.class);"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/telemetry\/TelemetryDaemon.java":[{"add":["38","import org.sonar.server.util.GlobalLockManager;","53","  private static final String LOCK_NAME = \"TelemetryStat\";","55","  private static final String LOCK_DELAY_SEC = \"sonar.telemetry.lock.delay\";","59","  private final GlobalLockManager lockManager;","66","  public TelemetryDaemon(TelemetryDataLoader dataLoader, TelemetryClient telemetryClient, Configuration config,","67","    InternalProperties internalProperties, GlobalLockManager lockManager, System2 system2) {","72","    this.lockManager = lockManager;","121","","122","        if (!lockManager.tryLock(LOCK_NAME, lockDuration())) {","123","          return;","124","        }","125","","170","","171","  private int lockDuration(){","172","    return config.getInt(LOCK_DELAY_SEC).orElse(60);","173","  }"],"delete":["62","  public TelemetryDaemon(TelemetryDataLoader dataLoader, TelemetryClient telemetryClient, Configuration config, InternalProperties internalProperties, System2 system2) {"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/util\/GlobalLockManagerTest.java":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/platformlevel\/PlatformLevel1.java":[{"add":["63","import org.sonar.server.util.GlobalLockManager;","131","      GlobalLockManager.class,","132",""],"delete":[]}]}},"80120ab1ec8e300f1a7f22c269fd67fe8535ded8":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/__tests__\/__snapshots__\/RuleListItem-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/RuleListItem.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/__tests__\/__snapshots__\/RuleListItem-test.tsx.snap":[{"add":["18","    className=\"coding-rules-detail-quality-profile-deactivate button-red disabled\"","33","      className=\"coding-rules-detail-quality-profile-deactivate button-red disabled\""],"delete":["18","    className=\"coding-rules-detail-quality-profile-deactivate button-red\"","19","    disabled={true}","34","      className=\"coding-rules-detail-quality-profile-deactivate button-red\"","35","      disabled={true}"]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/RuleListItem.tsx":[{"add":["189","        <Button className=\"coding-rules-detail-quality-profile-deactivate button-red disabled\">"],"delete":["189","        <Button","190","          className=\"coding-rules-detail-quality-profile-deactivate button-red\"","191","          disabled={true}>"]}]}},"4d65efdeffdfdedc71f9a038cf853b92b0ffe80e":{"changes":{"\/dev\/null":"DELETE","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/ServerComponents.java":"MODIFY"},"diff":{"\/dev\/null":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/ServerComponents.java":[{"add":["874","      SystemRestartWsAction.class,","875","      SystemInfoWsAction.class,","876","      SystemWs.class,","877","      SystemMonitor.class,","878","      SonarQubeMonitor.class,","879","      EsMonitor.class,","880","      PluginsMonitor.class,","881","      JvmPropertiesMonitor.class,","882","      DatabaseMonitor.class","883","      ));"],"delete":["340","import org.sonar.server.test.ws.CoverageShowAction;","341","import org.sonar.server.test.ws.CoverageWs;","849","    pico.addSingleton(CoverageWs.class);","850","    pico.addSingleton(CoverageShowAction.class);","878","        SystemRestartWsAction.class,","879","        SystemInfoWsAction.class,","880","        SystemWs.class,","881","        SystemMonitor.class,","882","        SonarQubeMonitor.class,","883","        EsMonitor.class,","884","        PluginsMonitor.class,","885","        JvmPropertiesMonitor.class,","886","        DatabaseMonitor.class","887","    ));"]}]}}}