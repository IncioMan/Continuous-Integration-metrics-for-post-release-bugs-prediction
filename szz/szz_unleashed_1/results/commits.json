{"68acdc5ba2456d2a7b871a1c8f85eebf246f175d":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/user\/index\/UserIndexTest.java":"MODIFY","it\/it-tests\/src\/test\/java\/it\/issue\/AutoAssignTest.java":"MODIFY","it\/it-projects\/issue\/AutoAssignTest\/src\/sample.xoo":"ADD","it\/it-projects\/issue\/AutoAssignTest\/src\/sample.xoo.measures":"ADD","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/user\/index\/UserIndexDefinition.java":"MODIFY","it\/it-projects\/issue\/AutoAssignTest\/src\/sample.xoo.scm":"ADD","it\/it-projects\/issue\/AutoAssignTest\/sonar-project.properties":"ADD","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/user\/index\/UserIndex.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/user\/index\/UserIndexTest.java":[{"add":["140","  public void getAtMostThreeActiveUsersForScmAccount_is_case_insensitive_for_email()  {","145","    assertThat(underTest.getAtMostThreeActiveUsersForScmAccount(\"the_email@corp.com\")).hasSize(1);","146","    assertThat(underTest.getAtMostThreeActiveUsersForScmAccount(\"email\")).isEmpty();","150","  public void getAtMostThreeActiveUsersForScmAccount_is_case_insensitive_for_scm_account()  {","155","    assertThat(underTest.getAtMostThreeActiveUsersForScmAccount(\"JOHN.SMIth\")).hasSize(1);","156","    assertThat(underTest.getAtMostThreeActiveUsersForScmAccount(\"JOHN.SMITH\")).hasSize(1);","157","    assertThat(underTest.getAtMostThreeActiveUsersForScmAccount(\"JOHN\")).isEmpty();"],"delete":["140","  public void getAtMostThreeActiveUsersForScmAccount_is_case_sensitive_for_email()  {","145","    assertThat(underTest.getAtMostThreeActiveUsersForScmAccount(\"the_email@corp.com\")).isEmpty();","149","  public void getAtMostThreeActiveUsersForScmAccount_is_case_sensitive_for_scm_account()  {","154","    assertThat(underTest.getAtMostThreeActiveUsersForScmAccount(\"JOHN.SMIth\")).isEmpty();","155","    assertThat(underTest.getAtMostThreeActiveUsersForScmAccount(\"JOHN.SMITH\")).isEmpty();"]}],"it\/it-tests\/src\/test\/java\/it\/issue\/AutoAssignTest.java":[{"add":["21","import java.util.Arrays;","23","import javax.annotation.Nullable;","30","import org.sonarqube.ws.WsUsers;","32","import org.sonarqube.ws.client.WsClient;","33","import org.sonarqube.ws.client.user.CreateRequest;","34","import org.sonarqube.ws.client.user.SearchRequest;","52","    String projectKey = projectAnalysisRule.registerProject(\"issue\/AutoAssignTest\");","60","    newAdminWsClient(ORCHESTRATOR).wsConnector().call(new PostRequest(\"api\/projects\/delete\").setParam(\"project\", \"AutoAssignTest\"));","61","    deleteAllUsers();","69","    \/\/ verify that login matches, case-sensitive","70","    createUser(\"user1\", \"User 1\", \"user1@email.com\");","71","    createUser(\"USER2\", \"User 2\", \"user2@email.com\");","72","    \/\/ verify that name is not used to match, whatever the case","73","    createUser(\"user3\", \"User 3\", \"user3@email.com\");","74","    createUser(\"user4\", \"USER 4\", \"user4@email.com\");","75","    \/\/ verify that email matches, case-insensitive","76","    createUser(\"user5\", \"User 5\", \"user5@email.com\");","77","    createUser(\"user6\", \"User 6\", \"USER6@email.COM\");","78","    \/\/ verify that SCM account matches, case-insensitive","79","    createUser(\"user7\", \"User 7\", \"user7@email.com\", \"user7ScmAccount\");","80","    createUser(\"user8\", \"User 8\", \"user8@email.com\", \"user8SCMaccOUNT\");","81","","84","    List<Issue> issues = search(IssueQuery.create().components(\"AutoAssignTest:src\/sample.xoo\").sort(\"FILE_LINE\")).list();","85","    \/\/ login match, case-sensitive","86","    verifyIssueAssignee(issues, 1, \"user1\");","87","    verifyIssueAssignee(issues, 2, null);","88","    \/\/ user name is not used to match","89","    verifyIssueAssignee(issues, 3, null);","90","    verifyIssueAssignee(issues, 4, null);","91","    \/\/ email match, case-insensitive","92","    verifyIssueAssignee(issues, 5, \"user5\");","93","    verifyIssueAssignee(issues, 6, \"user6\");","94","    \/\/ SCM account match, case-insensitive","95","    verifyIssueAssignee(issues, 7, \"user7\");","96","    verifyIssueAssignee(issues, 8, \"user8\");","97","  }","98","","99","  private static void verifyIssueAssignee(List<Issue> issues, int line, @Nullable String expectedAssignee) {","100","    assertThat(issues.get(line - 1).assignee()).isEqualTo(expectedAssignee);","105","    createUser(\"user1\", \"User 1\", \"user1@email.com\");","106","    createUser(\"user2\", \"User 2\", \"user2@email.com\");","107","    setServerProperty(ORCHESTRATOR, \"sonar.issues.defaultAssigneeLogin\", \"user2\");","110","    \/\/ user1 is assigned to his issues. All other issues are assigned to the default assignee.","111","    assertThat(search(IssueQuery.create().assignees(\"user1\")).list()).hasSize(1);","112","    assertThat(search(IssueQuery.create().assignees(\"user2\")).list()).hasSize(8);","127","    createUser(\"user1\", \"User 1\", \"user1@email.com\");","149","    assertThat(search(IssueQuery.create().assignees(\"user1\")).list()).hasSize(1);","152","  private static void createUser(String login, String name, String email, String... scmAccounts) {","153","    newAdminWsClient(ORCHESTRATOR).users().create(","154","      CreateRequest.builder()","155","        .setLogin(login)","156","        .setName(name)","157","        .setEmail(email)","158","        .setPassword(\"xxxxxxx\")","159","        .setScmAccounts(Arrays.asList(scmAccounts))","160","        .build());","161","  }","162","","163","  private static void deleteAllUsers() {","164","    WsClient wsClient = newAdminWsClient(ORCHESTRATOR);","165","    WsUsers.SearchWsResponse searchResponse = wsClient.users().search(SearchRequest.builder().build());","166","    searchResponse.getUsersList().forEach(user -> {","167","      wsClient.wsConnector().call(new PostRequest(\"api\/users\/deactivate\").setParam(\"login\", user.getLogin()));","168","    });"],"delete":["29","import org.sonarqube.ws.client.WsResponse;","39","  static final String SIMON_USER = \"simon\";","40","","48","    ORCHESTRATOR.resetData();","49","","51","    String projectKey = projectAnalysisRule.registerProject(\"issue\/xoo-with-scm\");","59","    \/\/ Remove user simon","60","    newAdminWsClient(ORCHESTRATOR).wsConnector().call(","61","      new PostRequest(\"api\/users\/deactivate\")","62","        .setParam(\"login\", SIMON_USER));","70","    createUser(SIMON_USER, SIMON_USER);","73","    \/\/ Simon has 3 issues","74","    assertThat(search(IssueQuery.create().assignees(SIMON_USER)).list()).hasSize(3);","75","    \/\/ Other issues are not assigned as no user have been created on their author","76","    assertThat(search(IssueQuery.create().assigned(false)).list()).hasSize(10);","81","    createUser(SIMON_USER, SIMON_USER);","82","    setServerProperty(ORCHESTRATOR, \"sonar.issues.defaultAssigneeLogin\", SIMON_USER);","85","    \/\/ Simon has all issues","86","    assertThat(search(IssueQuery.create().assignees(SIMON_USER)).list()).hasSize(13);","101","    createUser(SIMON_USER, SIMON_USER);","123","    assertThat(search(IssueQuery.create().assignees(SIMON_USER)).list()).hasSize(3);","126","  private void createUser(String login, String password) {","127","    WsResponse response = newAdminWsClient(ORCHESTRATOR).wsConnector().call(","128","      new PostRequest(\"api\/users\/create\")","129","        .setParam(\"login\", login)","130","        .setParam(\"name\", login)","131","        .setParam(\"password\", password));","132","    assertThat(response.code()).isEqualTo(200);"]}],"it\/it-projects\/issue\/AutoAssignTest\/src\/sample.xoo":[{"add":[],"delete":[]}],"it\/it-projects\/issue\/AutoAssignTest\/src\/sample.xoo.measures":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/user\/index\/UserIndexDefinition.java":[{"add":["64","    mapping.stringFieldBuilder(FIELD_SCM_ACCOUNTS).disableNorms().addSubFields(SORTABLE_ANALYZER).build();"],"delete":["64","    mapping.stringFieldBuilder(FIELD_SCM_ACCOUNTS).disableNorms().build();"]}],"it\/it-projects\/issue\/AutoAssignTest\/src\/sample.xoo.scm":[{"add":[],"delete":[]}],"it\/it-projects\/issue\/AutoAssignTest\/sonar-project.properties":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/user\/index\/UserIndex.java":[{"add":["49","import static org.elasticsearch.index.query.QueryBuilders.matchQuery;","52","import static org.sonar.server.es.DefaultIndexSettingsElement.SORTABLE_ANALYZER;","95","            .should(matchQuery(SORTABLE_ANALYZER.subField(FIELD_EMAIL), scmAccount))","96","            .should(matchQuery(SORTABLE_ANALYZER.subField(FIELD_SCM_ACCOUNTS), scmAccount))))"],"delete":["93","            .should(termQuery(FIELD_EMAIL, scmAccount))","94","            .should(termQuery(FIELD_SCM_ACCOUNTS, scmAccount))))"]}]}},"5b947f0d78f4a63b916b10e626d29398830e5da3":{"changes":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/ce\/CeQueueDtoTest.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/ce\/CeQueueTesting.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/ce\/CeQueueDaoTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/ce\/CeQueueMapper.xml":"MODIFY","server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/queue\/InternalCeQueueImpl.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/ce\/CeQueueDao.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/ce\/CeQueueDto.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/ce\/UpdateIfTest.java":"ADD","server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/cleaning\/CeCleaningSchedulerImpl.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/ce\/CeQueueMapper.java":"MODIFY","server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/queue\/InternalCeQueue.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/ce\/UpdateIf.java":"MODIFY","server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/queue\/InternalCeQueueImplTest.java":"MODIFY","server\/sonar-ce-common\/src\/main\/java\/org\/sonar\/ce\/queue\/CeQueueImpl.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/ce\/ws\/TaskFormatterTest.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/ce\/CeActivityDaoTest.java":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/ce\/CeQueueDtoTest.java":[{"add":[],"delete":["95","","96","  @Test","97","  public void setWorkerUuid_accepts_null_empty_and_string_40_chars_or_less() {","98","    underTest.setWorkerUuid(null);","99","    underTest.setWorkerUuid(\"\");","100","    underTest.setWorkerUuid(\"bar\");","101","    underTest.setWorkerUuid(STR_40_CHARS);","102","  }","103","","104","  @Test","105","  public void setWorkerUuid_throws_IAE_if_value_is_41_chars() {","106","    String str_41_chars = STR_40_CHARS + \"a\";","107","","108","    expectedException.expect(IllegalArgumentException.class);","109","    expectedException.expectMessage(\"worker uuid is too long: \" + str_41_chars);","110","","111","    underTest.setWorkerUuid(str_41_chars);","112","  }"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/ce\/CeQueueTesting.java":[{"add":["21","import java.util.stream.Stream;","22","import org.sonar.db.DbSession;","23","","24","import static com.google.common.base.Preconditions.checkArgument;","27","import static org.assertj.core.api.Assertions.assertThat;","28","import static org.sonar.db.ce.CeQueueDto.Status.IN_PROGRESS;","29","import static org.sonar.db.ce.CeQueueDto.Status.PENDING;","44","      .setUpdatedAt(nextLong());","47","  public static void makeInProgress(DbSession dbSession, String workerUuid, long now, CeQueueDto... ceQueueDtos) {","48","    Stream.of(ceQueueDtos).forEach(ceQueueDto -> {","49","      CeQueueMapper mapper = dbSession.getMapper(CeQueueMapper.class);","50","      int touchedRows = mapper.updateIf(ceQueueDto.getUuid(),","51","        new UpdateIf.NewProperties(IN_PROGRESS, workerUuid, now, now),","52","        new UpdateIf.OldProperties(PENDING));","53","      assertThat(touchedRows).isEqualTo(1);","54","    });","55","  }","57","  public static void reset(DbSession dbSession, long now, CeQueueDto... ceQueueDtos) {","58","    Stream.of(ceQueueDtos).forEach(ceQueueDto -> {","59","      checkArgument(ceQueueDto.getStatus() == IN_PROGRESS);","60","      checkArgument(ceQueueDto.getWorkerUuid() != null);","61","","62","      CeQueueMapper mapper = dbSession.getMapper(CeQueueMapper.class);","63","      int touchedRows = mapper.updateIf(ceQueueDto.getUuid(),","64","        new UpdateIf.NewProperties(PENDING, ceQueueDto.getUuid(), now, now),","65","        new UpdateIf.OldProperties(IN_PROGRESS));","66","      assertThat(touchedRows).isEqualTo(1);","67","    });","68","  }"],"delete":["37","      .setUpdatedAt(nextLong())","38","      .setStartedAt(nextLong());"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/ce\/CeQueueDaoTest.java":[{"add":["44","import static org.assertj.core.groups.Tuple.tuple;","50","import static org.sonar.db.ce.CeQueueTesting.reset;","70","  private System2 alwaysIncreasingSystem2 = new AlwaysIncreasingSystem2();","74","  private CeQueueDao underTestAlwaysIncreasingSystem2 = new CeQueueDao(alwaysIncreasingSystem2);","83","      .setSubmitterUuid(SUBMITTER_LOGIN);","104","        assertThat(saved.getWorkerUuid()).isNull();","115","    assertThat(saved.getWorkerUuid()).isNull();","123","    insertPending(TASK_UUID_1, COMPONENT_UUID_1);","140","    insertPending(TASK_UUID_1, COMPONENT_UUID_1);","141","    insertPending(TASK_UUID_2, COMPONENT_UUID_1);","142","    insertPending(TASK_UUID_3, \"PROJECT_2\");","151","    insertPending(TASK_UUID_1, COMPONENT_UUID_1);","152","    insertPending(TASK_UUID_2, COMPONENT_UUID_1);","153","    insertPending(TASK_UUID_3, \"PROJECT_2\");","160","    insertPending(\"p1\");","161","    insertPending(\"p2\");","162","    insertPending(\"p3\");","163","    makeInProgress(\"w1\", alwaysIncreasingSystem2.now(), insertPending(\"i1\"));","164","    makeInProgress(\"w1\", alwaysIncreasingSystem2.now(), insertPending(\"i2\"));","165","    makeInProgress(\"w1\", alwaysIncreasingSystem2.now(), insertPending(\"i3\"));","173","  public void selectWornout_returns_task_pending_with_a_non_null_startedAt() {","174","    insertPending(\"p1\");","175","    makeInProgress(\"w1\", alwaysIncreasingSystem2.now(), insertPending(\"i1\"));","176","    CeQueueDto resetDto = makeInProgress(\"w1\", alwaysIncreasingSystem2.now(), insertPending(\"i2\"));","177","    makeInProgress(\"w1\", alwaysIncreasingSystem2.now(), insertPending(\"i3\"));","178","    reset(db.getSession(), alwaysIncreasingSystem2.now(), resetDto);","179","","180","    List<CeQueueDto> ceQueueDtos = underTest.selectWornout(db.getSession());","181","    assertThat(ceQueueDtos)","182","      .extracting(CeQueueDto::getStatus, CeQueueDto::getUuid)","183","      .containsOnly(tuple(PENDING, resetDto.getUuid()));","184","  }","185","","186","  @Test","188","    insertPending(TASK_UUID_1, COMPONENT_UUID_1);","199","    CeQueueDto[] worker1 = {insertPending(\"u1\"), insertPending(\"u2\"), insertPending(\"u3\"), insertPending(\"u4\")};","200","    CeQueueDto[] worker2 = {insertPending(\"o1\"), insertPending(\"o2\"), insertPending(\"o3\"), insertPending(\"o4\")};","201","    long startedAt = alwaysIncreasingSystem2.now();","202","    makeInProgress(WORKER_UUID_1, startedAt, worker1[0]);","203","    makeInProgress(WORKER_UUID_1, startedAt, worker1[3]);","204","    makeInProgress(WORKER_UUID_2, startedAt, worker2[0]);","205","    makeInProgress(WORKER_UUID_2, startedAt, worker2[3]);","209","    verifyResetToPendingForWorker(worker1[0], WORKER_UUID_1, startedAt);","210","    verifyUnchangedByResetToPendingForWorker(worker1[1]);","211","    verifyUnchangedByResetToPendingForWorker(worker1[2]);","212","    verifyResetToPendingForWorker(worker1[3], WORKER_UUID_1, startedAt);","213","    verifyInProgressUnchangedByResetToPendingForWorker(worker2[0], WORKER_UUID_2, startedAt);","214","    verifyUnchangedByResetToPendingForWorker(worker2[1]);","215","    verifyUnchangedByResetToPendingForWorker(worker2[2]);","216","    verifyInProgressUnchangedByResetToPendingForWorker(worker2[3], WORKER_UUID_2, startedAt);","221","    CeQueueDto[] worker1 = {insertPending(\"u1\"), insertPending(\"u2\"), insertPending(\"u3\"), insertPending(\"u4\")};","222","    CeQueueDto[] worker2 = {insertPending(\"o1\"), insertPending(\"o2\"), insertPending(\"o3\"), insertPending(\"o4\")};","223","    long startedAt = alwaysIncreasingSystem2.now();","224","    makeInProgress(WORKER_UUID_1, startedAt, worker1[0]);","225","    makeInProgress(WORKER_UUID_1, startedAt, worker1[3]);","226","    makeInProgress(WORKER_UUID_2, startedAt, worker2[0]);","227","    makeInProgress(WORKER_UUID_2, startedAt, worker2[3]);","231","    verifyResetByResetTasks(worker1[0], startedAt);","232","    verifyUnchangedByResetToPendingForWorker(worker1[1]);","233","    verifyUnchangedByResetToPendingForWorker(worker1[2]);","234","    verifyResetByResetTasks(worker1[3], startedAt);","235","    verifyResetByResetTasks(worker2[0], startedAt);","236","    verifyUnchangedByResetToPendingForWorker(worker2[1]);","237","    verifyUnchangedByResetToPendingForWorker(worker2[2]);","238","    verifyResetByResetTasks(worker2[3], startedAt);","243","    CeQueueDto[] worker1 = {insertPending(\"u1\"), insertPending(\"u2\"), insertPending(\"u3\"), insertPending(\"u4\")};","244","    CeQueueDto[] worker2 = {insertPending(\"o1\"), insertPending(\"o2\"), insertPending(\"o3\"), insertPending(\"o4\")};","245","    long startedAt = alwaysIncreasingSystem2.now();","246","    makeInProgress(WORKER_UUID_1, startedAt, worker1[0]);","247","    makeInProgress(WORKER_UUID_1, startedAt, worker1[3]);","248","    makeInProgress(WORKER_UUID_2, startedAt, worker2[0]);","249","    makeInProgress(WORKER_UUID_2, startedAt, worker2[3]);","253","    verifyInProgressUnchangedByResetToPendingForWorker(worker1[0], WORKER_UUID_1, startedAt);","254","    verifyUnchangedByResetToPendingForWorker(worker1[1]);","255","    verifyUnchangedByResetToPendingForWorker(worker1[2]);","256","    verifyInProgressUnchangedByResetToPendingForWorker(worker1[3], WORKER_UUID_1, startedAt);","257","    verifyResetByResetTasks(worker2[0], startedAt);","258","    verifyUnchangedByResetToPendingForWorker(worker2[1]);","259","    verifyUnchangedByResetToPendingForWorker(worker2[2]);","260","    verifyResetByResetTasks(worker2[3], startedAt);","263","  private CeQueueDto makeInProgress(String workerUuid, long startedAt, CeQueueDto ceQueueDto) {","264","    CeQueueTesting.makeInProgress(db.getSession(), workerUuid, startedAt, ceQueueDto);","265","    return underTestAlwaysIncreasingSystem2.selectByUuid(db.getSession(), ceQueueDto.getUuid()).get();","266","  }","267","","268","  private void verifyResetByResetTasks(CeQueueDto original, long startedAt) {","270","    assertThat(dto.getStatus()).isEqualTo(PENDING);","271","    assertThat(dto.getStartedAt()).isEqualTo(startedAt);","273","    assertThat(dto.getUpdatedAt()).isGreaterThan(startedAt);","277","  private void verifyResetToPendingForWorker(CeQueueDto original, String workerUuid, long startedAt) {","279","    assertThat(dto.getStatus()).isEqualTo(PENDING);","280","    assertThat(dto.getStartedAt()).isEqualTo(startedAt);","282","    assertThat(dto.getUpdatedAt()).isGreaterThan(startedAt);","283","    assertThat(dto.getWorkerUuid()).isEqualTo(workerUuid);","295","  private void verifyInProgressUnchangedByResetToPendingForWorker(CeQueueDto original, String workerUuid, long startedAt) {","296","    CeQueueDto dto = db.getDbClient().ceQueueDao().selectByUuid(db.getSession(), original.getUuid()).get();","297","    assertThat(dto.getStatus()).isEqualTo(IN_PROGRESS);","298","    assertThat(dto.getStartedAt()).isEqualTo(startedAt);","299","    assertThat(dto.getCreatedAt()).isEqualTo(original.getCreatedAt());","300","    assertThat(dto.getUpdatedAt()).isEqualTo(startedAt);","301","    assertThat(dto.getWorkerUuid()).isEqualTo(workerUuid);","302","  }","303","","309","    makeInProgress(WORKER_UUID_1, 2_232_222L, insertPending(TASK_UUID_1, COMPONENT_UUID_1));","315","    insertPending(TASK_UUID_1, COMPONENT_UUID_1);","317","    insertPending(TASK_UUID_2, COMPONENT_UUID_2);","345","    insertPending(TASK_UUID_1, COMPONENT_UUID_1);","347","    insertPending(TASK_UUID_2, COMPONENT_UUID_1);","369","    insertPending(newCeQueueDto(TASK_UUID_1)","376","    insertPending(newCeQueueDto(TASK_UUID_3)","383","    insertPending(newCeQueueDto(\"TASK_4\")","390","    insertPending(newCeQueueDto(TASK_UUID_2)","397","    insertPending(newCeQueueDto(\"TASK_5\")","419","    insertPending(newCeQueueDto(TASK_UUID_1)","436","    insertPending(newCeQueueDto(TASK_UUID_1)","453","    insertPending(newCeQueueDto(TASK_UUID_1)","471","    insertPending(newCeQueueDto(TASK_UUID_1)","477","    insertPending(newCeQueueDto(TASK_UUID_2)","483","    insertPending(newCeQueueDto(TASK_UUID_3)","496","    insertPending(newCeQueueDto(TASK_UUID_1)","502","    insertPending(newCeQueueDto(TASK_UUID_2)","508","    insertPending(newCeQueueDto(TASK_UUID_3)","523","  private void insertPending(CeQueueDto dto) {","528","  private CeQueueDto insertPending(String uuid) {","532","    dto.setStatus(PENDING);","539","  private CeQueueDto insertPending(String uuid, String componentUuid) {","544","    dto.setStatus(PENDING);"],"delete":["71","  private CeQueueDao underTestAlwaysIncreasingSystem2 = new CeQueueDao(new AlwaysIncreasingSystem2());","80","      .setSubmitterUuid(SUBMITTER_LOGIN)","81","      .setWorkerUuid(WORKER_UUID_1);","102","        assertThat(saved.getWorkerUuid()).isEqualTo(WORKER_UUID_1);","113","    assertThat(saved.getWorkerUuid()).isEqualTo(WORKER_UUID_1);","121","    insert(TASK_UUID_1, COMPONENT_UUID_1, PENDING);","138","    insert(TASK_UUID_1, COMPONENT_UUID_1, PENDING);","139","    insert(TASK_UUID_2, COMPONENT_UUID_1, PENDING);","140","    insert(TASK_UUID_3, \"PROJECT_2\", PENDING);","149","    insert(TASK_UUID_1, COMPONENT_UUID_1, PENDING);","150","    insert(TASK_UUID_2, COMPONENT_UUID_1, PENDING);","151","    insert(TASK_UUID_3, \"PROJECT_2\", PENDING);","158","    insert(\"p1\", CeQueueDto.Status.PENDING);","159","    insert(\"p2\", CeQueueDto.Status.PENDING);","160","    insert(\"p3\", CeQueueDto.Status.PENDING);","161","    insert(\"i1\", CeQueueDto.Status.IN_PROGRESS);","162","    insert(\"i2\", CeQueueDto.Status.IN_PROGRESS);","163","    insert(\"i3\", CeQueueDto.Status.IN_PROGRESS);","172","    insert(TASK_UUID_1, COMPONENT_UUID_1, PENDING);","183","    long startedAt = 2_099_888L;","184","    CeQueueDto u1 = insert(\"u1\", CeQueueDto.Status.IN_PROGRESS, WORKER_UUID_1, startedAt);","185","    CeQueueDto u2 = insert(\"u2\", CeQueueDto.Status.PENDING, WORKER_UUID_1, startedAt);","186","    CeQueueDto u3 = insert(\"u3\", CeQueueDto.Status.PENDING, WORKER_UUID_1, startedAt);","187","    CeQueueDto u4 = insert(\"u4\", CeQueueDto.Status.IN_PROGRESS, WORKER_UUID_1, startedAt);","188","    CeQueueDto o1 = insert(\"o1\", CeQueueDto.Status.IN_PROGRESS, WORKER_UUID_2, startedAt);","189","    CeQueueDto o2 = insert(\"o2\", CeQueueDto.Status.PENDING, WORKER_UUID_2, startedAt);","190","    CeQueueDto o3 = insert(\"o3\", CeQueueDto.Status.PENDING, WORKER_UUID_2, startedAt);","191","    CeQueueDto o4 = insert(\"o4\", CeQueueDto.Status.IN_PROGRESS,  WORKER_UUID_2, startedAt);","195","    verifyResetToPendingForWorker(u1);","196","    verifyUnchangedByResetToPendingForWorker(u2);","197","    verifyUnchangedByResetToPendingForWorker(u3);","198","    verifyResetToPendingForWorker(u4);","199","    verifyUnchangedByResetToPendingForWorker(o1);","200","    verifyUnchangedByResetToPendingForWorker(o2);","201","    verifyUnchangedByResetToPendingForWorker(o3);","202","    verifyUnchangedByResetToPendingForWorker(o4);","207","    long startedAt = 2_099_888L;","208","    CeQueueDto u1 = insert(\"u1\", CeQueueDto.Status.IN_PROGRESS, WORKER_UUID_1, startedAt);","209","    CeQueueDto u2 = insert(\"u2\", CeQueueDto.Status.PENDING, WORKER_UUID_1, startedAt);","210","    CeQueueDto u3 = insert(\"u3\", CeQueueDto.Status.PENDING, WORKER_UUID_1, startedAt);","211","    CeQueueDto u4 = insert(\"u4\", CeQueueDto.Status.IN_PROGRESS, WORKER_UUID_1, startedAt);","212","    CeQueueDto o1 = insert(\"o1\", CeQueueDto.Status.IN_PROGRESS, WORKER_UUID_2, startedAt);","213","    CeQueueDto o2 = insert(\"o2\", CeQueueDto.Status.PENDING, WORKER_UUID_2, startedAt);","214","    CeQueueDto o3 = insert(\"o3\", CeQueueDto.Status.PENDING, WORKER_UUID_2, startedAt);","215","    CeQueueDto o4 = insert(\"o4\", CeQueueDto.Status.IN_PROGRESS, WORKER_UUID_2, startedAt);","219","    verifyResetByResetTasks(u1);","220","    verifyUnchangedByResetToPendingForWorker(u2);","221","    verifyUnchangedByResetToPendingForWorker(u3);","222","    verifyResetByResetTasks(u4);","223","    verifyResetByResetTasks(o1);","224","    verifyUnchangedByResetToPendingForWorker(o2);","225","    verifyUnchangedByResetToPendingForWorker(o3);","226","    verifyResetByResetTasks(o4);","231","    long startedAt = 2_099_888L;","232","    CeQueueDto u1 = insert(\"u1\", CeQueueDto.Status.IN_PROGRESS, WORKER_UUID_1, startedAt);","233","    CeQueueDto u2 = insert(\"u2\", CeQueueDto.Status.PENDING, WORKER_UUID_1, startedAt);","234","    CeQueueDto u3 = insert(\"u3\", CeQueueDto.Status.PENDING, WORKER_UUID_1, startedAt);","235","    CeQueueDto u4 = insert(\"u4\", CeQueueDto.Status.IN_PROGRESS, WORKER_UUID_1, startedAt);","236","    CeQueueDto o1 = insert(\"o1\", CeQueueDto.Status.IN_PROGRESS, WORKER_UUID_2, startedAt);","237","    CeQueueDto o2 = insert(\"o2\", CeQueueDto.Status.PENDING, WORKER_UUID_2, startedAt);","238","    CeQueueDto o3 = insert(\"o3\", CeQueueDto.Status.PENDING, WORKER_UUID_2, startedAt);","239","    CeQueueDto o4 = insert(\"o4\", CeQueueDto.Status.IN_PROGRESS, WORKER_UUID_2, startedAt);","243","    verifyUnchangedByResetToPendingForWorker(u1);","244","    verifyUnchangedByResetToPendingForWorker(u2);","245","    verifyUnchangedByResetToPendingForWorker(u3);","246","    verifyUnchangedByResetToPendingForWorker(u4);","247","    verifyResetByResetTasks(o1);","248","    verifyUnchangedByResetToPendingForWorker(o2);","249","    verifyUnchangedByResetToPendingForWorker(o3);","250","    verifyResetByResetTasks(o4);","253","  private void verifyResetByResetTasks(CeQueueDto original) {","255","    assertThat(dto.getStatus()).isEqualTo(CeQueueDto.Status.PENDING).isNotEqualTo(original.getStatus());","256","    assertThat(dto.getStartedAt()).isNull();","258","    assertThat(dto.getUpdatedAt()).isGreaterThan(original.getUpdatedAt());","262","  private void verifyResetToPendingForWorker(CeQueueDto original) {","264","    assertThat(dto.getStatus()).isEqualTo(CeQueueDto.Status.PENDING);","265","    assertThat(dto.getStartedAt()).isNull();","267","    assertThat(dto.getUpdatedAt()).isGreaterThan(original.getUpdatedAt());","268","    assertThat(dto.getWorkerUuid()).isEqualTo(original.getWorkerUuid());","285","    insert(TASK_UUID_1, COMPONENT_UUID_1, IN_PROGRESS);","291","    insert(TASK_UUID_1, COMPONENT_UUID_1, PENDING);","293","    insert(TASK_UUID_2, COMPONENT_UUID_2, PENDING);","321","    insert(TASK_UUID_1, COMPONENT_UUID_1, PENDING);","323","    insert(TASK_UUID_2, COMPONENT_UUID_1, PENDING);","345","    insert(newCeQueueDto(TASK_UUID_1)","352","    insert(newCeQueueDto(TASK_UUID_3)","359","    insert(newCeQueueDto(\"TASK_4\")","366","    insert(newCeQueueDto(TASK_UUID_2)","373","    insert(newCeQueueDto(\"TASK_5\")","395","    insert(newCeQueueDto(TASK_UUID_1)","412","    insert(newCeQueueDto(TASK_UUID_1)","429","    insert(newCeQueueDto(TASK_UUID_1)","447","    insert(newCeQueueDto(TASK_UUID_1)","453","    insert(newCeQueueDto(TASK_UUID_2)","459","    insert(newCeQueueDto(TASK_UUID_3)","472","    insert(newCeQueueDto(TASK_UUID_1)","478","    insert(newCeQueueDto(TASK_UUID_2)","484","    insert(newCeQueueDto(TASK_UUID_3)","499","  private void insert(CeQueueDto dto) {","504","  private CeQueueDto insert(String uuid, CeQueueDto.Status status) {","508","    dto.setStatus(status);","515","  private CeQueueDto insert(String uuid, CeQueueDto.Status status, String workerUuid, Long startedAt) {","516","    CeQueueDto dto = new CeQueueDto();","517","    dto.setUuid(uuid);","518","    dto.setTaskType(CeTaskTypes.REPORT);","519","    dto.setStatus(status);","520","    dto.setSubmitterUuid(\"henri\");","521","    dto.setWorkerUuid(workerUuid);","522","    dto.setStartedAt(startedAt);","523","    underTestAlwaysIncreasingSystem2.insert(db.getSession(), dto);","524","    db.getSession().commit();","525","    return dto;","526","  }","527","","528","  private CeQueueDto insert(String uuid, String componentUuid, CeQueueDto.Status status) {","533","    dto.setStatus(status);"]}],"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/ce\/CeQueueMapper.xml":[{"add":["171","      and cq.started_at is null","198","  <select id=\"selectWornout\" resultType=\"org.sonar.db.ce.CeQueueDto\">","199","    select","200","      <include refid=\"columns\"\/>","201","    from","202","      ce_queue cq","203","    where","204","      cq.status = 'PENDING'","205","      and cq.started_at is not null","206","  <\/select>","207",""],"delete":["205","      worker_uuid,","207","      started_at,","217","      #{workerUuid,jdbcType=VARCHAR},","219","      #{startedAt,jdbcType=BIGINT},","228","      started_at=NULL,","257","      started_at=NULL,","274","      started_at=NULL,"]}],"server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/queue\/InternalCeQueueImpl.java":[{"add":["25","import java.util.List;","81","        dbSession.commit();","169","  public void cancelWornOuts() {","170","    try (DbSession dbSession = dbClient.openSession(false)) {","171","      List<CeQueueDto> wornOutTasks = dbClient.ceQueueDao().selectWornout(dbSession);","172","      wornOutTasks.forEach(queueDto -> {","173","        CeActivityDto activityDto = new CeActivityDto(queueDto);","174","        activityDto.setStatus(CeActivityDto.Status.CANCELED);","175","        updateQueueStatus(CeActivityDto.Status.CANCELED, activityDto);","176","        remove(dbSession, queueDto, activityDto);","177","      });","178","    }","179","  }","180","","181","  @Override"],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/ce\/CeQueueDao.java":[{"add":["91","  public List<CeQueueDto> selectWornout(DbSession dbSession) {","92","    return mapper(dbSession).selectWornout();","93","  }","94",""],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/ce\/CeQueueDto.java":[{"add":["100","  \/**","101","   * Accessed by MyBatis through reflexion. Field is otherwise read-only.","102","   *\/","103","  private  void setWorkerUuid(@Nullable String workerUuid) {","112","  \/**","113","   * Accessed by MyBatis through reflexion. Field is otherwise read-only.","114","   *\/","115","  private void setStartedAt(@Nullable Long l) {"],"delete":["100","  public CeQueueDto setWorkerUuid(@Nullable String workerUuid) {","101","    checkArgument(workerUuid == null || workerUuid.length() <= 40, \"worker uuid is too long: %s\", workerUuid);","103","    return this;","111","  public CeQueueDto setStartedAt(@Nullable Long l) {","113","    return this;"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/ce\/UpdateIfTest.java":[{"add":[],"delete":[]}],"server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/cleaning\/CeCleaningSchedulerImpl.java":[{"add":["58","    \/\/ So we skip resetting and cancelling tasks in queue","62","        cancelWornOuts();","77","","78","  private void cancelWornOuts() {","79","    try {","80","      LOG.debug(\"Cancelling any worn out task\");","81","      internalCeQueue.cancelWornOuts();","82","    } catch (Exception e) {","83","      LOG.warn(\"Failed to cancel worn out tasks\", e);","84","    }","85","  }"],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/ce\/CeQueueMapper.java":[{"add":["50","   * Select all pending tasks which have already been started.","51","   *\/","52","  List<CeQueueDto> selectWornout();","53","","54","  \/**"],"delete":[]}],"server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/queue\/InternalCeQueue.java":[{"add":["70","  void cancelWornOuts();","71",""],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/ce\/UpdateIf.java":[{"add":["25","import static com.google.common.base.Preconditions.checkArgument;","41","      long startedAt, long updatedAt) {","42","      checkArgument(workerUuid == null || workerUuid.length() <= 40, \"worker uuid is too long: %s\", workerUuid);"],"delete":["40","      Long startedAt, long updatedAt) {","56","    @CheckForNull"]}],"server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/queue\/InternalCeQueueImplTest.java":[{"add":["45","import org.sonar.db.ce.CeQueueTesting;","262","    CeQueueDto ceQueueDto = db.getDbClient().ceQueueDao().insert(session, new CeQueueDto()","265","      .setStatus(CeQueueDto.Status.PENDING));","266","    makeInProgress(ceQueueDto, \"Dustin\");","319","  public void peek_ignores_in_progress_tasks() {","320","    CeQueueDto dto = db.getDbClient().ceQueueDao().insert(session, new CeQueueDto()","323","      .setStatus(CeQueueDto.Status.PENDING));","324","    makeInProgress(dto, \"foo\");","327","    assertThat(underTest.peek(WORKER_UUID_1)).isEmpty();","352","    insertPending(\"u0\"); \/\/ add a pending one that will be picked so that u1 isn't peek and status reset is visible in DB","353","    CeQueueDto u1 = insertPending(\"u1\");\/\/ will be picked-because older than any of the reset ones","364","    insertPending(\"u0\"); \/\/ add a pending one that will be picked so that u1 isn't peek and status reset is visible in DB","396","      .setStatus(CeQueueDto.Status.PENDING);","398","    makeInProgress(dto, workerUuid);","400","    return db.getDbClient().ceQueueDao().selectByUuid(session, uuid).get();","403","  private CeQueueDto insertPending(String uuid) {","407","      .setStatus(CeQueueDto.Status.PENDING);","457","    CeQueueDto u1 = insertCeQueueDto(\"u1\");","458","    CeQueueDto u2 = insertCeQueueDto(\"u2\");","459","    CeQueueDto u6 = insertInProgress(\"u6\", \"worker1\");","460","    CeQueueDto u7 = insertInProgress(\"u7\", \"worker2\");","461","    CeQueueDto u8 = insertInProgress(\"u8\", \"worker3\");","479","    CeQueueDto u1 = insertCeQueueDto(\"u1\");","480","    CeQueueDto u2 = insertCeQueueDto(\"u2\");","481","    CeQueueDto u6 = insertInProgress(\"u6\", \"worker1\");","482","    CeQueueDto u7 = insertInProgress(\"u7\", \"worker2\");","483","    CeQueueDto u8 = insertInProgress(\"u8\", \"worker3\");","499","    CeQueueDto u1 = insertCeQueueDto(\"u1\");","500","    CeQueueDto u2 = insertCeQueueDto(\"u2\");","501","    CeQueueDto u6 = insertInProgress(\"u6\", \"worker1\");","502","    CeQueueDto u7 = insertInProgress(\"u7\", \"worker2\");","503","    CeQueueDto u8 = insertInProgress(\"u8\", \"worker3\");","526","    assertThat(dto.getStartedAt()).isEqualTo(original.getStartedAt());","538","  private CeQueueDto insertCeQueueDto(String uuid) {","542","      .setStatus(CeQueueDto.Status.PENDING);","609","  private CeQueueDto makeInProgress(CeQueueDto ceQueueDto, String workerUuid) {","610","    CeQueueTesting.makeInProgress(session, workerUuid, system2.now(), ceQueueDto);","611","    return db.getDbClient().ceQueueDao().selectByUuid(session, ceQueueDto.getUuid()).get();","612","  }","613",""],"delete":["261","    db.getDbClient().ceQueueDao().insert(session, new CeQueueDto()","264","      .setStatus(CeQueueDto.Status.PENDING)","265","      .setWorkerUuid(\"Dustin\"));","318","  public void peek_overrides_workerUuid_to_argument() {","319","    db.getDbClient().ceQueueDao().insert(session, new CeQueueDto()","322","      .setStatus(CeQueueDto.Status.PENDING)","323","      .setWorkerUuid(\"must be overriden\"));","326","    underTest.peek(WORKER_UUID_1);","327","","328","    CeQueueDto ceQueueDto = db.getDbClient().ceQueueDao().selectByUuid(session, \"uuid\").get();","329","    assertThat(ceQueueDto.getWorkerUuid()).isEqualTo(WORKER_UUID_1);","354","    insertPending(\"u0\", \"doesn't matter\"); \/\/ add a pending one that will be picked so that u1 isn't peek and status reset is visible in DB","355","    CeQueueDto u1 = insertPending(\"u1\", WORKER_UUID_1);\/\/ will be picked-because older than any of the reset ones","366","    insertPending(\"u0\", \"doesn't matter\"); \/\/ add a pending one that will be picked so that u1 isn't peek and status reset is visible in DB","398","      .setStatus(CeQueueDto.Status.IN_PROGRESS)","399","      .setWorkerUuid(workerUuid);","402","    return dto;","405","  private CeQueueDto insertPending(String uuid, String workerUuid) {","409","      .setStatus(CeQueueDto.Status.PENDING)","410","      .setWorkerUuid(workerUuid);","429","  public void cancel_copies_workerUuid() {","430","    CeQueueDto ceQueueDto = db.getDbClient().ceQueueDao().insert(session, new CeQueueDto()","431","      .setUuid(\"uuid\")","432","      .setTaskType(\"foo\")","433","      .setStatus(CeQueueDto.Status.PENDING)","434","      .setWorkerUuid(\"Dustin\"));","435","    db.commit();","436","","437","    underTest.cancel(db.getSession(), ceQueueDto);","438","","439","    CeActivityDto dto = db.getDbClient().ceActivityDao().selectByUuid(db.getSession(), \"uuid\").get();","440","    assertThat(dto.getWorkerUuid()).isEqualTo(\"Dustin\");","441","  }","442","","443","  @Test","475","    CeQueueDto u1 = insertCeQueueDto(\"u1\", CeQueueDto.Status.PENDING, null);","476","    CeQueueDto u2 = insertCeQueueDto(\"u2\", CeQueueDto.Status.PENDING, \"worker1\");","477","    CeQueueDto u3 = insertCeQueueDto(\"u3\", CeQueueDto.Status.PENDING, null);","478","    CeQueueDto u4 = insertCeQueueDto(\"u4\", CeQueueDto.Status.PENDING, \"worker2\");","479","    CeQueueDto u5 = insertCeQueueDto(\"u5\", CeQueueDto.Status.IN_PROGRESS, null);","480","    CeQueueDto u6 = insertCeQueueDto(\"u6\", CeQueueDto.Status.IN_PROGRESS, \"worker1\");","481","    CeQueueDto u7 = insertCeQueueDto(\"u7\", CeQueueDto.Status.IN_PROGRESS, \"worker2\");","482","    CeQueueDto u8 = insertCeQueueDto(\"u8\", CeQueueDto.Status.IN_PROGRESS, \"worker3\");","489","    verifyUnmodified(u3);","490","    verifyUnmodified(u4);","493","    verifyReset(u5);","503","    CeQueueDto u1 = insertCeQueueDto(\"u1\", CeQueueDto.Status.PENDING, null);","504","    CeQueueDto u2 = insertCeQueueDto(\"u2\", CeQueueDto.Status.PENDING, \"worker1\");","505","    CeQueueDto u3 = insertCeQueueDto(\"u3\", CeQueueDto.Status.PENDING, null);","506","    CeQueueDto u4 = insertCeQueueDto(\"u4\", CeQueueDto.Status.PENDING, \"worker2\");","507","    CeQueueDto u5 = insertCeQueueDto(\"u5\", CeQueueDto.Status.IN_PROGRESS, null);","508","    CeQueueDto u6 = insertCeQueueDto(\"u6\", CeQueueDto.Status.IN_PROGRESS, \"worker1\");","509","    CeQueueDto u7 = insertCeQueueDto(\"u7\", CeQueueDto.Status.IN_PROGRESS, \"worker2\");","510","    CeQueueDto u8 = insertCeQueueDto(\"u8\", CeQueueDto.Status.IN_PROGRESS, \"worker3\");","517","    verifyUnmodified(u3);","518","    verifyUnmodified(u4);","521","    verifyReset(u5);","529","    CeQueueDto u1 = insertCeQueueDto(\"u1\", CeQueueDto.Status.PENDING, null);","530","    CeQueueDto u2 = insertCeQueueDto(\"u2\", CeQueueDto.Status.PENDING, \"worker1\");","531","    CeQueueDto u3 = insertCeQueueDto(\"u3\", CeQueueDto.Status.PENDING, null);","532","    CeQueueDto u4 = insertCeQueueDto(\"u4\", CeQueueDto.Status.PENDING, \"worker2\");","533","    CeQueueDto u5 = insertCeQueueDto(\"u5\", CeQueueDto.Status.IN_PROGRESS, null);","534","    CeQueueDto u6 = insertCeQueueDto(\"u6\", CeQueueDto.Status.IN_PROGRESS, \"worker1\");","535","    CeQueueDto u7 = insertCeQueueDto(\"u7\", CeQueueDto.Status.IN_PROGRESS, \"worker2\");","536","    CeQueueDto u8 = insertCeQueueDto(\"u8\", CeQueueDto.Status.IN_PROGRESS, \"worker3\");","543","    verifyUnmodified(u3);","544","    verifyUnmodified(u4);","547","    verifyReset(u5);","562","    \/\/ StartedAt must be null","563","    assertThat(dto.getStartedAt()).isNull();","575","  private void verifyCanceled(CeQueueDto original) {","576","    assertThat(db.getDbClient().ceQueueDao().selectByUuid(db.getSession(), original.getUuid())).isEmpty();","577","    CeActivityDto dto = db.getDbClient().ceActivityDao().selectByUuid(db.getSession(), original.getUuid()).get();","578","    assertThat(dto.getStatus()).isEqualTo(CeActivityDto.Status.CANCELED);","579","    assertThat(dto.getWorkerUuid()).isEqualTo(original.getWorkerUuid());","580","  }","581","","582","  private CeQueueDto insertCeQueueDto(String uuid, CeQueueDto.Status status, String workerUuid) {","586","      .setStatus(status)","587","      .setWorkerUuid(workerUuid);"]}],"server\/sonar-ce-common\/src\/main\/java\/org\/sonar\/ce\/queue\/CeQueueImpl.java":[{"add":["160","  CeTask loadTask(DbSession dbSession, CeQueueDto dto) {"],"delete":["156","    dto.setStartedAt(null);","161","  protected CeTask loadTask(DbSession dbSession, CeQueueDto dto) {"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/ce\/ws\/TaskFormatterTest.java":[{"add":["41","import static org.sonar.db.ce.CeQueueTesting.makeInProgress;","88","    dto.setStatus(CeQueueDto.Status.PENDING);","92","    db.getDbClient().ceQueueDao().insert(db.getSession(), dto);","93","    makeInProgress(db.getSession(), \"workerUuid\", 1_958_000_000_000L, dto);","94","    CeQueueDto inProgress = db.getDbClient().ceQueueDao().selectByUuid(db.getSession(), dto.getUuid()).get();","96","    Ce.Task wsTask = underTest.formatQueue(db.getSession(), inProgress);","135","    dto.setStatus(CeQueueDto.Status.PENDING);","137","    db.getDbClient().ceQueueDao().insert(db.getSession(), dto);","138","    makeInProgress(db.getSession(), \"workerUuid\", startedAt, dto);","139","    CeQueueDto inProgress = db.getDbClient().ceQueueDao().selectByUuid(db.getSession(), dto.getUuid()).get();","142","    Ce.Task wsTask = underTest.formatQueue(db.getSession(), inProgress);"],"delete":["87","    dto.setStatus(CeQueueDto.Status.IN_PROGRESS);","89","    dto.setStartedAt(1_451_000_000_000L);","93","    Ce.Task wsTask = underTest.formatQueue(db.getSession(), dto);","132","    dto.setStatus(CeQueueDto.Status.IN_PROGRESS);","134","    dto.setStartedAt(startedAt);","137","    Ce.Task wsTask = underTest.formatQueue(db.getSession(), dto);"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/ce\/CeActivityDaoTest.java":[{"add":["43","import static org.sonar.db.ce.CeQueueDto.Status.PENDING;","44","import static org.sonar.db.ce.CeQueueTesting.makeInProgress;","68","    assertThat(dto.getSubmittedAt()).isEqualTo(1_450_000_000_000L);","348","    CeQueueDto creating = new CeQueueDto();","349","    creating.setUuid(uuid);","350","    creating.setStatus(PENDING);","351","    creating.setTaskType(type);","352","    creating.setComponentUuid(componentUuid);","353","    creating.setSubmitterUuid(\"submitter uuid\");","354","    creating.setCreatedAt(1_300_000_000_000L);","356","    db.getDbClient().ceQueueDao().insert(dbSession, creating);","357","    makeInProgress(dbSession, \"worker uuid\", 1_400_000_000_000L, creating);","358","","359","    CeQueueDto ceQueueDto = db.getDbClient().ceQueueDao().selectByUuid(dbSession, uuid).get();","360","","361","    CeActivityDto dto = new CeActivityDto(ceQueueDto);","394","      .map(CeActivityToUuid.INSTANCE::apply)","395","      .collect(MoreCollectors.toList());"],"delete":["66","    assertThat(dto.getSubmittedAt()).isEqualTo(1_300_000_000_000L);","346","    CeQueueDto queueDto = new CeQueueDto();","347","    queueDto.setUuid(uuid);","348","    queueDto.setTaskType(type);","349","    queueDto.setComponentUuid(componentUuid);","350","    queueDto.setSubmitterUuid(\"submitter uuid\");","351","    queueDto.setWorkerUuid(\"worker uuid\");","352","    queueDto.setCreatedAt(1_300_000_000_000L);","354","    CeActivityDto dto = new CeActivityDto(queueDto);","387","        .map(CeActivityToUuid.INSTANCE::apply)","388","        .collect(MoreCollectors.toList());"]}]}},"d6393623490fb38fa14c7e3a4a72bbcdbc47b835":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/notification\/IssueChangesEmailTemplate.java":"MODIFY","server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/issue\/notification\/IssueChangesEmailTemplateTest\/email_with_multiple_changes.txt":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/notification\/IssueChangesEmailTemplateTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/IssueFieldsSetter.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/notification\/IssueChangesEmailTemplate.java":[{"add":["22","import javax.annotation.CheckForNull;","23","import javax.annotation.Nullable;","27","import org.sonar.db.DbClient;","28","import org.sonar.db.DbSession;","29","import org.sonar.db.user.UserDto;","39","  private final DbClient dbClient;","42","  public IssueChangesEmailTemplate(DbClient dbClient, EmailSettings settings) {","43","    this.dbClient = dbClient;","74","  private static void appendChanges(Notification notif, StringBuilder sb) {","78","    appendField(sb, \"Type\", notif.getFieldValue(\"old.type\"), notif.getFieldValue(\"new.type\"));","96","  private static void appendHeader(Notification notif, StringBuilder sb) {","107","  private static void appendLine(StringBuilder sb, @Nullable String line) {","113","  private static void appendField(StringBuilder sb, String name, @Nullable String oldValue, @Nullable String newValue) {","126","  private static void appendFieldWithoutHistory(StringBuilder sb, String name, @Nullable String oldValue, @Nullable String newValue) {","143","    try (DbSession dbSession = dbClient.openSession(false)) {","144","      UserDto userDto = dbClient.userDao().selectByLogin(dbSession, login);","145","      if (userDto == null || !userDto.isActive()) {","146","        \/\/ most probably user was deleted","147","        return login;","148","      }","149","      return StringUtils.defaultIfBlank(userDto.getName(), login);"],"delete":["25","import org.sonar.api.user.User;","26","import org.sonar.api.user.UserFinder;","30","import javax.annotation.CheckForNull;","31","import javax.annotation.Nullable;","32","","40","  private final UserFinder userFinder;","42","  public IssueChangesEmailTemplate(EmailSettings settings, UserFinder userFinder) {","44","    this.userFinder = userFinder;","74","  private void appendChanges(Notification notif, StringBuilder sb) {","95","  private void appendHeader(Notification notif, StringBuilder sb) {","106","  private void appendLine(StringBuilder sb, @Nullable String line) {","112","  private void appendField(StringBuilder sb, String name, @Nullable String oldValue, @Nullable String newValue) {","125","  private void appendFieldWithoutHistory(StringBuilder sb, String name, @Nullable String oldValue, @Nullable String newValue) {","142","    User user = userFinder.findByLogin(login);","143","    if (user == null) {","144","      \/\/ most probably user was deleted","145","      return login;","147","    return StringUtils.defaultIfBlank(user.name(), login);"]}],"server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/issue\/notification\/IssueChangesEmailTemplateTest\/email_with_multiple_changes.txt":[{"add":["6","Type: BUG"],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/notification\/IssueChangesEmailTemplateTest.java":[{"add":["22","import java.nio.charset.StandardCharsets;","24","import org.junit.Rule;","27","import org.sonar.api.config.MapSettings;","28","import org.sonar.api.config.Settings;","30","import org.sonar.db.DbTester;","34","import static org.sonar.api.CoreProperties.SERVER_BASE_URL;","35","import static org.sonar.db.user.UserTesting.newUserDto;","39","  @Rule","40","  public DbTester db = DbTester.create();","42","  private Settings settings = new MapSettings().setProperty(SERVER_BASE_URL, \"http:\/\/nemo.sonarsource.org\");","44","  private IssueChangesEmailTemplate underTest = new IssueChangesEmailTemplate(db.getDbClient(), new EmailSettings(settings));","49","    EmailMessage message = underTest.format(notification);","59","    EmailMessage email = underTest.format(notification);","66","      StandardCharsets.UTF_8);","78","    EmailMessage email = underTest.format(notification);","85","      StandardCharsets.UTF_8);","97","    EmailMessage email = underTest.format(notification);","104","      StandardCharsets.UTF_8);","115","    EmailMessage email = underTest.format(notification);","122","      StandardCharsets.UTF_8);","135","      .setFieldValue(\"new.type\", \"BUG\")","138","    EmailMessage email = underTest.format(notification);","152","    db.users().insertUser(newUserDto().setLogin(\"simon\").setName(\"Simon\"));","158","    EmailMessage message = underTest.format(notification);","162","  @Test","163","  public void notification_contains_user_login_when_user_is_removed() {","164","    db.users().insertUser(newUserDto().setLogin(\"simon\").setName(\"Simon\").setActive(false));","165","","167","      .setChangeAuthorLogin(\"simon\")","168","      .setProject(\"Struts\", \"org.apache:struts\");","169","","170","    EmailMessage message = underTest.format(notification);","171","    assertThat(message.getFrom()).isEqualTo(\"simon\");","172","  }","173","","174","  private static Notification generateNotification() {","175","    return new IssueChangeNotification()"],"delete":["23","import org.junit.Before;","25","import org.junit.runner.RunWith;","26","import org.mockito.Mock;","27","import org.mockito.runners.MockitoJUnitRunner;","30","import org.sonar.api.user.User;","31","import org.sonar.api.user.UserFinder;","34","import java.nio.charset.StandardCharsets;","35","","37","import static org.mockito.Mockito.mock;","38","import static org.mockito.Mockito.when;","40","@RunWith(MockitoJUnitRunner.class)","43","  @Mock","44","  UserFinder userFinder;","46","  IssueChangesEmailTemplate template;","48","  @Before","49","  public void setUp() {","50","    EmailSettings settings = mock(EmailSettings.class);","51","    when(settings.getServerBaseURL()).thenReturn(\"http:\/\/nemo.sonarsource.org\");","52","    template = new IssueChangesEmailTemplate(settings, userFinder);","53","  }","58","    EmailMessage message = template.format(notification);","68","    EmailMessage email = template.format(notification);","75","      StandardCharsets.UTF_8","76","      );","88","    EmailMessage email = template.format(notification);","95","      StandardCharsets.UTF_8","96","      );","108","    EmailMessage email = template.format(notification);","115","      StandardCharsets.UTF_8","116","      );","127","    EmailMessage email = template.format(notification);","134","      StandardCharsets.UTF_8","135","      );","150","    EmailMessage email = template.format(notification);","164","    User user = mock(User.class);","165","    when(user.name()).thenReturn(\"Simon\");","166","    when(userFinder.findByLogin(\"simon\")).thenReturn(user);","172","    EmailMessage message = template.format(notification);","176","  private Notification generateNotification() {","185","    return notification;"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/IssueFieldsSetter.java":[{"add":["81","    checkState(!issue.manualSeverity(), \"Severity can't be changed\");"],"delete":["81","    if (issue.manualSeverity()) {","82","      throw new IllegalStateException(\"Severity can't be changed\");","83","    }"]}]}},"617fceff874f700ea12a90a2f1ad3ca083481ae9":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/issue\/IssueAssignerTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/issue\/IssueAssigner.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/issue\/IssueAssignerTest.java":[{"add":["161","  public void when_noscm_data_is_available_defaultAssignee_should_be_used() throws Exception {","162","    DefaultIssue issue = new DefaultIssue().setLine(null);","163","","164","    when(defaultAssignee.loadDefaultAssigneeLogin()).thenReturn(\"DefaultAssignee\");","165","    underTest.onIssue(FILE, issue);","166","","167","    assertThat(issue.assignee()).isEqualTo(\"DefaultAssignee\");","168","  }","169","","170","","171","  @Test"],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/issue\/IssueAssigner.java":[{"add":["75","","79","","80","      if (issue.assignee() == null) {","81","        String author = issue.authorLogin() == null ? null : scmAccountToUser.getNullable(issue.authorLogin());","82","        String assigneeLogin = StringUtils.defaultIfEmpty(author, defaultAssignee.loadDefaultAssigneeLogin());","83","","84","        issueUpdater.setNewAssignee(issue, assigneeLogin, changeContext);","85","      }"],"delete":["72","    boolean authorWasSet = false;","78","        authorWasSet = true;","80","    }","81","    if (authorWasSet && issue.assignee() == null) {","82","      String assigneeLogin = StringUtils.defaultIfEmpty(scmAccountToUser.getNullable(issue.authorLogin()), defaultAssignee.loadDefaultAssigneeLogin());","83","      issueUpdater.setNewAssignee(issue, assigneeLogin, changeContext);"]}]}},"d68eabbdec9d5c6744a89aab66b7d2d30e122829":{"changes":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/facets\/rule-facet.js":"MODIFY"},"diff":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["90","manual=Manual"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/facets\/rule-facet.js":[{"add":["34","              var lang = rule.langName || window.t('manual');","37","                text: '(' + lang + ') ' + rule.name"],"delete":["36","                text: '(' + rule.langName + ') ' + rule.name"]}]}},"4691d62918615ce3eb313dad0c405c332a3775b4":{"changes":{"server\/sonar-docs\/src\/layouts\/layout.css":"MODIFY","server\/sonar-docs\/src\/components\/HeadingsLink.tsx":"MODIFY","server\/sonar-docs\/src\/components\/__tests__\/__snapshots__\/HeadingsLink-test.tsx.snap":"ADD","server\/sonar-docs\/src\/components\/__tests__\/HeadingsLink-test.tsx":"ADD"},"diff":{"server\/sonar-docs\/src\/layouts\/layout.css":[{"add":["331","  float: right;","332","  margin-top: 80px;","333","}","334","","335",".page-container .headings-container-fixed {","336","  position: fixed;","337","  width: inherit;","339","  border-left: 1px solid #cfd3d7;","340","  z-index: 100;","341","  background: white;"],"delete":["330","  float: right;","332","  border-left: 1px solid #cfd3d7;"]}],"server\/sonar-docs\/src\/components\/HeadingsLink.tsx":[{"add":["43","      )","53","      activeIndex: -1,","64","  scrollHandler = () => {","65","    if (this.skipScrollingHandler) {","66","      this.skipScrollingHandler = false;","67","      return;","68","    }","69","","70","    const scrollTop = window.pageYOffset || document.body.scrollTop;","71","    this.highlightHeading(scrollTop);","72","  };","73","","83","    this.setState({ activeIndex: headingIndex });","115","      <div className=\"headings-container\">","116","        <div className=\"headings-container-fixed\">","117","          <span>On this page<\/span>","118","          <ul>","119","            {headers.map((header, index) => {","120","              return (","121","                <HeadingAnchor","122","                  active={this.state.activeIndex === index}","123","                  clickHandler={this.clickHandler}","124","                  index={index + 1}","125","                  key={index}>","126","                  {header.value}","127","                <\/HeadingAnchor>","128","              );","129","            })}","130","          <\/ul>","131","        <\/div>"],"delete":["23","const MINIMUM_TOP_MARGIN = 80;","33","  marginTop: number;","45","      ),","46","      marginTop: MINIMUM_TOP_MARGIN","52","    this.scrollHandler();","76","    const scrollLimit = document.body.scrollHeight - document.body.clientHeight;","77","    this.setState({","78","      activeIndex: headingIndex,","79","      marginTop: Math.max(MINIMUM_TOP_MARGIN, Math.min(scrollTop, scrollLimit))","80","    });","101","  scrollHandler = () => {","102","    if (this.skipScrollingHandler) {","103","      this.skipScrollingHandler = false;","104","      return;","105","    }","106","","107","    const scrollTop = window.pageYOffset || document.body.scrollTop;","108","    this.highlightHeading(scrollTop);","109","  };","110","","122","      <div className=\"headings-container\" style={{ marginTop: this.state.marginTop + 'px' }}>","123","        <span>On this page<\/span>","124","        <ul>","125","          {headers.map((header, index) => {","126","            return (","127","              <HeadingAnchor","128","                active={this.state.activeIndex === index}","129","                clickHandler={this.clickHandler}","130","                index={index + 1}","131","                key={index}>","132","                {header.value}","133","              <\/HeadingAnchor>","134","            );","135","          })}","136","        <\/ul>"]}],"server\/sonar-docs\/src\/components\/__tests__\/__snapshots__\/HeadingsLink-test.tsx.snap":[{"add":[],"delete":[]}],"server\/sonar-docs\/src\/components\/__tests__\/HeadingsLink-test.tsx":[{"add":[],"delete":[]}]}},"4b95ba35055b4177816a4857fad6413ea12def73":{"changes":{"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/purge\/PurgeMapper.xml":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/purge\/PurgeMapper.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/purge\/PurgeDaoTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/purge\/PurgeDao.java":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/purge\/PurgeMapper.xml":[{"add":["48","    <select id=\"selectStaleShortLivingBranchesAndPullRequests\" parameterType=\"map\" resultType=\"String\">","55","        and (pb.branch_type='SHORT' or pb.branch_type='PULL_REQUEST')"],"delete":["48","    <select id=\"selectStaleShortLivingBranches\" parameterType=\"map\" resultType=\"String\">","55","        and pb.branch_type='SHORT'"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/purge\/PurgeMapper.java":[{"add":["82","  List<String> selectStaleShortLivingBranchesAndPullRequests(@Param(\"mainBranchProjectUuid\") String mainBranchProjectUuid, @Param(\"toDate\") Long toDate);"],"delete":["82","  List<String> selectStaleShortLivingBranches(@Param(\"mainBranchProjectUuid\") String mainBranchProjectUuid, @Param(\"toDate\") Long toDate);"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/purge\/PurgeDaoTest.java":[{"add":["139","  public void purge_inactive_pull_request() {","140","    when(system2.now()).thenReturn(new Date().getTime());","141","    RuleDefinitionDto rule = dbTester.rules().insert();","142","    ComponentDto project = dbTester.components().insertMainBranch();","143","    ComponentDto longBranch = dbTester.components().insertProjectBranch(project);","144","    ComponentDto recentPullRequest = dbTester.components().insertProjectBranch(project, b -> b.setBranchType(BranchType.PULL_REQUEST));","145","","146","    \/\/ pull request with other components and issues, updated 31 days ago","147","    when(system2.now()).thenReturn(DateUtils.addDays(new Date(), -31).getTime());","148","    ComponentDto pullRequest = dbTester.components().insertProjectBranch(project, b -> b.setBranchType(BranchType.PULL_REQUEST));","149","    ComponentDto module = dbTester.components().insertComponent(newModuleDto(pullRequest));","150","    ComponentDto subModule = dbTester.components().insertComponent(newModuleDto(module));","151","    ComponentDto file = dbTester.components().insertComponent(newFileDto(subModule));","152","    dbTester.issues().insert(rule, pullRequest, file);","153","    dbTester.issues().insert(rule, pullRequest, subModule);","154","    dbTester.issues().insert(rule, pullRequest, module);","155","","156","    \/\/ back to present","157","    when(system2.now()).thenReturn(new Date().getTime());","158","    underTest.purge(dbSession, newConfigurationWith30Days(system2, project.uuid()), PurgeListener.EMPTY, new PurgeProfiler());","159","    dbSession.commit();","160","","161","    assertThat(getUuidsInTableProjects()).containsOnly(project.uuid(), longBranch.uuid(), recentPullRequest.uuid());","162","  }","163","","164","  @Test"],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/purge\/PurgeDao.java":[{"add":["80","    List<String> branchUuids = mapper.selectStaleShortLivingBranchesAndPullRequests(rootUuid, dateToLong(maxDate.get()));"],"delete":["80","    List<String> branchUuids = mapper.selectStaleShortLivingBranches(rootUuid, dateToLong(maxDate.get()));"]}]}},"ab0fd108dae208ae9c176b572d678066b66894d3":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ws\/WebServiceFilter.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/ws\/WebServiceFilterTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ws\/WebServiceFilter.java":[{"add":["23","import java.util.Set;","24","import java.util.function.Function;","25","import java.util.stream.Stream;","33","import org.sonar.core.util.stream.Collectors;","38"," * This filter is used to execute Web Services.","40"," * Every urls beginning with '\/api' and every web service urls are taken into account, except :","41"," * <ul>","42"," *   <li>web services that directly implemented with servlet filter, see {@link ServletFilterHandler})<\/li>","43"," *   <li>deprecated '\/api\/properties' web service, see {@link DeprecatedPropertiesWsFilter}<\/li>","44"," * <\/ul>","49","  private final Set<String> includeUrls;","50","  private final Set<String> excludeUrls;","54","    this.includeUrls = Stream.concat(","55","      Stream.of(\"\/api\/*\"),","56","      webServiceEngine.controllers()","57","        .stream()","58","        .flatMap(controller -> controller.actions().stream()","59","          .map(toPath())))","60","      .collect(Collectors.toSet());","61","    this.excludeUrls = Stream.concat(","62","      Stream.of(\"\/\" + CONTROLLER_PROPERTIES + \"*\"),","63","      webServiceEngine.controllers()","64","        .stream()","65","        .flatMap(controller -> controller.actions().stream()","66","          .filter(action -> action.handler() instanceof ServletFilterHandler)","67","          .map(toPath())))","68","      .collect(Collectors.toSet());","98","  private static Function<WebService.Action, String> toPath() {","99","    return action -> \"\/\" + action.path() + \"\/*\";"],"delete":["23","import java.util.ArrayList;","24","import java.util.List;","36"," * This filter is used to execute Java WS.","38"," * If the url match a Java WS, the output of the WS is returned and no other filers are executed.","39"," * If the url doesn't match a Java WS, then it's calling remaining filters (for instance to execute Rails WS).","44","  private final List<String> includeUrls = new ArrayList<>();","45","  private final List<String> excludeUrls = new ArrayList<>();","49","    webServiceEngine.controllers()","50","      .forEach(controller -> controller.actions()","51","        .forEach(action -> {","52","          \/\/ Rest and servlet filter WS should not be executed by the web service engine","53","          if (shouldBeExecutedByWebServiceEngine(controller, action)) {","54","            includeUrls.add(\"\/\" + controller.path() + \"\/*\");","55","          } else {","56","            excludeUrls.add(\"\/\" + action.path() + \"*\");","57","          }","58","        }));","88","  private static boolean shouldBeExecutedByWebServiceEngine(WebService.Controller controller, WebService.Action action) {","89","    return !(action.handler() instanceof ServletFilterHandler)","90","      && !controller.path().equals(CONTROLLER_PROPERTIES);"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/ws\/WebServiceFilterTest.java":[{"add":["49","  private WebServiceEngine webServiceEngine = mock(WebServiceEngine.class);","51","  private HttpServletRequest request = mock(HttpServletRequest.class);","52","  private HttpServletResponse response = mock(HttpServletResponse.class);","53","  private FilterChain chain = mock(FilterChain.class);","54","  private ServletOutputStream responseOutput = mock(ServletOutputStream.class);","56","  private WebServiceFilter underTest;","65","  public void match_declared_web_services() throws Exception {","68","      newWsUrl(\"batch\", \"index\"));","78","  public void match_undeclared_web_services_starting_with_api() throws Exception {","79","    initWebServiceEngine(newWsUrl(\"api\/issues\", \"search\"));","80","","81","    assertThat(underTest.doGetPattern().matches(\"\/api\/resources\/index\")).isTrue();","82","    assertThat(underTest.doGetPattern().matches(\"\/api\/user_properties\")).isTrue();","83","  }","84","","85","  @Test","86","  public void does_not_match_web_services_using_servlet_filter() throws Exception {","87","    initWebServiceEngine(newWsUrl(\"api\/authentication\", \"login\").setHandler(ServletFilterHandler.INSTANCE));","88","","89","    assertThat(underTest.doGetPattern().matches(\"\/api\/authentication\/login\")).isFalse();","90","  }","91","","92","  @Test","93","  public void does_not_match_api_properties_ws() throws Exception {","94","    initWebServiceEngine(newWsUrl(\"api\/properties\", \"index\"));","95","","96","    assertThat(underTest.doGetPattern().matches(\"\/api\/properties\")).isFalse();","97","    assertThat(underTest.doGetPattern().matches(\"\/api\/properties\/index\")).isFalse();","98","  }","99","","100","  @Test"],"delete":["49","  WebServiceEngine webServiceEngine = mock(WebServiceEngine.class);","51","  HttpServletRequest request = mock(HttpServletRequest.class);","52","  HttpServletResponse response = mock(HttpServletResponse.class);","53","  FilterChain chain = mock(FilterChain.class);","54","  ServletOutputStream responseOutput = mock(ServletOutputStream.class);","56","  WebServiceFilter underTest;","65","  public void do_get_pattern() throws Exception {","68","      newWsUrl(\"batch\", \"index\"),","69","      newWsUrl(\"api\/authentication\", \"login\").setHandler(ServletFilterHandler.INSTANCE));","75","    assertThat(underTest.doGetPattern().matches(\"\/api\/resources\/index\")).isFalse();","76","    assertThat(underTest.doGetPattern().matches(\"\/api\/authentication\/login\")).isFalse();","77","    assertThat(underTest.doGetPattern().matches(\"\/api\/properties\")).isFalse();"]}]}},"8a00454ce43880eecc5224d19aac04876a8d52a8":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/ServerImpl.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/ServerImpl.java":[{"add":["157","    return getURL();","167","    return getURL().startsWith(\"https:\/\/\");"],"delete":["50","import static org.sonar.api.CoreProperties.SERVER_BASE_URL_DEFAULT_VALUE;","158","    return get(SERVER_BASE_URL, SERVER_BASE_URL_DEFAULT_VALUE);","168","    return get(SERVER_BASE_URL, SERVER_BASE_URL_DEFAULT_VALUE).startsWith(\"https:\/\/\");"]}]}},"39db83f50fc00ad01b2ed898bf6a8b39b51f4c9c":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/user\/ws\/SearchAction.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/user\/ws\/SearchActionTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/user\/ws\/SearchAction.java":[{"add":["94","        \"Field 'tokensCount' is only accessible to System Administrator and logged in user.<br\/>\" +","155","      setIfNeeded(isNeeded(FIELD_TOKENS_COUNT, fields) && user.getLogin().equals(userSession.getLogin()), tokensCount, userBuilder::setTokensCount);","164","      setIfNeeded(FIELD_TOKENS_COUNT, fields, tokensCount, userBuilder::setTokensCount);"],"delete":["154","      setIfNeeded(FIELD_TOKENS_COUNT, fields, tokensCount, userBuilder::setTokensCount);"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/user\/ws\/SearchActionTest.java":[{"add":["135","  public void return_tokens_count_for_logged_user() {","140","","142","    assertThat(ws.newRequest()","143","        .executeProtobuf(SearchWsResponse.class).getUsersList())","144","        .extracting(User::getLogin, User::hasTokensCount)","145","        .containsExactlyInAnyOrder(tuple(user.getLogin(), false));","147","    userSession.logIn(user);","148","    assertThat(ws.newRequest()","149","        .executeProtobuf(SearchWsResponse.class).getUsersList())","150","        .extracting(User::getLogin, User::getTokensCount)","151","        .containsExactlyInAnyOrder(tuple(user.getLogin(), 2));","152","  }","154","  @Test","155","  public void return_tokens_count_when_system_administer() {","156","    UserDto user = db.users().insertUser();","157","    db.users().insertToken(user);","158","    db.users().insertToken(user);","159","    userIndexer.indexOnStartup(null);","160","","161","    userSession.logIn().setSystemAdministrator();","162","    assertThat(ws.newRequest()","163","      .executeProtobuf(SearchWsResponse.class).getUsersList())","164","        .extracting(User::getLogin, User::getTokensCount)","165","        .containsExactlyInAnyOrder(tuple(user.getLogin(), 2));","166","","167","    userSession.logIn();","168","    assertThat(ws.newRequest()","169","        .executeProtobuf(SearchWsResponse.class).getUsersList())","170","        .extracting(User::getLogin, User::hasTokensCount)","171","        .containsExactlyInAnyOrder(tuple(user.getLogin(), false));"],"delete":["135","  public void return_tokens_count() {","142","    SearchWsResponse response = ws.newRequest()","143","      .executeProtobuf(SearchWsResponse.class);","145","    assertThat(response.getUsersList())","146","      .extracting(User::getLogin, User::getTokensCount)","147","      .containsExactlyInAnyOrder(tuple(user.getLogin(), 2));"]}]}},"b38ba09393410b3511a00c76b6a788d74bf10a47":{"changes":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/scan\/branch\/BranchConfigurationProviderTest.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/branch\/BranchConfigurationProvider.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/scan\/branch\/BranchConfigurationProviderTest.java":[{"add":["23","import static org.mockito.ArgumentMatchers.anyMap;","27","import static org.mockito.Mockito.verify;","30","import java.util.Collections;","31","import java.util.HashMap;","32","import java.util.Map;","33","import java.util.function.Supplier;","34","","35","import org.junit.Before;","36","import org.junit.Test;","37","import org.mockito.ArgumentCaptor;","38","import org.mockito.Captor;","39","import org.mockito.MockitoAnnotations;","40","import org.sonar.api.batch.bootstrap.ProjectDefinition;","41","import org.sonar.api.batch.bootstrap.ProjectReactor;","42","import org.sonar.scanner.bootstrap.GlobalConfiguration;","43","import org.sonar.scanner.repository.settings.SettingsLoader;","44","","47","  private GlobalConfiguration globalConfiguration = mock(GlobalConfiguration.class);","48","  private BranchConfigurationLoader loader = mock(BranchConfigurationLoader.class);","49","  private BranchConfiguration config = mock(BranchConfiguration.class);","50","  private ProjectBranches branches = mock(ProjectBranches.class);","51","  private ProjectPullRequests pullRequests = mock(ProjectPullRequests.class);","52","  private ProjectReactor reactor = mock(ProjectReactor.class);;","53","  private Map<String, String> globalPropertiesMap = new HashMap<>();;","55","  private ProjectDefinition root = mock(ProjectDefinition.class);","56","  private SettingsLoader settingsLoader = mock(SettingsLoader.class);","57","","58","  @Captor","59","  private ArgumentCaptor<Supplier<Map<String, String>>> settingsCaptor;","63","    MockitoAnnotations.initMocks(this);","66","    when(reactor.getRoot()).thenReturn(root);","71","    BranchConfiguration configuration = provider.provide(null, globalConfiguration, reactor, settingsLoader, branches, pullRequests);","72","    assertThat(provider.provide(null, globalConfiguration, reactor, settingsLoader, branches, pullRequests)).isSameAs(configuration);","79","    BranchConfiguration result = provider.provide(loader, globalConfiguration, reactor, settingsLoader, branches, pullRequests);","85","  public void settings_should_include_command_line_args_with_highest_priority() {","86","    when(globalConfiguration.getProperties()).thenReturn(Collections.singletonMap(\"key\", \"global\"));","87","    when(settingsLoader.load(anyString())).thenReturn(Collections.singletonMap(\"key\", \"settings\"));","88","    when(root.properties()).thenReturn(Collections.singletonMap(\"key\", \"root\"));","89","    provider.provide(loader, globalConfiguration, reactor, settingsLoader, branches, pullRequests);","90","    verify(loader).load(anyMap(), settingsCaptor.capture(), any(ProjectBranches.class), any(ProjectPullRequests.class));","91","","92","    Map<String, String> map = settingsCaptor.getValue().get();","93","    assertThat(map.get(\"key\")).isEqualTo(\"root\");","94","  }","95","","96","  @Test","98","    BranchConfiguration result = provider.provide(null, globalConfiguration, reactor, settingsLoader, branches, pullRequests);"],"delete":["21","import java.util.HashMap;","22","import java.util.Map;","23","import java.util.function.Supplier;","24","import org.junit.Before;","25","import org.junit.Test;","26","import org.sonar.api.batch.bootstrap.ProjectKey;","27","import org.sonar.scanner.bootstrap.GlobalConfiguration;","28","import org.sonar.scanner.repository.settings.SettingsLoader;","29","","39","  private GlobalConfiguration globalConfiguration;","40","  private BranchConfigurationLoader loader;","41","  private BranchConfiguration config;","42","  private ProjectBranches branches;","43","  private ProjectPullRequests pullRequests;","44","  private ProjectKey projectKey;","45","  private Map<String, String> globalPropertiesMap;","47","  private SettingsLoader settingsLoader;","51","    globalConfiguration = mock(GlobalConfiguration.class);","52","    loader = mock(BranchConfigurationLoader.class);","53","    config = mock(BranchConfiguration.class);","54","    branches = mock(ProjectBranches.class);","55","    pullRequests = mock(ProjectPullRequests.class);","56","    settingsLoader = mock(SettingsLoader.class);","57","    projectKey = mock(ProjectKey.class);","58","    globalPropertiesMap = new HashMap<>();","65","    BranchConfiguration configuration = provider.provide(null, globalConfiguration, projectKey, settingsLoader, branches, pullRequests);","66","    assertThat(provider.provide(null, globalConfiguration, projectKey, settingsLoader, branches, pullRequests)).isSameAs(configuration);","73","    BranchConfiguration result = provider.provide(loader, globalConfiguration, projectKey, settingsLoader, branches, pullRequests);","80","    BranchConfiguration result = provider.provide(null, globalConfiguration, projectKey, settingsLoader, branches, pullRequests);"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/branch\/BranchConfigurationProvider.java":[{"add":["24","","27","import org.sonar.api.batch.bootstrap.ProjectDefinition;","28","import org.sonar.api.batch.bootstrap.ProjectReactor;","42","  public BranchConfiguration provide(@Nullable BranchConfigurationLoader loader, GlobalConfiguration globalConfiguration, ProjectReactor reactor,","49","        Supplier<Map<String, String>> settingsSupplier = createSettingsSupplier(globalConfiguration, reactor.getRoot(), settingsLoader);","57","  private static Supplier<Map<String, String>> createSettingsSupplier(GlobalConfiguration globalConfiguration, ProjectDefinition root, SettingsLoader settingsLoader) {","58","    \/\/ we can't get ProjectSettings because it creates a circular dependency.","59","    \/\/ We create our own settings which will only be loaded if needed.","63","      settings.putAll(settingsLoader.load(root.getKeyWithBranch()));","64","      settings.putAll(root.properties());"],"delete":["26","import org.sonar.api.batch.bootstrap.ProjectKey;","40","  public BranchConfiguration provide(@Nullable BranchConfigurationLoader loader, GlobalConfiguration globalConfiguration, ProjectKey projectKey,","47","        Supplier<Map<String, String>> settingsSupplier = createSettingsSupplier(globalConfiguration, projectKey, settingsLoader);","55","  private static Supplier<Map<String, String>> createSettingsSupplier(GlobalConfiguration globalConfiguration, ProjectKey projectKey, SettingsLoader settingsLoader) {","59","      settings.putAll(settingsLoader.load(projectKey.get()));"]}]}},"9b235dda465394be414f0e7e52094b930ccad175":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/ui\/ViewProxyTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ui\/ViewProxy.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/ui\/ViewProxyTest.java":[{"add":["360","  @Override","365","  @Override","377","  @Override","382","  @Override","390","  @Override","395","  @Override","403","  @Override","408","  @Override","416","  @Override","421","  @Override","432","  @Override","437","  @Override"],"delete":["350","","351","  @Test","352","  public void is_authorized_on_component_viewer_bypass() {","353","","354","    @NavigationSection(NavigationSection.RESOURCE)","355","    @UserRole(UserRole.VIEWER)","356","    class MyView extends FakeView {","357","      MyView() {","358","        super(\"fake\");","359","      }","360","    }","361","","362","    ViewProxy proxy = new ViewProxy<View>(new MyView());","363","","364","    MockUserSession.set();","365","    assertThat(proxy.isUserAuthorized(newProjectDto(\"abcd\"))).isTrue();","366","  }","367","","368","  @Test","369","  public void is_authorized_on_component_user_bypass() {","370","","371","    @NavigationSection(NavigationSection.RESOURCE)","372","    @UserRole(UserRole.USER)","373","    class MyView extends FakeView {","374","      MyView() {","375","        super(\"fake\");","376","      }","377","    }","378","","379","    ViewProxy proxy = new ViewProxy<View>(new MyView());","380","","381","    MockUserSession.set();","382","    assertThat(proxy.isUserAuthorized(newProjectDto(\"abcd\"))).isTrue();","383","  }"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ui\/ViewProxy.java":[{"add":["287","      authorized |= UserSession.get().hasProjectPermissionByUuid(userRole, component.uuid());"],"delete":["287","      authorized |= (UserRole.VIEWER.equals(userRole)","288","        || UserRole.USER.equals(userRole)","289","        || UserSession.get().hasProjectPermissionByUuid(userRole, component.uuid()));"]}]}},"c01e10ac1000017f3930193d42222e257155fc42":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/component\/ws\/SuggestionsActionTest.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/resources\/ResourceTypes.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/component\/ResourceTypesRule.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/component\/ws\/SuggestionsAction.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/component\/ws\/SuggestionsActionTest.java":[{"add":["34","import org.sonar.core.util.stream.MoreCollectors;","38","import org.sonar.db.component.ResourceTypesRule;","69","import static org.sonar.api.resources.Qualifiers.FILE;","70","import static org.sonar.api.resources.Qualifiers.MODULE;","71","import static org.sonar.api.resources.Qualifiers.PROJECT;","72","import static org.sonar.api.resources.Qualifiers.SUBVIEW;","73","import static org.sonar.api.resources.Qualifiers.VIEW;","86","  private static final String[] SUGGESTION_QUALIFIERS = Stream.of(SuggestionCategory.values())","87","    .map(SuggestionCategory::getQualifier)","88","    .collect(MoreCollectors.toList()).toArray(new String[0]);","96","  public ResourceTypesRule resourceTypes = new ResourceTypesRule();","101","  private SuggestionsAction underTest = new SuggestionsAction(db.getDbClient(), index, favoriteFinder, userSessionRule, resourceTypes);","109","    resourceTypes.setAllQualifiers(SUGGESTION_QUALIFIERS);","174","      .containsExactly(PROJECT);","198","      .containsExactly(PROJECT);","239","      .containsExactly(PROJECT);","355","  public void suggestions_should_filter_allowed_qualifiers() {","356","    resourceTypes.setAllQualifiers(PROJECT, MODULE, FILE);","357","    ComponentDto project = db.components().insertComponent(newPrivateProjectDto(organization));","358","    componentIndexer.indexProject(project.projectUuid(), ProjectIndexer.Cause.PROJECT_CREATION);","359","    userSessionRule.addProjectPermission(USER, project);","360","","361","    SuggestionsWsResponse response = ws.newRequest()","362","      .setMethod(\"POST\")","363","      .setParam(PARAM_RECENTLY_BROWSED, project.key())","364","      .executeProtobuf(SuggestionsWsResponse.class);","365","","366","    assertThat(response.getResultsList())","367","      .extracting(Category::getQ)","368","      .containsExactlyInAnyOrder(PROJECT, MODULE, FILE);","369","  }","370","","371","  @Test","387","      .containsExactly(PROJECT);","690","  @Test","691","  public void show_more_results_filter_out_if_non_allowed_qualifiers() {","692","    resourceTypes.setAllQualifiers(VIEW, SUBVIEW);","693","","694","    check_proposal_to_show_more_results(10, 0, 0L, SuggestionCategory.PROJECT, true);","695","  }","696",""],"delete":["90","  private SuggestionsAction underTest = new SuggestionsAction(db.getDbClient(), index, favoriteFinder, userSessionRule);","162","      .containsExactly(Qualifiers.PROJECT);","186","      .containsExactly(Qualifiers.PROJECT);","227","      .containsExactly(Qualifiers.PROJECT);","358","      .containsExactly(Qualifiers.PROJECT);"]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/resources\/ResourceTypes.java":[{"add":["49","  public static final Predicate<ResourceType> AVAILABLE_FOR_FILTERS = input -> input != null && input.getBooleanProperty(\"supportsMeasureFilters\");"],"delete":["49","  public static final Predicate<ResourceType> AVAILABLE_FOR_FILTERS = new Predicate<ResourceType>() {","50","    @Override","51","    public boolean apply(@Nullable ResourceType input) {","52","      return input != null && input.getBooleanProperty(\"supportsMeasureFilters\");","53","    }","54","  };"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/component\/ResourceTypesRule.java":[{"add":["88","    return allResourceTypes.stream()","89","      .filter(resourceType -> qualifier.equals(resourceType.getQualifier()))","90","      .findAny().orElse(null);"],"delete":["88","    throw new UnsupportedOperationException();"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/component\/ws\/SuggestionsAction.java":[{"add":["35","import org.sonar.api.resources.ResourceType;","36","import org.sonar.api.resources.ResourceTypes;","63","import static java.util.Collections.emptyList;","90","  private final ResourceTypes resourceTypes;","94","  public SuggestionsAction(DbClient dbClient, ComponentIndex index, FavoriteFinder favoriteFinder, UserSession userSession, ResourceTypes resourceTypes) {","99","    this.resourceTypes = resourceTypes;","254","  private List<String> getQualifiers(@Nullable String more) {","255","    Set<String> availableQualifiers = resourceTypes.getAll().stream().map(ResourceType::getQualifier).collect(MoreCollectors.toSet());","257","      return stream(SuggestionCategory.values())","258","        .map(SuggestionCategory::getQualifier)","259","        .filter(availableQualifiers::contains)","260","        .collect(Collectors.toList());","262","","263","    String qualifier = SuggestionCategory.getByName(more).getQualifier();","264","    return availableQualifiers.contains(qualifier) ?","265","      singletonList(qualifier)","266","      : emptyList();"],"delete":["90","  public SuggestionsAction(DbClient dbClient, ComponentIndex index, FavoriteFinder favoriteFinder, UserSession userSession) {","249","  private static List<String> getQualifiers(@Nullable String more) {","251","      return stream(SuggestionCategory.values()).map(SuggestionCategory::getQualifier).collect(Collectors.toList());","253","    return singletonList(SuggestionCategory.getByName(more).getQualifier());"]}]}},"cf3ee4bb926ec71b716c7d358c688a8575e631c6":{"changes":{"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v85\/DeleteProjectAlmSettingsOrphans.java":"MODIFY"},"diff":{"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v85\/DeleteProjectAlmSettingsOrphans.java":[{"add":["36","      + \"projects p on pas.project_uuid = p.uuid where p.uuid is null\");"],"delete":["36","      + \"projects p on pas.project_uuid = p.uuid where p.uuid is null;\");"]}]}},"013e08a1b4f395c6616775fc5e5ea27ad61b2c6e":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/widgets\/barchart.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/widgets\/barchart.js":[{"add":["28","const DATE_FORMAT = 'YYYY-MM-DDTHH:mm:ssZZ';","29","","55","      endDate: options.endDate ? moment(options.endDate) : null","102","            return moment(d.val).format(DATE_FORMAT);","105","            const ending = i < data.length - 1 ? moment(data[i + 1].val) : options.endDate;","106","            if (ending) {","107","              return ending.format(DATE_FORMAT);","108","            } else {","109","              return '';","115","            if (ending) {","116","              const isSameDay = ending.diff(beginning, 'days') <= 1;","117","              return d.text + '<br>' + beginning.format('LL') + (isSameDay ? '' : (' \u2013 ' + ending.format('LL')));","118","            } else {","119","              return d.text + '<br>' + beginning.format('LL');","120","            }"],"delete":["33","    endDate: moment().add(1, 'days').format('YYYY-MM-DD'),","54","      endDate: moment(options.endDate)","101","            return moment(d.val).format('YYYY-MM-DD');","104","            const beginning = moment(d.val);","105","            const ending = i < data.length - 1 ? moment(data[i + 1].val).subtract(1, 'days') : options.endDate;","106","            const isSameDay = ending.diff(beginning, 'days') <= 1;","107","            if (isSameDay) {","108","              ending.add(1, 'days');","110","            return ending.format('YYYY-MM-DD');","115","            const isSameDay = ending.diff(beginning, 'days') <= 1;","116","            return d.text + '<br>' + beginning.format('LL') + (isSameDay ? '' : (' \u2013 ' + ending.format('LL')));"]}]}},"35428013060d9fb81e7119426e9bfe9858521d4a":{"changes":{"sonar-core\/src\/test\/java\/org\/sonar\/core\/config\/CorePropertyDefinitionsTest.java":"MODIFY","sonar-core\/src\/main\/java\/org\/sonar\/core\/config\/CorePropertyDefinitions.java":"MODIFY","server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/container\/ComputeEngineContainerImplTest.java":"MODIFY"},"diff":{"sonar-core\/src\/test\/java\/org\/sonar\/core\/config\/CorePropertyDefinitionsTest.java":[{"add":["32","    assertThat(defs).hasSize(54);"],"delete":["32","    assertThat(defs).hasSize(58);"]}],"sonar-core\/src\/main\/java\/org\/sonar\/core\/config\/CorePropertyDefinitions.java":[{"add":[],"delete":["71","      PropertyDefinition.builder(CoreProperties.LINKS_HOME_PAGE)","72","        .name(\"Project Home Page\")","73","        .description(\"HTTP URL of the home page of the project.\")","74","        .hidden()","75","        .build(),","76","      PropertyDefinition.builder(CoreProperties.LINKS_CI)","77","        .name(\"CI server\")","78","        .description(\"HTTP URL of the continuous integration server.\")","79","        .category(CoreProperties.CATEGORY_GENERAL)","80","        .build(),","81","      PropertyDefinition.builder(CoreProperties.LINKS_ISSUE_TRACKER)","82","        .name(\"Issue Tracker\")","83","        .description(\"HTTP URL of the issue tracker.\")","84","        .category(CoreProperties.CATEGORY_GENERAL)","85","        .hidden()","86","        .build(),","87","      PropertyDefinition.builder(CoreProperties.LINKS_SOURCES)","88","        .name(\"SCM server\")","89","        .description(\"HTTP URL of the server which hosts the sources of the project.\")","90","        .category(CoreProperties.CATEGORY_GENERAL)","91","        .build(),"]}],"server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/container\/ComputeEngineContainerImplTest.java":[{"add":["125","          + 54 \/\/ content of CorePropertyDefinitions"],"delete":["125","          + 58 \/\/ content of CorePropertyDefinitions"]}]}},"034b1839f03921b731f61ab0f9fa07dab7e0c722":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/badge\/ws\/SvgFormatter.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/badge\/ws\/SvgFormatter.java":[{"add":["51","    NumberFormat numericFormatter = DecimalFormat.getInstance(Locale.ENGLISH);","52","    numericFormatter.setMaximumFractionDigits(1);","55","    String formattedNumber = numericFormatter.format(valueToFormat);","61","    DecimalFormat percentFormatter = new DecimalFormat(\"#.#\", DecimalFormatSymbols.getInstance(Locale.ENGLISH));","62","    return percentFormatter.format(value) + \"%\";"],"delete":["33","  private static final NumberFormat NUMERIC_FORMATTER = DecimalFormat.getInstance(Locale.ENGLISH);","37","  private static final DecimalFormat PERCENT_FORMATTER = new DecimalFormat(\"#.#\", DecimalFormatSymbols.getInstance(Locale.ENGLISH));","38","","54","    NUMERIC_FORMATTER.setMaximumFractionDigits(1);","57","    String formattedNumber = NUMERIC_FORMATTER.format(valueToFormat);","63","    return PERCENT_FORMATTER.format(value) + \"%\";"]}]}},"8d727d037967e6d2a3c6a998e48f3ebcee6059b0":{"changes":{"server\/sonar-process-monitor\/src\/test\/java\/org\/sonar\/process\/monitor\/JavaProcessLauncherTest.java":"MODIFY","server\/sonar-process-monitor\/src\/main\/java\/org\/sonar\/process\/monitor\/JavaProcessLauncher.java":"MODIFY"},"diff":{"server\/sonar-process-monitor\/src\/test\/java\/org\/sonar\/process\/monitor\/JavaProcessLauncherTest.java":[{"add":["24","import org.junit.rules.ExpectedException;","32","  @Rule","33","  public ExpectedException expectedException = ExpectedException.none();","40","","41","    expectedException.expect(IllegalStateException.class);","42","    expectedException.expectMessage(\"Fail to launch [es]\");","43","","44","    \/\/ command is not correct (missing options), java.lang.ProcessBuilder#start()","45","    \/\/ throws an exception","46","    launcher.launch(command);"],"delete":["27","import static org.assertj.core.api.Assertions.assertThat;","28","import static org.junit.Assert.fail;","29","","40","    try {","41","      \/\/ command is not correct (missing options), java.lang.ProcessBuilder#start()","42","      \/\/ throws an exception","43","      launcher.launch(command);","44","      fail();","45","    } catch (IllegalStateException e) {","46","      assertThat(e).hasMessage(\"Fail to launch [es]\");","47","    }"]}],"server\/sonar-process-monitor\/src\/main\/java\/org\/sonar\/process\/monitor\/JavaProcessLauncher.java":[{"add":["107","    return new File(new File(System.getProperty(\"java.home\")), \"bin\" + separator + \"java\").getAbsolutePath();","117","      propertiesFile = File.createTempFile(\"sq-process\", \"properties\", tempDir);"],"delete":["107","    return new File(new File(System.getProperty(\"java.home\")),","108","      \"bin\" + separator + \"java\").getAbsolutePath();","118","      propertiesFile = File.createTempFile(\"sq-process\", \"properties\");"]}]}},"49f29073c935c97e52d4f7d2a8e02e79391e3ff2":{"changes":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/filesystem\/FileIndexer.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/util\/ProgressReport.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/filesystem\/FileIndexer.java":[{"add":["102","    this.executorService = Executors.newFixedThreadPool(threads, new ThreadFactoryBuilder()","103","      .setNameFormat(\"FileIndexer-%d\")","104","      .setDaemon(true)","105","      .build());","116","    waitForTasksToComplete(progressReport);","125","  private void waitForTasksToComplete(ProgressReport report) {","132","        stopAsap(report);","135","        stopAsap(report);","141","  private void stopAsap(ProgressReport report) {","142","    report.stop(null);","143","    executorService.shutdownNow();","144","    try {","145","      executorService.awaitTermination(5, TimeUnit.SECONDS);","146","    } catch (InterruptedException e1) {","147","      \/\/ ignore, what's important is the original exception","148","    }","149","  }","150",""],"delete":["102","    this.executorService = Executors.newFixedThreadPool(threads, new ThreadFactoryBuilder().setNameFormat(\"FileIndexer-%d\").build());","113","    waitForTasksToComplete();","122","  private void waitForTasksToComplete() {"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/util\/ProgressReport.java":[{"add":["21","import javax.annotation.Nullable;","31","  private String stopMessage = null;","50","    if (stopMessage != null) {","51","      log(stopMessage);","52","    }","64","  public void stop(@Nullable String stopMessage) {"],"delete":["30","  private String stopMessage = \"\";","49","    log(stopMessage);","61","  public void stop(String stopMessage) {"]}]}},"1361ba5fb9d1bf5f98cba5feff9227f177a44e94":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/ws\/SearchAction.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/index\/IssueIndex.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/index\/IssueIndexFacetsTest.java":"MODIFY","\/dev\/null":"DELETE","sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/issues\/IssuesService.java":"MODIFY","plugins\/sonar-xoo-plugin\/src\/main\/java\/org\/sonar\/xoo\/scm\/XooBlameCommand.java":"MODIFY","plugins\/sonar-xoo-plugin\/build.gradle":"MODIFY","sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/issues\/SearchRequest.java":"MODIFY","plugins\/sonar-xoo-plugin\/src\/test\/java\/org\/sonar\/xoo\/scm\/XooBlameCommandTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionComponentsTest.java":"MODIFY","sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/issue\/IssuesWsParameters.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/ws\/SearchAction.java":[{"add":["69","import static org.sonar.api.server.ws.WebService.Param.FACETS;","88","import static org.sonarqube.ws.client.issue.IssuesWsParameters.DEPRECATED_PARAM_AUTHORS;","96","import static org.sonarqube.ws.client.issue.IssuesWsParameters.PARAM_AUTHOR;","146","    DEPRECATED_PARAM_AUTHORS,","147","    PARAM_AUTHOR,","195","        new Change(\"7.7\", format(\"Value '%s' in parameter '%s' is deprecated, please use '%s' instead\", DEPRECATED_PARAM_AUTHORS, FACETS, PARAM_AUTHOR)),","196","        new Change(\"7.6\", format(\"The use of module keys in parameter '%s' is deprecated\", PARAM_COMPONENT_KEYS)),","212","    action.createParam(FACETS)","266","    action.createParam(DEPRECATED_PARAM_AUTHORS)","267","      .setDeprecatedSince(\"7.7\")","268","      .setDescription(\"This parameter is deprecated, please use '%s' instead\", PARAM_AUTHOR)","270","    action.createParam(PARAM_AUTHOR)","271","      .setDescription(\"SCM accounts. To set several values, the parameter must be called once for each value.\")","272","      .setExampleValue(\"author=torvalds@linux-foundation.org&author=linux@fondation.org\");","458","        requestedFacets.remove(PARAM_AUTHOR);","459","        requestedFacets.remove(DEPRECATED_PARAM_AUTHORS);","532","      .setAuthors(request.hasParam(PARAM_AUTHOR) ? request.multiParam(PARAM_AUTHOR) : request.paramAsStrings(DEPRECATED_PARAM_AUTHORS))","544","      .setFacets(request.paramAsStrings(FACETS))"],"delete":["94","import static org.sonarqube.ws.client.issue.IssuesWsParameters.PARAM_AUTHORS;","144","    PARAM_AUTHORS,","192","        new Change(\"7.6\", String.format(\"The use of module keys in parameter '%s' is deprecated\", PARAM_COMPONENT_KEYS)),","208","    action.createParam(Param.FACETS)","262","    action.createParam(PARAM_AUTHORS)","263","      .setDescription(\"Comma-separated list of SCM accounts\")","450","        requestedFacets.remove(PARAM_AUTHORS);","523","      .setAuthors(request.paramAsStrings(PARAM_AUTHORS))","535","      .setFacets(request.paramAsStrings(Param.FACETS))"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionTest.java":[{"add":["78","import static java.util.Collections.singletonList;","166","          simon.getLogin(), \"John\", 42, \"a227e508d6646b55a086ee11d63b21e9\", asList(\"bug\", \"owasp\"), formatDateTime(issue.getIssueCreationDate()),","167","          formatDateTime(issue.getIssueUpdateDate())));","582","  public void search_by_author() {","583","    ComponentDto project = db.components().insertPublicProject();","584","    ComponentDto file = db.components().insertComponent(newFileDto(project, null));","585","    RuleDefinitionDto rule = db.rules().insert();","586","    IssueDto issue1 = db.issues().insert(rule, project, file, i -> i.setAuthorLogin(\"leia\"));","587","    IssueDto issue2 = db.issues().insert(rule, project, file, i -> i.setAuthorLogin(\"luke\"));","588","    IssueDto issue3 = db.issues().insert(rule, project, file, i -> i.setAuthorLogin(\"han, solo\"));","589","    indexPermissions();","590","    indexIssues();","591","","592","    SearchWsResponse response = ws.newRequest()","593","      .setMultiParam(\"author\", asList(\"leia\", \"han, solo\"))","594","      .setParam(FACETS, \"author\")","595","      .executeProtobuf(SearchWsResponse.class);","596","    assertThat(response.getIssuesList())","597","      .extracting(Issue::getKey)","598","      .containsExactlyInAnyOrder(issue1.getKey(), issue3.getKey());","599","    Common.Facet facet = response.getFacets().getFacetsList().get(0);","600","    assertThat(facet.getProperty()).isEqualTo(\"author\");","601","    assertThat(facet.getValuesList())","602","      .extracting(Common.FacetValue::getVal, Common.FacetValue::getCount)","603","      .containsExactlyInAnyOrder(","604","        tuple(\"leia\", 1L),","605","        tuple(\"luke\", 1L),","606","        tuple(\"han, solo\", 1L));","607","","608","    assertThat(ws.newRequest()","609","      .setMultiParam(\"author\", singletonList(\"unknown\"))","610","      .executeProtobuf(SearchWsResponse.class).getIssuesList())","611","        .isEmpty();","612","  }","613","","614","  @Test","615","  public void search_by_deprecated_authors_parameter() {","616","    ComponentDto project = db.components().insertPublicProject();","617","    ComponentDto file = db.components().insertComponent(newFileDto(project, null));","618","    RuleDefinitionDto rule = db.rules().insert();","619","    IssueDto issue1 = db.issues().insert(rule, project, file, i -> i.setAuthorLogin(\"leia\"));","620","    IssueDto issue2 = db.issues().insert(rule, project, file, i -> i.setAuthorLogin(\"luke\"));","621","    indexPermissions();","622","    indexIssues();","623","","624","    SearchWsResponse response = ws.newRequest()","625","      .setParam(\"authors\", \"leia\")","626","      .setParam(FACETS, \"authors\")","627","      .executeProtobuf(SearchWsResponse.class);","628","    assertThat(response.getIssuesList()).extracting(Issue::getKey).containsExactlyInAnyOrder(issue1.getKey());","629","    Common.Facet facet = response.getFacets().getFacetsList().get(0);","630","    assertThat(facet.getProperty()).isEqualTo(\"authors\");","631","    assertThat(facet.getValuesList())","632","      .extracting(Common.FacetValue::getVal, Common.FacetValue::getCount)","633","      .containsExactlyInAnyOrder(","634","        tuple(\"leia\", 1L),","635","        tuple(\"luke\", 1L));","636","","637","    \/\/ Deprecated parameter 'authors' will be ignored if new parameter 'author' is set","638","    assertThat(ws.newRequest()","639","      .setMultiParam(\"author\", singletonList(\"luke\"))","640","      \/\/ This parameter will be ignored","641","      .setParam(\"authors\", \"leia\")","642","      .executeProtobuf(SearchWsResponse.class).getIssuesList())","643","        .extracting(Issue::getKey)","644","        .containsExactlyInAnyOrder(issue2.getKey());","645","  }","646","","647","  @Test","852","      \"additionalFields\", \"asc\", \"assigned\", \"assignees\", \"authors\", \"author\", \"componentKeys\", \"componentRootUuids\", \"componentRoots\", \"componentUuids\", \"components\", \"branch\","],"delete":["165","          simon.getLogin(), \"John\", 42, \"a227e508d6646b55a086ee11d63b21e9\", asList(\"bug\", \"owasp\"), formatDateTime(issue.getIssueCreationDate()), formatDateTime(issue.getIssueUpdateDate())));","784","      \"additionalFields\", \"asc\", \"assigned\", \"assignees\", \"authors\", \"componentKeys\", \"componentRootUuids\", \"componentRoots\", \"componentUuids\", \"components\", \"branch\","]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/index\/IssueIndex.java":[{"add":["100","import static org.sonar.server.issue.index.IssueIndex.Facet.AUTHOR;","150","import static org.sonarqube.ws.client.issue.IssuesWsParameters.DEPRECATED_PARAM_AUTHORS;","153","import static org.sonarqube.ws.client.issue.IssuesWsParameters.PARAM_AUTHOR;","190","    AUTHORS(DEPRECATED_PARAM_AUTHORS, FIELD_ISSUE_AUTHOR_LOGIN, MAX_FACET_SIZE),","191","    AUTHOR(PARAM_AUTHOR, FIELD_ISSUE_AUTHOR_LOGIN, MAX_FACET_SIZE),","575","      addSimpleStickyFacetIfNeeded(options, stickyFacetBuilder, esSearch, AUTHOR, query.authors().toArray());","653","    return OptionalLong.of((long) actualValue);"],"delete":["151","import static org.sonarqube.ws.client.issue.IssuesWsParameters.PARAM_AUTHORS;","188","    AUTHORS(PARAM_AUTHORS, FIELD_ISSUE_AUTHOR_LOGIN, MAX_FACET_SIZE),","649","    return OptionalLong.of((long)actualValue);"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/index\/IssueIndexFacetsTest.java":[{"add":["325","  public void facets_on_author() {","326","    ComponentDto project = newPrivateProjectDto(newOrganizationDto());","327","    ComponentDto file = newFileDto(project, null);","328","","329","    indexIssues(","330","      newDoc(\"I1\", file).setAuthorLogin(\"steph\"),","331","      newDoc(\"I2\", file).setAuthorLogin(\"marcel\"),","332","      newDoc(\"I3\", file).setAuthorLogin(\"marcel\"),","333","      newDoc(\"I4\", file).setAuthorLogin(null));","334","","335","    assertThatFacetHasOnly(IssueQuery.builder(), \"author\", entry(\"steph\", 1L), entry(\"marcel\", 2L));","336","  }","337","","338","  @Test","339","  public void facets_on_deprecated_authors() {"],"delete":["325","  public void facets_on_authors() {"]}],"\/dev\/null":[{"add":[],"delete":[]}],"sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/issues\/IssuesService.java":[{"add":["149","        .setMediaType(MediaTypes.JSON)","150","      ).content();","194","        .setMediaType(MediaTypes.JSON)","195","      ).content();","212","        .setParam(\"author\", request.getAuthor())","224","        .setParam(\"cwe\", request.getCwe() == null ? null : request.getCwe().stream().collect(Collectors.joining(\",\")))","234","        .setParam(\"owaspTop10\", request.getOwaspTop10() == null ? null : request.getOwaspTop10().stream().collect(Collectors.joining(\",\")))","243","        .setParam(\"sansTop25\", request.getSansTop25() == null ? null : request.getSansTop25().stream().collect(Collectors.joining(\",\")))","248","        .setParam(\"types\", request.getTypes() == null ? null : request.getTypes().stream().collect(Collectors.joining(\",\"))),"],"delete":["149","        .setMediaType(MediaTypes.JSON)).content();","193","        .setMediaType(MediaTypes.JSON)).content();","242","        .setParam(\"types\", request.getTypes() == null ? null : request.getTypes().stream().collect(Collectors.joining(\",\")))","243","        .setParam(\"owaspTop10\", request.getOwaspTop10() == null ? null : request.getOwaspTop10().stream().collect(Collectors.joining(\",\")))","244","        .setParam(\"sansTop25\", request.getSansTop25() == null ? null : request.getSansTop25().stream().collect(Collectors.joining(\",\")))","245","        .setParam(\"cwe\", request.getCwe() == null ? null : request.getCwe().stream().collect(Collectors.joining(\",\"))),"]}],"plugins\/sonar-xoo-plugin\/src\/main\/java\/org\/sonar\/xoo\/scm\/XooBlameCommand.java":[{"add":["23","import java.io.FileReader;","27","import org.apache.commons.csv.CSVFormat;","28","import org.apache.commons.csv.CSVParser;","29","import org.apache.commons.csv.CSVRecord;","35","import static com.google.common.base.Preconditions.checkState;","36","import static java.util.stream.Collectors.toList;","37","import static org.apache.commons.lang.StringUtils.trimToNull;","38","","53","    File scmDataFile = new File(ioFile.getParentFile(), ioFile.getName() + SCM_EXTENSION);","59","      List<BlameLine> blame = readFile(scmDataFile);","65","","66","  private static List<BlameLine> readFile(File inputStream) throws IOException {","67","    try (CSVParser csvParser = CSVFormat.RFC4180","68","      .withIgnoreEmptyLines()","69","      .withIgnoreSurroundingSpaces()","70","      .parse(new FileReader(inputStream))) {","71","      List<CSVRecord> records = csvParser.getRecords();","72","      return records.stream()","73","        .map(XooBlameCommand::convertToBlameLine)","74","        .collect(toList());","75","    }","76","  }","77","","78","  private static BlameLine convertToBlameLine(CSVRecord csvRecord) {","79","    checkState(csvRecord.size() == 3, \"Not enough fields on line %s\", csvRecord);","80","    String revision = trimToNull(csvRecord.get(0));","81","    String author = trimToNull(csvRecord.get(1));","82","    BlameLine blameLine = new BlameLine().revision(revision).author(author);","83","    String dateStr = trimToNull(csvRecord.get(2));","84","    if (dateStr != null) {","85","      Date dateTime = DateUtils.parseDateTimeQuietly(dateStr);","86","      if (dateTime != null) {","87","        blameLine.date(dateTime);","88","      } else {","89","        \/\/ Will throw an exception, when date is not in format \"yyyy-MM-dd\"","90","        blameLine.date(DateUtils.parseDate(dateStr));","91","      }","92","    }","93","    return blameLine;","94","  }"],"delete":["24","import java.nio.charset.StandardCharsets;","25","import java.util.ArrayList;","28","import org.apache.commons.io.FileUtils;","29","import org.apache.commons.lang.StringUtils;","49","    File scmDataFile = new java.io.File(ioFile.getParentFile(), ioFile.getName() + SCM_EXTENSION);","55","      List<String> lines = FileUtils.readLines(scmDataFile, StandardCharsets.UTF_8);","56","      List<BlameLine> blame = new ArrayList<>(lines.size());","57","      int lineNumber = 0;","58","      for (String line : lines) {","59","        lineNumber++;","60","        if (StringUtils.isNotBlank(line)) {","61","          \/\/ revision,author,dateTime","62","          String[] fields = StringUtils.splitPreserveAllTokens(line, ',');","63","          if (fields.length < 3) {","64","            throw new IllegalStateException(\"Not enough fields on line \" + lineNumber);","65","          }","66","          String revision = StringUtils.trimToNull(fields[0]);","67","          String author = StringUtils.trimToNull(fields[1]);","68","          BlameLine blameLine = new BlameLine().revision(revision).author(author);","69","          String dateStr = StringUtils.trimToNull(fields[2]);","70","          if (dateStr != null) {","71","            Date dateTime = DateUtils.parseDateTimeQuietly(dateStr);","72","            if (dateTime != null) {","73","              blameLine.date(dateTime);","74","            } else {","75","              \/\/ Will throw an exception, when date is not in format \"yyyy-MM-dd\"","76","              blameLine.date(DateUtils.parseDate(dateStr));","77","            }","78","          }","79","          blame.add(blameLine);","80","        }","81","      }"]}],"plugins\/sonar-xoo-plugin\/build.gradle":[{"add":["8","  compile 'org.apache.commons:commons-csv'"],"delete":[]}],"sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/issues\/SearchRequest.java":[{"add":["37","  private List<String> author;","146","   * Example value: \"author=torvalds@linux-foundation.org&author=linux@fondation.org\"","148","  public SearchRequest setAuthor(List<String> author) {","149","    this.author = author;","150","    return this;","151","  }","152","","153","  public List<String> getAuthor() {","154","    return author;","155","  }","156","","157","  \/**","158","   * Example value: \"torvalds@linux-foundation.org\"","159","   * @deprecated since 7.7","160","   *\/","161","  @Deprecated","341","   *   <li>\"projects\"<\/li>","342","   *   <li>\"moduleUuids\"<\/li>","343","   *   <li>\"fileUuids\"<\/li>","344","   *   <li>\"assigned_to_me\"<\/li>","353","   *   <li>\"author\"<\/li>","413","   * @deprecated since 7.6","415","  @Deprecated"],"delete":["145","   * Example value: \"torvalds@linux-foundation.org\"","312","   *   <li>\"debt\"<\/li>","331","   *   <li>\"projectUuids\"<\/li>","334","   *   <li>\"assigned_to_me\"<\/li>","337","   *   <li>\"moduleUuids\"<\/li>","338","   *   <li>\"fileUuids\"<\/li>"]}],"plugins\/sonar-xoo-plugin\/src\/test\/java\/org\/sonar\/xoo\/scm\/XooBlameCommandTest.java":[{"add":["21","import java.io.File;","22","import java.io.IOException;","23","import java.util.Arrays;","39","import static java.util.Collections.singletonList;","77","","79","","84","","85","  @Test","86","  public void blame_containing_author_with_comma() throws IOException {","87","    File source = new File(baseDir, \"src\/foo.xoo\");","88","    FileUtils.write(source, \"sample content\");","89","    File scm = new File(baseDir, \"src\/foo.xoo.scm\");","90","    FileUtils.write(scm, \"\\\"123\\\",\\\"john,doe\\\",\\\"2019-01-22\\\"\");","91","    DefaultInputFile inputFile = new TestInputFileBuilder(\"foo\", \"src\/foo.xoo\")","92","      .setLanguage(Xoo.KEY)","93","      .setModuleBaseDir(baseDir.toPath())","94","      .build();","95","    fs.add(inputFile);","96","    BlameOutput result = mock(BlameOutput.class);","97","    when(input.filesToBlame()).thenReturn(Arrays.asList(inputFile));","98","","99","    new XooBlameCommand().blame(input, result);","100","","101","    verify(result).blameResult(inputFile, singletonList(","102","      new BlameLine().revision(\"123\").author(\"john,doe\").date(DateUtils.parseDate(\"2019-01-22\"))));","103","  }"],"delete":["27","import org.sonar.api.batch.fs.InputFile;","37","import java.io.File;","38","import java.io.IOException;","39","import java.util.Arrays;","40","","76",""]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionComponentsTest.java":[{"add":[],"delete":["31","import org.sonar.api.server.ws.WebService;","40","import org.sonar.db.user.UserDto;","79","import static org.sonarqube.ws.client.issue.IssuesWsParameters.PARAM_AUTHORS;","437","  public void search_by_author() {","438","    ComponentDto project = db.components().insertPublicProject(p -> p.setDbKey(\"PK1\"));","439","    ComponentDto file = db.components().insertComponent(newFileDto(project, null, \"F1\").setDbKey(\"FK1\"));","440","    RuleDefinitionDto rule = db.rules().insert(r -> r.setRuleKey(RuleKey.of(\"xoo\", \"x1\")));","441","    db.issues().insert(rule, project, file, i -> i.setAuthorLogin(\"leia\").setKee(\"2bd4eac2-b650-4037-80bc-7b112bd4eac2\"));","442","    db.issues().insert(rule, project, file, i -> i.setAuthorLogin(\"luke@skywalker.name\").setKee(\"82fd47d4-b650-4037-80bc-7b1182fd47d4\"));","443","    allowAnyoneOnProjects(project);","444","    indexIssues();","445","","446","    UserDto user = db.users().insertUser();","447","    db.organizations().addMember(db.getDefaultOrganization(), user);","448","    userSession.logIn(user).addMembership(db.getDefaultOrganization());","449","","450","    ws.newRequest()","451","      .setParam(PARAM_AUTHORS, \"leia\")","452","      .setParam(WebService.Param.FACETS, \"authors\")","453","      .execute()","454","      .assertJson(this.getClass(), \"search_by_authors.json\");","455","","456","    ws.newRequest()","457","      .setParam(PARAM_AUTHORS, \"unknown\")","458","      .execute()","459","      .assertJson(this.getClass(), \"no_issue.json\");","460","  }","461","","462","  @Test"]}],"sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/issue\/IssuesWsParameters.java":[{"add":["90","","91","  \/**","92","   * @deprecated since 7.7, please use 'author' instead","93","   *\/","94","  @Deprecated","95","  public static final String DEPRECATED_PARAM_AUTHORS = \"authors\";","96","","97","  public static final String PARAM_AUTHOR = \"author\";"],"delete":["90","  public static final String PARAM_AUTHORS = \"authors\";"]}]}},"96672b1c1ab448e71507d1ba983b8a125af2cee7":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/organization\/ws\/SearchMyOrganizationsAction.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/organization\/ws\/SearchMyOrganizationsAction.java":[{"add":["59","    try (DbSession dbSession = dbClient.openSession(false)) {","60","      JsonWriter json = response.newJsonWriter();","61","      json.beginObject();","62","      json.name(\"organizations\").beginArray();","64","        .forEach(dto -> json.value(dto.getKey()));","65","      json.endArray();","66","      json.endObject();","67","      json.close();"],"delete":["59","    try (DbSession dbSession = dbClient.openSession(false);","60","      JsonWriter jsonWriter = response.newJsonWriter()) {","61","      jsonWriter.beginObject();","62","      jsonWriter.name(\"organizations\").beginArray();","64","        .forEach(dto -> jsonWriter.value(dto.getKey()));","65","      jsonWriter.endArray();","66","      jsonWriter.endObject();"]}]}},"581cc1f7285e0dc0b46b5238ef17e1b572389753":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/account\/routes.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/account\/routes.js":[{"add":["33","","34","      <Route path=\"issues\" onEnter={() => {","35","        window.location = window.baseUrl + '\/issues' + window.location.hash + '|assigned_to_me=true';","36","      }}\/>"],"delete":[]}]}},"60c64b2c9f95bb52d070758fa88a3881ae69b5e7":{"changes":{"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/ce\/posttask\/PostProjectAnalysisTaskTest.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/ce\/posttask\/PostProjectAnalysisTask.java":"MODIFY"},"diff":{"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/ce\/posttask\/PostProjectAnalysisTaskTest.java":[{"add":["36","  public void default_implementation_of_finished_ProjectAnalysis_returns_class_name() {","37","    PostProjectAnalysisTask underTest = new PostTask();","39","    assertThat(underTest.getDescription()).isEqualTo(\"PostTask\");","40","  }","41","","42","  private static class PostTask implements PostProjectAnalysisTask {","43",""],"delete":["27","import static org.assertj.core.api.Assertions.fail;","37","  public void default_implementation_of_finished_ProjectAnalysis_throws_ISE() {","38","    PostProjectAnalysisTask underTest = () -> {","39","      throw new UnsupportedOperationException(\"getDescription not implemented\");","40","    };","42","    try {","43","      underTest.finished(projectAnalysis);","44","      fail(\"should have thrown an ISE\");","45","    } catch (IllegalStateException e) {","46","      assertThat(e.getMessage()).isEqualTo(\"Provide an implementation of method finished(Context)\");","47","      Mockito.verifyZeroInteractions(projectAnalysis);","48","    }"]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/ce\/posttask\/PostProjectAnalysisTask.java":[{"add":["48","   * @since 8.0","50","  default String getDescription() {","51","    return this.getClass().getSimpleName();","52","  }","57","   * @deprecated in 8.0. Implement {@link #finished(Context)} instead","64","  \/**","65","   * @since 8.0","66","   *\/"],"delete":["49","  String getDescription();","54","   * @deprecated implement {@link #finished(Context)} instead"]}]}},"784829702ff22927a87b51091b82724609e6efbe":{"changes":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/issue\/IssueChangeMapperTest.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/issue\/IssueChangeDtoTest.java":"MODIFY","\/dev\/null":"DELETE","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/step\/PersistIssuesStepTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/ChangelogActionTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/issue\/ShortBranchIssueMergerTest.java":"MODIFY","server\/sonar-db-dao\/src\/test\/resources\/org\/sonar\/db\/issue\/IssueChangeMapperTest\/insert_comment-result.xml":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/issue\/IssueChangeDto.java":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/issue\/IssueChangeMapperTest.java":[{"add":["59","    dto.setIssueChangeCreationDate(1_500_000_000_000L);"],"delete":[]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/issue\/IssueChangeDtoTest.java":[{"add":["61","    diffs.setCreationDate(parseDate(\"2015-01-13\"));","71","    assertThat(dto.getIssueChangeCreationDate()).isEqualTo(parseDate(\"2015-01-13\").getTime());","136","  public void getIssueChangeCreationDate_fallback_to_createAt_when_null() {","137","    IssueChangeDto changeDto = new IssueChangeDto()","138","      .setKey(\"EFGH\")","139","      .setUserLogin(\"emmerik\")","140","      .setChangeData(\"Some text\")","141","      .setIssueKey(\"ABCDE\")","142","      .setCreatedAt(10_000_000L)","143","      .setUpdatedAt(20_000_000L);","144","","145","    assertThat(changeDto.getIssueChangeCreationDate()).isEqualTo(10_000_000L);","146","  }","147","","148","  @Test"],"delete":["68","    assertThat(dto.getIssueChangeCreationDate()).isNull();"]}],"\/dev\/null":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/step\/PersistIssuesStepTest.java":[{"add":["22","import java.util.Date;","52","import org.sonar.server.util.cache.DiskCache;","54","import static java.util.Collections.singletonList;","58","import static org.sonar.api.issue.Issue.RESOLUTION_FIXED;","59","import static org.sonar.api.issue.Issue.STATUS_CLOSED;","60","import static org.sonar.api.issue.Issue.STATUS_OPEN;","61","import static org.sonar.api.rule.Severity.BLOCKER;","62","import static org.sonar.db.component.ComponentTesting.newFileDto;","71","  public DbTester db = DbTester.create(System2.INSTANCE);","78","  private DbSession session = db.getSession();","79","  private DbClient dbClient = db.getDbClient();","107","    db.rules().insert(rule);","108","    OrganizationDto organizationDto = db.organizations().insert();","111","    ComponentDto file = newFileDto(project, null);","121","      .setSeverity(BLOCKER)","122","      .setStatus(STATUS_OPEN)","131","        .setCreatedAt(new Date(NOW))","133","      .setCurrentChange(","134","        new FieldDiffs()","135","          .setIssueKey(\"ISSUE\")","136","          .setUserLogin(\"john\")","137","          .setDiff(\"technicalDebt\", null, 1L)","138","          .setCreationDate(new Date(NOW))))","148","    assertThat(result.getSeverity()).isEqualTo(BLOCKER);","149","    assertThat(result.getStatus()).isEqualTo(STATUS_OPEN);","159","    db.rules().insert(rule);","160","    OrganizationDto organizationDto = db.organizations().insert();","163","    ComponentDto file = newFileDto(project, null);","173","      .setSeverity(BLOCKER)","174","      .setStatus(STATUS_OPEN)","183","        .setCreatedAt(new Date(NOW))","188","        .setDiff(\"technicalDebt\", null, 1L)","189","        .setCreationDate(new Date(NOW))))","198","    assertThat(result.getSeverity()).isEqualTo(BLOCKER);","199","    assertThat(result.getStatus()).isEqualTo(STATUS_OPEN);","209","    db.rules().insert(rule);","210","    OrganizationDto organizationDto = db.organizations().insert();","213","    ComponentDto file = newFileDto(project, null);","223","      .setSeverity(BLOCKER)","224","      .setStatus(STATUS_OPEN)","235","    assertThat(result.getSeverity()).isEqualTo(BLOCKER);","236","    assertThat(result.getStatus()).isEqualTo(STATUS_OPEN);","242","    ComponentDto project = db.components().insertPrivateProject();","243","    ComponentDto file = db.components().insertComponent(newFileDto(project));","244","    RuleDefinitionDto rule = db.rules().insert();","245","    IssueDto issue = db.issues().insert(rule, project, file,","246","      i -> i.setStatus(STATUS_OPEN)","247","        .setResolution(null)","248","        .setCreatedAt(NOW - 1_000_000_000L)","249","        .setUpdatedAt(NOW - 1_000_000_000L));","250","    DiskCache<DefaultIssue>.DiskAppender issueCacheAppender = issueCache.newAppender();","252","    issueCacheAppender.append(","253","      issue.toDefaultIssue()","254","        .setStatus(STATUS_CLOSED)","255","        .setResolution(RESOLUTION_FIXED)","256","        .setSelectedAt(NOW)","257","        .setNew(false)","258","        .setChanged(true))","259","      .close();","262","    IssueDto issueReloaded = db.getDbClient().issueDao().selectByKey(db.getSession(), issue.getKey()).get();","263","    assertThat(issueReloaded.getStatus()).isEqualTo(STATUS_CLOSED);","264","    assertThat(issueReloaded.getResolution()).isEqualTo(RESOLUTION_FIXED);","269","    ComponentDto project = db.components().insertPrivateProject();","270","    ComponentDto file = db.components().insertComponent(newFileDto(project));","271","    RuleDefinitionDto rule = db.rules().insert();","272","    IssueDto issue = db.issues().insert(rule, project, file,","273","      i -> i.setStatus(STATUS_OPEN)","274","        .setResolution(null)","275","        .setCreatedAt(NOW - 1_000_000_000L)","276","        .setUpdatedAt(NOW - 1_000_000_000L));","277","    DiskCache<DefaultIssue>.DiskAppender issueCacheAppender = issueCache.newAppender();","279","    issueCacheAppender.append(","280","      issue.toDefaultIssue()","281","        .setStatus(STATUS_CLOSED)","282","        .setResolution(RESOLUTION_FIXED)","283","        .setSelectedAt(NOW)","284","        .setNew(false)","285","        .setChanged(true)","286","        .addComment(new DefaultIssueComment()","287","          .setKey(\"COMMENT\")","288","          .setIssueKey(issue.getKey())","289","          .setUserLogin(\"john\")","290","          .setMarkdownText(\"Some text\")","291","          .setCreatedAt(new Date(NOW))","292","          .setNew(true)))","296","    IssueChangeDto issueChangeDto = db.getDbClient().issueChangeDao().selectByIssueKeys(db.getSession(), singletonList(issue.getKey())).get(0);","297","    assertThat(issueChangeDto)","298","      .extracting(IssueChangeDto::getChangeType, IssueChangeDto::getUserLogin, IssueChangeDto::getChangeData, IssueChangeDto::getIssueKey,","299","        IssueChangeDto::getIssueChangeCreationDate)","300","      .containsOnly(IssueChangeDto.TYPE_COMMENT, \"john\", \"Some text\", issue.getKey(), NOW);","305","    ComponentDto project = db.components().insertPrivateProject();","306","    ComponentDto file = db.components().insertComponent(newFileDto(project));","307","    RuleDefinitionDto rule = db.rules().insert();","308","    IssueDto issue = db.issues().insert(rule, project, file,","309","      i -> i.setStatus(STATUS_OPEN)","310","        .setResolution(null)","311","        .setCreatedAt(NOW - 1_000_000_000L)","312","        .setUpdatedAt(NOW - 1_000_000_000L));","313","    DiskCache<DefaultIssue>.DiskAppender issueCacheAppender = issueCache.newAppender();","315","    issueCacheAppender.append(","316","      issue.toDefaultIssue()","317","        .setStatus(STATUS_CLOSED)","318","        .setResolution(RESOLUTION_FIXED)","319","        .setSelectedAt(NOW)","320","        .setNew(false)","321","        .setChanged(true)","322","        .setCurrentChange(new FieldDiffs()","323","          .setIssueKey(\"ISSUE\")","324","          .setUserLogin(\"john\")","325","          .setDiff(\"technicalDebt\", null, 1L)","326","          .setCreationDate(new Date(NOW))))","330","    IssueChangeDto issueChangeDto = db.getDbClient().issueChangeDao().selectByIssueKeys(db.getSession(), singletonList(issue.getKey())).get(0);","331","    assertThat(issueChangeDto)","332","      .extracting(IssueChangeDto::getChangeType, IssueChangeDto::getUserLogin, IssueChangeDto::getChangeData, IssueChangeDto::getIssueKey,","333","        IssueChangeDto::getIssueChangeCreationDate)","334","      .containsOnly(IssueChangeDto.TYPE_FIELD_CHANGE, \"john\", \"technicalDebt=1\", issue.getKey(), NOW);"],"delete":["28","import org.sonar.api.issue.Issue;","30","import org.sonar.api.rule.Severity;","65","  public DbTester dbTester = DbTester.create(System2.INSTANCE);","72","  private DbSession session = dbTester.getSession();","73","  private DbClient dbClient = dbTester.getDbClient();","101","    dbTester.rules().insert(rule);","102","    OrganizationDto organizationDto = dbTester.organizations().insert();","105","    ComponentDto file = ComponentTesting.newFileDto(project, null);","115","      .setSeverity(Severity.BLOCKER)","116","      .setStatus(Issue.STATUS_OPEN)","126","      .setCurrentChange(new FieldDiffs()","127","        .setIssueKey(\"ISSUE\")","128","        .setUserLogin(\"john\")","129","        .setDiff(\"technicalDebt\", null, 1L)))","139","    assertThat(result.getSeverity()).isEqualTo(Severity.BLOCKER);","140","    assertThat(result.getStatus()).isEqualTo(Issue.STATUS_OPEN);","150","    dbTester.rules().insert(rule);","151","    OrganizationDto organizationDto = dbTester.organizations().insert();","154","    ComponentDto file = ComponentTesting.newFileDto(project, null);","164","      .setSeverity(Severity.BLOCKER)","165","      .setStatus(Issue.STATUS_OPEN)","178","        .setDiff(\"technicalDebt\", null, 1L)))","180","","188","    assertThat(result.getSeverity()).isEqualTo(Severity.BLOCKER);","189","    assertThat(result.getStatus()).isEqualTo(Issue.STATUS_OPEN);","199","    dbTester.rules().insert(rule);","200","    OrganizationDto organizationDto = dbTester.organizations().insert();","203","    ComponentDto file = ComponentTesting.newFileDto(project, null);","213","      .setSeverity(Severity.BLOCKER)","214","      .setStatus(Issue.STATUS_OPEN)","225","    assertThat(result.getSeverity()).isEqualTo(Severity.BLOCKER);","226","    assertThat(result.getStatus()).isEqualTo(Issue.STATUS_OPEN);","232","    dbTester.prepareDbUnit(getClass(), \"shared.xml\");","234","    issueCache.newAppender().append(new DefaultIssue()","235","      .setKey(\"ISSUE\")","236","      .setType(RuleType.CODE_SMELL)","237","      .setRuleKey(RuleKey.of(\"xoo\", \"S01\"))","238","      .setComponentUuid(\"COMPONENT\")","239","      .setProjectUuid(\"PROJECT\")","240","      .setSeverity(Severity.BLOCKER)","241","      .setStatus(Issue.STATUS_CLOSED)","242","      .setResolution(Issue.RESOLUTION_FIXED)","243","      .setSelectedAt(NOW)","244","      .setNew(false)","245","      .setChanged(true)).close();","246","","249","    dbTester.assertDbUnit(getClass(), \"close_issue-result.xml\", \"issues\");","254","    dbTester.prepareDbUnit(getClass(), \"shared.xml\");","256","    issueCache.newAppender().append(new DefaultIssue()","257","      .setKey(\"ISSUE\")","258","      .setType(RuleType.CODE_SMELL)","259","      .setRuleKey(RuleKey.of(\"xoo\", \"S01\"))","260","      .setComponentUuid(\"COMPONENT\")","261","      .setProjectUuid(\"PROJECT\")","262","      .setSeverity(Severity.BLOCKER)","263","      .setStatus(Issue.STATUS_CLOSED)","264","      .setResolution(Issue.RESOLUTION_FIXED)","265","      .setNew(false)","266","      .setChanged(true)","267","      .addComment(new DefaultIssueComment()","268","        .setKey(\"COMMENT\")","269","        .setIssueKey(\"ISSUE\")","270","        .setUserLogin(\"john\")","271","        .setMarkdownText(\"Some text\")","272","        .setNew(true)))","274","","277","    dbTester.assertDbUnit(getClass(), \"add_comment-result.xml\", new String[] {\"id\", \"created_at\", \"updated_at\"}, \"issue_changes\");","282","    dbTester.prepareDbUnit(getClass(), \"shared.xml\");","284","    issueCache.newAppender().append(new DefaultIssue()","285","      .setKey(\"ISSUE\")","286","      .setType(RuleType.CODE_SMELL)","287","      .setRuleKey(RuleKey.of(\"xoo\", \"S01\"))","288","      .setComponentUuid(\"COMPONENT\")","289","      .setProjectUuid(\"PROJECT\")","290","      .setSeverity(Severity.BLOCKER)","291","      .setStatus(Issue.STATUS_CLOSED)","292","      .setResolution(Issue.RESOLUTION_FIXED)","293","      .setNew(false)","294","      .setChanged(true)","295","      .setCurrentChange(new FieldDiffs()","296","        .setIssueKey(\"ISSUE\")","297","        .setUserLogin(\"john\")","298","        .setDiff(\"technicalDebt\", null, 1L)))","300","","303","    dbTester.assertDbUnit(getClass(), \"add_change-result.xml\", new String[] {\"id\", \"created_at\", \"updated_at\"}, \"issue_changes\");"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/ChangelogActionTest.java":[{"add":["21","import java.util.Date;","82","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setUserLogin(user.getLogin()).setDiff(\"severity\", \"MAJOR\", \"BLOCKER\").setCreationDate(new Date()));","102","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setDiff(\"file\", file1.uuid(), file2.uuid()).setCreationDate(new Date()));","117","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setDiff(\"file\", \"UNKNOWN_1\", \"UNKNOWN_2\").setCreationDate(new Date()));","131","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setUserLogin(user.getLogin()).setDiff(\"severity\", \"MAJOR\", \"BLOCKER\").setCreationDate(new Date()));","145","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setUserLogin(null).setDiff(\"severity\", \"MAJOR\", \"BLOCKER\").setCreationDate(new Date()));","160","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setUserLogin(\"UNKNOWN\").setDiff(\"severity\", \"MAJOR\", \"BLOCKER\").setCreationDate(new Date()));","176","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setUserLogin(user.getLogin())","177","      .setDiff(\"severity\", \"MAJOR\", \"BLOCKER\").setCreationDate(new Date())","178","      .setDiff(\"status\", \"RESOLVED\", \"CLOSED\").setCreationDate(new Date()));","192","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setUserLogin(user.getLogin()).setDiff(\"severity\", null, \"BLOCKER\").setCreationDate(new Date()));","205","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setUserLogin(user.getLogin()).setDiff(\"severity\", \"MAJOR\", null).setCreationDate(new Date()));","219","      new FieldDiffs().setUserLogin(user.getLogin()).setDiff(\"severity\", \"MAJOR\", \"BLOCKER\").setCreationDate(new Date()),","220","      new FieldDiffs().setDiff(\"status\", \"RESOLVED\", \"CLOSED\").setCreationDate(new Date()));","232","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setUserLogin(user.getLogin()).setDiff(\"technicalDebt\", \"10\", \"20\").setCreationDate(new Date()));","266","      .setDiff(\"severity\", \"MAJOR\", \"BLOCKER\").setCreationDate(new Date())"],"delete":["81","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setUserLogin(user.getLogin()).setDiff(\"severity\", \"MAJOR\", \"BLOCKER\"));","101","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setDiff(\"file\", file1.uuid(), file2.uuid()));","116","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setDiff(\"file\", \"UNKNOWN_1\", \"UNKNOWN_2\"));","130","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setUserLogin(user.getLogin()).setDiff(\"severity\", \"MAJOR\", \"BLOCKER\"));","144","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setUserLogin(null).setDiff(\"severity\", \"MAJOR\", \"BLOCKER\"));","159","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setUserLogin(\"UNKNOWN\").setDiff(\"severity\", \"MAJOR\", \"BLOCKER\"));","175","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setUserLogin(user.getLogin()).setDiff(\"severity\", \"MAJOR\", \"BLOCKER\").setDiff(\"status\", \"RESOLVED\", \"CLOSED\"));","189","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setUserLogin(user.getLogin()).setDiff(\"severity\", null, \"BLOCKER\"));","202","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setUserLogin(user.getLogin()).setDiff(\"severity\", \"MAJOR\", null));","216","      new FieldDiffs().setUserLogin(user.getLogin()).setDiff(\"severity\", \"MAJOR\", \"BLOCKER\"),","217","      new FieldDiffs().setDiff(\"status\", \"RESOLVED\", \"CLOSED\"));","229","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setUserLogin(user.getLogin()).setDiff(\"technicalDebt\", \"10\", \"20\"));","263","      .setDiff(\"severity\", \"MAJOR\", \"BLOCKER\")"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/issue\/ShortBranchIssueMergerTest.java":[{"add":["195","    db.issues().insertFieldDiffs(issue1, FieldDiffs.parse(\"severity=BLOCKER|INFO,assignee=toto|titi\").setCreationDate(new Date()));","199","    db.issues().insertFieldDiffs(issue2, FieldDiffs.parse(\"severity=BLOCKER|MINOR,assignee=foo|bar\").setCreationDate(new Date()));"],"delete":["195","    db.issues().insertFieldDiffs(issue1, FieldDiffs.parse(\"severity=BLOCKER|INFO,assignee=toto|titi\"));","199","    db.issues().insertFieldDiffs(issue2, FieldDiffs.parse(\"severity=BLOCKER|MINOR,assignee=foo|bar\"));"]}],"server\/sonar-db-dao\/src\/test\/resources\/org\/sonar\/db\/issue\/IssueChangeMapperTest\/insert_comment-result.xml":[{"add":["10","    issue_change_creation_date=\"1500000000000\""],"delete":["10","    issue_change_creation_date=\"[null]\""]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/issue\/IssueChangeDto.java":[{"add":["32","import static java.util.Objects.requireNonNull;","54","  @Nullable","63","    Date createdAt = requireNonNull(comment.createdAt(), \"Comment created at must not be null\");","64","    dto.setIssueChangeCreationDate(createdAt.getTime());","73","    Date createdAt = requireNonNull(diffs.creationDate(), \"Diffs created at must not be null\");","74","    dto.setIssueChangeCreationDate(createdAt.getTime());","163","    \/\/ Old comments do not have functional creation date as this column has been added later","164","    return issueChangeCreationDate == null ? createdAt : issueChangeCreationDate;","167","  public IssueChangeDto setIssueChangeCreationDate(long issueChangeCreationDate) {","181","      .setCreatedAt(new Date(getIssueChangeCreationDate()))","191","      .setCreationDate(new Date(getIssueChangeCreationDate()))"],"delete":["61","    dto.setIssueChangeCreationDate(comment.createdAt() == null ? null : comment.createdAt().getTime());","70","    dto.setIssueChangeCreationDate(diffs.creationDate() == null ? null : diffs.creationDate().getTime());","159","    return issueChangeCreationDate;","162","  public IssueChangeDto setIssueChangeCreationDate(@Nullable Long issueChangeCreationDate) {","176","      .setCreatedAt(new Date(createdAt))","186","      \/\/ issueChangeCreationDate can be null as it has been introduced after createdAt","187","      .setCreationDate(issueChangeCreationDate != null ? new Date(issueChangeCreationDate) : new Date(createdAt))"]}]}},"343be23904dcb520ea86c4d6070cd3be272941da":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/RuleUpdaterTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/RuleUpdate.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/ws\/UpdateActionTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/RuleUpdaterTest.java":[{"add":["29","import org.assertj.core.api.ThrowableAssertAlternative;","63","import static org.sonar.api.rule.RuleStatus.REMOVED;","64","import static org.sonar.api.rule.Severity.CRITICAL;","65","import static org.sonar.db.rule.RuleTesting.newRule;","66","import static org.sonar.server.rule.RuleUpdate.createForCustomRule;","67","import static org.sonar.server.rule.RuleUpdate.createForPluginRule;","95","    db.rules().insert(newRule(RULE_KEY).setStatus(RuleStatus.REMOVED));","98","    RuleUpdate update = createForPluginRule(RULE_KEY)","101","","102","    expectedException.expect(IllegalArgumentException.class);","103","    expectedException.expectMessage(\"Rule with REMOVED status cannot be updated: squid:S001\");","104","","105","    underTest.update(dbSession, update, db.getDefaultOrganization(), userSessionRule);","122","    RuleUpdate update = createForPluginRule(RULE_KEY);","153","    RuleUpdate update = createForPluginRule(RULE_KEY)","180","    RuleUpdate update = createForPluginRule(RULE_KEY)","202","    RuleUpdate update = createForPluginRule(RULE_KEY)","225","    RuleUpdate update = createForPluginRule(RULE_KEY)","242","    db.rules().insert(newRule(RULE_KEY)","249","    RuleUpdate update = createForPluginRule(RULE_KEY)","268","    db.rules().insert(newRule(RULE_KEY)","274","    RuleUpdate update = createForPluginRule(RULE_KEY)","293","    db.rules().insert(newRule(RULE_KEY)","299","    RuleUpdate update = createForPluginRule(RULE_KEY)","329","    RuleUpdate update = createForPluginRule(RULE_KEY)","366","    RuleUpdate update = createForCustomRule(customRule.getKey())","416","    RuleUpdate update = createForCustomRule(customRule.getKey())","470","    RuleUpdate update = createForCustomRule(customRule.getKey())","514","    RuleUpdate update = createForCustomRule(customRule.getKey())","518","","519","    expectedException.expect(IllegalArgumentException.class);","520","    expectedException.expectMessage(\"The name is missing\");","521","","522","    underTest.update(dbSession, update, db.getDefaultOrganization(), userSessionRule);","537","    expectedException.expect(IllegalArgumentException.class);","538","    expectedException.expectMessage(\"The description is missing\");","539","","540","    underTest.update(dbSession,","541","      createForCustomRule(customRule.getKey()).setName(\"New name\").setMarkdownDescription(\"\").setOrganization(db.getDefaultOrganization()),","542","      db.getDefaultOrganization(), userSessionRule);","547","    RuleDefinitionDto ruleDefinition = db.rules().insert(newRule(RuleKey.of(\"squid\", \"S01\")));","550","    expectedException.expect(IllegalArgumentException.class);","551","    expectedException.expectMessage(\"Not a custom rule\");","552","","553","    createForPluginRule(ruleDefinition.getKey()).setName(\"New name\");","558","    RuleDefinitionDto ruleDefinition = db.rules().insert(newRule(RuleKey.of(\"squid\", \"S01\")));","561","    expectedException.expect(IllegalArgumentException.class);","562","    expectedException.expectMessage(\"Not a custom rule\");","563","","564","    createForPluginRule(ruleDefinition.getKey()).setMarkdownDescription(\"New description\");","569","    RuleDefinitionDto ruleDefinition = db.rules().insert(newRule(RuleKey.of(\"squid\", \"S01\")));","572","    expectedException.expect(IllegalArgumentException.class);","573","    expectedException.expectMessage(\"Not a custom rule\");","574","","575","    createForPluginRule(ruleDefinition.getKey()).setSeverity(CRITICAL);"],"delete":["84","  private TestDefaultOrganizationProvider defaultOrganizationProvider = TestDefaultOrganizationProvider.from(db);","90","    db.rules().insert(RuleTesting.newRule(RULE_KEY).setStatus(RuleStatus.REMOVED));","93","    RuleUpdate update = RuleUpdate.createForPluginRule(RULE_KEY)","96","    try {","97","      underTest.update(dbSession, update, db.getDefaultOrganization(), userSessionRule);","98","      fail();","99","    } catch (IllegalArgumentException e) {","100","      assertThat(e).hasMessage(\"Rule with REMOVED status cannot be updated: squid:S001\");","101","    }","118","    RuleUpdate update = RuleUpdate.createForPluginRule(RULE_KEY);","149","    RuleUpdate update = RuleUpdate.createForPluginRule(RULE_KEY)","176","    RuleUpdate update = RuleUpdate.createForPluginRule(RULE_KEY)","198","    RuleUpdate update = RuleUpdate.createForPluginRule(RULE_KEY)","221","    RuleUpdate update = RuleUpdate.createForPluginRule(RULE_KEY)","238","    db.rules().insert(RuleTesting.newRule(RULE_KEY)","245","    RuleUpdate update = RuleUpdate.createForPluginRule(RULE_KEY)","264","    db.rules().insert(RuleTesting.newRule(RULE_KEY)","270","    RuleUpdate update = RuleUpdate.createForPluginRule(RULE_KEY)","289","    db.rules().insert(RuleTesting.newRule(RULE_KEY)","295","    RuleUpdate update = RuleUpdate.createForPluginRule(RULE_KEY)","325","    RuleUpdate update = RuleUpdate.createForPluginRule(RULE_KEY)","362","    RuleUpdate update = RuleUpdate.createForCustomRule(customRule.getKey())","412","    RuleUpdate update = RuleUpdate.createForCustomRule(customRule.getKey())","466","    RuleUpdate update = RuleUpdate.createForCustomRule(customRule.getKey())","510","    RuleUpdate update = RuleUpdate.createForCustomRule(customRule.getKey())","514","    try {","515","      underTest.update(dbSession, update, db.getDefaultOrganization(), userSessionRule);","516","      fail();","517","    } catch (Exception e) {","518","      assertThat(e).isInstanceOf(IllegalArgumentException.class).hasMessage(\"The name is missing\");","519","    }","534","    \/\/ Update custom rule","535","    RuleUpdate update = RuleUpdate.createForCustomRule(customRule.getKey())","536","      .setName(\"New name\")","537","      .setMarkdownDescription(\"\")","538","      .setOrganization(db.getDefaultOrganization());","539","    try {","540","      underTest.update(dbSession, update, db.getDefaultOrganization(), userSessionRule);","541","      fail();","542","    } catch (Exception e) {","543","      assertThat(e).isInstanceOf(IllegalArgumentException.class).hasMessage(\"The description is missing\");","544","    }","549","    \/\/ Create rule rule","550","    RuleDefinitionDto ruleDto = RuleTesting.newRule(RuleKey.of(\"squid\", \"S01\"));","551","    db.rules().insert(ruleDto);","552","","555","    try {","556","      \/\/ Update rule","557","      RuleUpdate.createForPluginRule(ruleDto.getKey())","558","        .setName(\"New name\");","559","      fail();","560","    } catch (Exception e) {","561","      assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage(\"Not a custom rule\");","562","    }","567","    \/\/ Create rule rule","568","    RuleDefinitionDto ruleDto = RuleTesting.newRule(RuleKey.of(\"squid\", \"S01\"));","569","    db.rules().insert(ruleDto);","570","","573","    try {","574","      \/\/ Update rule","575","      RuleUpdate.createForPluginRule(ruleDto.getKey())","576","        .setMarkdownDescription(\"New description\");","577","      fail();","578","    } catch (Exception e) {","579","      assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage(\"Not a custom rule\");","580","    }","585","    \/\/ Create rule rule","586","    RuleDefinitionDto ruleDto = RuleTesting.newRule(RuleKey.of(\"squid\", \"S01\"));","587","    db.rules().insert(ruleDto);","588","","591","    try {","592","      \/\/ Update rule","593","      RuleUpdate.createForPluginRule(ruleDto.getKey())","594","        .setSeverity(Severity.CRITICAL);","595","      fail();","596","    } catch (Exception e) {","597","      assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage(\"Not a custom rule\");","598","    }"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/RuleUpdate.java":[{"add":["32","import static com.google.common.base.Preconditions.checkArgument;","226","    checkArgument(useCase == CUSTOM_RULE, \"Not a custom rule\");"],"delete":["225","    if (useCase != CUSTOM_RULE) {","226","      throw new IllegalStateException(\"Not a custom rule\");","227","    }"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/ws\/UpdateActionTest.java":[{"add":["313","  public void throw_IllegalArgumentException_if_trying_to_update_builtin_rule_description() throws Exception {","314","    logInAsQProfileAdministrator();","315","    RuleDefinitionDto rule = db.rules().insert();","316","","317","    expectedException.expect(IllegalArgumentException.class);","318","    expectedException.expectMessage(\"Not a custom rule\");","319","","320","    ws.newRequest().setMethod(\"POST\")","321","      .setParam(\"key\", rule.getKey().toString())","322","      .setParam(\"name\", rule.getName())","323","      .setParam(\"markdown_description\", \"New description\")","324","      .execute();","325","","326","  }","327","","328","  @Test"],"delete":[]}]}},"4d950b9bb39dab261ea5da4d719cf8fd2c9d8d38":{"changes":{"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/plugins\/ws\/InstalledActionTest.java":"MODIFY","build.gradle":"MODIFY"},"diff":{"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/plugins\/ws\/InstalledActionTest.java":[{"add":["22","import com.hazelcast.internal.json.Json;","23","import com.hazelcast.internal.json.JsonObject;","76","  @DataProvider","77","  public static Object[][] editionBundledLicenseValues() {","78","    return new Object[][] {","79","      {\"sonarsource\"},","80","      {\"SonarSource\"},","81","      {\"SonaRSOUrce\"},","82","      {\"SONARSOURCE\"},","83","      {\"commercial\"},","84","      {\"Commercial\"},","85","      {\"COMMERCIAL\"},","86","      {\"COmmERCiaL\"},","87","    };","88","  }","89",""],"delete":["22","import com.hazelcast.com.eclipsesource.json.Json;","23","import com.hazelcast.com.eclipsesource.json.JsonObject;","378","  @DataProvider","379","  public static Object[][] editionBundledLicenseValues() {","380","    return new Object[][]{","381","      {\"sonarsource\"},","382","      {\"SonarSource\"},","383","      {\"SonaRSOUrce\"},","384","      {\"SONARSOURCE\"},","385","      {\"commercial\"},","386","      {\"Commercial\"},","387","      {\"COMMERCIAL\"},","388","      {\"COmmERCiaL\"},","389","    };","390","  }","391",""]}],"build.gradle":[{"add":["173","      dependencySet(group: 'com.hazelcast', version: '3.12.1') {"],"delete":["173","      dependencySet(group: 'com.hazelcast', version: '3.8.6') {"]}]}},"416c2af8844a41cfd078e80c38be96f15f76ee9e":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/components\/Conditions.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/components\/Conditions.js":[{"add":["67","    const existingConditions = conditions.filter(condition =>","68","      metrics.find(metric => metric.key === condition.metric)","69","    );","70","","71","    const sortedConditions = sortBy(","72","      existingConditions,","73","      condition => metrics.find(metric => metric.key === condition.metric).name","74","    );","77","    const savedConditions = existingConditions.filter(condition => condition.id != null);"],"delete":["67","    const sortedConditions = sortBy(conditions, condition => {","68","      return metrics.find(metric => metric.key === condition.metric).name;","69","    });","72","    const savedConditions = conditions.filter(condition => condition.id != null);"]}]}},"901b8810a4d2c237395eced14e467be415218249":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/web\/SecurityServletFilter.java":"MODIFY","\/dev\/null":"DELETE","it\/it-tests\/src\/test\/java\/it\/serverSystem\/HttpHeadersTest.java":"ADD","server\/sonar-web\/src\/main\/webapp\/WEB-INF\/config\/environment.rb":"MODIFY","it\/it-tests\/src\/test\/java\/it\/Category4Suite.java":"MODIFY","server\/sonar-web\/src\/main\/webapp\/WEB-INF\/web.xml":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/web\/SecurityServletFilter.java":[{"add":["58","    \/\/ WARNING, headers must be added before the doFilter, otherwise they won't be added when response is already committed (for instance when a WS is called)","71","","72","    chain.doFilter(httpRequest, httpResponse);"],"delete":["58","    chain.doFilter(httpRequest, httpResponse);"]}],"\/dev\/null":[{"add":[],"delete":[]}],"it\/it-tests\/src\/test\/java\/it\/serverSystem\/HttpHeadersTest.java":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/config\/environment.rb":[{"add":[],"delete":["54","","55","#","56","# Put response headers on all HTTP calls. This is done by the Java SecurityServlerFilter,","57","# but for some reason Rack swallows the headers set on Java side.","58","# See middleware configuration below.","59","#","60","class SecurityHeaders","61","  def initialize(app)","62","    @app = app","63","  end","64","","65","  def call(env)","66","    status, headers, body = @app.call(env)","67","","68","    # Clickjacking protection","69","    # See https:\/\/www.owasp.org\/index.php\/Clickjacking_Protection_for_Java_EE","70","    headers['X-Frame-Options']='SAMEORIGIN'","71","","72","    # Cross-site scripting","73","    # See https:\/\/www.owasp.org\/index.php\/List_of_useful_HTTP_headers","74","    headers['X-XSS-Protection']='1; mode=block'","75","","76","    # MIME-sniffing","77","    # See https:\/\/www.owasp.org\/index.php\/List_of_useful_HTTP_headers","78","    headers['X-Content-Type-Options']='nosniff';","79","","80","    [status, headers, body]","81","  end","82","end","83","","84","","141","","142","  # Add security related headers","143","  config.middleware.use SecurityHeaders"]}],"it\/it-tests\/src\/test\/java\/it\/Category4Suite.java":[{"add":["31","import it.serverSystem.HttpHeadersTest;"],"delete":["31","import it.http.HttpHeadersTest;"]}],"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/web.xml":[{"add":["77","    <filter-name>SecurityFilter<\/filter-name>","78","    <url-pattern>\/*<\/url-pattern>","79","  <\/filter-mapping>","80","  <filter-mapping>"],"delete":["85","    <filter-name>SecurityFilter<\/filter-name>","86","    <url-pattern>\/*<\/url-pattern>","87","  <\/filter-mapping>","88","  <filter-mapping>"]}]}},"b2d86314802a630ce4007d82ffc3afcf8aa31dfc":{"changes":{"sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/OkHttpClientBuilder.java":"MODIFY","sonar-ws\/src\/test\/java\/org\/sonarqube\/ws\/client\/HttpConnectorTest.java":"MODIFY"},"diff":{"sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/OkHttpClientBuilder.java":[{"add":["61","  private static final String PROXY_AUTHORIZATION = \"Proxy-Authorization\";","163","        if (response.request().header(PROXY_AUTHORIZATION) != null) {","164","          \/\/ Give up, we've already attempted to authenticate.","165","          return null;","166","        }","169","          return response.request().newBuilder().header(PROXY_AUTHORIZATION, credential).build();"],"delete":["164","          return response.request().newBuilder().header(\"Proxy-Authorization\", credential).build();"]}],"sonar-ws\/src\/test\/java\/org\/sonarqube\/ws\/client\/HttpConnectorTest.java":[{"add":["33","import org.junit.After;","65","  @After","66","  public void stop() throws Exception {","67","    server.close();","68","  }","69","","148","    try (MockWebServer proxy = new MockWebServer()) {","149","      proxy.start();","151","      underTest = HttpConnector.newBuilder()","152","        .url(serverUrl)","153","        .proxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxy.getHostName(), proxy.getPort())))","154","        .proxyCredentials(\"theProxyLogin\", \"theProxyPassword\")","155","        .build();","157","      GetRequest request = new GetRequest(\"api\/issues\/search\");","158","      proxy.enqueue(new MockResponse().setResponseCode(407));","159","      proxy.enqueue(new MockResponse().setBody(\"OK!\"));","160","      underTest.call(request);","161","","162","      RecordedRequest recordedRequest = proxy.takeRequest();","163","      assertThat(recordedRequest.getHeader(\"Proxy-Authorization\")).isNull();","164","      recordedRequest = proxy.takeRequest();","165","      assertThat(recordedRequest.getHeader(\"Proxy-Authorization\")).isEqualTo(basic(\"theProxyLogin\", \"theProxyPassword\"));","166","    }","167","  }","168","","169","  @Test","170","  public void use_proxy_authentication_wrong_crendentials() throws Exception {","171","    try (MockWebServer proxy = new MockWebServer()) {","172","      proxy.start();","173","","174","      underTest = HttpConnector.newBuilder()","175","        .url(serverUrl)","176","        .proxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxy.getHostName(), proxy.getPort())))","177","        .proxyCredentials(\"theProxyLogin\", \"wrongPassword\")","178","        .build();","179","","180","      GetRequest request = new GetRequest(\"api\/issues\/search\");","181","      proxy.enqueue(new MockResponse().setResponseCode(407));","182","      proxy.enqueue(new MockResponse().setResponseCode(407));","183","      proxy.enqueue(new MockResponse().setResponseCode(407));","184","      underTest.call(request);","185","","186","      RecordedRequest recordedRequest = proxy.takeRequest();","187","      assertThat(recordedRequest.getHeader(\"Proxy-Authorization\")).isNull();","188","      recordedRequest = proxy.takeRequest();","189","      assertThat(recordedRequest.getHeader(\"Proxy-Authorization\")).isEqualTo(basic(\"theProxyLogin\", \"wrongPassword\"));","190","      assertThat(proxy.getRequestCount()).isEqualTo(2);","191","    }"],"delete":["142","    MockWebServer proxy = new MockWebServer();","143","    proxy.start();","144","    underTest = HttpConnector.newBuilder()","145","      .url(serverUrl)","146","      .proxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxy.getHostName(), proxy.getPort())))","147","      .proxyCredentials(\"theProxyLogin\", \"theProxyPassword\")","148","      .build();","150","    GetRequest request = new GetRequest(\"api\/issues\/search\");","151","    proxy.enqueue(new MockResponse().setResponseCode(407));","152","    proxy.enqueue(new MockResponse().setBody(\"OK!\"));","153","    underTest.call(request);","155","    RecordedRequest recordedRequest = proxy.takeRequest();","156","    assertThat(recordedRequest.getHeader(\"Proxy-Authorization\")).isNull();","157","    recordedRequest = proxy.takeRequest();","158","    assertThat(recordedRequest.getHeader(\"Proxy-Authorization\")).isEqualTo(basic(\"theProxyLogin\", \"theProxyPassword\"));"]}]}},"f02eeba4ef9908da5d6e5ea969e91a22c6c443cd":{"changes":{"sonar-core\/src\/main\/java\/org\/sonar\/core\/component\/ComponentKeys.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/component\/DefaultBranchImpl.java":"MODIFY","sonar-core\/src\/test\/java\/org\/sonar\/core\/component\/ComponentKeysTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/component\/ComponentUpdater.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/ProjectReactorValidator.java":"MODIFY"},"diff":{"sonar-core\/src\/main\/java\/org\/sonar\/core\/component\/ComponentKeys.java":[{"add":["113","  public static boolean isValidLegacyBranch(String branchCandidate) {"],"delete":["113","  public static boolean isValidBranch(String branchCandidate) {"]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/component\/DefaultBranchImpl.java":[{"add":["49","    if (!ComponentKeys.isValidLegacyBranch(branchName)) {"],"delete":["49","    if (!ComponentKeys.isValidBranch(branchName)) {"]}],"sonar-core\/src\/test\/java\/org\/sonar\/core\/component\/ComponentKeysTest.java":[{"add":["70","    assertThat(ComponentKeys.isValidLegacyBranch(\"\")).isTrue();","71","    assertThat(ComponentKeys.isValidLegacyBranch(\"abc\")).isTrue();","72","    assertThat(ComponentKeys.isValidLegacyBranch(\"0123\")).isTrue();","73","    assertThat(ComponentKeys.isValidLegacyBranch(\"ab 12\")).isFalse();","74","    assertThat(ComponentKeys.isValidLegacyBranch(\"ab_12\")).isTrue();","75","    assertThat(ComponentKeys.isValidLegacyBranch(\"ab\/12\")).isTrue();","76","    assertThat(ComponentKeys.isValidLegacyBranch(\"ab\\\\12\")).isFalse();","77","    assertThat(ComponentKeys.isValidLegacyBranch(\"ab\\n\")).isFalse();"],"delete":["70","    assertThat(ComponentKeys.isValidBranch(\"\")).isTrue();","71","    assertThat(ComponentKeys.isValidBranch(\"abc\")).isTrue();","72","    assertThat(ComponentKeys.isValidBranch(\"0123\")).isTrue();","73","    assertThat(ComponentKeys.isValidBranch(\"ab 12\")).isFalse();","74","    assertThat(ComponentKeys.isValidBranch(\"ab_12\")).isTrue();","75","    assertThat(ComponentKeys.isValidBranch(\"ab\/12\")).isTrue();","76","    assertThat(ComponentKeys.isValidBranch(\"ab\\\\12\")).isFalse();","77","    assertThat(ComponentKeys.isValidBranch(\"ab\\n\")).isFalse();"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/component\/ComponentUpdater.java":[{"add":["102","    checkLegacyBranchFormat(newComponent.qualifier(), newComponent.deprecatedBranch());","171","  private void checkLegacyBranchFormat(String qualifier, @Nullable String branch) {","172","    checkRequest(branch == null || ComponentKeys.isValidLegacyBranch(branch),"],"delete":["102","    checkBranchFormat(newComponent.qualifier(), newComponent.deprecatedBranch());","171","  private void checkBranchFormat(String qualifier, @Nullable String branch) {","172","    checkRequest(branch == null || ComponentKeys.isValidBranch(branch),"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/ProjectReactorValidator.java":[{"add":["87","    validateLegacyBranch(validationMessages, deprecatedBranchName);","124","  private static void validateLegacyBranch(List<String> validationMessages, @Nullable String branch) {","125","    if (isNotEmpty(branch) && !ComponentKeys.isValidLegacyBranch(branch)) {"],"delete":["87","    validateBranch(validationMessages, deprecatedBranchName);","124","  private static void validateBranch(List<String> validationMessages, @Nullable String branch) {","125","    if (isNotEmpty(branch) && !ComponentKeys.isValidBranch(branch)) {"]}]}},"7253fe3904de24bbf5829c992c3592e018791951":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/ws\/SearchAction.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionTest.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v73\/DbVersion73.java":"MODIFY","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v73\/AddIndexOnOrganizationMembersTest.java":"ADD","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/ws\/ChangelogAction.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/tester\/AbstractMockUserSession.java":"MODIFY","server\/sonar-db-core\/src\/main\/resources\/org\/sonar\/db\/version\/schema-h2.ddl":"MODIFY","server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/issue\/ws\/SearchActionTestOnSonarCloud\/with_authors_facet.json":"ADD","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/source\/ws\/LinesActionTest.java":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/Sidebar.tsx":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/user\/DoPrivileged.java":"MODIFY","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v73\/DbVersion73Test.java":"MODIFY","server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/source\/ws\/LinesActionTest\/hide_scmAuthors.json":"ADD","server\/sonar-web\/src\/main\/js\/apps\/issues\/utils.ts":"MODIFY","server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/issue\/ws\/SearchActionTestOnSonarCloud\/no_authors_facet.json":"ADD","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/ws\/SearchResponseFormat.java":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/explore\/ExploreIssues.tsx":"MODIFY","server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/source\/ws\/LinesActionTest\/show_scmAuthors.json":"ADD","server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/AppContainer.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/LineSCM-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/LineSCM.tsx":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/user\/TestUserSessionFactory.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/authentication\/SafeModeUserSession.java":"MODIFY","server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/issue\/ws\/SearchActionTestOnSonarCloud\/no_author_and_no_authors_facet.json":"ADD","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionComponentsTest.java":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/App.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/SCMPopup.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/__snapshots__\/LineSCM-test.tsx.snap":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/source\/ws\/LinesAction.java":"MODIFY","server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v73\/AddIndexOnOrganizationMembersTest\/organization_members.sql":"ADD","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/ChangelogActionTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/user\/ThreadLocalUserSession.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/user\/AbstractUserSession.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/ws\/SearchResponseData.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/user\/ServerUserSession.java":"MODIFY","server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/issue\/ws\/SearchActionTest\/author_is_hidden.json":"ADD","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/tester\/AnonymousMockUserSession.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionTestOnSonarCloud.java":"ADD","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v73\/AddIndexOnOrganizationMembers.java":"ADD"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/ws\/SearchAction.java":[{"add":["32","import java.util.Optional;","39","import org.sonar.api.config.Configuration;","56","import org.sonar.db.organization.OrganizationDto;","63","import org.sonar.server.issue.index.IssueQuery;","64","import org.sonar.server.issue.index.IssueQueryFactory;","79","import static org.sonar.process.ProcessProperties.Property.SONARCLOUD_ENABLED;","85","import static org.sonar.server.issue.index.IssueQuery.SORT_BY_ASSIGNEE;","155","  private final boolean isOnSonarCloud;","157","  public SearchAction(UserSession userSession, IssueIndex issueIndex, IssueQueryFactory issueQueryFactory, SearchResponseLoader searchResponseLoader,","158","    SearchResponseFormat searchResponseFormat, Configuration config, System2 system2, DbClient dbClient) {","159","    this.isOnSonarCloud = config.getBoolean(SONARCLOUD_ENABLED.getKey()).orElse(false);","385","","439","          (!query.projectUuids().isEmpty()) || query.organizationUuid() != null, \"Facet(s) '%s' require to also filter by project or organization\",","446","    if (userSession.isLoggedIn()) {","447","      try (DbSession dbSession = dbClient.openSession(false)) {","448","        data.setUserOrganizationUuids(dbClient.organizationMemberDao().selectOrganizationUuidsByUser(dbSession, userSession.getUserId()));","449","      }","450","    }","547","  private SearchOptions createSearchOptionsFromRequest(SearchRequest request) {","550","","551","    List<String> facets = request.getFacets();","552","","553","    if (facets == null || facets.isEmpty()) {","554","      return options;","555","    }","556","","557","    List<String> requestedFacets = new ArrayList<>(facets.size());","558","    requestedFacets.addAll(facets);","559","","560","    if (isOnSonarCloud) {","561","      Optional<OrganizationDto> organizationDto = Optional.empty();","562","      String organizationKey = request.getOrganization();","563","      if (organizationKey != null) {","564","        try (DbSession dbSession = dbClient.openSession(false)) {","565","          organizationDto = dbClient.organizationDao().selectByKey(dbSession, organizationKey);","566","        }","567","      }","568","","569","      if (!organizationDto.isPresent() || !userSession.hasMembership(organizationDto.get())) {","570","        \/\/ In order to display the authors facet, the organization parameter must be set and the user","571","        \/\/ must be member of this organization","572","        requestedFacets.remove(PARAM_AUTHORS);","573","      }","574","    }","575","","576","    options.addFacets(requestedFacets);"],"delete":["58","import org.sonar.server.issue.index.IssueQuery;","59","import org.sonar.server.issue.index.IssueQueryFactory;","80","import static org.sonar.server.issue.index.IssueQuery.SORT_BY_ASSIGNEE;","152","  public SearchAction(UserSession userSession, IssueIndex issueIndex, IssueQueryFactory issueQueryFactory,","153","    SearchResponseLoader searchResponseLoader, SearchResponseFormat searchResponseFormat, System2 system2,","154","    DbClient dbClient) {","378","","380","","435","        (!query.projectUuids().isEmpty()) || query.organizationUuid() != null, \"Facet(s) '%s' require to also filter by project or organization\",","538","  private static SearchOptions createSearchOptionsFromRequest(SearchRequest request) {","541","    options.addFacets(request.getFacets());"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionTest.java":[{"add":["29","import org.sonar.api.config.internal.MapSettings;","101","    @Rule","102","    public UserSessionRule userSession = standalone();","103","    @Rule","104","    public DbTester db = DbTester.create();","105","    @Rule","106","    public EsTester es = EsTester.create();","107","    @Rule","108","    public ExpectedException expectedException = none();","110","    private DbClient dbClient = db.getDbClient();","111","    private DbSession session = db.getSession();","112","    private IssueIndex issueIndex = new IssueIndex(es.client(), System2.INSTANCE, userSession, new WebAuthorizationTypeSupport(userSession));","113","    private IssueIndexer issueIndexer = new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient));","114","    private IssueQueryFactory issueQueryFactory = new IssueQueryFactory(dbClient, Clock.systemUTC(), userSession);","115","    private IssueFieldsSetter issueFieldsSetter = new IssueFieldsSetter();","116","    private IssueWorkflow issueWorkflow = new IssueWorkflow(new FunctionExecutor(issueFieldsSetter), issueFieldsSetter);","117","    private SearchResponseLoader searchResponseLoader = new SearchResponseLoader(userSession, dbClient, new TransitionService(userSession, issueWorkflow));","118","    private Languages languages = new Languages();","119","    private SearchResponseFormat searchResponseFormat = new SearchResponseFormat(new Durations(), new WsResponseCommonFormat(languages), languages, new AvatarResolverImpl());","120","    private WsActionTester ws = new WsActionTester(new SearchAction(userSession, issueIndex, issueQueryFactory, searchResponseLoader, searchResponseFormat,","121","      new MapSettings().asConfig(), System2.INSTANCE, dbClient));","122","    private StartupIndexer permissionIndexer = new PermissionIndexer(dbClient, es.client(), issueIndexer);","251","    db.organizations().addMember(otherOrganization2, simon);","273","    userSession.logIn(simon);","278","  public void hide_author_if_not_member_of_organization() {","279","    ComponentDto project = insertComponent(ComponentTesting.newPublicProjectDto(otherOrganization2, \"PROJECT_ID\").setDbKey(\"PROJECT_KEY\"));","280","    indexPermissions();","281","    ComponentDto file = insertComponent(newFileDto(project, null, \"FILE_ID\").setDbKey(\"FILE_KEY\"));","282","    IssueDto issue = newDto(newExternalRule(), file, project)","283","      .setKee(\"82fd47d4-b650-4037-80bc-7b112bd4eac2\")","284","      .setEffort(10L)","285","      .setLine(42)","286","      .setChecksum(\"a227e508d6646b55a086ee11d63b21e9\")","287","      .setMessage(\"the message\")","288","      .setStatus(STATUS_RESOLVED)","289","      .setResolution(RESOLUTION_FIXED)","290","      .setSeverity(\"MAJOR\")","291","      .setAuthorLogin(\"John\")","292","      .setTags(asList(\"bug\", \"owasp\"))","293","      .setIssueCreationDate(DateUtils.parseDateTime(\"2014-09-04T00:00:00+0100\"))","294","      .setIssueUpdateDate(DateUtils.parseDateTime(\"2017-12-04T00:00:00+0100\"));","295","    db.issues().insertIssue(issue);","296","    indexIssues();","297","","298","    ws.newRequest().execute().assertJson(this.getClass(), \"author_is_hidden.json\");","299","  }","300","","301","  @Test","398","    userSession.logIn(john);","434","    userSession.logIn(john);","455","    userSession.logIn(\"john\");","479","    userSession.logIn(\"john\")","497","    userSession.logIn(\"john\")","581","    userSession.logIn(\"john\");","608","    userSession.logIn(john);","636","    userSession.logIn(john);","652","    userSession.logIn(user);","699","    userSession.logIn(john);","747","    userSession.logIn(john);","761","    userSession.logIn(poy);","832","    userSession.logIn(john);","954","    userSession.logIn(\"john\");","1008","    userSession.logIn().addProjectPermission(permission, project);"],"delete":["100","  @Rule","101","  public UserSessionRule userSessionRule = standalone();","102","  @Rule","103","  public DbTester db = DbTester.create();","104","  @Rule","105","  public EsTester es = EsTester.create();","106","  @Rule","107","  public ExpectedException expectedException = none();","109","  private DbClient dbClient = db.getDbClient();","110","  private DbSession session = db.getSession();","111","  private IssueIndex issueIndex = new IssueIndex(es.client(), System2.INSTANCE, userSessionRule, new WebAuthorizationTypeSupport(userSessionRule));","112","  private IssueIndexer issueIndexer = new IssueIndexer(es.client(), dbClient, new IssueIteratorFactory(dbClient));","113","  private IssueQueryFactory issueQueryFactory = new IssueQueryFactory(dbClient, Clock.systemUTC(), userSessionRule);","114","  private IssueFieldsSetter issueFieldsSetter = new IssueFieldsSetter();","115","  private IssueWorkflow issueWorkflow = new IssueWorkflow(new FunctionExecutor(issueFieldsSetter), issueFieldsSetter);","116","  private SearchResponseLoader searchResponseLoader = new SearchResponseLoader(userSessionRule, dbClient, new TransitionService(userSessionRule, issueWorkflow));","117","  private Languages languages = new Languages();","118","  private SearchResponseFormat searchResponseFormat = new SearchResponseFormat(new Durations(), new WsResponseCommonFormat(languages), languages, new AvatarResolverImpl());","119","  private WsActionTester ws = new WsActionTester(new SearchAction(userSessionRule, issueIndex, issueQueryFactory, searchResponseLoader, searchResponseFormat, System2.INSTANCE,","120","    dbClient));","121","  private StartupIndexer permissionIndexer = new PermissionIndexer(dbClient, es.client(), issueIndexer);","371","    userSessionRule.logIn(john);","407","    userSessionRule.logIn(john);","428","    userSessionRule.logIn(\"john\");","452","    userSessionRule.logIn(\"john\")","470","    userSessionRule.logIn(\"john\")","554","    userSessionRule.logIn(\"john\");","581","    userSessionRule.logIn(john);","609","    userSessionRule.logIn(john);","625","    userSessionRule.logIn(user);","672","    userSessionRule.logIn(john);","720","    userSessionRule.logIn(john);","734","    userSessionRule.logIn(poy);","805","    userSessionRule.logIn(john);","927","    userSessionRule.logIn(\"john\");","981","    userSessionRule.logIn().addProjectPermission(permission, project);"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v73\/DbVersion73.java":[{"add":["41","      .add(2212, \"Add index on ORGANIZATION_MEMBERS\", AddIndexOnOrganizationMembers.class)"],"delete":[]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v73\/AddIndexOnOrganizationMembersTest.java":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/ws\/ChangelogAction.java":[{"add":["21","import com.google.common.base.Optional;","22","import com.google.common.collect.ImmutableList;","23","import com.google.common.collect.ImmutableMap;","43","import org.sonar.db.organization.OrganizationDto;","46","import org.sonar.server.user.UserSession;","50","import static com.google.common.base.Preconditions.checkState;","68","  private final UserSession userSession;","70","  public ChangelogAction(DbClient dbClient, IssueFinder issueFinder, AvatarResolver avatarFactory, UserSession userSession) {","74","    this.userSession = userSession;","163","      IssueDto issue = issueFinder.getByKey(dbSession, issueKey);","164","      if (isMember(dbSession, issue)) {","165","        this.changes = dbClient.issueChangeDao().selectChangelogByIssue(dbSession, issue.getKey());","166","        List<String> userUuids = changes.stream().filter(change -> change.userUuid() != null).map(FieldDiffs::userUuid).collect(MoreCollectors.toList());","167","        this.users = dbClient.userDao().selectByUuids(dbSession, userUuids).stream().collect(MoreCollectors.uniqueIndex(UserDto::getUuid));","168","        this.files = dbClient.componentDao().selectByUuids(dbSession, getFileUuids(changes)).stream().collect(MoreCollectors.uniqueIndex(ComponentDto::uuid, Function.identity()));","169","      } else {","170","        changes = ImmutableList.of();","171","        users = ImmutableMap.of();","172","        files = ImmutableMap.of();","173","      }","174","    }","175","","176","    private boolean isMember(DbSession dbSession, IssueDto issue) {","177","      Optional<ComponentDto> project = dbClient.componentDao().selectByUuid(dbSession, issue.getProjectUuid());","178","      checkState(project.isPresent(), \"Cannot find the project with uuid %s from issue.id %s\", issue.getProjectUuid(), issue.getId());","179","      java.util.Optional<OrganizationDto> organization = dbClient.organizationDao().selectByUuid(dbSession, project.get().getOrganizationUuid());","180","      checkState(organization.isPresent(), \"Cannot find the organization with uuid %s from issue.id %s\", project.get().getOrganizationUuid(), issue.getId());","181","      return userSession.hasMembership(organization.get());"],"delete":["63","  public ChangelogAction(DbClient dbClient, IssueFinder issueFinder, AvatarResolver avatarFactory) {","155","      IssueDto dbIssue = issueFinder.getByKey(dbSession, issueKey);","156","      this.changes = dbClient.issueChangeDao().selectChangelogByIssue(dbSession, dbIssue.getKey());","157","      List<String> userUuids = changes.stream().filter(change -> change.userUuid() != null).map(FieldDiffs::userUuid).collect(MoreCollectors.toList());","158","      this.users = dbClient.userDao().selectByUuids(dbSession, userUuids).stream().collect(MoreCollectors.uniqueIndex(UserDto::getUuid));","159","      this.files = dbClient.componentDao().selectByUuids(dbSession, getFileUuids(changes)).stream().collect(MoreCollectors.uniqueIndex(ComponentDto::uuid, Function.identity()));"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/tester\/AbstractMockUserSession.java":[{"add":["112","  protected boolean hasMembershipImpl(OrganizationDto organizationDto) {","113","    return organizationMembership.contains(organizationDto.getUuid());"],"delete":["112","  protected boolean hasMembershipImpl(OrganizationDto organization) {","113","    return organizationMembership.contains(organization.getUuid());"]}],"server\/sonar-db-core\/src\/main\/resources\/org\/sonar\/db\/version\/schema-h2.ddl":[{"add":["27","CREATE INDEX \"IX_ORG_MEMBERS_ON_USER_ID\" ON \"ORGANIZATION_MEMBERS\" (\"USER_ID\");"],"delete":[]}],"server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/issue\/ws\/SearchActionTestOnSonarCloud\/with_authors_facet.json":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/source\/ws\/LinesActionTest.java":[{"add":["32","import org.sonar.db.organization.OrganizationDto;","35","import org.sonar.db.user.UserDto;","44","import org.sonar.server.ws.WsTester.TestRequest;","62","  private ComponentDao componentDao = new ComponentDao();","63","  private ComponentDto privateProject;","64","  private OrganizationDto organization;","69","    HtmlSourceDecorator htmlSourceDecorator = mock(HtmlSourceDecorator.class);","70","    when(htmlSourceDecorator.getDecoratedSourceAsHtml(anyString(), anyString(), anyString())).then((Answer<String>)","71","      invocationOnMock -> \"<p>\" + invocationOnMock.getArguments()[0] + \"<\/p>\");","72","    SourceService sourceService = new SourceService(db.getDbClient(), htmlSourceDecorator);","75","    organization = db.organizations().insert();","76","    privateProject = ComponentTesting.newPrivateProjectDto(organization);","81","    ComponentDto file = insertFileWithData(FileSourceTesting.newFakeData(3).build(), privateProject);","82","    setUserWithValidPermission(file);","84","    TestRequest request = wsTester.newGetRequest(\"api\/sources\", \"lines\").setParam(\"uuid\", file.uuid());","90","    ComponentDto file = insertFile(privateProject);","91","    setUserWithValidPermission(file);","94","    wsTester.newGetRequest(\"api\/sources\", \"lines\").setParam(\"uuid\", file.uuid()).execute();","99","    ComponentDto file = insertFileWithData(FileSourceTesting.newFakeData(3).build(), privateProject);","100","    setUserWithValidPermission(file);","102","    wsTester","104","      .setParam(\"uuid\", file.uuid())","106","      .setParam(\"to\", \"3\")","107","      .execute()","108","      .assertJson(getClass(), \"show_paginated_lines.json\");","123","    userSession.logIn(\"login\")","124","      .addMembership(db.getDefaultOrganization())","125","      .addProjectPermission(UserRole.CODEVIEWER, project, file);","126","","127","    wsTester.newGetRequest(\"api\/sources\", \"lines\")","129","      .setParam(\"branch\", file.getBranch())","130","      .execute()","131","      .assertJson(getClass(), \"show_source.json\");","146","    userSession.logIn(\"login\")","147","      .addMembership(db.getDefaultOrganization())","148","      .addProjectPermission(UserRole.CODEVIEWER, project, file);","149","","150","    wsTester.newGetRequest(\"api\/sources\", \"lines\")","152","      .setParam(\"pullRequest\", file.getPullRequest())","153","      .execute()","154","      .assertJson(getClass(), \"show_source.json\");","162","    TestRequest request = wsTester.newGetRequest(\"api\/sources\", \"lines\");","171","    TestRequest request = wsTester.newGetRequest(\"api\/sources\", \"lines\").setParam(\"key\", \"Foo.java\");","180","    TestRequest request = wsTester.newGetRequest(\"api\/sources\", \"lines\").setParam(\"uuid\", \"ABCD\");","186","    ComponentDto file = newFileDto(privateProject).setDbKey(\"file-key\").setEnabled(false);","187","    db.components().insertComponents(privateProject, file);","188","    setUserWithValidPermission(file);","193","    TestRequest request = wsTester.newGetRequest(\"api\/sources\", \"lines\").setParam(\"key\", \"file-key\");","199","    ComponentDto file = insertFileWithData(FileSourceTesting.newFakeData(1).build(), privateProject);","204","      .setParam(\"uuid\", file.uuid())","210","    ComponentDto file = insertFileWithData(FileSourceTesting.newFakeData(1).build(), privateProject);","211","    setUserWithValidPermission(file);","213","    wsTester","215","      .setParam(\"uuid\", file.uuid())","216","      .execute()","217","      .assertJson(getClass(), \"display_deprecated_fields.json\");","223","    ComponentDto file = insertFileWithData(dataBuilder.addLines(newLineBuilder()","232","      .setDeprecatedItCoveredConditions(3)).build(), privateProject);","233","    setUserWithValidPermission(file);","235","    wsTester","237","      .setParam(\"uuid\", file.uuid())","238","      .execute()","239","      .assertJson(getClass(), \"convert_deprecated_data.json\");","245","    ComponentDto file = insertFileWithData(dataBuilder.addLines(newLineBuilder()","251","      .setDeprecatedItCoveredConditions(3)).build(), privateProject);","252","    setUserWithValidPermission(file);","254","    TestRequest request = wsTester","256","      .setParam(\"uuid\", file.uuid());","264","    ComponentDto file = insertFileWithData(dataBuilder.addLines(newLineBuilder()","267","      .setDeprecatedItCoveredConditions(3)).build(), privateProject);","268","    setUserWithValidPermission(file);","270","    TestRequest request = wsTester","272","      .setParam(\"uuid\", file.uuid());","337","  @Test","338","  public void hide_scmAuthors_if_not_member_of_organization() throws Exception {","339","    OrganizationDto org = db.organizations().insert();","340","    ComponentDto publicProject = db.components().insertPublicProject(org);","341","    userSession.registerComponents(publicProject);","342","","343","    DbFileSources.Data data = DbFileSources.Data.newBuilder()","344","      .addLines(newLineBuilder().setScmAuthor(\"isaac@asimov.com\"))","345","      .build();","346","","347","    ComponentDto file = insertFileWithData(data, publicProject);","348","","349","    wsTester.newGetRequest(\"api\/sources\", \"lines\")","350","      .setParam(\"uuid\", file.uuid())","351","      .execute()","352","      .assertJson(getClass(), \"hide_scmAuthors.json\");","353","  }","354","","355","  @Test","356","  public void show_scmAuthors_if_member_of_organization() throws Exception {","357","    OrganizationDto org = db.organizations().insert();","358","    ComponentDto publicProject = db.components().insertPublicProject(org);","359","    UserDto user = db.users().insertUser();","360","    userSession.logIn(user)","361","      .registerComponents(publicProject)","362","      .addMembership(org);","363","","364","    DbFileSources.Data data = DbFileSources.Data.newBuilder()","365","      .addLines(newLineBuilder().setScmAuthor(\"isaac@asimov.com\"))","366","      .build();","367","","368","    ComponentDto file = insertFileWithData(data, publicProject);","369","","370","    wsTester.newGetRequest(\"api\/sources\", \"lines\")","371","      .setParam(\"uuid\", file.uuid())","372","      .execute()","373","      .assertJson(getClass(), \"show_scmAuthors.json\");","374","  }","375","","376","  private ComponentDto insertFileWithData(DbFileSources.Data fileData, ComponentDto project) {","377","    ComponentDto file = insertFile(project);","379","      .setProjectUuid(project.projectUuid())","380","      .setFileUuid(file.uuid())","383","    return file;","386","  private void setUserWithValidPermission(ComponentDto file) {","387","    userSession.logIn(\"login\")","388","      .addProjectPermission(UserRole.CODEVIEWER, privateProject, file)","389","      .addMembership(organization);","392","  private ComponentDto insertFile(ComponentDto project) {","393","    ComponentDto file = newFileDto(project);","394","    componentDao.insert(db.getSession(), file);","396","    return file;"],"delete":["21","import java.io.IOException;","26","import org.mockito.invocation.InvocationOnMock;","54","  private static final String PROJECT_UUID = \"abcd\";","55","  private static final String FILE_UUID = \"efgh\";","56","  private static final String FILE_KEY = \"Foo.java\";","57","","60","","63","","67","  private SourceService sourceService;","68","  private HtmlSourceDecorator htmlSourceDecorator;","69","  private ComponentDao componentDao;","70","","71","  private ComponentDto project;","72","  private ComponentDto file;","73","","78","    htmlSourceDecorator = mock(HtmlSourceDecorator.class);","79","    when(htmlSourceDecorator.getDecoratedSourceAsHtml(anyString(), anyString(), anyString())).then(new Answer<String>() {","80","      @Override","81","      public String answer(InvocationOnMock invocationOnMock) {","82","        return \"<p>\" + invocationOnMock.getArguments()[0] + \"<\/p>\";","83","      }","84","    });","85","    sourceService = new SourceService(db.getDbClient(), htmlSourceDecorator);","86","    componentDao = new ComponentDao();","89","    project = ComponentTesting.newPrivateProjectDto(db.organizations().insert(), PROJECT_UUID);","90","    file = newFileDto(project, null, FILE_UUID).setDbKey(FILE_KEY);","95","    insertFileWithData(FileSourceTesting.newFakeData(3).build());","96","    setUserWithValidPermission();","98","    WsTester.TestRequest request = wsTester.newGetRequest(\"api\/sources\", \"lines\").setParam(\"uuid\", FILE_UUID);","104","    setUserWithValidPermission();","105","    insertFile();","108","    wsTester.newGetRequest(\"api\/sources\", \"lines\").setParam(\"uuid\", FILE_UUID).execute();","113","    setUserWithValidPermission();","114","    insertFileWithData(FileSourceTesting.newFakeData(3).build());","116","    WsTester.TestRequest request = wsTester","118","      .setParam(\"uuid\", FILE_UUID)","120","      .setParam(\"to\", \"3\");","121","    request.execute().assertJson(getClass(), \"show_paginated_lines.json\");","135","    userSession.logIn(\"login\").addProjectPermission(UserRole.CODEVIEWER, project, file);","137","    WsTester.TestRequest request = wsTester.newGetRequest(\"api\/sources\", \"lines\")","139","      .setParam(\"branch\", file.getBranch());","140","","141","    request.execute().assertJson(getClass(), \"show_source.json\");","155","    userSession.logIn(\"login\").addProjectPermission(UserRole.CODEVIEWER, project, file);","157","    WsTester.TestRequest request = wsTester.newGetRequest(\"api\/sources\", \"lines\")","159","      .setParam(\"pullRequest\", file.getPullRequest());","160","","161","    request.execute().assertJson(getClass(), \"show_source.json\");","169","    WsTester.TestRequest request = wsTester.newGetRequest(\"api\/sources\", \"lines\");","178","    WsTester.TestRequest request = wsTester.newGetRequest(\"api\/sources\", \"lines\").setParam(\"key\", FILE_KEY);","187","    WsTester.TestRequest request = wsTester.newGetRequest(\"api\/sources\", \"lines\").setParam(\"uuid\", \"ABCD\");","193","    ComponentDto file = newFileDto(project).setDbKey(\"file-key\").setEnabled(false);","194","    db.components().insertComponents(project, file);","195","    setUserWithValidPermission();","200","    WsTester.TestRequest request = wsTester.newGetRequest(\"api\/sources\", \"lines\").setParam(\"key\", \"file-key\");","206","    insertFileWithData(FileSourceTesting.newFakeData(1).build());","211","      .setParam(\"uuid\", FILE_UUID)","217","    insertFileWithData(FileSourceTesting.newFakeData(1).build());","218","    setUserWithValidPermission();","220","    WsTester.TestRequest request = wsTester","222","      .setParam(\"uuid\", FILE_UUID);","223","","224","    request.execute().assertJson(getClass(), \"display_deprecated_fields.json\");","230","    insertFileWithData(dataBuilder.addLines(newLineBuilder()","239","      .setDeprecatedItCoveredConditions(3)).build());","240","    setUserWithValidPermission();","242","    WsTester.TestRequest request = wsTester","244","      .setParam(\"uuid\", FILE_UUID);","245","","246","    request.execute().assertJson(getClass(), \"convert_deprecated_data.json\");","252","    insertFileWithData(dataBuilder.addLines(newLineBuilder()","258","      .setDeprecatedItCoveredConditions(3)).build());","259","    setUserWithValidPermission();","261","    WsTester.TestRequest request = wsTester","263","      .setParam(\"uuid\", FILE_UUID);","271","    insertFileWithData(dataBuilder.addLines(newLineBuilder()","274","      .setDeprecatedItCoveredConditions(3)).build());","275","    setUserWithValidPermission();","277","    WsTester.TestRequest request = wsTester","279","      .setParam(\"uuid\", FILE_UUID);","344","  private void insertFileWithData(DbFileSources.Data fileData) throws IOException {","345","    insertFile();","347","      .setProjectUuid(PROJECT_UUID)","348","      .setFileUuid(FILE_UUID)","353","  private void setUserWithValidPermission() {","354","    userSession.logIn(\"login\").addProjectPermission(UserRole.CODEVIEWER, project, file);","357","  private void insertFile() {","358","    componentDao.insert(db.getSession(), project, file);"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/Sidebar.tsx":[{"add":["48","  hideAuthorFacet?: boolean;","65","    const { component, facets, hideAuthorFacet, openFacets, query } = this.props;","72","    const displayAuthorFacet = !hideAuthorFacet && (!component || component.qualifier !== 'DEV');"],"delete":["64","    const { component, facets, openFacets, query } = this.props;","71","    const displayAuthorFacet = !component || component.qualifier !== 'DEV';"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/user\/DoPrivileged.java":[{"add":["126","      public boolean hasMembershipImpl(OrganizationDto organizationDto) {"],"delete":["126","      public boolean hasMembershipImpl(OrganizationDto organization) {"]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v73\/DbVersion73Test.java":[{"add":["37","    verifyMigrationCount(underTest, 13);"],"delete":["37","    verifyMigrationCount(underTest, 12);"]}],"server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/source\/ws\/LinesActionTest\/hide_scmAuthors.json":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/utils.ts":[{"add":["160","  if (!facets) {","161","    return {};","162","  }","163",""],"delete":[]}],"server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/issue\/ws\/SearchActionTestOnSonarCloud\/no_authors_facet.json":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/ws\/SearchResponseFormat.java":[{"add":["84","  public SearchWsResponse formatSearch(Set<SearchAdditionalField> fields, SearchResponseData data, Paging paging, @Nullable Facets facets) {","196","","197","    \/\/ Filter author only if user is member of the organization","198","    if (data.getUserOrganizationUuids().contains(component.getOrganizationUuid())) {","199","      issueBuilder.setAuthor(nullToEmpty(dto.getAuthorLogin()));","200","    }"],"delete":["84","  public SearchWsResponse formatSearch(Set<SearchAdditionalField> fields, SearchResponseData data,","85","    Paging paging, @Nullable Facets facets) {","197","    issueBuilder.setAuthor(nullToEmpty(dto.getAuthorLogin()));"]}],"server\/sonar-web\/src\/main\/js\/apps\/explore\/ExploreIssues.tsx":[{"add":["28","  return <AppContainer hideAuthorFacet={true} myIssues={false} {...props} \/>;"],"delete":["28","  return <AppContainer myIssues={false} {...props} \/>;"]}],"server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/source\/ws\/LinesActionTest\/show_scmAuthors.json":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/AppContainer.tsx":[{"add":["24","import { CurrentUser, Organization } from '..\/..\/..\/app\/types';","26","import {","27","  getCurrentUser,","28","  areThereCustomOrganizations,","29","  getMyOrganizations","30","} from '..\/..\/..\/store\/rootReducer';","38","  userOrganizations: Organization[];","42","  currentUser: getCurrentUser(state),","43","  userOrganizations: getMyOrganizations(state)","91","  hideAuthorFacet?: boolean;"],"delete":["24","import { CurrentUser } from '..\/..\/..\/app\/types';","26","import { getCurrentUser, areThereCustomOrganizations } from '..\/..\/..\/store\/rootReducer';","37","  currentUser: getCurrentUser(state)"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/LineSCM-test.tsx":[{"add":["34","  const line = { line: 3, scmRevision: 'foo', scmAuthor: 'foo', scmDate: '2017-01-01' };","42","  const line = { line: 3, scmRevision: 'foo', scmAuthor: 'foo', scmDate: '2017-01-01' };","43","  const previousLine = { line: 2, scmRevision: 'foo', scmAuthor: 'foo', scmDate: '2017-01-01' };","44","  const wrapper = shallow(","45","    <LineSCM line={line} onPopupToggle={jest.fn()} popupOpen={false} previousLine={previousLine} \/>","46","  );","47","  expect(wrapper).toMatchSnapshot();","48","});","49","","50","it('renders ellipsis when no author info', () => {","51","  const line = { line: 3, scmRevision: 'foo', scmDate: '2017-01-01' };","52","  const previousLine = { line: 2, scmRevision: 'bar', scmDate: '2017-01-01' };"],"delete":["34","  const line = { line: 3, scmAuthor: 'foo', scmDate: '2017-01-01' };","42","  const line = { line: 3, scmAuthor: 'foo', scmDate: '2017-01-01' };","43","  const previousLine = { line: 2, scmAuthor: 'foo', scmDate: '2017-01-01' };"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/LineSCM.tsx":[{"add":["51","      <div className=\"source-line-scm-inner\" data-author={line.scmAuthor || '\u2026'} \/>","78","  if (p != null && s.scmRevision != null && p.scmRevision != null) {","79","    changed = s.scmRevision !== p.scmRevision || s.scmDate !== p.scmDate;"],"delete":["51","      <div className=\"source-line-scm-inner\" data-author={line.scmAuthor} \/>","78","  if (p != null && s.scmAuthor != null && p.scmAuthor != null) {","79","    changed = s.scmAuthor !== p.scmAuthor || s.scmDate !== p.scmDate;"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/user\/TestUserSessionFactory.java":[{"add":["120","    public boolean hasMembershipImpl(OrganizationDto organizationDto) {"],"delete":["120","    public boolean hasMembershipImpl(OrganizationDto organization) {"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/authentication\/SafeModeUserSession.java":[{"add":["49","  @Override","50","  protected boolean hasMembershipImpl(OrganizationDto organizationDto) {","51","    return false;","52","  }","53",""],"delete":["92","","93","  @Override","94","  public boolean hasMembershipImpl(OrganizationDto organization) {","95","    return false;","96","  }"]}],"server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/issue\/ws\/SearchActionTestOnSonarCloud\/no_author_and_no_authors_facet.json":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionComponentsTest.java":[{"add":["27","import org.sonar.api.config.internal.MapSettings;","40","import org.sonar.db.user.UserDto;","47","import org.sonar.server.issue.index.IssueQueryFactory;","109","  private WsActionTester ws = new WsActionTester(new SearchAction(userSession, issueIndex, issueQueryFactory, searchResponseLoader, searchResponseFormat,","110","    new MapSettings().asConfig(), System2.INSTANCE, dbClient));","648","  public void search_by_author() {","657","    UserDto user = db.users().insertUser();","658","    db.organizations().addMember(db.getDefaultOrganization(), user);","659","    userSession.logIn(user).addMembership(db.getDefaultOrganization());","660",""],"delete":["41","import org.sonar.server.issue.index.IssueQueryFactory;","107","  private WsActionTester ws = new WsActionTester(new SearchAction(userSession, issueIndex, issueQueryFactory, searchResponseLoader, searchResponseFormat, System2.INSTANCE,","108","    dbClient));","646","  public void search_by_author() throws Exception {"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/App.tsx":[{"add":["54","import {","55","  Component,","56","  CurrentUser,","57","  Issue,","58","  Paging,","59","  BranchLike,","60","  Organization","61","} from '..\/..\/..\/app\/types';","101","  hideAuthorFacet?: boolean;","106","  userOrganizations: Organization[];","418","    const { component } = this.props;","429","    const organizationKey =","430","      (component && component.organization) ||","431","      (this.props.organization && this.props.organization.key);","432","","439","      organization: organizationKey,","875","    const { component, currentUser, userOrganizations } = this.props;","878","    const organizationKey =","879","      (component && component.organization) ||","880","      (this.props.organization && this.props.organization.key);","881","","882","    const userOrganization =","883","      !isSonarCloud() ||","884","      userOrganizations.find(o => {","885","        return o.key === organizationKey;","886","      });","887","    const hideAuthorFacet =","888","      this.props.hideAuthorFacet || (isSonarCloud() && this.props.myIssues) || !userOrganization;","889","","903","          hideAuthorFacet={hideAuthorFacet}"],"delete":["54","import { Component, CurrentUser, Issue, Paging, BranchLike } from '..\/..\/..\/app\/types';","409","    const { component, organization } = this.props;","426","      organization: organization && organization.key,","862","    const { component, currentUser } = this.props;"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/SCMPopup.tsx":[{"add":["20","import * as classNames from 'classnames';","31","  const hasAuthor = line.scmAuthor !== '';","35","        {hasAuthor && <div>{line.scmAuthor}<\/div>}","37","          <div className={classNames({ 'spacer-top': hasAuthor })}>"],"delete":["33","        <div>{line.scmAuthor}<\/div>","35","          <div className=\"spacer-top\">"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/__snapshots__\/LineSCM-test.tsx.snap":[{"add":["20","            \"scmRevision\": \"foo\",","78","            \"scmRevision\": \"foo\",","91","","92","exports[`renders ellipsis when no author info 1`] = `","93","<td","94","  className=\"source-meta source-line-scm\"","95","  data-line-number={3}","96","  onClick={[Function]}","97","  role=\"button\"","98","  tabIndex={0}","99",">","100","  <Toggler","101","    onRequestClose={[Function]}","102","    open={false}","103","    overlay={","104","      <SCMPopup","105","        line={","106","          Object {","107","            \"line\": 3,","108","            \"scmDate\": \"2017-01-01\",","109","            \"scmRevision\": \"foo\",","110","          }","111","        }","112","      \/>","113","    }","114","  >","115","    <div","116","      className=\"source-line-scm-inner\"","117","      data-author=\"\u2026\"","118","    \/>","119","  <\/Toggler>","120","<\/td>","121","`;"],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/source\/ws\/LinesAction.java":[{"add":["35","import org.sonar.db.organization.OrganizationDto;","147","        writeSource(lines, json, isMemberOfOrganization(dbSession, file));","153","  private boolean isMemberOfOrganization(DbSession dbSession, ComponentDto file) {","154","    OrganizationDto organizationDto = dbClient.organizationDao().selectByUuid(dbSession, file.getOrganizationUuid())","155","      .orElseThrow(() -> new IllegalStateException(String.format(\"Organization with uuid '%s' not found\", file.getOrganizationUuid())));","156","    return !userSession.hasMembership(organizationDto);","157","  }","158","","174","  private void writeSource(Iterable<DbFileSources.Line> lines, JsonWriter json, boolean filterScmAuthors) {","181","      if (!filterScmAuthors) {","182","        json.prop(\"scmAuthor\", line.getScmAuthor());","183","      }"],"delete":["140","","147","        writeSource(lines, json);","168","  private void writeSource(Iterable<DbFileSources.Line> lines, JsonWriter json) {","174","        .prop(\"scmAuthor\", line.getScmAuthor())"]}],"server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v73\/AddIndexOnOrganizationMembersTest\/organization_members.sql":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/ChangelogActionTest.java":[{"add":["34","import org.sonar.db.organization.OrganizationDto;","70","  private WsActionTester tester = new WsActionTester(new ChangelogAction(db.getDbClient(), new IssueFinder(db.getDbClient(), userSession), new AvatarResolverImpl(), userSession));","82","    userSession.logIn(\"john\")","83","      .addMembership(db.getDefaultOrganization())","84","      .addProjectPermission(USER, project, file);","98","  public void return_empty_changelog_when_not_member() {","99","    UserDto user = insertUser();","100","    IssueDto issueDto = db.issues().insertIssue(newIssue());","101","    userSession.logIn(\"john\")","102","      .addProjectPermission(USER, project, file);","103","    db.issues().insertFieldDiffs(issueDto, new FieldDiffs().setUserUuid(user.getUuid()).setDiff(\"severity\", \"MAJOR\", \"BLOCKER\").setCreationDate(new Date()));","104","","105","    ChangelogWsResponse result = call(issueDto.getKey());","106","","107","    assertThat(result.getChangelogList()).hasSize(0);","108","  }","109","","110","  @Test","113","    OrganizationDto org = db.organizations().insert();","114","    ComponentDto project = db.components().insertPrivateProject(org);","118","    userSession.logIn(\"john\")","119","      .addMembership(org)","120","      .addProjectPermission(USER, project, file);","135","    userSession.logIn(\"john\")","136","      .addMembership(db.getDefaultOrganization())","137","      .addProjectPermission(USER, project, file);","151","    userSession.logIn(\"john\")","152","      .addMembership(db.getDefaultOrganization())","153","      .addProjectPermission(USER, project, file);","167","    userSession.logIn(\"john\")","168","      .addMembership(db.getDefaultOrganization())","169","      .addProjectPermission(USER, project, file);","184","    userSession.logIn(\"john\")","185","      .addMembership(db.getDefaultOrganization())","186","      .addProjectPermission(USER, project, file);","202","    userSession.logIn(\"john\")","203","      .addMembership(db.getDefaultOrganization())","204","      .addProjectPermission(USER, project, file);","220","    userSession.logIn(\"john\")","221","      .addMembership(db.getDefaultOrganization())","222","      .addProjectPermission(USER, project, file);","235","    userSession.logIn(\"john\")","236","      .addMembership(db.getDefaultOrganization())","237","      .addProjectPermission(USER, project, file);","250","    userSession.logIn(\"john\")","251","      .addMembership(db.getDefaultOrganization())","252","      .addProjectPermission(USER, project, file);","266","    userSession.logIn(\"john\")","267","      .addMembership(db.getDefaultOrganization())","268","      .addProjectPermission(USER, project, file);","300","    userSession.logIn(\"john\")","301","      .addMembership(db.getDefaultOrganization())","302","      .addProjectPermission(USER, project, file);"],"delete":["69","  private WsActionTester tester = new WsActionTester(new ChangelogAction(db.getDbClient(), new IssueFinder(db.getDbClient(), userSession), new AvatarResolverImpl()));","81","    userSession.logIn(\"john\").addProjectPermission(USER, project, file);","97","    ComponentDto project = db.components().insertPrivateProject(db.organizations().insert());","101","    userSession.logIn(\"john\").addProjectPermission(USER, project, file1, file2);","116","    userSession.logIn(\"john\").addProjectPermission(USER, project, file);","130","    userSession.logIn(\"john\").addProjectPermission(USER, project, file);","144","    userSession.logIn(\"john\").addProjectPermission(USER, project, file);","159","    userSession.logIn(\"john\").addProjectPermission(USER, project, file);","175","    userSession.logIn(\"john\").addProjectPermission(USER, project, file);","191","    userSession.logIn(\"john\").addProjectPermission(USER, project, file);","204","    userSession.logIn(\"john\").addProjectPermission(USER, project, file);","217","    userSession.logIn(\"john\").addProjectPermission(USER, project, file);","231","    userSession.logIn(\"john\").addProjectPermission(USER, project, file);","263","    userSession.logIn(\"john\").addProjectPermission(USER, project, file);"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/user\/ThreadLocalUserSession.java":[{"add":["168","  public boolean hasMembership(OrganizationDto organizationDto) {","169","    return get().hasMembership(organizationDto);"],"delete":["168","  public boolean hasMembership(OrganizationDto organization) {","169","    return get().hasMembership(organization);"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/user\/AbstractUserSession.java":[{"add":["77","  public final boolean hasMembership(OrganizationDto organizationDto) {","78","    return isRoot() || hasMembershipImpl(organizationDto);","81","  protected abstract boolean hasMembershipImpl(OrganizationDto organizationDto);"],"delete":["77","  public final boolean hasMembership(OrganizationDto organization) {","78","    return isRoot() || hasMembershipImpl(organization);","81","  protected abstract boolean hasMembershipImpl(OrganizationDto organization);"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/ws\/SearchResponseData.java":[{"add":["59","  private final Set<String> userOrganizationUuids = new HashSet<>();","176","  public void setUserOrganizationUuids(Set<String> organizationUuids) {","177","    this.userOrganizationUuids.addAll(organizationUuids);","178","  }","179","","180","  public Set<String> getUserOrganizationUuids() {","181","    return this.userOrganizationUuids;","182","  }","183",""],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/user\/ServerUserSession.java":[{"add":["230","  public boolean hasMembershipImpl(OrganizationDto organizationDto) {","231","    return isMember(organizationDto.getUuid());","234","  private boolean isMember(String organizationUuid) {","241",""],"delete":["230","  public boolean hasMembershipImpl(OrganizationDto organization) {","231","    return isMember(organization);","234","  private boolean isMember(OrganizationDto organization) {","241","    String organizationUuid = organization.getUuid();"]}],"server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/issue\/ws\/SearchActionTest\/author_is_hidden.json":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/tester\/AnonymousMockUserSession.java":[{"add":["67","  public boolean hasMembershipImpl(OrganizationDto organizationDto) {"],"delete":["67","  public boolean hasMembershipImpl(OrganizationDto organization) {"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionTestOnSonarCloud.java":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v73\/AddIndexOnOrganizationMembers.java":[{"add":[],"delete":[]}]}},"ac7edbe5890ae7921593dda7520157dca652860d":{"changes":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/DefaultInputFile.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/DefaultIndexedFile.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/mediumtest\/fs\/FileSystemMediumTest.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/mediumtest\/fs\/ProjectBuilderMediumTest.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/filesystem\/InputComponentStore.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/filesystem\/FileIndexer.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/scan\/filesystem\/InputFileBuilderTest.java":"MODIFY","plugins\/sonar-xoo-plugin\/src\/main\/java\/org\/sonar\/xoo\/extensions\/XooProjectBuilder.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/scan\/issue\/filter\/FilterableIssue.java":"MODIFY","sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/batch\/sensor\/cpd\/internal\/DefaultCpdTokensTest.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/DefaultFileLinesContextTest.java":"MODIFY","sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/batch\/fs\/internal\/DefaultInputFileTest.java":"MODIFY"},"diff":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/DefaultInputFile.java":[{"add":["127","  public String getModuleRelativePath() {","128","    return indexedFile.getModuleRelativePath();","129","  }","130","","131","  public String getProjectRelativePath() {","132","    return indexedFile.getProjectRelativePath();","133","  }","134",""],"delete":[]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/DefaultIndexedFile.java":[{"add":["72","  public String getModuleRelativePath() {","73","    return moduleRelativePath;","74","  }","75","","76","  public String getProjectRelativePath() {","77","    return projectRelativePath;","78","  }","79",""],"delete":[]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/mediumtest\/fs\/FileSystemMediumTest.java":[{"add":["564","    thrown.expectMessage(\"File src\/sample.xoo can't be indexed twice. Please check that inclusion\/exclusion patterns produce disjoint sets for main and test files\");","570","  }","571","","572","  \/\/ SONAR-9574","573","  @Test","574","  public void failForDuplicateInputFileInDifferentModules() throws IOException {","575","    File srcDir = new File(baseDir, \"module1\/src\");","576","    srcDir.mkdir();","577","","578","    File xooFile = new File(srcDir, \"sample.xoo\");","579","    FileUtils.write(xooFile, \"Sample xoo\\ncontent\");","580","","581","    thrown.expect(MessageException.class);","582","    thrown.expectMessage(\"File module1\/src\/sample.xoo can't be indexed twice. Please check that inclusion\/exclusion patterns produce disjoint sets for main and test files\");","583","    tester.newTask()","584","      .properties(builder","585","        .put(\"sonar.sources\", \"module1\/src\")","586","        .put(\"sonar.modules\", \"module1\")","587","        .put(\"module1.sonar.sources\", \"src\")","588","        .build())","589","      .execute();"],"delete":["564","    thrown.expectMessage(\"can't be indexed twice. Please check that inclusion\/exclusion patterns produce disjoint sets for main and test files\");","715","  @Test","716","  public void detectDuplicatedFilesInDifferentModules() throws IOException {","717","    File srcDir = new File(baseDir, \"module1\/src\");","718","    srcDir.mkdir();","719","","720","    File xooFile = new File(srcDir, \"sample.xoo\");","721","    FileUtils.write(xooFile, \"Sample xoo\\ncontent\");","722","","723","    TaskResult result = tester.newTask()","724","      .properties(builder","725","        .put(\"sonar.sources\", \"module1\/src\")","726","        .put(\"sonar.modules\", \"module1\")","727","        .put(\"module1.sonar.sources\", \"src\")","728","        .build())","729","      .execute();","730","","731","    assertThat(result.inputFiles()).hasSize(1);","732","  }"]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/mediumtest\/fs\/ProjectBuilderMediumTest.java":[{"add":["192","    File baseDir = temp.newFolder();"],"delete":["192","    File baseDir = temp.getRoot();"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/filesystem\/InputComponentStore.java":[{"add":["112","    inputFileCache.remove(file.moduleKey(), file.getModuleRelativePath());","125","    inputFileCache.put(file.moduleKey(), file.getModuleRelativePath(), inputFile);","126","    globalInputFileCache.put(file.getProjectRelativePath(), inputFile);","144","    \/\/ FIXME an InputDir can be already indexed by another module"],"delete":["112","    inputFileCache.remove(file.moduleKey(), inputFile.relativePath());","125","    inputFileCache.put(file.moduleKey(), inputFile.relativePath(), inputFile);","126","    globalInputFileCache.put(getProjectRelativePath(file), inputFile);","149","  private String getProjectRelativePath(DefaultInputFile file) {","150","    return PathResolver.relativePath(getProjectBaseDir(), file.path());","151","  }","152",""]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/filesystem\/FileIndexer.java":[{"add":["184","      indexFileAndParentDir(inputFile, parentRelativePath);","270","    private AtomicInteger indexedCount = new AtomicInteger(0);","273","    void markAsIndexed(DefaultInputFile inputFile) {","274","      if (componentStore.getFile(inputFile.getProjectRelativePath()) != null) {","278","      int count = indexedCount.incrementAndGet();","279","      progressReport.message(count + \" \" + pluralizeFiles(count) + \" indexed...  (last one was \" + inputFile.relativePath() + \")\");","291","      return indexedCount.get();"],"delete":["33","import java.util.HashSet;","35","import java.util.Set;","45","import org.sonar.api.batch.fs.IndexedFile;","186","      indexFileAndParentDir(inputFile, parentRelativePath);","273","    private final Set<Path> indexed = new HashSet<>();","276","    void markAsIndexed(IndexedFile inputFile) {","277","      if (indexed.contains(inputFile.path())) {","281","      indexed.add(inputFile.path());","282","      progressReport.message(indexed.size() + \" \" + pluralizeFiles(indexed.size()) + \" indexed...  (last one was \" + inputFile.relativePath() + \")\");","294","      return indexed.size();"]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/scan\/filesystem\/InputFileBuilderTest.java":[{"add":["23","import java.nio.file.Files;","59","    Path moduleBaseDir = baseDir.resolve(\"module1\");","60","    Files.createDirectories(moduleBaseDir);","62","      .setBaseDir(moduleBaseDir.toFile())"],"delete":["59","      .setBaseDir(baseDir.resolve(\"module1\").toFile())"]}],"plugins\/sonar-xoo-plugin\/src\/main\/java\/org\/sonar\/xoo\/extensions\/XooProjectBuilder.java":[{"add":["21","import java.io.File;","40","    root.resetSources();"],"delete":["25","import java.io.File;","26",""]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/scan\/issue\/filter\/FilterableIssue.java":[{"add":["55","  \/**","56","   * @deprecated since 6.6 useless","57","   *\/","58","  @Deprecated"],"delete":["22","","25",""]}],"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/batch\/sensor\/cpd\/internal\/DefaultCpdTokensTest.java":[{"add":["147","      assertThat(e).hasMessage(\"Tokens of file src\/Foo.java should be provided in order.\\n\" +"],"delete":["25","import org.sonar.api.config.Settings;","148","      assertThat(e).hasMessage(\"Tokens of file [moduleKey=foo, relative=src\/Foo.java, basedir=foo] should be provided in order.\\n\" +"]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/DefaultFileLinesContextTest.java":[{"add":["97","    thrown.expectMessage(\"Line number should be positive for file src\/foo.php.\");","103","    thrown.expectMessage(\"Line 4 is out of range for file src\/foo.php. File has 3 lines\");"],"delete":["97","    thrown.expectMessage(\"Line number should be positive for file [moduleKey=foo, relative=src\/foo.php, basedir=foo].\");","103","    thrown.expectMessage(\"Line 4 is out of range for file [moduleKey=foo, relative=src\/foo.php, basedir=foo]. File has 3 lines\");"]}],"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/batch\/fs\/internal\/DefaultInputFileTest.java":[{"add":["86","    assertThat(inputFile.getModuleRelativePath()).isEqualTo(MODULE_RELATIVE_PATH);","87","    assertThat(inputFile.getProjectRelativePath()).isEqualTo(PROJECT_RELATIVE_PATH);","88","","89","    assertThat(inputFile.relativePath()).isEqualTo(MODULE_RELATIVE_PATH);","90","    assertThat(new File(inputFile.relativePath())).isRelative();","93","    assertThat(new File(inputFile.relativePath())).isRelative();"],"delete":["76","    assertThat(inputFile.relativePath()).isEqualTo(MODULE_RELATIVE_PATH);","77","    assertThat(new File(inputFile.relativePath())).isRelative();"]}]}},"f3de142860a4ebcc91f9f80771964a105f8ed982":{"changes":{"tests\/src\/test\/java\/org\/sonarqube\/tests\/projectSearch\/LeakProjectsPageTest.java":"MODIFY","sonar-core\/src\/main\/java\/org\/sonar\/core\/timemachine\/Periods.java":"MODIFY","tests\/src\/test\/java\/org\/sonarqube\/tests\/projectSearch\/SearchProjectsTest.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v67\/MigratePreviousAnalysisToPreviousVersion.java":"ADD","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/issue\/NewEffortAggregatorTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/step\/LoadPeriodsStepTest.java":"MODIFY","tests\/src\/test\/java\/org\/sonarqube\/tests\/measure\/TimeMachineTest.java":"MODIFY","tests\/src\/test\/java\/org\/sonarqube\/tests\/measure\/MeasuresWsTest.java":"MODIFY","server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v67\/MigratePreviousAnalysisToPreviousVersionTest\/properties.sql":"ADD","tests\/src\/test\/java\/org\/sonarqube\/tests\/qualityGate\/QualityGateUiTest.java":"MODIFY","tests\/src\/test\/java\/org\/sonarqube\/tests\/qualityModel\/TechnicalDebtAndIssueNewMeasuresTest.java":"MODIFY","tests\/src\/test\/java\/org\/sonarqube\/tests\/qualityGate\/QualityGateOnRatingMeasuresTest.java":"MODIFY","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v67\/MigratePreviousAnalysisToPreviousVersionTest.java":"ADD","tests\/src\/test\/java\/org\/sonarqube\/tests\/issue\/NewIssuesMeasureTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/step\/PeriodResolver.java":"MODIFY","tests\/src\/test\/java\/org\/sonarqube\/tests\/measure\/DifferentialPeriodsTest.java":"MODIFY","tests\/src\/test\/java\/org\/sonarqube\/tests\/qualityGate\/QualityGateNotificationTest.java":"MODIFY","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v67\/DbVersion67Test.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v67\/DbVersion67.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/step\/ReportPersistAnalysisStepTest.java":"MODIFY","sonar-core\/src\/test\/java\/org\/sonar\/core\/timemachine\/PeriodsTest.java":"MODIFY","tests\/src\/test\/java\/org\/sonarqube\/tests\/qualityModel\/NewDebtRatioMeasureTest.java":"MODIFY"},"diff":{"tests\/src\/test\/java\/org\/sonarqube\/tests\/projectSearch\/LeakProjectsPageTest.java":[{"add":["58","    setServerProperty(orchestrator, \"sonar.leak.period\", \"previous_version\");"],"delete":["58","    setServerProperty(orchestrator, \"sonar.leak.period\", \"previous_analysis\");"]}],"sonar-core\/src\/main\/java\/org\/sonar\/core\/timemachine\/Periods.java":[{"add":["148","      if (LEAK_PERIOD_MODE_PREVIOUS_VERSION.equals(periodProperty)) {"],"delete":["35","import static org.sonar.core.config.CorePropertyDefinitions.LEAK_PERIOD_MODE_PREVIOUS_ANALYSIS;","94","      case LEAK_PERIOD_MODE_PREVIOUS_ANALYSIS:","95","        return labelForPreviousAnalysis(date, shortLabel);","119","  private String labelForPreviousAnalysis(@Nullable String date, boolean shortLabel) {","120","    if (date == null) {","121","      return label(\"since_previous_analysis\", shortLabel);","122","    }","123","    return label(\"since_previous_analysis_detailed\", shortLabel, date);","124","  }","125","","158","      if (LEAK_PERIOD_MODE_PREVIOUS_ANALYSIS.equals(periodProperty) || LEAK_PERIOD_MODE_PREVIOUS_VERSION.equals(periodProperty)) {"]}],"tests\/src\/test\/java\/org\/sonarqube\/tests\/projectSearch\/SearchProjectsTest.java":[{"add":["222","    setServerProperty(orchestrator, \"sonar.leak.period\", \"previous_version\");"],"delete":["222","    setServerProperty(orchestrator, \"sonar.leak.period\", \"previous_analysis\");"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v67\/MigratePreviousAnalysisToPreviousVersion.java":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/issue\/NewEffortAggregatorTest.java":[{"add":["47","import static org.sonar.core.config.CorePropertyDefinitions.LEAK_PERIOD_MODE_PREVIOUS_VERSION;","51","  private static final Period PERIOD = new Period(LEAK_PERIOD_MODE_PREVIOUS_VERSION, null, 1_500_000_000L, \"U1\");"],"delete":["47","import static org.sonar.core.config.CorePropertyDefinitions.LEAK_PERIOD_MODE_PREVIOUS_ANALYSIS;","51","  private static final Period PERIOD = new Period(LEAK_PERIOD_MODE_PREVIOUS_ANALYSIS, null, 1_500_000_000L, \"U1\");"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/step\/LoadPeriodsStepTest.java":[{"add":["26","import org.junit.rules.ExpectedException;","68","  @Rule","69","  public ExpectedException expectedException = ExpectedException.none();"],"delete":["48","import static org.sonar.core.config.CorePropertyDefinitions.LEAK_PERIOD_MODE_PREVIOUS_ANALYSIS;","234","  public void feed_period_by_previous_analysis() {","235","    setupRoot(PROJECT_ROOT);","236","    dbTester.prepareDbUnit(getClass(), \"shared.xml\");","237","    settings.setProperty(\"sonar.leak.period\", \"previous_analysis\");","238","","239","    underTest.execute();","240","","241","    \/\/ return analysis from 2008-11-29","242","    Period period = periodsHolder.getPeriod();","243","    assertThat(period).isNotNull();","244","    assertThat(period.getMode()).isEqualTo(LEAK_PERIOD_MODE_PREVIOUS_ANALYSIS);","245","    assertThat(period.getModeParameter()).isNotNull();","246","    assertThat(period.getSnapshotDate()).isEqualTo(1227934800000L);","247","    assertThat(period.getAnalysisUuid()).isEqualTo(\"u1004\");","248","","249","    assertThat(logTester.logs(LoggerLevel.DEBUG)).hasSize(1);","250","    assertThat(logTester.logs(LoggerLevel.DEBUG).get(0)).startsWith(\"Compare to previous analysis (\");","251","  }","252","","253","  @Test","254","  public void no_period_by_previous_analysis() {","255","    setupRoot(PROJECT_ROOT);","256","    dbTester.prepareDbUnit(getClass(), \"empty.xml\");","257","    settings.setProperty(\"sonar.leak.period\", \"previous_analysis\");","258","","259","    underTest.execute();","260","","261","    assertThat(periodsHolder.getPeriod()).isNull();","262","  }","263","","264","  @Test","265","  public void display_warning_log_when_using_previous_analysis() {","266","    setupRoot(PROJECT_ROOT);","267","    dbTester.prepareDbUnit(getClass(), \"shared.xml\");","268","    settings.setProperty(\"sonar.leak.period\", \"previous_analysis\");","269","","270","    underTest.execute();","271","","272","    assertThat(logTester.logs(LoggerLevel.WARN))","273","      .containsOnly(\"Leak period is set to deprecated value 'previous_analysis'. This value will be removed in next SonarQube LTS, please use another one instead.\");","274","  }","275","","276","  @Test"]}],"tests\/src\/test\/java\/org\/sonarqube\/tests\/measure\/TimeMachineTest.java":[{"add":["77","    setServerProperty(orchestrator, \"sonar.leak.period\", \"previous_version\");"],"delete":["77","    setServerProperty(orchestrator, \"sonar.leak.period\", \"previous_analysis\");"]}],"tests\/src\/test\/java\/org\/sonarqube\/tests\/measure\/MeasuresWsTest.java":[{"add":["54","    setServerProperty(orchestrator, \"sonar.leak.period\", \"previous_version\");"],"delete":["54","    setServerProperty(orchestrator, \"sonar.leak.period\", \"previous_analysis\");"]}],"server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v67\/MigratePreviousAnalysisToPreviousVersionTest\/properties.sql":[{"add":[],"delete":[]}],"tests\/src\/test\/java\/org\/sonarqube\/tests\/qualityGate\/QualityGateUiTest.java":[{"add":["58","    tester.settings().setGlobalSettings(\"sonar.leak.period\", \"previous_version\");"],"delete":["58","    tester.settings().setGlobalSettings(\"sonar.leak.period\", \"previous_analysis\");"]}],"tests\/src\/test\/java\/org\/sonarqube\/tests\/qualityModel\/TechnicalDebtAndIssueNewMeasuresTest.java":[{"add":[],"delete":["56","  public void since_previous_analysis_with_constant_effort() throws Exception {","57","    setServerProperty(orchestrator, \"sonar.leak.period\", \"previous_analysis\");","58","    defineQualityProfile(\"one-issue-per-line\");","59","    provisionSampleProject();","60","","61","    \/\/ Execute an analysis in the past to have a past snapshot without any issues","62","    setSampleProjectQualityProfile(\"empty\");","63","    runSampleProjectAnalysis(\"v1\", \"sonar.projectDate\", DATE_31_DAYS_AGO);","64","","65","    \/\/ Second analysis issues will be created -> new issues and new technical debt","66","    setSampleProjectQualityProfile(\"one-issue-per-line\");","67","    runSampleProjectAnalysis(\"v1\");","68","    assertLeakPeriodForComponent(\"sample\", 26, 26);","69","    assertLeakPeriodForComponent(\"sample:src\/main\/xoo\/sample\/UnchangedClass.xoo\", 13, 13);","70","    assertLeakPeriodForComponent(\"sample:src\/main\/xoo\/sample\/ClassToModify.xoo\", 13, 13);","71","","72","    \/\/ Third analysis, with exactly the same profile -> no new issues so no new technical debt","73","    runSampleProjectAnalysis(\"v1\");","74","    assertLeakPeriodForComponent(\"sample\", 0, 0);","75","    assertLeakPeriodForComponent(\"sample:src\/main\/xoo\/sample\/UnchangedClass.xoo\", 0, 0);","76","    assertLeakPeriodForComponent(\"sample:src\/main\/xoo\/sample\/ClassToModify.xoo\", 0, 0);","77","","78","    \/\/ Fourth analysis, with new files and modified files -> new issues and new technical debt","79","    runSampleProjectAnalysis(\"v2\");","80","    assertLeakPeriodForComponent(\"sample\", 17, 17);","81","    assertLeakPeriodForComponent(\"sample:src\/main\/xoo\/sample\/UnchangedClass.xoo\", 0, 0);","82","    assertLeakPeriodForComponent(\"sample:src\/main\/xoo\/sample\/ClassToModify.xoo\", 4, 4);","83","    assertLeakPeriodForComponent(\"sample:src\/main\/xoo\/sample\/ClassAdded.xoo\", 13, 13);","84","","85","    \/\/ Fifth analysis, no change -> no new issues so no new technical debt","86","    runSampleProjectAnalysis(\"v2\");","87","    assertLeakPeriodForComponent(\"sample\", 0, 0);","88","    assertLeakPeriodForComponent(\"sample:src\/main\/xoo\/sample\/UnchangedClass.xoo\", 0, 0);","89","    assertLeakPeriodForComponent(\"sample:src\/main\/xoo\/sample\/ClassToModify.xoo\", 0, 0);","90","    assertLeakPeriodForComponent(\"sample:src\/main\/xoo\/sample\/ClassAdded.xoo\", 0, 0);","91","  }","92","","93","  @Test","94","  public void since_previous_analysis_with_effort_change() throws Exception {","95","    setServerProperty(orchestrator, \"sonar.leak.period\", \"previous_analysis\");","96","    defineQualityProfile(\"one-issue-per-line\");","97","    provisionSampleProject();","98","","99","    \/\/ Execute an analysis in the past to have a past snapshot without any issues","100","    setSampleProjectQualityProfile(\"empty\");","101","    runSampleProjectAnalysis(\"v1\", \"sonar.projectDate\", DATE_31_DAYS_AGO);","102","","103","    \/\/ Second analysis issues will be created -> new issues and new technical debt","104","    setSampleProjectQualityProfile(\"one-issue-per-line\");","105","    runSampleProjectAnalysis(\"v1\");","106","    assertLeakPeriodForComponent(\"sample\", 26, 26);","107","    assertLeakPeriodForComponent(\"sample:src\/main\/xoo\/sample\/UnchangedClass.xoo\", 13, 13);","108","    assertLeakPeriodForComponent(\"sample:src\/main\/xoo\/sample\/ClassToModify.xoo\", 13, 13);","109","","110","    \/\/ Third analysis, no change but increased effort is ignored but only new issues are considered -> no new issues so no new technical debt","111","    runSampleProjectAnalysis(\"v1\", \"sonar.oneIssuePerLine.effortToFix\", \"10\");","112","    assertLeakPeriodForComponent(\"sample\", 0, 0);","113","    assertLeakPeriodForComponent(\"sample:src\/main\/xoo\/sample\/UnchangedClass.xoo\", 0, 0);","114","    assertLeakPeriodForComponent(\"sample:src\/main\/xoo\/sample\/ClassToModify.xoo\", 0, 0);","115","","116","    \/\/ Fourth analysis, with new files, modified files and increased effort -> new issues and new technical debt","117","    runSampleProjectAnalysis(\"v2\", \"sonar.oneIssuePerLine.effortToFix\", \"10\");","118","    assertLeakPeriodForComponent(\"sample\", 170, 17);","119","    assertLeakPeriodForComponent(\"sample:src\/main\/xoo\/sample\/UnchangedClass.xoo\", 0, 0);","120","    assertLeakPeriodForComponent(\"sample:src\/main\/xoo\/sample\/ClassToModify.xoo\", 40, 4);","121","    assertLeakPeriodForComponent(\"sample:src\/main\/xoo\/sample\/ClassAdded.xoo\", 130, 13);","122","","123","    \/\/ Fifth analysis, no change -> no new issues so no new technical debt","124","    runSampleProjectAnalysis(\"v2\", \"sonar.oneIssuePerLine.effortToFix\", \"10\");","125","    assertLeakPeriodForComponent(\"sample\", 0, 0);","126","    assertLeakPeriodForComponent(\"sample:src\/main\/xoo\/sample\/UnchangedClass.xoo\", 0, 0);","127","    assertLeakPeriodForComponent(\"sample:src\/main\/xoo\/sample\/ClassToModify.xoo\", 0, 0);","128","    assertLeakPeriodForComponent(\"sample:src\/main\/xoo\/sample\/ClassAdded.xoo\", 0, 0);","129","  }","130","","131","  @Test"]}],"tests\/src\/test\/java\/org\/sonarqube\/tests\/qualityGate\/QualityGateOnRatingMeasuresTest.java":[{"add":["69","    tester.settings().setGlobalSetting(\"sonar.leak.period\", \"previous_version\");"],"delete":["69","    tester.settings().setGlobalSetting(\"sonar.leak.period\", \"previous_analysis\");"]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v67\/MigratePreviousAnalysisToPreviousVersionTest.java":[{"add":[],"delete":[]}],"tests\/src\/test\/java\/org\/sonarqube\/tests\/issue\/NewIssuesMeasureTest.java":[{"add":["55","    setServerProperty(ORCHESTRATOR, \"sonar.leak.period\", \"previous_version\");","98","    setServerProperty(ORCHESTRATOR, \"sonar.leak.period\", \"previous_version\");","126","    setServerProperty(ORCHESTRATOR, \"sonar.leak.period\", \"previous_version\");"],"delete":["55","    setServerProperty(ORCHESTRATOR, \"sonar.leak.period\", \"previous_analysis\");","98","    setServerProperty(ORCHESTRATOR, \"sonar.leak.period\", \"previous_analysis\");","126","    setServerProperty(ORCHESTRATOR, \"sonar.leak.period\", \"previous_analysis\");"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/step\/PeriodResolver.java":[{"add":[],"delete":["40","import static org.sonar.core.config.CorePropertyDefinitions.LEAK_PERIOD_MODE_PREVIOUS_ANALYSIS;","72","    if (propertyValue.equals(LEAK_PERIOD_MODE_PREVIOUS_ANALYSIS)) {","73","      LOG.warn(\"Leak period is set to deprecated value '{}'. This value will be removed in next SonarQube LTS, please use another one instead.\",","74","        LEAK_PERIOD_MODE_PREVIOUS_ANALYSIS);","75","    }","93","    if (StringUtils.equals(LEAK_PERIOD_MODE_PREVIOUS_ANALYSIS, property)) {","94","      return findByPreviousAnalysis();","95","    }","124","  private Period findByPreviousAnalysis() {","125","    SnapshotDto snapshot = findFirstSnapshot(session, createCommonQuery(projectUuid).setCreatedBefore(analysisDate).setIsLast(true).setSort(BY_DATE, DESC));","126","    if (snapshot == null) {","127","      return null;","128","    }","129","    LOG.debug(\"Compare to previous analysis ({})\", formatDate(snapshot.getCreatedAt()));","130","    return new Period(LEAK_PERIOD_MODE_PREVIOUS_ANALYSIS, formatDate(snapshot.getCreatedAt()), snapshot.getCreatedAt(), snapshot.getUuid());","131","  }","132","","133","  @CheckForNull"]}],"tests\/src\/test\/java\/org\/sonarqube\/tests\/measure\/DifferentialPeriodsTest.java":[{"add":["84","    setServerProperty(orchestrator, \"sonar.leak.period\", \"previous_version\");","135","    setServerProperty(orchestrator, MULTI_MODULE_PROJECT_KEY, \"sonar.leak.period\", \"previous_version\");","158","    setServerProperty(orchestrator, projectKey, \"sonar.leak.period\", \"previous_version\");"],"delete":["84","    setServerProperty(orchestrator, \"sonar.leak.period\", \"previous_analysis\");","135","    setServerProperty(orchestrator, MULTI_MODULE_PROJECT_KEY, \"sonar.leak.period\", \"previous_analysis\");","158","    setServerProperty(orchestrator, projectKey, \"sonar.leak.period\", \"previous_analysis\");"]}],"tests\/src\/test\/java\/org\/sonarqube\/tests\/qualityGate\/QualityGateNotificationTest.java":[{"add":["69","    tester.settings().setGlobalSettings(\"sonar.leak.period\", \"previous_version\");","115","      .contains(\"Quality gate threshold: Lines of Code variation = 0 since previous version\")"],"delete":["69","    tester.settings().setGlobalSettings(\"sonar.leak.period\", \"previous_analysis\");","115","      .contains(\"Quality gate threshold: Lines of Code variation = 0 since previous analysis\")"]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v67\/DbVersion67Test.java":[{"add":["38","    verifyMigrationCount(underTest, 7);"],"delete":["38","    verifyMigrationCount(underTest, 6);"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v67\/DbVersion67.java":[{"add":["34","      .add(1836, \"Migrate 'previous_analysis' leak periods to 'previous_version'\", MigratePreviousAnalysisToPreviousVersion.class)"],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/step\/ReportPersistAnalysisStepTest.java":[{"add":["48","import static org.sonar.core.config.CorePropertyDefinitions.LEAK_PERIOD_MODE_PREVIOUS_VERSION;","159","    periodsHolder.setPeriod(new Period(LEAK_PERIOD_MODE_PREVIOUS_VERSION, null, analysisDate, \"u1\"));","192","    assertThat(newProjectSnapshot.getPeriodMode()).isEqualTo(LEAK_PERIOD_MODE_PREVIOUS_VERSION);"],"delete":["48","import static org.sonar.core.config.CorePropertyDefinitions.LEAK_PERIOD_MODE_PREVIOUS_ANALYSIS;","159","    periodsHolder.setPeriod(new Period(LEAK_PERIOD_MODE_PREVIOUS_ANALYSIS, null, analysisDate, \"u1\"));","192","    assertThat(newProjectSnapshot.getPeriodMode()).isEqualTo(LEAK_PERIOD_MODE_PREVIOUS_ANALYSIS);"]}],"sonar-core\/src\/test\/java\/org\/sonar\/core\/timemachine\/PeriodsTest.java":[{"add":[],"delete":["39","import static org.sonar.core.config.CorePropertyDefinitions.LEAK_PERIOD_MODE_PREVIOUS_ANALYSIS;","131","  public void return_since_previous_analysis_label_when_no_date() {","132","    periods.label(LEAK_PERIOD_MODE_PREVIOUS_ANALYSIS, null, (String) null);","133","","134","    verify(i18n).message(any(Locale.class), eq(\"since_previous_analysis\"), isNull(String.class));","135","  }","136","","137","  @Test","138","  public void return_since_previous_analysis_abbreviation_when_no_date() {","139","    periods.abbreviation(LEAK_PERIOD_MODE_PREVIOUS_ANALYSIS, null, null);","140","","141","    verify(i18n).message(any(Locale.class), eq(\"since_previous_analysis.short\"), isNull(String.class));","142","  }","143","","144","  @Test","145","  public void return_since_previous_analysis_detailed_label_when_date_is_set() {","146","    periods.label(LEAK_PERIOD_MODE_PREVIOUS_ANALYSIS, null, STRING_DATE);","147","","148","    verify(i18n).message(any(Locale.class), eq(\"since_previous_analysis_detailed\"), isNull(String.class), eq(STRING_DATE));","149","  }","150","","151","  @Test","152","  public void return_since_previous_analysis_detailed_abbreviation_when_date_is_set() {","153","    periods.abbreviation(LEAK_PERIOD_MODE_PREVIOUS_ANALYSIS, null, DATE);","154","","155","    verify(i18n).message(any(Locale.class), eq(\"since_previous_analysis_detailed.short\"), isNull(String.class), anyString());","156","  }","157","","158","  @Test","159","  public void return_since_previous_analysis_label_using_settings() {","160","    settings.setProperty(LEAK_PERIOD + PERIOD_INDEX, LEAK_PERIOD_MODE_PREVIOUS_ANALYSIS);","161","","162","    periods.label(PERIOD_INDEX);","163","","164","    verify(i18n).message(any(Locale.class), eq(\"since_previous_analysis\"), isNull(String.class));","165","  }","166","","167","  @Test"]}],"tests\/src\/test\/java\/org\/sonarqube\/tests\/qualityModel\/NewDebtRatioMeasureTest.java":[{"add":["66","    setServerProperty(orchestrator, \"sonar.leak.period\", \"previous_version\");"],"delete":["66","    setServerProperty(orchestrator, \"sonar.leak.period\", \"previous_analysis\");"]}]}},"2be628875fdcf113cb8a0cbe458816a067a3a5f7":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/styles.css":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/styles.css":[{"add":[],"delete":["53","  font-size: var(--smallFontSize);"]}]}},"422912b59e4ffd99d05f45eae4b9289f2e7f6646":{"changes":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/metric\/MetricDtoTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/metric\/MetricDto.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/metric\/MetricDtoValidator.java":"ADD","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/setting\/ws\/SetActionTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/metric\/ws\/UpdateActionTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/metric\/ws\/CreateActionTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/util\/MetricKeyValidator.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/metric\/DefaultMetricFinderTest.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/metric\/MetricDaoTest.java":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/metric\/MetricDtoTest.java":[{"add":["21","import org.junit.Rule;","23","import org.junit.rules.ExpectedException;","25","import static com.google.common.base.Strings.repeat;","32","  @Rule","33","  public ExpectedException expectedException = ExpectedException.none();","34","","35","  private MetricDto underTest = new MetricDto();","81","","82","  @Test","83","  public void fail_if_key_longer_than_64_characters() {","84","    String a65 = repeat(\"a\", 65);","85","","86","    expectedException.expect(IllegalArgumentException.class);","87","    expectedException.expectMessage(\"Metric key length (65) is longer than the maximum authorized (64). '\" + a65 + \"' was provided.\");","88","","89","    underTest.setKey(a65);","90","  }","91","","92","  @Test","93","  public void fail_if_name_longer_than_64_characters() {","94","    String a65 = repeat(\"a\", 65);","95","","96","    expectedException.expect(IllegalArgumentException.class);","97","    expectedException.expectMessage(\"Metric name length (65) is longer than the maximum authorized (64). '\" + a65 + \"' was provided.\");","98","","99","    underTest.setShortName(a65);","100","  }","101","","102","  @Test","103","  public void fail_if_description_longer_than_255_characters() {","104","    String a256 = repeat(\"a\", 256);","105","","106","    expectedException.expect(IllegalArgumentException.class);","107","    expectedException.expectMessage(\"Metric description length (256) is longer than the maximum authorized (255). '\" + a256 + \"' was provided.\");","108","","109","    underTest.setDescription(a256);","110","  }"],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/metric\/MetricDto.java":[{"add":["27","import static org.sonar.db.metric.MetricDtoValidator.validateDescription;","28","import static org.sonar.db.metric.MetricDtoValidator.validateKey;","29","import static org.sonar.db.metric.MetricDtoValidator.validateShortName;","78","  public MetricDto setKey(String key) {","79","    this.kee = validateKey(key);","88","    this.shortName = validateShortName(shortName);","110","    this.description = validateDescription(description);"],"delete":["75","  public MetricDto setKey(String name) {","76","    this.kee = name;","85","    this.shortName = shortName;","107","    this.description = description;"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/metric\/MetricDtoValidator.java":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/setting\/ws\/SetActionTest.java":[{"add":["320","      .builder(\"my_key\")","329","    dbClient.metricDao().insert(dbSession, newMetricDto().setKey(\"metric_key_1\"));","330","    dbClient.metricDao().insert(dbSession, newMetricDto().setKey(\"metric_key_2\"));","333","    callForMultiValueGlobalSetting(\"my_key\", newArrayList(\"metric_key_1\", \"metric_key_2\"));","335","    assertGlobalSetting(\"my_key\", \"metric_key_1,metric_key_2\");","466","      .builder(\"my_key\")","475","    dbClient.metricDao().insert(dbSession, newMetricDto().setKey(\"metric_key\"));","476","    dbClient.metricDao().insert(dbSession, newMetricDto().setKey(\"metric_disabled_key\").setEnabled(false));","480","    expectedException.expectMessage(\"Error when validating metric setting with key 'my_key' and values [metric_key, metric_disabled_key]. A value is not a valid metric key.\");","482","    callForMultiValueGlobalSetting(\"my_key\", newArrayList(\"metric_key\", \"metric_disabled_key\"));"],"delete":["320","      .builder(\"my.key\")","329","    dbClient.metricDao().insert(dbSession, newMetricDto().setKey(\"metric.key.1\"));","330","    dbClient.metricDao().insert(dbSession, newMetricDto().setKey(\"metric.key.2\"));","333","    callForMultiValueGlobalSetting(\"my.key\", newArrayList(\"metric.key.1\", \"metric.key.2\"));","335","    assertGlobalSetting(\"my.key\", \"metric.key.1,metric.key.2\");","466","      .builder(\"my.key\")","475","    dbClient.metricDao().insert(dbSession, newMetricDto().setKey(\"metric.key\"));","476","    dbClient.metricDao().insert(dbSession, newMetricDto().setKey(\"metric.disabled.key\").setEnabled(false));","480","    expectedException.expectMessage(\"Error when validating metric setting with key 'my.key' and values [metric.key, metric.disabled.key]. A value is not a valid metric key.\");","482","    callForMultiValueGlobalSetting(\"my.key\", newArrayList(\"metric.key\", \"metric.disabled.key\"));"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/metric\/ws\/UpdateActionTest.java":[{"add":["209","    expectedException.expect(IllegalArgumentException.class);","210","    expectedException.expectMessage(\"Malformed metric key 'not well formatted key'. Allowed characters are alphanumeric, '-', '_', with at least one non-digit.\");","211",""],"delete":["205","    expectedException.expect(IllegalArgumentException.class);","206",""]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/metric\/ws\/CreateActionTest.java":[{"add":["260","    expectedException.expectMessage(\"Malformed metric key '123:456'. Allowed characters are alphanumeric, '-', '_', with at least one non-digit.\");"],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/util\/MetricKeyValidator.java":[{"add":[],"delete":["22",""]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/metric\/DefaultMetricFinderTest.java":[{"add":["24","import org.sonar.api.measures.Metric;","27","import org.sonar.db.metric.MetricDto;","29","import static org.assertj.core.api.Assertions.assertThat;","30","import static org.sonar.db.metric.MetricTesting.newMetricDto;","36","  public DbTester db = DbTester.create(System2.INSTANCE);","38","  private DefaultMetricFinder underTest = new DefaultMetricFinder(db.getDbClient());","40","  @Test","41","  public void findAll_enabled() {","42","    db.getDbClient().metricDao().insert(db.getSession(), newMetricDto());","43","    db.getDbClient().metricDao().insert(db.getSession(), newMetricDto());","44","    db.getDbClient().metricDao().insert(db.getSession(), newMetricDto().setEnabled(false));","45","    db.commit();","46","","47","    assertThat(underTest.findAll()).hasSize(2);","51","  public void findAll_by_keys() {","52","    db.getDbClient().metricDao().insert(db.getSession(), newMetricDto().setKey(\"ncloc\"));","53","    db.getDbClient().metricDao().insert(db.getSession(), newMetricDto().setKey(\"foo\"));","54","    db.getDbClient().metricDao().insert(db.getSession(), newMetricDto().setKey(\"coverage\"));","55","    db.commit();","56","","57","    assertThat(underTest.findAll(Arrays.asList(\"ncloc\", \"foo\"))).extracting(Metric::getKey).containsExactlyInAnyOrder(\"ncloc\", \"foo\")","58","      .doesNotContain(\"coverage\");","59","","63","  public void findById() {","64","    MetricDto firstMetric = db.getDbClient().metricDao().insert(db.getSession(), newMetricDto());","65","    MetricDto secondMetric = db.getDbClient().metricDao().insert(db.getSession(), newMetricDto());","66","    db.commit();","67","","68","    assertThat(underTest.findById(firstMetric.getId())).extracting(Metric::getKey).containsExactly(firstMetric.getKey());","72","  public void findByKey() {","73","    MetricDto firstMetric = db.getDbClient().metricDao().insert(db.getSession(), newMetricDto());","74","    MetricDto secondMetric = db.getDbClient().metricDao().insert(db.getSession(), newMetricDto());","75","    db.commit();","77","    assertThat(underTest.findByKey(secondMetric.getKey())).extracting(Metric::getKey).containsExactly(secondMetric.getKey());"],"delete":["22","import org.junit.Before;","26","import org.sonar.db.DbClient;","28","import org.sonar.db.TestDBSessions;","29","import org.sonar.db.metric.MetricDao;","31","import static org.hamcrest.core.Is.is;","32","import static org.hamcrest.core.IsNull.nullValue;","33","import static org.junit.Assert.assertThat;","39","  public DbTester dbTester = DbTester.create(System2.INSTANCE);","41","  DefaultMetricFinder finder;","43","  @Before","44","  public void setUp() {","45","    dbTester.prepareDbUnit(DefaultMetricFinderTest.class, \"shared.xml\");","46","    finder = new DefaultMetricFinder(new DbClient(dbTester.database(), dbTester.myBatis(), new TestDBSessions(dbTester.myBatis()), new MetricDao()));","50","  public void shouldFindAll() {","51","    assertThat(finder.findAll().size(), is(2));","55","  public void shouldFindByKeys() {","56","    assertThat(finder.findAll(Arrays.asList(\"ncloc\", \"foo\", \"coverage\")).size(), is(2));","60","  public void shouldFindById() {","61","    assertThat(finder.findById(1).getKey(), is(\"ncloc\"));","62","    assertThat(finder.findById(3), nullValue());","63","  }","65","  @Test","66","  public void shouldFindByKey() {","67","    assertThat(finder.findByKey(\"ncloc\").getKey(), is(\"ncloc\"));","68","    assertThat(finder.findByKey(\"disabled\"), nullValue());"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/metric\/MetricDaoTest.java":[{"add":["38","  public DbTester db = DbTester.create(System2.INSTANCE);","40","  public ExpectedException expectedException = ExpectedException.none();","42","  private DbSession dbSession = db.getSession();","44","  private MetricDao underTest = new MetricDao();","48","    db.prepareDbUnit(getClass(), \"shared.xml\");","50","    MetricDto result = underTest.selectByKey(dbSession, \"coverage\");","69","    result = underTest.selectByKey(dbSession, \"disabled\");","74","  @Test","76","    expectedException.expect(RowNotFoundException.class);","77","","78","    underTest.selectOrFailByKey(dbSession, \"unknown\");","83","    db.prepareDbUnit(getClass(), \"manual_metric.xml\");","85","    MetricDto result = underTest.selectByKey(dbSession, \"manual\");","105","    db.prepareDbUnit(getClass(), \"shared.xml\");","107","    assertThat(underTest.selectEnabled(dbSession)).hasSize(2);","112","    db.prepareDbUnit(getClass(), \"shared.xml\");","114","    assertThat(underTest.selectAll(dbSession)).extracting(\"id\").containsExactly(2, 3, 1);","119","    underTest.insert(dbSession, new MetricDto()","135","    MetricDto result = underTest.selectByKey(dbSession, \"coverage\");","155","    underTest.insert(dbSession, new MetricDto()","185","    dbSession.commit();","187","    assertThat(db.countRowsOfTable(\"metrics\")).isEqualTo(2);","192","    MetricDto metric = underTest.insert(dbSession, newMetricDto());","194","    MetricDto result = underTest.selectById(dbSession, metric.getId());","201","    MetricDto metric = underTest.insert(dbSession, newMetricDto());","203","    MetricDto result = underTest.selectOrFailById(dbSession, metric.getId());","210","    expectedException.expect(RowNotFoundException.class);","212","    underTest.selectOrFailById(dbSession, 42L);","217","    MetricDto metric1 = underTest.insert(dbSession, newMetricDto());","218","    MetricDto metric2 = underTest.insert(dbSession, newMetricDto());","220","    List<MetricDto> result = underTest.selectByIds(dbSession, newHashSet(metric1.getId(), metric2.getId()));","227","    MetricDto metric = underTest.insert(dbSession, newMetricDto().setKey(\"first-key\"));","229","    underTest.update(dbSession, metric.setKey(\"second-key\"));","231","    MetricDto result = underTest.selectByKey(dbSession, \"second-key\");","237","    underTest.insert(dbSession, newMetricDto().setEnabled(true).setUserManaged(true));","238","    underTest.insert(dbSession, newMetricDto().setEnabled(true).setUserManaged(true));","239","    underTest.insert(dbSession, newMetricDto().setEnabled(false));","241","    int result = underTest.countEnabled(dbSession, true);","248","    underTest.insert(dbSession, newMetricDto().setDomain(\"first-domain\").setEnabled(true));","249","    underTest.insert(dbSession, newMetricDto().setDomain(\"second-domain\").setEnabled(true));","250","    underTest.insert(dbSession, newMetricDto().setDomain(\"second-domain\").setEnabled(true));","251","    underTest.insert(dbSession, newMetricDto().setDomain(\"third-domain\").setEnabled(true));","253","    List<String> domains = underTest.selectEnabledDomains(dbSession);","260","    underTest.insert(dbSession, newMetricDto().setKey(\"first-key\"));","261","    underTest.insert(dbSession, newMetricDto().setKey(\"second-key\"));","262","    underTest.insert(dbSession, newMetricDto().setKey(\"third-key\"));","264","    List<MetricDto> result = underTest.selectByKeys(dbSession, Arrays.asList(\"first-key\", \"second-key\", \"third-key\"));","272","    MetricDto metric1 = underTest.insert(dbSession, newMetricDto().setEnabled(true).setUserManaged(true));","273","    MetricDto metric2 = underTest.insert(dbSession, newMetricDto().setEnabled(true).setUserManaged(true));","275","    underTest.disableCustomByIds(dbSession, Arrays.asList(metric1.getId(), metric2.getId()));","277","    List<MetricDto> result = underTest.selectByIds(dbSession, newHashSet(metric1.getId(), metric2.getId()));","284","    underTest.insert(dbSession, newMetricDto().setKey(\"metric-key\").setEnabled(true).setUserManaged(true));","286","    boolean updated = underTest.disableCustomByKey(dbSession, \"metric-key\");","289","    MetricDto result = underTest.selectByKey(dbSession, \"metric-key\");","293","    updated = underTest.disableCustomByKey(dbSession, \"metric-key\");","299","    underTest.insert(dbSession, newMetricDto().setKey(\"metric-key\"));","301","    MetricDto result = underTest.selectOrFailByKey(dbSession, \"metric-key\");","309","    underTest.insert(dbSession, newMetricDto().setUserManaged(true).setEnabled(true));","310","    underTest.insert(dbSession, newMetricDto().setUserManaged(true).setEnabled(true));","311","    underTest.insert(dbSession, newMetricDto().setUserManaged(true).setEnabled(true));","312","    underTest.insert(dbSession, newMetricDto().setUserManaged(false).setEnabled(true));","313","    underTest.insert(dbSession, newMetricDto().setUserManaged(true).setEnabled(false));","315","    List<MetricDto> result = underTest.selectEnabled(dbSession, true, 0, 100);","322","    underTest.insert(dbSession, newMetricDto().setUserManaged(true).setEnabled(true).setKey(\"metric-key\"));","323","    underTest.insert(dbSession, newMetricDto().setUserManaged(false).setEnabled(true).setKey(\"another-metric-key\"));","324","    underTest.insert(dbSession, newMetricDto().setUserManaged(true).setEnabled(false).setKey(\"third-metric-key\"));","326","    List<MetricDto> result = underTest.selectAvailableCustomMetricsByComponentUuid(dbSession, \"project-uuid\");"],"delete":["23","import org.junit.After;","24","import org.junit.Before;","37","","41","  public DbTester dbTester = DbTester.create(System2.INSTANCE);","43","  public ExpectedException thrown = ExpectedException.none();","45","  DbSession session;","47","  MetricDao underTest;","48","","49","  @Before","50","  public void createDao() {","51","    session = dbTester.myBatis().openSession(false);","52","    underTest = new MetricDao();","53","  }","54","","55","  @After","56","  public void tearDown() {","57","    session.close();","58","  }","62","    dbTester.prepareDbUnit(getClass(), \"shared.xml\");","64","    MetricDto result = underTest.selectByKey(session, \"coverage\");","83","    result = underTest.selectByKey(session, \"disabled\");","88","  @Test(expected = RowNotFoundException.class)","90","    underTest.selectOrFailByKey(session, \"unknown\");","95","    dbTester.prepareDbUnit(getClass(), \"manual_metric.xml\");","97","    MetricDto result = underTest.selectByKey(session, \"manual\");","117","    dbTester.prepareDbUnit(getClass(), \"shared.xml\");","119","    assertThat(underTest.selectEnabled(session)).hasSize(2);","124","    dbTester.prepareDbUnit(getClass(), \"shared.xml\");","126","    assertThat(underTest.selectAll(session)).extracting(\"id\").containsExactly(2, 3, 1);","131","    underTest.insert(session, new MetricDto()","147","    MetricDto result = underTest.selectByKey(session, \"coverage\");","167","    underTest.insert(session, new MetricDto()","197","    session.commit();","199","    assertThat(dbTester.countRowsOfTable(\"metrics\")).isEqualTo(2);","204","    MetricDto metric = underTest.insert(session, newMetricDto());","206","    MetricDto result = underTest.selectById(session, metric.getId());","213","    MetricDto metric = underTest.insert(session, newMetricDto());","215","    MetricDto result = underTest.selectOrFailById(session, metric.getId());","222","    thrown.expect(RowNotFoundException.class);","224","    underTest.selectOrFailById(session, 42L);","229","    MetricDto metric1 = underTest.insert(session, newMetricDto());","230","    MetricDto metric2 = underTest.insert(session, newMetricDto());","232","    List<MetricDto> result = underTest.selectByIds(session, newHashSet(metric1.getId(), metric2.getId()));","239","    MetricDto metric = underTest.insert(session, newMetricDto().setKey(\"first-key\"));","241","    underTest.update(session, metric.setKey(\"second-key\"));","243","    MetricDto result = underTest.selectByKey(session, \"second-key\");","249","    underTest.insert(session, newMetricDto().setEnabled(true).setUserManaged(true));","250","    underTest.insert(session, newMetricDto().setEnabled(true).setUserManaged(true));","251","    underTest.insert(session, newMetricDto().setEnabled(false));","253","    int result = underTest.countEnabled(session, true);","260","    underTest.insert(session, newMetricDto().setDomain(\"first-domain\").setEnabled(true));","261","    underTest.insert(session, newMetricDto().setDomain(\"second-domain\").setEnabled(true));","262","    underTest.insert(session, newMetricDto().setDomain(\"second-domain\").setEnabled(true));","263","    underTest.insert(session, newMetricDto().setDomain(\"third-domain\").setEnabled(true));","265","    List<String> domains = underTest.selectEnabledDomains(session);","272","    underTest.insert(session, newMetricDto().setKey(\"first-key\"));","273","    underTest.insert(session, newMetricDto().setKey(\"second-key\"));","274","    underTest.insert(session, newMetricDto().setKey(\"third-key\"));","276","    List<MetricDto> result = underTest.selectByKeys(session, Arrays.asList(\"first-key\", \"second-key\", \"third-key\"));","284","    MetricDto metric1 = underTest.insert(session, newMetricDto().setEnabled(true).setUserManaged(true));","285","    MetricDto metric2 = underTest.insert(session, newMetricDto().setEnabled(true).setUserManaged(true));","287","    underTest.disableCustomByIds(session, Arrays.asList(metric1.getId(), metric2.getId()));","289","    List<MetricDto> result = underTest.selectByIds(session, newHashSet(metric1.getId(), metric2.getId()));","296","    underTest.insert(session, newMetricDto().setKey(\"metric-key\").setEnabled(true).setUserManaged(true));","298","    boolean updated = underTest.disableCustomByKey(session, \"metric-key\");","301","    MetricDto result = underTest.selectByKey(session, \"metric-key\");","305","    updated = underTest.disableCustomByKey(session, \"metric-key\");","311","    underTest.insert(session, newMetricDto().setKey(\"metric-key\"));","313","    MetricDto result = underTest.selectOrFailByKey(session, \"metric-key\");","321","    underTest.insert(session, newMetricDto().setUserManaged(true).setEnabled(true));","322","    underTest.insert(session, newMetricDto().setUserManaged(true).setEnabled(true));","323","    underTest.insert(session, newMetricDto().setUserManaged(true).setEnabled(true));","324","    underTest.insert(session, newMetricDto().setUserManaged(false).setEnabled(true));","325","    underTest.insert(session, newMetricDto().setUserManaged(true).setEnabled(false));","327","    List<MetricDto> result = underTest.selectEnabled(session, true, 0, 100);","334","    underTest.insert(session, newMetricDto().setUserManaged(true).setEnabled(true).setKey(\"metric-key\"));","335","    underTest.insert(session, newMetricDto().setUserManaged(false).setEnabled(true).setKey(\"another-metric-key\"));","336","    underTest.insert(session, newMetricDto().setUserManaged(true).setEnabled(false).setKey(\"third-metric-key\"));","338","    List<MetricDto> result = underTest.selectAvailableCustomMetricsByComponentUuid(session, \"project-uuid\");","342",""]}]}},"c769d5e095106fe0e922255d192c562ffef2f918":{"changes":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/db\/migrate\/540_create_activities_table.rb":"MODIFY","server\/sonar-web\/src\/main\/webapp\/WEB-INF\/gems\/gems\/activerecord-2.3.15\/lib\/active_record\/connection_adapters\/abstract\/schema_statements.rb":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/db\/migrate\/540_create_activities_table.rb":[{"add":["33","      t.column 'log_key', :string, :limit => 250"],"delete":["33","      t.column 'log_key', :string"]}],"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/gems\/gems\/activerecord-2.3.15\/lib\/active_record\/connection_adapters\/abstract\/schema_statements.rb":[{"add":["371","            # sonar: add missing :limit => 255 to not break mysql on some windows environments","372","            schema_migrations_table.column :version, :string, :null => false, :limit => 255"],"delete":["371","            schema_migrations_table.column :version, :string, :null => false"]}]}},"041696c1ddfaa124b3f6ee2680ca8d08d3001e47":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/ComponentSourceSnippetViewer-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/ComponentSourceSnippetViewer.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/ComponentSourceSnippetViewer-test.tsx":[{"add":["170","  wrapper.instance().handleSymbolClick(['foo']);","171","  expect(wrapper.state('highlightedSymbols')).toEqual([]);"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/ComponentSourceSnippetViewer.tsx":[{"add":["292","  handleSymbolClick = (clickedSymbols: string[]) => {","293","    this.setState(({ highlightedSymbols }) => {","294","      const newHighlightedSymbols = clickedSymbols.filter(","295","        symb => !highlightedSymbols.includes(symb)","296","      );","297","      return { highlightedSymbols: newHighlightedSymbols };","298","    });"],"delete":["292","  handleSymbolClick = (highlightedSymbols: string[]) => {","293","    this.setState({ highlightedSymbols });"]}]}},"84d63b4b2cc9461695f0a892818e2874a8b14650":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/usergroups\/ws\/SearchAction.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/plugins\/ws\/UpdatesAction.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/plugins\/ws\/AvailableAction.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/usergroups\/ws\/SearchAction.java":[{"add":["63","      .setDescription(\"Search for user groups.<br>\" +","64","        \"Requires to be logged.\")"],"delete":["63","      .setDescription(\"Search for user groups <br>.\" +","64","        \"Require to be logged.\")"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/plugins\/ws\/UpdatesAction.java":[{"add":["79","        \"Update status values are: [COMPATIBLE, INCOMPATIBLE, REQUIRES_UPGRADE, DEPS_REQUIRE_UPGRADE].<br\/>\" +"],"delete":["79","        \"Update status values are: [COMPATIBLE, INCOMPATIBLE, REQUIRES_UPGRADE, DEPS_REQUIRE_UPGRADE]<br\/>.\" +"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/plugins\/ws\/AvailableAction.java":[{"add":["65","        \"<\/ul>\" +"],"delete":["65","        \"<\/ul>.<br\/>\" +"]}]}},"b9f35c95ac7a7dbf853fb9f58f2c7b4688fa6e1d":{"changes":{"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/permission\/AuthorizationMapper.xml":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/permission\/AuthorizationMapper.xml":[{"add":["402","    select u.login","403","    from users u","404","    where","405","      u.login in <foreach collection=\"logins\" open=\"(\" close=\")\" item=\"login\" separator=\",\">#{login,jdbcType=VARCHAR}<\/foreach>","406","      and (","407","        exists (","408","          select 1","409","          from user_roles ur","410","          inner join projects p on p.id = ur.resource_id and p.organization_uuid = ur.organization_uuid","411","          where","412","            p.kee =  #{projectKey,jdbcType=VARCHAR}","413","            and ur.role = #{permission,jdbcType=VARCHAR}","414","            and ur.user_id = u.id","415","        ) or exists (","416","          select 1","417","          from projects p","418","          inner join group_roles gr on gr.resource_id = p.id and gr.organization_uuid = p.organization_uuid","419","          inner join groups_users gu on gu.group_id = gr.group_id","420","          where","421","            p.kee  =  #{projectKey,jdbcType=VARCHAR}","422","            and gu.user_id = u.id","423","            and gr.role = #{permission,jdbcType=VARCHAR}","424","        )","425","        <if test=\"permission == 'user' or permission == 'codeviewer'\">","426","          or exists (","427","            select 1","428","            from projects p","429","            where","430","              p.kee =  #{projectKey,jdbcType=VARCHAR}","431","              and p.private = ${_false}","432","          )","433","        <\/if>","434","      )"],"delete":["402","      SELECT u.login","403","      FROM users u","404","      INNER JOIN user_roles ur ON ur.user_id = u.id","405","      INNER JOIN projects p ON p.kee = #{projectKey,jdbcType=VARCHAR}","406","      WHERE","407","        ur.organization_uuid = p.organization_uuid","408","        AND ur.resource_id = p.id","409","        AND ur.role = #{permission,jdbcType=VARCHAR}","410","        AND u.login IN <foreach collection=\"logins\" open=\"(\" close=\")\" item=\"login\" separator=\",\">#{login}<\/foreach>","411","","412","      UNION","413","","414","      SELECT u.login","415","      FROM users u","416","      INNER JOIN projects p ON p.kee = #{projectKey,jdbcType=VARCHAR}","417","      INNER JOIN group_roles gr ON gr.organization_uuid = p.organization_uuid","418","      INNER JOIN groups_users gu ON gr.group_id = gu.group_id","419","      WHERE","420","        gu.user_id = u.id","421","        AND gr.role = #{permission,jdbcType=VARCHAR}","422","        AND u.login IN <foreach collection=\"logins\" open=\"(\" close=\")\" item=\"login\" separator=\",\">#{login}<\/foreach>","423","","424","    <if test=\"permission == 'user' or permission == 'codeviewer'\">","425","      UNION","426","","427","      SELECT u.login","428","      FROM users u","429","      INNER JOIN projects p ON p.kee = #{projectKey,jdbcType=VARCHAR}","430","      WHERE","431","        p.private = ${_false}","432","        AND u.login IN <foreach collection=\"logins\" open=\"(\" close=\")\" item=\"login\" separator=\",\">#{login}<\/foreach>","433","    <\/if>"]}]}},"8654f383093aa581029719f7cd424301c9410ea8":{"changes":{"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/PersistAnalysisWarningsStep.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/source\/SignificantCodeRepository.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/PersistAnalysisPropertiesStep.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/source\/SourceLinesHashRepositoryImpl.java":"MODIFY"},"diff":{"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/PersistAnalysisWarningsStep.java":[{"add":["26","import org.sonar.core.util.CloseableIterator;","27","import org.sonar.scanner.protocol.output.ScannerReport;","47","    try (CloseableIterator<ScannerReport.AnalysisWarning> it = reportReader.readAnalysisWarnings()) {","48","      it.forEachRemaining(w -> warnings.add(new CeTaskMessages.Message(w.getText(), w.getTimestamp())));","49","    }"],"delete":["45","    reportReader.readAnalysisWarnings().forEachRemaining(w -> warnings.add(new CeTaskMessages.Message(w.getText(), w.getTimestamp())));"]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/source\/SignificantCodeRepository.java":[{"add":["38","    Optional<CloseableIterator<LineSgnificantCode>> opt = reportReader.readComponentSignificantCode(component.getReportAttributes().getRef());","39","    if (!opt.isPresent()) {","40","      return Optional.empty();","41","    }","42","    try (CloseableIterator<LineSgnificantCode> significantCode = opt.get()) {","43","      return Optional.of(toArray(significantCode, numLines));","44","    }"],"delete":["38","    Optional<CloseableIterator<LineSgnificantCode>> significantCode = reportReader.readComponentSignificantCode(component.getReportAttributes().getRef());","39","    return significantCode.map(s -> toArray(s, numLines));"]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/PersistAnalysisPropertiesStep.java":[{"add":["26","import org.sonar.core.util.CloseableIterator;","31","import org.sonar.scanner.protocol.output.ScannerReport;","59","    List<AnalysisPropertyDto> analysisPropertyDtos = new ArrayList<>();","60","    try (CloseableIterator<ScannerReport.ContextProperty> it = reportReader.readContextProperties()) {","61","      it.forEachRemaining(","62","        contextProperty -> {","63","          String propertyKey = contextProperty.getKey();","64","          if (propertyKey.startsWith(SONAR_ANALYSIS) || propertyKey.startsWith(SONAR_PULL_REQUEST)) {","65","            analysisPropertyDtos.add(new AnalysisPropertyDto()","66","              .setUuid(uuidFactory.create())","67","              .setKey(propertyKey)","68","              .setValue(contextProperty.getValue())","69","              .setSnapshotUuid(analysisMetadataHolder.getUuid()));","70","          }","71","        });","72","    }"],"delete":["57","    final List<AnalysisPropertyDto> analysisPropertyDtos = new ArrayList<>();","58","    reportReader.readContextProperties().forEachRemaining(","59","      contextProperty -> {","60","        String propertyKey = contextProperty.getKey();","61","        if (propertyKey.startsWith(SONAR_ANALYSIS) || propertyKey.startsWith(SONAR_PULL_REQUEST)) {","62","          analysisPropertyDtos.add(new AnalysisPropertyDto()","63","            .setUuid(uuidFactory.create())","64","            .setKey(propertyKey)","65","            .setValue(contextProperty.getValue())","66","            .setSnapshotUuid(analysisMetadataHolder.getUuid()));","67","        }","68","      });"]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/source\/SourceLinesHashRepositoryImpl.java":[{"add":["87","    try (CloseableIterator<String> lines = sourceLinesRepository.readLines(component)) {","88","      while (lines.hasNext()) {","89","        processor.addLine(lines.next());","90","      }","91","      return processor.getResult();"],"delete":["87","    CloseableIterator<String> lines = sourceLinesRepository.readLines(component);","88","","89","    while (lines.hasNext()) {","90","      processor.addLine(lines.next());","92","","93","    return processor.getResult();"]}]}},"23f172629a20af2d2101db70707061b82167b5c4":{"changes":{"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/global\/GlobalNavMenu.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/nav\/global\/__tests__\/__snapshots__\/GlobalNavMenu-test.tsx.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/global\/GlobalNavMenu.tsx":[{"add":["23","import { getQualityGatesUrl } from '..\/..\/..\/..\/helpers\/urls';","48","        <Link className={classNames({ active })} to=\"\/projects\">","70","    const active = this.props.location.pathname.startsWith('\/issues');","100","        <Link activeClassName=\"active\" to=\"\/coding_rules\">"],"delete":["23","import { getQualityGatesUrl, getBaseUrl } from '..\/..\/..\/..\/helpers\/urls';","37","  activeLink(url: string) {","38","    return window.location.pathname.indexOf(getBaseUrl() + url) === 0 ? 'active' : undefined;","39","  }","40","","52","        <Link activeClassName={classNames({ active })} to=\"\/projects\">","74","    const active = this.props.location.pathname === 'issues';","104","        <Link className={this.activeLink('\/coding_rules')} to=\"\/coding_rules\">"]}],"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/global\/__tests__\/__snapshots__\/GlobalNavMenu-test.tsx.snap":[{"add":["8","      className=\"\"","35","      activeClassName=\"active\""],"delete":["8","      activeClassName=\"\""]}]}},"9cb8739c465cbd26842fff6eb03d05a75f77a9c8":{"changes":{"server\/sonar-server-common\/src\/test\/java\/org\/sonar\/server\/organization\/DefaultOrganizationProviderImplTest.java":"MODIFY","server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/organization\/DefaultOrganizationProviderImpl.java":"MODIFY"},"diff":{"server\/sonar-server-common\/src\/test\/java\/org\/sonar\/server\/organization\/DefaultOrganizationProviderImplTest.java":[{"add":["21","import org.junit.After;","56","  @After","57","  public void tearDown() {","58","    underTest.unload();","59","  }","60","","123","  public void load_resets_thread_local_when_called_twice() {","124","    insertOrganization(ORGANIZATION_DTO_1, DATE_1);","125","    dbClient.internalPropertiesDao().save(dbSession, DEFAULT_ORGANIZATION, ORGANIZATION_DTO_1.getUuid());","126","    dbSession.commit();","128","    underTest.load();","129","    DefaultOrganization org1 = underTest.get();","130","","131","    underTest.load();","132","    DefaultOrganization org2 = underTest.get();","133","    assertThat(org1).isNotSameAs(org2);"],"delete":["31","import static org.assertj.core.api.Assertions.fail;","118","  public void load_fails_with_ISE_when_called_twice_without_unload_in_between() {","119","    underTest.load();","121","    try {","122","      underTest.load();","123","      fail(\"A IllegalStateException should have been raised\");","124","    } catch (IllegalStateException e) {","125","      assertThat(e).hasMessage(\"load called twice for thread '\" + Thread.currentThread().getName() + \"' or state wasn't cleared last time it was used\");","126","    } finally {","127","      underTest.unload();","128","    }"]}],"server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/organization\/DefaultOrganizationProviderImpl.java":[{"add":[],"delete":["72","    checkState(","73","      CACHE.get() == null,","74","      \"load called twice for thread '%s' or state wasn't cleared last time it was used\",","75","      Thread.currentThread().getName());"]}]}},"6c12781c2f9f5ee27dea9304c747e1ac14c6a81f":{"changes":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/UserPermissionDaoTest.java":"MODIFY","server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/permission\/ws\/template\/ApplyTemplateActionTest.java":"MODIFY","server\/sonar-db-dao\/src\/testFixtures\/java\/org\/sonar\/db\/component\/ComponentTesting.java":"MODIFY","server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/permission\/ws\/template\/BulkApplyTemplateActionTest.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/PermissionQueryTest.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/GroupPermissionDaoTest.java":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/permission\/ws\/UsersAction.java":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/permission\/ws\/GroupsAction.java":"MODIFY","server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/permission\/GroupPermissionMapper.xml":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/permission\/PermissionQuery.java":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/UserPermissionDaoTest.java":[{"add":["28","import java.util.stream.IntStream;","51","import static org.sonar.core.permission.GlobalPermissions.QUALITY_PROFILE_ADMIN;","53","import static org.sonar.db.component.ComponentTesting.newPrivateProjectDto;","58","import static org.sonar.db.permission.PermissionQuery.DEFAULT_PAGE_SIZE;","138","    PermissionQuery query = PermissionQuery.builder().setOrganizationUuid(organization.getUuid()).withAtLeastOnePermission().setComponent(project1).build();","142","    query = PermissionQuery.builder().setOrganizationUuid(organization.getUuid()).setPermission(\"missing\").setComponent(project1).build();","146","    query = PermissionQuery.builder().setOrganizationUuid(organization.getUuid()).setSearchQuery(\"Mari\").withAtLeastOnePermission().setComponent(project1).build();","150","    query = PermissionQuery.builder().setOrganizationUuid(organization.getUuid()).setSearchQuery(\"Mari\").setPermission(ISSUE_ADMIN).setComponent(project1).build();","154","    query = PermissionQuery.builder().setOrganizationUuid(organization.getUuid()).setSearchQuery(\"Unknown\").setComponent(project1).build();","158","    query = PermissionQuery.builder().setOrganizationUuid(organization.getUuid()).setComponent(newPrivateProjectDto(organization)).withAtLeastOnePermission().build();","170","    addGlobalPermission(organization, QUALITY_PROFILE_ADMIN, user2);","174","    assertThat(underTest.selectUserIdsByQueryAndScope(dbSession, query))","179","  public void selectUserIdsByQuery_is_ordering_by_users_having_permissions_first_then_by_name_lowercase_when_high_number_of_users_for_global_permissions() {","180","    OrganizationDto organization = db.organizations().insert();","181","    ComponentDto project = db.components().insertPrivateProject(organization);","182","    IntStream.rangeClosed(1, DEFAULT_PAGE_SIZE + 1).forEach(i -> {","183","      UserDto user = insertUser(u -> u.setLogin(\"login\" + i).setName(\"\" + i), organization);","184","      \/\/ Add permission on project to be sure projects are excluded","185","      db.users().insertProjectPermissionOnUser(user, SCAN.getKey(), project);","186","    });","187","    String lastLogin = \"login\" + (DEFAULT_PAGE_SIZE + 1);","188","    UserDto lastUser = db.getDbClient().userDao().selectByLogin(dbSession, lastLogin);","189","    addGlobalPermission(organization, SYSTEM_ADMIN, lastUser);","190","","191","    PermissionQuery query = PermissionQuery.builder().setOrganizationUuid(organization.getUuid()).build();","192","","193","    assertThat(underTest.selectUserIdsByQueryAndScope(dbSession, query))","194","      .hasSize(DEFAULT_PAGE_SIZE)","195","      .startsWith(lastUser.getId());","196","  }","197","","198","  @Test","199","  public void selectUserIdsByQuery_is_ordering_by_users_having_permissions_first_then_by_name_lowercase_when_high_number_of_users_for_project_permissions() {","200","    OrganizationDto organization = db.organizations().insert();","201","    IntStream.rangeClosed(1, DEFAULT_PAGE_SIZE + 1).forEach(i -> {","202","      UserDto user = insertUser(u -> u.setLogin(\"login\" + i).setName(\"\" + i), organization);","203","      \/\/ Add global permission to be sure they are excluded","204","      addGlobalPermission(organization, SYSTEM_ADMIN, user);","205","    });","206","    String lastLogin = \"login\" + (DEFAULT_PAGE_SIZE + 1);","207","    UserDto lastUser = db.getDbClient().userDao().selectByLogin(dbSession, lastLogin);","208","    ComponentDto project = db.components().insertPrivateProject(organization);","209","    db.users().insertProjectPermissionOnUser(lastUser, SCAN.getKey(), project);","210","","211","    PermissionQuery query = PermissionQuery.builder()","212","      .setComponent(project)","213","      .setOrganizationUuid(organization.getUuid()).build();","214","","215","    assertThat(underTest.selectUserIdsByQueryAndScope(dbSession, query))","216","      .hasSize(DEFAULT_PAGE_SIZE)","217","      .startsWith(lastUser.getId());","218","  }","219","","220","  @Test","281","    PermissionQuery query = PermissionQuery.builder().setOrganizationUuid(project1.getOrganizationUuid()).setComponent(project1).withAtLeastOnePermission().build();","283","    query = PermissionQuery.builder().setOrganizationUuid(\"anotherOrg\").setComponent(project1).withAtLeastOnePermission().build();","287","    query = PermissionQuery.builder().setOrganizationUuid(org1.getUuid()).setComponent(newPrivateProjectDto(org1)).withAtLeastOnePermission().build();","299","    query = PermissionQuery.builder().setOrganizationUuid(org1.getUuid()).setSearchQuery(\"mariu\").setComponent(project1).build();","339","      .setComponent(project1)"],"delete":["134","    PermissionQuery query = PermissionQuery.builder().setOrganizationUuid(organization.getUuid()).withAtLeastOnePermission().setComponentUuid(project1.uuid()).build();","138","    query = PermissionQuery.builder().setOrganizationUuid(organization.getUuid()).setPermission(\"missing\").setComponentUuid(project1.uuid()).build();","142","    query = PermissionQuery.builder().setOrganizationUuid(organization.getUuid()).setSearchQuery(\"Mari\").withAtLeastOnePermission().setComponentUuid(project1.uuid()).build();","146","    query = PermissionQuery.builder().setOrganizationUuid(organization.getUuid()).setSearchQuery(\"Mari\").setPermission(ISSUE_ADMIN).setComponentUuid(project1.uuid()).build();","150","    query = PermissionQuery.builder().setOrganizationUuid(organization.getUuid()).setSearchQuery(\"Unknown\").setComponentUuid(project1.uuid()).build();","154","    query = PermissionQuery.builder().setOrganizationUuid(organization.getUuid()).setComponentUuid(\"missing\").withAtLeastOnePermission().build();","166","    ComponentDto project1 = db.components().insertPrivateProject(organization);","167","    addProjectPermission(organization, USER, user2, project1);","171","    assertThat(underTest.selectUserIdsByQuery(dbSession, query))","236","    PermissionQuery query = PermissionQuery.builder().setOrganizationUuid(project1.getOrganizationUuid()).setComponentUuid(project1.uuid()).withAtLeastOnePermission().build();","238","    query = PermissionQuery.builder().setOrganizationUuid(\"anotherOrg\").setComponentUuid(project1.uuid()).withAtLeastOnePermission().build();","242","    query = PermissionQuery.builder().setOrganizationUuid(org1.getUuid()).setComponentUuid(\"missing\").withAtLeastOnePermission().build();","254","    query = PermissionQuery.builder().setOrganizationUuid(org1.getUuid()).setSearchQuery(\"mariu\").setComponentUuid(project1.uuid()).build();","294","      .setComponentUuid(project1.uuid())","295","      .setComponentId(project1.getId())"]}],"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/permission\/ws\/template\/ApplyTemplateActionTest.java":[{"add":["61","    new TestProjectIndexers(), userSession, defaultTemplatesResolver);","193","  private void newRequest(@Nullable String templateUuid, @Nullable String projectUuid, @Nullable String projectKey) {","204","    request.execute();","218","    PermissionQuery query = PermissionQuery.builder().setOrganizationUuid(project.getOrganizationUuid()).setPermission(permission).setComponent(project).build();","223","    PermissionQuery query = PermissionQuery.builder().setOrganizationUuid(project.getOrganizationUuid()).setPermission(permission).setComponent(project).build();"],"delete":["40","import org.sonar.server.ws.TestResponse;","62","     new TestProjectIndexers(), userSession, defaultTemplatesResolver);","194","  private TestResponse newRequest(@Nullable String templateUuid, @Nullable String projectUuid, @Nullable String projectKey) {","205","","206","    return request.execute();","220","    PermissionQuery query = PermissionQuery.builder().setOrganizationUuid(project.getOrganizationUuid()).setPermission(permission).setComponentUuid(project.uuid()).build();","225","    PermissionQuery query = PermissionQuery.builder().setOrganizationUuid(project.getOrganizationUuid()).setPermission(permission).setComponentUuid(project.uuid()).build();"]}],"server\/sonar-db-dao\/src\/testFixtures\/java\/org\/sonar\/db\/component\/ComponentTesting.java":[{"add":["31","import static org.apache.commons.lang.math.RandomUtils.nextLong;","142","      .setId(nextLong())"],"delete":[]}],"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/permission\/ws\/template\/BulkApplyTemplateActionTest.java":[{"add":["356","    PermissionQuery query = PermissionQuery.builder().setOrganizationUuid(project.getOrganizationUuid()).setPermission(permission).setComponent(project).build();","361","    PermissionQuery query = PermissionQuery.builder().setOrganizationUuid(project.getOrganizationUuid()).setPermission(permission).setComponent(project).build();"],"delete":["356","    PermissionQuery query = PermissionQuery.builder().setOrganizationUuid(project.getOrganizationUuid()).setPermission(permission).setComponentUuid(project.uuid()).build();","361","    PermissionQuery query = PermissionQuery.builder().setOrganizationUuid(project.getOrganizationUuid()).setPermission(permission).setComponentUuid(project.uuid()).build();"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/PermissionQueryTest.java":[{"add":["24","import org.sonar.db.component.ComponentDto;","25","import org.sonar.db.organization.OrganizationDto;","28","import static org.sonar.db.component.ComponentTesting.newPublicProjectDto;","29","import static org.sonar.db.organization.OrganizationTesting.newOrganizationDto;","38","    OrganizationDto organization = newOrganizationDto();","39","    ComponentDto project= newPublicProjectDto(organization);","40","    PermissionQuery query = PermissionQuery.builder()","41","      .setComponent(project)","47","    assertThat(query.getComponentUuid()).isEqualTo(project.uuid());","48","    assertThat(query.getComponentId()).isEqualTo(project.getId());","49","    assertThat(query.getOrganizationUuid()).isEqualTo(\"ORGANIZATION_UUID\");","50","    assertThat(query.getPermission()).isEqualTo(\"user\");","51","    assertThat(query.getSearchQuery()).isEqualTo(\"sonar\");","56","    PermissionQuery query = PermissionQuery.builder()","62","    assertThat(query.getPageOffset()).isEqualTo(40);","63","    assertThat(query.getPageSize()).isEqualTo(10);","68","    PermissionQuery query = PermissionQuery.builder()","72","    assertThat(query.getPageOffset()).isEqualTo(0);","73","    assertThat(query.getPageSize()).isEqualTo(20);"],"delete":["34","    PermissionQuery quey = PermissionQuery.builder()","35","      .setComponentUuid(\"COMPONENT_UUID\")","36","      .setComponentId(1234L)","42","    assertThat(quey.getComponentUuid()).isEqualTo(\"COMPONENT_UUID\");","43","    assertThat(quey.getComponentId()).isEqualTo(1234L);","44","    assertThat(quey.getOrganizationUuid()).isEqualTo(\"ORGANIZATION_UUID\");","45","    assertThat(quey.getPermission()).isEqualTo(\"user\");","46","    assertThat(quey.getSearchQuery()).isEqualTo(\"sonar\");","51","    PermissionQuery quey = PermissionQuery.builder()","57","    assertThat(quey.getPageOffset()).isEqualTo(40);","58","    assertThat(quey.getPageSize()).isEqualTo(10);","63","    PermissionQuery quey = PermissionQuery.builder()","67","    assertThat(quey.getPageOffset()).isEqualTo(0);","68","    assertThat(quey.getPageSize()).isEqualTo(20);"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/GroupPermissionDaoTest.java":[{"add":["53","import static org.sonar.db.permission.PermissionQuery.DEFAULT_PAGE_SIZE;","140","  public void selectGroupNamesByQuery_is_ordered_by_permissions_then_by_group_when_many_groups_for_global_permissions() {","141","    OrganizationDto organizationDto = db.organizations().insert();","142","    ComponentDto project = db.components().insertPrivateProject(organizationDto);","143","    IntStream.rangeClosed(1, DEFAULT_PAGE_SIZE + 1).forEach(i -> {","144","      GroupDto group = db.users().insertGroup(organizationDto, \"Group-\" + i);","145","      \/\/ Add permission on project to be sure projects are excluded","146","      db.users().insertProjectPermissionOnGroup(group, SCAN.getKey(), project);","147","    });","148","    String lastGroupName = \"Group-\" + (DEFAULT_PAGE_SIZE + 1);","149","    db.users().insertPermissionOnGroup(db.users().selectGroup(organizationDto, lastGroupName).get(), SCAN);","150","","151","    assertThat(underTest.selectGroupNamesByQuery(dbSession, newQuery()","152","      .setOrganizationUuid(organizationDto.getUuid()).build()))","153","        .hasSize(DEFAULT_PAGE_SIZE)","154","        .startsWith(ANYONE, lastGroupName, \"Group-1\");","155","  }","156","","157","  @Test","158","  public void selectGroupNamesByQuery_is_ordered_by_global_permissions_then_by_group_when_many_groups_for_project_permissions() {","159","    OrganizationDto organizationDto = db.organizations().insert();","160","    IntStream.rangeClosed(1, DEFAULT_PAGE_SIZE + 1).forEach(i -> {","161","      GroupDto group = db.users().insertGroup(organizationDto, \"Group-\" + i);","162","      \/\/ Add global permission to be sure they are excluded","163","      db.users().insertPermissionOnGroup(group, SCAN.getKey());","164","    });","165","    ComponentDto project = db.components().insertPrivateProject(organizationDto);","166","    String lastGroupName = \"Group-\" + (DEFAULT_PAGE_SIZE + 1);","167","    db.users().insertProjectPermissionOnGroup(db.users().selectGroup(organizationDto, lastGroupName).get(), SCAN.getKey(), project);","168","","169","    assertThat(underTest.selectGroupNamesByQuery(dbSession, newQuery()","170","      .setOrganizationUuid(organizationDto.getUuid())","171","      .setComponent(project)","172","      .build()))","173","        .hasSize(DEFAULT_PAGE_SIZE)","174","        .startsWith(ANYONE, lastGroupName, \"Group-1\");","175","  }","176","","177","  @Test","241","    PermissionQuery.Builder builderOnComponent = newQuery()","242","      .setComponent(project);","267","    PermissionQuery.Builder builderOnComponent = newQuery()","268","      .setComponent(project);"],"delete":["202","    PermissionQuery.Builder builderOnComponent = newQuery().setComponentUuid(project.uuid());","227","    PermissionQuery.Builder builderOnComponent = newQuery().setComponentUuid(project.uuid());"]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/permission\/ws\/UsersAction.java":[{"add":["134","    project.ifPresent(projectId -> permissionQuery.setComponent(projectId.getUuid(), projectId.getId()));","182","    project.ifPresent(p -> queryBuilder.setComponent(p.getUuid(), p.getId()));"],"delete":["134","    project.ifPresent(projectId -> {","135","      permissionQuery.setComponentUuid(projectId.getUuid());","136","      permissionQuery.setComponentId(projectId.getId());","137","    });","185","    project.ifPresent(p -> queryBuilder.setComponentUuid(p.getUuid()));"]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/permission\/ws\/GroupsAction.java":[{"add":["125","    project.ifPresent(projectId -> permissionQuery.setComponent(projectId.getUuid(), projectId.getId()));"],"delete":["125","    if (project.isPresent()) {","126","      permissionQuery.setComponentUuid(project.get().getUuid());","127","      permissionQuery.setComponentId(project.get().getId());","128","    }","129",""]}],"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/permission\/GroupPermissionMapper.xml":[{"add":["60","      <if test=\"query.componentId == null\">","61","        and gr.resource_id is null","62","      <\/if>","63","      <if test=\"query.componentId != null\">","64","        and gr.resource_id = #{query.componentId,jdbcType=BIGINT}","65","      <\/if>","67","        g.organization_uuid = #{query.organizationUuid,jdbcType=VARCHAR}","73","    <where>","74","      <if test=\"query.componentId == null\">","75","        and gr.resource_id is null","76","      <\/if>","77","      <if test=\"query.componentId != null\">","78","        and gr.resource_id = #{query.componentId,jdbcType=BIGINT}","79","      <\/if>","80","      <if test=\"query.withAtLeastOnePermission()\">","81","        and gr.organization_uuid = #{query.organizationUuid,jdbcType=VARCHAR} and","82","        gr.group_id is null","83","      <\/if>","84","    <\/where>"],"delete":["61","      g.organization_uuid = #{query.organizationUuid,jdbcType=VARCHAR}","67","    <if test=\"query.withAtLeastOnePermission()\">","68","      where","69","      gr.organization_uuid = #{query.organizationUuid,jdbcType=VARCHAR} and","70","      gr.group_id is null","71","    <\/if>"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/permission\/PermissionQuery.java":[{"add":["26","import org.sonar.db.component.ComponentDto;","163","    public Builder setComponent(ComponentDto component) {","164","      return setComponent(component.uuid(), component.getId());","167","    public Builder setComponent(String componentUuid, long componentId) {","168","      this.componentUuid = componentUuid;"],"delete":["162","    public Builder setComponentUuid(String componentUuid) {","163","      this.componentUuid = componentUuid;","164","      return this;","167","    public Builder setComponentId(Long componentId) {"]}]}},"4876424dd7c24074f4fa9fa073d7310295614179":{"changes":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/issue\/ignore\/scanner\/IssueExclusionsRegexpScannerTest.java":"MODIFY","sonar-plugin-api-impl\/src\/test\/java\/org\/sonar\/api\/batch\/fs\/internal\/fs\/DefaultInputFileTest.java":"MODIFY","sonar-plugin-api-impl\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/DefaultInputFile.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/issue\/ignore\/IgnoreIssuesFilter.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/issue\/ignore\/scanner\/IssueExclusionsRegexpScanner.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/issue\/ignore\/scanner\/IssueExclusionsRegexpScannerTest.java":[{"add":["42","import static org.mockito.Mockito.mock;","46","  private IssueExclusionPatternInitializer patternsInitializer = mock(IssueExclusionPatternInitializer.class);"],"delete":["34","import org.mockito.Mock;","35","import org.mockito.MockitoAnnotations;","47","","48","  @Mock","49","  private IssueExclusionPatternInitializer patternsInitializer;","58","    MockitoAnnotations.initMocks(this);","59",""]}],"sonar-plugin-api-impl\/src\/test\/java\/org\/sonar\/api\/batch\/fs\/internal\/fs\/DefaultInputFileTest.java":[{"add":["35","import java.util.function.Consumer;","52","import static org.mockito.Mockito.verify;"],"delete":[]}],"sonar-plugin-api-impl\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/DefaultInputFile.java":[{"add":["405","    checkMetadata();","421","    checkMetadata();"],"delete":[]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/issue\/ignore\/IgnoreIssuesFilter.java":[{"add":["45","","46","    if (isIgnoreIssue(component, issue)) {","49","","56","  private static boolean isIgnoreIssue(InputComponent component, FilterableIssue issue) {","57","    if (component.isFile()) {","58","      DefaultInputFile inputFile = (DefaultInputFile) component;","59","      return inputFile.isIgnoreAllIssues() || inputFile.isIgnoreAllIssuesOnLine(issue.line());","60","    }","61","    return false;","62","  }","63",""],"delete":["45","    if (component.isFile() && ((DefaultInputFile) component).isIgnoreAllIssues()) {","48","    if (component.isFile() && ((DefaultInputFile) component).isIgnoreAllIssuesOnLine(issue.line())) {","49","      return false;","50","    }"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/issue\/ignore\/scanner\/IssueExclusionsRegexpScanner.java":[{"add":["47","  private boolean ignoreAllIssues;","58","    if (ignoreAllIssues) {","66","    if (ignoreAllIssues) {","76","    if (ignoreAllIssues) {","105","        ignoreAllIssues = true;"],"delete":["57","    if (inputFile.isIgnoreAllIssues()) {","65","    if (inputFile.isIgnoreAllIssues()) {","75","    if (inputFile.isIgnoreAllIssues()) {"]}]}},"1002e68f1230b1f024cd2916afd7cf6efcac05ce":{"changes":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/ci\/vendors\/Jenkins.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/ci\/vendors\/JenkinsTest.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/ci\/vendors\/Jenkins.java":[{"add":["44","    \/\/ JENKINS_URL is not enough to identify Jenkins. It can be easily used on a non-Jenkins job.","45","    return isNotBlank(system.envVariable(\"JENKINS_URL\")) && isNotBlank(system.envVariable(\"EXECUTOR_NUMBER\"));"],"delete":["44","    return isNotBlank(system.envVariable(\"JENKINS_URL\"));"]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/ci\/vendors\/JenkinsTest.java":[{"add":["42","    setEnvVariable(\"EXECUTOR_NUMBER\", \"12\");","46","    setEnvVariable(\"EXECUTOR_NUMBER\", \"12\");","47","    assertThat(underTest.isDetected()).isFalse();","48","","49","    setEnvVariable(\"JENKINS_URL\", \"http:\/\/foo\");","50","    setEnvVariable(\"EXECUTOR_NUMBER\", null);"],"delete":[]}]}},"717e75bc7827bc798ad455543e6d81bce7be4b9e":{"changes":{"sonar-batch\/src\/main\/java\/org\/sonar\/batch\/scan\/filesystem\/FileIndexer.java":"MODIFY","sonar-batch\/src\/main\/java\/org\/sonar\/batch\/scan\/ProjectLock.java":"MODIFY"},"diff":{"sonar-batch\/src\/main\/java\/org\/sonar\/batch\/scan\/filesystem\/FileIndexer.java":[{"add":["22","import org.apache.commons.lang.StringUtils;","28","import org.sonar.api.batch.fs.InputFile.Type;","34","import org.sonar.batch.scan.ProjectLock;","38","import java.io.IOException;","39","import java.nio.file.FileSystemLoopException;","40","import java.nio.file.FileVisitOption;","41","import java.nio.file.FileVisitResult;","42","import java.nio.file.FileVisitor;","43","import java.nio.file.Files;","45","import java.nio.file.attribute.BasicFileAttributes;","47","import java.util.Collections;","126","        try {","127","          indexDirectory(inputFileBuilder, fileSystem, progress, dirOrFile, type);","128","        } catch (IOException e) {","129","          throw new IllegalStateException(\"Failed to index files\", e);","130","        }","137","  private void indexDirectory(final InputFileBuilder inputFileBuilder, final DefaultModuleFileSystem fileSystem, final Progress status,","138","    final File dirToIndex, final InputFile.Type type) throws IOException {","139","    final Path absDir = dirToIndex.toPath().normalize();","140","    Files.walkFileTree(absDir, Collections.singleton(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE,","141","      new IndexFileVisitor(inputFileBuilder, fileSystem, status, type));","190","  private class IndexFileVisitor implements FileVisitor<Path> {","191","    private InputFileBuilder inputFileBuilder;","192","    private DefaultModuleFileSystem fileSystem;","193","    private Progress status;","194","    private Type type;","195","","196","    IndexFileVisitor(InputFileBuilder inputFileBuilder, DefaultModuleFileSystem fileSystem, Progress status, InputFile.Type type) {","197","      this.inputFileBuilder = inputFileBuilder;","198","      this.fileSystem = fileSystem;","199","      this.status = status;","200","      this.type = type;","201","    }","202","","203","    @Override","204","    public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {","205","      Path fileName = dir.getFileName();","206","      ","207","      if (fileName != null && StringUtils.isNotEmpty(fileName.toString()) && fileName.toString().charAt(0) == '.') {","208","        return FileVisitResult.SKIP_SUBTREE;","209","      }","210","      if (Files.isHidden(dir)) {","211","        return FileVisitResult.SKIP_SUBTREE;","212","      }","213","      return FileVisitResult.CONTINUE;","214","    }","215","","216","    @Override","217","    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {","218","      if (!Files.isHidden(file) && !ProjectLock.LOCK_FILE_NAME.equals(file.getFileName().toString())) {","219","        indexFile(inputFileBuilder, fileSystem, status, file.toFile(), type);","220","      }","221","      return FileVisitResult.CONTINUE;","222","    }","223","","224","    @Override","225","    public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {","226","      if (exc != null && exc instanceof FileSystemLoopException) {","227","        LOG.warn(\"Not indexing due to symlink loop: {}\", file.toFile());","228","        return FileVisitResult.CONTINUE;","229","      }","230","","231","      throw exc;","232","    }","233","","234","    @Override","235","    public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {","236","      return FileVisitResult.CONTINUE;","237","    }","238","  }","239",""],"delete":["22","","23","import org.apache.commons.io.FileUtils;","24","import org.apache.commons.io.filefilter.FileFilterUtils;","25","import org.apache.commons.io.filefilter.HiddenFileFilter;","26","import org.apache.commons.io.filefilter.IOFileFilter;","42","import java.util.Collection;","60","","61","  private static final IOFileFilter DIR_FILTER = FileFilterUtils.and(HiddenFileFilter.VISIBLE, FileFilterUtils.notFileFilter(FileFilterUtils.prefixFileFilter(\".\")));","62","  private static final IOFileFilter FILE_FILTER = FileFilterUtils.and(HiddenFileFilter.VISIBLE, FileFilterUtils.notFileFilter(FileFilterUtils.nameFileFilter(\".sonar_lock\")));","63","","125","        indexDirectory(inputFileBuilder, fileSystem, progress, dirOrFile, type);","132","  private void indexDirectory(InputFileBuilder inputFileBuilder, DefaultModuleFileSystem fileSystem, Progress status, File dirToIndex, InputFile.Type type) {","133","    Collection<File> files = FileUtils.listFiles(dirToIndex, FILE_FILTER, DIR_FILTER);","134","    for (File file : files) {","135","      indexFile(inputFileBuilder, fileSystem, status, file, type);","136","    }"]}],"sonar-batch\/src\/main\/java\/org\/sonar\/batch\/scan\/ProjectLock.java":[{"add":["31","  public static final String LOCK_FILE_NAME = \".sonar_lock\";"],"delete":["31","  static final String LOCK_FILE_NAME = \".sonar_lock\";"]}]}},"2bf160e29360643f447b03c0e9e301f5ab6fb481":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/search-navigator.css":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/StatusFacet.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/CreationDateFacet.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/facet\/FacetHeader.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/SeverityFacet.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/facet\/__tests__\/__snapshots__\/ListStyleFacet-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/facet\/__tests__\/__snapshots__\/FacetHeader-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/facet\/__tests__\/FacetHeader-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/__snapshots__\/StatusFacet-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/__snapshots__\/TypeFacet-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/TypeFacet.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/ResolutionFacet.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/facet\/ListStyleFacet.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/StandardFacet.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/__snapshots__\/StandardFacet-test.tsx.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/search-navigator.css":[{"add":[],"delete":["86",".search-navigator-facet-box > .spinner {","87","  float: right;","88","  margin-top: -24px;","89","}","90",""]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/StatusFacet.tsx":[{"add":["101","          fetching={this.props.fetching}"],"delete":["28","import DeferredSpinner from '..\/..\/..\/components\/common\/DeferredSpinner';","109","        <DeferredSpinner loading={this.props.fetching} \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/CreationDateFacet.tsx":[{"add":["280","          fetching={this.props.fetching}"],"delete":["34","import DeferredSpinner from '..\/..\/..\/components\/common\/DeferredSpinner';","288","        <DeferredSpinner loading={this.props.fetching} \/>"]}],"server\/sonar-web\/src\/main\/js\/components\/facet\/FacetHeader.tsx":[{"add":["21","import DeferredSpinner from '..\/common\/DeferredSpinner';","22","import HelpTooltip from '..\/controls\/HelpTooltip';","23","import OpenCloseIcon from '..\/icons-components\/OpenCloseIcon';","29","  fetching?: boolean;","73","      <div className=\"search-navigator-facet-header-wrapper display-flex-center\">","95","        {this.props.fetching && (","96","          <span className=\"little-spacer-right\">","97","            <DeferredSpinner \/>","98","          <\/span>","99","        )}","100",""],"delete":["20","import OpenCloseIcon from '..\/icons-components\/OpenCloseIcon';","21","import HelpTooltip from '..\/controls\/HelpTooltip';","71","      <div className=\"search-navigator-facet-header-wrapper\">"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/SeverityFacet.tsx":[{"add":["101","          fetching={this.props.fetching}"],"delete":["28","import DeferredSpinner from '..\/..\/..\/components\/common\/DeferredSpinner';","109","        <DeferredSpinner loading={this.props.fetching} \/>"]}],"server\/sonar-web\/src\/main\/js\/components\/facet\/__tests__\/__snapshots__\/ListStyleFacet-test.tsx.snap":[{"add":["8","    fetching={false}","31","    fetching={false}","122","    fetching={false}","200","    fetching={false}","268","    fetching={false}","348","    fetching={false}","426","    fetching={false}","466","    fetching={false}"],"delete":["21","  <DeferredSpinner","22","    loading={false}","23","    timeout={100}","24","  \/>","52","  <DeferredSpinner","53","    loading={false}","54","    timeout={100}","55","  \/>","140","  <DeferredSpinner","141","    loading={false}","142","    timeout={100}","143","  \/>","221","  <DeferredSpinner","222","    loading={false}","223","    timeout={100}","224","  \/>","292","  <DeferredSpinner","293","    loading={false}","294","    timeout={100}","295","  \/>","375","  <DeferredSpinner","376","    loading={false}","377","    timeout={100}","378","  \/>","456","  <DeferredSpinner","457","    loading={false}","458","    timeout={100}","459","  \/>","499","  <DeferredSpinner","500","    loading={false}","501","    timeout={100}","502","  \/>"]}],"server\/sonar-web\/src\/main\/js\/components\/facet\/__tests__\/__snapshots__\/FacetHeader-test.tsx.snap":[{"add":["4","  className=\"search-navigator-facet-header-wrapper display-flex-center\"","41","  className=\"search-navigator-facet-header-wrapper display-flex-center\"","72","  className=\"search-navigator-facet-header-wrapper display-flex-center\"","96","  className=\"search-navigator-facet-header-wrapper display-flex-center\"","127","  className=\"search-navigator-facet-header-wrapper display-flex-center\"","149","exports[`should render with a spinner if loading 1`] = `","150","<div","151","  className=\"search-navigator-facet-header-wrapper display-flex-center\"","152",">","153","  <span","154","    className=\"search-navigator-facet-header display-flex-center\"","155","  >","156","    foo","157","  <\/span>","158","  <span","159","    className=\"search-navigator-facet-header-value spacer-left spacer-right \"","160","  \/>","161","  <span","162","    className=\"little-spacer-right\"","163","  >","164","    <DeferredSpinner","165","      timeout={100}","166","    \/>","167","  <\/span>","168","<\/div>","169","`;","170","","173","  className=\"search-navigator-facet-header-wrapper display-flex-center\""],"delete":["4","  className=\"search-navigator-facet-header-wrapper\"","41","  className=\"search-navigator-facet-header-wrapper\"","72","  className=\"search-navigator-facet-header-wrapper\"","96","  className=\"search-navigator-facet-header-wrapper\"","127","  className=\"search-navigator-facet-header-wrapper\"","151","  className=\"search-navigator-facet-header-wrapper\""]}],"server\/sonar-web\/src\/main\/js\/components\/facet\/__tests__\/FacetHeader-test.tsx":[{"add":["48","it('should render with a spinner if loading', () => {","49","  expect(shallow(<FacetHeader fetching={true} name=\"foo\" open={false} \/>)).toMatchSnapshot();","50","});","51",""],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/__snapshots__\/StatusFacet-test.tsx.snap":[{"add":["7","    fetching={false}"],"delete":["13","  <DeferredSpinner","14","    loading={false}","15","    timeout={100}","16","  \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/__snapshots__\/TypeFacet-test.tsx.snap":[{"add":["101","    fetching={false}"],"delete":["112","  <DeferredSpinner","113","    loading={false}","114","    timeout={100}","115","  \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/TypeFacet.tsx":[{"add":["144","          fetching={this.props.fetching}"],"delete":["23","import DeferredSpinner from '..\/..\/..\/components\/common\/DeferredSpinner';","152","        <DeferredSpinner loading={this.props.fetching} \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/ResolutionFacet.tsx":[{"add":["117","          fetching={this.props.fetching}"],"delete":["27","import DeferredSpinner from '..\/..\/..\/components\/common\/DeferredSpinner';","125","        <DeferredSpinner loading={this.props.fetching} \/>"]}],"server\/sonar-web\/src\/main\/js\/components\/facet\/ListStyleFacet.tsx":[{"add":["395","          fetching={this.props.fetching}"],"delete":["29","import DeferredSpinner from '..\/common\/DeferredSpinner';","407","        <DeferredSpinner loading={this.props.fetching} \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/StandardFacet.tsx":[{"add":["301","            fetching={this.props.fetchingSonarSourceSecurity}","318","            fetching={this.props.fetchingOwaspTop10}","335","            fetching={this.props.fetchingSansTop25}"],"delete":["21","import DeferredSpinner from '..\/..\/..\/components\/common\/DeferredSpinner';","309","          <DeferredSpinner loading={this.props.fetchingSonarSourceSecurity} \/>","326","          <DeferredSpinner loading={this.props.fetchingOwaspTop10} \/>","343","          <DeferredSpinner loading={this.props.fetchingSansTop25} \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/__snapshots__\/StandardFacet-test.tsx.snap":[{"add":["22","    fetching={false}","63","      fetching={false}","97","      fetching={false}","143","      fetching={false}"],"delete":["27","  <DeferredSpinner","28","    loading={false}","29","    timeout={100}","30","  \/>","75","    <DeferredSpinner","76","      loading={false}","77","      timeout={100}","78","    \/>","112","    <DeferredSpinner","113","      loading={false}","114","      timeout={100}","115","    \/>","161","    <DeferredSpinner","162","      loading={false}","163","      timeout={100}","164","    \/>"]}]}},"4d65efdeffdfdedc71f9a038cf853b92b0ffe80e":{"changes":{"\/dev\/null":"DELETE","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/ServerComponents.java":"MODIFY"},"diff":{"\/dev\/null":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/ServerComponents.java":[{"add":["874","      SystemRestartWsAction.class,","875","      SystemInfoWsAction.class,","876","      SystemWs.class,","877","      SystemMonitor.class,","878","      SonarQubeMonitor.class,","879","      EsMonitor.class,","880","      PluginsMonitor.class,","881","      JvmPropertiesMonitor.class,","882","      DatabaseMonitor.class","883","      ));"],"delete":["340","import org.sonar.server.test.ws.CoverageShowAction;","341","import org.sonar.server.test.ws.CoverageWs;","849","    pico.addSingleton(CoverageWs.class);","850","    pico.addSingleton(CoverageShowAction.class);","878","        SystemRestartWsAction.class,","879","        SystemInfoWsAction.class,","880","        SystemWs.class,","881","        SystemMonitor.class,","882","        SonarQubeMonitor.class,","883","        EsMonitor.class,","884","        PluginsMonitor.class,","885","        JvmPropertiesMonitor.class,","886","        DatabaseMonitor.class","887","    ));"]}]}},"2e4413d7b28913c5a0ede0c43c386e9b3a13aa0d":{"changes":{"server\/sonar-web\/src\/main\/js\/app\/utils\/startReactApp.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/app\/utils\/startReactApp.js":[{"add":["103","                  <Route path=\"codingrules\" onEnter={(nextState, replace) => {","104","                    replace('\/coding_rules' + window.location.hash);","105","                  }}\/>"],"delete":[]}]}},"e3d566bbf2436a4bec3a8048f97f5ccca97936c9":{"changes":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/report\/ReportPublisherTest.java":"MODIFY","tests\/src\/test\/java\/org\/sonarqube\/tests\/analysis\/ScannerTest.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/ReportPublisher.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/report\/ReportPublisherTest.java":[{"add":["87","    root = new DefaultInputModule(ProjectDefinition.create().setKey(\"org.sonarsource.sonarqube:sonarqube\").setBaseDir(temp.newFolder()).setWorkDir(temp.getRoot()));","102","      .contains(\"ANALYSIS SUCCESSFUL, you can browse https:\/\/localhost\/dashboard?id=org.sonarsource.sonarqube%3Asonarqube\")","109","        \"projectKey=org.sonarsource.sonarqube:sonarqube\\n\" +","112","        \"dashboardUrl=https:\/\/localhost\/dashboard?id=org.sonarsource.sonarqube%3Asonarqube\\n\" +","140","      .contains(\"ANALYSIS SUCCESSFUL, you can browse https:\/\/publicserver\/sonarqube\/dashboard?id=org.sonarsource.sonarqube%3Asonarqube\")","145","      \"projectKey=org.sonarsource.sonarqube:sonarqube\\n\" +","148","        \"dashboardUrl=https:\/\/publicserver\/sonarqube\/dashboard?id=org.sonarsource.sonarqube%3Asonarqube\\n\" +","154","  public void fail_if_public_url_malformed() {","231","      entry(\"projectKey\", \"org.sonarsource.sonarqube:sonarqube\"));","265","    assertThat(wsRequest.getParameters().getValues(\"projectKey\")).containsExactly(\"org.sonarsource.sonarqube:sonarqube\");","303","    assertThat(wsRequest.getParameters().getValues(\"projectKey\")).containsExactly(\"org.sonarsource.sonarqube:sonarqube\");"],"delete":["87","    root = new DefaultInputModule(ProjectDefinition.create().setKey(\"struts\").setBaseDir(temp.newFolder()).setWorkDir(temp.getRoot()));","102","      .contains(\"ANALYSIS SUCCESSFUL, you can browse https:\/\/localhost\/dashboard\/index\/struts\")","109","        \"projectKey=struts\\n\" +","112","        \"dashboardUrl=https:\/\/localhost\/dashboard\/index\/struts\\n\" +","140","      .contains(\"ANALYSIS SUCCESSFUL, you can browse https:\/\/publicserver\/sonarqube\/dashboard\/index\/struts\")","145","      \"projectKey=struts\\n\" +","148","        \"dashboardUrl=https:\/\/publicserver\/sonarqube\/dashboard\/index\/struts\\n\" +","154","  public void fail_if_public_url_malformed() throws IOException {","231","      entry(\"projectKey\", \"struts\"));","265","    assertThat(wsRequest.getParameters().getValues(\"projectKey\")).containsExactly(\"struts\");","303","    assertThat(wsRequest.getParameters().getValues(\"projectKey\")).containsExactly(\"struts\");"]}],"tests\/src\/test\/java\/org\/sonarqube\/tests\/analysis\/ScannerTest.java":[{"add":["285","    assertThat(result.getLogs()).contains(\"\/dashboard?id=com.sonarsource.it.samples%3Amulti-modules-sample\");","290","    assertThat(result.getLogs()).contains(\"\/dashboard?id=com.sonarsource.it.samples%3Amulti-modules-sample%3Amybranch\");","294","    assertThat(result.getLogs()).contains(\"http:\/\/foo:123\/sonar\/dashboard?id=com.sonarsource.it.samples%3Amulti-modules-sample\");"],"delete":["285","    assertThat(result.getLogs()).contains(\"\/dashboard\/index\/com.sonarsource.it.samples:multi-modules-sample\");","290","    assertThat(result.getLogs()).contains(\"\/dashboard\/index\/com.sonarsource.it.samples:multi-modules-sample:mybranch\");","294","    assertThat(result.getLogs()).contains(\"http:\/\/foo:123\/sonar\/dashboard\/index\/com.sonarsource.it.samples:multi-modules-sample\");"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/ReportPublisher.java":[{"add":["26","import java.io.UnsupportedEncodingException;","57","import static java.net.URLEncoder.encode;","226","      URL dashboardUrl;","227","      try {","228","        dashboardUrl = httpUrl.newBuilder()","229","          .addPathSegment(\"dashboard\")","230","          .addEncodedQueryParameter(\"id\", encode(effectiveKey, \"UTF-8\"))","231","          .build()","232","          .url();","233","      } catch (UnsupportedEncodingException e) {","234","        throw new IllegalStateException(\"Unable to urlencode \" + effectiveKey, e);","235","      }"],"delete":["224","      URL dashboardUrl = httpUrl.newBuilder()","225","        .addPathSegment(\"dashboard\").addPathSegment(\"index\").addPathSegment(effectiveKey)","226","        .build()","227","        .url();"]}]}},"4e162555b40c43254f5b4e76470763bd6e706367":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/index\/IssueIndex.java":"MODIFY","it\/it-tests\/src\/test\/java\/it\/issue\/IssueSearchTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/index\/IssueIndexTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/index\/IssueIndex.java":[{"add":["382","    Preconditions.checkArgument(createdAfter == null || createdBefore == null || createdAfter.before(createdBefore),","383","      \"Start bound cannot be larger or equal to end bound\");"],"delete":["382","    Preconditions.checkArgument(createdAfter == null || createdAfter.equals(createdBefore) || createdBefore == null || createdAfter.before(createdBefore),","383","      \"Start bound cannot be larger than end bound\");"]}],"it\/it-tests\/src\/test\/java\/it\/issue\/IssueSearchTest.java":[{"add":["192","      assertThat(exception.getMessage()).contains(\"Start bound cannot be larger or equal to end bound\");"],"delete":["43","import org.sonar.wsclient.issue.NewIssue;","193","      assertThat(exception.getMessage()).contains(\"Start bound cannot be larger than end bound\");"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/index\/IssueIndexTest.java":[{"add":["35","import org.junit.rules.ExpectedException;","73","  @Rule","74","  public ExpectedException expectedException = ExpectedException.none();","207","      underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).moduleUuids(newArrayList(file.uuid())).build(), new SearchOptions())","208","        .getDocs())","209","          .isEmpty();","211","      underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).moduleUuids(newArrayList(module.uuid())).build(), new SearchOptions())","212","        .getDocs())","213","          .hasSize(1);","219","      underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).moduleUuids(newArrayList(project.uuid())).build(), new SearchOptions())","220","        .getDocs())","221","          .isEmpty();","407","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).statuses(newArrayList(Issue.STATUS_CLOSED, Issue.STATUS_OPEN)).build(), new SearchOptions()).getDocs())","408","      .hasSize(2);","438","      underTest.search(IssueQuery.builder(userSessionRule).resolutions(newArrayList(Issue.RESOLUTION_FALSE_POSITIVE, Issue.RESOLUTION_FIXED)).build(), new SearchOptions())","439","        .getDocs())","440","          .hasSize(2);","678","    \/\/ 20 < createdAt < 20: exception","679","    expectedException.expect(IllegalArgumentException.class);","680","    underTest.search(IssueQuery.builder(userSessionRule)","682","      .build(), new SearchOptions()).getDocs();","710","      assertThat(exception.getMessage()).isEqualTo(\"Start bound cannot be larger or equal to end bound\");","715","  public void fail_if_created_before_equals_created_after() {","716","    expectedException.expect(IllegalArgumentException.class);","717","    expectedException.expectMessage(\"Start bound cannot be larger or equal to end bound\");","718","","719","    underTest.search(IssueQuery.builder(userSessionRule).createdAfter(parseDate(\"2014-09-20\")).createdBefore(parseDate(\"2014-09-20\")).build(), new SearchOptions());","720","  }","721","","722","  @Test","823","      .createdAfter(parseDateTime(\"2014-09-01T00:00:00-0100\"))","824","      .createdBefore(parseDateTime(\"2014-09-02T00:00:00-0100\")).build(),"],"delete":["204","      underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).moduleUuids(newArrayList(file.uuid())).build(), new SearchOptions()).getDocs())","205","        .isEmpty();","207","      underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).moduleUuids(newArrayList(module.uuid())).build(), new SearchOptions()).getDocs())","208","        .hasSize(1);","214","      underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).moduleUuids(newArrayList(project.uuid())).build(), new SearchOptions()).getDocs())","215","        .isEmpty();","401","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).statuses(newArrayList(Issue.STATUS_CLOSED, Issue.STATUS_OPEN)).build(), new SearchOptions()).getDocs()).hasSize(2);","431","      underTest.search(IssueQuery.builder(userSessionRule).resolutions(newArrayList(Issue.RESOLUTION_FALSE_POSITIVE, Issue.RESOLUTION_FIXED)).build(), new SearchOptions()).getDocs())","432","        .hasSize(2);","670","    \/\/ 20 < createdAt < 20: nothing","671","    assertThat(underTest.search(IssueQuery.builder(userSessionRule)","673","      .build(), new SearchOptions()).getDocs()).isEmpty();","701","      assertThat(exception.getMessage()).isEqualTo(\"Start bound cannot be larger than end bound\");","806","        .createdAfter(parseDateTime(\"2014-09-01T00:00:00-0100\"))","807","        .createdBefore(parseDateTime(\"2014-09-02T00:00:00-0100\")).build(),"]}]}},"c93d2bf659c5fc869b05752789e2bb267a9decc5":{"changes":{"sonar-plugin-api-deps\/pom.xml":"MODIFY"},"diff":{"sonar-plugin-api-deps\/pom.xml":[{"add":["1","<project xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"","2","         xsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\">","15","","135","      <exclusions>","136","        <exclusion>","137","          <groupId>org.codehaus.sonar<\/groupId>","138","          <artifactId>sonar-deprecated<\/artifactId>","139","        <\/exclusion>","140","        <exclusion>","141","          <groupId>org.codehaus.sonar<\/groupId>","142","          <artifactId>sonar-plugin-api<\/artifactId>","143","        <\/exclusion>","144","      <\/exclusions>"],"delete":["1","<project xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\">","14","  "]}]}},"88587752a1ca7c0b6b29bd02a49ebce08126b9a8":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/issue\/DefaultAssignee.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/issue\/DefaultAssigneeTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/issue\/DefaultAssignee.java":[{"add":["30","import static org.sonar.api.CoreProperties.DEFAULT_ISSUE_ASSIGNEE;","31","","56","      String configuredLogin = settingsRepository.getSettings(treeRootHolder.getRoot()).getString(DEFAULT_ISSUE_ASSIGNEE);","67","    if (user == null || !user.active()) {","68","      LOG.info(\"Property {} is set with an unknown login: {}\", DEFAULT_ISSUE_ASSIGNEE, s);"],"delete":["23","import org.sonar.api.CoreProperties;","55","      String configuredLogin = settingsRepository.getSettings(treeRootHolder.getRoot()).getString(CoreProperties.DEFAULT_ISSUE_ASSIGNEE);","66","    if (user == null) {","67","      LOG.info(\"Property {} is set with an unknown login: {}\", CoreProperties.DEFAULT_ISSUE_ASSIGNEE, s);"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/issue\/DefaultAssigneeTest.java":[{"add":["61","    when(userIndex.getNullableByLogin(\"erik\")).thenReturn(new UserDoc().setLogin(\"erik\").setActive(true));","73","","74","  @Test","75","  public void configured_login_is_disabled() {","76","    settings.setProperty(CoreProperties.DEFAULT_ISSUE_ASSIGNEE, \"erik\");","77","    when(userIndex.getNullableByLogin(\"erik\")).thenReturn(new UserDoc().setLogin(\"erik\").setActive(false));","78","","79","    assertThat(underTest.getLogin()).isNull();","80","  }"],"delete":["61","    when(userIndex.getNullableByLogin(\"erik\")).thenReturn(new UserDoc().setLogin(\"erik\"));"]}]}},"7275c439ba18a33694ea41c97dce40ac0e84fcd5":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/index\/IssueIteratorForSingleChunk.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/index\/IssueIteratorForSingleChunk.java":[{"add":["86","  private static final String PROJECT_FILTER = \" and c.project_uuid = ? and i.project_uuid = ? \";","157","      stmt.setString(index, projectUuid);","158","      index++;"],"delete":["86","  private static final String PROJECT_FILTER = \" and c.project_uuid = ?\";"]}]}},"8d3f4bd7495ee6aa204f31c7329ffffedc7e5ae7":{"changes":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/branch\/ProjectPullRequests.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/ChangedLinesPublisher.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/branch\/ws\/ListActionTest.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/branch\/ProjectBranches.java":"MODIFY","server\/sonar-server\/src\/main\/resources\/org\/sonar\/server\/branch\/ws\/list-example.json":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/branch\/ProjectPullRequests.java":[{"add":["34","  private static final BinaryOperator<PullRequestInfo> PICK_MOST_RECENT_ANALYSIS = (a, b) -> a.getAnalysisDate() < b.getAnalysisDate() ? b : a;","38","    this.pullRequestsByBranchName = pullRequestInfos.stream().collect(Collectors.toMap(PullRequestInfo::getBranch, Function.identity(), PICK_MOST_RECENT_ANALYSIS));"],"delete":["34","","38","    BinaryOperator<PullRequestInfo> mergeFunction = pickMostRecentAnalysis();","39","    this.pullRequestsByBranchName = pullRequestInfos.stream().collect(Collectors.toMap(PullRequestInfo::getBranch, Function.identity(), mergeFunction));","40","  }","41","","42","  private static BinaryOperator<PullRequestInfo> pickMostRecentAnalysis() {","43","    return (a, b) -> a.getAnalysisDate() < b.getAnalysisDate() ? b : a;"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/ChangedLinesPublisher.java":[{"add":[],"delete":["75",""]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/branch\/ws\/ListActionTest.java":[{"add":["109","    ComponentDto project = db.components().insertMainBranch(p -> p.setDbKey(\"sonarqube\"));","111","      newAnalysis(project).setLast(true).setCreatedAt(parseDateTime(\"2017-04-01T01:15:42+0100\").getTime()));","112","    db.measures().insertLiveMeasure(project, qualityGateStatus, m -> m.setData(\"ERROR\"));","115","      .insertProjectBranch(project, b -> b.setKey(\"feature\/foo\").setBranchType(SHORT).setMergeBranchUuid(project.uuid()));","138","    ComponentDto project = db.components().insertMainBranch(p -> p.setDbKey(\"sonarqube\"));","140","      newAnalysis(project).setLast(true).setCreatedAt(parseDateTime(\"2017-04-01T01:15:42+0100\").getTime()));","141","    db.measures().insertLiveMeasure(project, qualityGateStatus, m -> m.setData(\"ERROR\"));","144","      .insertProjectBranch(project, b -> b.setKey(\"feature\/foo\").setBranchType(SHORT).setMergeBranchUuid(project.uuid()));"],"delete":["109","    ComponentDto project = db.components().insertPrivateProject(p -> p.setDbKey(\"sonarqube\"));","110","","111","    ComponentDto longLivingBranch = db.components()","112","      .insertProjectBranch(project, b -> b.setKey(\"feature\/bar\").setBranchType(org.sonar.db.component.BranchType.LONG));","114","      newAnalysis(longLivingBranch).setLast(true).setCreatedAt(parseDateTime(\"2017-04-01T01:15:42+0100\").getTime()));","115","    db.measures().insertLiveMeasure(longLivingBranch, qualityGateStatus, m -> m.setData(\"OK\"));","118","      .insertProjectBranch(project, b -> b.setKey(\"feature\/foo\").setBranchType(SHORT).setMergeBranchUuid(longLivingBranch.uuid()));","141","    ComponentDto project = db.components().insertPrivateProject(p -> p.setDbKey(\"sonarqube\"));","142","","143","    ComponentDto longLivingBranch = db.components()","144","      .insertProjectBranch(project, b -> b.setKey(\"feature\/bar\").setBranchType(org.sonar.db.component.BranchType.LONG));","146","      newAnalysis(longLivingBranch).setLast(true).setCreatedAt(parseDateTime(\"2017-04-01T01:15:42+0100\").getTime()));","147","    db.measures().insertLiveMeasure(longLivingBranch, qualityGateStatus, m -> m.setData(\"OK\"));","150","      .insertProjectBranch(project, b -> b.setKey(\"feature\/foo\").setBranchType(SHORT).setMergeBranchUuid(longLivingBranch.uuid()));"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/branch\/ProjectBranches.java":[{"add":[],"delete":["25","import javax.annotation.Nullable;","33","","35","","36","  @Nullable","61","  @CheckForNull"]}],"server\/sonar-server\/src\/main\/resources\/org\/sonar\/server\/branch\/ws\/list-example.json":[{"add":["6","      \"mergeBranch\": \"master\",","14","    },","15","    {","16","      \"name\": \"master\",","17","      \"isMain\": true,","18","      \"type\": \"LONG\",","19","      \"status\": {","20","        \"qualityGateStatus\": \"ERROR\"","21","      },","22","      \"analysisDate\": \"2017-04-01T01:15:42+0100\""],"delete":["3","      \"name\": \"feature\/bar\",","4","      \"isMain\": false,","5","      \"type\": \"LONG\",","6","      \"status\": {","7","        \"qualityGateStatus\": \"OK\"","8","      },","9","      \"analysisDate\": \"2017-04-01T01:15:42+0100\"","10","    },","11","    {","15","      \"mergeBranch\": \"feature\/bar\","]}]}},"bab3c7d6847c723bd3f0cacd4ef4b0cb3099947d":{"changes":{"build.gradle":"MODIFY"},"diff":{"build.gradle":[{"add":["99","      dependencySet(group: 'com.fasterxml.jackson.core', version: '2.9.5') {"],"delete":["99","      dependencySet(group: 'com.fasterxml.jackson.core', version: '2.8.11') {"]}]}},"551d4d6f30df01393f9db316c18f06d2a1a809f6":{"changes":{"sonar-db\/src\/main\/resources\/org\/sonar\/db\/user\/UserMapper.xml":"MODIFY"},"diff":{"sonar-db\/src\/main\/resources\/org\/sonar\/db\/user\/UserMapper.xml":[{"add":["140","      text_value LIKE #{login}"],"delete":["140","      text_value=#{login}"]}]}},"ce5749103936828955d9de52108a0e4b5cd76f12":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/controls\/SearchBox.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/controls\/__tests__\/__snapshots__\/SearchBox-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/groups\/components\/__tests__\/__snapshots__\/EditMembers-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/controls\/SearchBox.css":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/controls\/SearchBox.tsx":[{"add":["133","      <div","134","        className={classNames('search-box', this.props.className)}","135","        id={this.props.id}","136","        title={tooShort ? translateWithParameters('select2.tooShort', minLength!) : ''}>","167","          <span className=\"search-box-note\">"],"delete":["133","      <div className={classNames('search-box', this.props.className)} id={this.props.id}>","164","          <span","165","            className=\"search-box-note\"","166","            title={translateWithParameters('select2.tooShort', minLength!)}>"]}],"server\/sonar-web\/src\/main\/js\/components\/controls\/__tests__\/__snapshots__\/SearchBox-test.tsx.snap":[{"add":["5","  title=\"\""],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/groups\/components\/__tests__\/__snapshots__\/EditMembers-test.tsx.snap":[{"add":["249","                          title=\"\"","496","                              title=\"\""],"delete":[]}],"server\/sonar-web\/src\/main\/js\/components\/controls\/SearchBox.css":[{"add":["68","  pointer-events: none;"],"delete":[]}]}},"d9591923fcffc90a24eee16af6a585bee25f18d7":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/AppContainer.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/api\/issues.ts":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/AppContainer.tsx":[{"add":["24","import { CurrentUser } from '..\/..\/..\/app\/types';","49","const fetchIssueOrganizations = (organizationKeys: string[]) => (dispatch: Dispatch<any>) => {","50","  if (!organizationKeys.length) {","74","      const organizationKeys = uniq([","75","        ...response.issues.map(issue => issue.organization),","76","        ...(response.components || []).map(component => component.organization)","77","      ]);","79","        ? dispatch(fetchIssueOrganizations(organizationKeys)).then(() => response)"],"delete":["24","import { CurrentUser, Issue } from '..\/..\/..\/app\/types';","49","const fetchIssueOrganizations = (issues: Issue[]) => (dispatch: Dispatch<any>) => {","50","  if (!issues.length) {","54","  const organizationKeys = uniq(issues.map(issue => issue.organization));","76","        ? dispatch(fetchIssueOrganizations(response.issues)).then(() => response)"]}],"server\/sonar-web\/src\/main\/js\/api\/issues.ts":[{"add":["32","  components?: { key: string; organization: string; name: string; uuid: string }[];"],"delete":["32","  components?: { key: string; name: string; uuid: string }[];"]}]}},"47068be19be3b7e80b27c34ccb9278c2e83ae9de":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/docs\/__tests__\/__snapshots__\/DocMarkdownBlock-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/helpers\/__tests__\/markdown-test.ts":"MODIFY","server\/sonar-docs\/plugins\/sonarsource-source-filesystem\/package.json":"ADD","server\/sonar-docs\/plugins\/sonarsource-source-filesystem\/index.js":"ADD","server\/sonar-docs\/plugins\/sonarsource-source-filesystem\/gatsby-node.js":"ADD","server\/sonar-web\/src\/main\/js\/helpers\/markdown.js":"MODIFY","server\/sonar-web\/src\/main\/js\/helpers\/__tests__\/__snapshots__\/markdown-test.ts.snap":"ADD","server\/sonar-docs\/gatsby-config.js":"MODIFY","server\/sonar-docs\/src\/templates\/page.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/docs\/__tests__\/DocMarkdownBlock-test.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/docs\/__tests__\/__snapshots__\/DocMarkdownBlock-test.tsx.snap":[{"add":[],"delete":["2","exports[`should cut sonarqube\/sonarcloud\/static content 1`] = `","3","<div","4","  className=\"markdown\"","5",">","6","  <div","7","    className=\"markdown-content\"","8","  >","9","    <Block","10","      key=\"h-1\"","11","    >","12","      <p","13","        key=\"h-2\"","14","      >","15","        some","16","      <\/p>","17","      ","18","","19","      <p","20","        key=\"h-3\"","21","      >","22","        sonarqube","23","      <\/p>","24","      ","25","","26","      <p","27","        key=\"h-4\"","28","      >","29","          long","30","      <\/p>","31","      ","32","","33","      <p","34","        key=\"h-5\"","35","      >","36","          multiline","37","      <\/p>","38","      ","39","","40","      <p","41","        key=\"h-6\"","42","      >","43","        text","44","      <\/p>","45","    <\/Block>","46","  <\/div>","47","<\/div>","48","`;","49","","50","exports[`should cut sonarqube\/sonarcloud\/static content 2`] = `","51","<div","52","  className=\"markdown\"","53",">","54","  <div","55","    className=\"markdown-content\"","56","  >","57","    <Block","58","      key=\"h-1\"","59","    >","60","      <p","61","        key=\"h-2\"","62","      >","63","        some","64","      <\/p>","65","      ","66","","67","      <p","68","        key=\"h-3\"","69","      >","70","        sonarcloud","71","      <\/p>","72","      ","73","","74","      <p","75","        key=\"h-4\"","76","      >","77","        text","78","      <\/p>","79","    <\/Block>","80","  <\/div>","81","<\/div>","82","`;","83",""]}],"server\/sonar-web\/src\/main\/js\/helpers\/__tests__\/markdown-test.ts":[{"add":["20","import { isSonarCloud } from '..\/system';","24","  isSonarCloud: jest.fn().mockReturnValue(false)","119","","120","it('should cut sonarqube\/sonarcloud\/static content', () => {","121","  const content = `","122","This text has inline text for <!-- sonarqube -->SonarQube<!-- \/sonarqube --><!-- sonarcloud -->SonarCloud<!-- \/sonarcloud -->. Donec sed nulla magna.","123","","124","<!-- sonarqube -->","125","This is text for SonarQube, multi-line. Consectetur adipiscing elit. Duis dignissim nulla at massa iaculis interdum.","126","Aenean sit amet lacus a tortor ullamcorper interdum. Donec sed nulla magna.","127","<!-- \/sonarqube -->","128","","129","<!-- sonarcloud -->","130","This is text for SonarCloud, multi-line. In hac habitasse platea dictumst. Duis sagittis semper sapien nec tempor. Nullam vehicula nisi vitae nisi interdum aliquam. Mauris volutpat nunc non fermentum rhoncus. Aenean laoreet, orci vitae tempor bibendum,","131","metus nisl euismod neque, vitae euismod nibh nisl eu velit. Vivamus luctus suscipit elit vel semper.","132","<!-- \/sonarcloud -->","133","","134","<!-- static -->","135","This is static text.","136","<!-- \/static -->","137","","138","<!-- sonarqube -->","139","This is text for SonarQube, single line.","140","<!-- \/sonarqube -->","141","","142","* In hac habitasse","143","* Duis sagittis semper sapien nec tempor","144","<!-- sonarqube -->* This is a bullet point for SonarQube<!-- \/sonarqube -->","145","<!-- sonarcloud -->* This is a bullet point for SonarCloud<!-- \/sonarcloud -->","146","* Platea dictumst","147","","148","Duis sagittis semper sapien nec tempor. Nullam vehicula nisi vitae nisi interdum aliquam.","149","","150","| Parameter Name        | Description |","151","| --------------------- | ------------------ |","152","| sonar.pullrequest.github.repository | SLUG of the GitHub Repo |","153","<!-- sonarqube -->","154","| sonar.pullrequest.github.endpoint | The API url for your GitHub instance. |","155","<!-- \/sonarqube -->","156","`;","157","","158","  expect(filterContent(content)).toMatchSnapshot();","159","","160","  (isSonarCloud as jest.Mock).mockReturnValueOnce(true);","161","  expect(filterContent(content)).toMatchSnapshot();","162","});"],"delete":["23","  isSonarCloud: () => false"]}],"server\/sonar-docs\/plugins\/sonarsource-source-filesystem\/package.json":[{"add":[],"delete":[]}],"server\/sonar-docs\/plugins\/sonarsource-source-filesystem\/index.js":[{"add":[],"delete":[]}],"server\/sonar-docs\/plugins\/sonarsource-source-filesystem\/gatsby-node.js":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/helpers\/markdown.js":[{"add":["73","  const regexBase = '<!-- \\\\\/?(sonarqube|sonarcloud|static) -->';","77","  const filteredContent = isSonarCloud()","80","  return filteredContent","81","    .replace(new RegExp(`^${regexBase}(\\n|\\r|\\r\\n|$)`, 'gm'), '') \/\/ First, remove single-line ones, including ending carriage-returns.","82","    .replace(new RegExp(`${regexBase}`, 'g'), ''); \/\/ Now remove all remaining ones."],"delete":["76","  return isSonarCloud()"]}],"server\/sonar-web\/src\/main\/js\/helpers\/__tests__\/__snapshots__\/markdown-test.ts.snap":[{"add":[],"delete":[]}],"server\/sonar-docs\/gatsby-config.js":[{"add":["28","      resolve: `sonarsource-source-filesystem`,"],"delete":["28","      resolve: 'gatsby-source-filesystem',"]}],"server\/sonar-docs\/src\/templates\/page.js":[{"add":["48","    let htmlWithInclusions = page.html.replace(\/<p>@include (.*)<\\\/p>\/, (_, path) => {","49","      const chunk = data.allMarkdownRemark.edges.find(edge => edge.node.fields.slug === path);","50","      return chunk ? chunk.node.html : '';","51","    });","54",""],"delete":["48","    let htmlWithInclusions = cutSonarCloudContent(page.html).replace(","49","      \/<p>@include (.*)<\\\/p>\/,","50","      (_, path) => {","51","        const chunk = data.allMarkdownRemark.edges.find(edge => edge.node.fields.slug === path);","52","        return chunk ? chunk.node.html : '';","53","      }","54","    );","192","","193","function cutSonarCloudContent(content) {","194","  const beginning = '<!-- sonarcloud -->';","195","  const ending = '<!-- \/sonarcloud -->';","196","","197","  let newContent = content;","198","  let start = newContent.indexOf(beginning);","199","  let end = newContent.indexOf(ending);","200","  while (start !== -1 && end !== -1) {","201","    newContent = newContent.substring(0, start) + newContent.substring(end + ending.length);","202","    start = newContent.indexOf(beginning);","203","    end = newContent.indexOf(ending);","204","  }","205","","206","  return newContent;","207","}"]}],"server\/sonar-web\/src\/main\/js\/components\/docs\/__tests__\/DocMarkdownBlock-test.tsx":[{"add":[],"delete":["22","import { isSonarCloud } from '..\/..\/..\/helpers\/system';","77","it('should cut sonarqube\/sonarcloud\/static content', () => {","78","  const content = `","79","some","80","","81","<!-- sonarqube -->","82","sonarqube","83","<!-- \/sonarqube -->","84","","85","<!-- sonarcloud -->","86","sonarcloud","87","<!-- \/sonarcloud -->","88","","89","<!-- static -->","90","static","91","<!-- \/static -->","92","","93","<!-- sonarqube -->","94","  long","95","","96","  multiline","97","<!-- \/sonarqube -->","98","","99","text`;","100","","101","  (isSonarCloud as jest.Mock).mockImplementation(() => false);","102","  expect(shallowRender({ content })).toMatchSnapshot();","103","","104","  (isSonarCloud as jest.Mock).mockImplementation(() => true);","105","  expect(shallowRender({ content })).toMatchSnapshot();","106","});","107",""]}]}},"009b71015a299d024c7cadee120568f9a80b4865":{"changes":{"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/purge\/PurgeCommands.java":"MODIFY","server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/purge\/PurgeMapper.xml":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/purge\/PurgeMapper.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/purge\/PurgeDaoTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/purge\/PurgeDao.java":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/purge\/PurgeCommands.java":[{"add":["208","  public void deleteCeQueue(String rootUuid) {","209","    profiler.start(\"deleteCeQueue (ce_queue)\");","210","    purgeMapper.deleteCeQueueByProjectUuid(rootUuid);","211","    session.commit();","212","    profiler.stop();","213","  }","214",""],"delete":[]}],"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/purge\/PurgeMapper.xml":[{"add":["300","      delete from ce_activity where component_uuid=#{projectUuid,jdbcType=VARCHAR}","301","  <\/delete>","302","","303","  <delete id=\"deleteCeQueueByProjectUuid\">","304","    delete from ce_queue where component_uuid=#{projectUuid,jdbcType=VARCHAR}"],"delete":["300","      delete from ce_activity where component_uuid=#{rootProjectUuid,jdbcType=VARCHAR}"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/purge\/PurgeMapper.java":[{"add":["86","  void deleteCeActivityByProjectUuid(@Param(\"projectUuid\") String projectUuid);","87","","88","  void deleteCeQueueByProjectUuid(@Param(\"projectUuid\") String projectUuid);"],"delete":["86","  void deleteCeActivityByProjectUuid(String projectUuid);"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/purge\/PurgeDaoTest.java":[{"add":["26","import org.apache.commons.lang.math.RandomUtils;","38","import org.sonar.db.ce.CeQueueDto.Status;","86","      new IdUuidPair(THE_PROJECT_ID, \"ABCD\"), new String[] {Scopes.DIRECTORY, Scopes.FILE}, 30, System2.INSTANCE, Collections.emptyList());","148","    insertCeActivity(projectToBeDeleted);","149","    insertCeActivity(anotherLivingProject);","159","  public void delete_tasks_in_ce_queue_when_deleting_project() {","160","    ComponentDto projectToBeDeleted = dbTester.components().insertProject();","161","    ComponentDto anotherLivingProject = dbTester.components().insertProject();","162","","163","    \/\/ Insert 3 rows in CE_QUEUE: two for the project that will be deleted (in order to check that status","164","    \/\/ is not involved in deletion), and one on another project","165","    dbClient.ceQueueDao().insert(dbSession, createCeQueue(projectToBeDeleted, Status.PENDING));","166","    dbClient.ceQueueDao().insert(dbSession, createCeQueue(projectToBeDeleted, Status.IN_PROGRESS));","167","    dbClient.ceQueueDao().insert(dbSession, createCeQueue(anotherLivingProject, Status.PENDING));","168","    dbSession.commit();","169","","170","    underTest.deleteProject(dbSession, projectToBeDeleted.uuid());","171","    dbSession.commit();","172","","173","    assertThat(dbTester.countRowsOfTable(\"ce_queue\")).isEqualTo(1);","174","    assertThat(dbTester.countSql(\"select count(*) from ce_queue where component_uuid='\" + projectToBeDeleted.uuid() + \"'\")).isEqualTo(0);","175","  }","176","","177","  @Test","245","  private CeQueueDto createCeQueue(ComponentDto component, Status status) {","249","    queueDto.setComponentUuid(component.uuid());","252","    queueDto.setStatus(status);","253","    return queueDto;","254","  }","255","","256","  private CeActivityDto insertCeActivity(ComponentDto component) {","257","    Status unusedStatus = Status.values()[RandomUtils.nextInt(Status.values().length)];","258","    CeQueueDto queueDto = createCeQueue(component, unusedStatus);"],"delete":["84","      new IdUuidPair(THE_PROJECT_ID, \"ABCD\"), new String[]{Scopes.DIRECTORY, Scopes.FILE}, 30, System2.INSTANCE, Collections.emptyList());","146","    insertCeActivity(projectToBeDeleted.uuid());","147","    insertCeActivity(anotherLivingProject.uuid());","224","  private CeActivityDto insertCeActivity(String componentUuid) {","228","    queueDto.setComponentUuid(componentUuid);"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/purge\/PurgeDao.java":[{"add":["160","    commands.deleteCeQueue(rootUuid);"],"delete":[]}]}},"497c52c32eec22b058284e3d51ff775f3be2cbcc":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/home\/PageHeader.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/home\/__tests__\/PageHeader-test.tsx":"ADD","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/home\/__tests__\/__snapshots__\/PageHeader-test.tsx.snap":"ADD","sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/styles\/components\/page.css":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/home\/PageHeader.tsx":[{"add":["26","import { Alert } from '..\/..\/..\/components\/ui\/Alert';","45","export class PageHeader extends React.PureComponent<Props, State> {","79","    const { actions, languages, organization, profiles } = this.props;","84","        {actions.create && (","86","            <Button","87","              disabled={languages.length === 0}","88","              id=\"quality-profiles-create\"","89","              onClick={this.handleCreateClick}>","98","            {languages.length === 0 && (","99","              <Alert className=\"spacer-top\" variant=\"warning\">","100","                {translate('quality_profiles.no_languages_available')}","101","              <\/Alert>","102","            )}","124","            organization={organization}","130","            languages={languages}","133","            organization={organization}","134","            profiles={profiles}"],"delete":["44","class PageHeader extends React.PureComponent<Props, State> {","82","        {this.props.actions.create && (","84","            <Button id=\"quality-profiles-create\" onClick={this.handleCreateClick}>","114","            organization={this.props.organization}","120","            languages={this.props.languages}","123","            organization={this.props.organization}","124","            profiles={this.props.profiles}"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/home\/__tests__\/PageHeader-test.tsx":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/home\/__tests__\/__snapshots__\/PageHeader-test.tsx.snap":[{"add":[],"delete":[]}],"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["1143","quality_profiles.no_languages_available=There are no languages available. You cannot create a new profile."],"delete":[]}],"server\/sonar-web\/src\/main\/js\/app\/styles\/components\/page.css":[{"add":["111","  text-align: right;"],"delete":[]}]}},"7e7b3471c9aef526a64325bb60755e9a45b42ade":{"changes":{"server\/sonar-docs\/src\/layouts\/layout.css":"MODIFY","server\/sonar-docs\/src\/components\/__tests__\/VersionSelect-test.tsx":"ADD","server\/sonar-docs\/src\/components\/__tests__\/Sidebar-test.tsx":"MODIFY","server\/sonar-docs\/src\/components\/VersionSelect.tsx":"MODIFY","server\/sonar-docs\/src\/components\/Sidebar.tsx":"MODIFY","server\/sonar-docs\/src\/components\/__tests__\/__snapshots__\/VersionSelect-test.tsx.snap":"ADD","server\/sonar-docs\/src\/@types\/types.d.ts":"MODIFY","server\/sonar-docs\/src\/components\/__tests__\/__snapshots__\/Sidebar-test.tsx.snap":"MODIFY","server\/sonar-docs\/static\/DocsVersions.json":"MODIFY"},"diff":{"server\/sonar-docs\/src\/layouts\/layout.css":[{"add":["495","  text-align: left;","497","  white-space: nowrap;"],"delete":["495","  text-align: center;"]}],"server\/sonar-docs\/src\/components\/__tests__\/VersionSelect-test.tsx":[{"add":[],"delete":[]}],"server\/sonar-docs\/src\/components\/__tests__\/Sidebar-test.tsx":[{"add":["61","    { \"value\": \"3.0\", \"current\": true },","62","    { \"value\": \"2.0\", \"current\": false, \"lts\": true },","67","it('should render correctly', async () => {","69","  await new Promise(setImmediate);","70","","71","  expect(wrapper).toMatchSnapshot('default');","72","  expect(wrapper.setProps({ version: '1.0' })).toMatchSnapshot('show warning');","73","  expect(wrapper.setProps({ version: '2.0' })).toMatchSnapshot('lts');","77","  return shallow<Sidebar>(","106","      version=\"3.0\""],"delete":["61","    { \"value\": \"2.0\", \"current\": true },","66","it('should render correctly', () => {","68","  expect(wrapper).toMatchSnapshot();","72","  return shallow(","101","      version=\"2.0\""]}],"server\/sonar-docs\/src\/components\/VersionSelect.tsx":[{"add":["64","                      <span className={version.current || version.lts ? 'current' : ''}>","65","                        {version.value + (version.lts ? ' LTS' : '')}","66","                      <\/span>"],"delete":["64","                      <span className={version.current ? 'current' : ''}>{version.value}<\/span>"]}],"server\/sonar-docs\/src\/components\/Sidebar.tsx":[{"add":["167","    const { version } = this.props;","168","","170","    const ltsVersion = versions.find(v => v.lts);","171","","173","      currentVersion && version === 'latest' ? currentVersion.value : version;","175","    const isOnLTSVersion = ltsVersion && version === ltsVersion.value;","176","","184","              src={`\/${version}\/images\/SonarQubeIcon.svg`}","194","          {this.state.loaded && !isOnCurrentVersion && !isOnLTSVersion && (","196","              This is an archived version of the doc for <b>SonarQube version {version}<\/b>.{' '}","197","              <a href=\"\/\">See Documentation<\/a> for current functionnality.","214","            <img alt=\"Community\" src={`\/${version}\/images\/community.svg`} \/> Community","221","            <img alt=\"Twitter\" src={`\/${version}\/images\/twitter.svg`} \/>","228","            <img alt=\"Product News\" src={`\/${version}\/images\/newspaper.svg`} \/>"],"delete":["169","      currentVersion && this.props.version === 'latest' ? currentVersion.value : this.props.version;","178","              src={`\/${this.props.version}\/images\/SonarQubeIcon.svg`}","188","          {this.state.loaded && !isOnCurrentVersion && (","190","              This is an archived version of the doc for{' '}","191","              <b>SonarQube version {this.props.version}<\/b>. <a href=\"\/\">See Documentation<\/a> for","192","              current functionnality.","209","            <img alt=\"Community\" src={`\/${this.props.version}\/images\/community.svg`} \/> Community","216","            <img alt=\"Twitter\" src={`\/${this.props.version}\/images\/twitter.svg`} \/>","223","            <img alt=\"Product News\" src={`\/${this.props.version}\/images\/newspaper.svg`} \/>"]}],"server\/sonar-docs\/src\/components\/__tests__\/__snapshots__\/VersionSelect-test.tsx.snap":[{"add":[],"delete":[]}],"server\/sonar-docs\/src\/@types\/types.d.ts":[{"add":["23","  lts?: boolean;"],"delete":[]}],"server\/sonar-docs\/src\/components\/__tests__\/__snapshots__\/Sidebar-test.tsx.snap":[{"add":["2","exports[`should render correctly: default 1`] = `","3","<div","4","  className=\"page-sidebar\"","5",">","6","  <div","7","    className=\"sidebar-header\"","8","  >","9","    <ForwardRef","10","      to=\"\/\"","11","    >","12","      <img","13","        alt=\"Continuous Code Quality\"","14","        className=\"sidebar-logo\"","15","        src=\"\/3.0\/images\/SonarQubeIcon.svg\"","16","        title=\"Continuous Code Quality\"","17","        width=\"160\"","18","      \/>","19","    <\/ForwardRef>","20","    <VersionSelect","21","      isOnCurrentVersion={true}","22","      selectedVersionValue=\"3.0\"","23","      versions={","24","        Array [","25","          Object {","26","            \"current\": true,","27","            \"value\": \"3.0\",","28","          },","29","          Object {","30","            \"current\": false,","31","            \"lts\": true,","32","            \"value\": \"2.0\",","33","          },","34","          Object {","35","            \"current\": false,","36","            \"value\": \"1.0\",","37","          },","38","        ]","39","      }","40","    \/>","41","  <\/div>","42","  <div","43","    className=\"page-indexes\"","44","  >","45","    <Search","46","      navigation={","47","        Array [","48","          \"\/foo\/\",","49","          Object {","50","            \"children\": Array [","51","              \"\/foo\/bar\/\",","52","              \"\/foo\/baz\/\",","53","              Object {","54","                \"children\": Array [","55","                  \"\/foo\/baz\/bar\/\",","56","                  \"\/foo\/baz\/foo\/\",","57","                  Object {","58","                    \"children\": Array [","59","                      \"\/foo\/baz\/foo\/bar\/\",","60","                      \"\/foo\/baz\/foo\/baz\",","61","                    ],","62","                    \"title\": \"Foo Baz Foo subs\",","63","                  },","64","                ],","65","                \"title\": \"Foo Baz subs\",","66","              },","67","            ],","68","            \"title\": \"Foo subs\",","69","          },","70","          \"\/bar\/\",","71","          Object {","72","            \"children\": Array [","73","              Object {","74","                \"title\": \"External link 1\",","75","                \"url\": \"http:\/\/example.com\/1\",","76","              },","77","              \"\/bar\/foo\/\",","78","            ],","79","            \"title\": \"Bar subs\",","80","          },","81","          Object {","82","            \"title\": \"External link 2\",","83","            \"url\": \"http:\/\/example.com\/2\",","84","          },","85","        ]","86","      }","87","      onResultsChange={[Function]}","88","      pages={","89","        Array [","90","          Object {","91","            \"fields\": Object {","92","              \"slug\": \"\/foo\/\",","93","            },","94","            \"frontmatter\": Object {","95","              \"title\": \"Foo\",","96","            },","97","          },","98","          Object {","99","            \"fields\": Object {","100","              \"slug\": \"\/foo\/baz\/bar\",","101","            },","102","            \"frontmatter\": Object {","103","              \"title\": \"Foo Baz Bar\",","104","            },","105","          },","106","          Object {","107","            \"fields\": Object {","108","              \"slug\": \"\/bar\/\",","109","            },","110","            \"frontmatter\": Object {","111","              \"title\": \"Bar\",","112","            },","113","          },","114","        ]","115","      }","116","    \/>","117","    <nav>","118","      <PageLink","119","        className=\"page-indexes-link\"","120","        key=\"\/foo\/\"","121","        location={","122","          Object {","123","            \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","124","          }","125","        }","126","        node={","127","          Object {","128","            \"fields\": Object {","129","              \"slug\": \"\/foo\/\",","130","            },","131","            \"frontmatter\": Object {","132","              \"title\": \"Foo\",","133","            },","134","          }","135","        }","136","      \/>","137","      <CategoryLink","138","        key=\"Foo subs\"","139","        location={","140","          Object {","141","            \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","142","          }","143","        }","144","        openByDefault={true}","145","        title=\"Foo subs\"","146","      >","147","        <CategoryLink","148","          key=\"Foo Baz subs\"","149","          location={","150","            Object {","151","              \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","152","            }","153","          }","154","          openByDefault={true}","155","          title=\"Foo Baz subs\"","156","        >","157","          <Component \/>","158","          <CategoryLink","159","            key=\"Foo Baz Foo subs\"","160","            location={","161","              Object {","162","                \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","163","              }","164","            }","165","            openByDefault={true}","166","            title=\"Foo Baz Foo subs\"","167","          \/>","168","        <\/CategoryLink>","169","      <\/CategoryLink>","170","      <PageLink","171","        className=\"page-indexes-link\"","172","        key=\"\/bar\/\"","173","        location={","174","          Object {","175","            \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","176","          }","177","        }","178","        node={","179","          Object {","180","            \"fields\": Object {","181","              \"slug\": \"\/bar\/\",","182","            },","183","            \"frontmatter\": Object {","184","              \"title\": \"Bar\",","185","            },","186","          }","187","        }","188","      \/>","189","      <CategoryLink","190","        key=\"Bar subs\"","191","        location={","192","          Object {","193","            \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","194","          }","195","        }","196","        openByDefault={false}","197","        title=\"Bar subs\"","198","      >","199","        <ExternalLink","200","          external=\"http:\/\/example.com\/1\"","201","          key=\"External link 1\"","202","          title=\"External link 1\"","203","        \/>","204","      <\/CategoryLink>","205","      <ExternalLink","206","        external=\"http:\/\/example.com\/2\"","207","        key=\"External link 2\"","208","        title=\"External link 2\"","209","      \/>","210","    <\/nav>","211","  <\/div>","212","  <div","213","    className=\"sidebar-footer\"","214","  >","215","    <a","216","      href=\"https:\/\/www.sonarqube.org\/\"","217","      rel=\"noopener noreferrer\"","218","      target=\"_blank\"","219","    >","220","      <DownloadIcon \/>","221","       SonarQube","222","    <\/a>","223","    <a","224","      href=\"https:\/\/community.sonarsource.com\/\"","225","      rel=\"noopener noreferrer\"","226","      target=\"_blank\"","227","    >","228","      <img","229","        alt=\"Community\"","230","        src=\"\/3.0\/images\/community.svg\"","231","      \/>","232","       Community","233","    <\/a>","234","    <a","235","      className=\"icon-only\"","236","      href=\"https:\/\/twitter.com\/SonarQube\"","237","      rel=\"noopener noreferrer\"","238","      target=\"_blank\"","239","    >","240","      <img","241","        alt=\"Twitter\"","242","        src=\"\/3.0\/images\/twitter.svg\"","243","      \/>","244","    <\/a>","245","    <a","246","      className=\"icon-only\"","247","      href=\"https:\/\/www.sonarqube.org\/whats-new\/\"","248","      rel=\"noopener noreferrer\"","249","      target=\"_blank\"","250","    >","251","      <img","252","        alt=\"Product News\"","253","        src=\"\/3.0\/images\/newspaper.svg\"","254","      \/>","255","      <span","256","        className=\"tooltip\"","257","      >","258","        Product News","259","      <\/span>","260","    <\/a>","261","  <\/div>","262","<\/div>","263","`;","264","","265","exports[`should render correctly: lts 1`] = `","284","      isOnCurrentVersion={false}","286","      versions={","287","        Array [","288","          Object {","289","            \"current\": true,","290","            \"value\": \"3.0\",","291","          },","292","          Object {","293","            \"current\": false,","294","            \"lts\": true,","295","            \"value\": \"2.0\",","296","          },","297","          Object {","298","            \"current\": false,","299","            \"value\": \"1.0\",","300","          },","301","        ]","302","      }","527","","528","exports[`should render correctly: show warning 1`] = `","529","<div","530","  className=\"page-sidebar\"","531",">","532","  <div","533","    className=\"sidebar-header\"","534","  >","535","    <ForwardRef","536","      to=\"\/\"","537","    >","538","      <img","539","        alt=\"Continuous Code Quality\"","540","        className=\"sidebar-logo\"","541","        src=\"\/1.0\/images\/SonarQubeIcon.svg\"","542","        title=\"Continuous Code Quality\"","543","        width=\"160\"","544","      \/>","545","    <\/ForwardRef>","546","    <VersionSelect","547","      isOnCurrentVersion={false}","548","      selectedVersionValue=\"1.0\"","549","      versions={","550","        Array [","551","          Object {","552","            \"current\": true,","553","            \"value\": \"3.0\",","554","          },","555","          Object {","556","            \"current\": false,","557","            \"lts\": true,","558","            \"value\": \"2.0\",","559","          },","560","          Object {","561","            \"current\": false,","562","            \"value\": \"1.0\",","563","          },","564","        ]","565","      }","566","    \/>","567","    <div","568","      className=\"alert alert-warning\"","569","    >","570","      This is an archived version of the doc for ","571","      <b>","572","        SonarQube version ","573","        1.0","574","      <\/b>","575","      .","576","       ","577","      <a","578","        href=\"\/\"","579","      >","580","        See Documentation","581","      <\/a>","582","       for current functionnality.","583","    <\/div>","584","  <\/div>","585","  <div","586","    className=\"page-indexes\"","587","  >","588","    <Search","589","      navigation={","590","        Array [","591","          \"\/foo\/\",","592","          Object {","593","            \"children\": Array [","594","              \"\/foo\/bar\/\",","595","              \"\/foo\/baz\/\",","596","              Object {","597","                \"children\": Array [","598","                  \"\/foo\/baz\/bar\/\",","599","                  \"\/foo\/baz\/foo\/\",","600","                  Object {","601","                    \"children\": Array [","602","                      \"\/foo\/baz\/foo\/bar\/\",","603","                      \"\/foo\/baz\/foo\/baz\",","604","                    ],","605","                    \"title\": \"Foo Baz Foo subs\",","606","                  },","607","                ],","608","                \"title\": \"Foo Baz subs\",","609","              },","610","            ],","611","            \"title\": \"Foo subs\",","612","          },","613","          \"\/bar\/\",","614","          Object {","615","            \"children\": Array [","616","              Object {","617","                \"title\": \"External link 1\",","618","                \"url\": \"http:\/\/example.com\/1\",","619","              },","620","              \"\/bar\/foo\/\",","621","            ],","622","            \"title\": \"Bar subs\",","623","          },","624","          Object {","625","            \"title\": \"External link 2\",","626","            \"url\": \"http:\/\/example.com\/2\",","627","          },","628","        ]","629","      }","630","      onResultsChange={[Function]}","631","      pages={","632","        Array [","633","          Object {","634","            \"fields\": Object {","635","              \"slug\": \"\/foo\/\",","636","            },","637","            \"frontmatter\": Object {","638","              \"title\": \"Foo\",","639","            },","640","          },","641","          Object {","642","            \"fields\": Object {","643","              \"slug\": \"\/foo\/baz\/bar\",","644","            },","645","            \"frontmatter\": Object {","646","              \"title\": \"Foo Baz Bar\",","647","            },","648","          },","649","          Object {","650","            \"fields\": Object {","651","              \"slug\": \"\/bar\/\",","652","            },","653","            \"frontmatter\": Object {","654","              \"title\": \"Bar\",","655","            },","656","          },","657","        ]","658","      }","659","    \/>","660","    <nav>","661","      <PageLink","662","        className=\"page-indexes-link\"","663","        key=\"\/foo\/\"","664","        location={","665","          Object {","666","            \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","667","          }","668","        }","669","        node={","670","          Object {","671","            \"fields\": Object {","672","              \"slug\": \"\/foo\/\",","673","            },","674","            \"frontmatter\": Object {","675","              \"title\": \"Foo\",","676","            },","677","          }","678","        }","679","      \/>","680","      <CategoryLink","681","        key=\"Foo subs\"","682","        location={","683","          Object {","684","            \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","685","          }","686","        }","687","        openByDefault={true}","688","        title=\"Foo subs\"","689","      >","690","        <CategoryLink","691","          key=\"Foo Baz subs\"","692","          location={","693","            Object {","694","              \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","695","            }","696","          }","697","          openByDefault={true}","698","          title=\"Foo Baz subs\"","699","        >","700","          <Component \/>","701","          <CategoryLink","702","            key=\"Foo Baz Foo subs\"","703","            location={","704","              Object {","705","                \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","706","              }","707","            }","708","            openByDefault={true}","709","            title=\"Foo Baz Foo subs\"","710","          \/>","711","        <\/CategoryLink>","712","      <\/CategoryLink>","713","      <PageLink","714","        className=\"page-indexes-link\"","715","        key=\"\/bar\/\"","716","        location={","717","          Object {","718","            \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","719","          }","720","        }","721","        node={","722","          Object {","723","            \"fields\": Object {","724","              \"slug\": \"\/bar\/\",","725","            },","726","            \"frontmatter\": Object {","727","              \"title\": \"Bar\",","728","            },","729","          }","730","        }","731","      \/>","732","      <CategoryLink","733","        key=\"Bar subs\"","734","        location={","735","          Object {","736","            \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","737","          }","738","        }","739","        openByDefault={false}","740","        title=\"Bar subs\"","741","      >","742","        <ExternalLink","743","          external=\"http:\/\/example.com\/1\"","744","          key=\"External link 1\"","745","          title=\"External link 1\"","746","        \/>","747","      <\/CategoryLink>","748","      <ExternalLink","749","        external=\"http:\/\/example.com\/2\"","750","        key=\"External link 2\"","751","        title=\"External link 2\"","752","      \/>","753","    <\/nav>","754","  <\/div>","755","  <div","756","    className=\"sidebar-footer\"","757","  >","758","    <a","759","      href=\"https:\/\/www.sonarqube.org\/\"","760","      rel=\"noopener noreferrer\"","761","      target=\"_blank\"","762","    >","763","      <DownloadIcon \/>","764","       SonarQube","765","    <\/a>","766","    <a","767","      href=\"https:\/\/community.sonarsource.com\/\"","768","      rel=\"noopener noreferrer\"","769","      target=\"_blank\"","770","    >","771","      <img","772","        alt=\"Community\"","773","        src=\"\/1.0\/images\/community.svg\"","774","      \/>","775","       Community","776","    <\/a>","777","    <a","778","      className=\"icon-only\"","779","      href=\"https:\/\/twitter.com\/SonarQube\"","780","      rel=\"noopener noreferrer\"","781","      target=\"_blank\"","782","    >","783","      <img","784","        alt=\"Twitter\"","785","        src=\"\/1.0\/images\/twitter.svg\"","786","      \/>","787","    <\/a>","788","    <a","789","      className=\"icon-only\"","790","      href=\"https:\/\/www.sonarqube.org\/whats-new\/\"","791","      rel=\"noopener noreferrer\"","792","      target=\"_blank\"","793","    >","794","      <img","795","        alt=\"Product News\"","796","        src=\"\/1.0\/images\/newspaper.svg\"","797","      \/>","798","      <span","799","        className=\"tooltip\"","800","      >","801","        Product News","802","      <\/span>","803","    <\/a>","804","  <\/div>","805","<\/div>","806","`;"],"delete":["2","exports[`should render correctly 1`] = `","21","      isOnCurrentVersion={true}","23","      versions={Array []}"]}],"server\/sonar-docs\/static\/DocsVersions.json":[{"add":["3","  { \"value\": \"7.1\", \"current\": false, \"lts\": true },"],"delete":["3","  { \"value\": \"7.1\", \"current\": false },"]}]}},"1ff9a01fd6e822793ef223f9ce259b15d17eecc4":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/projectActivity.css":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/projectActivity.css":[{"add":["114",".project-activity-event * {","115","  text-indent: 0;","116","}","117",""],"delete":[]}]}},"251688c71106c7dd8c58a04be9a6f4e3e42ca37d":{"changes":{"\/dev\/null":"DELETE","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/PersistDuplicationDataStepTest.java":"ADD","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/ReportComputationSteps.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/PersistDuplicationDataStep.java":"ADD"},"diff":{"\/dev\/null":[{"add":[],"delete":[]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/PersistDuplicationDataStepTest.java":[{"add":[],"delete":[]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/ReportComputationSteps.java":[{"add":["95","    PersistDuplicationDataStep.class,"],"delete":["69","    DuplicationDataMeasuresStep.class,"]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/PersistDuplicationDataStep.java":[{"add":[],"delete":[]}]}},"a7b63cbad6638766948fe3d76dc98f26b4798bdc":{"changes":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/controllers\/users_controller.rb":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/controllers\/users_controller.rb":[{"add":["47","      Internal.users_api.index()"],"delete":[]}]}},"318f02e62b10548b219929773666da89a8b72685":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/styles.css":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/styles.css":[{"add":["74",".source-line-filtered:hover .source-line-code {","75","  background-color: #f1e8cb !important;","76","}","77","","82",".source-line-filtered.source-line-filtered-dark:hover .source-line-code {","83","  background-color: #eaddb2 !important;","84","}","85",""],"delete":[]}]}},"aac58f3d481f23639a900489cd52857c0f16b1b2":{"changes":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/project\/history.html.erb":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/project\/history.html.erb":[{"add":["145","          <%= image_tag \"event_profile.png\", :alt => message('project_history.col.profile') + \": \" + profile_event.name if profile_event -%>"],"delete":["145","          <%= image_tag \"event_profile.png\", :alt => message('project_history.col.profile') + \": \" + profile_event.description_text if profile_event -%>"]}]}},"b11488eb1b9f2aafa3233397794e8df347078f86":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/about\/components\/__tests__\/__snapshots__\/AboutApp-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/about\/components\/AboutApp.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/about\/components\/__tests__\/__snapshots__\/EntryIssueTypes-test.tsx.snap":"ADD","server\/sonar-web\/src\/main\/js\/apps\/about\/components\/EntryIssueTypes.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/about\/components\/__tests__\/EntryIssueTypes-test.tsx":"ADD"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/about\/components\/__tests__\/__snapshots__\/AboutApp-test.tsx.snap":[{"add":[],"delete":["62","          securityHotspots={5}"]}],"server\/sonar-web\/src\/main\/js\/apps\/about\/components\/AboutApp.tsx":[{"add":[],"delete":["117","    let securityHotspots;","122","      securityHotspots = issueTypes['SECURITY_HOTSPOT'] && issueTypes['SECURITY_HOTSPOT'].count;","149","                securityHotspots={securityHotspots}"]}],"server\/sonar-web\/src\/main\/js\/apps\/about\/components\/__tests__\/__snapshots__\/EntryIssueTypes-test.tsx.snap":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/about\/components\/EntryIssueTypes.tsx":[{"add":["28","export interface EntryIssueTypesProps {","40","}: EntryIssueTypesProps) {"],"delete":["23","import SecurityHotspotIcon from 'sonar-ui-common\/components\/icons\/SecurityHotspotIcon';","29","interface Props {","33","  securityHotspots?: number;","41","  securityHotspots,","43","}: Props) {","100","            <tr>","101","              <td className=\"about-page-issue-type-number\">","102","                <Link","103","                  className=\"about-page-issue-type-link\"","104","                  to={getIssuesUrl({","105","                    resolved: 'false',","106","                    types: 'SECURITY_HOTSPOT',","107","                    s: 'CREATION_DATE'","108","                  })}>","109","                  {formatMeasure(securityHotspots, 'SHORT_INT')}","110","                <\/Link>","111","              <\/td>","112","              <td>","113","                <span className=\"little-spacer-right\">","114","                  <SecurityHotspotIcon \/>","115","                <\/span>","116","                {translate('issue.type.SECURITY_HOTSPOT.plural')}","117","              <\/td>","118","            <\/tr>"]}],"server\/sonar-web\/src\/main\/js\/apps\/about\/components\/__tests__\/EntryIssueTypes-test.tsx":[{"add":[],"delete":[]}]}},"c992c853f2efb2f7fcb72471af5f69feed99ba39":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/components\/__tests__\/MeasureHeader-test.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/component-measures\/components\/MeasureHeader.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/components\/__tests__\/MeasureHeader-test.js":[{"add":["92","it('should not render link to activity page for files', () => {","93","  expect(","94","    shallow(<MeasureHeader {...PROPS} \/>)","95","      .find('IconHistory')","96","      .exists()","97","  ).toBeTruthy();","98","","99","  expect(","100","    shallow(<MeasureHeader {...PROPS} component={{ ...PROPS.component, qualifier: 'FIL' }} \/>)","101","      .find('IconHistory')","102","      .exists()","103","  ).toBeFalsy();","104","});","105",""],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/components\/MeasureHeader.js":[{"add":["48","  const hasHistory = component.qualifier !== 'FIL' && component.qualifier !== 'UTS';","73","          {!isDiff &&","74","            hasHistory && (","75","              <Tooltip","76","                overlay={translate('component_measures.show_metric_history')}","77","                placement=\"right\">","78","                <Link","79","                  className=\"js-show-history spacer-left button button-small\"","80","                  to={getMeasureHistoryUrl(component.key, metric.key, branchLike)}>","81","                  <HistoryIcon \/>","82","                <\/Link>","83","              <\/Tooltip>","84","            )}"],"delete":["72","          {!isDiff && (","73","            <Tooltip","74","              overlay={translate('component_measures.show_metric_history')}","75","              placement=\"right\">","76","              <Link","77","                className=\"js-show-history spacer-left button button-small\"","78","                to={getMeasureHistoryUrl(component.key, metric.key, branchLike)}>","79","                <HistoryIcon \/>","80","              <\/Link>","81","            <\/Tooltip>","82","          )}"]}]}},"5bc1fd00c729e6bec1d5b38e42235dcf7ff7d16a":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/es\/EsUtils.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/RuleServiceMediumTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/es\/EsUtilsTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/es\/EsUtils.java":[{"add":["46","","47","  \/**","48","   * See https:\/\/www.elastic.co\/guide\/en\/elasticsearch\/reference\/current\/query-dsl-regexp-query.html","49","   *\/","50","  private static final Pattern SPECIAL_REGEX_CHARS = Pattern.compile(\"[#@&~<>\\\"{}()\\\\[\\\\].+*?^$\\\\\\\\|]\");"],"delete":["46","  private static final Pattern SPECIAL_REGEX_CHARS = Pattern.compile(\"[{}()\\\\[\\\\].+*?^$\\\\\\\\|]\");"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/RuleServiceMediumTest.java":[{"add":["105","    assertThat(service.listTags(\"<foo>\", 10)).isEmpty();"],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/es\/EsUtilsTest.java":[{"add":["90","    assertThat(escapeSpecialRegexChars(\"<\")).isEqualTo(\"\\\\<\");","91","    assertThat(escapeSpecialRegexChars(\">\")).isEqualTo(\"\\\\>\");","92","    assertThat(escapeSpecialRegexChars(\"\\\"\")).isEqualTo(\"\\\\\\\"\");","93","    assertThat(escapeSpecialRegexChars(\"#\")).isEqualTo(\"\\\\#\");","94","    assertThat(escapeSpecialRegexChars(\"~\")).isEqualTo(\"\\\\~\");","95","    assertThat(escapeSpecialRegexChars(\"$\")).isEqualTo(\"\\\\$\");","96","    assertThat(escapeSpecialRegexChars(\"&\")).isEqualTo(\"\\\\&\");","97","    assertThat(escapeSpecialRegexChars(\"?\")).isEqualTo(\"\\\\?\");","98","    assertThat(escapeSpecialRegexChars(\"a bit of | & #<\\\"$ .* ^ everything\")).isEqualTo(\"a bit of \\\\| \\\\& \\\\#\\\\<\\\\\\\"\\\\$ \\\\.\\\\* \\\\^ everything\");"],"delete":["90","    assertThat(escapeSpecialRegexChars(\"a bit of | $ .* ^ everything\")).isEqualTo(\"a bit of \\\\| \\\\$ \\\\.\\\\* \\\\^ everything\");"]}]}},"fb298d9f2f06625cb15a5a2d87f45ca4a3c5452e":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/RegisterRulesTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/RegisterRules.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/RegisterRulesTest.java":[{"add":["49","import static com.google.common.collect.Sets.newHashSet;","133","    rule1.setTags(newHashSet(\"usertag1\", \"usertag2\"));","178","  public void add_new_tag() {","179","    execute(new RulesDefinition() {","180","      @Override","181","      public void define(RulesDefinition.Context context) {","182","        RulesDefinition.NewRepository repo = context.createRepository(\"fake\", \"java\");","183","        repo.createRule(\"rule1\")","184","          .setName(\"Rule One\")","185","          .setHtmlDescription(\"Description of Rule One\")","186","          .setTags(\"tag1\");","187","        repo.done();","188","      }","189","    });","190","","191","    RuleDto rule = dbClient.ruleDao().selectOrFailByKey(dbTester.getSession(), RULE_KEY1);","192","    assertThat(rule.getSystemTags()).containsOnly(\"tag1\");","193","","194","    execute(new RulesDefinition() {","195","      @Override","196","      public void define(RulesDefinition.Context context) {","197","        RulesDefinition.NewRepository repo = context.createRepository(\"fake\", \"java\");","198","        repo.createRule(\"rule1\")","199","          .setName(\"Rule One\")","200","          .setHtmlDescription(\"Description of Rule One\")","201","          .setTags(\"tag1\", \"tag2\");","202","        repo.done();","203","      }","204","    });","205","","206","    rule = dbClient.ruleDao().selectOrFailByKey(dbTester.getSession(), RULE_KEY1);","207","    assertThat(rule.getSystemTags()).containsOnly(\"tag1\", \"tag2\");","208","  }","209","","210","  @Test","368","  @Test","369","  public void remove_system_tags_when_plugin_does_not_provide_any() {","370","    \/\/ Rule already exists in DB, with some system tags","371","    dbClient.ruleDao().insert(dbTester.getSession(), new RuleDto()","372","      .setRuleKey(\"rule1\")","373","      .setRepositoryKey(\"findbugs\")","374","      .setName(\"Rule One\")","375","      .setDescription(\"Rule one description\")","376","      .setDescriptionFormat(RuleDto.Format.HTML)","377","      .setSystemTags(newHashSet(\"tag1\", \"tag2\"))","378","      );","379","    dbTester.getSession().commit();","380","","381","    \/\/ Synchronize rule without tag","382","    execute(new FindbugsRepository());","383","","384","    List<RuleDto> rules = dbClient.ruleDao().selectAll(dbTester.getSession());","385","    assertThat(rules).hasSize(1);","386","    RuleDto result = rules.get(0);","387","    assertThat(result.getKey()).isEqualTo(RuleKey.of(\"findbugs\", \"rule1\"));","388","    assertThat(result.getSystemTags()).isEmpty();","389","  }","390",""],"delete":["21","import com.google.common.collect.Sets;","133","    rule1.setTags(Sets.newHashSet(\"usertag1\", \"usertag2\"));"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/RegisterRules.java":[{"add":["61","import static com.google.common.collect.Sets.intersection;","79","    ActiveRuleIndexer activeRuleIndexer, Languages languages, System2 system2) {","346","    } else if (dto.getSystemTags().size() != ruleDef.tags().size() ||","347","      !dto.getSystemTags().containsAll(ruleDef.tags())","348","      || !intersection(dto.getTags(), ruleDef.tags()).isEmpty()) {"],"delete":["26","import com.google.common.collect.Sets;","79","                       ActiveRuleIndexer activeRuleIndexer, Languages languages, System2 system2) {","204","    if (!dto.getSystemTags().containsAll(def.tags())) {","205","      dto.setSystemTags(def.tags());","206","      changed = true;","207","    }","350","    } else if (!dto.getSystemTags().containsAll(ruleDef.tags())","351","      || !Sets.intersection(dto.getTags(), ruleDef.tags()).isEmpty()) {"]}]}},"7afe15b7747ac583e1837a582e276a10242c07af":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/create\/project\/__tests__\/__snapshots__\/CreateProjectModeSelection-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/create\/project\/CreateProjectModeSelection.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/create\/project\/__tests__\/__snapshots__\/CreateProjectModeSelection-test.tsx.snap":[{"add":["95","      className=\"button button-huge big-spacer-left display-flex-column create-project-mode-type-bbs disabled\"","96","      disabled={true}","158","      className=\"button button-huge big-spacer-left display-flex-column create-project-mode-type-bbs disabled\"","229","      className=\"button button-huge big-spacer-left display-flex-column create-project-mode-type-bbs disabled\""],"delete":["95","      className=\"button button-huge big-spacer-left display-flex-column create-project-mode-type-bbs\"","96","      disabled={false}","158","      className=\"button button-huge big-spacer-left display-flex-column create-project-mode-type-bbs\"","229","      className=\"button button-huge big-spacer-left display-flex-column create-project-mode-type-bbs\""]}],"server\/sonar-web\/src\/main\/js\/apps\/create\/project\/CreateProjectModeSelection.tsx":[{"add":["19","import * as classNames from 'classnames';","34","  const bbsBindingDisabled = bbsBindingCount !== 1 || loadingBindings;","61","          className={classNames(","62","            'button button-huge big-spacer-left display-flex-column create-project-mode-type-bbs',","63","            { disabled: bbsBindingDisabled }","64","          )}","65","          disabled={bbsBindingDisabled}","85","          {!loadingBindings && bbsBindingDisabled && ("],"delete":["59","          className=\"button button-huge big-spacer-left display-flex-column create-project-mode-type-bbs\"","60","          disabled={bbsBindingCount !== 1}","80","          {!loadingBindings && bbsBindingCount !== 1 && ("]}]}},"1e44d80e9c900ac61274c7c3ada3c4c2df3e10ee":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/activity-graph\/AddGraphMetric.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/activity-graph\/__tests__\/__snapshots__\/AddGraphMetric-test.tsx.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/activity-graph\/AddGraphMetric.tsx":[{"add":["128","        closeOnClick={false}","129","        closeOnClickOutside={true}"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/components\/activity-graph\/__tests__\/__snapshots__\/AddGraphMetric-test.tsx.snap":[{"add":["5","  closeOnClick={false}","6","  closeOnClickOutside={true}"],"delete":[]}]}},"4939863d74224188de391caf19a955322dc3f0b9":{"changes":{"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/component\/ComponentMapper.xml":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/component\/ComponentMapper.xml":[{"add":["394","    select p.copy_component_uuid","395","    from projects p","397","      p.enabled = ${_true}","398","      and p.project_uuid = #{projectViewUuid,jdbcType=VARCHAR}","399","      and p.module_uuid_path like #{viewUuidLikeQuery,jdbcType=VARCHAR}","400","      and p.qualifier = 'TRK'","401","      and p.copy_component_uuid is not null"],"delete":["394","    SELECT p.uuid FROM projects technical_projects","395","    INNER JOIN projects p on p.uuid=technical_projects.copy_component_uuid AND p.enabled=${_true}","397","      technical_projects.enabled=${_true}","398","      AND technical_projects.project_uuid = #{projectViewUuid,jdbcType=VARCHAR}","399","      AND technical_projects.module_uuid_path LIKE #{viewUuidLikeQuery,jdbcType=VARCHAR}"]}]}},"fc8e38bb33581bba60be1ef1403488051c0686fb":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/workflow\/State.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/workflow\/StateTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/workflow\/State.java":[{"add":["23","import java.util.Arrays;","24","import java.util.HashSet;","27","import java.util.stream.Collectors;","46","    Set<String> keys = new HashSet<>();","47","","48","    Arrays.stream(transitions)","49","      .filter(transition -> !keys.add(transition.key()))","50","      .findAny()","51","      .ifPresent(transition -> {","54","      });","58","    return Arrays.stream(outTransitions)","59","      .filter(transition -> !transition.automatic())","60","      .filter(transition -> transition.supports(issue))","61","      .collect(Collectors.toList());","66","    final Transition[] result = new Transition[1];","67","    Set<String> keys = new HashSet<>();","68","","69","    Arrays.stream(outTransitions)","70","      .filter(Transition::automatic)","71","      .filter(transition -> transition.supports(issue))","72","      .peek(transition -> result[0] = transition)","73","      .filter(transition -> !keys.add(transition.key()))","74","      .findAny()","75","      .ifPresent(transition -> {","76","        throw new IllegalArgumentException(\"Several automatic transitions are available for issue: \" + issue);","77","      });","78","","79","    return result[0];","83","    return Arrays.stream(outTransitions)","84","      .filter(transition -> transitionKey.equals(transition.key()))","85","      .findAny()","86","      .orElseThrow(() -> new IllegalArgumentException(\"Transition from state \" + key + \" does not exist: \" + transitionKey));"],"delete":["23","import com.google.common.collect.Lists;","24","import com.google.common.collect.Sets;","45","    Set<String> keys = Sets.newHashSet();","46","    for (Transition transition : transitions) {","47","      if (keys.contains(transition.key())) {","50","      }","51","      keys.add(transition.key());","52","    }","56","    List<Transition> result = Lists.newArrayList();","57","    for (Transition transition : outTransitions) {","58","      if (!transition.automatic() && transition.supports(issue)) {","59","        result.add(transition);","60","      }","61","    }","62","    return result;","67","    Transition result = null;","68","    for (Transition transition : outTransitions) {","69","      if (transition.automatic() && transition.supports(issue)) {","70","        if (result == null) {","71","          result = transition;","72","        } else {","73","          throw new IllegalStateException(\"Several automatic transitions are available for issue: \" + issue);","74","        }","75","      }","76","    }","77","    return result;","81","    for (Transition transition : outTransitions) {","82","      if (transitionKey.equals(transition.key())) {","83","        return transition;","84","      }","85","    }","86","    throw new IllegalStateException(\"Transition from state \" + key + \" does not exist: \" + transitionKey);"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/workflow\/StateTest.java":[{"add":["21","import org.junit.Rule;","23","import org.junit.rules.ExpectedException;","27","  @Rule","28","  public ExpectedException expectedException = ExpectedException.none();","29","","34","    expectedException.expect(IllegalArgumentException.class);","35","    expectedException.expectMessage(\"State key must be set\");","36","","37","    new State(\"\", new Transition[0]);","42","    expectedException.expect(IllegalArgumentException.class);","43","    expectedException.expectMessage(\"State key must be upper-case\");","44","","45","    new State(\"close\", new Transition[0]);","50","    expectedException.expect(IllegalArgumentException.class);","51","    expectedException.expectMessage(\"Transition 'close' is declared several times from the originating state 'CLOSE'\");","52","","53","    new State(\"CLOSE\", new Transition[] {t1, t1});","54","  }","55","","56","  @Test","57","  public void fail_when_transition_is_unknown() {","58","    State state = new State(\"VALIDATED\", new Transition[0]);","59","","60","    expectedException.expect(IllegalArgumentException.class);","61","    expectedException.expectMessage(\"Transition from state VALIDATED does not exist: Unknown Transition\");","62","","63","    state.transition(\"Unknown Transition\");"],"delete":["22","","23","import static org.assertj.core.api.Assertions.assertThat;","24","import static org.junit.Assert.fail;","32","    try {","33","      new State(\"\", new Transition[0]);","34","      fail();","35","    } catch (IllegalArgumentException e) {","36","      assertThat(e).hasMessage(\"State key must be set\");","37","    }","42","    try {","43","      new State(\"close\", new Transition[0]);","44","      fail();","45","    } catch (IllegalArgumentException e) {","46","      assertThat(e).hasMessage(\"State key must be upper-case\");","47","    }","52","    try {","53","      new State(\"CLOSE\", new Transition[] {t1, t1});","54","      fail();","55","    } catch (IllegalArgumentException e) {","56","      assertThat(e).hasMessage(\"Transition 'close' is declared several times from the originating state 'CLOSE'\");","57","    }"]}]}},"4bba4b305c806a47c6fcc39d41f7e57a44c4072e":{"changes":{"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/period\/NewCodePeriodResolver.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/LoadPeriodsStepTest.java":"MODIFY"},"diff":{"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/period\/NewCodePeriodResolver.java":[{"add":["83","    return newPeriod(NewCodePeriodType.SPECIFIC_ANALYSIS, value, baseline.getCreatedAt());","95","    if (versions.size() == 1 && projectVersion.equals(mostRecentVersion)) {","98","","110","    return newPeriod(NewCodePeriodType.NUMBER_OF_DAYS, String.valueOf((int) days), snapshot.getCreatedAt());","122","      .map(dto -> newPeriod(NewCodePeriodType.PREVIOUS_VERSION, null, dto.getCreatedAt()));","129","      .map(dto -> newPeriod(NewCodePeriodType.PREVIOUS_VERSION, dto.getProjectVersion(), dto.getCreatedAt()));","137","  private static Period newPeriod(NewCodePeriodType type, @Nullable String value, long date) {","138","    return new Period(type.name(), value, date);"],"delete":["83","    return newPeriod(NewCodePeriodType.SPECIFIC_ANALYSIS, value, Instant.ofEpochMilli(baseline.getCreatedAt()));","95","    if (versions.size() == 1) {","109","    return newPeriod(NewCodePeriodType.NUMBER_OF_DAYS, String.valueOf((int) days), Instant.ofEpochMilli(snapshot.getCreatedAt()));","121","      .map(dto -> newPeriod(NewCodePeriodType.PREVIOUS_VERSION, null, Instant.ofEpochMilli(dto.getCreatedAt())));","128","      .map(dto -> newPeriod(NewCodePeriodType.PREVIOUS_VERSION, dto.getProjectVersion(), Instant.ofEpochMilli(dto.getCreatedAt())));","136","  private static Period newPeriod(NewCodePeriodType type, @Nullable String value, Instant instant) {","137","    return new Period(type.name(), value, instant.toEpochMilli());"]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/LoadPeriodsStepTest.java":[{"add":["290","    dbTester.events().insertEvent(newEvent(analysis5).setName(\"1.1\").setCategory(CATEGORY_VERSION).setDate(analysis5.getCreatedAt()));","302","  public void load_previous_version_when_version_is_changing() {","303","    SnapshotDto analysis1 = dbTester.components().insertSnapshot(project, snapshot -> snapshot.setCreatedAt(1226379600000L).setProjectVersion(\"0.9\").setLast(false)); \/\/ 2008-11-11","304","    SnapshotDto analysis2 = dbTester.components().insertSnapshot(project, snapshot -> snapshot.setCreatedAt(1226494680000L).setProjectVersion(\"0.9\").setLast(true)); \/\/ 2008-11-12","305","","306","    dbTester.events().insertEvent(newEvent(analysis2).setName(\"0.9\").setCategory(CATEGORY_VERSION).setDate(analysis2.getCreatedAt()));","307","    setupRoot(project, \"1.0\");","308","    setProjectPeriod(project.uuid(), NewCodePeriodType.PREVIOUS_VERSION, null);","309","","310","    underTest.execute(new TestComputationStepContext());","311","","312","    assertPeriod(NewCodePeriodType.PREVIOUS_VERSION, \"0.9\", analysis2.getCreatedAt());","313","","314","    verifyDebugLogs(\"Resolving new code period by previous version: 0.9\");","315","  }","316","","317","  @Test","331","    SnapshotDto analysis3 = dbTester.components().insertSnapshot(project, snapshot -> snapshot.setCreatedAt(1227157200000L).setProjectVersion(\"1.1\").setLast(true)); \/\/ 2008-11-20","366","    assertPeriod(NewCodePeriodType.PREVIOUS_VERSION, \"0.9\", analysis.getCreatedAt());","367","    verifyDebugLogs(\"Resolving new code period by previous version: 0.9\");","394","    return new Object[][] {","402","    return new Object[][] {","414","    return new Object[][] {","422","    return new Object[][] {"],"delete":["290","    dbTester.events().insertEvent(newEvent(analysis5).setName(\"1.1\").setCategory(CATEGORY_VERSION).setDate(analysis4.getCreatedAt()));","315","    SnapshotDto analysis3 = dbTester.components().insertSnapshot(project, snapshot -> snapshot.setCreatedAt(1227157200000L).setProjectVersion(\"1.1\").setLast(false)); \/\/ 2008-11-20","318","    dbTester.events().insertEvent(newEvent(analysis3).setName(\"1.1\").setCategory(CATEGORY_VERSION));","351","    assertPeriod(NewCodePeriodType.PREVIOUS_VERSION, null, analysis.getCreatedAt());","352","    verifyDebugLogs(\"Resolving first analysis as new code period as there is only one existing version\");","379","    return new Object[][]{","387","    return new Object[][]{","399","    return new Object[][]{","407","    return new Object[][]{"]}]}},"96ec2c5fe19cd8d5801bf833f8e384055422ae7d":{"changes":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY"},"diff":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["2469","overview.badges.marketing.description.TRK=This badge lets you advertise that you're using SonarCloud for code quality."],"delete":[]}]}},"ee55e4492b069f30e5c25fa51e92170412f006d5":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/measure\/ws\/MetricDtoToWsMetric.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/measure\/ws\/ComponentActionTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/measure\/ws\/ComponentTreeActionTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/measure\/ws\/MetricDtoToWsMetric.java":[{"add":["24","import static org.sonar.core.util.Protobuf.setNullable;","37","    setNullable(metricDto.getDescription(), metric::setDescription);","38","    setNullable(metricDto.getDomain(), metric::setDomain);","45","    setNullable(metricDto.getDecimalScale(), metric::setDecimalScale);","46","    setNullable(metricDto.getBestValue(), bv -> metric.setBestValue(formatNumericalValue(bv, metricDto)));","47","    setNullable(metricDto.getWorstValue(), wv -> metric.setWorstValue(formatNumericalValue(wv, metricDto)));"],"delete":["36","    if (metricDto.getDescription() != null) {","37","      metric.setDescription(metricDto.getDescription());","38","    }","39","    metric.setDomain(metricDto.getDomain());","46","    if (metricDto.getDecimalScale() != null) {","47","      metric.setDecimalScale(metricDto.getDecimalScale());","48","    }","49","    if (metricDto.getBestValue() != null) {","50","      metric.setBestValue(formatNumericalValue(metricDto.getBestValue(), metricDto));","51","    }","52","    if (metricDto.getWorstValue() != null) {","53","      metric.setWorstValue(formatNumericalValue(metricDto.getWorstValue(), metricDto));","54","    }"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/measure\/ws\/ComponentActionTest.java":[{"add":["25","import org.sonar.api.measures.Metric.ValueType;","28","import org.sonar.api.server.ws.WebService.Param;","44","import org.sonarqube.ws.Common;","54","import static org.sonar.db.component.SnapshotTesting.newAnalysis;","86","  public void definition() {","90","    assertThat(def.params()).extracting(Param::key)","155","  public void metric_without_a_domain() {","156","    ComponentDto project = db.components().insertPrivateProject();","157","    SnapshotDto analysis = db.getDbClient().snapshotDao().insert(dbSession, newAnalysis(project));","158","    MetricDto metricWithoutDomain = db.measureDbTester().insertMetric(m -> m","159","      .setValueType(ValueType.INT.name())","160","      .setDomain(null));","161","    db.measureDbTester().insertMeasure(project, analysis, metricWithoutDomain);","162","","163","    ComponentWsResponse response = ws.newRequest()","164","      .setParam(PARAM_COMPONENT_KEY, project.getKey())","165","      .setParam(PARAM_METRIC_KEYS, metricWithoutDomain.getKey())","166","      .setParam(PARAM_ADDITIONAL_FIELDS, \"metrics\")","167","      .executeProtobuf(ComponentWsResponse.class);","168","","169","    assertThat(response.getComponent().getMeasures(0).getMetric()).isEqualTo(metricWithoutDomain.getKey());","170","    Common.Metric responseMetric = response.getMetrics().getMetrics(0);","171","    assertThat(responseMetric.getKey()).isEqualTo(metricWithoutDomain.getKey());","172","    assertThat(responseMetric.hasDomain()).isFalse();","173","  }","174","","175","  @Test"],"delete":["82","  public void test_definition_of_web_service() {","86","    assertThat(def.params()).extracting(WebService.Param::key)"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/measure\/ws\/ComponentTreeActionTest.java":[{"add":["28","import org.sonar.api.measures.Metric;","435","  public void metric_without_a_domain() {","436","    ComponentDto project = db.components().insertPrivateProject();","437","    SnapshotDto analysis = db.getDbClient().snapshotDao().insert(dbSession, newAnalysis(project));","438","    MetricDto metricWithoutDomain = db.measureDbTester().insertMetric(m -> m","439","      .setValueType(Metric.ValueType.INT.name())","440","      .setDomain(null));","441","    db.measureDbTester().insertMeasure(project, analysis, metricWithoutDomain);","442","","443","    ComponentTreeWsResponse result = ws.newRequest()","444","      .setParam(PARAM_BASE_COMPONENT_KEY, project.getKey())","445","      .setParam(PARAM_METRIC_KEYS, metricWithoutDomain.getKey())","446","      .setParam(PARAM_ADDITIONAL_FIELDS, \"metrics\")","447","      .executeProtobuf(ComponentTreeWsResponse.class);","448","","449","    assertThat(result.getBaseComponent().getMeasures(0).getMetric()).isEqualTo(metricWithoutDomain.getKey());","450","    Common.Metric responseMetric = result.getMetrics().getMetrics(0);","451","    assertThat(responseMetric.getKey()).isEqualTo(metricWithoutDomain.getKey());","452","    assertThat(responseMetric.hasDomain()).isFalse();","453","  }","454","","455","  @Test"],"delete":[]}]}},"79f9c59c24977943bc5ae8d34bffcce9a4d6ba38":{"changes":{"tests\/src\/test\/java\/org\/sonarqube\/tests\/rule\/RulesMarkdownTest.java":"ADD","sonar-markdown\/src\/test\/java\/org\/sonar\/markdown\/MarkdownTest.java":"MODIFY","sonar-markdown\/src\/main\/java\/org\/sonar\/markdown\/HtmlEmphasisChannel.java":"MODIFY","tests\/src\/test\/java\/org\/sonarqube\/tests\/Category6Suite.java":"MODIFY"},"diff":{"tests\/src\/test\/java\/org\/sonarqube\/tests\/rule\/RulesMarkdownTest.java":[{"add":[],"delete":[]}],"sonar-markdown\/src\/test\/java\/org\/sonar\/markdown\/MarkdownTest.java":[{"add":["102","  public void shouldEmphasisText() {","103","    assertThat(Markdown.convertToHtml(\"This is *Sparta !!!*\")).isEqualTo(\"This is <strong>Sparta !!!<\/strong>\");","104","    assertThat(Markdown.convertToHtml(\"This is *A*\")).isEqualTo(\"This is <strong>A<\/strong>\");","105","    assertThat(Markdown.convertToHtml(\"This should not be * \\n emphasized\")).isEqualTo(\"This should not be * <br\/> emphasized\");","107","    assertThat(Markdown.convertToHtml(\"Not * emphasized * because of whitespaces\")).isEqualTo(\"Not * emphasized * because of whitespaces\");","108","    assertThat(Markdown.convertToHtml(\"Not *emphasized * because of whitespace\")).isEqualTo(\"Not *emphasized * because of whitespace\");","109","    assertThat(Markdown.convertToHtml(\"Not * emphasized* because of whitespace\")).isEqualTo(\"Not * emphasized* because of whitespace\");","110","    assertThat(Markdown.convertToHtml(\"emphasized*inside*word\")).isEqualTo(\"emphasized<strong>inside<\/strong>word\");","111","    assertThat(Markdown.convertToHtml(\"*Emphasize many words*\")).isEqualTo(\"<strong>Emphasize many words<\/strong>\");"],"delete":["102","  public void shouldEmphaseText() {","103","    assertThat(Markdown.convertToHtml(\"This is *important*\")).isEqualTo(\"This is <strong>important<\/strong>\");","104","    assertThat(Markdown.convertToHtml(\"This should not be * \\n emphase\")).isEqualTo(\"This should not be * <br\/> emphase\");","106","    assertThat(Markdown.convertToHtml(\"Not * emphase * because of whitespaces\")).isEqualTo(\"Not * emphase * because of whitespaces\");","107","    assertThat(Markdown.convertToHtml(\"Not *emphase * because of whitespace\")).isEqualTo(\"Not *emphase * because of whitespace\");","108","    assertThat(Markdown.convertToHtml(\"Not * emphase* because of whitespace\")).isEqualTo(\"Not * emphase* because of whitespace\");","109","    assertThat(Markdown.convertToHtml(\"emphase*inside*word\")).isEqualTo(\"emphase<strong>inside<\/strong>word\");","110","    assertThat(Markdown.convertToHtml(\"*Emphase many words*\")).isEqualTo(\"<strong>Emphase many words<\/strong>\");"]}],"sonar-markdown\/src\/main\/java\/org\/sonar\/markdown\/HtmlEmphasisChannel.java":[{"add":["30","  HtmlEmphasisChannel() {","31","    super(\"\\\\*[^\\\\s\\\\*]\\\\*|\\\\*[^\\\\s\\\\*][^\\n\\r]*?[^\\\\s\\\\*]\\\\*\");"],"delete":["30","  public HtmlEmphasisChannel() {","31","    super(\"\\\\*[^\\\\s\\\\*][^\\n\\r]+?[^\\\\s\\\\*]\\\\*\");"]}],"tests\/src\/test\/java\/org\/sonarqube\/tests\/Category6Suite.java":[{"add":["37","import org.sonarqube.tests.rule.RulesMarkdownTest;","62","  RulesMarkdownTest.class,"],"delete":[]}]}},"263563d03a3a8b5171345f972c6308c0b6efb2cf":{"changes":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/measures\/CoreMetrics.java":"MODIFY"},"diff":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/measures\/CoreMetrics.java":[{"add":["1285","  public static final Metric<String> NEW_DEVELOPMENT_COST = new Metric.Builder(NEW_DEVELOPMENT_COST_KEY, \"Development Cost on New Code\", Metric.ValueType.FLOAT)"],"delete":["1285","  public static final Metric<String> NEW_DEVELOPMENT_COST = new Metric.Builder(NEW_DEVELOPMENT_COST_KEY, \"Development Cost on New Code\", Metric.ValueType.STRING)"]}]}},"8bb9de894171df87587f76d3b6829514f79ffff1":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/create\/project\/ManualProjectCreate.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/create\/project\/__tests__\/__snapshots__\/ManualProjectCreate-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/create\/components\/ProjectKeyInput.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/create\/components\/__tests__\/ProjectKeyInput-test.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/create\/project\/ManualProjectCreate.tsx":[{"add":["42","  projectName: string;","44","  projectKey: string;","58","      projectKey: '',","59","      projectName: '',","108","        name: (state.projectName || state.projectKey).trim(),","154","    const projectName = event.currentTarget.value;","158","  handleProjectKeyChange = (projectKey: string) => {","187","              value={this.state.projectKey}"],"delete":["42","  projectName?: string;","44","  projectKey?: string;","106","        name: state.projectName || state.projectKey,","152","    const projectName = event.currentTarget.value.trim();","156","  handleProjectKeyChange = (projectKey?: string) => {","184","              initialValue={this.state.projectKey}"]}],"server\/sonar-web\/src\/main\/js\/apps\/create\/project\/__tests__\/__snapshots__\/ManualProjectCreate-test.tsx.snap":[{"add":["33","        value=\"\"","68","            value=\"\""],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/create\/components\/ProjectKeyInput.tsx":[{"add":["28","  value: string;","42","    this.state = { error: undefined, touched: false, validating: false };","48","    if (this.props.value) {","49","      this.validateKey(this.props.value);","61","        if (this.mounted && key === this.props.value) {","74","        if (this.mounted && key === this.props.value) {","82","    this.setState({ touched: true });","84","    this.props.onChange(value);","123","          value={this.props.value}"],"delete":["28","  initialValue?: string;","36","  value: string;","43","    this.state = { error: undefined, touched: false, validating: false, value: '' };","49","    if (this.props.initialValue !== undefined) {","50","      this.setState({ value: this.props.initialValue });","51","      this.validateKey(this.props.initialValue);","63","        if (this.mounted) {","66","            this.props.onChange(key);","73","            this.props.onChange(undefined);","78","        if (this.mounted) {","80","          this.props.onChange(key);","87","    this.setState({ touched: true, value });","97","      this.props.onChange(undefined);","128","          value={this.state.value}"]}],"server\/sonar-web\/src\/main\/js\/apps\/create\/components\/__tests__\/ProjectKeyInput-test.tsx":[{"add":["24","jest.useFakeTimers();","25","","27","  doesComponentExists: jest","28","    .fn()","29","    .mockImplementation(({ component }) => Promise.resolve(component === 'exists'))","33","  const wrapper = shallow(<ProjectKeyInput onChange={jest.fn()} value=\"key\" \/>);","41","  const wrapper = shallow(<ProjectKeyInput onChange={jest.fn()} value=\"\" \/>);","48","  const wrapper = shallow(<ProjectKeyInput onChange={jest.fn()} value=\"KEy-with#speci@l_char\" \/>);","54","  const wrapper = shallow(<ProjectKeyInput onChange={jest.fn()} value=\"exists\" \/>);","56","","57","  jest.runAllTimers();","58","  await new Promise(setImmediate);"],"delete":["22","import { doesComponentExists } from '..\/..\/..\/..\/api\/components';","26","  doesComponentExists: jest.fn().mockResolvedValue(false)","29","beforeEach(() => {","30","  (doesComponentExists as jest.Mock<any>).mockClear();","31","});","32","","34","  const wrapper = shallow(<ProjectKeyInput initialValue=\"key\" onChange={jest.fn()} \/>);","42","  const wrapper = shallow(<ProjectKeyInput onChange={jest.fn()} \/>);","49","  const wrapper = shallow(","50","    <ProjectKeyInput initialValue=\"KEy-with#speci@l_char\" onChange={jest.fn()} \/>","51","  );","57","  (doesComponentExists as jest.Mock<any>).mockResolvedValue(true);","58","  const wrapper = shallow(<ProjectKeyInput initialValue=\"\" onChange={jest.fn()} \/>);"]}]}},"becbd7e7f511acb8b552692b16aa2edd8d785513":{"changes":{"it\/it-tests\/src\/test\/java\/it\/measureHistory\/SincePreviousVersionHistoryTest.java":"MODIFY"},"diff":{"it\/it-tests\/src\/test\/java\/it\/measureHistory\/SincePreviousVersionHistoryTest.java":[{"add":["24","import java.text.SimpleDateFormat;","25","import java.util.Date;","26","import javax.annotation.Nullable;","28","import org.junit.Before;","60","","61","  @Before","62","  public void resetData() throws Exception {","63","    orchestrator.resetData();","64","  }","65","","71","    analyzeProjectWithExclusions(\"0.9\", \"**\/*2.xoo\");","72","    analyzeProject(\"1.0-SNAPSHOT\");","73","    analyzeProject(\"1.0-SNAPSHOT\");","91","  \/**","92","   * SONAR-6356","93","   *\/","94","  @Test","95","  public void since_previous_version_should_use_first_analysis_when_no_version_found() {","96","    analyzeProjectWithDate(\"1.0-SNAPSHOT\", \"2015-10-01\");","97","    \/\/ No difference measure after first analysis","98","    Resource project = getProject(\"files\");","99","    assertThat(project.getPeriod3Date()).isNull();","100","","101","    analyzeProjectWithDate(\"1.0-SNAPSHOT\", \"2015-10-02\");","102","    \/\/ No new version, first analysis is used","103","    project = getProject(\"files\");","104","    assertThat(project.getPeriod3Mode()).isEqualTo(\"previous_version\");","105","    assertThat(toStringDate(project.getPeriod3Date())).isEqualTo(\"2015-10-01\");","106","","107","    analyzeProjectWithDate(\"1.0-SNAPSHOT\", \"2015-10-03\");","108","    \/\/ Still no new version, first analysis is used","109","    project = getProject(\"files\");","110","    assertThat(project.getPeriod3Mode()).isEqualTo(\"previous_version\");","111","    assertThat(toStringDate(project.getPeriod3Date())).isEqualTo(\"2015-10-01\");","112","  }","113","","114","  private static void analyzeProject(String version) {","115","    analyzeProject(version, null, null);","116","  }","117","","118","  private static void analyzeProjectWithExclusions(String version, String exclusions) {","119","    analyzeProject(version, exclusions, null);","120","  }","121","","122","  private static void analyzeProjectWithDate(String version, String date) {","123","    analyzeProject(version, null, date);","124","  }","125","","126","  private static void analyzeProject(String version, @Nullable String exclusions, @Nullable String date) {","132","    if (date != null) {","133","      build.setProperty(\"sonar.projectDate\", date);","134","    }","141","","142","  public static String toStringDate(Date date) {","143","    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");","144","    return sdf.format(date);","145","  }"],"delete":["61","    orchestrator.resetData();","62","    analyzeProject(\"0.9\", \"**\/*2.xoo\");","63","    analyzeProject(\"1.0-SNAPSHOT\", null);","64","    analyzeProject(\"1.0-SNAPSHOT\", null);","82","  private static void analyzeProject(String version, String exclusions) {"]}]}},"862136c48612703748db03dd7d52df515a86d7e6":{"changes":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/utils\/DateUtils.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/LoadPeriodsStep.java":"MODIFY","sonar-core\/src\/main\/java\/org\/sonar\/core\/config\/CorePropertyDefinitions.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/LoadPeriodsStepTest.java":"MODIFY"},"diff":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/utils\/DateUtils.java":[{"add":["58","   *","59","   * @since 7.6","60","   *\/","61","  public static String formatDate(Instant d) {","62","    return d.atZone(ZoneId.systemDefault()).toLocalDate().toString();","63","  }","64","","65","  \/**","66","   * Warning: relies on default timezone!","105","   *","230","   *","232","   * @throws IllegalArgumentException if stringDate is not a correctly formed date or datetime","254","   *","255","   * @see #parseDateOrDateTime(String)","265","   *","267","   * @throws IllegalArgumentException if stringDate is not a correctly formed date or datetime","268","   * @see #parseDateOrDateTime(String)","292","   * @param date         the date, not null","293","   * @param numberOfDays the amount to add, may be negative","300","  \/**","301","   * @since 7.6","302","   *\/","303","  public static Instant addDays(Instant instant, int numberOfDays) {","304","    return instant.plus(numberOfDays, ChronoUnit.DAYS);","305","  }","306",""],"delete":["220","   * @throws IllegalArgumentException if stringDate is not a correctly formed date or datetime","243","   * @see #parseDateOrDateTime(String) ","253","   * @see #parseDateOrDateTime(String)","254","   * @throws IllegalArgumentException if stringDate is not a correctly formed date or datetime","279","   * @param date  the date, not null","280","   * @param numberOfDays  the amount to add, may be negative"]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/LoadPeriodsStep.java":[{"add":["21","import java.time.Duration;","22","import java.time.Instant;","132","    Instant date = parseDate(propertyValue);","147","      if (versions.size() == 1) {","148","        return resolvePreviousVersionWithOnlyOneExistingVersion(dbSession, projectUuid);","149","      }","157","  private static Instant parseDate(String propertyValue) {","160","      return localDate.atStartOfDay(ZoneId.systemDefault()).toInstant();","174","    Instant targetDate = DateUtils.addDays(Instant.ofEpochMilli(analysisDate), -days);","175","    LOG.debug(\"Resolving new code period by {} days: {}\", days, supplierToString(() -> logDate(targetDate)));","181","  private Optional<Period> resolveByDate(DbSession dbSession, String projectUuid, Instant date, String propertyValue) {","182","    Instant now = Instant.ofEpochMilli(system2.now());","183","    checkPeriodProperty(date.compareTo(now) <= 0, propertyValue,","184","      \"date is in the future (now: '%s')\", supplierToString(() -> logDate(now)));","186","    LOG.debug(\"Resolving new code period by date: {}\", supplierToString(() -> logDate(date)));","187","    Optional<Period> period = findFirstSnapshot(dbSession, createCommonQuery(projectUuid).setCreatedAfter(date.toEpochMilli()).setSort(BY_DATE, ASC))","190","    checkPeriodProperty(period.isPresent(), propertyValue, \"No analysis found created after date '%s'\", supplierToString(() -> logDate(date)));","207","  private Optional<Period> resolvePreviousVersionWithOnlyOneExistingVersion(DbSession dbSession, String projectUuid) {","229","      \"version is none of the existing ones: %s\", supplierToString(() -> toVersions(versions)));","248","  private static Object supplierToString(Supplier<String> s) {","263","      LOG.debug(\"Invalid code period '{}': {}\", propertyValue, supplierToString(() -> format(testDescription, args)));","290","  private static SnapshotDto findNearestSnapshotToTargetDate(List<SnapshotDto> snapshots, Instant targetDate) {","291","    \/\/ FIXME shouldn't this be the first analysis after targetDate?","292","    Duration bestDuration = null;","295","      Instant createdAt = Instant.ofEpochMilli(snapshot.getCreatedAt());","296","      Duration duration = Duration.between(targetDate, createdAt).abs();","297","      if (bestDuration == null || duration.compareTo(bestDuration) <= 0) {","298","        bestDuration = duration;","309","  private static String logDate(Instant instant) {","310","    return DateUtils.formatDate(instant.truncatedTo(ChronoUnit.SECONDS));"],"delete":["26","import java.util.Date;","131","    Date date = parseDate(propertyValue);","143","    if (versions.size() == 1) {","144","      return resolveWhenOnlyOneExistingVersion(dbSession, projectUuid, mostRecentVersion, propertyValue);","145","    }","156","  private static Date parseDate(String propertyValue) {","159","      return Date.from(localDate.atStartOfDay(ZoneId.systemDefault()).toInstant());","173","    long targetDate = DateUtils.addDays(new Date(analysisDate), -days).getTime();","174","    LOG.debug(\"Resolving new code period by {} days: {}\", days, async(() -> logDate(targetDate)));","180","  private Optional<Period> resolveByDate(DbSession dbSession, String projectUuid, Date date, String propertyValue) {","181","    long now = system2.now();","182","    checkPeriodProperty(date.compareTo(new Date(now)) <= 0, propertyValue,","183","      \"date is in the future (now: '%s')\", async(() -> logDate(now)));","185","    LOG.debug(\"Resolving new code period by date: {}\", async(() -> logDate(date)));","186","    Optional<Period> period = findFirstSnapshot(dbSession, createCommonQuery(projectUuid).setCreatedAfter(date.getTime()).setSort(BY_DATE, ASC))","189","    checkPeriodProperty(period.isPresent(), propertyValue, \"No analysis found created after date '%s'\", async(() -> logDate(date)));","190","","207","  private Optional<Period> resolveWhenOnlyOneExistingVersion(DbSession dbSession, String projectUuid, String mostRecentVersion, String propertyValue) {","208","    boolean previousVersionPeriod = LEAK_PERIOD_MODE_PREVIOUS_VERSION.equals(propertyValue);","210","","211","    \/\/ only one existing version. Period must either be PREVIOUS_VERSION or the only valid version: the only existing one","212","    checkPeriodProperty(previousVersionPeriod || propertyValue.equals(mostRecentVersion), propertyValue,","213","      \"Only one existing version, but period is neither %s nor this one version '%s' (actual: '%s')\",","214","      LEAK_PERIOD_MODE_PREVIOUS_VERSION, mostRecentVersion, propertyValue);","215","","236","      \"version is none of the existing ones: %s\", async(() -> toVersions(versions)));","255","  public static Object async(Supplier<String> s) {","270","      LOG.debug(\"Invalid code period '{}': {}\", propertyValue, async(() -> format(testDescription, args)));","297","  private static SnapshotDto findNearestSnapshotToTargetDate(List<SnapshotDto> snapshots, Long targetDate) {","298","    long bestDistance = Long.MAX_VALUE;","301","      long distance = Math.abs(snapshot.getCreatedAt() - targetDate);","302","      if (distance <= bestDistance) {","303","        bestDistance = distance;","314","  private static String logDate(long date) {","315","    return logDate(new Date(date));","316","  }","317","","318","  private static String logDate(Date date1) {","319","    return DateUtils.formatDate(Date.from(date1.toInstant().truncatedTo(ChronoUnit.SECONDS)));"]}],"sonar-core\/src\/main\/java\/org\/sonar\/core\/config\/CorePropertyDefinitions.java":[{"add":[],"delete":["35","  public static final String LEAK_PERIOD_MODE_PREVIOUS_ANALYSIS = \"previous_analysis\";"]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/LoadPeriodsStepTest.java":[{"add":["30","import javax.annotation.Nullable;","141","    assertPeriod(LEAK_PERIOD_MODE_DATE, textDate, analysis.getCreatedAt(), analysis.getUuid());","148","    SnapshotDto analysis1 = dbTester.components()","149","      .insertSnapshot(project, snapshot -> snapshot.setStatus(STATUS_UNPROCESSED).setCreatedAt(1226379600000L).setLast(false));\/\/ 2008-11-11","161","    assertPeriod(LEAK_PERIOD_MODE_DAYS, \"100\", analysis2.getCreatedAt(), analysis2.getUuid());","183","    assertPeriod(LEAK_PERIOD_MODE_DATE, textDate, analysis4.getCreatedAt(), analysis4.getUuid());","206","    assertPeriod(LEAK_PERIOD_MODE_DATE, date, analysis3.getCreatedAt(), analysis3.getUuid());","397","    assertPeriod(LEAK_PERIOD_MODE_DAYS, \"10\", analysis3.getCreatedAt(), analysis3.getUuid());","425","    assertPeriod(LEAK_PERIOD_MODE_PREVIOUS_VERSION, \"1.0\", analysis2.getCreatedAt(), analysis2.getUuid());","448","    assertPeriod(LEAK_PERIOD_MODE_PREVIOUS_VERSION, \"0.9\", analysis1.getCreatedAt(), analysis1.getUuid());","465","    assertPeriod(LEAK_PERIOD_MODE_PREVIOUS_VERSION, null, analysis1.getCreatedAt(), analysis1.getUuid());","483","    assertPeriod(LEAK_PERIOD_MODE_PREVIOUS_VERSION, null, analysis.getCreatedAt(), analysis.getUuid());","507","    assertPeriod(LEAK_PERIOD_MODE_VERSION, \"1.0\", analysis2.getCreatedAt(), analysis2.getUuid());","508","    verifyDebugLogs(\"Resolving new code period by version: 1.0\");","509","  }","510","","511","  \/**","512","   * SONAR-11492","513","   *\/","514","  @Test","515","  public void feed_period_by_version_with_only_one_existing_version() {","516","    OrganizationDto organization = dbTester.organizations().insert();","517","    ComponentDto project = dbTester.components().insertPrivateProject(organization);","518","    SnapshotDto analysis1 = dbTester.components().insertSnapshot(project, snapshot -> snapshot.setCreatedAt(1226379600000L).setVersion(\"0.9\").setLast(true)); \/\/ 2008-11-11","519","    dbTester.events().insertEvent(newEvent(analysis1).setName(\"0.9\").setCategory(CATEGORY_VERSION));","520","    when(system2Mock.now()).thenReturn(november30th2008.getTime());","521","    when(analysisMetadataHolder.isFirstAnalysis()).thenReturn(false);","522","    setupRoot(project, \"0.9\");","523","","524","    settings.setProperty(\"sonar.leak.period\", \"0.9\");","525","    underTest.execute(new TestComputationStepContext());","526","","527","    \/\/ Analysis form 2008-11-11","528","    assertPeriod(LEAK_PERIOD_MODE_VERSION, \"0.9\", analysis1.getCreatedAt(), analysis1.getUuid());","529","    verifyDebugLogs(\"Resolving new code period by version: 0.9\");","530","  }","531","","532","  private void assertPeriod(String mode, @Nullable String modeParameter, long snapshotDate, String analysisUuid) {","535","    assertThat(period.getMode()).isEqualTo(mode);","536","    assertThat(period.getModeParameter()).isEqualTo(modeParameter);","537","    assertThat(period.getSnapshotDate()).isEqualTo(snapshotDate);","538","    assertThat(period.getAnalysisUuid()).isEqualTo(analysisUuid);"],"delete":["140","    Period period = periodsHolder.getPeriod();","141","    assertThat(period).isNotNull();","142","    assertThat(period.getMode()).isEqualTo(LEAK_PERIOD_MODE_DATE);","143","    assertThat(period.getModeParameter()).isEqualTo(textDate);","144","    assertThat(period.getSnapshotDate()).isEqualTo(analysis.getCreatedAt());","145","    assertThat(period.getAnalysisUuid()).isEqualTo(analysis.getUuid());","152","    SnapshotDto analysis1 = dbTester.components().insertSnapshot(project, snapshot -> snapshot.setStatus(STATUS_UNPROCESSED).setCreatedAt(1226379600000L).setLast(false));\/\/ 2008-11-11","164","    Period period = periodsHolder.getPeriod();","165","    assertThat(period).isNotNull();","166","    assertThat(period.getMode()).isEqualTo(LEAK_PERIOD_MODE_DAYS);","167","    assertThat(period.getModeParameter()).isEqualTo(\"100\");","168","    assertThat(period.getSnapshotDate()).isEqualTo(analysis2.getCreatedAt());","169","    assertThat(period.getAnalysisUuid()).isEqualTo(analysis2.getUuid());","170","","192","    Period period = periodsHolder.getPeriod();","193","    assertThat(period).isNotNull();","194","    assertThat(period.getMode()).isEqualTo(LEAK_PERIOD_MODE_DATE);","195","    assertThat(period.getModeParameter()).isEqualTo(textDate);","196","    assertThat(period.getSnapshotDate()).isEqualTo(analysis4.getCreatedAt());","197","    assertThat(period.getAnalysisUuid()).isEqualTo(analysis4.getUuid());","220","    Period period = periodsHolder.getPeriod();","221","    assertThat(period).isNotNull();","222","    assertThat(period.getMode()).isEqualTo(LEAK_PERIOD_MODE_DATE);","223","    assertThat(period.getModeParameter()).isEqualTo(date);","224","    assertThat(period.getSnapshotDate()).isEqualTo(analysis3.getCreatedAt());","225","    assertThat(period.getAnalysisUuid()).isEqualTo(analysis3.getUuid());","226","","417","    Period period = periodsHolder.getPeriod();","418","    assertThat(period).isNotNull();","419","    assertThat(period.getMode()).isEqualTo(LEAK_PERIOD_MODE_DAYS);","420","    assertThat(period.getModeParameter()).isEqualTo(\"10\");","421","    assertThat(period.getSnapshotDate()).isEqualTo(analysis3.getCreatedAt());","422","    assertThat(period.getAnalysisUuid()).isEqualTo(analysis3.getUuid());","450","    Period period = periodsHolder.getPeriod();","451","    assertThat(period).isNotNull();","452","    assertThat(period.getMode()).isEqualTo(LEAK_PERIOD_MODE_PREVIOUS_VERSION);","453","    assertThat(period.getModeParameter()).isEqualTo(\"1.0\");","454","    assertThat(period.getSnapshotDate()).isEqualTo(analysis2.getCreatedAt());","455","    assertThat(period.getAnalysisUuid()).isEqualTo(analysis2.getUuid());","478","    Period period = periodsHolder.getPeriod();","479","    assertThat(period).isNotNull();","480","    assertThat(period.getMode()).isEqualTo(LEAK_PERIOD_MODE_PREVIOUS_VERSION);","481","    assertThat(period.getModeParameter()).isEqualTo(\"0.9\");","482","    assertThat(period.getSnapshotDate()).isEqualTo(analysis1.getCreatedAt());","483","    assertThat(period.getAnalysisUuid()).isEqualTo(analysis1.getUuid());","500","    Period period = periodsHolder.getPeriod();","501","    assertThat(period).isNotNull();","502","    assertThat(period.getMode()).isEqualTo(LEAK_PERIOD_MODE_PREVIOUS_VERSION);","503","    assertThat(period.getModeParameter()).isNull();","504","    assertThat(period.getSnapshotDate()).isEqualTo(analysis1.getCreatedAt());","505","    assertThat(period.getAnalysisUuid()).isEqualTo(analysis1.getUuid());","523","    Period period = periodsHolder.getPeriod();","524","    assertThat(period).isNotNull();","525","    assertThat(period.getMode()).isEqualTo(LEAK_PERIOD_MODE_PREVIOUS_VERSION);","526","    assertThat(period.getModeParameter()).isNull();","527","    assertThat(period.getSnapshotDate()).isEqualTo(analysis.getCreatedAt());","528","    assertThat(period.getAnalysisUuid()).isEqualTo(analysis.getUuid());","529","","555","    assertThat(period.getMode()).isEqualTo(LEAK_PERIOD_MODE_VERSION);","556","    assertThat(period.getModeParameter()).isEqualTo(\"1.0\");","557","    assertThat(period.getSnapshotDate()).isEqualTo(analysis2.getCreatedAt());","558","    assertThat(period.getAnalysisUuid()).isEqualTo(analysis2.getUuid());","559","","560","    verifyDebugLogs(\"Resolving new code period by version: 1.0\");"]}]}},"98ea3f7b2f39f6c63d3c50e6bc1f9ef1adfbe189":{"changes":{"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/projectInformation\/__tests__\/__snapshots__\/ProjectInformationRenderer-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/projectInformation\/ProjectInformationRenderer.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/projectInformation\/__tests__\/__snapshots__\/ProjectInformationRenderer-test.tsx.snap":[{"add":[],"delete":["308","      <MetaQualityGate","309","        qualityGate={","310","          Object {","311","            \"isDefault\": true,","312","            \"key\": \"30\",","313","            \"name\": \"Sonar way\",","314","          }","315","        }","316","      \/>","317","      <Connect(MetaQualityProfiles)","318","        headerClassName=\"big-spacer-top\"","319","        profiles={","320","          Array [","321","            Object {","322","              \"deleted\": false,","323","              \"key\": \"my-qp\",","324","              \"language\": \"ts\",","325","              \"name\": \"Sonar way\",","326","            },","327","          ]","328","        }","329","      \/>","330","    <\/div>","331","    <div","332","      className=\"big-padded bordered-bottom\"","333","    >"]}],"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/projectInformation\/ProjectInformationRenderer.tsx":[{"add":["81","        {!isApp &&","82","          (component.qualityGate ||","83","            (component.qualityProfiles && component.qualityProfiles.length > 0)) && (","84","            <>","85","              <div className=\"big-padded bordered-bottom\">","86","                {component.qualityGate && <MetaQualityGate qualityGate={component.qualityGate} \/>}","88","                {component.qualityProfiles && component.qualityProfiles.length > 0 && (","89","                  <MetaQualityProfiles","90","                    headerClassName={component.qualityGate ? 'big-spacer-top' : undefined}","91","                    profiles={component.qualityProfiles}","92","                  \/>","93","                )}","94","              <\/div>","95","            <\/>","96","          )}"],"delete":["81","        {(component.qualityGate ||","82","          (component.qualityProfiles && component.qualityProfiles.length > 0)) && (","83","          <>","84","            <div className=\"big-padded bordered-bottom\">","85","              {component.qualityGate && <MetaQualityGate qualityGate={component.qualityGate} \/>}","87","              {component.qualityProfiles && component.qualityProfiles.length > 0 && (","88","                <MetaQualityProfiles","89","                  headerClassName={component.qualityGate ? 'big-spacer-top' : undefined}","90","                  profiles={component.qualityProfiles}","91","                \/>","92","              )}","93","            <\/div>","94","          <\/>","95","        )}"]}]}},"1da2b46a8136637073020efa4f171b2ee8693191":{"changes":{"server\/sonar-web\/src\/main\/js\/helpers\/__tests__\/markdown-test.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/helpers\/markdown.js":"MODIFY","server\/sonar-docs\/src\/templates\/page.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/helpers\/__tests__\/markdown-test.ts":[{"add":["19","import { getFrontMatter, separateFrontMatter, filterContent } from '..\/markdown';","20","","21","jest.mock('..\/system', () => ({","22","  getInstance: () => 'SonarQube',","23","  isSonarCloud: () => false","24","}));","112","","113","it('replaces {instance}', () => {","114","  expect(","115","    filterContent('This is {instance} content. It replaces all {instance}{instance} messages')","116","  ).toBe('This is SonarQube content. It replaces all SonarQubeSonarQube messages');","117","});"],"delete":["19","import { getFrontMatter, separateFrontMatter } from '..\/markdown';"]}],"server\/sonar-web\/src\/main\/js\/helpers\/markdown.js":[{"add":["75","  const contentWithInstance = content.replace(\/{instance}\/gi, getInstance());"],"delete":["75","  const contentWithInstance = content.replace('{instance}', getInstance());"]}],"server\/sonar-docs\/src\/templates\/page.js":[{"add":["103","  return content.replace(\/{instance}\/gi, 'SonarQube');"],"delete":["103","  return content.replace('{instance}', 'SonarQube');"]}]}},"8e1e2e1e2e5b346062e87b7b8401baece8f379a4":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/permissions\/project\/components\/PageHeader.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/permissions\/project\/components\/PageHeader.js":[{"add":["61","          {!!window.SS.isUserAdmin && (","62","              <div className=\"page-actions\">","63","                <button className=\"js-apply-template\" onClick={this.handleApplyTemplate}>","64","                  Apply Template","65","                <\/button>","66","              <\/div>","67","          )}"],"delete":["61","          <div className=\"page-actions\">","62","            <button","63","                className=\"js-apply-template\"","64","                onClick={this.handleApplyTemplate}>","65","              Apply Template","66","            <\/button>","67","          <\/div>"]}]}},"6b9cd9de97c3a80a4f30418592413ec7327fbec5":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/setting\/ThreadLocalSettings.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/setting\/ThreadLocalSettingsTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/setting\/ThreadLocalSettings.java":[{"add":["23","import java.util.Collections;","29","import org.apache.ibatis.exceptions.PersistenceException;","60","  private Map<String, String> getPropertyDbFailureCache = Collections.emptyMap();","61","  private Map<String, String> getPropertiesDbFailureCache = Collections.emptyMap();","103","      return Optional.ofNullable(load(key));","114","      loadedValue = load(key);","120","  private String load(String key) {","121","    try {","122","      return settingLoader.load(key);","123","    } catch (PersistenceException e) {","124","      return getPropertyDbFailureCache.get(key);","125","    }","126","  }","127","","161","    Map<String, String> settings = CACHE.get();","163","    \/\/ update cache of settings to be used in case of DB connectivity error","164","    this.getPropertyDbFailureCache = settings;","170","    loadAll(builder);","171","    systemProps.forEach((key, value) -> builder.put((String) key, (String) value));","174","","175","  private void loadAll(ImmutableMap.Builder<String, String> builder) {","176","    try {","177","      ImmutableMap.Builder<String, String> cacheBuilder = ImmutableMap.builder();","178","      settingLoader.loadAll(cacheBuilder);","179","      Map<String, String> cache = cacheBuilder.build();","180","      builder.putAll(cache);","181","      getPropertiesDbFailureCache = cache;","182","    } catch (PersistenceException e) {","183","      builder.putAll(getPropertiesDbFailureCache);","184","    }","185","  }"],"delete":["99","      return Optional.ofNullable(settingLoader.load(key));","110","      loadedValue = settingLoader.load(key);","155","    settingLoader.loadAll(builder);","156","    systemProps.entrySet().forEach(entry -> builder.put((String) entry.getKey(), (String) entry.getValue()));"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/setting\/ThreadLocalSettingsTest.java":[{"add":["29","import org.apache.ibatis.exceptions.PersistenceException;","38","import static org.apache.commons.lang.RandomStringUtils.randomAlphanumeric;","41","import static org.mockito.Matchers.any;","42","import static org.mockito.Mockito.doAnswer;","43","import static org.mockito.Mockito.doThrow;","55","  private MapSettingLoader dbSettingLoader = new MapSettingLoader();","172","  public void getProperties_is_not_cached_in_thread_cache() {","173","    insertPropertyIntoDb(\"foo\", \"bar\");","174","    underTest = create(Collections.emptyMap());","175","    underTest.load();","176","","177","    assertThat(underTest.getProperties())","178","      .containsOnly(entry(\"foo\", \"bar\"));","179","","180","    insertPropertyIntoDb(\"foo2\", \"bar2\");","181","    assertThat(underTest.getProperties())","182","      .containsOnly(entry(\"foo\", \"bar\"), entry(\"foo2\", \"bar2\"));","183","","184","    underTest.unload();","185","","186","    assertThat(underTest.getProperties())","187","      .containsOnly(entry(\"foo\", \"bar\"), entry(\"foo2\", \"bar2\"));","188","  }","189","","190","  @Test","257","  @Test","258","  public void getProperties_return_empty_if_DB_error_on_first_call_ever_out_of_thread_cache() {","259","    SettingLoader settingLoaderMock = mock(SettingLoader.class);","260","    PersistenceException toBeThrown = new PersistenceException(\"Faking an error connecting to DB\");","261","    doThrow(toBeThrown).when(settingLoaderMock).loadAll(any(ImmutableMap.Builder.class));","262","    underTest = new ThreadLocalSettings(new PropertyDefinitions(), new Properties(), settingLoaderMock);","263","","264","    assertThat(underTest.getProperties())","265","      .isEmpty();","266","  }","267","","268","  @Test","269","  public void getProperties_returns_empty_if_DB_error_on_first_call_ever_in_thread_cache() {","270","    SettingLoader settingLoaderMock = mock(SettingLoader.class);","271","    PersistenceException toBeThrown = new PersistenceException(\"Faking an error connecting to DB\");","272","    doThrow(toBeThrown).when(settingLoaderMock).loadAll(any(ImmutableMap.Builder.class));","273","    underTest = new ThreadLocalSettings(new PropertyDefinitions(), new Properties(), settingLoaderMock);","274","    underTest.load();","275","","276","    assertThat(underTest.getProperties())","277","      .isEmpty();","278","  }","279","","280","  @Test","281","  public void getProperties_return_properties_from_previous_thread_cache_if_DB_error_on_not_first_call() {","282","    String key = randomAlphanumeric(3);","283","    String value1 = randomAlphanumeric(4);","284","    String value2 = randomAlphanumeric(5);","285","    SettingLoader settingLoaderMock = mock(SettingLoader.class);","286","    PersistenceException toBeThrown = new PersistenceException(\"Faking an error connecting to DB\");","287","    doAnswer(invocationOnMock -> {","288","      ImmutableMap.Builder<String, String> builder = (ImmutableMap.Builder<String, String>) invocationOnMock.getArguments()[0];","289","      builder.put(key, value1);","290","      return null;","291","    }).doThrow(toBeThrown)","292","      .doAnswer(invocationOnMock -> {","293","        ImmutableMap.Builder<String, String> builder = (ImmutableMap.Builder<String, String>) invocationOnMock.getArguments()[0];","294","        builder.put(key, value2);","295","        return null;","296","      })","297","      .when(settingLoaderMock)","298","      .loadAll(any(ImmutableMap.Builder.class));","299","    underTest = new ThreadLocalSettings(new PropertyDefinitions(), new Properties(), settingLoaderMock);","300","","301","    underTest.load();","302","    assertThat(underTest.getProperties())","303","      .containsOnly(entry(key, value1));","304","    underTest.unload();","305","","306","    underTest.load();","307","    assertThat(underTest.getProperties())","308","      .containsOnly(entry(key, value1));","309","    underTest.unload();","310","","311","    underTest.load();","312","    assertThat(underTest.getProperties())","313","      .containsOnly(entry(key, value2));","314","    underTest.unload();","315","  }","316","","317","  @Test","318","  public void get_returns_empty_if_DB_error_on_first_call_ever_out_of_thread_cache() {","319","    SettingLoader settingLoaderMock = mock(SettingLoader.class);","320","    PersistenceException toBeThrown = new PersistenceException(\"Faking an error connecting to DB\");","321","    String key = randomAlphanumeric(3);","322","    doThrow(toBeThrown).when(settingLoaderMock).load(key);","323","    underTest = new ThreadLocalSettings(new PropertyDefinitions(), new Properties(), settingLoaderMock);","324","","325","    assertThat(underTest.get(key)).isEmpty();","326","  }","327","","328","  @Test","329","  public void get_returns_empty_if_DB_error_on_first_call_ever_in_thread_cache() {","330","    SettingLoader settingLoaderMock = mock(SettingLoader.class);","331","    PersistenceException toBeThrown = new PersistenceException(\"Faking an error connecting to DB\");","332","    String key = randomAlphanumeric(3);","333","    doThrow(toBeThrown).when(settingLoaderMock).load(key);","334","    underTest = new ThreadLocalSettings(new PropertyDefinitions(), new Properties(), settingLoaderMock);","335","    underTest.load();","336","","337","    assertThat(underTest.get(key)).isEmpty();","338","  }","339",""],"delete":["47","","48","  private MapSettingLoader dbSettingLoader = new MapSettingLoader();","49",""]}]}},"de3df7e5fea866d114b402a6c9fe71545e2afcdc":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/facets\/query-facet.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/facets\/query-facet.js":[{"add":["28","      'submit form': 'onFormSubmit',","29","      'search input': 'onInputSearch'","47","  onInputSearch () {","48","    this.applyFacet();","49","  },","50","","54","    const value = this.$('input').val();","55","    if (this.buffer !== value) {","56","      this.buffer = value;","57","      obj[property] = value;","58","      this.options.app.state.updateFilter(obj, { force: true });","59","    }"],"delete":["28","      'submit form': 'onFormSubmit'","49","    obj[property] = this.$('input').val();","50","    this.options.app.state.updateFilter(obj, { force: true });"]}]}},"7666c0e921368a0b560ab289be7ed7af50f41e5e":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/source-viewer\/popups\/coverage-popup.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/source-viewer\/popups\/coverage-popup.js":[{"add":["51","          longName: test.fileName"],"delete":["51","          longName: test.fileLongName"]}]}},"3365182508367bfcc080452d7cf932f9cfbf8c1b":{"changes":{"server\/sonar-docs\/src\/components\/Sidebar.tsx":"MODIFY"},"diff":{"server\/sonar-docs\/src\/components\/Sidebar.tsx":[{"add":["80","    const headers = new Headers([","81","      ['Cache-Control', 'no-cache'],","82","      ['Pragma', 'no-cache']","83","    ]);","84","    fetch('\/DocsVersions.json', { headers })"],"delete":["80","    fetch('\/DocsVersions.json')"]}]}},"47d02a5e043b7a97c420bc47dfadb9d4b4b3c6eb":{"changes":{"sonar-application\/src\/main\/assembly\/conf\/sonar.properties":"MODIFY"},"diff":{"sonar-application\/src\/main\/assembly\/conf\/sonar.properties":[{"add":["103","# TCP port for incoming HTTP connections. Default value is 9000."],"delete":["103","","104","# TCP port for incoming HTTP connections. Disabled when value is -1."]}]}},"ccf24581e2de42c829513b6270eac15bb0c0e9e7":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/issue\/views\/comment-form-view.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/issue\/views\/comment-form-view.js":[{"add":["51","    disableForm: function () {","52","      this.$(':input').prop('disabled', true);","53","    },","54","","55","    enableForm: function () {","56","      this.$(':input').prop('disabled', false);","57","    },","58","","71","      this.disableForm();","72","      return $.post(url, data)","73","          .done(function () {","74","            that.options.detailView.updateAfterAction(true);","75","          }).fail(function () {","76","            that.enableForm();","77","          });"],"delete":["63","      return $.post(url, data).done(function () {","64","        that.options.detailView.updateAfterAction(true);","65","      });"]}]}},"68cc9d45565f01dfe68c03d133cbc6591be0a544":{"changes":{"sonar-application\/build.gradle":"MODIFY"},"diff":{"sonar-application\/build.gradle":[{"add":["67","  bundledPlugin 'org.sonarsource.python:sonar-python-plugin:1.14.1.3143@jar'"],"delete":["67","  bundledPlugin 'org.sonarsource.python:sonar-python-plugin:1.14.0.3086@jar'"]}]}},"2060793a67a2e145332bcd780b166a76b9bb0672":{"changes":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/batch\/report\/AnalysisContextReportPublisher.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/batch\/report\/AnalysisContextReportPublisherTest.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/batch\/report\/AnalysisContextReportPublisher.java":[{"add":["117","    for (String prop : new TreeSet<>(props.keySet())) {","118","      dumpPropIfNotSensitive(fileWriter, prop, props.get(prop));","135","        dumpPropIfNotSensitive(fileWriter, prop, moduleSpecificProps.get(prop));","142","  private static void dumpPropIfNotSensitive(BufferedWriter fileWriter, String prop, String value) throws IOException {","143","    fileWriter.append(String.format(KEY_VALUE_FORMAT, prop, sensitive(prop) ? \"******\" : value)).append('\\n');","144","  }","145",""],"delete":["117","    for (String env : new TreeSet<>(props.keySet())) {","118","      fileWriter.append(String.format(KEY_VALUE_FORMAT, env, props.get(env))).append('\\n');","135","        fileWriter.append(String.format(KEY_VALUE_FORMAT, prop, sensitive(prop) ? \"******\" : moduleSpecificProps.get(prop))).append('\\n');"]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/batch\/report\/AnalysisContextReportPublisherTest.java":[{"add":["183","  public void shouldNotDumpSensitiveModuleProperties() throws Exception {","203","  \/\/ SONAR-7598","204","  @Test","205","  public void shouldNotDumpSensitiveGlobalProperties() throws Exception {","206","    ScannerReportWriter writer = new ScannerReportWriter(temp.newFolder());","207","    when(globalRepositories.globalSettings()).thenReturn(ImmutableMap.of(\"sonar.login\", \"my_token\", \"sonar.password\", \"azerty\", \"sonar.cpp.license.secured\", \"AZERTY\"));","208","","209","    publisher.init(writer);","210","","211","    assertThat(FileUtils.readFileToString(writer.getFileStructure().analysisLog())).containsSequence(","212","      \"sonar.cpp.license.secured=******\",","213","      \"sonar.login=******\",","214","      \"sonar.password=******\");","215","  }","216",""],"delete":["183","  public void shouldNotDumpSensitiveProperties() throws Exception {"]}]}},"a1e24b5dc9b1ab138e584e9ef4faeec8f6cb6701":{"changes":{"sonar-ws\/src\/test\/java\/org\/sonarqube\/ws\/client\/OkHttpClientBuilderTest.java":"MODIFY","sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/OkHttpClientBuilder.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/bootstrap\/ScannerWsClientProvider.java":"MODIFY","sonar-ws\/src\/test\/java\/org\/sonarqube\/ws\/client\/HttpConnectorTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/util\/OkHttpClientProviderTest.java":"MODIFY"},"diff":{"sonar-ws\/src\/test\/java\/org\/sonarqube\/ws\/client\/OkHttpClientBuilderTest.java":[{"add":["21","import javax.net.ssl.SSLSocketFactory;","42","    assertThat(okHttpClient.networkInterceptors()).hasSize(1);"],"delete":["29","import javax.net.ssl.SSLSocketFactory;","30","","43","    assertThat(okHttpClient.interceptors()).hasSize(1);"]}],"sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/OkHttpClientBuilder.java":[{"add":["23","import java.net.HttpURLConnection;","159","    builder.addNetworkInterceptor(this::addUserAgent);","160","    if (proxyLogin != null) {","161","      builder.proxyAuthenticator((route, response) -> {","162","        if (HttpURLConnection.HTTP_PROXY_AUTH == response.code()) {","163","          String credential = Credentials.basic(proxyLogin, nullToEmpty(proxyPassword));","164","          return response.request().newBuilder().header(\"Proxy-Authorization\", credential).build();","165","        }","166","        return null;","167","      });","168","    }","184","  private Response addUserAgent(Interceptor.Chain chain) throws IOException {"],"delete":["158","    builder.addInterceptor(this::completeHeaders);","174","  private Response completeHeaders(Interceptor.Chain chain) throws IOException {","179","    if (proxyLogin != null) {","180","      newRequest.header(\"Proxy-Authorization\", Credentials.basic(proxyLogin, nullToEmpty(proxyPassword)));","181","    }"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/bootstrap\/ScannerWsClientProvider.java":[{"add":["57","      if (!proxyUser.isEmpty()) {"],"delete":["57","      if (!System.getProperty(\"http.proxyHost\", \"\").isEmpty() && !proxyUser.isEmpty()) {"]}],"sonar-ws\/src\/test\/java\/org\/sonarqube\/ws\/client\/HttpConnectorTest.java":[{"add":["22","import java.net.InetSocketAddress;","23","import java.net.Proxy;","142","    MockWebServer proxy = new MockWebServer();","143","    proxy.start();","146","      .proxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxy.getHostName(), proxy.getPort())))","151","    proxy.enqueue(new MockResponse().setResponseCode(407));","152","    proxy.enqueue(new MockResponse().setBody(\"OK!\"));","155","    RecordedRequest recordedRequest = proxy.takeRequest();","156","    assertThat(recordedRequest.getHeader(\"Proxy-Authorization\")).isNull();","157","    recordedRequest = proxy.takeRequest();"],"delete":["140","    answerHelloWorld();","149","    RecordedRequest recordedRequest = server.takeRequest();"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/util\/OkHttpClientProviderTest.java":[{"add":["24","import okhttp3.Protocol;","26","import okhttp3.Response;","69","    Response response = new Response.Builder().protocol(Protocol.HTTP_1_1).request(new Request.Builder().url(\"http:\/\/foo\").build()).code(407).build();","70","    Request request = client.proxyAuthenticator().authenticate(null, response);","72","    assertThat(request.header(\"Proxy-Authorization\")).isEqualTo(\"Basic \" + Base64.getEncoder().encodeToString(\"the-login:the-password\".getBytes()));"],"delete":["67","    RecordedRequest recordedRequest = call(client);","69","    assertThat(recordedRequest.getHeader(\"Proxy-Authorization\")).isEqualTo(\"Basic \" + Base64.getEncoder().encodeToString(\"the-login:the-password\".getBytes()));"]}]}},"d81f32001f8a50acb51f0d9851a192269b870740":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/MetricBox.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/__tests__\/__snapshots__\/MetricBox-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/portfolio\/utils.ts":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/MetricBox.tsx":[{"add":["28","import { GraphType } from '..\/..\/..\/types\/project-activity';","119","          <ActivityLink","120","            component={component}","121","            metric={keys.activity || keys.rating}","122","            graph={GraphType.custom}","123","          \/>"],"delete":["118","          <ActivityLink component={component} metric={keys.activity || keys.rating} \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/__tests__\/__snapshots__\/MetricBox-test.tsx.snap":[{"add":["52","        graph=\"custom\"","53","        metric=\"reliability_rating,bugs\"","133","        graph=\"custom\"","214","        graph=\"custom\"","259","        graph=\"custom\""],"delete":["52","        metric=\"reliability_rating\""]}],"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/utils.ts":[{"add":["68","    last_change: 'last_change_on_reliability_rating',","69","    activity: 'reliability_rating,bugs'","84","    last_change: 'last_change_on_security_review_rating',","85","    activity: 'security_review_rating,security_hotspots'","92","    last_change: 'last_change_on_maintainability_rating',","93","    activity: 'sqale_rating,code_smells'"],"delete":["68","    last_change: 'last_change_on_reliability_rating'","83","    last_change: 'last_change_on_security_review_rating'","90","    last_change: 'last_change_on_maintainability_rating'"]}]}},"d9564eed6baf772c31d3ee2888dffc7d8c51fca2":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/setting\/ws\/ListDefinitionsAction.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/setting\/ws\/ListDefinitionsActionTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/setting\/ws\/ListDefinitionsAction.java":[{"add":["39","import static java.util.Comparator.comparing;","98","      .filter(definition -> qualifier.map(s -> definition.qualifiers().contains(s)).orElseGet(definition::global))","101","      .sorted(comparing(PropertyDefinition::category, String::compareToIgnoreCase)","102","        .thenComparingInt(PropertyDefinition::index)","103","        .thenComparing(PropertyDefinition::name, String::compareToIgnoreCase))"],"delete":["97","      .filter(definition -> qualifier.isPresent() ? definition.qualifiers().contains(qualifier.get()) : definition.global())"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/setting\/ws\/ListDefinitionsActionTest.java":[{"add":["49","import org.sonarqube.ws.Settings.Definition;","116","    Definition definition = result.getDefinitions(0);","137","    Definition definition = result.getDefinitions(0);","162","    Definition definition = result.getDefinitions(0);","193","    Definition definition = result.getDefinitions(0);","212","    Definition definition = result.getDefinitions(0);","255","  public void definitions_are_ordered_by_category_then_index_then_name_case_insensitive() {","256","    logIn();","257","    propertyDefinitions.addComponent(PropertyDefinition.builder(\"sonar.prop.11\").category(\"cat-1\").index(1).name(\"prop 1\").build());","258","    propertyDefinitions.addComponent(PropertyDefinition.builder(\"sonar.prop.12\").category(\"cat-1\").index(2).name(\"prop 2\").build());","259","    propertyDefinitions.addComponent(PropertyDefinition.builder(\"sonar.prop.13\").category(\"CAT-1\").index(1).name(\"prop 3\").build());","260","    propertyDefinitions.addComponent(PropertyDefinition.builder(\"sonar.prop.41\").category(\"cat-0\").index(25).name(\"prop 1\").build());","261","","262","    ListDefinitionsWsResponse result = executeRequest();","263","","264","    assertThat(result.getDefinitionsList()).extracting(Definition::getKey)","265","      .containsExactly(\"sonar.prop.41\", \"sonar.prop.11\", \"sonar.prop.13\", \"sonar.prop.12\");","266","  }","267","","268","  @Test","328","    assertThat(result.getDefinitionsList()).extracting(Definition::getKey, Definition::getType)","342","    assertThat(result.getDefinitionsList()).extracting(Definition::getKey).containsOnly(\"foo\");","356","    assertThat(result.getDefinitionsList()).extracting(Definition::getKey).containsOnly(\"foo\", \"plugin.license.secured\", \"commercial.plugin\");","370","    assertThat(result.getDefinitionsList()).extracting(Definition::getKey).containsOnly(\"foo\", \"secret.secured\", \"plugin.license.secured\", \"commercial.plugin\");","383","    assertThat(result.getDefinitionsList()).extracting(Definition::getKey).containsOnly(\"foo\", \"secret.secured\", \"plugin.license.secured\");","396","    assertThat(result.getDefinitionsList()).extracting(Definition::getKey).containsOnly(\"foo\", \"secret.secured\", \"plugin.license.secured\");","413","    assertThat(result.getDefinitionsList()).extracting(Definition::getKey).containsExactlyInAnyOrder(\"sonar.leak.period\");"],"delete":["115","    Settings.Definition definition = result.getDefinitions(0);","136","    Settings.Definition definition = result.getDefinitions(0);","161","    Settings.Definition definition = result.getDefinitions(0);","192","    Settings.Definition definition = result.getDefinitions(0);","211","    Settings.Definition definition = result.getDefinitions(0);","313","    assertThat(result.getDefinitionsList()).extracting(Settings.Definition::getKey, Settings.Definition::getType)","327","    assertThat(result.getDefinitionsList()).extracting(Settings.Definition::getKey).containsOnly(\"foo\");","341","    assertThat(result.getDefinitionsList()).extracting(Settings.Definition::getKey).containsOnly(\"foo\", \"plugin.license.secured\", \"commercial.plugin\");","355","    assertThat(result.getDefinitionsList()).extracting(Settings.Definition::getKey).containsOnly(\"foo\", \"secret.secured\", \"plugin.license.secured\", \"commercial.plugin\");","368","    assertThat(result.getDefinitionsList()).extracting(Settings.Definition::getKey).containsOnly(\"foo\", \"secret.secured\", \"plugin.license.secured\");","381","    assertThat(result.getDefinitionsList()).extracting(Settings.Definition::getKey).containsOnly(\"foo\", \"secret.secured\", \"plugin.license.secured\");","398","    assertThat(result.getDefinitionsList()).extracting(Settings.Definition::getKey).containsExactlyInAnyOrder(\"sonar.leak.period\");"]}]}},"c8a740067eee38980bcbe4affbac769a122ae78b":{"changes":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/filesystem\/DefaultModuleFileSystem.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/filesystem\/SameInputFilePredicate.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/filesystem\/DefaultModuleFileSystem.java":[{"add":["76","      setDefaultPredicate(new SameInputFilePredicate(projectRepositories, module.definition().getKeyWithBranch()));"],"delete":["76","      setDefaultPredicate(new SameInputFilePredicate(projectRepositories, moduleKey));"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/filesystem\/SameInputFilePredicate.java":[{"add":["34","  private final String moduleKeyWithBranch;","36","  public SameInputFilePredicate(ProjectRepositories projectRepositories, String moduleKeyWithBranch) {","38","    this.moduleKeyWithBranch = moduleKeyWithBranch;","43","    FileData fileDataPerPath = projectRepositories.fileData(moduleKeyWithBranch, inputFile.relativePath());"],"delete":["34","  private final String moduleKey;","36","  public SameInputFilePredicate(ProjectRepositories projectRepositories, String moduleKey) {","38","    this.moduleKey = moduleKey;","43","    FileData fileDataPerPath = projectRepositories.fileData(moduleKey, inputFile.relativePath());"]}]}},"4e0968c8f845c9a7c0ac766277bcf69377fcb48b":{"changes":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/overview\/index.html.erb":"MODIFY","server\/sonar-server\/src\/main\/resources\/org\/sonar\/server\/dashboard\/widget\/description.html.erb":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/overview\/index.html.erb":[{"add":["14","   root = @resource.root_project","15","   gate_id = Property.value('sonar.qualitygate', root.id, nil)"],"delete":["14","   gate_id = Property.value('sonar.qualitygate', @resource && @resource.id, nil)"]}],"server\/sonar-server\/src\/main\/resources\/org\/sonar\/server\/dashboard\/widget\/description.html.erb":[{"add":["49","       root = @resource.root_project","50","       quality_gate=Property.value('sonar.qualitygate', root.id, nil)"],"delete":["49","       quality_gate=Property.value('sonar.qualitygate', @resource && @resource.id, nil)"]}]}},"30edd004be7d356a446735766d7edb9c4ef6cbc1":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/BulkApplyTemplateModal.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/create\/components\/__tests__\/ProjectKeyInput-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/__tests__\/BulkApplyTemplateModal-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/SourceViewerHeader.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/BulkApplyTemplateModal.tsx":[{"add":["90","            qualifiers: this.props.qualifier,"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/create\/components\/__tests__\/ProjectKeyInput-test.tsx":[{"add":["61","","62","it('should handle Change', async () => {","63","  const onChange = jest.fn();","64","  const wrapper = shallow(<ProjectKeyInput onChange={onChange} value=\"\" \/>);","65","  await waitAndUpdate(wrapper);","66","","67","  wrapper.find('input').simulate('change', { currentTarget: { value: 'key' } });","68","","69","  expect(wrapper.state('touched')).toBe(true);","70","  expect(onChange).toBeCalledWith('key');","71","});","72","","73","it('should ignore promise return if value has been changed in the meantime', async () => {","74","  const onChange = (value: string) => wrapper.setProps({ value });","75","  const wrapper = shallow(<ProjectKeyInput onChange={onChange} value=\"\" \/>);","76","  await waitAndUpdate(wrapper);","77","","78","  wrapper.find('input').simulate('change', { currentTarget: { value: 'exists' } });","79","  wrapper.find('input').simulate('change', { currentTarget: { value: 'exists%' } });","80","","81","  jest.runAllTimers();","82","  await new Promise(setImmediate);","83","","84","  expect(wrapper.state('touched')).toBe(true);","85","  expect(wrapper.state('error')).toBe('onboarding.create_project.project_key.error');","86","});"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/__tests__\/BulkApplyTemplateModal-test.tsx":[{"add":["73","  const wrapper = shallow(render({ qualifier: 'VW', selection: ['proj1', 'proj2'] }));","90","    qualifiers: 'VW',"],"delete":["73","  const wrapper = shallow(render({ selection: ['proj1', 'proj2'] }));"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/SourceViewerHeader.tsx":[{"add":["75","    return (","76","      issues &&","77","      issues.length > 0 && (","104","      )","105","    );"],"delete":["75","    if (issues && issues.length > 0) {","76","      return (","103","      );","104","    }"]}]}},"804c846979f26e484b779a83c7f058a8a5ae3b4a":{"changes":{"server\/sonar-process-monitor\/src\/main\/java\/org\/sonar\/application\/cluster\/AppStateClusterImpl.java":"MODIFY"},"diff":{"server\/sonar-process-monitor\/src\/main\/java\/org\/sonar\/application\/cluster\/AppStateClusterImpl.java":[{"add":["22","import com.hazelcast.core.HazelcastInstanceNotActiveException;","90","    try {","91","      hazelcastCluster.close();","92","    } catch (HazelcastInstanceNotActiveException e) {","93","      \/\/ hazelcastCluster may be already closed by the shutdown hook","94","      LOGGER.debug(\"Unable to close Hazelcast cluster\", e);","95","    }"],"delete":["89","    hazelcastCluster.close();"]}]}},"bb62fc4a728e45537f828a7f90f994db48df1a6e":{"changes":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/ComponentNavLicenseNotif.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/__tests__\/__snapshots__\/ComponentNavLicenseNotif-test.tsx.snap":"MODIFY"},"diff":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["2589","component_navigation.status.last_blocked_due_to_bad_license_X=Last analysis blocked due to an invalid license, which has since been corrected. Please reanalyze this {0}."],"delete":["2589","component_navigation.status.last_blocked_due_to_bad_license=Last analysis blocked due to an invalid license, which has since been corrected. Please reanalyze this project."]}],"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/ComponentNavLicenseNotif.tsx":[{"add":["22","import { translate, translateWithParameters } from 'sonar-ui-common\/helpers\/l10n';","25","import { ComponentQualifier } from '..\/..\/..\/..\/types\/component';","77","          {translateWithParameters(","78","            'component_navigation.status.last_blocked_due_to_bad_license_X',","79","            translate('qualifier', currentTask.componentQualifier || ComponentQualifier.Project)","80","          )}"],"delete":["22","import { translate } from 'sonar-ui-common\/helpers\/l10n';","76","          {translate('component_navigation.status.last_blocked_due_to_bad_license')}"]}],"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/__tests__\/__snapshots__\/ComponentNavLicenseNotif-test.tsx.snap":[{"add":["7","  component_navigation.status.last_blocked_due_to_bad_license_X.qualifier.TRK"],"delete":["7","  component_navigation.status.last_blocked_due_to_bad_license"]}]}},"c1fcb6ce731e688578179aa7e1c2d4169246b9aa":{"changes":{"server\/sonar-web\/src\/main\/less\/pages\/issues.less":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/templates\/issues-workspace-list-component.hbs":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/templates\/issues-workspace-header.hbs":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/controller.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/less\/pages\/issues.less":[{"add":[],"delete":["51",".issues-workspace-list-component-part {","52","  margin-right: 10px;","53","  border-bottom: none;","54","}","55",""]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/templates\/issues-workspace-list-component.hbs":[{"add":["0","<div class=\"component-name issues-workspace-list-component\">","1","  <a class=\"component-name-parent link-no-underline\" href=\"{{dashboardUrl project}}\">","5","    <a class=\"component-name-parent link-no-underline\" href=\"{{dashboardUrl subProject}}\">","9","  <a class=\"component-name-file link-no-underline\" href=\"{{dashboardUrl component}}\">"],"delete":["0","<div class=\"issues-workspace-list-component\">","1","  <a class=\"issues-workspace-list-component-part\" href=\"{{dashboardUrl project}}\">","5","    <a class=\"issues-workspace-list-component-part\" href=\"{{dashboardUrl subProject}}\">","9","  <a class=\"issues-workspace-list-component-part\" href=\"{{dashboardUrl component}}\">"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/templates\/issues-workspace-header.hbs":[{"add":["2","    <div class=\"component-name\">","3","      <div class=\"component-name-parent\">","4","        <a class=\"js-back\">{{t \"issues.return_to_list\"}}<\/a>&nbsp;&nbsp;&nbsp;","5","      <\/div>","7","      {{#with state.component}}","8","        <div class=\"component-name-parent\">","9","          {{qualifierIcon \"TRK\"}}&nbsp;<a href=\"{{dashboardUrl project}}\" title=\"{{projectName}}\">{{projectName}}<\/a>","10","        <\/div>","11","        {{#if subProject}}","12","          <div class=\"component-name-parent\">","13","            {{qualifierIcon \"TRK\"}}&nbsp;<a href=\"{{dashboardUrl subProject}}\" title=\"{{subProjectName}}\">{{subProjectName}}<\/a>","14","          <\/div>","15","        {{\/if}}","16","        <div class=\"component-name-file\">","17","          {{qualifierIcon qualifier}}&nbsp;<a href=\"{{dashboardUrl key}}\" title=\"{{name}}\">{{name}}<\/a>","18","        <\/div>","19","      {{\/with}}","20","    <\/div>"],"delete":["2","    <a class=\"js-back\">{{t \"issues.return_to_list\"}}<\/a>&nbsp;&nbsp;&nbsp;","4","    {{#with state.component}}","5","      {{qualifierIcon \"TRK\"}}&nbsp;<a href=\"{{dashboardUrl project}}\" title=\"{{projectName}}\">{{projectName}}<\/a>","6","      &nbsp;&nbsp;","7","      {{qualifierIcon qualifier}}&nbsp;<a href=\"{{dashboardUrl key}}\" title=\"{{name}}\">{{name}}<\/a>","8","    {{\/with}}"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/controller.js":[{"add":["202","        subProject: issue.get('subProject'),","203","        subProjectName: issue.get('subProjectLongName'),"],"delete":[]}]}},"7e1bd1a88c7b36d2dd7a678423705d2efddb5d83":{"changes":{"server\/sonar-web\/webpack.config.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/WebApiApp.js":"ADD","server\/sonar-web\/src\/main\/js\/api\/web-api.js":"ADD","server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/Params.js":"ADD","server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/controllers\/web_api_controller.rb":"ADD","server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/Menu.js":"ADD","server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/Action.js":"ADD","server\/sonar-web\/src\/main\/js\/apps\/web-api\/styles\/web-api.css":"ADD","server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/InternalBadge.js":"ADD","server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/ResponseExample.js":"ADD","server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/Search.js":"ADD","server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/DeprecatedBadge.js":"ADD","\/dev\/null":"DELETE","server\/sonar-web\/src\/main\/js\/main\/nav\/templates\/nav-shortcuts-help.hbs":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/Domain.js":"ADD","server\/sonar-web\/src\/main\/js\/apps\/web-api\/utils.js":"ADD","server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/layouts\/_layout.html.erb":"MODIFY","server\/sonar-web\/src\/main\/webapp\/WEB-INF\/config\/routes.rb":"MODIFY","server\/sonar-web\/src\/main\/less\/sonar.less":"MODIFY","server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/web_api\/index.html.erb":"ADD","server\/sonar-web\/src\/main\/js\/apps\/web-api\/app.js":"ADD"},"diff":{"server\/sonar-web\/webpack.config.js":[{"add":["53","    'web-api': '.\/src\/main\/js\/apps\/web-api\/app.js',"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/WebApiApp.js":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/api\/web-api.js":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/Params.js":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/controllers\/web_api_controller.rb":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/Menu.js":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/Action.js":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/web-api\/styles\/web-api.css":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/InternalBadge.js":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/ResponseExample.js":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/Search.js":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/DeprecatedBadge.js":[{"add":[],"delete":[]}],"\/dev\/null":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/main\/nav\/templates\/nav-shortcuts-help.hbs":[{"add":["10","    <a href=\"{{link '\/web_api'}}\">Web API<\/a>"],"delete":["10","    <a href=\"{{link '\/api_documentation'}}\">Web Service API<\/a>"]}],"server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/Domain.js":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/web-api\/utils.js":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/layouts\/_layout.html.erb":[{"add":["58","      <a href=\"\/web_api\">Web API<\/a>"],"delete":["58","      <a href=\"\/api_documentation\">Web Service API<\/a>"]}],"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/config\/routes.rb":[{"add":["33","  map.connect 'web_api\/*other', :controller => 'web_api', :action => 'index'"],"delete":["33","  map.connect 'api_documentation\/*other', :controller => 'api_documentation', :action => 'index'"]}],"server\/sonar-web\/src\/main\/less\/sonar.less":[{"add":[],"delete":["66","@import \"pages\/api-documentation\";"]}],"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/web_api\/index.html.erb":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/web-api\/app.js":[{"add":[],"delete":[]}]}},"6e6c533c1299ec31a1c0923e259e135912220c17":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/FileFacet.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/__snapshots__\/FileFacet-test.tsx.snap":"ADD","server\/sonar-web\/src\/main\/js\/api\/components.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/FileFacet-test.tsx":"ADD","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/Sidebar.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/FileFacet.tsx":[{"add":["25","import { isDefined } from 'sonar-ui-common\/helpers\/types';","26","import { getFiles, TreeComponentWithPath } from '..\/..\/..\/api\/components';","33","  fileUuids: string[];","40","  stats: Facet | undefined;","44","  getFilePath = (fileUuid: string) => {","46","    return referencedComponents[fileUuid]","47","      ? collapsePath(referencedComponents[fileUuid].path || '', 15)","48","      : fileUuid;","51","  getReferencedComponent = (key: string) => {","53","    const fileUuid = Object.keys(referencedComponents).find(uuid => {","54","      return referencedComponents[uuid].key === key;","55","    });","56","    return fileUuid ? referencedComponents[fileUuid] : undefined;","59","  getFacetItemText = (fileUuid: string) => {","60","    const { referencedComponents } = this.props;","61","    return referencedComponents[fileUuid] ? referencedComponents[fileUuid].path || '' : fileUuid;","64","  getSearchResultKey = (file: TreeComponentWithPath) => {","65","    const component = this.getReferencedComponent(file.key);","66","    return component ? component.uuid : file.key;","67","  };","68","","69","  getSearchResultText = (file: TreeComponentWithPath) => {","70","    return file.path;","74","    return getFiles({","79","    }).then(({ components, paging }) => ({","80","      paging,","81","      results: components.filter(file => file.path !== undefined)","82","    }));","85","  loadSearchResultCount = (files: TreeComponentWithPath[]) => {","86","    return this.props.loadSearchResultCount('files', {","87","      files: files","88","        .map(file => {","89","          const component = this.getReferencedComponent(file.key);","90","          return component && component.uuid;","91","        })","92","        .filter(isDefined)","93","    });","103","  renderFacetItem = (fileUuid: string) => {","104","    const name = this.getFilePath(fileUuid);","108","  renderSearchResult = (file: TreeComponentWithPath, term: string) => {","109","    return this.renderFile(highlightTerm(collapsePath(file.path, 15), term));","114","      <ListStyleFacet<TreeComponentWithPath>","132","        values={this.props.fileUuids}"],"delete":["25","import { getTree, TreeComponent } from '..\/..\/..\/api\/components';","32","  files: string[];","39","  stats: T.Dict<number> | undefined;","43","  getFile = (file: string) => {","45","    return referencedComponents[file]","46","      ? collapsePath(referencedComponents[file].path || '', 15)","47","      : file;","50","  getFacetItemText = (file: string) => {","52","    return referencedComponents[file] ? referencedComponents[file].path || '' : file;","55","  getSearchResultKey = (file: TreeComponent) => {","56","    return file.id;","59","  getSearchResultText = (file: TreeComponent) => {","60","    return file.path || file.name;","64","    return getTree({","67","      qualifiers: 'FIL',","70","    }).then(({ components, paging }) => ({ paging, results: components }));","73","  loadSearchResultCount = (files: TreeComponent[]) => {","74","    return this.props.loadSearchResultCount('files', { files: files.map(file => file.id) });","84","  renderFacetItem = (file: string) => {","85","    const name = this.getFile(file);","89","  renderSearchResult = (file: TreeComponent, term: string) => {","90","    return this.renderFile(highlightTerm(collapsePath(file.path || file.name, 15), term));","95","      <ListStyleFacet<TreeComponent>","113","        values={this.props.files}"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/__snapshots__\/FileFacet-test.tsx.snap":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/api\/components.ts":[{"add":["129","  id?: string;","138","export interface TreeComponentWithPath extends TreeComponent {","139","  path: string;","140","}","141","","142","type GetTreeParams = {","150","} & T.BranchParameters;","151","","152","export function getTree<T = TreeComponent>(","153","  data: GetTreeParams & { qualifiers?: string }","154","): Promise<{ baseComponent: TreeComponent; components: T[]; paging: T.Paging }> {","158","export function getFiles(data: GetTreeParams) {","159","  return getTree<TreeComponentWithPath>({ ...data, qualifiers: 'FIL' });","160","}","161",""],"delete":["129","  id: string;","138","export function getTree(data: {","140","  branch?: string;","144","  pullRequest?: string;","146","  qualifiers?: string;","149","}): Promise<{ baseComponent: TreeComponent; components: TreeComponent[]; paging: T.Paging }> {"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/FileFacet-test.tsx":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/Sidebar.tsx":[{"add":["38","  facets: T.Dict<Facet | undefined>;","81","          fileUuids={query.files}"],"delete":["38","  facets: T.Dict<Facet>;","81","          files={query.files}"]}]}},"355a3b65066e968e3669a97892df81ef15770a55":{"changes":{"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/utils\/PathUtilsTest.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/RelativePathPredicate.java":"MODIFY","sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/batch\/fs\/internal\/OrPredicateTest.java":"MODIFY","sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/batch\/fs\/internal\/RelativePathPredicateTest.java":"ADD"},"diff":{"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/utils\/PathUtilsTest.java":[{"add":["44","  public void sanitize_succeeds() {","51","  public void sanitize_invalid_paths_returns_null() {","52","    assertThat(PathUtils.sanitize(\"..\/foo\")).isNull();","53","  }","54","","55","  @Test","56","  public void canonicalPath_succeeds() throws Exception {"],"delete":["44","  public void testSanitize() throws Exception {","51","  public void test_canonicalPath() throws Exception {"]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/RelativePathPredicate.java":[{"add":["21","import java.util.Collections;","22","import javax.annotation.Nullable;","32","  @Nullable","45","    if (path == null) {","46","      return false;","47","    }","48","","54","    if (path != null) {","55","      InputFile f = index.inputFile(this.path);","56","      if (f != null) {","57","        return Collections.singletonList(f);","58","      }","59","    }","60","    return Collections.emptyList();"],"delete":["25","import java.util.Arrays;","26","import java.util.Collections;","27","","50","    InputFile f = index.inputFile(this.path);","51","    return f != null ? Arrays.asList(f) : Collections.<InputFile>emptyList();"]}],"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/batch\/fs\/internal\/OrPredicateTest.java":[{"add":["35","    FilePredicate orPredicate = OrPredicate.create(Arrays.asList(pathPatternPredicate1,","36","      OrPredicate.create(Arrays.asList(pathPatternPredicate2, pathPatternPredicate3))));","42","    FilePredicate orPredicate = OrPredicate.create(Arrays.asList());","50","    FilePredicate andPredicate = OrPredicate.create(Arrays.asList(pathPatternPredicate1,","59","    FilePredicate andPredicate = OrPredicate.create(Arrays.asList(pathPatternPredicate1,"],"delete":["35","    FilePredicate orPredicate = OrPredicate.create(Arrays.<FilePredicate>asList(pathPatternPredicate1,","36","      OrPredicate.create(Arrays.<FilePredicate>asList(pathPatternPredicate2, pathPatternPredicate3))));","42","    FilePredicate orPredicate = OrPredicate.create(Arrays.<FilePredicate>asList());","50","    FilePredicate andPredicate = OrPredicate.create(Arrays.<FilePredicate>asList(pathPatternPredicate1,","59","    FilePredicate andPredicate = OrPredicate.create(Arrays.<FilePredicate>asList(pathPatternPredicate1,"]}],"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/batch\/fs\/internal\/RelativePathPredicateTest.java":[{"add":[],"delete":[]}]}},"9388dfa0d2826d4b7ddc905a46ef514a5136aa1c":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/platform\/monitoring\/EsMonitorTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/monitoring\/EsMonitor.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/platform\/monitoring\/EsMonitorTest.java":[{"add":["22","import org.elasticsearch.ElasticsearchException;","27","import org.sonar.server.es.EsClient;","32","import static org.mockito.Mockito.mock;","33","import static org.mockito.Mockito.when;","40","  private EsMonitor underTest = new EsMonitor(esTester.client());","79","","80","  @Test","81","  public void attributes_displays_exception_message_when_cause_null_when_client_fails() {","82","    EsClient esClientMock = mock(EsClient.class);","83","    EsMonitor underTest = new EsMonitor(esClientMock);","84","    when(esClientMock.prepareClusterStats()).thenThrow(new RuntimeException(\"RuntimeException with no cause\"));","85","","86","    Map<String, Object> attributes = underTest.attributes();","87","    assertThat(attributes).hasSize(1);","88","    assertThat(attributes.get(\"State\")).isEqualTo(\"RuntimeException with no cause\");","89","  }","90","","91","  @Test","92","  public void attributes_displays_exception_message_when_cause_is_not_ElasticSearchException_when_client_fails() {","93","    EsClient esClientMock = mock(EsClient.class);","94","    EsMonitor underTest = new EsMonitor(esClientMock);","95","    when(esClientMock.prepareClusterStats()).thenThrow(new RuntimeException(\"RuntimeException with cause not ES\", new IllegalArgumentException(\"some cause message\")));","96","","97","    Map<String, Object> attributes = underTest.attributes();","98","    assertThat(attributes).hasSize(1);","99","    assertThat(attributes.get(\"State\")).isEqualTo(\"RuntimeException with cause not ES\");","100","  }","101","","102","  @Test","103","  public void attributes_displays_cause_message_when_cause_is_ElasticSearchException_when_client_fails() {","104","    EsClient esClientMock = mock(EsClient.class);","105","    EsMonitor underTest = new EsMonitor(esClientMock);","106","    when(esClientMock.prepareClusterStats()).thenThrow(new RuntimeException(\"RuntimeException with ES cause\", new ElasticsearchException(\"some cause message\")));","107","","108","    Map<String, Object> attributes = underTest.attributes();","109","    assertThat(attributes).hasSize(1);","110","    assertThat(attributes.get(\"State\")).isEqualTo(\"some cause message\");","111","  }"],"delete":["36","  EsMonitor underTest = new EsMonitor(esTester.client());"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/monitoring\/EsMonitor.java":[{"add":["23","import org.elasticsearch.ElasticsearchException;","32","import org.sonar.api.utils.log.Loggers;","70","    try {","71","      Map<String, Object> attributes = new LinkedHashMap<>();","72","      attributes.put(\"State\", getStateAsEnum());","73","      attributes.put(\"Indices\", indexAttributes());","74","      attributes.put(\"Number of Nodes\", getNumberOfNodes());","75","      attributes.put(\"Nodes\", nodeAttributes());","76","      return attributes;","77","    } catch (Exception es) {","78","      Loggers.get(EsMonitor.class).warn(\"Failed to retrieve ES attributes. There will be only a single \\\"state\\\" attribute.\", es);","79","      Map<String, Object> attributes = new LinkedHashMap<>();","80","      attributes.put(\"State\", (es.getCause() instanceof ElasticsearchException ? es.getCause().getMessage() : es.getMessage()));","81","      return attributes;","82","    }"],"delete":["68","    Map<String, Object> attributes = new LinkedHashMap<>();","69","    attributes.put(\"State\", getStateAsEnum());","70","    attributes.put(\"Indices\", indexAttributes());","71","    attributes.put(\"Number of Nodes\", getNumberOfNodes());","72","    attributes.put(\"Nodes\", nodeAttributes());","73","    return attributes;"]}]}},"6f593749e3a6ecd3b01c761692e4e15167ec88ba":{"changes":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/externalissue\/ExternalIssueImporter.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/externalissue\/ReportParserTest.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/externalissue\/ExternalIssueImporter.java":[{"add":["21","import com.google.common.base.MoreObjects;","111","    if (file == null) {","112","      return null;","114","    newLocation.on(file);","115","","116","    if (location.message != null) {","117","      newLocation.message(location.message);","118","    }","119","","120","    if (location.textRange != null) {","121","      if (location.textRange.startColumn != null) {","122","        TextPointer start = file.newPointer(location.textRange.startLine, location.textRange.startColumn);","123","        int endLine = MoreObjects.firstNonNull(location.textRange.endLine, location.textRange.startLine);","124","        int endColumn;","125","","126","        if (location.textRange.endColumn == null) {","127","          \/\/ assume it's until the last character of the end line","128","          endColumn = file.selectLine(endLine).end().lineOffset();","129","        } else {","130","          endColumn = location.textRange.endColumn;","131","        }","132","        TextPointer end = file.newPointer(endLine, endColumn);","133","        newLocation.at(file.newRange(start, end));","134","      } else {","135","        newLocation.at(file.selectLine(location.textRange.startLine));","136","      }","137","    }","138","    return newLocation;"],"delete":["110","    if (file != null) {","111","      newLocation","112","        .on(file);","113","","114","      if (location.message != null) {","115","        newLocation.message(location.message);","116","      }","117","","118","      if (location.textRange != null) {","119","        if (location.textRange.startColumn != null) {","120","          TextPointer start = file.newPointer(location.textRange.startLine, location.textRange.startColumn);","121","          int endLine;","122","          int endColumn;","123","","124","          if (location.textRange.endLine == null) {","125","            \/\/ assume it's on a single line","126","            endLine = location.textRange.startLine;","127","          } else {","128","            endLine = location.textRange.endLine;","129","          }","130","          if (location.textRange.endColumn == null) {","131","            \/\/ assume it's until the last character of the end line","132","            endColumn = file.selectLine(endLine).end().lineOffset();","133","          } else {","134","            endColumn = location.textRange.endColumn;","135","          }","136","          TextPointer end = file.newPointer(endLine, endColumn);","137","          newLocation.at(file.newRange(start, end));","138","        } else {","139","          newLocation.at(file.selectLine(location.textRange.startLine));","140","        }","141","      }","142","      return newLocation;","144","    return null;"]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/externalissue\/ReportParserTest.java":[{"add":[],"delete":["38","    System.out.println(Paths.get(\"org\/sonar\/scanner\/externalissue\/report.json\").toAbsolutePath());"]}]}},"2868b35e7d44b13c23a354e6c979e5060c25e792":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/step\/PersistProjectLinksStepTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/step\/PersistProjectLinksStep.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/step\/PersistProjectLinksStepTest.java":[{"add":["24","import org.mockito.Mockito;","26","import org.sonar.core.util.UuidFactory;","28","import org.sonar.db.DbClient;","34","import org.sonar.server.computation.task.projectanalysis.analysis.AnalysisMetadataHolderRule;","35","import org.sonar.server.computation.task.projectanalysis.analysis.Branch;","36","import org.sonar.server.computation.task.projectanalysis.batch.BatchReportReader;","40","import org.sonar.server.computation.task.projectanalysis.component.TreeRootHolder;","46","import static org.mockito.Mockito.mock;","47","import static org.mockito.Mockito.verifyZeroInteractions;","48","import static org.mockito.Mockito.when;","58","  @Rule","59","  public AnalysisMetadataHolderRule analysisMetadataHolder = new AnalysisMetadataHolderRule();","67","  PersistProjectLinksStep step = new PersistProjectLinksStep(analysisMetadataHolder, db.getDbClient(), treeRootHolder, reportReader, UuidFactoryFast.getInstance());","75","  public void no_effect_if_branch_is_not_main() {","76","    DbClient dbClient = mock(DbClient.class);","77","    TreeRootHolder treeRootHolder = mock(TreeRootHolder.class);","78","    BatchReportReader reportReader = mock(BatchReportReader.class);","79","    UuidFactory uuidFactory = mock(UuidFactory.class);","80","    mockBranch(false);","81","    PersistProjectLinksStep underTest = new PersistProjectLinksStep(analysisMetadataHolder, dbClient, treeRootHolder, reportReader, uuidFactory);","82","","83","    underTest.execute();","84","","85","    verifyZeroInteractions(uuidFactory, reportReader, treeRootHolder, dbClient);","86","  }","87","","88","  @Test","90","    mockBranch(true);","119","    mockBranch(true);","140","    mockBranch(true);","162","    mockBranch(true);","185","    mockBranch(true);","206","    mockBranch(true);","224","    mockBranch(true);","242","    mockBranch(true);","257","","258","  private void mockBranch(boolean isMain) {","259","    Branch branch = Mockito.mock(Branch.class);","260","    when(branch.isMain()).thenReturn(isMain);","261","    analysisMetadataHolder.setBranch(branch);","262","  }"],"delete":["48","","51","","54","","58","  PersistProjectLinksStep step = new PersistProjectLinksStep(db.getDbClient(), treeRootHolder, reportReader, UuidFactoryFast.getInstance());"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/step\/PersistProjectLinksStep.java":[{"add":["33","import org.sonar.server.computation.task.projectanalysis.analysis.AnalysisMetadataHolder;","43","  private final AnalysisMetadataHolder analysisMetadataHolder;","55","  public PersistProjectLinksStep(AnalysisMetadataHolder analysisMetadataHolder, DbClient dbClient, TreeRootHolder treeRootHolder,","56","    BatchReportReader reportReader, UuidFactory uuidFactory) {","57","    this.analysisMetadataHolder = analysisMetadataHolder;","66","    if (!analysisMetadataHolder.getBranch().isMain()) {","67","      return;","68","    }","69",""],"delete":["53","  public PersistProjectLinksStep(DbClient dbClient, TreeRootHolder treeRootHolder, BatchReportReader reportReader, UuidFactory uuidFactory) {"]}]}},"9c3628f7f4d5745c010cb2f958129495fdcda632":{"changes":{"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v79\/TruncateEnvAndSystemVarsFromScannerContext.java":"ADD","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v79\/DbVersion79Test.java":"ADD","server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v79\/TruncateEnvAndSystemVarsFromScannerContextTest\/ce_scanner_context.sql":"ADD","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v79\/TruncateEnvAndSystemVarsFromScannerContextTest.java":"ADD","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v79\/DbVersion79.java":"ADD","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/report\/AnalysisContextReportPublisherTest.java":"MODIFY","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/MigrationConfigurationModuleTest.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/MigrationConfigurationModule.java":"MODIFY","server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/container\/ComputeEngineContainerImplTest.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/AnalysisContextReportPublisher.java":"MODIFY"},"diff":{"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v79\/TruncateEnvAndSystemVarsFromScannerContext.java":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v79\/DbVersion79Test.java":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v79\/TruncateEnvAndSystemVarsFromScannerContextTest\/ce_scanner_context.sql":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v79\/TruncateEnvAndSystemVarsFromScannerContextTest.java":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v79\/DbVersion79.java":[{"add":[],"delete":[]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/report\/AnalysisContextReportPublisherTest.java":[{"add":["153","    assertThat(lines).containsExactly(","254","    assertThat(lines).containsExactly("],"delete":["153","    assertThat(lines).containsExactly(\"Environment variables:\",","154","      \"System properties:\",","165","  public void shouldNotDumpSQPropsInSystemProps() throws Exception {","166","    logTester.setLevel(LoggerLevel.DEBUG);","167","    ScannerReportWriter writer = new ScannerReportWriter(temp.newFolder());","168","    Properties props = new Properties();","169","    props.setProperty(COM_FOO, \"bar\");","170","    props.setProperty(SONAR_SKIP, \"true\");","171","    when(system2.properties()).thenReturn(props);","172","    DefaultInputModule rootModule = new DefaultInputModule(ProjectDefinition.create()","173","      .setBaseDir(temp.newFolder())","174","      .setWorkDir(temp.newFolder())","175","      .setProperty(\"sonar.projectKey\", \"foo\")","176","      .setProperty(COM_FOO, \"bar\")","177","      .setProperty(SONAR_SKIP, \"true\"));","178","    when(store.allModules()).thenReturn(singletonList(rootModule));","179","    when(hierarchy.root()).thenReturn(rootModule);","180","","181","    publisher.init(writer);","182","","183","    List<String> lines = FileUtils.readLines(writer.getFileStructure().analysisLog(), StandardCharsets.UTF_8);","184","    assertThat(lines).containsExactly(\"Environment variables:\",","185","      \"System properties:\",","186","      \"  - com.foo=bar\",","187","      \"SonarQube plugins:\",","188","      \"Global server settings:\",","189","      \"Project server settings:\",","190","      \"Project scanner properties:\",","191","      \"  - sonar.projectKey=foo\",","192","      \"  - sonar.skip=true\");","193","  }","194","","195","  @Test","196","  public void shouldNotDumpEnvTwice() throws Exception {","197","    logTester.setLevel(LoggerLevel.DEBUG);","198","    ScannerReportWriter writer = new ScannerReportWriter(temp.newFolder());","199","","200","    Map<String, String> env = new HashMap<>();","201","    env.put(FOO, \"BAR\");","202","    env.put(BIZ, \"BAZ\");","203","    when(system2.envVariables()).thenReturn(env);","204","    DefaultInputModule rootModule = new DefaultInputModule(ProjectDefinition.create()","205","      .setBaseDir(temp.newFolder())","206","      .setWorkDir(temp.newFolder())","207","      .setProperty(\"sonar.projectKey\", \"foo\")","208","      .setProperty(\"env.\" + FOO, \"BAR\"));","209","    when(store.allModules()).thenReturn(singletonList(rootModule));","210","    when(hierarchy.root()).thenReturn(rootModule);","211","    publisher.init(writer);","212","","213","    String content = FileUtils.readFileToString(writer.getFileStructure().analysisLog(), StandardCharsets.UTF_8);","214","    assertThat(content).containsOnlyOnce(FOO);","215","    assertThat(content).containsOnlyOnce(BIZ);","216","    assertThat(content).containsSubsequence(BIZ, FOO);","217","","218","","219","    content = FileUtils.readFileToString(writer.getFileStructure().analysisLog(), StandardCharsets.UTF_8);","220","    assertThat(content).containsOnlyOnce(FOO);","221","    assertThat(content).containsOnlyOnce(BIZ);","222","    assertThat(content).doesNotContain(\"env.\" + FOO);","223","  }","224","","225","  @Test","316","    assertThat(lines).containsExactly(\"Environment variables:\",","317","      \"System properties:\","]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/MigrationConfigurationModuleTest.java":[{"add":["39","        + 20"],"delete":["39","        + 19"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/MigrationConfigurationModule.java":[{"add":["44","import org.sonar.server.platform.db.migration.version.v79.DbVersion79;","70","      DbVersion79.class,"],"delete":[]}],"server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/container\/ComputeEngineContainerImplTest.java":[{"add":["124","          + 23 \/\/ MigrationConfigurationModule"],"delete":["124","          + 22 \/\/ MigrationConfigurationModule"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/AnalysisContextReportPublisher.java":[{"add":[],"delete":["29","import java.util.Properties;","38","import org.sonar.api.utils.log.Logger;","39","import org.sonar.api.utils.log.Loggers;","53","  private static final Logger LOG = Loggers.get(AnalysisContextReportPublisher.class);","54","","83","      if (LOG.isDebugEnabled()) {","84","        writeEnvVariables(fileWriter);","85","        writeSystemProps(fileWriter);","86","      }","103","  private void writeSystemProps(BufferedWriter fileWriter) throws IOException {","104","    fileWriter.write(\"System properties:\\n\");","105","    Properties sysProps = system.properties();","106","    for (String prop : new TreeSet<>(sysProps.stringPropertyNames())) {","107","      if (prop.startsWith(SONAR_PROP_PREFIX)) {","108","        continue;","109","      }","110","      fileWriter.append(String.format(KEY_VALUE_FORMAT, prop, sysProps.getProperty(prop))).append('\\n');","111","    }","112","  }","113","","114","  private void writeEnvVariables(BufferedWriter fileWriter) throws IOException {","115","    fileWriter.append(\"Environment variables:\\n\");","116","    Map<String, String> envVariables = system.envVariables();","117","    new TreeSet<>(envVariables.keySet())","118","      .forEach(envKey -> {","119","        try {","120","          String envValue = isSensitiveEnvVariable(envKey) ? \"******\" : envVariables.get(envKey);","121","          fileWriter.append(String.format(KEY_VALUE_FORMAT, envKey, envValue)).append('\\n');","122","        } catch (IOException e) {","123","          throw new IllegalStateException(e);","124","        }","125","      });","126","  }","127","","201","  private static boolean isSensitiveEnvVariable(String key) {","202","    return key.contains(\"_TOKEN\") || key.contains(\"_PASSWORD\") || key.contains(\"_SECURED\");","203","  }","204",""]}]}},"80120ab1ec8e300f1a7f22c269fd67fe8535ded8":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/__tests__\/__snapshots__\/RuleListItem-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/RuleListItem.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/__tests__\/__snapshots__\/RuleListItem-test.tsx.snap":[{"add":["18","    className=\"coding-rules-detail-quality-profile-deactivate button-red disabled\"","33","      className=\"coding-rules-detail-quality-profile-deactivate button-red disabled\""],"delete":["18","    className=\"coding-rules-detail-quality-profile-deactivate button-red\"","19","    disabled={true}","34","      className=\"coding-rules-detail-quality-profile-deactivate button-red\"","35","      disabled={true}"]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/RuleListItem.tsx":[{"add":["189","        <Button className=\"coding-rules-detail-quality-profile-deactivate button-red disabled\">"],"delete":["189","        <Button","190","          className=\"coding-rules-detail-quality-profile-deactivate button-red\"","191","          disabled={true}>"]}]}},"c9a6b47c6d50ab883af641bf3e3b9ab9c2d63637":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/create\/project\/__tests__\/__snapshots__\/CreateProjectModeSelection-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/create\/project\/CreateProjectModeSelection.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/create\/project\/__tests__\/__snapshots__\/CreateProjectModeSelection-test.tsx.snap":[{"add":[],"delete":["30","        width={80}","88","        width={80}","152","        width={80}","224","        width={80}"]}],"server\/sonar-web\/src\/main\/js\/apps\/create\/project\/CreateProjectModeSelection.tsx":[{"add":[],"delete":["52","            width={80}"]}]}},"f5d0d6237b0e52afcb1981953a7c08baee794915":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/changelog\/Changelog.tsx":"MODIFY","sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/changelog\/__tests__\/Changelog-test.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/changelog\/Changelog.tsx":[{"add":["40","    e => -Number(parseDate(e.date)),"],"delete":["23","import * as startOfMinute from 'date-fns\/start_of_minute';","41","    e => -Number(startOfMinute(parseDate(e.date))),"]}],"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["1505","my_account.tokens_last_usage=Last use"],"delete":["1505","my_account.tokens_last_usage=Last usage"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/changelog\/__tests__\/Changelog-test.tsx":[{"add":["81","","82","it('should render events sorted by time and action', () => {","83","  const events = [","84","    createEvent({ date: '2019-02-07T14:03:45', action: 'DEACTIVATED' }),","85","    createEvent({ date: '2019-02-07T14:03:14', action: 'DEACTIVATED' }),","86","    createEvent({ date: '2019-02-07T14:03:14', action: 'ACTIVATED' }),","87","    createEvent({ date: '2019-02-07T14:03:07', action: 'ACTIVATED' })","88","  ];","89","  const changelog = shallow(<Changelog events={events} organization={null} \/>);","90","  const rows = changelog.find('tbody').find('tr');","91","","92","  const getAction = (index: number) =>","93","    rows","94","      .at(index)","95","      .childAt(2)","96","      .childAt(0)","97","      .text();","98","","99","  expect(getAction(0)).toBe('quality_profiles.changelog.DEACTIVATED');","100","  expect(getAction(1)).toBe('quality_profiles.changelog.ACTIVATED');","101","  expect(getAction(2)).toBe('quality_profiles.changelog.DEACTIVATED');","102","  expect(getAction(3)).toBe('quality_profiles.changelog.ACTIVATED');","103","});"],"delete":[]}]}},"b115df733b619d9d5ebc1cdb783e06da48f14a59":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/api-documentation\/item-view.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/api-documentation\/action-view.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/api-documentation\/controller.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/api-documentation\/app.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/api-documentation\/item-view.js":[{"add":["27","          return that.options.state.match(test, action.internal);"],"delete":["27","          return that.options.state.match(test);"]}],"server\/sonar-web\/src\/main\/js\/apps\/api-documentation\/action-view.js":[{"add":["18","    this.listenTo(this.options.state, 'change', this.toggleHidden);","49","    this.$el.toggleClass('hidden', !this.options.state.match(test, this.model.get('internal')));"],"delete":["18","    this.listenTo(this.options.state, 'change:query', this.toggleHidden);","49","    this.$el.toggleClass('hidden', !this.options.state.match(test));"]}],"server\/sonar-web\/src\/main\/js\/apps\/api-documentation\/controller.js":[{"add":["64","      var model = actions.findWhere({ key: opts.action });","65","      if (model) {","66","        if (model.get('internal')) {","67","          this.options.state.set({ internal: true });","68","        }","69","        actionsView.scrollToAction(opts.action);","70","      }"],"delete":["64","      actionsView.scrollToAction(opts.action);"]}],"server\/sonar-web\/src\/main\/js\/apps\/api-documentation\/app.js":[{"add":["18","      this.state.match = function (test, internal) {","20","        var internalCheck = !this.get('internal') && internal;","21","        return test.search(pattern) !== -1 && !internalCheck;"],"delete":["18","      this.state.match = function (test) {","20","        return test.search(pattern) !== -1;"]}]}},"09a93fb52007589a5f49fca38af56a9c4dcde478":{"changes":{"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/SendIssueNotificationsStep.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/SendIssueNotificationsStepTest.java":"MODIFY"},"diff":{"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/SendIssueNotificationsStep.java":[{"add":["107","    if (service.hasProjectSubscribersForTypes(analysisMetadataHolder.getProject().getUuid(), NOTIF_TYPES)) {"],"delete":["107","    if (service.hasProjectSubscribersForTypes(project.getUuid(), NOTIF_TYPES)) {"]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/SendIssueNotificationsStepTest.java":[{"add":["63","import org.sonar.server.project.Project;","66","import static java.util.Collections.emptyList;","150","    analysisMetadataHolder.setProject(new Project(PROJECT.getUuid(), PROJECT.getKey(), PROJECT.getName(), null, emptyList()));","163","    analysisMetadataHolder.setProject(new Project(PROJECT.getUuid(), PROJECT.getKey(), PROJECT.getName(), null, emptyList()));","197","    analysisMetadataHolder.setProject(new Project(PROJECT.getUuid(), PROJECT.getKey(), PROJECT.getName(), null, emptyList()));","218","    analysisMetadataHolder.setProject(new Project(PROJECT.getUuid(), PROJECT.getKey(), PROJECT.getName(), null, emptyList()));","235","    ComponentDto project = newPrivateProjectDto(newOrganizationDto());","236","    ComponentDto branch = setUpBranch(project);","239","    when(notificationService.hasProjectSubscribersForTypes(project.uuid(), NOTIF_TYPES)).thenReturn(true);","240","    analysisMetadataHolder.setProject(Project.from(project));","256","    ComponentDto project = newPrivateProjectDto(newOrganizationDto());","257","    ComponentDto branch = setUpBranch(project);","260","    when(notificationService.hasProjectSubscribersForTypes(project.uuid(), NOTIF_TYPES)).thenReturn(true);","261","    analysisMetadataHolder.setProject(Project.from(project));","278","    ComponentDto project = newPrivateProjectDto(newOrganizationDto());","279","    ComponentDto branch = setUpBranch(project);","283","    analysisMetadataHolder.setProject(Project.from(project));","297","    analysisMetadataHolder.setProject(new Project(PROJECT.getUuid(), PROJECT.getKey(), PROJECT.getName(), null, emptyList()));","344","    analysisMetadataHolder.setProject(new Project(PROJECT.getUuid(), PROJECT.getKey(), PROJECT.getName(), null, emptyList()));","415","    analysisMetadataHolder.setProject(new Project(PROJECT.getUuid(), PROJECT.getKey(), PROJECT.getName(), null, emptyList()));","459","    analysisMetadataHolder.setProject(new Project(PROJECT.getUuid(), PROJECT.getKey(), PROJECT.getName(), null, emptyList()));","487","    analysisMetadataHolder.setProject(new Project(PROJECT.getUuid(), PROJECT.getKey(), PROJECT.getName(), null, emptyList()));","488","    when(notificationService.hasProjectSubscribersForTypes(PROJECT.getUuid(), NOTIF_TYPES)).thenReturn(true);","506","    analysisMetadataHolder.setProject(Project.from(project));","532","    when(notificationService.hasProjectSubscribersForTypes(project.projectUuid(), NOTIF_TYPES)).thenReturn(true);","552","    analysisMetadataHolder.setProject(Project.from(project));","562","    when(notificationService.hasProjectSubscribersForTypes(project.uuid(), NOTIF_TYPES)).thenReturn(true);","592","    analysisMetadataHolder.setProject(Project.from(project));","593","    when(notificationService.hasProjectSubscribersForTypes(project.uuid(), NOTIF_TYPES)).thenReturn(true);","641","  private ComponentDto setUpBranch(ComponentDto project) {"],"delete":["142","","230","    ComponentDto branch = setUpProjectWithBranch();","233","    when(notificationService.hasProjectSubscribersForTypes(branch.uuid(), NOTIF_TYPES)).thenReturn(true);","249","    ComponentDto branch = setUpProjectWithBranch();","252","    when(notificationService.hasProjectSubscribersForTypes(branch.uuid(), NOTIF_TYPES)).thenReturn(true);","269","    ComponentDto branch = setUpProjectWithBranch();","514","    when(notificationService.hasProjectSubscribersForTypes(PROJECT.getUuid(), NOTIF_TYPES)).thenReturn(true);","543","    when(notificationService.hasProjectSubscribersForTypes(branch.uuid(), NOTIF_TYPES)).thenReturn(true);","573","    when(notificationService.hasProjectSubscribersForTypes(PROJECT.getUuid(), NOTIF_TYPES)).thenReturn(true);","621","  private ComponentDto setUpProjectWithBranch() {","622","    ComponentDto project = newPrivateProjectDto(newOrganizationDto());"]}]}},"ee23b84886f5dcf199165f4590d9705d07a60567":{"changes":{"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/measure\/Measure.java":"MODIFY"},"diff":{"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/measure\/Measure.java":[{"add":["42","    ERROR(\"Red\"),","43","","44","    \/**","45","     * @deprecated since 7.6, warning quality gates doesn't exist anymore on new analysis","46","     *\/","47","    @Deprecated","48","    WARN(\"Orange\");"],"delete":["42","    ERROR(\"Red\");"]}]}},"8bc4086d095f80bef3946f493357f70cf093c0c7":{"changes":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/DefinitionDefaults.js":"MODIFY"},"diff":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["1005","settings.reset_confirm.title=Reset Setting","1006","settings.reset_confirm.description=Are you sure that you want to reset this setting ?"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/DefinitionDefaults.js":[{"add":["21","import Modal from 'react-modal';","25","\/*::","26","type Props = {","27","  isDefault: boolean,","28","  onReset: () => void,","29","  setting: Object","30","};","31","*\/","32","\/*::","33","type State = { reseting: boolean };","34","*\/","35","","37","  \/*:: props: Props; *\/","38","  state \/*: State*\/ = { reseting: false };","39","","40","  handleClose = () => {","41","    this.setState({ reseting: false });","44","  handleReset = (e \/*: Event & {target: HTMLElement} *\/) => {","47","    this.setState({ reseting: true });","48","  };","49","","50","  handleSubmit = (event \/*: Event *\/) => {","51","    event.preventDefault();","53","    this.handleClose();","54","  };","55","","56","  renderModal() {","57","    const header = translate('settings.reset_confirm.title');","58","    return (","59","      <Modal","60","        isOpen={true}","61","        contentLabel={header}","62","        className=\"modal\"","63","        overlayClassName=\"modal-overlay\"","64","        onRequestClose={this.handleClose}>","65","        <header className=\"modal-head\">","66","          <h2>","67","            {header}","68","          <\/h2>","69","        <\/header>","70","        <form onSubmit={this.handleSubmit}>","71","          <div className=\"modal-body\">","72","            <p>","73","              {translate('settings.reset_confirm.description')}","74","            <\/p>","75","          <\/div>","76","          <footer className=\"modal-foot\">","77","            <button className=\"button-red\">","78","              {translate('reset_verb')}","79","            <\/button>","80","            <button type=\"reset\" className=\"button-link\" onClick={this.handleClose}>","81","              {translate('cancel')}","82","            <\/button>","83","          <\/footer>","84","        <\/form>","85","      <\/Modal>","86","    );","104","            <button onClick={this.handleReset}>","113","        {this.state.reseting && this.renderModal()}"],"delete":["21","import PropTypes from 'prop-types';","26","  static propTypes = {","27","    setting: PropTypes.object.isRequired,","28","    isDefault: PropTypes.bool.isRequired,","29","    onReset: PropTypes.func.isRequired","32","  handleReset(e \/*: Object *\/) {","53","            <button onClick={e => this.handleReset(e)}>"]}]}},"58c5f2d0729d2fb11ec100123b0311db0f8df4b1":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/RegisterRulesTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/RegisterRulesTest.java":[{"add":["23","import java.util.stream.IntStream;","186","  public void mass_insert_then_remove_rule() {","187","    int numberOfRules = 5000;","188","","189","    \/\/ register many rules","190","    execute(context -> {","191","      RulesDefinition.NewRepository repo = context.createRepository(\"fake\", \"java\");","192","      IntStream.range(0, numberOfRules).forEach(i ->","193","        repo.createRule(randomAlphanumeric(5))","194","        .setName(randomAlphanumeric(20))","195","        .setHtmlDescription(randomAlphanumeric(20)));","196","      repo.done();","197","    });","198","","199","    \/\/ verify db","200","    assertThat(dbClient.ruleDao().selectAllDefinitions(dbTester.getSession()))","201","      .hasSize(numberOfRules)","202","      .extracting(RuleDefinitionDto::getStatus)","203","      .containsOnly(RuleStatus.READY);","204","","205","    \/\/ verify index","206","    assertThat(esTester.countDocuments(RuleIndexDefinition.INDEX_TYPE_RULE)).isEqualTo(numberOfRules);","207","    assertThat(ruleIndex.search(new RuleQuery(), new SearchOptions()).getIds())","208","      .isNotEmpty();","209","","210","    \/\/ register no rule","211","    execute(context -> context.createRepository(\"fake\", \"java\").done());","212","","213","    \/\/ verify db","214","    assertThat(dbClient.ruleDao().selectAllDefinitions(dbTester.getSession()))","215","      .hasSize(numberOfRules)","216","      .extracting(RuleDefinitionDto::getStatus)","217","      .containsOnly(RuleStatus.REMOVED);","218","","219","    \/\/ verify index (documents are still in the index, but all are removed)","220","    assertThat(esTester.countDocuments(RuleIndexDefinition.INDEX_TYPE_RULE)).isEqualTo(numberOfRules);","221","    assertThat(ruleIndex.search(new RuleQuery(), new SearchOptions()).getIds())","222","      .isEmpty();","223","  }","224","","225","  @Test"],"delete":[]}]}},"baa8e99e2e78f026c8389352e8a1be8b2fd574d6":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/security-hotspots\/components\/status\/Status.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/security-hotspots\/components\/status\/__tests__\/__snapshots__\/Status-test.tsx.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/security-hotspots\/components\/status\/Status.tsx":[{"add":["97","          {trigger}"],"delete":["97","          {actionableTrigger}"]}],"server\/sonar-web\/src\/main\/js\/apps\/security-hotspots\/components\/status\/__tests__\/__snapshots__\/Status-test.tsx.snap":[{"add":["299","    <div","300","      aria-expanded={false}","301","      aria-haspopup={true}","302","      className=\"padded bordered display-flex-column display-flex-justify-center readonly\"","303","      id=\"status-trigger\"","304","      onClick={[Function]}","305","      role=\"button\"","306","      tabIndex={0}","309","        className=\"display-flex-center display-flex-space-between\"","311","        <StatusDescription","312","          showTitle={true}","313","          statusOption=\"FIXED\"","314","        \/>","316","    <\/div>"],"delete":["299","    <Toggler","300","      closeOnClickOutside={true}","301","      closeOnEscape={true}","302","      onRequestClose={[Function]}","303","      open={false}","304","      overlay={","305","        <DropdownOverlay","306","          noPadding={true}","307","          placement=\"bottom\"","308","        >","309","          <StatusSelection","310","            hotspot={","311","              Object {","312","                \"assignee\": \"assignee\",","313","                \"assigneeUser\": Object {","314","                  \"active\": true,","315","                  \"local\": true,","316","                  \"login\": \"assignee\",","317","                  \"name\": \"John Doe\",","318","                },","319","                \"author\": \"author\",","320","                \"authorUser\": Object {","321","                  \"active\": true,","322","                  \"local\": true,","323","                  \"login\": \"author\",","324","                  \"name\": \"John Doe\",","325","                },","326","                \"canChangeStatus\": false,","327","                \"changelog\": Array [],","328","                \"comment\": Array [],","329","                \"component\": Object {","330","                  \"breadcrumbs\": Array [],","331","                  \"key\": \"my-project\",","332","                  \"name\": \"MyProject\",","333","                  \"organization\": \"foo\",","334","                  \"qualifier\": \"FIL\",","335","                  \"qualityGate\": Object {","336","                    \"isDefault\": true,","337","                    \"key\": \"30\",","338","                    \"name\": \"Sonar way\",","339","                  },","340","                  \"qualityProfiles\": Array [","341","                    Object {","342","                      \"deleted\": false,","343","                      \"key\": \"my-qp\",","344","                      \"language\": \"ts\",","345","                      \"name\": \"Sonar way\",","346","                    },","347","                  ],","348","                  \"tags\": Array [],","349","                },","350","                \"creationDate\": \"2013-05-13T17:55:41+0200\",","351","                \"key\": \"01fc972e-2a3c-433e-bcae-0bd7f88f5123\",","352","                \"line\": 142,","353","                \"message\": \"'3' is a magic number.\",","354","                \"project\": Object {","355","                  \"breadcrumbs\": Array [],","356","                  \"key\": \"my-project\",","357","                  \"name\": \"MyProject\",","358","                  \"organization\": \"foo\",","359","                  \"qualifier\": \"TRK\",","360","                  \"qualityGate\": Object {","361","                    \"isDefault\": true,","362","                    \"key\": \"30\",","363","                    \"name\": \"Sonar way\",","364","                  },","365","                  \"qualityProfiles\": Array [","366","                    Object {","367","                      \"deleted\": false,","368","                      \"key\": \"my-qp\",","369","                      \"language\": \"ts\",","370","                      \"name\": \"Sonar way\",","371","                    },","372","                  ],","373","                  \"tags\": Array [],","374","                },","375","                \"resolution\": \"FIXED\",","376","                \"rule\": Object {","377","                  \"fixRecommendations\": \"<p>This a <strong>strong<\/strong> message about fixing !<\/p>\",","378","                  \"key\": \"squid:S2077\",","379","                  \"name\": \"That rule\",","380","                  \"riskDescription\": \"<p>This a <strong>strong<\/strong> message about risk !<\/p>\",","381","                  \"securityCategory\": \"sql-injection\",","382","                  \"vulnerabilityDescription\": \"<p>This a <strong>strong<\/strong> message about vulnerability !<\/p>\",","383","                  \"vulnerabilityProbability\": \"HIGH\",","384","                },","385","                \"status\": \"REVIEWED\",","386","                \"textRange\": Object {","387","                  \"endLine\": 142,","388","                  \"endOffset\": 83,","389","                  \"startLine\": 142,","390","                  \"startOffset\": 26,","391","                },","392","                \"updateDate\": \"2013-05-13T17:55:42+0200\",","393","                \"users\": Array [","394","                  Object {","395","                    \"active\": true,","396","                    \"local\": true,","397","                    \"login\": \"assignee\",","398","                    \"name\": \"John Doe\",","399","                  },","400","                  Object {","401","                    \"active\": true,","402","                    \"local\": true,","403","                    \"login\": \"author\",","404","                    \"name\": \"John Doe\",","405","                  },","406","                ],","407","              }","408","            }","409","            onStatusOptionChange={[Function]}","410","          \/>","411","        <\/DropdownOverlay>","412","      }","415","        aria-expanded={false}","416","        aria-haspopup={true}","417","        className=\"padded bordered display-flex-column display-flex-justify-center readonly\"","418","        id=\"status-trigger\"","419","        onClick={[Function]}","420","        role=\"button\"","421","        tabIndex={0}","423","        <div","424","          className=\"display-flex-center display-flex-space-between\"","425","        >","426","          <StatusDescription","427","            showTitle={true}","428","            statusOption=\"FIXED\"","429","          \/>","430","        <\/div>","432","    <\/Toggler>"]}]}},"5397922aac9a0567d1cf0e3f5fc7958d00e7d9ef":{"changes":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/measures\/CoreMetrics.java":"MODIFY"},"diff":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["2070","metric.new_duplicated_lines_density.description=Duplicated lines (%) on new code balanced by statements","2071","metric.new_duplicated_lines_density.name=Duplicated Lines (%) on New Code"],"delete":["2070","metric.new_duplicated_lines_density.description=Duplicated lines on new code balanced by statements","2071","metric.new_duplicated_lines_density.name=Duplicated Lines on New Code"]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/measures\/CoreMetrics.java":[{"add":["758","  public static final Metric<Integer> NEW_DUPLICATED_LINES_DENSITY = new Metric.Builder(NEW_DUPLICATED_LINES_DENSITY_KEY, \"Duplicated Lines (%) on New Code\",","760","      .setDescription(\"Duplicated lines (%) on new code balanced by statements\")"],"delete":["758","  public static final Metric<Integer> NEW_DUPLICATED_LINES_DENSITY = new Metric.Builder(NEW_DUPLICATED_LINES_DENSITY_KEY, \"Duplicated Lines on New Code\",","760","      .setDescription(\"Duplicated lines on new code balanced by statements\")"]}]}},"240fbd41e6be19711c02d991d1aae3d169cfc0a9":{"changes":{"server\/sonar-web\/src\/main\/js\/app\/components\/__tests__\/ComponentContainer-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/ComponentContainer.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/app\/components\/__tests__\/ComponentContainer-test.tsx":[{"add":["163","  (getTasksForComponent as jest.Mock<any>)","164","    .mockResolvedValueOnce({","165","      queue: [{ id: 'foo', status: STATUSES.IN_PROGRESS }]","166","    })","167","    .mockResolvedValueOnce({","168","      queue: []","169","    });","171","","172","  \/\/ First round, there's something in the queue, and component navigation was","173","  \/\/ not called again (it's called once at mount, hence the 1 times assertion","174","  \/\/ here).","179","  jest.runOnlyPendingTimers();","180","","181","  \/\/ Second round, the queue is now empty, hence we assume the previous task","182","  \/\/ was done. We immediately load the component again.","184","","185","  \/\/ Trigger the update.","187","  \/\/ The component was correctly re-loaded.","189","  \/\/ The status API call will be called 1 final time after the component is","190","  \/\/ fully loaded, so the total will be 3.","193","  \/\/ Make sure the timeout was cleared. It should not be called again.","196","  \/\/ The number of calls haven't changed.","201","it('reloads component after task progress finished, and moves straight to current', async () => {","202","  jest.useFakeTimers();","203","  (getComponentData as jest.Mock<any>).mockResolvedValueOnce({","204","    component: { key: 'bar' }","205","  });","206","  (getTasksForComponent as jest.Mock<any>)","207","    .mockResolvedValueOnce({ queue: [] })","208","    .mockResolvedValueOnce({ queue: [], current: { id: 'foo', status: STATUSES.SUCCESS } });","209","  const wrapper = shallowRender();","210","","211","  \/\/ First round, nothing in the queue, and component navigation was not called","212","  \/\/ again (it's called once at mount, hence the 1 times assertion here).","213","  await waitAndUpdate(wrapper);","214","  expect(getComponentNavigation).toHaveBeenCalledTimes(1);","215","  expect(getTasksForComponent).toHaveBeenCalledTimes(1);","216","","217","  jest.runOnlyPendingTimers();","218","","219","  \/\/ Second round, nothing in the queue, BUT a success task is current. This","220","  \/\/ means the queue was processed too quick for us to see, and we didn't see","221","  \/\/ any pending tasks in the queue. So we immediately load the component again.","222","  expect(getTasksForComponent).toHaveBeenCalledTimes(2);","223","","224","  \/\/ Trigger the update.","225","  await waitAndUpdate(wrapper);","226","  \/\/ The component was correctly re-loaded.","227","  expect(getComponentNavigation).toHaveBeenCalledTimes(2);","228","  \/\/ The status API call will be called 1 final time after the component is","229","  \/\/ fully loaded, so the total will be 3.","230","  expect(getTasksForComponent).toHaveBeenCalledTimes(3);","231","});","232",""],"delete":["163","  const inProgressTask = { id: 'foo', status: STATUSES.IN_PROGRESS } as T.Task;","164","  (getTasksForComponent as jest.Mock<any>).mockResolvedValueOnce({ queue: [inProgressTask] });","170","  jest.runAllTimers();"]}],"server\/sonar-web\/src\/main\/js\/app\/components\/ComponentContainer.tsx":[{"add":["195","                (!currentTask && newCurrentTask) ||","196","                (currentTask && newCurrentTask && currentTask.id !== newCurrentTask.id);"],"delete":["195","                currentTask && newCurrentTask && currentTask.id !== newCurrentTask.id;"]}]}},"d3f1775ff556addcd4b666cf971aa9da2a176795":{"changes":{"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/history\/MigrationHistoryMeddler.java":"ADD","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/history\/MigrationHistoryMeddlerTest.java":"ADD","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/history\/MigrationHistoryImpl.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/MigrationConfigurationModule.java":"MODIFY","server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/container\/ComputeEngineContainerImplTest.java":"MODIFY","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/history\/MigrationHistoryImplTest.java":"MODIFY"},"diff":{"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/history\/MigrationHistoryMeddler.java":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/history\/MigrationHistoryMeddlerTest.java":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/history\/MigrationHistoryImpl.java":[{"add":["42","  private final MigrationHistoryMeddler migrationHistoryMeddler;","44","  public MigrationHistoryImpl(Database database, MigrationHistoryMeddler migrationHistoryMeddler) {","46","    this.migrationHistoryMeddler = migrationHistoryMeddler;","53","      migrationHistoryMeddler.meddle(this);"],"delete":["43","  public MigrationHistoryImpl(Database database) {"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/MigrationConfigurationModule.java":[{"add":["23","import org.sonar.server.platform.db.migration.history.MigrationHistoryMeddler;","78","      MigrationHistoryImpl.class,","79","      MigrationHistoryMeddler.class);"],"delete":["77","      MigrationHistoryImpl.class);"]}],"server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/container\/ComputeEngineContainerImplTest.java":[{"add":["124","          + 24 \/\/ MigrationConfigurationModule"],"delete":["124","          + 23 \/\/ MigrationConfigurationModule"]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/history\/MigrationHistoryImplTest.java":[{"add":["33","import static org.mockito.Mockito.mock;","34","import static org.mockito.Mockito.verify;","42","  private MigrationHistoryMeddler migrationHistoryMeddler = mock(MigrationHistoryMeddler.class);","43","  private MigrationHistoryImpl underTest = new MigrationHistoryImpl(dbTester.database(), migrationHistoryMeddler);","46","  public void start_does_not_fail_if_table_history_exists_and_calls_meddler() {","48","","49","    verify(migrationHistoryMeddler).meddle(underTest);"],"delete":["40","  private MigrationHistoryImpl underTest = new MigrationHistoryImpl(dbTester.database());","43","  public void start_does_not_fail_if_table_history_exists() {"]}]}},"75cb959484359498dcda14e520c95db0c8789ec5":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/store\/rootReducer.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/components\/CopyQualityGateForm.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/store\/rootReducer.js":[{"add":["45","        qualityGates: state.qualityGates.filter(","46","          candidate => candidate.id !== action.qualityGate.id","47","        ),","48","        qualityGate: state.qualityGate.id === action.qualityGate.id ? undefined : state.qualityGate"],"delete":["45","        qualityGates: state.qualityGates.filter(candidate => candidate.id !== action.qualityGate.id)"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/components\/CopyQualityGateForm.tsx":[{"add":["23","import { ResetButtonLink, SubmitButton } from '..\/..\/..\/components\/ui\/buttons';","118","            <SubmitButton className=\"js-confirm\" disabled={submitDisabled}>","120","            <\/SubmitButton>"],"delete":["23","import { Button, ResetButtonLink } from '..\/..\/..\/components\/ui\/buttons';","118","            <Button className=\"js-confirm\" disabled={submitDisabled}>","120","            <\/Button>"]}]}},"5fe552a778b1d29165f38208a2f91ea5adbac0d5":{"changes":{"server\/sonar-web\/yarn.lock":"MODIFY"},"diff":{"server\/sonar-web\/yarn.lock":[{"add":["6210","mdast-util-toc@2.1.0:"],"delete":["6210","mdast-util-toc@2.1.0, mdast-util-toc@^2.0.0:","8094","remark-slug@^5.0.0:","8095","  version \"5.1.1\"","8096","  resolved \"https:\/\/registry.yarnpkg.com\/remark-slug\/-\/remark-slug-5.1.1.tgz#eb5dba0cf779487ef7ddf65c735ba4d4ca017542\"","8097","  integrity sha512-r591rdoDPJkSSAVvEaTVUkqbMp7c7AyZfif14V0Dp66GQkOHzaPAS6wyhawSbqpS0ZdTnfJS+TltFoxzi6bdIA==","8098","  dependencies:","8099","    github-slugger \"^1.0.0\"","8100","    mdast-util-to-string \"^1.0.0\"","8101","    unist-util-visit \"^1.0.0\"","8102","","8123","remark-toc@5.0.0:","8124","  version \"5.0.0\"","8125","  resolved \"https:\/\/registry.yarnpkg.com\/remark-toc\/-\/remark-toc-5.0.0.tgz#f1e13ed11062ad4d102b02e70168bd85015bf129\"","8126","  integrity sha512-j2A\/fpio1nzNRJtY6nVaFUCtXNfFPxaj6I5UHFsFgo4xKmc0VokRRIzGqz4Vfs7u+dPrHjnoHkImu1Dia0jDSQ==","8127","  dependencies:","8128","    mdast-util-toc \"^2.0.0\"","8129","    remark-slug \"^5.0.0\"","8130",""]}]}},"5cb5deb5e5f41648120e8757104c0fd412483e26":{"changes":{"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/source\/DbLineHashVersion.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/source\/PersistFileSourcesStep.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/filemove\/MutableMovedFilesRepositoryRule.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/RemoveProcessedComponentsVisitor.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/source\/FileSourceDao.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/IntegrateIssuesVisitorTest.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/MovedIssueVisitor.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/ClosedIssuesInputFactoryTest.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/scm\/ScmInfoDbLoaderTest.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/source\/SourceLinesHashRepositoryImpl.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/filemove\/MutableMovedFilesRepositoryImplTest.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/source\/SourceLinesDiffImplTest.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/filemove\/FileMoveDetectionStep.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/source\/SourceLinesHashRepositoryImplTest.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/ClosedIssuesInputFactory.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/filemove\/FileSimilarity.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/filemove\/MovedFilesRepository.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/TrackerBaseInputFactoryTest.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/filemove\/MutableMovedFilesRepositoryImpl.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/MovedIssueVisitorTest.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/TrackerBaseInputFactory.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/RemoveProcessedComponentsVisitorTest.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/scm\/ScmInfoDbLoader.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/source\/SourceLinesDiffImpl.java":"MODIFY"},"diff":{"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/source\/DbLineHashVersion.java":[{"add":["44","   * Reads from DB the version of line hashes for a component and returns whether it was generated taking into account the ranges of significant code.","52","  \/**","53","   * Reads from DB the version of line hashes for a component and returns whether it was generated taking into account the ranges of significant code.","54","   * The response is cached.","55","   * Returns false if the component is not in the DB.","56","   *\/","57","  public boolean hasLineHashesWithoutSignificantCode(Component component) {","58","    return lineHashVersionPerComponent.computeIfAbsent(component, this::compute) == LineHashVersion.WITHOUT_SIGNIFICANT_CODE;","59","  }","60",""],"delete":["44","   * Reads from DB the version of line hashes for a component and returns if it was generated taking into account the ranges of significant code."]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/source\/PersistFileSourcesStep.java":[{"add":[],"delete":["115",""]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/filemove\/MutableMovedFilesRepositoryRule.java":[{"add":["22","import java.util.Optional;"],"delete":["21","import com.google.common.base.Optional;"]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/RemoveProcessedComponentsVisitor.java":[{"add":["21","import java.util.Optional;"],"delete":["21","import com.google.common.base.Optional;"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/source\/FileSourceDao.java":[{"add":["52","    return version == null ? null : LineHashVersion.valueOf(version);","84","    for (List<String> fileUuidsPartition : toUniqueAndSortedPartitions(fileUUids)) {","85","      mapper(dbSession).scrollLineHashes(fileUuidsPartition, rowHandler);"],"delete":["52","    return version == null ? LineHashVersion.WITHOUT_SIGNIFICANT_CODE : LineHashVersion.valueOf(version);","84","    for (List<String> partition : toUniqueAndSortedPartitions(fileUUids)) {","85","      mapper(dbSession).scrollLineHashes(partition, rowHandler);"]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/IntegrateIssuesVisitorTest.java":[{"add":["22","import java.util.Optional;","142","    when(movedFilesRepository.getOriginalFile(any(Component.class))).thenReturn(Optional.empty());"],"delete":["21","import com.google.common.base.Optional;","142","    when(movedFilesRepository.getOriginalFile(any(Component.class))).thenReturn(Optional.absent());"]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/MovedIssueVisitor.java":[{"add":["22","import java.util.Optional;"],"delete":["21","import com.google.common.base.Optional;"]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/ClosedIssuesInputFactoryTest.java":[{"add":["23","import java.util.Optional;","49","    when(movedFilesRepository.getOriginalFile(component)).thenReturn(Optional.empty());","83","    when(movedFilesRepository.getOriginalFile(component)).thenReturn(Optional.empty());"],"delete":["21","import com.google.common.base.Optional;","49","    when(movedFilesRepository.getOriginalFile(component)).thenReturn(Optional.absent());","83","    when(movedFilesRepository.getOriginalFile(component)).thenReturn(Optional.absent());"]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/scm\/ScmInfoDbLoaderTest.java":[{"add":["37","import org.sonar.ce.task.projectanalysis.filemove.MutableMovedFilesRepositoryRule;","70","  @Rule","71","  public MutableMovedFilesRepositoryRule movedFiles = new MutableMovedFilesRepositoryRule();","76","  private ScmInfoDbLoader underTest = new ScmInfoDbLoader(analysisMetadataHolder, movedFiles, dbTester.getDbClient(), referenceBranchComponentUuids);"],"delete":["73","  private ScmInfoDbLoader underTest = new ScmInfoDbLoader(analysisMetadataHolder, dbTester.getDbClient(), referenceBranchComponentUuids);"]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/source\/SourceLinesHashRepositoryImpl.java":[{"add":["63","    if (cacheHit && !dbLineHashesVersion.hasLineHashesWithoutSignificantCode(component)) {","77","    if (dbLineHashesVersion.hasLineHashesWithoutSignificantCode(component)) {","81","    \/\/ if the file is not in the DB, this will be used too"],"delete":["63","    if (cacheHit && dbLineHashesVersion.hasLineHashesWithSignificantCode(component)) {","77","    if (!dbLineHashesVersion.hasLineHashesWithSignificantCode(component)) {"]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/filemove\/MutableMovedFilesRepositoryImplTest.java":[{"add":["114","    assertThat(underTest.getOriginalFile(SOME_FILE)).isEmpty();","116","      assertThat(underTest.getOriginalFile(component)).isEmpty();","125","      assertThat(underTest.getOriginalFile(component)).isEmpty();"],"delete":["30","import static org.assertj.guava.api.Assertions.assertThat;","115","    assertThat(underTest.getOriginalFile(SOME_FILE)).isAbsent();","117","      assertThat(underTest.getOriginalFile(component)).isAbsent();","126","      assertThat(underTest.getOriginalFile(component)).isAbsent();"]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/source\/SourceLinesDiffImplTest.java":[{"add":["23","import org.junit.Rule;","28","import org.sonar.ce.task.projectanalysis.filemove.MutableMovedFilesRepositoryRule;","49","  @Rule","50","  public MutableMovedFilesRepositoryRule movedFiles = new MutableMovedFilesRepositoryRule();","53","    referenceBranchComponentUuids, movedFiles, analysisMetadataHolder);"],"delete":["49","    referenceBranchComponentUuids, analysisMetadataHolder);"]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/filemove\/FileMoveDetectionStep.java":[{"add":["28","import java.util.Collection;","36","import java.util.stream.Collectors;","128","    \/\/ can't find matches if at least one of the added or removed files groups is empty => abort","136","    Map<String, File> addedFileHashesByUuid = getReportFileHashesByUuid(reportFilesByUuid, addedFileUuids);","141","    ScoreMatrix scoreMatrix = computeScoreMatrix(dbFilesByUuid, removedFileUuids, addedFileHashesByUuid);","156","    ElectedMatches electedMatches = electMatches(removedFileUuids, addedFileHashesByUuid, matchesByScore);","222","  private Map<String, File> getReportFileHashesByUuid(Map<String, Component> reportFilesByUuid, Set<String> addedFileUuids) {","223","    return addedFileUuids.stream().collect(Collectors.toMap(fileUuid -> fileUuid, fileUuid -> {","225","      return new LazyFileImpl(() -> getReportFileLineHashes(component), component.getFileAttributes().getLines());","226","    }));","230","    \/\/ this is not ideal because if the file moved, this component won't exist in DB with the same UUID.","231","    \/\/ Assuming that the file also had significant code before the move, it will be fine.","235","  private ScoreMatrix computeScoreMatrix(Map<String, DbComponent> dtosByUuid, Set<String> removedFileUuids, Map<String, File> addedFileHashesByUuid) {","236","    ScoreMatrix.ScoreFile[] addedFiles = addedFileHashesByUuid.entrySet().stream()","246","    \/\/ sort by highest line count first","247","    Arrays.sort(addedFiles, SCORE_FILE_COMPARATOR);","248","    Arrays.sort(removedFiles, SCORE_FILE_COMPARATOR);","249","    int[][] scoreMatrix = new int[removedFiles.length][addedFiles.length];","250","    int smallestAddedFileSize = addedFiles[0].getLineCount();","251","    int largestAddedFileSize = addedFiles[addedFiles.length - 1].getLineCount();","252","","253","    Map<String, Integer> removedFilesIndexesByUuid = new HashMap<>(removedFileUuids.size());","259","      if (smallestAddedFileSize <= lowerBound || largestAddedFileSize >= upperBound) {","262","      removedFilesIndexesByUuid.put(removedFile.getFileUuid(), removeFileIndex);","265","    LineHashesWithKeyDtoResultHandler rowHandler = new LineHashesWithKeyDtoResultHandler(removedFilesIndexesByUuid, removedFiles,","266","      addedFiles, addedFileHashesByUuid, scoreMatrix);","268","      dbClient.fileSourceDao().scrollLineHashes(dbSession, removedFilesIndexesByUuid.keySet(), rowHandler);","271","    return new ScoreMatrix(removedFiles, addedFiles, scoreMatrix, rowHandler.getMaxScore());","275","    private final Map<String, Integer> removedFileIndexesByUuid;","278","    private final Map<String, File> newFilesByUuid;","282","    private LineHashesWithKeyDtoResultHandler(Map<String, Integer> removedFileIndexesByUuid, ScoreMatrix.ScoreFile[] removedFiles,","283","      ScoreMatrix.ScoreFile[] newFiles, Map<String, File> newFilesByUuid,","285","      this.removedFileIndexesByUuid = removedFileIndexesByUuid;","288","      this.newFilesByUuid = newFilesByUuid;","298","      int removedFileIndex = removedFileIndexesByUuid.get(lineHashesDto.getUuid());","299","      ScoreMatrix.ScoreFile removedFile = removedFiles[removedFileIndex];","312","        File fileHashesInDb = new FileImpl(lineHashesDto.getLineHashes());","313","        File unmatchedFile = newFilesByUuid.get(newFile.getFileUuid());","314","        int score = fileSimilarity.score(fileHashesInDb, unmatchedFile);","315","        scoreMatrix[removedFileIndex][newFileIndex] = score;","409","    public ElectedMatches(MatchesByScore matchesByScore, Set<String> dbFileUuids, Map<String, File> reportFileHashesByUuid) {","411","      this.matchedFileUuids = new HashSet<>(dbFileUuids.size() + reportFileHashesByUuid.size());","420","    public List<Match> filter(Collection<Match> matches) {","421","      return matches.stream().filter(this::notAlreadyMatched).collect(Collectors.toList());"],"delete":["59","import static com.google.common.collect.FluentIterable.from;","127","    \/\/ can find matches if at least one of the added or removed files groups is empty => abort","135","    Map<String, File> reportFileSourcesByUuid = getReportFileSourcesByUuid(reportFilesByUuid, addedFileUuids);","140","    ScoreMatrix scoreMatrix = computeScoreMatrix(dbFilesByUuid, removedFileUuids, reportFileSourcesByUuid);","155","    ElectedMatches electedMatches = electMatches(removedFileUuids, reportFileSourcesByUuid, matchesByScore);","221","  private Map<String, File> getReportFileSourcesByUuid(Map<String, Component> reportFilesByUuid, Set<String> addedFileUuids) {","222","    ImmutableMap.Builder<String, File> builder = ImmutableMap.builder();","223","    for (String fileUuid : addedFileUuids) {","225","      File file = new LazyFileImpl(","226","        component.getName(),","227","        () -> getReportFileLineHashes(component),","228","        component.getFileAttributes().getLines());","229","      builder.put(fileUuid, file);","230","    }","231","    return builder.build();","238","  private ScoreMatrix computeScoreMatrix(Map<String, DbComponent> dtosByUuid, Set<String> removedFileUuids, Map<String, File> newFileSourcesByUuid) {","239","    ScoreMatrix.ScoreFile[] newFiles = newFileSourcesByUuid.entrySet().stream()","248","    \/\/ sort by highest line count first","249","    Arrays.sort(newFiles, SCORE_FILE_COMPARATOR);","250","    Arrays.sort(removedFiles, SCORE_FILE_COMPARATOR);","251","    int[][] scoreMatrix = new int[removedFiles.length][newFiles.length];","252","    int lastNewFileIndex = newFiles.length - 1;","254","    Map<String, Integer> removedFilesIndexes = new HashMap<>(removedFileUuids.size());","260","      if (newFiles[0].getLineCount() <= lowerBound || newFiles[lastNewFileIndex].getLineCount() >= upperBound) {","263","      removedFilesIndexes.put(removedFile.getFileUuid(), removeFileIndex);","266","    LineHashesWithKeyDtoResultHandler rowHandler = new LineHashesWithKeyDtoResultHandler(removedFilesIndexes, removedFiles,","267","      newFiles, newFileSourcesByUuid, scoreMatrix);","269","      dbClient.fileSourceDao().scrollLineHashes(dbSession, removedFilesIndexes.keySet(), rowHandler);","272","    return new ScoreMatrix(removedFiles, newFiles, scoreMatrix, rowHandler.getMaxScore());","276","    private final Map<String, Integer> removedFilesIndexes;","279","    private final Map<String, File> newFileSourcesByKey;","283","    private LineHashesWithKeyDtoResultHandler(Map<String, Integer> removedFilesIndexes, ScoreMatrix.ScoreFile[] removedFiles,","284","      ScoreMatrix.ScoreFile[] newFiles, Map<String, File> newFileSourcesByKey,","286","      this.removedFilesIndexes = removedFilesIndexes;","289","      this.newFileSourcesByKey = newFileSourcesByKey;","299","      int removeFileIndex = removedFilesIndexes.get(lineHashesDto.getUuid());","300","      ScoreMatrix.ScoreFile removedFile = removedFiles[removeFileIndex];","313","        File fileInDb = new FileImpl(lineHashesDto.getPath(), lineHashesDto.getLineHashes());","314","        File unmatchedFile = newFileSourcesByKey.get(newFile.getFileUuid());","315","        int score = fileSimilarity.score(fileInDb, unmatchedFile);","316","        scoreMatrix[removeFileIndex][newFileIndex] = score;","410","    public ElectedMatches(MatchesByScore matchesByScore, Set<String> dbFileUuids, Map<String, File> reportFileSourcesByUuid) {","412","      this.matchedFileUuids = new HashSet<>(dbFileUuids.size() + reportFileSourcesByUuid.size());","421","    public List<Match> filter(Iterable<Match> matches) {","422","      return from(matches).filter(this::notAlreadyMatched).toList();"]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/source\/SourceLinesHashRepositoryImplTest.java":[{"add":["90","    when(dbLineHashVersion.hasLineHashesWithoutSignificantCode(file)).thenReturn(true);","94","    verify(dbLineHashVersion).hasLineHashesWithoutSignificantCode(file);","101","    when(dbLineHashVersion.hasLineHashesWithoutSignificantCode(file)).thenReturn(false);","107","    verify(dbLineHashVersion).hasLineHashesWithoutSignificantCode(file);","123","    verify(dbLineHashVersion).hasLineHashesWithoutSignificantCode(file);","156","    when(dbLineHashVersion.hasLineHashesWithoutSignificantCode(file)).thenReturn(false);","170","    when(dbLineHashVersion.hasLineHashesWithoutSignificantCode(file)).thenReturn(true);","187","    when(dbLineHashVersion.hasLineHashesWithoutSignificantCode(file)).thenReturn(true);"],"delete":["90","    when(dbLineHashVersion.hasLineHashesWithSignificantCode(file)).thenReturn(false);","94","    verify(dbLineHashVersion).hasLineHashesWithSignificantCode(file);","101","    when(dbLineHashVersion.hasLineHashesWithSignificantCode(file)).thenReturn(true);","107","    verify(dbLineHashVersion).hasLineHashesWithSignificantCode(file);","123","    verify(dbLineHashVersion).hasLineHashesWithSignificantCode(file);","156","    when(dbLineHashVersion.hasLineHashesWithSignificantCode(file)).thenReturn(true);","170","    when(dbLineHashVersion.hasLineHashesWithSignificantCode(file)).thenReturn(false);","187","    when(dbLineHashVersion.hasLineHashesWithSignificantCode(file)).thenReturn(false);"]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/ClosedIssuesInputFactory.java":[{"add":["41","    return new ClosedIssuesLazyInput(dbClient, component, movedFilesRepository.getOriginalFile(component).orElse(null));"],"delete":["41","    return new ClosedIssuesLazyInput(dbClient, component, movedFilesRepository.getOriginalFile(component).orNull());"]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/filemove\/FileSimilarity.java":[{"add":["40","    FileImpl(List<String> lineHashes) {","63","    LazyFileImpl(Supplier<List<String>> supplier, int lineCount) {"],"delete":["31","    String getPath();","32","","39","    private final String path;","43","    FileImpl(String path, List<String> lineHashes) {","44","      this.path = requireNonNull(path, \"path can not be null\");","49","    public String getPath() {","50","      return path;","51","    }","52","","67","    private final String path;","72","    LazyFileImpl(String path, Supplier<List<String>> supplier, int lineCount) {","73","      this.path = requireNonNull(path, \"path can not be null\");","78","    public String getPath() {","79","      return path;","80","    }","81",""]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/filemove\/MovedFilesRepository.java":[{"add":["21","import java.util.Optional;","31","   * Calling this method with a Component which is not a file, will always return {@link Optional#empty()}."],"delete":["21","import com.google.common.base.Optional;","31","   * Calling this method with a Component which is not a file, will always return {@link Optional#absent()}."]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/TrackerBaseInputFactoryTest.java":[{"add":["21","import java.util.Optional;","67","      .thenReturn(Optional.empty());"],"delete":["21","import com.google.common.base.Optional;","67","      .thenReturn(Optional.absent());"]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/filemove\/MutableMovedFilesRepositoryImpl.java":[{"add":["23","import java.util.Optional;","51","      return Optional.empty();","54","    return Optional.ofNullable(originalFiles.get(file.getDbKey()));"],"delete":["21","import com.google.common.base.Optional;","51","      return Optional.absent();","54","    return Optional.fromNullable(originalFiles.get(file.getDbKey()));"]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/MovedIssueVisitorTest.java":[{"add":["22","import java.util.Optional;","65","      .thenReturn(Optional.empty());"],"delete":["21","import com.google.common.base.Optional;","65","      .thenReturn(Optional.absent());"]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/TrackerBaseInputFactory.java":[{"add":["65","    return new FileTrackerBaseLazyInput(dbClient, component, movedFilesRepository.getOriginalFile(component).orElse(null));"],"delete":["65","    return new FileTrackerBaseLazyInput(dbClient, component, movedFilesRepository.getOriginalFile(component).orNull());"]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/RemoveProcessedComponentsVisitorTest.java":[{"add":["21","import java.util.Optional;","48","    when(movedFilesRepository.getOriginalFile(any(Component.class))).thenReturn(Optional.empty());"],"delete":["21","import com.google.common.base.Optional;","48","    when(movedFilesRepository.getOriginalFile(any(Component.class))).thenReturn(Optional.absent());"]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/scm\/ScmInfoDbLoader.java":[{"add":["28","import org.sonar.ce.task.projectanalysis.filemove.MovedFilesRepository;","37","  private final MovedFilesRepository movedFilesRepository;","41","  public ScmInfoDbLoader(AnalysisMetadataHolder analysisMetadataHolder, MovedFilesRepository movedFilesRepository, DbClient dbClient,","42","    ReferenceBranchComponentUuids referenceBranchComponentUuid) {","44","    this.movedFilesRepository = movedFilesRepository;","67","      Optional<MovedFilesRepository.OriginalFile> originalFile = movedFilesRepository.getOriginalFile(file);","68","      if (originalFile.isPresent()) {","69","        return originalFile.map(MovedFilesRepository.OriginalFile::getUuid);","70","      }"],"delete":["39","  public ScmInfoDbLoader(AnalysisMetadataHolder analysisMetadataHolder, DbClient dbClient, ReferenceBranchComponentUuids referenceBranchComponentUuid) {"]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/source\/SourceLinesDiffImpl.java":[{"add":["23","import java.util.Optional;","27","import org.sonar.ce.task.projectanalysis.filemove.MovedFilesRepository;","38","  private final MovedFilesRepository movedFilesRepository;","42","    ReferenceBranchComponentUuids referenceBranchComponentUuids, MovedFilesRepository movedFilesRepository, AnalysisMetadataHolder analysisMetadataHolder) {","47","    this.movedFilesRepository = movedFilesRepository;","65","        Optional<MovedFilesRepository.OriginalFile> originalFile = movedFilesRepository.getOriginalFile(component);","66","        uuid = originalFile.map(MovedFilesRepository.OriginalFile::getUuid).orElse(component.getUuid());"],"delete":["39","    ReferenceBranchComponentUuids referenceBranchComponentUuids, AnalysisMetadataHolder analysisMetadataHolder) {","61","        uuid = component.getUuid();"]}]}},"ac73ac876fae3d027b9ffc83a79b8d324d409a04":{"changes":{"sonar-core\/src\/test\/java\/org\/sonar\/core\/issue\/tracking\/TrackerTest.java":"MODIFY","sonar-core\/src\/main\/java\/org\/sonar\/core\/issue\/tracking\/Tracking.java":"MODIFY","sonar-core\/src\/main\/java\/org\/sonar\/core\/issue\/tracking\/BlockRecognizer.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/batch\/issue\/tracking\/ServerIssueFromWs.java":"MODIFY","sonar-core\/src\/main\/java\/org\/sonar\/core\/issue\/tracking\/Trackable.java":"MODIFY"},"diff":{"sonar-core\/src\/test\/java\/org\/sonar\/core\/issue\/tracking\/TrackerTest.java":[{"add":["32","import static org.apache.commons.lang.StringUtils.trim;","41","  public static final RuleKey RULE_USE_DIAMOND = RuleKey.of(\"java\", \"UseDiamond\");","42","","353","  \/**","354","   * https:\/\/jira.sonarsource.com\/browse\/SONAR-7595","355","   *\/","356","  @Test","357","  public void match_only_one_issue_when_multiple_blocks_match_the_same_block() {","358","    FakeInput baseInput = FakeInput.createForSourceLines(","359","      \"public class Toto {\",","360","      \"  private final Deque<Set<DataItem>> one = new ArrayDeque<Set<DataItem>>();\",","361","      \"  private final Deque<Set<DataItem>> two = new ArrayDeque<Set<DataItem>>();\",","362","      \"  private final Deque<Integer> three = new ArrayDeque<Integer>();\",","363","      \"  private final Deque<Set<Set<DataItem>>> four = new ArrayDeque<Set<DataItem>>();\");","364","    Issue base1 = baseInput.createIssueOnLine(2, RULE_USE_DIAMOND, \"Use diamond\");","365","    baseInput.createIssueOnLine(3, RULE_USE_DIAMOND, \"Use diamond\");","366","    baseInput.createIssueOnLine(4, RULE_USE_DIAMOND, \"Use diamond\");","367","    baseInput.createIssueOnLine(5, RULE_USE_DIAMOND, \"Use diamond\");","368","","369","    FakeInput rawInput = FakeInput.createForSourceLines(","370","      \"public class Toto {\",","371","      \"  \/\/ move all lines\",","372","      \"  private final Deque<Set<DataItem>> one = new ArrayDeque<Set<DataItem>>();\",","373","      \"  private final Deque<Set<DataItem>> two = new ArrayDeque<>();\",","374","      \"  private final Deque<Integer> three = new ArrayDeque<>();\",","375","      \"  private final Deque<Set<Set<DataItem>>> four = new ArrayDeque<>();\");","376","    Issue raw1 = rawInput.createIssueOnLine(3, RULE_USE_DIAMOND, \"Use diamond\");","377","","378","    Tracking<Issue, Issue> tracking = tracker.track(rawInput, baseInput);","379","    assertThat(tracking.getUnmatchedBases()).hasSize(3);","380","    assertThat(tracking.baseFor(raw1)).isEqualTo(base1);","381","  }","382","","392","      this.message = trim(message);"],"delete":["359","      this.message = message;"]}],"sonar-core\/src\/main\/java\/org\/sonar\/core\/issue\/tracking\/Tracking.java":[{"add":["90","    if (!rawToBase.containsKey(raw)) {","91","      rawToBase.put(raw, base);","92","      baseToRaw.put(base, raw);","93","    }"],"delete":["90","    rawToBase.put(raw, base);","91","    baseToRaw.put(base, raw);"]}],"sonar-core\/src\/main\/java\/org\/sonar\/core\/issue\/tracking\/BlockRecognizer.java":[{"add":["77","    \/\/ Check if remaining number of lines exceeds threshold. It avoids processing too many combinations.","78","    if (basesByLine.keySet().size() * rawsByLine.keySet().size() >= 250_000) {","79","      return;","80","    }","81","","82","    List<LinePair> possibleLinePairs = Lists.newArrayList();","83","    for (Integer baseLine : basesByLine.keySet()) {","84","      for (Integer rawLine : rawsByLine.keySet()) {","85","        int weight = lengthOfMaximalBlock(baseInput.getLineHashSequence(), baseLine, rawInput.getLineHashSequence(), rawLine);","86","        possibleLinePairs.add(new LinePair(baseLine, rawLine, weight));","88","    }","89","    Collections.sort(possibleLinePairs, LinePairComparator.INSTANCE);","90","    for (LinePair linePair : possibleLinePairs) {","91","      \/\/ High probability that baseLine has been moved to rawLine, so we can map all issues on baseLine to all issues on rawLine","92","      map(rawsByLine.get(linePair.rawLine), basesByLine.get(linePair.baseLine), tracking);"],"delete":["77","    \/\/ Check if remaining number of lines exceeds threshold","78","    if (basesByLine.keySet().size() * rawsByLine.keySet().size() < 250000) {","79","      List<LinePair> possibleLinePairs = Lists.newArrayList();","80","      for (Integer baseLine : basesByLine.keySet()) {","81","        for (Integer rawLine : rawsByLine.keySet()) {","82","          int weight = lengthOfMaximalBlock(baseInput.getLineHashSequence(), baseLine, rawInput.getLineHashSequence(), rawLine);","83","          possibleLinePairs.add(new LinePair(baseLine, rawLine, weight));","84","        }","86","      Collections.sort(possibleLinePairs, LinePairComparator.INSTANCE);","87","      for (LinePair linePair : possibleLinePairs) {","88","        \/\/ High probability that baseLine has been moved to rawLine, so we can map all Issues on baseLine to all Issues on rawLine","89","        map(rawsByLine.get(linePair.rawLine), basesByLine.get(linePair.baseLine), tracking);","90","      }"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/batch\/issue\/tracking\/ServerIssueFromWs.java":[{"add":["23","import org.sonar.core.issue.tracking.Trackable;","24","","25","import static org.apache.commons.lang.StringUtils.trim;","62","    return dto.hasMsg() ? trim(dto.getMsg()) : \"\";"],"delete":["22","","23","import org.sonar.core.issue.tracking.Trackable;","61","    return dto.hasMsg() ? dto.getMsg() : \"\";"]}],"sonar-core\/src\/main\/java\/org\/sonar\/core\/issue\/tracking\/Trackable.java":[{"add":["33","  \/**","34","   * Trimmed message of issue","35","   *\/"],"delete":[]}]}},"d9f6471696f213f574fe574a13158ed456b2158e":{"changes":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/template\/PermissionTemplateDaoTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/permission\/template\/PermissionTemplateDao.java":"MODIFY","server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/permission\/template\/PermissionTemplateMapper.xml":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/user\/ws\/DeactivateActionTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/permission\/template\/PermissionTemplateMapper.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/user\/ws\/DeactivateAction.java":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/template\/PermissionTemplateDaoTest.java":[{"add":["445","  @Test","446","  public void delete_user_permissions_by_user_id() {","447","    OrganizationDto organization = db.organizations().insert();","448","    OrganizationDto anotherOrganization = db.organizations().insert();","449","    UserDto user = db.users().insertUser();","450","    UserDto anotherUser = db.users().insertUser();","451","    PermissionTemplateDto template = db.permissionTemplates().insertTemplate(organization);","452","    PermissionTemplateDto anotherTemplate = db.permissionTemplates().insertTemplate(anotherOrganization);","453","    String permission = \"PERMISSION\";","454","    db.permissionTemplates().addUserToTemplate(template.getId(), user.getId(), permission);","455","    db.permissionTemplates().addUserToTemplate(template.getId(), anotherUser.getId(), permission);","456","    db.permissionTemplates().addUserToTemplate(anotherTemplate.getId(), user.getId(), permission);","457","","458","    underTest.deleteUserPermissionsByUserId(dbSession, user.getId());","459","    db.commit();","460","","461","    assertThat(db.select(\"select template_id as \\\"templateId\\\", user_id as \\\"userId\\\", permission_reference as \\\"permission\\\" from perm_templates_users\"))","462","      .extracting((row) -> row.get(\"templateId\"), (row) -> row.get(\"userId\"), (row) -> row.get(\"permission\"))","463","      .containsOnly(tuple(template.getId(), anotherUser.getId().longValue(), permission));","464","  }","465",""],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/permission\/template\/PermissionTemplateDao.java":[{"add":["185","  public void deleteUserPermissionsByUserId(DbSession dbSession, int userId) {","186","    mapper(dbSession).deleteUserPermissionsByUserId(userId);","187","  }","188",""],"delete":["107",""]}],"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/permission\/template\/PermissionTemplateMapper.xml":[{"add":["67","  <delete id=\"deleteUserPermissionsByUserId\" parameterType=\"integer\">","68","    delete from perm_templates_users","69","    where","70","    user_id = #{userId,jdbcType=INTEGER}","71","  <\/delete>","72",""],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/user\/ws\/DeactivateActionTest.java":[{"add":["33","import org.sonar.db.permission.template.PermissionTemplateDto;","34","import org.sonar.db.permission.template.PermissionTemplateUserDto;","165","  public void deactivate_user_deletes_his_permission_templates() {","166","    logInAsSystemAdministrator();","167","    UserDto user = insertUser(newUserDto());","168","    PermissionTemplateDto template = db.permissionTemplates().insertTemplate();","169","    PermissionTemplateDto anotherTemplate = db.permissionTemplates().insertTemplate();","170","    db.permissionTemplates().addUserToTemplate(template.getId(), user.getId(), USER);","171","    db.permissionTemplates().addUserToTemplate(anotherTemplate.getId(), user.getId(), CODEVIEWER);","172","","173","    deactivate(user.getLogin()).getInput();","174","","175","    assertThat(db.getDbClient().permissionTemplateDao().selectUserPermissionsByTemplateId(dbSession, template.getId())).extracting(PermissionTemplateUserDto::getUserId).isEmpty();","176","    assertThat(db.getDbClient().permissionTemplateDao().selectUserPermissionsByTemplateId(dbSession, anotherTemplate.getId())).extracting(PermissionTemplateUserDto::getUserId).isEmpty();","177","  }","178","","179","  @Test"],"delete":["155","    db.commit();","172","    db.commit();"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/permission\/template\/PermissionTemplateMapper.java":[{"add":["48","  void deleteUserPermissionsByUserId(@Param(\"userId\") int userId);","49",""],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/user\/ws\/DeactivateAction.java":[{"add":["95","      Integer userId = user.getId();","98","      dbClient.propertiesDao().deleteByQuery(dbSession, PropertyQuery.builder().setUserId(userId).build());","99","      dbClient.userGroupDao().deleteByUserId(dbSession, userId);","100","      dbClient.userPermissionDao().deleteByUserId(dbSession, userId);","101","      dbClient.permissionTemplateDao().deleteUserPermissionsByUserId(dbSession, userId);","102","      dbClient.organizationMemberDao().deleteByUserId(dbSession, userId);","103","      dbClient.userDao().deactivateUserById(dbSession, userId);"],"delete":["96","      dbClient.userGroupDao().deleteByUserId(dbSession, user.getId());","97","      dbClient.propertiesDao().deleteByQuery(dbSession, PropertyQuery.builder().setUserId(user.getId()).build());","98","      dbClient.userPermissionDao().deleteByUserId(dbSession, user.getId());","100","      dbClient.organizationMemberDao().deleteByUserId(dbSession, user.getId());","101","      dbClient.userDao().deactivateUserById(dbSession, user.getId());"]}]}},"ec250533041c5ef7536b7f6bec76fcca7fcd6fa7":{"changes":{"server\/sonar-web\/src\/main\/less\/components\/navbar.less":"MODIFY","server\/sonar-web\/src\/main\/js\/main\/nav\/global\/global-nav-search.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/less\/components\/navbar.less":[{"add":["246","","247","","248",".global-navbar-search-dropdown {","249","  max-height: 80vh;","250","  overflow-y: auto;","251","  overflow-x: hidden;","252","}"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/main\/nav\/global\/global-nav-search.js":[{"add":["101","          <div ref=\"container\" className=\"dropdown-menu dropdown-menu-right global-navbar-search-dropdown\"><\/div>"],"delete":["101","          <div ref=\"container\" className=\"dropdown-menu dropdown-menu-right\"><\/div>"]}]}},"24bf49516a4cf103fdb4009954587353cc5af3d3":{"changes":{"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/purge\/PurgeCommands.java":"MODIFY","server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/purge\/PurgeMapper.xml":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/purge\/PurgeCommandsTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/purge\/PurgeMapper.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/purge\/PurgeDao.java":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/purge\/PurgeCommands.java":[{"add":["268","  void deleteComponentsByMainBranchProjectUuid(String uuid) {","269","    profiler.start(\"deleteComponentsByMainBranchProjectUuid (projects)\");","270","    purgeMapper.deleteComponentsByMainBranchProjectUuid(uuid);","271","    session.commit();","272","    profiler.stop();","273","  }","274",""],"delete":[]}],"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/purge\/PurgeMapper.xml":[{"add":["225","    <delete id=\"deleteComponentsByMainBranchProjectUuid\" parameterType=\"map\">","226","    delete from components","227","    where","228","      main_branch_project_uuid = #{uuid,jdbcType=VARCHAR}","229","  <\/delete>","230",""],"delete":[]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/purge\/PurgeCommandsTest.java":[{"add":["151","  @UseDataProvider(\"projects\")","152","  public void deleteComponentsByMainBranchProjectUuid_deletes_all_branches_of_a_project(OrganizationDto organizationDto, ComponentDto project) {","153","    dbTester.organizations().insert(organizationDto);","154","    dbTester.components().insertComponent(project);","155","    ComponentDto branch = dbTester.components().insertProjectBranch(project);","156","    Stream.of(project, branch).forEach(prj -> {","157","      ComponentDto module = dbTester.components().insertComponent(ComponentTesting.newModuleDto(prj));","158","      ComponentDto directory1 = dbTester.components().insertComponent(ComponentTesting.newDirectory(module, \"a\"));","159","      ComponentDto directory2 = dbTester.components().insertComponent(ComponentTesting.newDirectory(prj, \"b\"));","160","      dbTester.components().insertComponent(newFileDto(prj));","161","      dbTester.components().insertComponent(newFileDto(module));","162","      dbTester.components().insertComponent(newFileDto(directory1));","163","      dbTester.components().insertComponent(newFileDto(directory2));","164","    });","165","","166","    underTest.deleteComponentsByMainBranchProjectUuid(project.uuid());","167","","168","    assertThat(countComponentOfRoot(project)).isEqualTo(8);","169","    assertThat(countComponentOfRoot(branch)).isZero();","170","  }","171","","172","  @Test"],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/purge\/PurgeMapper.java":[{"add":["70","  void deleteComponentsByMainBranchProjectUuid(@Param(\"uuid\") String uuid);","71",""],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/purge\/PurgeDao.java":[{"add":["209","    commands.deleteComponentsByMainBranchProjectUuid(rootUuid);"],"delete":[]}]}},"c839d88af83ce551bd171703ec0902b1e79b3db1":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/IssuesSourceViewer.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/IssuesSourceViewer.js":[{"add":["77","    let locationMessage = undefined;","78","    let locationLine = undefined;","79","    if (","83","    ) {","84","      locationMessage = {","85","        index: selectedLocationIndex,","86","        text: locations[selectedLocationIndex].msg","87","      };","88","      locationLine = locations[selectedLocationIndex].textRange.startLine;","89","    }","90","","91","    \/\/ if location is selected, show (and load) code around it","92","    \/\/ otherwise show code around the open issue","93","    const aroundLine = locationLine || (openIssue.textRange && openIssue.textRange.endLine);","98","          aroundLine={aroundLine}"],"delete":["77","    const locationMessage =","81","        ? { index: selectedLocationIndex, text: locations[selectedLocationIndex].msg }","82","        : undefined;","87","          aroundLine={openIssue.textRange ? openIssue.textRange.endLine : undefined}"]}]}},"88131a33e07fe611f32883079614d1e768f60076":{"changes":{"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/hotspot\/ws\/AssignActionTest.java":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/hotspot\/ws\/AssignAction.java":"MODIFY"},"diff":{"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/hotspot\/ws\/AssignActionTest.java":[{"add":["142","    insertAndLoginAsUserWithProjectUserPermission(randomAlphanumeric(10), project, UserRole.USER);","143","    UserDto assignee = insertUserWithProjectUserPermission(randomAlphanumeric(15), project);","144","","145","    when(issueFieldsSetter.assign(eq(hotspot.toDefaultIssue()), userMatcher(assignee), any(IssueChangeContext.class))).thenReturn(true);","146","","147","    executeRequest(hotspot, assignee.getLogin(), null);","148","","149","    verifyFieldSetters(assignee, null);","150","  }","151","","152","  @Test","153","  public void assign_hotspot_to_someone_for_private_project_branch() {","154","    ComponentDto project = dbTester.components().insertPrivateProject();","155","    ComponentDto branch = dbTester.components().insertProjectBranch(project);","156","    ComponentDto file = dbTester.components().insertComponent(newFileDto(branch));","157","    IssueDto hotspot = dbTester.issues().insertHotspot(branch, file);","158","","159","    insertAndLoginAsUserWithProjectUserPermission(randomAlphanumeric(10), project, UserRole.USER);","175","    insertAndLoginAsUserWithProjectUserPermission(randomAlphanumeric(10), project, UserRole.USER);","182","      .hasMessage(\"Provided user with login '%s' does not have 'Browse' permission to project\", assignee.getLogin());","183","  }","184","","185","  @Test","186","  public void fail_if_assignee_does_not_have_access_for_private_project_branch() {","187","    ComponentDto project = dbTester.components().insertPrivateProject();","188","    ComponentDto branch = dbTester.components().insertProjectBranch(project);","189","    ComponentDto file = dbTester.components().insertComponent(newFileDto(branch));","190","    IssueDto hotspot = dbTester.issues().insertHotspot(branch, file);","191","","192","    insertAndLoginAsUserWithProjectUserPermission(randomAlphanumeric(10), project, UserRole.USER);","193","    UserDto assignee = insertUser(randomAlphanumeric(15));","194","","195","    when(issueFieldsSetter.assign(eq(hotspot.toDefaultIssue()), userMatcher(assignee), any(IssueChangeContext.class))).thenReturn(true);","196","","197","    assertThatThrownBy(() -> executeRequest(hotspot, assignee.getLogin(), null))","198","      .isInstanceOf(IllegalArgumentException.class)","199","      .hasMessage(\"Provided user with login '%s' does not have 'Browse' permission to project\", assignee.getLogin());","209","    UserDto me = insertAndLoginAsUserWithProjectUserPermission(randomAlphanumeric(10), project, UserRole.USER);","334","    UserDto me = insertAndLoginAsUserWithProjectUserPermission(randomAlphanumeric(10), project, UserRole.CODEVIEWER);","475","  private UserDto insertAndLoginAsUserWithProjectUserPermission(String login, ComponentDto project, String permission) {","479","        dbClient.componentDao().selectByUuid(dbTester.getSession(), project.uuid()).get());"],"delete":["142","    insertAndLoginAsUserWithProjectUserPermission(randomAlphanumeric(10), hotspot, project, UserRole.USER);","158","    insertAndLoginAsUserWithProjectUserPermission(randomAlphanumeric(10), hotspot, project, UserRole.USER);","165","      .hasMessage(\"Provided user with login '%s' does not have access to project\", assignee.getLogin());","175","    UserDto me = insertAndLoginAsUserWithProjectUserPermission(randomAlphanumeric(10), hotspot, project, UserRole.USER);","300","    UserDto me = insertAndLoginAsUserWithProjectUserPermission(randomAlphanumeric(10), hotspot, project, UserRole.CODEVIEWER);","441","  private UserDto insertAndLoginAsUserWithProjectUserPermission(String login, IssueDto issue, ComponentDto project, String permission) {","445","        dbClient.componentDao().selectByUuid(dbTester.getSession(), issue.getProjectUuid()).get(),","446","        dbClient.componentDao().selectByUuid(dbTester.getSession(), issue.getComponentUuid()).get());"]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/hotspot\/ws\/AssignAction.java":[{"add":["76","      .setDescription(\"Login of the assignee with 'Browse' project permission\")","131","  private void checkAssigneeProjectPermission(DbSession dbSession, UserDto assignee, String issueProjectUuid) {","132","    ComponentDto componentDto = checkFoundWithOptional(dbClient.componentDao().selectByUuid(dbSession, issueProjectUuid),","134","    String mainProjectUuid = componentDto.getMainBranchProjectUuid() == null ? componentDto.uuid() : componentDto.getMainBranchProjectUuid();","135","    if (componentDto.isPrivate() && !hasProjectPermission(dbSession, assignee.getUuid(), mainProjectUuid)) {","136","      throw new IllegalArgumentException(String.format(\"Provided user with login '%s' does not have 'Browse' permission to project\", assignee.getLogin()));"],"delete":["76","      .setDescription(\"Login of the assignee\")","131","  private void checkAssigneeProjectPermission(DbSession dbSession, UserDto assignee, String projectUuid) {","132","    ComponentDto componentDto = checkFoundWithOptional(dbClient.componentDao().selectByUuid(dbSession, projectUuid),","134","    if (componentDto.isPrivate() && !hasProjectPermission(dbSession, assignee.getUuid(), projectUuid)) {","135","      throw new IllegalArgumentException(String.format(\"Provided user with login '%s' does not have access to project\", assignee.getLogin()));"]}]}},"64a7ab5038ad34b5aadb75707109f31d9d8b990e":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/branch\/pr\/ws\/ListAction.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/branch\/pr\/ws\/ListActionTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/branch\/pr\/ws\/ListAction.java":[{"add":["45","import static com.google.common.base.Strings.emptyToNull;","143","    setNullable(emptyToNull(pullRequestData.getUrl()), builder::setUrl);","144","    setNullable(emptyToNull(pullRequestData.getTitle()), builder::setTitle);"],"delete":["142","    builder.setUrl(pullRequestData.getUrl());","143","    builder.setTitle(pullRequestData.getTitle());"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/branch\/pr\/ws\/ListActionTest.java":[{"add":["155","      .extracting(PullRequest::getKey, PullRequest::getBranch, PullRequest::getIsOrphan, PullRequest::hasUrl, PullRequest::hasTitle)","156","      .containsExactlyInAnyOrder(tuple(\"123\", \"feature\/bar\", false, false, false));"],"delete":["155","      .extracting(PullRequest::getKey, PullRequest::getBranch, PullRequest::getIsOrphan)","156","      .containsExactlyInAnyOrder(tuple(\"123\", \"feature\/bar\", false));"]}]}},"1cb0cb0a38cf5c82b85aec5b59e52db13338d060":{"changes":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/mediumtest\/coverage\/CoverageMediumTest.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/mediumtest\/coverage\/CoverageMediumTest.java":[{"add":["284","  \/\/ SONAR-11641","285","  @Test","286","  public void dontFallbackOnExecutableLinesIfNoCoverageSaved() throws IOException {","287","","288","    File baseDir = temp.getRoot();","289","    File srcDir = new File(baseDir, \"src\");","290","    srcDir.mkdir();","291","","292","    File xooFile = new File(srcDir, \"sample.xoo\");","293","    File measuresFile = new File(srcDir, \"sample.xoo.measures\");","294","    File coverageFile = new File(srcDir, \"sample.xoo.coverage\");","295","    FileUtils.write(xooFile, \"function foo() {\\n  if (a && b) {\\nalert('hello');\\n}\\n}\", StandardCharsets.UTF_8);","296","    FileUtils.write(measuresFile, \"# The code analyzer disagree with the coverage tool and consider some lines to be executable\\nexecutable_lines_data:2=1;3=1;4=0\", StandardCharsets.UTF_8);","297","    FileUtils.write(coverageFile, \"# No lines to cover in this file according to the coverage tool\", StandardCharsets.UTF_8);","298","","299","    AnalysisResult result = tester.newAnalysis()","300","      .properties(ImmutableMap.<String, String>builder()","301","        .put(\"sonar.projectBaseDir\", baseDir.getAbsolutePath())","302","        .put(\"sonar.projectKey\", \"com.foo.project\")","303","        .put(\"sonar.sources\", \"src\")","304","        .build())","305","      .execute();","306","","307","    InputFile file = result.inputFile(\"src\/sample.xoo\");","308","    assertThat(result.coverageFor(file, 1)).isNull();","309","    assertThat(result.coverageFor(file, 2)).isNull();","310","    assertThat(result.coverageFor(file, 3)).isNull();","311","    assertThat(result.coverageFor(file, 4)).isNull();","312","  }","313",""],"delete":[]}]}},"cb3209eefa3f943524effb7b0d4f03c4bf9a45f6":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/code\/utils.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/code\/__tests__\/__snapshots__\/utils-test.tsx.snap":"ADD","server\/sonar-web\/src\/main\/js\/apps\/code\/__tests__\/utils-test.tsx":"ADD"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/code\/utils.ts":[{"add":["101","export function getCodeMetrics(","102","  qualifier: string,","103","  branchLike?: T.BranchLike,","104","  options: { includeQGStatus?: boolean } = {}","105",") {","107","    const metrics = [...PORTFOLIO_METRICS];","108","    return options.includeQGStatus ? metrics.concat('alert_status') : metrics;","151","  const metrics = getCodeMetrics(qualifier, branchLike, { includeQGStatus: true });","216","  const metrics = getCodeMetrics(qualifier, branchLike, { includeQGStatus: true });"],"delete":["101","export function getCodeMetrics(qualifier: string, branchLike?: T.BranchLike) {","103","    return [...PORTFOLIO_METRICS];","146","  const metrics = getCodeMetrics(qualifier, branchLike);","147","  if (['VW', 'SVW'].includes(qualifier)) {","148","    metrics.push('alert_status');","149","  }","214","  const metrics = getCodeMetrics(qualifier, branchLike);"]}],"server\/sonar-web\/src\/main\/js\/apps\/code\/__tests__\/__snapshots__\/utils-test.tsx.snap":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/code\/__tests__\/utils-test.tsx":[{"add":[],"delete":[]}]}},"247ff315c93202bfffa1aaf928e757c9db8ba1fa":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/index\/IssueIndex.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/index\/IssueIndexTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/index\/IssueIndex.java":[{"add":["35","import java.util.Optional;","415","        getCreatedAtFacet(query, filters, esQuery).ifPresent(a -> esSearch.addAggregation(a));","449","  private Optional<AggregationBuilder> getCreatedAtFacet(IssueQuery query, Map<String, QueryBuilder> filters, QueryBuilder esQuery) {","450","    long startTime;","452","    if (createdAfter == null) {","453","      Optional<Long> minDate = getMinCreatedAt(filters, esQuery);","454","      if (!minDate.isPresent()) {","455","        return Optional.empty();","456","      }","457","      startTime = minDate.get();","458","    } else {","459","      startTime = createdAfter.getTime();","460","    }","462","    long endTime = createdBefore == null ? system.now() : createdBefore.getTime();","465","    DateHistogramInterval bucketSize = DateHistogramInterval.YEAR;","487","    return Optional.of(dateHistogram);","490","  private Optional<Long> getMinCreatedAt(Map<String, QueryBuilder> filters, QueryBuilder esQuery) {","509","","511","    System.out.println(\"min=\" + actualValue);","513","      return Optional.empty();","515","    return Optional.of(actualValue.longValue());"],"delete":["414","        esSearch.addAggregation(getCreatedAtFacet(query, filters, esQuery));","448","  private AggregationBuilder getCreatedAtFacet(IssueQuery query, Map<String, QueryBuilder> filters, QueryBuilder esQuery) {","449","    long now = system.now();","450","","451","    DateHistogramInterval bucketSize = DateHistogramInterval.YEAR;","453","    long startTime = createdAfter == null ? getMinCreatedAt(filters, esQuery) : createdAfter.getTime();","455","    long endTime = createdBefore == null ? now : createdBefore.getTime();","458","","480","    return dateHistogram;","483","  private long getMinCreatedAt(Map<String, QueryBuilder> filters, QueryBuilder esQuery) {","504","      return Long.MIN_VALUE;","505","    } else {","506","      return actualValue.longValue();"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/index\/IssueIndexTest.java":[{"add":["869","    assertThat(createdAt).isNull();"],"delete":["31","import org.elasticsearch.test.ESTestCase;","870","    assertThat(createdAt).isEmpty();"]}]}},"763495b61a29ff949730bc9322dd1b4e70241476":{"changes":{"server\/sonar-web\/config\/webpack.config.js":"MODIFY"},"diff":{"server\/sonar-web\/config\/webpack.config.js":[{"add":["83","        automaticNameDelimiter: '-'","212","              maxAssetSize: 400000,","236","            exclude: p => {","237","              \/\/ Transpile D3 packages.","238","              if (\/\\\/d3\/.test(p)) {","239","                return false;","240","              }","241","              \/\/ Ignore anything else in node_modules\/.","242","              return \/node_modules\/.test(p);","243","            },"],"delete":["83","        automaticNameDelimiter: '-',","84","        maxSize: 310000","213","              maxAssetSize: 310000,","237","            exclude: \/(node_modules|libs)\/,"]}]}},"8cdfa2d78c714a11a7f23608d45dd1976bc13ea3":{"changes":{"server\/sonar-docs\/src\/pages\/requirements\/requirements.md":"MODIFY","server\/sonar-docs\/src\/pages\/sonarcloud\/integrations\/vsts.md":"MODIFY","server\/sonar-docs\/src\/pages\/extend\/adding-coding-rules.md":"MODIFY","server\/sonar-docs\/src\/pages\/analysis\/analysis-parameters.md":"MODIFY","server\/sonar-docs\/README.md":"MODIFY","server\/sonar-docs\/src\/pages\/sonarcloud\/integrations\/github.md":"MODIFY","server\/sonar-docs\/src\/pages\/analysis\/languages\/javascript.md":"MODIFY","server\/sonar-docs\/src\/pages\/analysis\/scan\/sonarscanner-for-msbuild.md":"MODIFY","server\/sonar-docs\/src\/layouts\/layout.css":"MODIFY","server\/sonar-docs\/src\/pages\/analysis\/languages\/java.md":"MODIFY","server\/sonar-docs\/src\/pages\/analysis\/languages\/php.md":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/documentation\/styles.css":"MODIFY","server\/sonar-docs\/src\/pages\/analysis\/security_configuration.md":"MODIFY","server\/sonar-docs\/src\/pages\/extend\/deploying-to-marketplace.md":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/docs\/DocMarkdownBlock.css":"MODIFY","server\/sonar-docs\/src\/pages\/setup\/install-server.md":"MODIFY","server\/sonar-docs\/src\/pages\/setup\/upgrading.md":"MODIFY","server\/sonar-docs\/src\/pages\/analysis\/languages\/python.md":"MODIFY","server\/sonar-docs\/src\/pages\/extend\/developing-plugin.md":"MODIFY","server\/sonar-docs\/src\/pages\/project-administration\/narrowing-the-focus.md":"MODIFY","server\/sonar-docs\/src\/pages\/analysis\/overview.md":"MODIFY"},"diff":{"server\/sonar-docs\/src\/pages\/requirements\/requirements.md":[{"add":["7","[[warning]]","8","| **Note:** _On Mac OS X it is highly recommended to install Oracle JDK 11 instead of the corresponding Oracle JRE since the JRE installation does not fully set up your Java environment properly. See [this post](http:\/\/stackoverflow.com\/questions\/15624667\/mac-osx-java-terminal-version-incorrect) for more information._"],"delete":["7","![](\/images\/exclamation.svg) **Note:** _On Mac OS X it is highly recommended to install Oracle JDK 11 instead of the corresponding Oracle JRE since the JRE installation does not fully set up your Java environment properly. See [this post](http:\/\/stackoverflow.com\/questions\/15624667\/mac-osx-java-terminal-version-incorrect) for more information._"]}],"server\/sonar-docs\/src\/pages\/sonarcloud\/integrations\/vsts.md":[{"add":["12","| Only work and school Azure DevOps accounts are authorized to login on SonarCloud."],"delete":["12","| ![Warning](\/images\/exclamation.svg) Only work and school Azure DevOps accounts are authorized to login on SonarCloud."]}],"server\/sonar-docs\/src\/pages\/extend\/adding-coding-rules.md":[{"add":["13","| Before implementing a new coding rule, you should consider whether it is specific to your own context or might benefit others. If it might benefit others, you can propose it on the [Community Forum](https:\/\/community.sonarsource.com\/). If there is shared interest, then it might be implemented for you directly in the related language plugin. It means less maintenance for you, and benefit to others."],"delete":["13","| ![](\/images\/info.svg) Before implementing a new coding rule, you should consider whether it is specific to your own context or might benefit others. If it might benefit others, you can propose it on the [Community Forum](https:\/\/community.sonarsource.com\/). If there is shared interest, then it might be implemented for you directly in the related language plugin. It means less maintenance for you, and benefit to others."]}],"server\/sonar-docs\/src\/pages\/analysis\/analysis-parameters.md":[{"add":["98","| These parameters are listed for completeness, but are deprecated and should not be used in new analyses."],"delete":["98","| ![](\/images\/cross.svg) These parameters are listed for completeness, but are deprecated and should not be used in new analyses."]}],"server\/sonar-docs\/README.md":[{"add":[],"delete":["261","You can also put icons inside messages:","262","","263","```","264","[[danger]]","265","| ![](\/images\/cross.svg) This is a **danger** message.","266","```","267",""]}],"server\/sonar-docs\/src\/pages\/sonarcloud\/integrations\/github.md":[{"add":["22","[[warning]]","23","| This is currently a Beta feature which does not work for all languages and comes with limitations. "],"delete":["22","![](\/images\/exclamation.svg) This is currently a Beta feature which does not work for all languages and comes with limitations. "]}],"server\/sonar-docs\/src\/pages\/analysis\/languages\/javascript.md":[{"add":["33","| This feature is deprecated","73","[[warning]]","74","| When overriding a visit method, you must call the `super` method in order to allow the visitor to visit the rest of the tree."],"delete":["33","| ![](\/images\/exclamation.svg) This feature is deprecated","73","![](\/images\/exclamation.svg) When overriding a visit method, you must call the `super` method in order to allow the visitor to visit the rest of the tree."]}],"server\/sonar-docs\/src\/pages\/analysis\/scan\/sonarscanner-for-msbuild.md":[{"add":["112","| The \"begin\" step will modify your build like this:"],"delete":["112","| ![](\/images\/exclamation.svg) The \"begin\" step will modify your build like this:"]}],"server\/sonar-docs\/src\/layouts\/layout.css":[{"add":["538","  background-image: url(..\/images\/info.svg);","540","  background-position: 10px 15px;","541","  background-repeat: no-repeat;","542","  background-size: 24px;","543","  padding-left: 40px;","570","  background-image: url(..\/images\/cross.svg);","586","  background-color: #ffefbc;","587","  background-image: url(..\/images\/alerts\/danger.svg);","604","  background-image: url(..\/images\/check.svg);"],"delete":["580","  background: #ffefbc url(..\/images\/alerts\/danger.svg) no-repeat;","581","  background-position: 10px 15px;","582","  background-size: 24px;","583","  padding-left: 40px;","584","}","585","","586",".page-sidebar .alert-warning {","587","  background-position: 10px 10px;"]}],"server\/sonar-docs\/src\/pages\/analysis\/languages\/java.md":[{"add":["35","| Android users, Jack doesn't provide the required `.class` files."],"delete":["35","| ![](\/images\/exclamation.svg) Android users, Jack doesn't provide the required `.class` files."]}],"server\/sonar-docs\/src\/pages\/analysis\/languages\/php.md":[{"add":["65","[[warning]]","66","| When overriding a visit method, you must call the super method in order to allow the visitor to visit the children the node."],"delete":["65","![](\/images\/exclamation.svg) When overriding a visit method, you must call the super method in order to allow the visitor to visit the children the node."]}],"server\/sonar-web\/src\/main\/js\/apps\/documentation\/styles.css":[{"add":["101",".documentation-content.markdown .alert .custom-block-body {","102","  padding-left: 24px;","103","  background-position: left 6px;","104","  background-repeat: no-repeat;","105","}","106","","107",".documentation-content.markdown .alert-success .custom-block-body {","108","  background-image: url(\/images\/check.svg);","109","}","110","","111",".documentation-content.markdown .alert-info .custom-block-body {","112","  background-image: url(\/images\/info.svg);","113","}","114","","115",".documentation-content.markdown .alert-warning .custom-block-body {","116","  background-image: url(\/images\/exclamation.svg);","117","}","118","","119",".documentation-content.markdown .alert-error .custom-block-body,","120",".documentation-content.markdown .alert-danger .custom-block-body {","121","  background-image: url(\/images\/cross.svg);","122","}","123",""],"delete":[]}],"server\/sonar-docs\/src\/pages\/analysis\/security_configuration.md":[{"add":["92","| The configuration works per rule. There is no way to share configuration between rules. "],"delete":["92","| ![](\/images\/info.svg) The configuration works per rule. There is no way to share configuration between rules. "]}],"server\/sonar-docs\/src\/pages\/extend\/deploying-to-marketplace.md":[{"add":["43","| We reserve the right to exclude from the Marketplace plugins that we feel would be a dis-service to the community."],"delete":["43","| ![](\/images\/info.svg) We reserve the right to exclude from the Marketplace plugins that we feel would be a dis-service to the community."]}],"server\/sonar-web\/src\/main\/js\/components\/docs\/DocMarkdownBlock.css":[{"add":["33",".markdown-content .alert-error,","34",".markdown-content .alert-danger {","40",".markdown-content .alert-error .alert-icon,","41",".markdown-content .alert-danger .alert-icon {"],"delete":["33",".markdown-content .alert-error {","39",".markdown-content .alert-error .alert-icon {"]}],"server\/sonar-docs\/src\/pages\/setup\/install-server.md":[{"add":["14","[[warning]]","15","| Collation **MUST** be case-sensitive (CS) and accent-sensitive (AS).  ","16","| `READ_COMMITED_SNAPSHOT` **MUST** be set on the SonarQube database."],"delete":["14","![](\/images\/exclamation.svg) Collation **MUST** be case-sensitive (CS) and accent-sensitive (AS).","15","","16","![](\/images\/exclamation.svg) `READ_COMMITED_SNAPSHOT` **MUST** be set on the SonarQube database."]}],"server\/sonar-docs\/src\/pages\/setup\/upgrading.md":[{"add":["15","[[info]]","16","| **Planning to Upgrade to a Commercial Edition?**  ","17","| If you are moving to 6.7 LTS and installing a Commercial Edition, please read this [documentation](https:\/\/docs.sonarqube.org\/display\/SONARQUBE67\/SonarSource+Editions).","20","| Before you start, back up your SonarQube Database. Upgrade problems are rare, but you'll want the backup if anything does happen."],"delete":["15","![](\/images\/info.svg) **Planning to Upgrade to a Commercial Edition?**","16","If you are moving to 6.7 LTS and installing a Commercial Edition, please read this [documentation](https:\/\/docs.sonarqube.org\/display\/SONARQUBE67\/SonarSource+Editions).","19","| ![](\/images\/exclamation.svg) Before you start, back up your SonarQube Database. Upgrade problems are rare, but you'll want the backup if anything does happen."]}],"server\/sonar-docs\/src\/pages\/analysis\/languages\/python.md":[{"add":["75","[[warning]]","76","| When overriding a visit method, you must call the super method in order to allow the visitor to visit the children the node."],"delete":["75","![](\/images\/exclamation.svg) When overriding a visit method, you must call the super method in order to allow the visitor to visit the children the node."]}],"server\/sonar-docs\/src\/pages\/extend\/developing-plugin.md":[{"add":["255","| Compilation does not fail if incorrect dependencies are defined, such as a scanner extension trying to call a web server extension. Still it will fail at runtime when plugin is loaded.","278","| The command `mvn dependency:tree` gives the list of all dependencies, including transitive ones.","336","| Values of the properties suffixed with `.secured` are not available to non-authorized users (anonymous and users without project or global administration rights). `.secured` is needed for passwords, for instance."],"delete":["255","| ![](\/images\/exclamation.svg) Compilation does not fail if incorrect dependencies are defined, such as a scanner extension trying to call a web server extension. Still it will fail at runtime when plugin is loaded.","278","| ![](\/images\/info.svg) The command `mvn dependency:tree` gives the list of all dependencies, including transitive ones.","336","| ![](\/images\/info.svg) Values of the properties suffixed with `.secured` are not available to non-authorized users (anonymous and users without project or global administration rights). `.secured` is needed for passwords, for instance."]}],"server\/sonar-docs\/src\/pages\/project-administration\/narrowing-the-focus.md":[{"add":["93","| You can find the fully qualified rule ID on the Rule definition."],"delete":["93","| ![](\/images\/info.svg) You can find the fully qualified rule ID on the Rule definition."]}],"server\/sonar-docs\/src\/pages\/analysis\/overview.md":[{"add":["26","[[info]]","27","| Remember that depending on which cloud solution you are using for your developments, you can rely on dedicated integrations to help you:"],"delete":["26","![Info](\/images\/info.svg) Remember that depending on which cloud solution you are using for your developments, you can rely on dedicated integrations to help you:"]}]}},"7f8837b1ac4c2b10549be59bcb0d25fb290bb5d4":{"changes":{"server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/OAuth2AuthenticationParametersImpl.java":"MODIFY","server\/sonar-webserver-auth\/src\/test\/java\/org\/sonar\/server\/authentication\/OAuth2AuthenticationParametersImplTest.java":"MODIFY"},"diff":{"server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/OAuth2AuthenticationParametersImpl.java":[{"add":["30","import java.util.regex.Pattern;","47","  private static final Pattern VALID_RETURN_TO = Pattern.compile(\"^\/\\\\w.*\");","152","    String sanitizedUrl = url.trim();","153","    boolean isValidUrl = VALID_RETURN_TO.matcher(sanitizedUrl).matches();","154","    if (!isValidUrl) {","155","      return empty();","156","    }","157","","158","    return Optional.of(sanitizedUrl);","159","  }"],"delete":["149","    if (url.startsWith(\"\/\/\") || url.startsWith(\"\/\\\\\")) {","150","      return empty();","151","    }","152","    if (!url.startsWith(\"\/\")) {","153","      return empty();","154","    }","155","    return Optional.of(url);","156","  }"]}],"server\/sonar-webserver-auth\/src\/test\/java\/org\/sonar\/server\/authentication\/OAuth2AuthenticationParametersImplTest.java":[{"add":["21","import com.tngtech.java.junit.dataprovider.DataProvider;","22","import com.tngtech.java.junit.dataprovider.DataProviderRunner;","29","import org.junit.runner.RunWith;","39","@RunWith(DataProviderRunner.class)","99","  @DataProvider({\"http:\/\/example.com\", \"\/\\t\/example.com\", \"\/\/local_file\", \"\/\\\\local_file\", \"something_else\"})","100","  public void return_to_is_not_set_when_not_local(String url) {","101","    when(request.getParameter(\"return_to\")).thenReturn(url);"],"delete":["95","  public void return_to_is_not_set_when_not_local() {","96","    when(request.getParameter(\"return_to\")).thenReturn(\"http:\/\/external_url\");","97","    underTest.init(request, response);","98","    verify(response, never()).addCookie(any());","100","    when(request.getParameter(\"return_to\")).thenReturn(\"\/\/local_file\");","102","    verify(response, never()).addCookie(any());","104","    when(request.getParameter(\"return_to\")).thenReturn(\"\/\\\\local_file\");","105","    underTest.init(request, response);","106","    verify(response, never()).addCookie(any());","107","","108","    when(request.getParameter(\"return_to\")).thenReturn(\"something_else\");","109","    underTest.init(request, response);"]}]}},"4431df6a819734c4e4988c04be4148bcaa82cbab":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/ui\/ws\/ComponentActionTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ui\/ws\/ComponentAction.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/ui\/ws\/ComponentActionTest.java":[{"add":["89","  public DbTester db = DbTester.create(System2.INSTANCE);","93","  private DbClient dbClient = db.getDbClient();","94","  private ComponentDbTester componentDbTester = db.components();","95","  private PropertyDbTester propertyDbTester = new PropertyDbTester(db);","140","    UserDto user = db.users().insertUser(\"obiwan\");","151","    db.components().insertSnapshot(project, snapshot -> snapshot","162","    OrganizationDto organization = db.organizations().insert(o -> o.setKey(\"my-org2\"));","163","    db.qualityGates().createDefaultQualityGate(organization);","180","    OrganizationDto organization = db.organizations().insertForKey(\"my-org2\");","181","    db.qualityGates().createDefaultQualityGate(organization);","182","    ComponentDto project = componentDbTester.insertMainBranch(organization, p -> p.setName(\"Sample\").setDbKey(\"sample\"));","189","      .setName(\"Main.xoo\"));","192","      .setParam(\"componentKey\", fileDto.getKey())","196","","197","    assertJson(json).isSimilarTo(\"{\\n\" +","198","      \"  \\\"key\\\": \\\"\" + fileDto.getKey() + \"\\\",\\n\" +","199","      \"  \\\"branch\\\": \\\"feature1\\\",\\n\" +","200","      \"  \\\"name\\\": \\\"Main.xoo\\\",\\n\" +","201","      \"  \\\"breadcrumbs\\\": [\\n\" +","202","      \"    {\\n\" +","203","      \"      \\\"key\\\": \\\"sample\\\",\\n\" +","204","      \"      \\\"name\\\": \\\"Sample\\\",\\n\" +","205","      \"      \\\"qualifier\\\": \\\"TRK\\\"\\n\" +","206","      \"    },\\n\" +","207","      \"    {\\n\" +","208","      \"      \\\"key\\\": \\\"sample:src\\\",\\n\" +","209","      \"      \\\"name\\\": \\\"src\\\",\\n\" +","210","      \"      \\\"qualifier\\\": \\\"DIR\\\"\\n\" +","211","      \"    },\\n\" +","212","      \"    {\\n\" +","213","      \"      \\\"key\\\": \\\"\" + fileDto.getKey() + \"\\\",\\n\" +","214","      \"      \\\"name\\\": \\\"Main.xoo\\\",\\n\" +","215","      \"      \\\"qualifier\\\": \\\"FIL\\\"\\n\" +","216","      \"    }\\n\" +","217","      \"  ]\\n\" +","218","      \"}\\n\");","244","    OrganizationDto organization = db.organizations().insert(o -> o.setKey(\"my-org\"));","245","    db.qualityGates().createDefaultQualityGate(organization);","246","    ComponentDto project = db.components().insertPrivateProject(organization);","247","    QualityGateDto qualityGateDto = db.qualityGates().insertQualityGate(organization, qg -> qg.setName(\"Sonar way\"));","248","    db.qualityGates().associateProjectToQualityGate(project, qualityGateDto);","257","    OrganizationDto organization = db.organizations().insert(o -> o.setKey(\"my-org\"));","258","    ComponentDto project = db.components().insertPrivateProject(organization);","259","    db.qualityGates().createDefaultQualityGate(organization, qg -> qg.setName(\"Sonar way\"));","277","    OrganizationDto organization = db.organizations().insert(o -> o.setKey(\"my-org\"));","278","    db.qualityGates().createDefaultQualityGate(organization);","279","    ComponentDto project = db.components().insertPrivateProject(organization);","286","    QualityGateDto qualityGateDto = db.qualityGates().insertQualityGate(organization, qg -> qg.setName(\"Sonar way\"));","287","    db.qualityGates().associateProjectToQualityGate(project, qualityGateDto);","312","    UserDto user = db.users().insertUser();","413","    OrganizationDto org = db.organizations().insert();","414","    db.qualityGates().createDefaultQualityGate(org);","415","    ComponentDto project = db.components().insertPrivateProject(org);","426","    OrganizationDto org = db.organizations().insert();","427","    db.qualityGates().createDefaultQualityGate(org);","428","    ComponentDto project = db.components().insertPublicProject(org);","439","    OrganizationDto org = db.organizations().insert();","440","    db.qualityGates().createDefaultQualityGate(org);","441","    ComponentDto project = db.components().insertPrivateProject(org);","442","    ComponentDto module = db.components().insertComponent(ComponentTesting.newModuleDto(project));","454","    OrganizationDto org = db.organizations().insert();","455","    db.qualityGates().createDefaultQualityGate(org);","456","    ComponentDto project = db.components().insertPrivateProject(org);","472","    OrganizationDto org = db.organizations().insert();","473","    db.qualityGates().createDefaultQualityGate(org);","474","    ComponentDto project = db.components().insertPublicProject(org);","517","    OrganizationDto organizationDto = db.organizations().insertForKey(\"my-org-1\");","529","    UserDto user = db.users().insertUser(\"obiwan\");","534","    QualityGateDto qualityGateDto = db.qualityGates().insertQualityGate(db.getDefaultOrganization(), qg -> qg.setName(\"Sonar way\"));","535","    db.qualityGates().associateProjectToQualityGate(project, qualityGateDto);","565","  private ComponentDto insertOrganizationAndProject() {","566","    OrganizationDto organization = db.organizations().insert(o -> o.setKey(\"my-org\"));","567","    db.qualityGates().createDefaultQualityGate(organization);","568","    return db.components().insertPrivateProject(organization, \"abcd\", p -> p.setDbKey(\"polop\").setName(\"Polop\").setDescription(\"test project\"));","599","    dbClient.metricDao().insert(db.getSession(), metric);","600","    dbClient.liveMeasureDao().insert(db.getSession(),","603","    db.commit();"],"delete":["89","  public DbTester dbTester = DbTester.create(System2.INSTANCE);","93","  private DbClient dbClient = dbTester.getDbClient();","94","  private ComponentDbTester componentDbTester = dbTester.components();","95","  private PropertyDbTester propertyDbTester = new PropertyDbTester(dbTester);","99","  private ComponentDto project;","101","  private OrganizationDto organization;","142","    UserDto user = dbTester.users().insertUser(\"obiwan\");","153","    dbTester.components().insertSnapshot(project, snapshot -> snapshot","164","    OrganizationDto organization = dbTester.organizations().insert(o -> o.setKey(\"my-org2\"));","165","    dbTester.qualityGates().createDefaultQualityGate(organization);","182","    OrganizationDto organization = dbTester.organizations().insertForKey(\"my-org2\");","183","    dbTester.qualityGates().createDefaultQualityGate(organization);","184","    ComponentDto project = componentDbTester.insertMainBranch(organization, p -> p.setName(\"Sample\"), p -> p.setDbKey(\"sample\"));","188","","190","","193","      .setName(\"Main.xoo\")","194","      .setDbKey(\"sample:src\/Main.xoo\"));","197","      .setParam(\"componentKey\", fileDto.getDbKey())","201","    verify(json, \"return_component_info_when_file_on_branch.json\");","227","    OrganizationDto organization = dbTester.organizations().insert(o -> o.setKey(\"my-org\"));","228","    dbTester.qualityGates().createDefaultQualityGate(organization);","229","    ComponentDto project = dbTester.components().insertPrivateProject(organization);","230","    QualityGateDto qualityGateDto = dbTester.qualityGates().insertQualityGate(organization, qg -> qg.setName(\"Sonar way\"));","231","    dbTester.qualityGates().associateProjectToQualityGate(project, qualityGateDto);","240","    OrganizationDto organization = dbTester.organizations().insert(o -> o.setKey(\"my-org\"));","241","    ComponentDto project = dbTester.components().insertPrivateProject(organization);","242","    dbTester.qualityGates().createDefaultQualityGate(organization, qg -> qg.setName(\"Sonar way\"));","260","    OrganizationDto organization = dbTester.organizations().insert(o -> o.setKey(\"my-org\"));","261","    dbTester.qualityGates().createDefaultQualityGate(organization);","262","    ComponentDto project = dbTester.components().insertPrivateProject(organization);","269","    QualityGateDto qualityGateDto = dbTester.qualityGates().insertQualityGate(organization, qg -> qg.setName(\"Sonar way\"));","270","    dbTester.qualityGates().associateProjectToQualityGate(project, qualityGateDto);","295","    UserDto user = dbTester.users().insertUser();","396","    OrganizationDto org = dbTester.organizations().insert();","397","    dbTester.qualityGates().createDefaultQualityGate(org);","398","    ComponentDto project = dbTester.components().insertPrivateProject(org);","409","    OrganizationDto org = dbTester.organizations().insert();","410","    dbTester.qualityGates().createDefaultQualityGate(org);","411","    ComponentDto project = dbTester.components().insertPublicProject(org);","422","    OrganizationDto org = dbTester.organizations().insert();","423","    dbTester.qualityGates().createDefaultQualityGate(org);","424","    ComponentDto project = dbTester.components().insertPrivateProject(org);","425","    ComponentDto module = dbTester.components().insertComponent(ComponentTesting.newModuleDto(project));","437","    OrganizationDto org = dbTester.organizations().insert();","438","    dbTester.qualityGates().createDefaultQualityGate(org);","439","    ComponentDto project = dbTester.components().insertPrivateProject(org);","455","    OrganizationDto org = dbTester.organizations().insert();","456","    dbTester.qualityGates().createDefaultQualityGate(org);","457","    ComponentDto project = dbTester.components().insertPublicProject(org);","500","    OrganizationDto organizationDto = dbTester.organizations().insertForKey(\"my-org-1\");","512","    UserDto user = dbTester.users().insertUser(\"obiwan\");","517","    QualityGateDto qualityGateDto = dbTester.qualityGates().insertQualityGate(dbTester.getDefaultOrganization(), qg -> qg.setName(\"Sonar way\"));","518","    dbTester.qualityGates().associateProjectToQualityGate(project, qualityGateDto);","548","  private ComponentDto insertOrganizationAndProject(){","549","    OrganizationDto organization = dbTester.organizations().insert(o -> o.setKey(\"my-org\"));","550","    dbTester.qualityGates().createDefaultQualityGate(organization);","551","    return dbTester.components().insertPrivateProject(organization, \"abcd\", p -> p.setDbKey(\"polop\").setName(\"Polop\").setDescription(\"test project\"));","582","    dbClient.metricDao().insert(dbTester.getSession(), metric);","583","    dbClient.liveMeasureDao().insert(dbTester.getSession(),","586","    dbTester.commit();"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ui\/ws\/ComponentAction.java":[{"add":["182","    json.prop(\"key\", component.getKey())","188","    String branch = component.getBranch();","189","    if (branch != null) {","190","      json.prop(\"branch\", branch);","191","    }"],"delete":["182","    json.prop(\"key\", component.getDbKey())"]}]}},"8adaa6faef1a9f78663be3656cf0007903c9c6cb":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/CrossComponentSourceViewerWrapper.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/CrossComponentSourceViewerWrapper.tsx":[{"add":["225","              key={`${this.props.issue.key}-${this.props.selectedFlowIndex || 0}-${i}`}"],"delete":["225","              key={`${this.props.issue.key}-${this.props.selectedFlowIndex}-${i}`}"]}]}},"cef2b46aa0d547dd1404fb7d01b0ee6b642276cf":{"changes":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/sensor\/DefaultSensorStorageTest.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/sensor\/DefaultSensorStorage.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/sensor\/DefaultSensorStorageTest.java":[{"add":["23","import java.util.ArrayList;","24","import java.util.List;","40","import org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage;","118","  public void should_merge_coverage() {","119","    DefaultInputFile file = new TestInputFileBuilder(\"foo\", \"src\/Foo.php\").setLines(5).build();","120","","121","    DefaultCoverage coverage = new DefaultCoverage(underTest);","122","    coverage.onFile(file).lineHits(3, 1);","123","","124","    DefaultCoverage coverage2 = new DefaultCoverage(underTest);","125","    coverage2.onFile(file).lineHits(1, 1);","126","","127","    underTest.store(coverage);","128","    underTest.store(coverage2);","129","","130","    List<ScannerReport.LineCoverage> lineCoverage = new ArrayList<>();","131","    reportReader.readComponentCoverage(file.scannerId()).forEachRemaining(lineCoverage::add);","132","    assertThat(lineCoverage).containsExactly(","133","      \/\/ should be sorted by line","134","      ScannerReport.LineCoverage.newBuilder().setLine(1).setHits(true).build(),","135","      ScannerReport.LineCoverage.newBuilder().setLine(3).setHits(true).build());","136","","137","  }","138","","139","  @Test"],"delete":[]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/sensor\/DefaultSensorStorage.java":[{"add":["27","import java.util.TreeMap;","334","    SortedMap<Integer, ScannerReport.LineCoverage.Builder> coveragePerLine = reloadExistingCoverage(inputFile);","347","  private SortedMap<Integer, ScannerReport.LineCoverage.Builder> reloadExistingCoverage(DefaultInputFile inputFile) {","348","    SortedMap<Integer, ScannerReport.LineCoverage.Builder> coveragePerLine = new TreeMap<>();","362","  private void mergeLineCoverageValues(int lineCount, SortedMap<Integer, Integer> valueByLine, SortedMap<Integer, ScannerReport.LineCoverage.Builder> coveragePerLine,"],"delete":["23","import java.util.LinkedHashMap;","334","    Map<Integer, ScannerReport.LineCoverage.Builder> coveragePerLine = reloadExistingCoverage(inputFile);","347","  private Map<Integer, ScannerReport.LineCoverage.Builder> reloadExistingCoverage(DefaultInputFile inputFile) {","348","    Map<Integer, ScannerReport.LineCoverage.Builder> coveragePerLine = new LinkedHashMap<>();","362","  private void mergeLineCoverageValues(int lineCount, SortedMap<Integer, Integer> valueByLine, Map<Integer, ScannerReport.LineCoverage.Builder> coveragePerLine,"]}]}},"fbdba9e77ae6162ca628895002fb513ee7f093fd":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/utils-test.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/ComponentSourceSnippetViewer.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/SnippetViewer.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/utils.ts":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/utils-test.ts":[{"add":["84","    const locations = [","85","      mockFlowLocation({","86","        textRange: { startLine: 16, startOffset: 10, endLine: 16, endOffset: 14 }","87","      }),","88","      mockFlowLocation({","89","        textRange: { startLine: 19, startOffset: 2, endLine: 19, endOffset: 3 }","90","      })","91","    ];","92","    const results = createSnippets({","93","      locations,","94","      issue: mockIssue(false, locations[1]),","95","      addIssueLocation: false","96","    });","99","    expect(results[0]).toEqual({ index: 0, start: 14, end: 28 });","103","    const locations = [","104","      mockFlowLocation({","105","        textRange: { startLine: 16, startOffset: 10, endLine: 16, endOffset: 14 }","106","      }),","107","      mockFlowLocation({","108","        textRange: { startLine: 47, startOffset: 2, endLine: 47, endOffset: 3 }","109","      }),","110","      mockFlowLocation({","111","        textRange: { startLine: 14, startOffset: 2, endLine: 14, endOffset: 3 }","112","      })","113","    ];","114","    const results = createSnippets({","115","      locations,","116","      issue: mockIssue(false, locations[2]),","117","      addIssueLocation: false","118","    });","121","    expect(results[0]).toEqual({ index: 0, start: 12, end: 23 });","126","    const locations = [","127","      mockFlowLocation({","128","        textRange: { startLine: 16, startOffset: 10, endLine: 16, endOffset: 14 }","129","      }),","130","      mockFlowLocation({","131","        textRange: { startLine: 47, startOffset: 2, endLine: 47, endOffset: 3 }","132","      }),","133","      mockFlowLocation({","134","        textRange: { startLine: 23, startOffset: 2, endLine: 23, endOffset: 3 }","135","      }),","136","      mockFlowLocation({","137","        textRange: { startLine: 18, startOffset: 2, endLine: 18, endOffset: 3 }","138","      })","139","    ];","140","    const results = createSnippets({","141","      locations,","142","      issue: mockIssue(false, locations[0]),","143","      addIssueLocation: false","144","    });","147","    expect(results[0]).toEqual({ index: 0, start: 14, end: 25 });","152","    const locations = [","153","      mockFlowLocation({","154","        textRange: { startLine: 47, startOffset: 2, endLine: 47, endOffset: 3 }","155","      }),","156","      mockFlowLocation({","157","        textRange: { startLine: 22, startOffset: 2, endLine: 22, endOffset: 3 }","158","      })","159","    ];","160","    const results = createSnippets({","161","      locations,","162","      issue: mockIssue(false, {","163","        textRange: { startLine: 5, endLine: 5, startOffset: 0, endOffset: 0 }","164","      }),","165","      addIssueLocation: true","166","    });","173","    const locations = [","174","      mockFlowLocation({","175","        textRange: { startLine: 16, startOffset: 10, endLine: 16, endOffset: 14 }","176","      }),","177","      mockFlowLocation({","178","        textRange: { startLine: 19, startOffset: 2, endLine: 19, endOffset: 3 }","179","      })","180","    ];","181","    const results = createSnippets({","182","      locations,","183","      issue: mockIssue(false, locations[1]),","184","      addIssueLocation: false","185","    });"],"delete":["84","    const results = createSnippets(","85","      [","86","        mockFlowLocation({","87","          textRange: { startLine: 16, startOffset: 10, endLine: 16, endOffset: 14 }","88","        }),","89","        mockFlowLocation({","90","          textRange: { startLine: 19, startOffset: 2, endLine: 19, endOffset: 3 }","91","        })","92","      ],","93","      false","94","    );","97","    expect(results[0]).toEqual({ index: 0, start: 14, end: 21 });","101","    const results = createSnippets(","102","      [","103","        mockFlowLocation({","104","          textRange: { startLine: 16, startOffset: 10, endLine: 16, endOffset: 14 }","105","        }),","106","        mockFlowLocation({","107","          textRange: { startLine: 47, startOffset: 2, endLine: 47, endOffset: 3 }","108","        }),","109","        mockFlowLocation({","110","          textRange: { startLine: 14, startOffset: 2, endLine: 14, endOffset: 3 }","111","        })","112","      ],","113","      false","114","    );","117","    expect(results[0]).toEqual({ index: 0, start: 12, end: 18 });","122","    const results = createSnippets(","123","      [","124","        mockFlowLocation({","125","          textRange: { startLine: 16, startOffset: 10, endLine: 16, endOffset: 14 }","126","        }),","127","        mockFlowLocation({","128","          textRange: { startLine: 47, startOffset: 2, endLine: 47, endOffset: 3 }","129","        }),","130","        mockFlowLocation({","131","          textRange: { startLine: 22, startOffset: 2, endLine: 22, endOffset: 3 }","132","        }),","133","        mockFlowLocation({","134","          textRange: { startLine: 18, startOffset: 2, endLine: 18, endOffset: 3 }","135","        })","136","      ],","137","      false","138","    );","141","    expect(results[0]).toEqual({ index: 0, start: 14, end: 24 });","146","    const results = createSnippets(","147","      [","148","        mockFlowLocation({","149","          textRange: { startLine: 47, startOffset: 2, endLine: 47, endOffset: 3 }","150","        }),","151","        mockFlowLocation({","152","          textRange: { startLine: 22, startOffset: 2, endLine: 22, endOffset: 3 }","153","        })","154","      ],","155","      false,","156","      mockIssue(false, { textRange: { startLine: 5, endLine: 5, startOffset: 0, endOffset: 0 } })","157","    );","164","    const results = createSnippets(","165","      [","166","        mockFlowLocation({","167","          textRange: { startLine: 16, startOffset: 10, endLine: 16, endOffset: 14 }","168","        }),","169","        mockFlowLocation({","170","          textRange: { startLine: 19, startOffset: 2, endLine: 19, endOffset: 3 }","171","        })","172","      ],","173","      true","174","    );"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/ComponentSourceSnippetViewer.tsx":[{"add":["89","    const snippets = createSnippets({","90","      locations: this.props.snippetGroup.locations,","91","      issue: this.props.issue,","92","      addIssueLocation: this.props.issue.secondaryLocations.length > 0","93","    });","119","  \/*","120","   * Clean after animation","121","   *\/","122","  cleanDom(index: number) {","123","    const nodes = this.getNodes(index);","124","","125","    if (!nodes) {","126","      return;","127","    }","128","","129","    const { wrapper, table } = nodes;","130","","131","    table.style.marginTop = '';","132","    wrapper.style.maxHeight = '';","133","  }","134","","238","            this.cleanDom(snippetIndex);"],"delete":["89","    const snippets = createSnippets(","90","      this.props.snippetGroup.locations,","91","      this.props.last,","92","      this.props.issue.secondaryLocations.length > 0 ? this.props.issue : undefined","93","    );"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/SnippetViewer.tsx":[{"add":["20","import * as React from 'react';","32","import { inSnippet, LINES_BELOW_ISSUE } from '.\/utils';","187","      ? Math.max(0, LINES_BELOW_ISSUE - (bottomLine - lowestVisibleIssue))"],"delete":["19","import * as React from 'react';","32","import { inSnippet, LINES_BELOW_LAST } from '.\/utils';","187","      ? Math.max(0, LINES_BELOW_LAST - (bottomLine - lowestVisibleIssue))"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/utils.ts":[{"add":["22","export const LINES_BELOW_ISSUE = 9;","56","function addLinesBellow(params: { issue: T.Issue; locationEnd: number }) {","57","  const { issue, locationEnd } = params;","58","  const issueEndLine = (issue.textRange && issue.textRange.endLine) || 0;","59","","60","  if (!issueEndLine || issueEndLine === locationEnd) {","61","    return locationEnd + LINES_BELOW_ISSUE;","62","  }","63","","64","  return locationEnd + LINES_BELOW;","65","}","66","","67","export function createSnippets(params: {","68","  locations: T.FlowLocation[];","69","  issue: T.Issue;","70","  addIssueLocation: boolean;","71","}): T.Snippet[] {","72","  const { locations, issue, addIssueLocation } = params;","75","  return (addIssueLocation ? [getPrimaryLocation(issue), ...locations] : locations).reduce(","78","      const endIndex = addLinesBellow({ issue, locationEnd: loc.textRange.endLine });"],"delete":["22","export const LINES_BELOW_LAST = 9;","56","export function createSnippets(","57","  locations: T.FlowLocation[],","58","  last: boolean,","59","  issue?: T.Issue","60","): T.Snippet[] {","63","  return (issue ? [getPrimaryLocation(issue), ...locations] : locations).reduce(","66","      const endIndex =","67","        loc.textRange.endLine +","68","        ((issue && index === 0) || (last && index === locations.length - 1)","69","          ? LINES_BELOW_LAST","70","          : LINES_BELOW);"]}]}},"0433161433a5f234790fae5eba2cf438cbde5d36":{"changes":{"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/measure\/LiveMeasureMapper.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/PersistLiveMeasuresStep.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/measure\/LiveMeasureDao.java":"MODIFY","server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/measure\/LiveMeasureMapper.xml":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/PersistDuplicationDataStep.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/measure\/LiveMeasureDaoTest.java":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/measure\/LiveMeasureMapper.java":[{"add":["23","import java.util.Set;","27","import org.sonar.db.DbSession;","74","    @Param(\"dto\") LiveMeasureDto dto,","77","  void deleteByComponentUuidExcludingMetricIds(","80","","81","  void deleteByComponent(@Param(\"componentUuid\") String componentUuid);","82",""],"delete":["72","    @Param(\"dtos\") List<LiveMeasureDto> dtos,","75","  int deleteByComponentUuidExcludingMetricIds("]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/PersistLiveMeasuresStep.java":[{"add":["82","    try (DbSession dbSession = dbClient.openSession(true)) {","86","      dbSession.commit();","116","        if (!NonEmptyMeasure.INSTANCE.test(m) || !notBestValueOptimized.test(m)) {","117","          continue;","120","        LiveMeasureDto lm = measureToMeasureDto.toLiveMeasureDto(m, metric, component);","121","        dtos.add(lm);","122","        metricIds.add(metric.getId());","123","      }","124","","125","      if (supportUpsert) {","126","        for (LiveMeasureDto dto : dtos) {","127","          dbClient.liveMeasureDao().upsert(dbSession, dto);","128","        }","129","        \/\/ The measures that no longer exist on the component must be deleted, for example","130","        \/\/ when the coverage on a file goes to the \"best value\" 100%.","131","        \/\/ The measures on deleted components are deleted by the step PurgeDatastoresStep","132","        dbClient.liveMeasureDao().deleteByComponentUuidExcludingMetricIds(dbSession, component.getUuid(), metricIds);","133","      } else {","134","        dbClient.liveMeasureDao().deleteByComponent(dbSession, component.getUuid());","135","        dtos.forEach(dto -> dbClient.liveMeasureDao().insert(dbSession, dto));","136","      }","137","","139","      insertsOrUpdates += dtos.size();"],"delete":["27","import java.util.stream.Stream;","83","    try (DbSession dbSession = dbClient.openSession(false)) {","87","","117","        Stream.of(m)","118","          .filter(NonEmptyMeasure.INSTANCE)","119","          .filter(notBestValueOptimized)","120","          .map(measure -> measureToMeasureDto.toLiveMeasureDto(measure, metric, component))","121","          .forEach(lm -> {","122","            dtos.add(lm);","123","            metricIds.add(metric.getId());","124","          });","125","      }","126","      if (supportUpsert) {","127","        dbClient.liveMeasureDao().upsert(dbSession, dtos);","128","      } else {","129","        for (LiveMeasureDto dto : dtos) {","130","          dbClient.liveMeasureDao().insertOrUpdate(dbSession, dto);","132","      }","133","      insertsOrUpdates += dtos.size();","135","      \/\/ The measures that no longer exist on the component must be deleted, for example","136","      \/\/ when the coverage on a file goes to the \"best value\" 100%.","137","      \/\/ The measures on deleted components are deleted by the step PurgeDatastoresStep","138","      dbClient.liveMeasureDao().deleteByComponentUuidExcludingMetricIds(dbSession, component.getUuid(), metricIds);"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/measure\/LiveMeasureDao.java":[{"add":["113","  public void update(DbSession dbSession, LiveMeasureDto dto) {","114","    mapper(dbSession).update(dto, system2.now());","115","  }","116","","125","  public void deleteByComponent(DbSession dbSession, String componentUuid) {","126","    mapper(dbSession).deleteByComponent(componentUuid);","129","  \/**","130","   * Similar to {@link #insertOrUpdate(DbSession, LiveMeasureDto)}, except that it triggers a single SQL request","131","   * <strong>This method should not be called unless {@link Dialect#supportsUpsert()} is true<\/strong>","132","   *\/","133","  public int upsert(DbSession dbSession, LiveMeasureDto dto) {","134","    dto.setUuidForUpsert(Uuids.create());","135","    return mapper(dbSession).upsert(dto, system2.now());","136","  }","137","","138","  public void deleteByComponentUuidExcludingMetricIds(DbSession dbSession, String componentUuid, List<Integer> excludedMetricIds) {","139","    mapper(dbSession).deleteByComponentUuidExcludingMetricIds(componentUuid, excludedMetricIds);"],"delete":["21","import com.google.common.collect.Iterables;","122","  \/**","123","   * Similar to {@link #insertOrUpdate(DbSession, LiveMeasureDto)}, except that:","124","   * <ul>","125","   * <li>it is batch session friendly (single same statement for both updates and inserts)<\/li>","126","   * <li>it triggers a single SQL request<\/li>","127","   * <\/ul>","128","   * <p>","129","   * <strong>This method should not be called unless {@link Dialect#supportsUpsert()} is true<\/strong>","130","   *\/","131","  public int upsert(DbSession dbSession, Iterable<LiveMeasureDto> dtos) {","132","    for (LiveMeasureDto dto : dtos) {","133","      dto.setUuidForUpsert(Uuids.create());","134","    }","135","    int updated = 0;","136","    for (List<LiveMeasureDto> chunk : Iterables.partition(dtos, 100)) {","137","      updated += mapper(dbSession).upsert(chunk, system2.now());","138","    }","139","    return updated;","142","  public int deleteByComponentUuidExcludingMetricIds(DbSession dbSession, String componentUuid, List<Integer> excludedMetricIds) {","143","    return mapper(dbSession).deleteByComponentUuidExcludingMetricIds(componentUuid, excludedMetricIds);"]}],"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/measure\/LiveMeasureMapper.xml":[{"add":["109","  <delete id=\"deleteByComponent\" parameterType=\"map\">","110","    delete from live_measures","111","    where","112","      component_uuid = #{componentUuid, jdbcType=VARCHAR}","113","  <\/delete>","114","","127","    ) values (","138","    )"],"delete":["121","    ) values","122","    <foreach item=\"dto\" collection=\"dtos\" open=\"(\" separator=\"),(\" close=\")\">","133","    <\/foreach>"]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/PersistDuplicationDataStep.java":[{"add":["127","        nonPersistedBuffer.forEach(d -> dbClient.liveMeasureDao().upsert(dbSession, d));"],"delete":["127","        dbClient.liveMeasureDao().upsert(dbSession, nonPersistedBuffer);"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/measure\/LiveMeasureDaoTest.java":[{"add":["381","    underTest.deleteByComponentUuidExcludingMetricIds(db.getSession(), \"C1\", Arrays.asList(1, 2));","387","  }","388","","389","  @Test","390","  public void deleteByComponentUuid() {","391","    LiveMeasureDto measure1 = newLiveMeasure().setComponentUuid(\"C1\").setMetricId(1);","392","    LiveMeasureDto measure2 = newLiveMeasure().setComponentUuid(\"C1\").setMetricId(2);","393","    LiveMeasureDto measure3 = newLiveMeasure().setComponentUuid(\"C1\").setMetricId(3);","394","    LiveMeasureDto measureOtherComponent = newLiveMeasure().setComponentUuid(\"C2\").setMetricId(3);","395","    underTest.insertOrUpdate(db.getSession(), measure1);","396","    underTest.insertOrUpdate(db.getSession(), measure2);","397","    underTest.insertOrUpdate(db.getSession(), measure3);","398","    underTest.insertOrUpdate(db.getSession(), measureOtherComponent);","399","","400","    underTest.deleteByComponent(db.getSession(), \"C1\");","401","","402","    verifyTableSize(1);","403","    verifyPersisted(measureOtherComponent);","415","    underTest.deleteByComponentUuidExcludingMetricIds(db.getSession(), \"C1\", Collections.emptyList());","429","    int count = underTest.upsert(db.getSession(), dto);","438","    count = underTest.upsert(db.getSession(), dto);","451","    underTest.upsert(db.getSession(), dto);","454","    int count = underTest.upsert(db.getSession(), dto);","467","    underTest.upsert(db.getSession(), dto);","471","    int count = underTest.upsert(db.getSession(), dto);","483","    underTest.upsert(db.getSession(), dto);","486","    int count = underTest.upsert(db.getSession(), dto);","499","    underTest.upsert(db.getSession(), dto);","503","    int count = underTest.upsert(db.getSession(), dto);","515","    underTest.upsert(db.getSession(), dto);","519","    int count = underTest.upsert(db.getSession(), dto);","531","    underTest.upsert(db.getSession(), dto);","535","    int count = underTest.upsert(db.getSession(), dto);","547","    underTest.upsert(db.getSession(), dto);","551","    int count = underTest.upsert(db.getSession(), dto);","563","    underTest.upsert(db.getSession(), dto);","567","    int count = underTest.upsert(db.getSession(), dto);","579","    underTest.upsert(db.getSession(), dto);","583","    int count = underTest.upsert(db.getSession(), dto);","595","    underTest.upsert(db.getSession(), dto);","599","    int count = underTest.upsert(db.getSession(), dto);","614","    for (LiveMeasureDto dto : inserted) {","615","      underTest.upsert(db.getSession(), dto);","616","    }","627","    for (LiveMeasureDto dto : upserted) {","628","      underTest.upsert(db.getSession(), dto);","629","    }","630","    db.getSession().commit();"],"delete":["381","    int count = underTest.deleteByComponentUuidExcludingMetricIds(db.getSession(), \"C1\", Arrays.asList(1, 2));","387","    assertThat(count).isEqualTo(1);","399","    int count = underTest.deleteByComponentUuidExcludingMetricIds(db.getSession(), \"C1\", Collections.emptyList());","401","    assertThat(count).isEqualTo(2);","414","    int count = underTest.upsert(db.getSession(), asList(dto));","423","    count = underTest.upsert(db.getSession(), asList(dto));","436","    underTest.upsert(db.getSession(), asList(dto));","439","    int count = underTest.upsert(db.getSession(), asList(dto));","452","    underTest.upsert(db.getSession(), asList(dto));","456","    int count = underTest.upsert(db.getSession(), asList(dto));","468","    underTest.upsert(db.getSession(), asList(dto));","471","    int count = underTest.upsert(db.getSession(), asList(dto));","484","    underTest.upsert(db.getSession(), asList(dto));","488","    int count = underTest.upsert(db.getSession(), asList(dto));","500","    underTest.upsert(db.getSession(), asList(dto));","504","    int count = underTest.upsert(db.getSession(), asList(dto));","516","    underTest.upsert(db.getSession(), asList(dto));","520","    int count = underTest.upsert(db.getSession(), asList(dto));","532","    underTest.upsert(db.getSession(), asList(dto));","536","    int count = underTest.upsert(db.getSession(), asList(dto));","548","    underTest.upsert(db.getSession(), asList(dto));","552","    int count = underTest.upsert(db.getSession(), asList(dto));","564","    underTest.upsert(db.getSession(), asList(dto));","568","    int count = underTest.upsert(db.getSession(), asList(dto));","580","    underTest.upsert(db.getSession(), asList(dto));","584","    int count = underTest.upsert(db.getSession(), asList(dto));","599","    int result = underTest.upsert(db.getSession(), inserted);","601","    assertThat(result).isEqualTo(30);","611","    result = underTest.upsert(db.getSession(), upserted);","613","    assertThat(result).isEqualTo(60);"]}]}},"f410dd2ba64a1b4047bb0d62a71520bfe4c8f1eb":{"changes":{"it\/it-tests\/src\/test\/java\/it\/qualityGate\/QualityGateNotificationTest.java":"MODIFY","tests\/perf\/src\/test\/java\/org\/sonarsource\/sonarqube\/perf\/server\/WebTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/notification\/email\/AlertsEmailTemplateTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/notification\/email\/AlertsEmailTemplate.java":"MODIFY"},"diff":{"it\/it-tests\/src\/test\/java\/it\/qualityGate\/QualityGateNotificationTest.java":[{"add":["139","    assertThat((String) message.getContent()).contains(\"\/dashboard?id=sample\");"],"delete":["139","    assertThat((String) message.getContent()).contains(\"\/dashboard\/index\/sample\");"]}],"tests\/perf\/src\/test\/java\/org\/sonarsource\/sonarqube\/perf\/server\/WebTest.java":[{"add":["27","import org.junit.Ignore;","29","import org.sonarsource.sonarqube.perf.PerfTestCase;","100","    PageStats counters = request(\"\/dashboard?id=org.apache.struts:struts-parent?name=Custom\");"],"delete":["25","import org.junit.Ignore;","26","import org.sonarsource.sonarqube.perf.PerfTestCase;","100","    PageStats counters = request(\"\/dashboard\/index\/org.apache.struts:struts-parent?name=Custom\");"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/notification\/email\/AlertsEmailTemplateTest.java":[{"add":["66","      \"See it in SonarQube: http:\/\/nemo.sonarsource.org\/dashboard?id=org.sonar.foo:foo\"));","84","      \"See it in SonarQube: http:\/\/nemo.sonarsource.org\/dashboard?id=org.sonar.foo:foo\"));","100","      \"See it in SonarQube: http:\/\/nemo.sonarsource.org\/dashboard?id=org.sonar.foo:foo\"));","115","      \"See it in SonarQube: http:\/\/nemo.sonarsource.org\/dashboard?id=org.sonar.foo:foo\"));"],"delete":["66","      \"See it in SonarQube: http:\/\/nemo.sonarsource.org\/dashboard\/index\/org.sonar.foo:foo\"));","84","      \"See it in SonarQube: http:\/\/nemo.sonarsource.org\/dashboard\/index\/org.sonar.foo:foo\"));","100","      \"See it in SonarQube: http:\/\/nemo.sonarsource.org\/dashboard\/index\/org.sonar.foo:foo\"));","115","      \"See it in SonarQube: http:\/\/nemo.sonarsource.org\/dashboard\/index\/org.sonar.foo:foo\"));"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/notification\/email\/AlertsEmailTemplate.java":[{"add":["101","    messageBody.append(\"\\n\").append(\"See it in SonarQube: \").append(configuration.getServerBaseURL()).append(\"\/dashboard?id=\").append(projectKey);"],"delete":["101","    messageBody.append(\"\\n\").append(\"See it in SonarQube: \").append(configuration.getServerBaseURL()).append(\"\/dashboard\/index\/\").append(projectKey);"]}]}},"0020b89d4510cca8f283e684e301c5abf1e1b5c3":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/charts\/AdvancedTimeline.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/charts\/AdvancedTimeline.js":[{"add":["22","import { flatten, isEqual, sortBy, throttle, uniq } from 'lodash';","53","  \/\/ used to avoid same y ticks labels","54","  maxYTicksCount?: number,","88","    maxYTicksCount: 4,","306","    let ticks = hasTicks ? yScale.ticks(this.props.maxYTicksCount) : yScale.domain();","312","    \/\/ if there are duplicated ticks, that means 4 ticks are too much for this data","313","    \/\/ so let's just use the domain values (min and max)","314","    if (formatYTick) {","315","      const formattedTicks = ticks.map(tick => formatYTick(tick));","316","      if (ticks.length > uniq(formattedTicks).length) {","317","        ticks = yScale.domain();","318","      }","319","    }","320",""],"delete":["22","import { flatten, isEqual, sortBy, throttle } from 'lodash';","303","    const ticks = hasTicks ? yScale.ticks(4) : yScale.domain();"]}]}},"72170b891ef224779a42622be5a619fc20e8e276":{"changes":{"server\/sonar-server\/src\/main\/resources\/org\/sonar\/server\/user\/ws\/example-deactivate.json":"ADD","\/dev\/null":"DELETE","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/user\/ws\/DeactivateActionTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/user\/ws\/DeactivateAction.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/resources\/org\/sonar\/server\/user\/ws\/example-deactivate.json":[{"add":[],"delete":[]}],"\/dev\/null":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/user\/ws\/DeactivateActionTest.java":[{"add":["98","    UserDto user = insertUser(newUserDto()","99","      .setLogin(\"ada.lovelace\")","100","      .setEmail(\"ada.lovelace@noteg.com\")","101","      .setName(\"Ada Lovelace\")","102","      .setScmAccounts(singletonList(\"al\")));","107","    \/\/ scm accounts, groups and email are deleted","108","    assertJson(json).isSimilarTo(ws.getDef().responseExampleAsString());","250","    assertThat(user.get().getEmail()).isNull();","251","    assertThat(user.get().getScmAccountsAsList()).isEmpty();"],"delete":["98","    UserDto user = insertUser(newUserDto().setEmail(\"john@email.com\")","99","      .setLogin(\"john\")","100","      .setName(\"John\")","101","      .setScmAccounts(singletonList(\"jn\")));","106","    assertJson(json).isSimilarTo(getClass().getResource(\"DeactivateActionTest\/deactivate_user.json\"));"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/user\/ws\/DeactivateAction.java":[{"add":["71","      .setResponseExample(getClass().getResource(\"example-deactivate.json\"))"],"delete":[]}]}},"97a815175c48fbd63bebb607ff4a4a6d12e5164c":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/RuleCreator.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/RegisterRulesTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/ws\/UpdateActionTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/ws\/UpdateAction.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/AdHocRuleCreator.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/ws\/ShowAction.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/rule\/RuleDaoTest.java":"MODIFY","server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/rule\/DefaultRuleFinder.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/rule\/RuleDao.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/RuleCreator.java":[{"add":["76","    RuleDto templateRule = dbClient.ruleDao().selectByKey(dbSession, defaultOrganization.getUuid(), templateKey)"],"delete":["76","    RuleDto templateRule = dbClient.ruleDao().selectByKey(dbSession, defaultOrganization, templateKey)"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/RegisterRulesTest.java":[{"add":["666","    RuleDto reloaded = dbClient.ruleDao().selectByKey(db.getSession(), defaultOrganization.getUuid(), rule.getKey()).get();","679","    RuleDto reloaded = dbClient.ruleDao().selectByKey(db.getSession(), defaultOrganization.getUuid(), rule.getKey()).get();","692","    RuleDto reloaded = dbClient.ruleDao().selectByKey(db.getSession(), defaultOrganization.getUuid(), rule.getKey()).get();"],"delete":["666","    RuleDto reloaded = dbClient.ruleDao().selectByKey(db.getSession(), defaultOrganization, rule.getKey()).get();","679","    RuleDto reloaded = dbClient.ruleDao().selectByKey(db.getSession(), defaultOrganization, rule.getKey()).get();","692","    RuleDto reloaded = dbClient.ruleDao().selectByKey(db.getSession(), defaultOrganization, rule.getKey()).get();"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/ws\/UpdateActionTest.java":[{"add":["199","    RuleMetadataDto metadataOfSpecificOrg = db.getDbClient().ruleDao().selectMetadataByKey(db.getSession(), rule.getKey(), organization.getUuid())","240","    RuleMetadataDto metadataOfSpecificOrg = db.getDbClient().ruleDao().selectMetadataByKey(db.getSession(), rule.getKey(), organization.getUuid())","269","    RuleMetadataDto metadataOfSpecificOrg = db.getDbClient().ruleDao().selectMetadataByKey(db.getSession(), rule.getKey(), organization.getUuid()).get();"],"delete":["199","    RuleMetadataDto metadataOfSpecificOrg = db.getDbClient().ruleDao().selectMetadataByKey(db.getSession(), rule.getKey(), organization)","240","    RuleMetadataDto metadataOfSpecificOrg = db.getDbClient().ruleDao().selectMetadataByKey(db.getSession(), rule.getKey(), organization)","269","    RuleMetadataDto metadataOfSpecificOrg = db.getDbClient().ruleDao().selectMetadataByKey(db.getSession(), rule.getKey(), organization).get();"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/ws\/UpdateAction.java":[{"add":["209","    RuleDto rule = dbClient.ruleDao().selectByKey(dbSession, organization.getUuid(), key)","254","    RuleDto rule = dbClient.ruleDao().selectByKey(dbSession, organization.getUuid(), key)"],"delete":["209","    RuleDto rule = dbClient.ruleDao().selectByKey(dbSession, organization, key)","254","    RuleDto rule = dbClient.ruleDao().selectByKey(dbSession, organization, key)"]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/AdHocRuleCreator.java":[{"add":["60","    Optional<RuleDto> existingRuleDtoOpt = dao.selectByKey(dbSession, organizationDto.getUuid(), adHoc.getKey());"],"delete":["60","    Optional<RuleDto> existingRuleDtoOpt = dao.selectByKey(dbSession, organizationDto, adHoc.getKey());"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/ws\/ShowAction.java":[{"add":["106","      RuleDto rule = dbClient.ruleDao().selectByKey(dbSession, organization.getUuid(), key)"],"delete":["106","      RuleDto rule = dbClient.ruleDao().selectByKey(dbSession, organization, key)"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/rule\/RuleDaoTest.java":[{"add":["86","    assertThat(underTest.selectByKey(db.getSession(), organization.getUuid(), RuleKey.of(\"foo\", \"bar\")))","88","    RuleDto rule = underTest.selectByKey(db.getSession(), organization.getUuid(), ruleDefinition.getKey()).get();","97","    assertThat(underTest.selectByKey(db.getSession(), OrganizationTesting.newOrganizationDto().getUuid(), ruleDefinition.getKey()))","106","    RuleDto rule = underTest.selectByKey(db.getSession(), organization.getUuid(), ruleDefinition.getKey()).get();","120","    RuleDto rule = underTest.selectByKey(db.getSession(), organization1.getUuid(), ruleDefinition.getKey()).get();","122","    rule = underTest.selectByKey(db.getSession(), organization2.getUuid(), ruleDefinition.getKey()).get();"],"delete":["86","    assertThat(underTest.selectByKey(db.getSession(), organization, RuleKey.of(\"foo\", \"bar\")))","88","    RuleDto rule = underTest.selectByKey(db.getSession(), organization, ruleDefinition.getKey()).get();","97","    assertThat(underTest.selectByKey(db.getSession(), OrganizationTesting.newOrganizationDto(), ruleDefinition.getKey()))","106","    RuleDto rule = underTest.selectByKey(db.getSession(), organization, ruleDefinition.getKey()).get();","120","    RuleDto rule = underTest.selectByKey(db.getSession(), organization1, ruleDefinition.getKey()).get();","122","    rule = underTest.selectByKey(db.getSession(), organization2, ruleDefinition.getKey()).get();"]}],"server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/rule\/DefaultRuleFinder.java":[{"add":["81","      Optional<RuleDto> rule = ruleDao.selectByKey(dbSession, defaultOrganization.getUuid(), key);"],"delete":["81","      Optional<RuleDto> rule = ruleDao.selectByKey(dbSession, defaultOrganization, key);"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/rule\/RuleDao.java":[{"add":["45","  public Optional<RuleDto> selectByKey(DbSession session, String organizationUuid, RuleKey key) {","46","    RuleDto res = mapper(session).selectByKey(organizationUuid, key);","47","    ensureOrganizationIsSet(organizationUuid, res);","60","  public Optional<RuleMetadataDto> selectMetadataByKey(DbSession session, RuleKey key, String organizationUuid) {","61","    return ofNullable(mapper(session).selectMetadataByKey(key, organizationUuid));"],"delete":["27","","46","  public Optional<RuleDto> selectByKey(DbSession session, OrganizationDto organization, RuleKey key) {","47","    RuleDto res = mapper(session).selectByKey(organization.getUuid(), key);","48","    ensureOrganizationIsSet(organization.getUuid(), res);","61","  public Optional<RuleMetadataDto> selectMetadataByKey(DbSession session, RuleKey key, OrganizationDto organization) {","62","    return ofNullable(mapper(session).selectMetadataByKey(key, organization.getUuid()));"]}]}},"af746806513116025cfea334ad2debfa0f5c34e2":{"changes":{"sonar-db\/src\/main\/java\/org\/sonar\/db\/component\/ResourceIndexDao.java":"MODIFY","sonar-db\/src\/test\/java\/org\/sonar\/db\/component\/ResourceIndexDaoTest.java":"MODIFY"},"diff":{"sonar-db\/src\/main\/java\/org\/sonar\/db\/component\/ResourceIndexDao.java":[{"add":["204","      dto.setKey(substring(key, position, position + MAXIMUM_KEY_SIZE));"],"delete":["204","      dto.setKey(substring(key, position, MAXIMUM_KEY_SIZE));"]}],"sonar-db\/src\/test\/java\/org\/sonar\/db\/component\/ResourceIndexDaoTest.java":[{"add":["160","    ComponentDto project = new ComponentDto().setKey(\"the_key\").setName(longName).setScope(Scopes.PROJECT).setQualifier(Qualifiers.PROJECT);"],"delete":["160","    ComponentDto project = new ComponentDto().setId(1L).setKey(\"the_key\").setName(longName).setScope(Scopes.PROJECT).setQualifier(Qualifiers.PROJECT);"]}]}},"ffbf06564219421bae3580215fff40cfe65adfc5":{"changes":{"sonar-batch\/src\/test\/java\/org\/sonar\/batch\/bootstrapper\/LoggingConfiguratorTest.java":"MODIFY","sonar-batch\/src\/main\/java\/org\/sonar\/batch\/bootstrapper\/LoggingConfigurator.java":"MODIFY","sonar-batch\/src\/test\/java\/org\/sonar\/batch\/mediumtest\/log\/LogListenerTest.java":"MODIFY","sonar-batch\/src\/main\/java\/org\/sonar\/batch\/bootstrapper\/LoggingConfiguration.java":"MODIFY","sonar-batch\/src\/main\/java\/org\/sonar\/batch\/bootstrapper\/Batch.java":"MODIFY","sonar-batch\/src\/test\/java\/org\/sonar\/batch\/bootstrapper\/LoggingConfigurationTest.java":"MODIFY"},"diff":{"sonar-batch\/src\/test\/java\/org\/sonar\/batch\/bootstrapper\/LoggingConfiguratorTest.java":[{"add":["114","  public void testConfigureMultipleTimes() throws UnsupportedEncodingException {","115","    System.setOut(new PrintStream(out, false, StandardCharsets.UTF_8.name()));","116","    conf.setLogOutput(listener);","117","    LoggingConfigurator.apply(conf);","118","","119","    Logger logger = LoggerFactory.getLogger(this.getClass());","120","    logger.debug(\"debug\");","121","    assertThat(listener.msg).isNull();","122","","123","    conf.setVerbose(true);","124","    LoggingConfigurator.apply(conf);","125","","126","    logger.debug(\"debug\");","127","    assertThat(listener.msg).isEqualTo(\"debug\");","128","  }","129","","130","  @Test"],"delete":[]}],"sonar-batch\/src\/main\/java\/org\/sonar\/batch\/bootstrapper\/LoggingConfigurator.java":[{"add":["31","  private static final String CUSTOM_APPENDER_NAME = \"custom_stream\";","32","","61","    if (logger.getAppender(CUSTOM_APPENDER_NAME) == null) {","62","      logger.detachAndStopAllAppenders();","63","      logger.addAppender(createAppender(conf.getLogOutput()));","64","    }","68","  private static Appender<ILoggingEvent> createAppender(LogOutput target) {","70","    appender.setName(CUSTOM_APPENDER_NAME);"],"delete":["57","    String pattern = StringUtils.defaultIfBlank(conf.getSubstitutionVariables().get(LoggingConfiguration.PROPERTY_FORMAT), LoggingConfiguration.FORMAT_DEFAULT);","60","    logger.detachAndStopAllAppenders();","61","    logger.addAppender(createAppender(pattern, conf.getLogOutput()));","65","  private static Appender<ILoggingEvent> createAppender(String pattern, LogOutput target) {","67","    appender.setName(\"custom_stream\");"]}],"sonar-batch\/src\/test\/java\/org\/sonar\/batch\/mediumtest\/log\/LogListenerTest.java":[{"add":["55","  private StringBuilder logOutputStr;","93","    logOutputStr = new StringBuilder();","124","  @Test","125","  public void testChangeLogForAnalysis() throws IOException, InterruptedException {","126","    File srcDir = new File(baseDir, \"src\");","127","    srcDir.mkdir();","128","","129","    File xooFile = new File(srcDir, \"sample.xoo\");","130","    FileUtils.write(xooFile, \"Sample xoo\\ncontent\");","131","","132","    tester.newTask()","133","      .properties(builder","134","        .put(\"sonar.sources\", \"src\")","135","        .put(\"sonar.verbose\", \"true\")","136","        .build())","137","      .start();","138","","140","    for (LogEvent e : logOutput) {","141","      savedStdOut.println(\"[captured]\" + e.level + \" \" + e.msg);","142","    }","143","","144","    \/\/ only done in DEBUG during analysis","145","    assertThat(logOutputStr.toString()).contains(\"Post-jobs : \");","161","    tester.stop();","186","    tester.stop();","202","      logOutputStr.append(msg).append(\"\\n\");"],"delete":["34","import org.junit.After;","123","  @After","124","  public void stop() {"]}],"sonar-batch\/src\/main\/java\/org\/sonar\/batch\/bootstrapper\/LoggingConfiguration.java":[{"add":["23","","25","","26","import javax.annotation.CheckForNull;","28","","66","    setShowSql(properties, null);","67","    setVerbose(properties, null);","68","    return this;","69","  }","70","","71","  public LoggingConfiguration setProperties(Map<String, String> properties, @Nullable Map<String, String> fallback) {","72","    setShowSql(properties, fallback);","73","    setVerbose(properties, fallback);","86","  public LoggingConfiguration setVerbose(Map<String, String> props, @Nullable Map<String, String> fallback) {","87","    String logLevel = getFallback(\"sonar.log.level\", props, fallback);","88","    String deprecatedProfilingLevel = getFallback(\"sonar.log.profilingLevel\", props, fallback);","89","    boolean verbose = \"true\".equals(getFallback(\"sonar.verbose\", props, fallback)) ||","96","  @CheckForNull","97","  private static String getFallback(String key, Map<String, String> properties, @Nullable Map<String, String> fallback) {","98","    if (properties.containsKey(key)) {","99","      return properties.get(key);","100","    }","101","","102","    if (fallback != null) {","103","      return fallback.get(key);","104","    }","105","","106","    return null;","107","  }","108","","117","  public LoggingConfiguration setShowSql(Map<String, String> properties, @Nullable Map<String, String> fallback) {","118","    String logLevel = getFallback(\"sonar.log.level\", properties, fallback);","119","    String deprecatedProfilingLevel = getFallback(\"sonar.log.profilingLevel\", properties, fallback);"],"delete":["62","    setShowSql(properties);","63","    setVerbose(properties);","76","  public LoggingConfiguration setVerbose(Map<String, String> properties) {","77","    String logLevel = properties.get(\"sonar.log.level\");","78","    String deprecatedProfilingLevel = properties.get(\"sonar.log.profilingLevel\");","79","    boolean verbose = \"true\".equals(properties.get(\"sonar.verbose\")) ||","94","  public LoggingConfiguration setShowSql(Map<String, String> properties) {","95","    String logLevel = properties.get(\"sonar.log.level\");","96","    String deprecatedProfilingLevel = properties.get(\"sonar.log.profilingLevel\");"]}],"sonar-batch\/src\/main\/java\/org\/sonar\/batch\/bootstrapper\/Batch.java":[{"add":["109","    configureTaskLogging(analysisProperties);","111","    configureLogging();","120","    configureTaskLogging(analysisProperties);","122","    configureLogging();","156","      loggingConfig.setProperties(bootstrapProperties);","157","      LoggingConfigurator.apply(loggingConfig);","158","    }","159","  }","160","","161","  private void configureTaskLogging(Map<String, String> taskProperties) {","162","    if (loggingConfig != null) {","163","      loggingConfig.setProperties(taskProperties, bootstrapProperties);"],"delete":[]}],"sonar-batch\/src\/test\/java\/org\/sonar\/batch\/bootstrapper\/LoggingConfigurationTest.java":[{"add":["43","  public void testSetVerboseAnalysis() {","44","    Map<String, String> globalProps = Maps.newHashMap();","45","    LoggingConfiguration conf = new LoggingConfiguration(null).setProperties(globalProps);","46","    assertThat(conf.getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL)).isEqualTo(LoggingConfiguration.LEVEL_ROOT_DEFAULT);","47","    assertThat(conf.getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL)).isEqualTo(\"WARN\");","48","","49","    Map<String, String> analysisProperties = Maps.newHashMap();","50","    analysisProperties.put(\"sonar.verbose\", \"true\");","51","","52","    conf.setProperties(analysisProperties, globalProps);","53","    assertThat(conf.getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL)).isEqualTo(LoggingConfiguration.LEVEL_ROOT_VERBOSE);","54","    assertThat(conf.getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL)).isEqualTo(\"WARN\");","55","  }","56","","57","  @Test","58","  public void testOverrideVerbose() {","59","    Map<String, String> globalProps = Maps.newHashMap();","60","    globalProps.put(\"sonar.verbose\", \"true\");","61","    LoggingConfiguration conf = new LoggingConfiguration(null).setProperties(globalProps);","62","    assertThat(conf.getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL)).isEqualTo(LoggingConfiguration.LEVEL_ROOT_VERBOSE);","63","    assertThat(conf.getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL)).isEqualTo(\"WARN\");","64","","65","    Map<String, String> analysisProperties = Maps.newHashMap();","66","    analysisProperties.put(\"sonar.verbose\", \"false\");","67","","68","    conf.setProperties(analysisProperties, globalProps);","69","    assertThat(conf.getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL)).isEqualTo(LoggingConfiguration.LEVEL_ROOT_DEFAULT);","70","    assertThat(conf.getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL)).isEqualTo(\"WARN\");","71","  }","72","","73","  @Test"],"delete":[]}]}},"d3fdfb757079df44a3c5c03dee3710339b946b97":{"changes":{"\/dev\/null":"DELETE","server\/sonar-web\/src\/main\/js\/apps\/overview\/utils.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/__tests__\/__snapshots__\/QualityGateCondition-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/QualityGateCondition.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/measure\/Measure.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/MeasurementLabel.tsx":"MODIFY"},"diff":{"\/dev\/null":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/utils.ts":[{"add":[],"delete":["27","import { QualityGateStatusConditionEnhanced } from '..\/..\/types\/quality-gates';","221","","222","\/*","223"," * Extract a specific metric's threshold from the quality gate details","224"," *\/","225","export function getThreshold(","226","  measures: T.MeasureEnhanced[],","227","  metricKey: MetricKey | string","228","): number | undefined {","229","  const detailsMeasure = measures.find(","230","    measure => measure.metric.key === MetricKey.quality_gate_details","231","  );","232","  if (detailsMeasure && detailsMeasure.value) {","233","    const details = safeParse(detailsMeasure.value);","234","    const conditions: QualityGateStatusConditionEnhanced[] = details.conditions || [];","235","","236","    const condition = conditions.find(c => c.metric === metricKey);","237","    if (condition) {","238","      return parseFloat(","239","        (condition.level === 'ERROR' ? condition.error : condition.warning) as string","240","      );","241","    }","242","  }","243","  return undefined;","244","}","245","","246","function safeParse(json: string) {","247","  try {","248","    return JSON.parse(json);","249","  } catch (e) {","250","    \/\/ eslint-disable-next-line no-console","251","    console.error(e);","252","    return {};","253","  }","254","}"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/__tests__\/__snapshots__\/QualityGateCondition-test.tsx.snap":[{"add":["26","        decimals={2}","68","        decimals={2}","121","        decimals={2}","174","        decimals={2}","216","        decimals={2}","268","        decimals={2}","320","        decimals={2}","373","        decimals={2}","424","        decimals={2}"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/QualityGateCondition.tsx":[{"add":["24","import { formatMeasure } from 'sonar-ui-common\/helpers\/measures';","136","            decimals={2}"],"delete":["24","import {","25","  formatMeasure,","26","  getMinDecimalsCountToBeDistinctFromThreshold","27","} from 'sonar-ui-common\/helpers\/measures';","130","    let decimals: number | undefined = undefined;","134","    } else if (metric.type === 'PERCENT') {","135","      decimals = getMinDecimalsCountToBeDistinctFromThreshold(","136","        parseFloat(actual),","137","        parseFloat(threshold)","138","      );","145","            decimals={decimals}"]}],"server\/sonar-web\/src\/main\/js\/components\/measure\/Measure.tsx":[{"add":["52","    const formattedValue = formatMeasure(value, metricType, {","53","      decimals,","54","      omitExtraDecimalZeros: metricType === 'PERCENT'","55","    });"],"delete":["52","    const formattedValue = formatMeasure(value, metricType, { decimals });"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/MeasurementLabel.tsx":[{"add":["22","import { formatMeasure } from 'sonar-ui-common\/helpers\/measures';","103","        {formatMeasure(value, 'PERCENT', { decimals: 2, omitExtraDecimalZeros: true })}"],"delete":["22","import {","23","  formatMeasure,","24","  getMinDecimalsCountToBeDistinctFromThreshold","25","} from 'sonar-ui-common\/helpers\/measures';","35","  getThreshold,","107","        {formatMeasure(value, 'PERCENT', {","108","          decimals: getMinDecimalsCountToBeDistinctFromThreshold(","109","            parseFloat(value),","110","            getThreshold(measures, metric)","111","          )","112","        })}"]}]}},"44e7ca131970744ed1b667048a895bb622804196":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/user\/UserUpdaterTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/user\/UserUpdater.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/user\/UserUpdaterTest.java":[{"add":["253","      assertThat(e.errors().messages()).containsOnly(Message.of(Validation.IS_TOO_SHORT_MESSAGE, \"Login\", 3));"],"delete":["253","      assertThat(e.errors().messages()).containsOnly(Message.of(Validation.IS_TOO_SHORT_MESSAGE, \"Login\", 2));"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/user\/UserUpdater.java":[{"add":["60","  private static final int LOGIN_MIN_LENGTH = 3;","61","  private static final int LOGIN_MAX_LENGTH = 255;","62","","216","      if (login.length() < LOGIN_MIN_LENGTH) {","217","        messages.add(Message.of(Validation.IS_TOO_SHORT_MESSAGE, LOGIN_PARAM, LOGIN_MIN_LENGTH));","218","      } else if (login.length() >= LOGIN_MAX_LENGTH) {","219","        messages.add(Message.of(Validation.IS_TOO_LONG_MESSAGE, LOGIN_PARAM, LOGIN_MAX_LENGTH));"],"delete":["213","      if (login.length() <= 2) {","214","        messages.add(Message.of(Validation.IS_TOO_SHORT_MESSAGE, LOGIN_PARAM, 2));","215","      } else if (login.length() >= 255) {","216","        messages.add(Message.of(Validation.IS_TOO_LONG_MESSAGE, LOGIN_PARAM, 255));"]}]}},"c70f3440c22884fbb2af047acc5fbd164d8a5158":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/startup\/RegisterMetrics.java":"MODIFY","sonar-db\/src\/main\/java\/org\/sonar\/db\/metric\/MetricMapper.java":"MODIFY","sonar-db\/src\/main\/resources\/org\/sonar\/db\/metric\/MetricMapper.xml":"MODIFY","sonar-db\/src\/main\/java\/org\/sonar\/db\/metric\/MetricDao.java":"MODIFY","sonar-db\/src\/test\/java\/org\/sonar\/db\/metric\/MetricDaoTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/startup\/RegisterMetrics.java":[{"add":["104","      if (!nonUpdatedBase.isUserManaged() && dbClient.metricDao().disableCustomByKey(session, nonUpdatedBase.getKey())) {"],"delete":["104","      if (!nonUpdatedBase.isUserManaged()) {","106","        dbClient.metricDao().disableCustomByKey(session, nonUpdatedBase.getKey());"]}],"sonar-db\/src\/main\/java\/org\/sonar\/db\/metric\/MetricMapper.java":[{"add":["49","  int disableByKey(@Param(\"key\") String key);"],"delete":["49","  void disableByKey(@Param(\"key\") String key);"]}],"sonar-db\/src\/main\/resources\/org\/sonar\/db\/metric\/MetricMapper.xml":[{"add":["138","    and enabled=${_true}"],"delete":[]}],"sonar-db\/src\/main\/java\/org\/sonar\/db\/metric\/MetricDao.java":[{"add":["143","  \/**","144","   * Disable a metric and return {@code false} if the metric does not exist","145","   * or is already disabled.","146","   *\/","147","  public boolean disableCustomByKey(DbSession session, String key) {","148","    return mapper(session).disableByKey(key) == 1;"],"delete":["143","  public void disableCustomByKey(final DbSession session, String key) {","144","    mapper(session).disableByKey(key);"]}],"sonar-db\/src\/test\/java\/org\/sonar\/db\/metric\/MetricDaoTest.java":[{"add":["299","    boolean updated = underTest.disableCustomByKey(session, \"metric-key\");","300","    assertThat(updated).isTrue();","304","","305","    \/\/ disable again -> zero rows are touched","306","    updated = underTest.disableCustomByKey(session, \"metric-key\");","307","    assertThat(updated).isFalse();"],"delete":["299","    underTest.disableCustomByKey(session, \"metric-key\");"]}]}},"5d361e9ec5437d9402d95939b630796494416021":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/views\/gate-projects-view.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/views\/ChangeProjectsView.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/users\/groups-view.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SelectList\/index.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/groups\/users-view.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/permission-templates\/views\/GroupsView.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/permission-templates\/views\/UsersView.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/views\/gate-projects-view.js":[{"add":["20","import escapeHtml from 'escape-html';","36","      dangerouslyUnescapedHtmlFormat(item) {","37","        return escapeHtml(item.name);"],"delete":["35","      format(item) {","36","        return item.name;"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/views\/ChangeProjectsView.js":[{"add":["45","      dangerouslyUnescapedHtmlFormat(item) {"],"delete":["45","      format(item) {"]}],"server\/sonar-web\/src\/main\/js\/apps\/users\/groups-view.js":[{"add":["19","import escapeHtml from 'escape-html';","34","      dangerouslyUnescapedHtmlFormat(item) {","35","        return (","36","          `${escapeHtml(item.name)}<br>` +","37","          `<span class=\"note\">${escapeHtml(item.description)}<\/span>`","38","        );"],"delete":["33","      format(item) {","34","        return `${item.name}<br><span class=\"note\">${item.description}<\/span>`;"]}],"server\/sonar-web\/src\/main\/js\/components\/SelectList\/index.js":[{"add":["22","import escapeHtml from 'escape-html';","92","    this.$el.html(this.template(this.settings.dangerouslyUnescapedHtmlFormat(this.model.toJSON())));","415","  dangerouslyUnescapedHtmlFormat(item) {","416","    return escapeHtml(item.value);"],"delete":["91","    this.$el.html(this.template(this.settings.format(this.model.toJSON())));","414","  format(item) {","415","    return item.value;"]}],"server\/sonar-web\/src\/main\/js\/apps\/groups\/users-view.js":[{"add":["19","import escapeHtml from 'escape-html';","34","      dangerouslyUnescapedHtmlFormat(item) {","35","        return `${escapeHtml(item.name)}<br><span class=\"note\">${escapeHtml(item.login)}<\/span>`;"],"delete":["33","      format(item) {","34","        return `${item.name}<br><span class=\"note\">${item.login}<\/span>`;"]}],"server\/sonar-web\/src\/main\/js\/apps\/permission-templates\/views\/GroupsView.js":[{"add":["19","import escapeHtml from 'escape-html';","41","      dangerouslyUnescapedHtmlFormat(item) {","42","        return escapeHtml(item.name);"],"delete":["40","      format(item) {","41","        return item.name;"]}],"server\/sonar-web\/src\/main\/js\/apps\/permission-templates\/views\/UsersView.js":[{"add":["19","import escapeHtml from 'escape-html';","68","      dangerouslyUnescapedHtmlFormat(item) {","69","        return `${escapeHtml(item.name)}<br><span class=\"note\">${escapeHtml(item.login)}<\/span>`;"],"delete":["67","      format(item) {","68","        return `${item.name}<br><span class=\"note\">${item.login}<\/span>`;"]}]}},"d6164e9a32c80240cb36bab6812121c1bfd3b539":{"changes":{"server\/sonar-webserver-core\/src\/main\/java\/org\/sonar\/server\/rule\/RegisterRules.java":"MODIFY","server\/sonar-webserver-core\/src\/test\/java\/org\/sonar\/server\/rule\/RegisterRulesTest.java":"MODIFY"},"diff":{"server\/sonar-webserver-core\/src\/main\/java\/org\/sonar\/server\/rule\/RegisterRules.java":[{"add":["819","  private static Stream<String> filterInvalidDeprecatedRuleKeys(Map<RuleKey, SingleDeprecatedRuleKey> dbDeprecatedRuleKeysByOldRuleKey, RulesDefinition.Rule rule) {","832","        if (rule.deprecatedRuleKeys().contains(singleDeprecatedRuleKey.getNewRuleKeyAsRuleKey())) {"],"delete":["819","  private static Stream<String> filterInvalidDeprecatedRuleKeys(ImmutableMap<RuleKey, SingleDeprecatedRuleKey> dbDeprecatedRuleKeysByOldRuleKey,","820","    RulesDefinition.Rule rule) {","833","        if (rule.deprecatedRuleKeys().contains(parentRuleKey)) {"]}],"server\/sonar-webserver-core\/src\/test\/java\/org\/sonar\/server\/rule\/RegisterRulesTest.java":[{"add":["74","import static java.util.Collections.emptySet;","78","import static org.assertj.core.api.Assertions.tuple;","854","    assertThat(rules).hasSize(1).extracting(RuleDefinitionDto::getKey, RuleDefinitionDto::getSystemTags)","855","      .containsOnly(tuple(RuleKey.of(\"findbugs\", \"rule1\"), emptySet()));","879","      createRule(repo, \"rule1\");","885","      createRule(repo, \"newKey\")","901","      createRule(repo, \"rule1\");","907","      createRule(repo, \"newKey\")","919","      createRule(repo, \"newKey\");","935","      createRule(repo, \"newKey1\")","936","        .addDeprecatedRuleKey(\"fake\", \"old\");","937","      createRule(repo, \"newKey2\")","938","        .addDeprecatedRuleKey(\"fake\", \"old\");","950","      createRule(repo, \"newKey1\");","951","      createRule(repo, \"newKey2\")","952","        .addDeprecatedRuleKey(\"fake\", \"newKey1\");","973","  public void deprecate_rule_that_deprecated_another_rule() {","974","    execute(context -> createRule(context, \"javascript\", \"javascript\", \"s103\"));","975","    execute(context -> createRule(context, \"javascript\", \"javascript\", \"s104\",","976","      r -> r.addDeprecatedRuleKey(\"javascript\", \"s103\")));","977","","978","    \/\/ This rule should have been moved to another repository","979","    execute(context -> createRule(context, \"javascript\", \"sonarjs\", \"s105\",","980","      r -> r.addDeprecatedRuleKey(\"javascript\", \"s103\")","981","        .addDeprecatedRuleKey(\"javascript\", \"s104\")));","982","  }","983","","984","  @Test","991","      createRule(repo, \"newKey1\");","992","      createRule(repo, \"newKey1\");","1015","  private NewRule createRule(NewRepository repo, String key) {","1016","    return repo.createRule(key)","1017","      .setName(key + \" name\")","1018","      .setHtmlDescription(\"Description of \" + key)","1019","      .setSeverity(BLOCKER)","1020","      .setInternalKey(\"config1\")","1021","      .setTags(\"tag1\", \"tag2\", \"tag3\")","1022","      .setType(RuleType.CODE_SMELL)","1023","      .setStatus(RuleStatus.BETA);","1024","  }","1025",""],"delete":["852","    assertThat(rules).hasSize(1);","853","    RuleDefinitionDto result = rules.get(0);","854","    assertThat(result.getKey()).isEqualTo(RuleKey.of(\"findbugs\", \"rule1\"));","855","    assertThat(result.getSystemTags()).isEmpty();","879","      repo.createRule(\"rule1\")","880","        .setName(\"One\")","881","        .setHtmlDescription(\"Description of One\")","882","        .setSeverity(BLOCKER)","883","        .setInternalKey(\"config1\")","884","        .setTags(\"tag1\", \"tag2\", \"tag3\")","885","        .setType(RuleType.CODE_SMELL)","886","        .setStatus(RuleStatus.BETA);","892","      repo.createRule(\"newKey\")","893","        .setName(\"One\")","894","        .setHtmlDescription(\"Description of One\")","895","        .setSeverity(BLOCKER)","896","        .setInternalKey(\"config1\")","897","        .setTags(\"tag1\", \"tag2\", \"tag3\")","898","        .setType(RuleType.CODE_SMELL)","899","        .setStatus(RuleStatus.BETA)","915","      repo.createRule(\"rule1\")","916","        .setName(\"One\")","917","        .setHtmlDescription(\"Description of One\")","918","        .setSeverity(BLOCKER)","919","        .setInternalKey(\"config1\")","920","        .setTags(\"tag1\", \"tag2\", \"tag3\")","921","        .setType(RuleType.CODE_SMELL)","922","        .setStatus(RuleStatus.BETA);","928","      repo.createRule(\"newKey\")","929","        .setName(\"One\")","930","        .setHtmlDescription(\"Description of One\")","931","        .setSeverity(BLOCKER)","932","        .setInternalKey(\"config1\")","933","        .setTags(\"tag1\", \"tag2\", \"tag3\")","934","        .setType(RuleType.CODE_SMELL)","935","        .setStatus(RuleStatus.BETA)","947","      repo.createRule(\"newKey\")","948","        .setName(\"One\")","949","        .setHtmlDescription(\"Description of One\")","950","        .setSeverity(BLOCKER)","951","        .setInternalKey(\"config1\")","952","        .setTags(\"tag1\", \"tag2\", \"tag3\")","953","        .setType(RuleType.CODE_SMELL)","954","        .setStatus(RuleStatus.BETA);","970","      repo.createRule(\"newKey1\")","971","        .setName(\"One\")","972","        .setHtmlDescription(\"Description of One\")","973","        .setSeverity(BLOCKER)","974","        .setInternalKey(\"config1\")","975","        .setTags(\"tag1\", \"tag2\", \"tag3\")","976","        .setType(RuleType.CODE_SMELL)","977","        .addDeprecatedRuleKey(\"fake\", \"old\")","978","        .setStatus(RuleStatus.BETA);","979","      repo.createRule(\"newKey2\")","980","        .setName(\"One\")","981","        .setHtmlDescription(\"Description of One\")","982","        .setSeverity(BLOCKER)","983","        .setInternalKey(\"config1\")","984","        .setTags(\"tag1\", \"tag2\", \"tag3\")","985","        .setType(RuleType.CODE_SMELL)","986","        .addDeprecatedRuleKey(\"fake\", \"old\")","987","        .setStatus(RuleStatus.BETA);","999","      repo.createRule(\"newKey1\")","1000","        .setName(\"One\")","1001","        .setHtmlDescription(\"Description of One\")","1002","        .setSeverity(BLOCKER)","1003","        .setInternalKey(\"config1\")","1004","        .setTags(\"tag1\", \"tag2\", \"tag3\")","1005","        .setType(RuleType.CODE_SMELL)","1006","        .setStatus(RuleStatus.BETA);","1007","","1008","      repo.createRule(\"newKey2\")","1009","        .setName(\"One\")","1010","        .setHtmlDescription(\"Description of One\")","1011","        .setSeverity(BLOCKER)","1012","        .setInternalKey(\"config1\")","1013","        .setTags(\"tag1\", \"tag2\", \"tag3\")","1014","        .setType(RuleType.CODE_SMELL)","1015","        .addDeprecatedRuleKey(\"fake\", \"newKey1\")","1016","        .setStatus(RuleStatus.BETA);","1043","      repo.createRule(\"newKey1\")","1044","        .setName(\"One\")","1045","        .setHtmlDescription(\"Description of One\")","1046","        .setSeverity(BLOCKER)","1047","        .setInternalKey(\"config1\")","1048","        .setTags(\"tag1\", \"tag2\", \"tag3\")","1049","        .setType(RuleType.CODE_SMELL)","1050","        .setStatus(RuleStatus.BETA);","1051","","1052","      repo.createRule(\"newKey1\")","1053","        .setName(\"One\")","1054","        .setHtmlDescription(\"Description of One\")","1055","        .setSeverity(BLOCKER)","1056","        .setInternalKey(\"config1\")","1057","        .setTags(\"tag1\", \"tag2\", \"tag3\")","1058","        .setType(RuleType.CODE_SMELL)","1059","        .addDeprecatedRuleKey(\"fake\", \"newKey1\")","1060","        .setStatus(RuleStatus.BETA);"]}]}},"1241f18a7b389336ce1eb98fe024f8db0bc5c627":{"changes":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/DefaultInputFile.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/TestInputFileBuilder.java":"MODIFY","sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/batch\/sensor\/symbol\/internal\/DefaultSymbolTableTest.java":"MODIFY","sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/batch\/fs\/internal\/FileMetadataTest.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/FileMetadata.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/charhandler\/LineOffsetCounter.java":"MODIFY","plugins\/sonar-xoo-plugin\/src\/test\/java\/org\/sonar\/xoo\/rule\/AnalysisErrorSensorTest.java":"MODIFY","sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/batch\/sensor\/highlighting\/internal\/DefaultHighlightingTest.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/scan\/filesystem\/MetadataGeneratorTest.java":"MODIFY","sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/batch\/sensor\/cpd\/internal\/DefaultCpdTokensTest.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/filesystem\/InputFileBuilder.java":"MODIFY","sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/batch\/fs\/internal\/DefaultInputFileTest.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/report\/ComponentsPublisherTest.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/DefaultIndexedFile.java":"MODIFY","server\/sonar-process\/src\/test\/java\/org\/sonar\/process\/FileUtils2Test.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/Metadata.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/ComponentsPublisher.java":"MODIFY","sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/batch\/fs\/internal\/MetadataTest.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/DefaultFileLinesContextTest.java":"MODIFY"},"diff":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/DefaultInputFile.java":[{"add":["205","    return metadata.isEmpty();","232","  public int[] originalLineStartOffsets() {","234","    Preconditions.checkState(metadata.originalLineStartOffsets() != null, \"InputFile is not properly initialized.\");","235","    Preconditions.checkState(metadata.originalLineStartOffsets().length == metadata.lines(),","236","      \"InputFile is not properly initialized. 'originalLineStartOffsets' property length should be equal to 'lines'\");","237","    return metadata.originalLineStartOffsets();","238","  }","239","","240","  public int[] originalLineEndOffsets() {","241","    checkMetadata();","242","    Preconditions.checkState(metadata.originalLineEndOffsets() != null, \"InputFile is not properly initialized.\");","243","    Preconditions.checkState(metadata.originalLineEndOffsets().length == metadata.lines(),","244","            \"InputFile is not properly initialized. 'originalLineEndOffsets' property length should be equal to 'lines'\");","245","    return metadata.originalLineEndOffsets();","299","    int startLineOffset = originalLineStartOffsets()[line - 1];","300","    \/\/ In case the global offset is between \\r and \\n, move the pointer to a valid location","301","    return new DefaultTextPointer(line, Math.min(globalOffset, originalLineEndOffsets()[line -1]) - startLineOffset);","324","    return originalLineEndOffsets()[line - 1] - originalLineStartOffsets()[line - 1];","334","    return Math.abs(Arrays.binarySearch(originalLineStartOffsets(), globalOffset) + 1);"],"delete":["205","    return metadata.lastValidOffset() == 0;","216","    Preconditions.checkState(metadata.lastValidOffset() >= 0, \"InputFile is not properly initialized.\");","233","  public int[] originalLineOffsets() {","235","    Preconditions.checkState(metadata.originalLineOffsets() != null, \"InputFile is not properly initialized.\");","236","    Preconditions.checkState(metadata.originalLineOffsets().length == metadata.lines(),","237","      \"InputFile is not properly initialized. 'originalLineOffsets' property length should be equal to 'lines'\");","238","    return metadata.originalLineOffsets();","292","    int startLineOffset = originalLineOffsets()[line - 1];","293","    return new DefaultTextPointer(line, globalOffset - startLineOffset);","316","    return lastValidGlobalOffsetForLine(line) - originalLineOffsets()[line - 1];","317","  }","318","","319","  private int lastValidGlobalOffsetForLine(int line) {","320","    return line < this.metadata.lines() ? (originalLineOffsets()[line] - 1) : lastValidOffset();","330","    return Math.abs(Arrays.binarySearch(originalLineOffsets(), globalOffset) + 1);"]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/TestInputFileBuilder.java":[{"add":["69","  private int[] originalLineStartOffsets = new int[0];","70","  private int[] originalLineEndOffsets = new int[0];","71","  private int lastValidOffset = -1;","179","  public TestInputFileBuilder setLastValidOffset(int lastValidOffset) {","180","    this.lastValidOffset = lastValidOffset;","181","    return this;","182","  }","183","","184","  public TestInputFileBuilder setOriginalLineStartOffsets(int[] originalLineStartOffsets) {","185","    this.originalLineStartOffsets = originalLineStartOffsets;","186","    return this;","187","  }","188","","189","  public TestInputFileBuilder setOriginalLineEndOffsets(int[] originalLineEndOffsets) {","190","    this.originalLineEndOffsets = originalLineEndOffsets;","204","    this.setOriginalLineStartOffsets(metadata.originalLineStartOffsets());","205","    this.setOriginalLineEndOffsets(metadata.originalLineEndOffsets());","221","      f -> f.setMetadata(new Metadata(lines, nonBlankLines, hash, originalLineStartOffsets, originalLineEndOffsets, lastValidOffset)),"],"delete":["67","  private int lastValidOffset = -1;","70","  private int[] originalLineOffsets = new int[0];","157","  public TestInputFileBuilder setLastValidOffset(int lastValidOffset) {","158","    this.lastValidOffset = lastValidOffset;","159","    return this;","160","  }","161","","183","  public TestInputFileBuilder setOriginalLineOffsets(int[] originalLineOffsets) {","184","    this.originalLineOffsets = originalLineOffsets;","198","    this.setOriginalLineOffsets(metadata.originalLineOffsets());","214","      f -> f.setMetadata(new Metadata(lines, nonBlankLines, hash, originalLineOffsets, lastValidOffset)),"]}],"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/batch\/sensor\/symbol\/internal\/DefaultSymbolTableTest.java":[{"add":["39","    .setOriginalLineStartOffsets(new int[] {0, 50})","40","    .setOriginalLineEndOffsets(new int[] {49, 100})","41","    .setLastValidOffset(101)"],"delete":["39","    .setOriginalLineOffsets(new int[] {0, 50})","40","    .setLastValidOffset(100)"]}],"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/batch\/fs\/internal\/FileMetadataTest.java":[{"add":["61","    assertThat(metadata.originalLineStartOffsets()).containsOnly(0);","62","    assertThat(metadata.originalLineEndOffsets()).containsOnly(0);","63","    assertThat(metadata.isEmpty()).isTrue();","75","    assertThat(metadata.originalLineStartOffsets()).containsOnly(0, 5, 10);","76","    assertThat(metadata.originalLineEndOffsets()).containsOnly(3, 8, 13);","77","    assertThat(metadata.isEmpty()).isFalse();","88","    assertThat(metadata.originalLineStartOffsets()).containsOnly(0, 9);","100","    assertThat(metadata.originalLineStartOffsets()).containsOnly(0, 5, 10, 18);","111","    assertThat(metadata.originalLineStartOffsets()).containsOnly(0, 5, 10, 18);","123","    assertThat(metadata.originalLineStartOffsets()).containsOnly(0, 4, 8);","124","    assertThat(metadata.originalLineEndOffsets()).containsOnly(3, 7, 11);","125","    assertThat(metadata.isEmpty()).isFalse();","137","    assertThat(metadata.originalLineStartOffsets()).containsOnly(0, 4, 8, 12);","138","    assertThat(metadata.originalLineEndOffsets()).containsOnly(3, 7, 11, 12);","150","    assertThat(metadata.originalLineStartOffsets()).containsOnly(0, 4, 8);","151","    assertThat(metadata.originalLineEndOffsets()).containsOnly(3, 7, 11);","163","    assertThat(metadata.originalLineStartOffsets()).containsOnly(0, 4, 8, 12);","164","    assertThat(metadata.originalLineEndOffsets()).containsOnly(3, 7, 11, 12);","176","    assertThat(metadata.originalLineStartOffsets()).containsOnly(0, 4, 9, 13);","177","    assertThat(metadata.originalLineEndOffsets()).containsOnly(3, 7, 12, 13);","189","    assertThat(metadata.originalLineStartOffsets()).containsOnly(0, 4, 5, 6);","190","    assertThat(metadata.originalLineEndOffsets()).containsOnly(3, 4, 5, 9);","202","    assertThat(metadata.originalLineStartOffsets()).containsOnly(0, 4, 9);","203","    assertThat(metadata.originalLineEndOffsets()).containsOnly(3, 7, 12);","215","    assertThat(metadata.originalLineStartOffsets()).containsOnly(0, 1, 5, 10);","216","    assertThat(metadata.originalLineEndOffsets()).containsOnly(0, 4, 8, 13);"],"delete":["61","    assertThat(metadata.originalLineOffsets()).containsOnly(0);","62","    assertThat(metadata.lastValidOffset()).isEqualTo(0);","74","    assertThat(metadata.originalLineOffsets()).containsOnly(0, 5, 10);","75","    assertThat(metadata.lastValidOffset()).isEqualTo(13);","86","    assertThat(metadata.originalLineOffsets()).containsOnly(0, 9);","98","    assertThat(metadata.originalLineOffsets()).containsOnly(0, 5, 10, 18);","109","    assertThat(metadata.originalLineOffsets()).containsOnly(0, 5, 10, 18);","121","    assertThat(metadata.originalLineOffsets()).containsOnly(0, 4, 8);","122","    assertThat(metadata.lastValidOffset()).isEqualTo(11);","134","    assertThat(metadata.originalLineOffsets()).containsOnly(0, 4, 8, 12);","135","    assertThat(metadata.lastValidOffset()).isEqualTo(12);","147","    assertThat(metadata.originalLineOffsets()).containsOnly(0, 4, 8);","148","    assertThat(metadata.lastValidOffset()).isEqualTo(11);","160","    assertThat(metadata.originalLineOffsets()).containsOnly(0, 4, 8, 12);","161","    assertThat(metadata.lastValidOffset()).isEqualTo(12);","173","    assertThat(metadata.originalLineOffsets()).containsOnly(0, 4, 9, 13);","185","    assertThat(metadata.originalLineOffsets()).containsOnly(0, 4, 5, 6);","197","    assertThat(metadata.originalLineOffsets()).containsOnly(0, 4, 9);","209","    assertThat(metadata.originalLineOffsets()).containsOnly(0, 1, 5, 10);"]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/FileMetadata.java":[{"add":["66","    return new Metadata(lineCounter.lines(), lineCounter.nonBlankLines(), fileHashComputer.getHash(), lineOffsetCounter.getOriginalLineStartOffsets(),","67","      lineOffsetCounter.getOriginalLineEndOffsets(),","89","    return new Metadata(lineCounter.lines(), lineCounter.nonBlankLines(), fileHashComputer.getHash(), lineOffsetCounter.getOriginalLineStartOffsets(),","90","      lineOffsetCounter.getOriginalLineEndOffsets(),"],"delete":["66","    return new Metadata(lineCounter.lines(), lineCounter.nonBlankLines(), fileHashComputer.getHash(), lineOffsetCounter.getOriginalLineOffsets(),","88","    return new Metadata(lineCounter.lines(), lineCounter.nonBlankLines(), fileHashComputer.getHash(), lineOffsetCounter.getOriginalLineOffsets(),"]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/charhandler\/LineOffsetCounter.java":[{"add":["22","  private long currentOriginalLineStartOffset = 0;","23","  private long currentOriginalLineEndOffset = 0;","24","  private final IntArrayList originalLineStartOffsets = new IntArrayList();","25","  private final IntArrayList originalLineEndOffsets = new IntArrayList();","29","    originalLineStartOffsets.add(0);","34","    currentOriginalLineStartOffset++;","35","  }","36","","37","  @Override","38","  public void handleIgnoreEoL(char c) {","39","    currentOriginalLineEndOffset++;","44","    if (currentOriginalLineStartOffset > Integer.MAX_VALUE) {","45","      throw new IllegalStateException(\"File is too big: \" + currentOriginalLineStartOffset);","47","    originalLineStartOffsets.add((int) currentOriginalLineStartOffset);","48","    originalLineEndOffsets.add((int) currentOriginalLineEndOffset);","49","    currentOriginalLineEndOffset = currentOriginalLineStartOffset;","54","    originalLineEndOffsets.add((int) currentOriginalLineEndOffset);","55","    lastValidOffset = currentOriginalLineStartOffset;","58","  public int[] getOriginalLineStartOffsets() {","59","    return originalLineStartOffsets.trimAndGet();","60","  }","61","","62","  public int[] getOriginalLineEndOffsets() {","63","    return originalLineEndOffsets.trimAndGet();"],"delete":["22","  private long currentOriginalOffset = 0;","23","  private IntArrayList originalLineOffsets = new IntArrayList();","27","    originalLineOffsets.add(0);","32","    currentOriginalOffset++;","37","    if (currentOriginalOffset > Integer.MAX_VALUE) {","38","      throw new IllegalStateException(\"File is too big: \" + currentOriginalOffset);","40","    originalLineOffsets.add((int) currentOriginalOffset);","45","    lastValidOffset = currentOriginalOffset;","48","  public int[] getOriginalLineOffsets() {","49","    return originalLineOffsets.trimAndGet();"]}],"plugins\/sonar-xoo-plugin\/src\/test\/java\/org\/sonar\/xoo\/rule\/AnalysisErrorSensorTest.java":[{"add":["67","    int[] startOffsets = {10, 20, 30, 40};","68","    int[] endOffsets = {19, 29, 39, 49};","71","      .setOriginalLineStartOffsets(startOffsets)","72","      .setOriginalLineEndOffsets(endOffsets)"],"delete":["67","    int[] offsets = {10, 20, 30, 40};","70","      .setOriginalLineOffsets(offsets)"]}],"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/batch\/sensor\/highlighting\/internal\/DefaultHighlightingTest.java":[{"add":["43","    .setOriginalLineStartOffsets(new int[] {0, 50})","44","    .setOriginalLineEndOffsets(new int[] {49, 100})","45","    .setLastValidOffset(101)"],"delete":["43","    .setOriginalLineOffsets(new int[] {0, 50})","44","    .setLastValidOffset(100)"]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/scan\/filesystem\/MetadataGeneratorTest.java":[{"add":["109","    assertThat(inputFile.originalLineStartOffsets()).containsOnly(0, 4, 9);","110","    assertThat(inputFile.originalLineEndOffsets()).containsOnly(3, 7, 12);"],"delete":["109","    assertThat(inputFile.originalLineOffsets()).containsOnly(0, 4, 9);"]}],"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/batch\/sensor\/cpd\/internal\/DefaultCpdTokensTest.java":[{"add":["39","    .setOriginalLineStartOffsets(new int[] {0, 50})","40","    .setOriginalLineEndOffsets(new int[] {49, 100})","41","    .setLastValidOffset(101)","149","      assertThat(e).hasMessage(\"Tokens of file src\/Foo.java should be provided in order.\\n\" +"],"delete":["39","    .setOriginalLineOffsets(new int[] {0, 50})","40","    .setLastValidOffset(100)","148","      assertThat(e).hasMessage(\"Tokens of file src\" + File.separator + \"Foo.java should be provided in order.\\n\" +"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/filesystem\/InputFileBuilder.java":[{"add":["57","      projectBaseDir.relativize(absolutePath).toString(),","58","      moduleBaseDir.relativize(absolutePath).toString(),"],"delete":["57","      PathUtils.sanitize(projectBaseDir.relativize(absolutePath).toString()),","58","      PathUtils.sanitize(moduleBaseDir.relativize(absolutePath).toString()),"]}],"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/batch\/fs\/internal\/DefaultInputFileTest.java":[{"add":["71","    Metadata metadata = new Metadata(42, 42, \"\", new int[0], new int[0], 10);","105","    Metadata metadata = new Metadata(42, 30, \"\", new int[0], new int[0], 10);","131","    Metadata metadata = new Metadata(42, 30, \"\", new int[0], new int[0], 10);","169","    Metadata metadata = new Metadata(2, 2, \"\", new int[] {0, 10}, new int[] {9, 15}, 16);","206","    Metadata metadata = new Metadata(2, 2, \"\", new int[] {0, 10}, new int[] {8, 15}, 16);","212","    \/\/ Ignore eol characters","213","    assertThat(file.newPointer(9).lineOffset()).isEqualTo(8);","221","    assertThat(file.newPointer(16).line()).isEqualTo(2);","222","    \/\/ Ignore eol characters","223","    assertThat(file.newPointer(16).lineOffset()).isEqualTo(5);","224","","233","      file.newPointer(17);","236","      assertThat(e).hasMessage(\"17 is not a valid offset for file src\/Foo.php. Max offset is 16\");","292","    Metadata metadata = new Metadata(2, 2, \"\", new int[] {0, 10}, new int[] {9, 15}, 16);","303","    Metadata metadata = new Metadata(2, 2, \"\", new int[] {0, 10}, new int[] {9, 15}, 16);"],"delete":["71","    Metadata metadata = new Metadata(42, 42, \"\", new int[0], 0);","105","    Metadata metadata = new Metadata(42, 30, \"\", new int[0], 0);","131","    Metadata metadata = new Metadata(42, 30, \"\", new int[0], 0);","169","    Metadata metadata = new Metadata(2, 2, \"\", new int[] {0, 10}, 15);","206","    Metadata metadata = new Metadata(2, 2, \"\", new int[] {0, 10}, 15);","212","    assertThat(file.newPointer(9).lineOffset()).isEqualTo(9);","228","      file.newPointer(16);","231","      assertThat(e).hasMessage(\"16 is not a valid offset for file src\/Foo.php. Max offset is 15\");","287","    Metadata metadata = new Metadata(2, 2, \"\", new int[] {0, 10}, 15);","298","    Metadata metadata = new Metadata(2, 2, \"\", new int[] {0, 10}, 15);"]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/report\/ComponentsPublisherTest.java":[{"add":["648","    assertThat(reader.readComponent(dir1_file.batchId()).getProjectRelativePath()).isEqualTo(\"dir1\/Foo.java\");","652","    assertThat(reader.readComponent(dir1_dir1.batchId()).getProjectRelativePath()).isEqualTo(\"dir1\/dir1\");","660","    assertThat(reader.readComponent(mod1_dir2.batchId()).getProjectRelativePath()).isEqualTo(\"mod1\/dir2\");","664","    assertThat(reader.readComponent(mod1_dir2_file.batchId()).getProjectRelativePath()).isEqualTo(\"mod1\/dir2\/Foo.java\");","668","    assertThat(reader.readComponent(mod1_mod2.batchId()).getProjectRelativePath()).isEqualTo(\"mod1\/mod2\");","672","    assertThat(reader.readComponent(mod1_mod2_file.batchId()).getProjectRelativePath()).isEqualTo(\"mod1\/mod2\/Foo.java\");","676","    assertThat(reader.readComponent(mod1_mod2_dir.batchId()).getProjectRelativePath()).isEqualTo(\"mod1\/mod2\/dir\");","680","    assertThat(reader.readComponent(mod1_mod2_dir_file.batchId()).getProjectRelativePath()).isEqualTo(\"mod1\/mod2\/dir\/Foo.java\");"],"delete":["648","    assertThat(reader.readComponent(dir1_file.batchId()).getProjectRelativePath()).isEqualTo(\"dir1\" + File.separator + \"Foo.java\");","652","    assertThat(reader.readComponent(dir1_dir1.batchId()).getProjectRelativePath()).isEqualTo(\"dir1\" + File.separator + \"dir1\");","660","    assertThat(reader.readComponent(mod1_dir2.batchId()).getProjectRelativePath()).isEqualTo(\"mod1\" + File.separator + \"dir2\");","664","    assertThat(reader.readComponent(mod1_dir2_file.batchId()).getProjectRelativePath()).isEqualTo(\"mod1\" + File.separator + \"dir2\" + File.separator + \"Foo.java\");","668","    assertThat(reader.readComponent(mod1_mod2.batchId()).getProjectRelativePath()).isEqualTo(\"mod1\" + File.separator + \"mod2\");","672","    assertThat(reader.readComponent(mod1_mod2_file.batchId()).getProjectRelativePath()).isEqualTo(\"mod1\" + File.separator + \"mod2\" + File.separator + \"Foo.java\");","676","    assertThat(reader.readComponent(mod1_mod2_dir.batchId()).getProjectRelativePath()).isEqualTo(\"mod1\" + File.separator + \"mod2\" + File.separator + \"dir\");","680","    assertThat(reader.readComponent(mod1_mod2_dir_file.batchId()).getProjectRelativePath())","681","      .isEqualTo(\"mod1\" + File.separator + \"mod2\" + File.separator + \"dir\" + File.separator + \"Foo.java\");"]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/DefaultIndexedFile.java":[{"add":["51","    this(baseDir.resolve(relativePath), moduleKey, relativePath, relativePath, Type.MAIN, language, TestInputFileBuilder.nextBatchId(),","59","    this.projectRelativePath = PathUtils.sanitize(projectRelativePath);","60","    this.moduleRelativePath = PathUtils.sanitize(moduleRelativePath);"],"delete":["51","    this(baseDir.resolve(relativePath), moduleKey, PathUtils.sanitize(relativePath), PathUtils.sanitize(relativePath), Type.MAIN, language, TestInputFileBuilder.nextBatchId(),","59","    this.projectRelativePath = projectRelativePath;","60","    this.moduleRelativePath = moduleRelativePath;"]}],"server\/sonar-process\/src\/test\/java\/org\/sonar\/process\/FileUtils2Test.java":[{"add":["285","    assumeTrue(SystemUtils.IS_OS_UNIX);"],"delete":[]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/Metadata.java":[{"add":["27","    private final int lines;","28","    private final int nonBlankLines;","29","    private final String hash;","30","    private final int[] originalLineStartOffsets;","31","    private final int[] originalLineEndOffsets;","32","    private final int lastValidOffset;","34","    public Metadata(int lines, int nonBlankLines, String hash, int[] originalLineStartOffsets, int[] originalLineEndOffsets, int lastValidOffset) {","35","        this.lines = lines;","36","        this.nonBlankLines = nonBlankLines;","37","        this.hash = hash;","38","        this.originalLineStartOffsets = Arrays.copyOf(originalLineStartOffsets, originalLineStartOffsets.length);","39","        this.originalLineEndOffsets = Arrays.copyOf(originalLineEndOffsets, originalLineEndOffsets.length);","40","        this.lastValidOffset = lastValidOffset;","41","    }","43","    public int lines() {","44","        return lines;","45","    }","47","    public int nonBlankLines() {","48","        return nonBlankLines;","49","    }","51","    public String hash() {","52","        return hash;","53","    }","55","    public int[] originalLineStartOffsets() {","56","        return originalLineStartOffsets;","57","    }","59","    public int[] originalLineEndOffsets() {","60","        return originalLineEndOffsets;","61","    }","63","    public int lastValidOffset() {","64","        return lastValidOffset;","65","    }","66","","67","    public boolean isEmpty() {","68","        return lastValidOffset == 0;","69","    }"],"delete":["27","  private final int lines;","28","  private final int nonBlankLines;","29","  private final String hash;","30","  private final int[] originalLineOffsets;","31","  private final int lastValidOffset;","33","  public Metadata(int lines, int nonBlankLines, String hash, int[] originalLineOffsets, int lastValidOffset) {","34","    this.lines = lines;","35","    this.nonBlankLines = nonBlankLines;","36","    this.hash = hash;","37","    this.originalLineOffsets = Arrays.copyOf(originalLineOffsets, originalLineOffsets.length);","38","    this.lastValidOffset = lastValidOffset;","39","  }","41","  public int lines() {","42","    return lines;","43","  }","45","  public int nonBlankLines() {","46","    return nonBlankLines;","47","  }","49","  public String hash() {","50","    return hash;","51","  }","53","  public int[] originalLineOffsets() {","54","    return originalLineOffsets;","55","  }","57","  public int lastValidOffset() {","58","    return lastValidOffset;","59","  }"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/ComponentsPublisher.java":[{"add":["38","import org.sonar.api.utils.PathUtils;","209","      return PathUtils.sanitize(projectBaseDir.relativize(inputDir.path()).toString());","213","      return PathUtils.sanitize(projectBaseDir.relativize(module.getBaseDir()).toString());"],"delete":["208","      return projectBaseDir.relativize(inputDir.path()).toString();","212","      return projectBaseDir.relativize(module.getBaseDir()).toString();"]}],"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/batch\/fs\/internal\/MetadataTest.java":[{"add":["28","    Metadata metadata = new Metadata(10, 20, \"hash\", new int[] {1, 3}, new int[] {2, 4}, 5);","29","    assertThat(metadata.isEmpty()).isFalse();","32","    assertThat(metadata.originalLineStartOffsets()).isEqualTo(new int[] {1, 3});","33","    assertThat(metadata.originalLineEndOffsets()).isEqualTo(new int[] {2, 4});","34","    assertThat(metadata.lastValidOffset()).isEqualTo(5);"],"delete":["28","    Metadata metadata = new Metadata(10, 20, \"hash\", new int[] {1, 2}, 30);","29","    assertThat(metadata.lastValidOffset()).isEqualTo(30);","32","    assertThat(metadata.originalLineOffsets()).isEqualTo(new int[] {1, 2});"]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/DefaultFileLinesContextTest.java":[{"add":["96","    thrown.expectMessage(\"Line number should be positive for file src\/foo.php.\");","102","    thrown.expectMessage(\"Line 4 is out of range for file src\/foo.php. File has 3 lines\");"],"delete":["96","    thrown.expectMessage(\"Line number should be positive for file src\" + File.separator + \"foo.php.\");","102","    thrown.expectMessage(\"Line 4 is out of range for file src\" + File.separator + \"foo.php. File has 3 lines\");"]}]}},"440c8093d3f5b7128aaf93775b91984430990f4a":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/preview-graph\/PreviewGraphTooltipsContent.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/styles.css":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/preview-graph\/__tests__\/__snapshots__\/PreviewGraphTooltipsContent-test.tsx.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/preview-graph\/PreviewGraphTooltipsContent.tsx":[{"add":["39","      <td>","40","        <div className=\"text-ellipsis overview-analysis-graph-tooltip-description\">","41","          {translatedName}","42","        <\/div>"],"delete":["39","      <td className=\"text-ellipsis overview-analysis-graph-tooltip-description\">","40","        {translatedName}"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/styles.css":[{"add":["418","  max-width: 80px;"],"delete":["418","  max-width: 120px;"]}],"server\/sonar-web\/src\/main\/js\/components\/preview-graph\/__tests__\/__snapshots__\/PreviewGraphTooltipsContent-test.tsx.snap":[{"add":["18","  <td>","19","    <div","20","      className=\"text-ellipsis overview-analysis-graph-tooltip-description\"","21","    >","22","      Code Smells","23","    <\/div>"],"delete":["18","  <td","19","    className=\"text-ellipsis overview-analysis-graph-tooltip-description\"","20","  >","21","    Code Smells"]}]}},"30938a6522f09c9a6c79cf7e3d3ffdc985924130":{"changes":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/CoreProperties.java":"MODIFY"},"diff":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/CoreProperties.java":[{"add":["257","  @Deprecated"],"delete":[]}]}},"1ceb2bbf0a279e63de3fccb3f37e31994958e6c7":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/ClangGCC.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/__tests__\/__snapshots__\/ClangGCC-test.js.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/Msvc.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/__tests__\/__snapshots__\/DotNet-test.js.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/Command.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/__tests__\/__snapshots__\/Msvc-test.js.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/Other.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/DotNet.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/__tests__\/__snapshots__\/Other-test.js.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/styles.css":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/ClangGCC.js":[{"add":["69","      <Command command={command1} isWindows={props.os === 'win'} \/>","70","      <Command command={command2} isWindows={props.os === 'win'} \/>"],"delete":["69","      <Command command={command1} \/>","70","      <Command command={command2} \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/__tests__\/__snapshots__\/ClangGCC-test.js.snap":[{"add":["26","    isWindows={true}","40","    isWindows={true}","77","    isWindows={false}","91","    isWindows={false}","128","    isWindows={false}","142","    isWindows={false}"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/Msvc.js":[{"add":["39","    props.organization && `\/d:sonar.organization=\"${props.organization}\"`,","40","    '\/d:sonar.cfamily.build-wrapper-output=bw-output',","41","    `\/d:sonar.host.url=\"${props.host}\"`,","42","    `\/d:sonar.login=\"${props.token}\"`","45","  const command2 = 'build-wrapper-win-x86-64.exe --out-dir bw-output MsBuild.exe \/t:Rebuild';","47","  const command3 = ['SonarQube.Scanner.MSBuild.exe end', `\/d:sonar.login=\"${props.token}\"`];","63","      <Command command={command1} isWindows={true} \/>","64","      <Command command={command2} isWindows={true} \/>","65","      <Command command={command3} isWindows={true} \/>"],"delete":["39","    props.organization && `\/d:\"sonar.organization=${props.organization}\"`,","40","    '\/d:\"sonar.cfamily.build-wrapper-output=bw-output\"',","41","    `\/d:\"sonar.host.url=${props.host}`,","42","    `\/d:\"sonar.login=${props.token}\"`","45","  const command2 = ['build-wrapper-win-x86-64.exe', '--out-dir bw-output MsBuild.exe \/t:Rebuild'];","47","  const command3 = ['SonarQube.Scanner.MSBuild.exe end', `\/d:\"sonar.login=${props.token}\"`];","63","      <Command command={command1} \/>","64","      <Command command={command2} \/>","65","      <Command command={command3} \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/__tests__\/__snapshots__\/DotNet-test.js.snap":[{"add":["24","        \"\/d:sonar.host.url=\\\\\"host\\\\\"\",","25","        \"\/d:sonar.login=\\\\\"token\\\\\"\",","28","    isWindows={true}","32","    isWindows={true}","38","        \"\/d:sonar.login=\\\\\"token\\\\\"\",","41","    isWindows={true}","75","        \"\/d:sonar.organization=\\\\\"organization\\\\\"\",","76","        \"\/d:sonar.host.url=\\\\\"host\\\\\"\",","77","        \"\/d:sonar.login=\\\\\"token\\\\\"\",","80","    isWindows={true}","84","    isWindows={true}","90","        \"\/d:sonar.login=\\\\\"token\\\\\"\",","93","    isWindows={true}"],"delete":["24","        \"\/d:\\\\\"sonar.host.url=host\",","25","        \"\/d:\\\\\"sonar.login=token\\\\\"\",","36","        \"\/d:\\\\\"sonar.login=token\\\\\"\",","72","        \"\/d:\\\\\"sonar.organization=organization\\\\\"\",","73","        \"\/d:\\\\\"sonar.host.url=host\",","74","        \"\/d:\\\\\"sonar.login=token\\\\\"\",","85","        \"\/d:\\\\\"sonar.login=token\\\\\"\","]}],"server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/Command.js":[{"add":["22","import classNames from 'classnames';","28","  command: string | Array<?string>,","29","  isWindows?: boolean","54","  componentDidUpdate() {","55","    this.clipboard.destroy();","56","    this.clipboard = new Clipboard(this.copyButton);","57","    this.clipboard.on('success', this.showTooltip);","58","  }","59","","79","    const { command, isWindows } = this.props;","81","    const finalCommand = isWindows ? commandArray.join(' ') : commandArray.join(s);","90","      <div","91","        className={classNames('onboarding-command', { 'onboarding-command-windows': isWindows })}>"],"delete":["27","  command: string | Array<?string>","71","    const { command } = this.props;","73","    const finalCommand = commandArray.join(s);","82","      <div className=\"onboarding-command\">"]}],"server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/__tests__\/__snapshots__\/Msvc-test.js.snap":[{"add":["28","        \"\/d:sonar.cfamily.build-wrapper-output=bw-output\",","29","        \"\/d:sonar.host.url=\\\\\"host\\\\\"\",","30","        \"\/d:sonar.login=\\\\\"token\\\\\"\",","33","    isWindows={true}","36","    command=\"build-wrapper-win-x86-64.exe --out-dir bw-output MsBuild.exe \/t:Rebuild\"","37","    isWindows={true}","43","        \"\/d:sonar.login=\\\\\"token\\\\\"\",","46","    isWindows={true}","84","        \"\/d:sonar.organization=\\\\\"organization\\\\\"\",","85","        \"\/d:sonar.cfamily.build-wrapper-output=bw-output\",","86","        \"\/d:sonar.host.url=\\\\\"host\\\\\"\",","87","        \"\/d:sonar.login=\\\\\"token\\\\\"\",","90","    isWindows={true}","93","    command=\"build-wrapper-win-x86-64.exe --out-dir bw-output MsBuild.exe \/t:Rebuild\"","94","    isWindows={true}","100","        \"\/d:sonar.login=\\\\\"token\\\\\"\",","103","    isWindows={true}"],"delete":["28","        \"\/d:\\\\\"sonar.cfamily.build-wrapper-output=bw-output\\\\\"\",","29","        \"\/d:\\\\\"sonar.host.url=host\",","30","        \"\/d:\\\\\"sonar.login=token\\\\\"\",","35","    command={","36","      Array [","37","        \"build-wrapper-win-x86-64.exe\",","38","        \"--out-dir bw-output MsBuild.exe \/t:Rebuild\",","39","      ]","40","    }","46","        \"\/d:\\\\\"sonar.login=token\\\\\"\",","86","        \"\/d:\\\\\"sonar.organization=organization\\\\\"\",","87","        \"\/d:\\\\\"sonar.cfamily.build-wrapper-output=bw-output\\\\\"\",","88","        \"\/d:\\\\\"sonar.host.url=host\",","89","        \"\/d:\\\\\"sonar.login=token\\\\\"\",","94","    command={","95","      Array [","96","        \"build-wrapper-win-x86-64.exe\",","97","        \"--out-dir bw-output MsBuild.exe \/t:Rebuild\",","98","      ]","99","    }","105","        \"\/d:\\\\\"sonar.login=token\\\\\"\","]}],"server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/Other.js":[{"add":["58","      <Command command={command} isWindows={props.os === 'win'} \/>"],"delete":["58","      <Command command={command} \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/DotNet.js":[{"add":["38","    props.organization && `\/d:sonar.organization=\"${props.organization}\"`,","39","    `\/d:sonar.host.url=\"${props.host}\"`,","40","    `\/d:sonar.login=\"${props.token}\"`","45","  const command3 = ['SonarQube.Scanner.MSBuild.exe end', `\/d:sonar.login=\"${props.token}\"`];","60","      <Command command={command1} isWindows={true} \/>","61","      <Command command={command2} isWindows={true} \/>","62","      <Command command={command3} isWindows={true} \/>"],"delete":["38","    props.organization && `\/d:\"sonar.organization=${props.organization}\"`,","39","    `\/d:\"sonar.host.url=${props.host}`,","40","    `\/d:\"sonar.login=${props.token}\"`","45","  const command3 = ['SonarQube.Scanner.MSBuild.exe end', `\/d:\"sonar.login=${props.token}\"`];","60","      <Command command={command1} \/>","61","      <Command command={command2} \/>","62","      <Command command={command3} \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/__tests__\/__snapshots__\/Other-test.js.snap":[{"add":["31","    isWindows={true}","73","    isWindows={false}","115","    isWindows={false}"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/styles.css":[{"add":["64","  user-select: none;","74",".onboarding-command-windows pre {","75","  padding-bottom: 40px;","76","}","77","","78",".onboarding-command-windows button {","79","  top: auto;","80","  top: 40px;","81","}","82",""],"delete":[]}]}},"48feb5a6bd658c638b0cdd03231d0799fde533c0":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/queue\/ReportSubmitter.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/step\/ValidateProjectStep.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/queue\/ReportSubmitterTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/step\/ValidateProjectStepTest.java":"MODIFY","tests\/src\/test\/java\/org\/sonarqube\/tests\/analysis\/ScannerTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/queue\/ReportSubmitter.java":[{"add":["21","import com.google.common.base.Optional;","23","import java.util.ArrayList;","31","import org.sonar.api.resources.Scopes;","47","import org.sonar.server.exceptions.BadRequestException;","52","import static com.google.common.base.Preconditions.checkArgument;","53","import static java.lang.String.format;","54","import static org.sonar.core.permission.GlobalPermissions.SCAN_EXECUTION;","55","import static org.sonar.server.component.NewComponent.newComponentBuilder;","56","import static org.sonar.server.user.AbstractUserSession.insufficientPrivilegesException;","91","      Optional<ComponentDto> component = dbClient.componentDao().selectByKey(dbSession, effectiveProjectKey);","92","      validateProject(dbSession, component, projectKey);","93","      ensureOrganizationIsConsistent(component, organizationDto);","94","      ComponentDto project = component.or(() -> createProject(dbSession, organizationDto, projectKey, projectBranch, projectName));","117","  private void validateProject(DbSession dbSession, Optional<ComponentDto> project, String rawProjectKey) {","118","    List<String> errors = new ArrayList<>();","119","    if (!project.isPresent()) {","120","      return;","121","    }","122","","123","    ComponentDto component = project.get();","124","    if (!Qualifiers.PROJECT.equals(component.qualifier()) || !Scopes.PROJECT.equals(component.scope())) {","125","      errors.add(format(\"Component '%s' is not a project\", rawProjectKey));","126","    }","127","    if (!project.get().projectUuid().equals(project.get().uuid())) {","128","      \/\/ Project key is already used as a module of another project","129","      ComponentDto anotherBaseProject = dbClient.componentDao().selectOrFailByUuid(dbSession, project.get().projectUuid());","130","      errors.add(format(\"The project '%s' is already defined in SonarQube but as a module of project '%s'. \"","131","        + \"If you really want to stop directly analysing project '%s', please first delete it from SonarQube and then relaunch the analysis of project '%s'.\",","132","        rawProjectKey, anotherBaseProject.getKey(), anotherBaseProject.getKey(), rawProjectKey));","133","    }","134","    if (!errors.isEmpty()) {","135","      throw BadRequestException.create(errors);","136","    }","137","  }","138",""],"delete":["21","import static com.google.common.base.Preconditions.checkArgument;","22","import static java.lang.String.format;","23","import static org.sonar.core.permission.GlobalPermissions.SCAN_EXECUTION;","24","import static org.sonar.server.component.NewComponent.newComponentBuilder;","25","import static org.sonar.server.user.AbstractUserSession.insufficientPrivilegesException;","26","","32","","34","","56","import com.google.common.base.Optional;","91","      Optional<ComponentDto> opt = dbClient.componentDao().selectByKey(dbSession, effectiveProjectKey);","92","      ensureOrganizationIsConsistent(opt, organizationDto);","93","      ComponentDto project = opt.or(() -> createProject(dbSession, organizationDto, projectKey, projectBranch, projectName));"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/step\/ValidateProjectStep.java":[{"add":["51"," * <li>module key is not valid<\/li>"],"delete":["27","import org.sonar.api.resources.Qualifiers;","28","import org.sonar.api.resources.Scopes;","53"," * <li>branch is not valid<\/li>","54"," * <li>project or module key is not valid<\/li>","117","      validateBatchKey(rawProject);","120","      validateRootIsProject(baseProject);","121","      validateProjectKey(baseProject, rawProjectKey);","125","    private void validateRootIsProject(Optional<ComponentDto> baseProject) {","126","      if (baseProject.isPresent()) {","127","        ComponentDto componentDto = baseProject.get();","128","        \/\/ the scope field is verified for excluding the project copies generated by portfolios","129","        if (!Qualifiers.PROJECT.equals(componentDto.qualifier()) || !Scopes.PROJECT.equals(componentDto.scope())) {","130","          validationMessages.add(format(\"Component (uuid=%s, key=%s) is not a project\", rawProject.getUuid(), rawProject.getKey()));","131","        }","132","      }","133","    }","134","","135","    private void validateProjectKey(Optional<ComponentDto> baseProject, String rawProjectKey) {","136","      if (baseProject.isPresent() && !baseProject.get().projectUuid().equals(baseProject.get().uuid())) {","137","        \/\/ Project key is already used as a module of another project","138","        ComponentDto anotherBaseProject = componentDao.selectOrFailByUuid(session, baseProject.get().projectUuid());","139","        validationMessages.add(format(\"The project \\\"%s\\\" is already defined in SonarQube but as a module of project \\\"%s\\\". \"","140","          + \"If you really want to stop directly analysing project \\\"%s\\\", please first delete it from SonarQube and then relaunch the analysis of project \\\"%s\\\".\",","141","          rawProjectKey, anotherBaseProject.getDbKey(), anotherBaseProject.getDbKey(), rawProjectKey));","142","      }","143","    }","144",""]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/queue\/ReportSubmitterTest.java":[{"add":["50","import org.sonar.server.exceptions.BadRequestException;","57","import static java.lang.String.format;","60","import static org.junit.Assert.fail;","70","import static org.sonar.db.component.ComponentTesting.newModuleDto;","83","  public ExpectedException expectedException = ExpectedException.none();","116","        .thenReturn(true);","172","        .thenReturn(true);","203","        .thenReturn(true);","222","        .thenReturn(true);","266","    expectedException.expect(ForbiddenException.class);","270","  @Test","271","  public void fail_with_NotFoundException_if_organization_with_specified_key_does_not_exist() {","272","    expectedException.expect(NotFoundException.class);","273","    expectedException.expectMessage(\"Organization with key 'fop' does not exist\");","274","","275","    underTest.submit(\"fop\", PROJECT_KEY, null, null, null \/* method will fail before parameter is used *\/);","276","  }","277","","278","  @Test","279","  public void fail_with_organizationKey_does_not_match_organization_of_specified_component() {","280","    userSession.logIn().setRoot();","281","    OrganizationDto organization = db.organizations().insert();","282","    ComponentDto project = db.components().insertPrivateProject(organization);","283","    mockSuccessfulPrepareSubmitCall();","284","","285","    underTest.submit(organization.getKey(), project.getDbKey(), null, project.name(), IOUtils.toInputStream(\"{binary}\"));","286","  }","287","","288","  @Test","289","  public void fail_if_component_is_not_a_project() {","290","    ComponentDto component = db.components().insertPublicPortfolio(db.getDefaultOrganization());","291","    userSession.logIn().addProjectPermission(SCAN_EXECUTION, component);","292","    mockSuccessfulPrepareSubmitCall();","293","","294","    expectedException.expect(BadRequestException.class);","295","    expectedException.expectMessage(format(\"Component '%s' is not a project\", component.getKey()));","296","","297","    underTest.submit(defaultOrganizationKey, component.getDbKey(), null, component.name(), IOUtils.toInputStream(\"{binary}\"));","298","  }","299","","300","  @Test","301","  public void fail_if_project_key_already_exists_as_module() {","302","    ComponentDto project = db.components().insertPrivateProject(db.getDefaultOrganization());","303","    ComponentDto module = db.components().insertComponent(newModuleDto(project));","304","    userSession.logIn().addProjectPermission(SCAN_EXECUTION, project);","305","    mockSuccessfulPrepareSubmitCall();","306","","307","    try {","308","      underTest.submit(defaultOrganizationKey, module.getDbKey(), null, module.name(), IOUtils.toInputStream(\"{binary}\"));","309","      fail();","310","    } catch (BadRequestException e) {","311","      assertThat(e.errors()).contains(","312","        format(\"The project '%s' is already defined in SonarQube but as a module of project '%s'. \" +","313","          \"If you really want to stop directly analysing project '%s', please first delete it from SonarQube and then relaunch the analysis of project '%s'.\",","314","          module.getKey(), project.getKey(), project.getKey(), module.getKey()));","315","    }","316","  }","317","","318","  @Test","319","  public void fail_with_forbidden_exception_when_no_scan_permission() {","320","    expectedException.expect(ForbiddenException.class);","321","","322","    underTest.submit(defaultOrganizationKey, PROJECT_KEY, null, PROJECT_NAME, IOUtils.toInputStream(\"{binary}\"));","323","  }","324","","325","  @Test","326","  public void fail_with_forbidden_exception_on_new_project_when_only_project_scan_permission() {","327","    userSession.addProjectPermission(SCAN_EXECUTION, ComponentTesting.newPrivateProjectDto(db.getDefaultOrganization(), PROJECT_UUID));","328","","329","    mockSuccessfulPrepareSubmitCall();","330","    when(componentUpdater.create(any(DbSession.class), any(NewComponent.class), eq(null))).thenReturn(new ComponentDto().setUuid(PROJECT_UUID).setDbKey(PROJECT_KEY));","331","","332","    expectedException.expect(ForbiddenException.class);","333","    underTest.submit(defaultOrganizationKey, PROJECT_KEY, null, PROJECT_NAME, IOUtils.toInputStream(\"{binary}\"));","334","  }","335",""],"delete":["79","  public ExpectedException thrown = ExpectedException.none();","102","  public void submit_fails_with_NotFoundException_if_organization_with_specified_key_does_not_exist() {","103","    thrown.expect(NotFoundException.class);","104","    thrown.expectMessage(\"Organization with key 'fop' does not exist\");","105","","106","    underTest.submit(\"fop\", PROJECT_KEY, null, null, null \/* method will fail before parameter is used *\/);","107","  }","108","","109","  @Test","110","  public void submit_fails_with_organizationKey_does_not_match_organization_of_specified_component() {","111","    userSession.logIn().setRoot();","112","    OrganizationDto organization = db.organizations().insert();","113","    ComponentDto project = db.components().insertPrivateProject(organization);","114","    mockSuccessfulPrepareSubmitCall();","115","","116","    underTest.submit(organization.getKey(), project.getDbKey(), null, project.name(), IOUtils.toInputStream(\"{binary}\"));","117","  }","118","","119","  @Test","130","      .thenReturn(true);","186","      .thenReturn(true);","217","      .thenReturn(true);","236","      .thenReturn(true);","268","  @Test","269","  public void fail_with_forbidden_exception_when_no_scan_permission() {","270","    thrown.expect(ForbiddenException.class);","271","","272","    underTest.submit(defaultOrganizationKey, PROJECT_KEY, null, PROJECT_NAME, IOUtils.toInputStream(\"{binary}\"));","273","  }","274","","275","  @Test","276","  public void fail_with_forbidden_exception_on_new_project_when_only_project_scan_permission() {","277","    userSession.addProjectPermission(SCAN_EXECUTION, ComponentTesting.newPrivateProjectDto(db.getDefaultOrganization(), PROJECT_UUID));","278","","279","    mockSuccessfulPrepareSubmitCall();","280","    when(componentUpdater.create(any(DbSession.class), any(NewComponent.class), eq(null))).thenReturn(new ComponentDto().setUuid(PROJECT_UUID).setDbKey(PROJECT_KEY));","281","","282","    thrown.expect(ForbiddenException.class);","283","    underTest.submit(defaultOrganizationKey, PROJECT_KEY, null, PROJECT_NAME, IOUtils.toInputStream(\"{binary}\"));","284","  }","285","","298","    thrown.expect(ForbiddenException.class);"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/step\/ValidateProjectStepTest.java":[{"add":[],"delete":["73","  public void fail_if_root_component_is_not_a_project_in_db() {","74","    reportReader.putComponent(ScannerReport.Component.newBuilder()","75","      .setRef(1)","76","      .setType(ComponentType.PROJECT)","77","      .setKey(PROJECT_KEY)","78","      .build());","79","    treeRootHolder.setRoot(ReportComponent.builder(Component.Type.PROJECT, 1).setUuid(\"ABCD\").setKey(PROJECT_KEY).build());","80","","81","    ComponentDto project = ComponentTesting.newView(dbTester.organizations().insert(), \"ABCD\").setDbKey(PROJECT_KEY);","82","    dbClient.componentDao().insert(dbTester.getSession(), project);","83","    dbTester.getSession().commit();","84","","85","    thrown.expect(MessageException.class);","86","    thrown.expectMessage(\"Validation of project failed:\\n\" +","87","      \"  o Component (uuid=ABCD, key=PROJECT_KEY) is not a project\");","88","","89","    underTest.execute();","90","  }","91","","92","  @Test","93","  public void fail_on_invalid_key() {","94","    String invalidProjectKey = \"Project\\\\Key\";","95","","96","    reportReader.putComponent(ScannerReport.Component.newBuilder()","97","      .setRef(1)","98","      .setType(ComponentType.PROJECT)","99","      .setKey(invalidProjectKey)","100","      .addChildRef(2)","101","      .build());","102","    reportReader.putComponent(ScannerReport.Component.newBuilder()","103","      .setRef(2)","104","      .setType(ComponentType.MODULE)","105","      .setKey(\"Module$Key\")","106","      .build());","107","    treeRootHolder.setRoot(ReportComponent.builder(Component.Type.PROJECT, 1).setUuid(\"ABCD\").setKey(invalidProjectKey).addChildren(","108","      ReportComponent.builder(Component.Type.MODULE, 2).setUuid(\"BCDE\").setKey(\"Module$Key\").build())","109","      .build());","110","","111","    thrown.expect(MessageException.class);","112","    thrown.expectMessage(\"Validation of project failed:\\n\" +","113","      \"  o \\\"Project\\\\Key\\\" is not a valid project or module key. Allowed characters are alphanumeric, '-', '_', '.' and ':', with at least one non-digit.\\n\" +","114","      \"  o \\\"Module$Key\\\" is not a valid project or module key. Allowed characters are alphanumeric, '-', '_', '.' and ':', with at least one non-digit\");","115","","116","    underTest.execute();","117","  }","118","","119","  @Test","185","  public void fail_if_project_key_already_exists_as_module() {","186","    String anotherProjectKey = \"ANOTHER_PROJECT_KEY\";","187","","188","    reportReader.putComponent(ScannerReport.Component.newBuilder()","189","      .setRef(1)","190","      .setType(ComponentType.PROJECT)","191","      .setKey(PROJECT_KEY)","192","      .addChildRef(2)","193","      .build());","194","    reportReader.putComponent(ScannerReport.Component.newBuilder()","195","      .setRef(2)","196","      .setType(ComponentType.MODULE)","197","      .setKey(MODULE_KEY)","198","      .build());","199","","200","    ComponentDto anotherProject = ComponentTesting.newPrivateProjectDto(dbTester.organizations().insert()).setDbKey(anotherProjectKey);","201","    dbClient.componentDao().insert(dbTester.getSession(), anotherProject);","202","    ComponentDto module = ComponentTesting.newModuleDto(\"ABCD\", anotherProject).setDbKey(PROJECT_KEY);","203","    dbClient.componentDao().insert(dbTester.getSession(), module);","204","    dbTester.getSession().commit();","205","","206","    treeRootHolder.setRoot(ReportComponent.builder(Component.Type.PROJECT, 1).setUuid(\"ABCD\").setKey(PROJECT_KEY).addChildren(","207","      ReportComponent.builder(Component.Type.MODULE, 2).setUuid(\"BCDE\").setKey(MODULE_KEY).build())","208","      .build());","209","","210","    thrown.expect(MessageException.class);","211","    thrown.expectMessage(\"Validation of project failed:\\n\" +","212","      \"  o Component (uuid=ABCD, key=PROJECT_KEY) is not a project\\n\" +","213","      \"  o The project \\\"\" + PROJECT_KEY + \"\\\" is already defined in SonarQube but as a module of project \\\"\" + anotherProjectKey + \"\\\". \" +","214","      \"If you really want to stop directly analysing project \\\"\" + anotherProjectKey + \"\\\", please first delete it from SonarQube and then relaunch the analysis of project \\\"\"","215","      + PROJECT_KEY + \"\\\".\");","216","","217","    underTest.execute();","218","  }","219","","220","  @Test"]}],"tests\/src\/test\/java\/org\/sonarqube\/tests\/analysis\/ScannerTest.java":[{"add":["335","  @Test","336","  public void display_explicit_message_when_using_existing_module_key_as_project_key() {","337","    String projectKey = \"com.sonarsource.it.samples:multi-modules-sample\";","338","    String moduleKey = \"com.sonarsource.it.samples:multi-modules-sample:module_a\";","339","    scan(\"shared\/xoo-multi-modules-sample\", \"sonar.projectKey\", projectKey);","340","","341","    BuildResult buildResult = scanQuietly(\"shared\/xoo-sample\", \"sonar.projectKey\", moduleKey);","342","    assertThat(buildResult.getLastStatus()).isEqualTo(1);","343","    assertThat(buildResult.getLogs())","344","      .contains(String.format(\"Component '%s' is not a project\", moduleKey))","345","      .contains(String.format(\"The project '%s' is already defined in SonarQube but as a module of project '%s'. If you really want to stop directly analysing project '%s', \" +","346","        \"please first delete it from SonarQube and then relaunch the analysis of project '%s'\", moduleKey, projectKey, projectKey, moduleKey));","347","  }","348",""],"delete":[]}]}},"cba808dd9122029150b7d966f4bb8faac53f2ef7":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/ActivityPanel.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/__snapshots__\/ActivityPanel-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/BranchOverview.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/BranchOverview-test.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/ActivityPanel.tsx":[{"add":["97","                analyses={[]}"],"delete":["71","  const parsedAnalyses = analyses.map(a => ({ ...a, date: parseDate(a.date) }));","98","                analyses={parsedAnalyses}"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/__snapshots__\/ActivityPanel-test.tsx.snap":[{"add":["40","            analyses={Array []}"],"delete":["40","            analyses={","41","              Array [","42","                Object {","43","                  \"date\": 2017-03-01T08:36:01.000Z,","44","                  \"events\": Array [","45","                    Object {","46","                      \"category\": \"QUALITY_GATE\",","47","                      \"description\": \"Lorem ipsum dolor sit amet\",","48","                      \"key\": \"E11\",","49","                      \"name\": \"Lorem ipsum\",","50","                      \"qualityGate\": Object {","51","                        \"failing\": Array [","52","                          Object {","53","                            \"branch\": \"master\",","54","                            \"key\": \"foo\",","55","                            \"name\": \"Foo\",","56","                          },","57","                          Object {","58","                            \"branch\": \"feature\/bar\",","59","                            \"key\": \"bar\",","60","                            \"name\": \"Bar\",","61","                          },","62","                        ],","63","                        \"status\": \"ERROR\",","64","                        \"stillFailing\": true,","65","                      },","66","                    },","67","                  ],","68","                  \"key\": \"foo\",","69","                  \"projectVersion\": \"1.0\",","70","                },","71","                Object {","72","                  \"date\": 2017-03-01T08:36:01.000Z,","73","                  \"events\": Array [],","74","                  \"key\": \"foo\",","75","                  \"projectVersion\": \"1.0\",","76","                },","77","              ]","78","            }"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/BranchOverview.tsx":[{"add":["27","import { getAllTimeMachineData } from '..\/..\/..\/api\/time-machine';","300","    return getAllTimeMachineData({"],"delete":["27","import { getTimeMachineData } from '..\/..\/..\/api\/time-machine';","300","    return getTimeMachineData({"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/BranchOverview-test.tsx":[{"add":["31","import { getAllTimeMachineData } from '..\/..\/..\/..\/api\/time-machine';","128","    getAllTimeMachineData: jest.fn().mockResolvedValue({","335","  expect(getAllTimeMachineData).toBeCalled();"],"delete":["31","import { getTimeMachineData } from '..\/..\/..\/..\/api\/time-machine';","128","    getTimeMachineData: jest.fn().mockResolvedValue({","335","  expect(getTimeMachineData).toBeCalled();"]}]}},"7630d660953cba8eee725a6a46c89dbf658bf1a0":{"changes":{"it\/it-tests\/src\/test\/java\/it\/customMeasure\/CustomMeasuresTest.java":"MODIFY","it\/it-tests\/src\/test\/java\/it\/measureHistory\/DifferentialPeriodsTest.java":"MODIFY"},"diff":{"it\/it-tests\/src\/test\/java\/it\/customMeasure\/CustomMeasuresTest.java":[{"add":["41","  private static final String PROJECT_KEY = \"sample\";","42",""],"delete":["41","  public static final String PROJECT_KEY = \"sample\";"]}],"it\/it-tests\/src\/test\/java\/it\/measureHistory\/DifferentialPeriodsTest.java":[{"add":["40","import static util.ItUtils.runProjectAnalysis;","46","  static final String MULTI_MODULE_PROJECT_KEY = \"com.sonarsource.it.samples:multi-modules-sample\";","79","    runProjectAnalysis(orchestrator, \"shared\/xoo-sample\", \"sonar.projectDate\", formatDate(addDays(new Date(), -60)));","84","    runProjectAnalysis(orchestrator, \"shared\/xoo-sample\", \"sonar.projectDate\", formatDate(addDays(new Date(), -20)));","95","    runProjectAnalysis(orchestrator, \"shared\/xoo-sample\");","118","    runProjectAnalysis(orchestrator, \"shared\/xoo-sample\", \"sonar.projectDate\", formatDate(addDays(new Date(), -15)));","123","    runProjectAnalysis(orchestrator, \"shared\/xoo-sample\");","126","    runProjectAnalysis(orchestrator, \"shared\/xoo-sample\");","147","    runProjectAnalysis(orchestrator, \"shared\/xoo-sample\");","154","    runProjectAnalysis(orchestrator, \"shared\/xoo-sample\");","160","  \/**","161","   * SONAR-7237","162","   *\/","163","  @Test","164","  public void ensure_differential_measures_are_computed_when_adding_new_component_after_period() throws Exception {","165","    orchestrator.getServer().provisionProject(MULTI_MODULE_PROJECT_KEY, MULTI_MODULE_PROJECT_KEY);","166","    setServerProperty(orchestrator, MULTI_MODULE_PROJECT_KEY, \"sonar.timemachine.period1\", \"30\");","167","","168","    \/\/ Execute an analysis 60 days ago without module b","169","    orchestrator.getServer().associateProjectToQualityProfile(MULTI_MODULE_PROJECT_KEY, \"xoo\", \"empty\");","170","    runProjectAnalysis(orchestrator, \"shared\/xoo-multi-modules-sample\",","171","      \"sonar.projectDate\", formatDate(addDays(new Date(), -60)),","172","      \"sonar.modules\", \"module_a\"","173","    );","174","","175","    \/\/ Second analysis, 20 days ago, issues will be created","176","    orchestrator.getServer().restoreProfile(FileLocation.ofClasspath(\"\/measureHistory\/one-issue-per-line-profile.xml\"));","177","    orchestrator.getServer().associateProjectToQualityProfile(MULTI_MODULE_PROJECT_KEY, \"xoo\", \"one-issue-per-line\");","178","    runProjectAnalysis(orchestrator, \"shared\/xoo-multi-modules-sample\",","179","      \"sonar.projectDate\", formatDate(addDays(new Date(), -20)),","180","      \"sonar.modules\", \"module_a,module_b\"","181","    );","182","","183","    \/\/ Variation on module b should exist","184","    Resource ncloc = orchestrator.getServer().getWsClient()","185","      .find(ResourceQuery.createForMetrics(MULTI_MODULE_PROJECT_KEY + \":module_b\", \"ncloc\").setIncludeTrends(true));","186","    List<Measure> measures = ncloc.getMeasures();","187","    assertThat(measures.get(0).getVariation1()).isEqualTo(24);","188","  }","189",""],"delete":["22","import com.sonar.orchestrator.build.SonarRunner;","41","import static util.ItUtils.projectDir;","79","    orchestrator.executeBuild(SonarRunner.create(projectDir(\"shared\/xoo-sample\"))","80","      .setProperty(\"sonar.projectDate\", formatDate(addDays(new Date(), -60))));","85","    orchestrator.executeBuild(SonarRunner.create(projectDir(\"shared\/xoo-sample\"))","86","        .setProperty(\"sonar.projectDate\", formatDate(addDays(new Date(), -20))));","97","    orchestrator.executeBuild(SonarRunner.create(projectDir(\"shared\/xoo-sample\")));","120","    orchestrator.executeBuild(SonarRunner.create(projectDir(\"shared\/xoo-sample\"))","121","      .setProperty(\"sonar.projectDate\", formatDate(addDays(new Date(), -15))));","126","    orchestrator.executeBuild(SonarRunner.create(projectDir(\"shared\/xoo-sample\")));","129","    orchestrator.executeBuild(SonarRunner.create(projectDir(\"shared\/xoo-sample\")));","150","    orchestrator.executeBuild(SonarRunner.create(projectDir(\"shared\/xoo-sample\")));","157","    orchestrator.executeBuild(SonarRunner.create(projectDir(\"shared\/xoo-sample\")));","158",""]}]}},"9c10956d8a65e1e3a851691d69cee367ac4e0869":{"changes":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/utils\/ZipUtils.java":"MODIFY"},"diff":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/utils\/ZipUtils.java":[{"add":["87","    Path targetDirNormalizedPath = toDir.toPath().normalize();","93","          unzipEntry(entry, zipStream, targetDirNormalizedPath);","103","  private static void unzipEntry(ZipEntry entry, ZipInputStream zipStream, Path targetDirNormalized) throws IOException {","104","    File to = targetDirNormalized.resolve(entry.getName()).toFile();","105","    verifyInsideTargetDirectory(entry, to.toPath(), targetDirNormalized);","248","  private static void verifyInsideTargetDirectory(ZipEntry entry, Path entryPath, Path targetDirNormalizedPath) {","249","    if (!entryPath.normalize().startsWith(targetDirNormalizedPath)) {"],"delete":["92","          unzipEntry(entry, zipStream, toDir);","102","  private static void unzipEntry(ZipEntry entry, ZipInputStream zipStream, File toDir) throws IOException {","103","    File to = new File(toDir, entry.getName());","104","    verifyInsideTargetDirectory(entry, to.toPath(), toDir.toPath());","247","  private static void verifyInsideTargetDirectory(ZipEntry entry, Path entryPath, Path targetDirPath) {","248","    if (!entryPath.normalize().startsWith(targetDirPath.normalize())) {"]}]}},"f8a905f962697cee341f9b1c266844091b8d3be7":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ws\/WebServiceEngine.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/ws\/WebServiceEngineTest.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/utils\/text\/JsonWriter.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ws\/WebServiceEngine.java":[{"add":["21","import com.google.common.base.Throwables;","143","    try (JsonWriter json = JsonWriter.of(new OutputStreamWriter(stream.output(), StandardCharsets.UTF_8))) {","147","    } catch (Exception e) {","148","      \/\/ Do not hide the potential exception raised in the try block.","149","      Throwables.propagate(e);"],"delete":["141","    JsonWriter json = JsonWriter.of(new OutputStreamWriter(stream.output(), StandardCharsets.UTF_8));","143","    try {","147","    } finally {","148","      \/\/ TODO if close() fails, the runtime exception should not hide the potential exception raised in the try block.","149","      json.close();"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/ws\/WebServiceEngineTest.java":[{"add":["30","import org.junit.rules.ExpectedException;","37","import org.sonar.api.utils.text.JsonWriter;","44","import static org.mockito.Matchers.any;","45","import static org.mockito.Mockito.doThrow;","54","  @Rule","55","  public ExpectedException expectedException = ExpectedException.none();","56","","310","  public void render_real_exception_when_failing_to_write_json_errors() {","311","    ValidatingRequest request = new TestRequest().setMethod(\"GET\").setPath(\"\/api\/system\/fail_to_write_errors\");","312","    DumbResponse response = new DumbResponse();","313","","314","    expectedException.expect(IllegalArgumentException.class);","315","    expectedException.expectMessage(\"Error!\");","316","    underTest.execute(request, response);","317","  }","318","","319","  @Test","348","        .setHandler((request, response) -> {","349","          try {","350","            response.stream().output().write(\"good\".getBytes());","351","          } catch (IOException e) {","352","            throw new IllegalStateException(e);","357","        .setHandler((request, response) -> {","358","          try {","359","            response.stream().output().write(\"pong\".getBytes());","360","          } catch (IOException e) {","361","            throw new IllegalStateException(e);","365","        .setHandler((request, response) -> {","366","          throw new IllegalStateException(\"Unexpected\");","369","        .setHandler((request, response) -> {","370","          throw new BadRequestException(\"bad.request.reason\", 0);","374","        .setHandler((request, response) -> {","375","          Errors errors = new Errors();","376","          for (int count = 0; count < Integer.valueOf(request.param(\"count\")); count++) {","377","            errors.add(Message.of(\"Bad request reason #\" + count));","379","          throw new BadRequestException(errors);","383","        .setHandler((request, response) -> {","384","          Errors errors = new Errors();","385","          for (int count = 0; count < Integer.valueOf(request.param(\"count\")); count++) {","386","            errors.add(Message.of(\"bad.request.reason\", count));","388","          throw new BadRequestException(errors);","389","        });","390","      createNewDefaultAction(newController, \"fail_to_write_errors\")","391","        .setHandler((request, response) -> {","392","          Errors errors = mock(Errors.class);","393","          \/\/ Try to simulate an error when generating JSON errors","394","          doThrow(new IllegalArgumentException(\"Error!\")).when(errors).writeJson(any(JsonWriter.class), any(I18n.class));","395","          throw new BadRequestException(errors);","398","        .setHandler((request, response) -> response.noContent());","401","        .setHandler((request, response) -> response.newJsonWriter().prop(\"unknown\", request.param(\"unknown\")));","408","      print.setHandler((request, response) -> {","409","        try {","410","          request.param(\"format\");","411","          IOUtils.write(","412","            request.mandatoryParam(\"message\") + \" by \" + request.param(\"author\", \"nobody\"), response.stream().output());","413","        } catch (IOException e) {","414","          throw new IllegalStateException(e);"],"delete":["31","import org.sonar.api.server.ws.Request;","32","import org.sonar.api.server.ws.RequestHandler;","333","        .setHandler(new RequestHandler() {","334","          @Override","335","          public void handle(Request request, Response response) {","336","            try {","337","              response.stream().output().write(\"good\".getBytes());","338","            } catch (IOException e) {","339","              throw new IllegalStateException(e);","340","            }","345","        .setHandler(new RequestHandler() {","346","          @Override","347","          public void handle(Request request, Response response) {","348","            try {","349","              response.stream().output().write(\"pong\".getBytes());","350","            } catch (IOException e) {","351","              throw new IllegalStateException(e);","352","            }","356","        .setHandler(new RequestHandler() {","357","          @Override","358","          public void handle(Request request, Response response) {","359","            throw new IllegalStateException(\"Unexpected\");","360","          }","363","        .setHandler(new RequestHandler() {","364","          @Override","365","          public void handle(Request request, Response response) {","366","            throw new BadRequestException(\"bad.request.reason\", 0);","367","          }","371","        .setHandler(new RequestHandler() {","372","          @Override","373","          public void handle(Request request, Response response) {","374","            Errors errors = new Errors();","375","            for (int count = 0; count < Integer.valueOf(request.param(\"count\")); count++) {","376","              errors.add(Message.of(\"Bad request reason #\" + count));","377","            }","378","            throw new BadRequestException(errors);","383","        .setHandler(new RequestHandler() {","384","          @Override","385","          public void handle(Request request, Response response) {","386","            Errors errors = new Errors();","387","            for (int count = 0; count < Integer.valueOf(request.param(\"count\")); count++) {","388","              errors.add(Message.of(\"bad.request.reason\", count));","389","            }","390","            throw new BadRequestException(errors);","394","        .setHandler(new RequestHandler() {","395","          @Override","396","          public void handle(Request request, Response response) {","397","            response.noContent();","398","          }","399","        });","402","        .setHandler(new RequestHandler() {","403","          @Override","404","          public void handle(Request request, Response response) {","405","            response.newJsonWriter().prop(\"unknown\", request.param(\"unknown\"));","406","          }","407","        });","414","      print.setHandler(new RequestHandler() {","415","        @Override","416","        public void handle(Request request, Response response) {","417","          try {","418","            request.param(\"format\");","419","            IOUtils.write(","420","              request.mandatoryParam(\"message\") + \" by \" + request.param(\"author\", \"nobody\"), response.stream().output());","421","          } catch (IOException e) {","422","            throw new IllegalStateException(e);","423","          }"]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/utils\/text\/JsonWriter.java":[{"add":["61","public class JsonWriter implements AutoCloseable {","381","  @Override"],"delete":["61","public class JsonWriter {"]}]}},"b8714087e3a988f0ea78554258d6d1a8a4670c74":{"changes":{"server\/sonar-server\/src\/main\/resources\/org\/sonar\/server\/usergroups\/ws\/users-example.json":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/usergroups\/ws\/UsersActionTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/resources\/org\/sonar\/server\/usergroups\/ws\/users-example.json":[{"add":["13","  \"p\":1,","14","  \"ps\":25,","15","  \"total\":2"],"delete":["5","      \"email\": \"admin@admin.com\",","11","      \"email\": \"george.orwell@1984.net\",","15","  \"paging\": {","16","    \"pageSize\": 100,","17","    \"total\": 2,","18","    \"pageIndex\": 1","19","  }"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/usergroups\/ws\/UsersActionTest.java":[{"add":["358","  @Test","359","  public void test_example() {","360","    GroupDto group = db.users().insertGroup();","361","    UserDto admin = db.users().insertUser(newUserDto().setLogin(\"admin\").setName(\"Administrator\"));","362","    db.users().insertMember(group, admin);","363","    db.organizations().addMember(db.getDefaultOrganization(), admin);","364","    UserDto george = db.users().insertUser(newUserDto().setLogin(\"george.orwell\").setName(\"George Orwell\"));","365","    db.users().insertMember(group, george);","366","    db.organizations().addMember(db.getDefaultOrganization(), george);","367","    loginAsAdminOnDefaultOrganization();","368","","369","    String result = newUsersRequest()","370","      .setParam(\"id\", group.getId().toString())","371","      .setParam(Param.SELECTED, SelectionMode.ALL.value())","372","      .execute()","373","      .getInput();","374","","375","    assertJson(result).isSimilarTo(ws.getDef().responseExampleAsString());","376","  }","377",""],"delete":[]}]}},"8b35108c4852be1e995d897bdafbeb846d06fa65":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ws\/WsUtils.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/ws\/WsUtilsTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ws\/WsUtils.java":[{"add":["36","import static java.nio.charset.StandardCharsets.UTF_8;","37","import static org.sonarqube.ws.MediaTypes.JSON;","38","import static org.sonarqube.ws.MediaTypes.PROTOBUF;","49","      if (request.getMediaType().equals(PROTOBUF)) {","50","        response.stream().setMediaType(PROTOBUF);","53","        response.stream().setMediaType(JSON);","54","        try (JsonWriter writer = JsonWriter.of(new OutputStreamWriter(output, UTF_8))) {","59","      throw new IllegalStateException(\"Error while writing protobuf message\", e);"],"delete":["25","import java.nio.charset.StandardCharsets;","35","import org.sonarqube.ws.MediaTypes;","36","import org.sonarqube.ws.MessageFormatter;","49","      if (request.getMediaType().equals(MediaTypes.PROTOBUF)) {","50","        response.stream().setMediaType(MediaTypes.PROTOBUF);","53","        response.stream().setMediaType(MediaTypes.JSON);","54","        try (JsonWriter writer = JsonWriter.of(new OutputStreamWriter(output, StandardCharsets.UTF_8))) {","59","      throw new IllegalStateException(format(\"Error while writing protobuf message %s\", MessageFormatter.print(msg)), e);"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/ws\/WsUtilsTest.java":[{"add":["71","  public void rethrow_error_as_ISE_when_error_writing_message() throws IOException {","79","    expectedException.expectMessage(\"Error while writing protobuf message\");"],"delete":["71","  public void log_message_when_error_writing_message() throws IOException {","79","    expectedException.expectMessage(\"Error while writing protobuf message org.sonarqube.ws.WsPermissions.Permission[name: \\\"permission-name\\\"]\");"]}]}},"2fc3a692b63d2fbb83bb35119481116aaa3932ea":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/security-hotspots\/components\/HotspotSnippetContainer.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/security-hotspots\/components\/HotspotSnippetContainerRenderer.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/security-hotspots\/components\/__tests__\/HotspotSnippetContainerRenderer-test.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/security-hotspots\/components\/HotspotSnippetContainer.tsx":[{"add":["124","      const { lastLine: previousLastLine } = this.state;","125","","127","        direction === 'down' ? this.checkLastLine(additionalLines, range.to) : previousLastLine;"],"delete":["125","        direction === 'down' ? this.checkLastLine(additionalLines, range.to) : undefined;","162","        lastLine={lastLine}"]}],"server\/sonar-web\/src\/main\/js\/apps\/security-hotspots\/components\/HotspotSnippetContainerRenderer.tsx":[{"add":[],"delete":["32","  lastLine?: number;"]}],"server\/sonar-web\/src\/main\/js\/apps\/security-hotspots\/components\/__tests__\/HotspotSnippetContainerRenderer-test.tsx":[{"add":[],"delete":["40","      lastLine={undefined}"]}]}},"2104453573fa15d1c5c3f8cee703d2cf3ccced55":{"changes":{"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/component\/ComponentMapper.xml":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/component\/ComponentDaoTest.java":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/component\/ComponentMapper.xml":[{"add":["342","        and not exists(","343","          select 1 from snapshots sp","344","          inner join project_branches pb on sp.component_uuid = pb.uuid","345","          where pb.project_uuid = p.uuid","346","        )"],"delete":[]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/component\/ComponentDaoTest.java":[{"add":["906","    ComponentDto provisionedProject = db.components()","907","      .insertPrivateProject(organization, p -> p.setDbKey(\"provisioned.project\").setName(\"Provisioned Project\"));","908","    ComponentDto provisionedPortfolio = db.components().insertPrivatePortfolio(organization);","909","","910","    SnapshotDto analyzedProject = db.components().insertProjectAndSnapshot(newPrivateProjectDto(organization));","911","    SnapshotDto analyzedDisabledProject = db.components().insertProjectAndSnapshot(newPrivateProjectDto(organization)","912","      .setEnabled(false));","913","    SnapshotDto analyzedPortfolio = db.components().insertProjectAndSnapshot(ComponentTesting.newView(organization));","914","","930","      .containsOnly(provisionedProject.uuid(), provisionedPortfolio.uuid());","950","  public void selectByQuery_onProvisionedOnly_filters_projects_with_analysis_on_branch() {","951","    Supplier<ComponentQuery.Builder> query = () -> ComponentQuery.builder()","952","      .setQualifiers(Qualifiers.PROJECT)","953","      .setOnProvisionedOnly(true);","954","","955","    \/\/ the project does not have any analysis","956","    OrganizationDto organization = db.organizations().insert();","957","    ComponentDto project = db.components().insertMainBranch(organization);","958","    assertThat(underTest.selectByQuery(dbSession, organization.getUuid(), query.get().build(), 0, 10))","959","      .extracting(ComponentDto::uuid)","960","      .containsOnly(project.uuid());","961","","962","    \/\/ the project does not have analysis of main branch but only","963","    \/\/ analysis of non-main branches","964","    ComponentDto branchWithoutAnalysis = db.components().insertProjectBranch(project);","965","    ComponentDto branchWithAnalysis = db.components().insertProjectBranch(project);","966","    db.components().insertSnapshot(branchWithAnalysis);","967","    assertThat(underTest.selectByQuery(dbSession, organization.getUuid(), query.get().build(), 0, 10))","968","      .isEmpty();","969","  }","970","","971","  @Test"],"delete":["905","    ComponentDto provisionedProject = db.components()","906","      .insertComponent(newPrivateProjectDto(organization).setDbKey(\"provisioned.project\").setName(\"Provisioned Project\"));","907","    ComponentDto provisionedView = db.components().insertView(organization);","908","    String projectUuid = db.components().insertProjectAndSnapshot(newPrivateProjectDto(organization)).getComponentUuid();","909","    String disabledProjectUuid = db.components().insertProjectAndSnapshot(newPrivateProjectDto(organization).setEnabled(false)).getComponentUuid();","910","    String viewUuid = db.components().insertProjectAndSnapshot(ComponentTesting.newView(organization)).getComponentUuid();","912","    Set<String> projectQualifiers = newHashSet(Qualifiers.PROJECT);","928","      .containsOnly(provisionedProject.uuid(), provisionedView.uuid());"]}]}},"497a386161f63e64d5e6dddc50e22f4fea801454":{"changes":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/settings\/_properties.html.erb":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/settings\/_properties.html.erb":[{"add":["180","      <% else","187","      <% end","198","  $j('#properties > form')"],"delete":["180","      <% else ","187","      <% end ","198","  $j(document)"]}]}},"73e1d5bb27a020277499fe0be5d059184c59c233":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/IssuesSourceViewer.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/IssuesSourceViewer.tsx":[{"add":["119","      const allMessagesEmpty =","120","        locations !== undefined && locations.every(location => !location.msg);","135","            displayLocationMarkers={!allMessagesEmpty}"],"delete":["119","","134","            displayLocationMarkers={false}"]}]}},"dca7417787b33677ce4387d332e4fa25cfa0c5be":{"changes":{"\/dev\/null":"DELETE","server\/sonar-webserver\/src\/main\/java\/org\/sonar\/server\/platform\/platformlevel\/PlatformLevel4.java":"MODIFY"},"diff":{"\/dev\/null":[{"add":[],"delete":[]}],"server\/sonar-webserver\/src\/main\/java\/org\/sonar\/server\/platform\/platformlevel\/PlatformLevel4.java":[{"add":[],"delete":["60","import org.sonar.server.debt.DebtModelPluginRepository;","61","import org.sonar.server.debt.DebtModelXMLExporter;","62","import org.sonar.server.debt.DebtRulesXMLImporter;","434","      \/\/ technical debt","435","      DebtModelPluginRepository.class,","436","      DebtModelXMLExporter.class,","437","      DebtRulesXMLImporter.class,","438",""]}]}},"361a052fbf628ad177980c883984e80102242bc1":{"changes":{"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/ce\/CeQueueMapper.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/ce\/DeleteIf.java":"ADD","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/ce\/CeQueueDaoTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/ce\/CeQueueMapper.xml":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/ce\/CeQueueDao.java":"MODIFY","server\/sonar-ce-common\/src\/main\/java\/org\/sonar\/ce\/queue\/CeQueueImpl.java":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/ce\/CeQueueMapper.java":[{"add":["76","  int deleteByUuid(@Param(\"uuid\") String uuid, @Nullable @Param(\"deleteIf\") DeleteIf deleteIf);"],"delete":["76","  void deleteByUuid(@Param(\"uuid\") String uuid);"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/ce\/DeleteIf.java":[{"add":[],"delete":[]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/ce\/CeQueueDaoTest.java":[{"add":["189","    insertPending(TASK_UUID_2, COMPONENT_UUID_1);","191","    int deletedCount = underTest.deleteByUuid(db.getSession(), \"UNKNOWN\");","192","    assertThat(deletedCount).isEqualTo(0);","195","    deletedCount = underTest.deleteByUuid(db.getSession(), TASK_UUID_1);","196","    assertThat(deletedCount).isEqualTo(1);","197","    assertThat(underTest.selectByUuid(db.getSession(), TASK_UUID_1)).isEmpty();","198","","199","    deletedCount = underTest.deleteByUuid(db.getSession(), TASK_UUID_2, null);","200","    assertThat(deletedCount).isEqualTo(1);","201","    assertThat(underTest.selectByUuid(db.getSession(), TASK_UUID_2)).isEmpty();","202","  }","203","","204","  @Test","205","  public void test_delete_with_expected_status() {","206","    insertPending(TASK_UUID_1, COMPONENT_UUID_1);","207","    insertInProgress(TASK_UUID_2, COMPONENT_UUID_1);","208","","209","    int deletedCount = underTest.deleteByUuid(db.getSession(), \"UNKNOWN\", null);","210","    assertThat(deletedCount).isEqualTo(0);","211","    assertThat(underTest.selectByUuid(db.getSession(), TASK_UUID_1)).isPresent();","212","","213","    deletedCount = underTest.deleteByUuid(db.getSession(), TASK_UUID_1, new DeleteIf(IN_PROGRESS));","214","    assertThat(deletedCount).isEqualTo(0);","215","    assertThat(underTest.selectByUuid(db.getSession(), TASK_UUID_1)).isPresent();","216","","217","    deletedCount = underTest.deleteByUuid(db.getSession(), TASK_UUID_2, new DeleteIf(PENDING));","218","    assertThat(deletedCount).isEqualTo(0);","219","    assertThat(underTest.selectByUuid(db.getSession(), TASK_UUID_2)).isPresent();","220","","221","    deletedCount = underTest.deleteByUuid(db.getSession(), TASK_UUID_1, new DeleteIf(PENDING));","222","    assertThat(deletedCount).isEqualTo(1);","223","    assertThat(underTest.selectByUuid(db.getSession(), TASK_UUID_1)).isEmpty();","224","","225","    deletedCount = underTest.deleteByUuid(db.getSession(), TASK_UUID_2, new DeleteIf(IN_PROGRESS));","226","    assertThat(deletedCount).isEqualTo(1);","227","    assertThat(underTest.selectByUuid(db.getSession(), TASK_UUID_2)).isEmpty();","584","  private CeQueueDto insertInProgress(String uuid, String componentUuid) {","585","    CeQueueDto ceQueueDto = insertPending(uuid);","586","    CeQueueTesting.makeInProgress(db.getSession(), \"workerUuid\", System2.INSTANCE.now(), ceQueueDto);","587","    return underTest.selectByUuid(db.getSession(), uuid).get();","588","  }","589",""],"delete":["190","    underTest.deleteByUuid(db.getSession(), \"UNKNOWN\");","193","    underTest.deleteByUuid(db.getSession(), TASK_UUID_1);","194","    assertThat(underTest.selectByUuid(db.getSession(), TASK_UUID_1).isPresent()).isFalse();"]}],"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/ce\/CeQueueMapper.xml":[{"add":["257","      <if test=\"deleteIf != null\">","258","        and status = #{deleteIf.expectedStatus,jdbcType=VARCHAR}","259","      <\/if>"],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/ce\/CeQueueDao.java":[{"add":["116","  public int deleteByUuid(DbSession session, String uuid) {","117","    return deleteByUuid(session, uuid, null);","118","  }","119","","120","  public int deleteByUuid(DbSession session, String uuid, @Nullable DeleteIf deleteIf) {","121","    return mapper(session).deleteByUuid(uuid, deleteIf);"],"delete":["116","  public void deleteByUuid(DbSession session, String uuid) {","117","    mapper(session).deleteByUuid(uuid);"]}],"server\/sonar-ce-common\/src\/main\/java\/org\/sonar\/ce\/queue\/CeQueueImpl.java":[{"add":["36","import org.sonar.api.utils.log.Loggers;","44","import org.sonar.db.ce.DeleteIf;","200","  protected void remove(DbSession dbSession, CeQueueDto queueDto, CeActivityDto activityDto) {","201","    String taskUuid = queueDto.getUuid();","202","    CeQueueDto.Status expectedQueueDtoStatus = queueDto.getStatus();","203","","204","    dbClient.ceActivityDao().insert(dbSession, activityDto);","205","    dbClient.ceTaskInputDao().deleteByUuids(dbSession, singleton(taskUuid));","206","    int deletedTasks = dbClient.ceQueueDao().deleteByUuid(dbSession, taskUuid, new DeleteIf(expectedQueueDtoStatus));","207","","208","    if (deletedTasks == 1) {","209","      dbSession.commit();","210","    } else {","211","      Loggers.get(CeQueueImpl.class).debug(","212","        \"Remove rolled back because task in queue with uuid {} and status {} could not be deleted\",","213","        taskUuid, expectedQueueDtoStatus);","214","      dbSession.rollback();","215","    }","216","  }","217",""],"delete":["247","  protected void remove(DbSession dbSession, CeQueueDto queueDto, CeActivityDto activityDto) {","248","    dbClient.ceActivityDao().insert(dbSession, activityDto);","249","    dbClient.ceQueueDao().deleteByUuid(dbSession, queueDto.getUuid());","250","    dbClient.ceTaskInputDao().deleteByUuids(dbSession, singleton(queueDto.getUuid()));","251","    dbSession.commit();","252","  }","253",""]}]}},"5c4b668ed14f307d22df715bcaf323cf27ee2c21":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/issue\/IssueView.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/Issue.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/components\/IssueActionsBar.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/components\/IssueTags.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/components\/IssueTransition.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/actions.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/components\/IssueCommentAction.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/issue\/IssueView.js":[{"add":["62","    updateIssue(this.props.onChange, this.props.onFail, editIssueComment({ comment, text }));","66","    updateIssue(this.props.onChange, this.props.onFail, deleteIssueComment({ comment }));"],"delete":["62","    updateIssue(this.props.onChange, editIssueComment({ comment, text }));","66","    updateIssue(this.props.onChange, deleteIssueComment({ comment }));"]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/Issue.js":[{"add":["140","      updateIssue(","141","        this.props.onChange,","142","        this.handleFail,","143","        setIssueAssignee({ issue: issue.key, assignee: login })","144","      );"],"delete":["140","      updateIssue(this.props.onChange, setIssueAssignee({ issue: issue.key, assignee: login }));"]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/components\/IssueActionsBar.js":[{"add":["68","        this.props.onFail,","120","                    onFail={this.props.onFail}","146","                    onFail={this.props.onFail}"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/components\/IssueTags.js":[{"add":["50","      this.props.onFail,"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/components\/IssueTransition.js":[{"add":["33","  onFail: Error => void,","43","      this.props.onFail,"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/actions.js":[{"add":["25","  onFail: Error => void,"],"delete":["20","import { onFail } from '..\/..\/store\/rootActions';","31",""]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/components\/IssueCommentAction.js":[{"add":["33","  onFail: Error => void,","41","    updateIssue(","42","      this.props.onChange,","43","      this.props.onFail,","44","      addIssueComment({ issue: this.props.issueKey, text })","45","    );"],"delete":["40","    updateIssue(this.props.onChange, addIssueComment({ issue: this.props.issueKey, text }));"]}]}},"7b64b5d27664c32bcca218cfbd2f89eb2dff845f":{"changes":{"server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/taskprocessor\/CeProcessingSchedulerImpl.java":"MODIFY"},"diff":{"server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/taskprocessor\/CeProcessingSchedulerImpl.java":[{"add":["105","    private volatile boolean keepRunning = true;","117","      if (keepRunning) {","118","        if (result == null) {","119","          chainWithEnabledTaskDelay();","120","        } else {","121","          switch (result) {","122","            case DISABLED:","123","              chainWithDisabledTaskDelay();","124","              break;","125","            case NO_TASK:","126","              chainWithEnabledTaskDelay();","127","              break;","128","            case TASK_PROCESSED:","129","            default:","130","              chainWithoutDelay();","131","          }","140","      } else if (keepRunning) {","146","      workerFuture = executorService.submit(worker);","151","      workerFuture = executorService.schedule(worker, delayBetweenEnabledTasks, timeUnit);","156","      workerFuture = executorService.schedule(worker, DELAY_BETWEEN_DISABLED_TASKS, timeUnit);","161","      if (workerFuture != null) {","167","      keepRunning = false;"],"delete":["26","import java.util.concurrent.atomic.AtomicBoolean;","106","    private final AtomicBoolean keepRunning = new AtomicBoolean(true);","118","      if (result == null) {","119","        chainWithEnabledTaskDelay();","120","      } else {","121","        switch (result) {","122","          case DISABLED:","123","            chainWithDisabledTaskDelay();","124","            break;","125","          case NO_TASK:","126","            chainWithEnabledTaskDelay();","127","            break;","128","          case TASK_PROCESSED:","129","          default:","130","            chainWithoutDelay();","139","      } else {","145","      if (keepRunning()) {","146","        workerFuture = executorService.submit(worker);","147","      }","152","      if (keepRunning()) {","153","        workerFuture = executorService.schedule(worker, delayBetweenEnabledTasks, timeUnit);","154","      }","159","      if (keepRunning()) {","160","        workerFuture = executorService.schedule(worker, DELAY_BETWEEN_DISABLED_TASKS, timeUnit);","161","      }","166","      if (workerFuture != null && keepRunning()) {","171","    private boolean keepRunning() {","172","      return keepRunning.get();","173","    }","174","","176","      this.keepRunning.set(false);"]}]}},"38d1fb46dece0d6c767108f1c02759a4df6216bf":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/__tests__\/App-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/IssuesList.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/Issue.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/IssueView.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/ListItem.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/Issue.css":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/App.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/__tests__\/App-test.tsx":[{"add":["22","import {","23","  mockCurrentUser,","24","  mockRouter,","25","  mockIssue,","26","  mockLocation","27","} from '..\/..\/..\/..\/helpers\/testMocks';","55","  instance.handleIssueCheck('foo');","56","  instance.handleIssueCheck('bar');","118","it('should fetch issues for component', async () => {","119","  const wrapper = shallowRender({","120","    fetchIssues: fetchIssuesMockFactory(),","121","    location: mockLocation({","122","      query: { open: '0' }","123","    })","124","  });","125","  const instance = wrapper.instance();","126","  await waitAndUpdate(wrapper);","127","  expect(wrapper.state('issues')).toHaveLength(2);","128","","129","  await instance.fetchIssuesForComponent('', 0, 30);","130","  expect(wrapper.state('issues')).toHaveLength(6);","131","});","132","","133","it('should fetch issues until defined', async () => {","134","  const mockDone = (_lastIssue: T.Issue, paging: T.Paging) =>","135","    paging.total <= paging.pageIndex * paging.pageSize;","136","","137","  const wrapper = shallowRender({","138","    fetchIssues: fetchIssuesMockFactory(),","139","    location: mockLocation({","140","      query: { open: '0' }","141","    })","142","  });","143","  const instance = wrapper.instance();","144","  await waitAndUpdate(wrapper);","145","","146","  const result = await instance.fetchIssuesUntil(1, mockDone);","147","  expect(result.issues).toHaveLength(6);","148","  expect(result.paging.pageIndex).toBe(3);","149","});","150","","151","function fetchIssuesMockFactory(keyCount = 0, lineCount = 1) {","152","  return jest.fn().mockImplementation(({ p }: any) =>","153","    Promise.resolve({","154","      components: [referencedComponent],","155","      effortTotal: 1,","156","      facets: FACETS,","157","      issues: [","158","        mockIssue(false, {","159","          key: '' + keyCount++,","160","          textRange: {","161","            startLine: lineCount++,","162","            endLine: lineCount,","163","            startOffset: 0,","164","            endOffset: 15","165","          }","166","        }),","167","        mockIssue(false, {","168","          key: '' + keyCount++,","169","          textRange: {","170","            startLine: lineCount++,","171","            endLine: lineCount,","172","            startOffset: 0,","173","            endOffset: 15","174","          }","175","        })","176","      ],","177","      languages: [],","178","      paging: { pageIndex: p || 1, pageSize: 2, total: 6 },","179","      rules: [],","180","      users: []","181","    })","182","  );","183","}","184",""],"delete":["22","import { mockCurrentUser, mockRouter } from '..\/..\/..\/..\/helpers\/testMocks';","34","const eventNoShiftKey = { shiftKey: false } as MouseEvent;","35","const eventWithShiftKey = { shiftKey: true } as MouseEvent;","36","","47","it('should be able to check\/uncheck a group of issues with the Shift key', async () => {","48","  const wrapper = shallowRender();","49","  await waitAndUpdate(wrapper);","50","  expect(wrapper.state().issues.length).toBe(4);","51","","52","  const instance = wrapper.instance();","53","  instance.handleIssueCheck('foo', eventNoShiftKey);","54","  expect(wrapper.state().checked.length).toBe(1);","55","","56","  instance.handleIssueCheck('fourth', eventWithShiftKey);","57","  expect(wrapper.state().checked.length).toBe(4);","58","","59","  instance.handleIssueCheck('third', eventNoShiftKey);","60","  expect(wrapper.state().checked.length).toBe(3);","61","","62","  instance.handleIssueCheck('foo', eventWithShiftKey);","63","  expect(wrapper.state().checked.length).toBe(1);","64","});","65","","66","it('should avoid non-existing keys', async () => {","67","  const wrapper = shallowRender();","68","  await waitAndUpdate(wrapper);","69","  expect(wrapper.state().issues.length).toBe(4);","70","","71","  const instance = wrapper.instance();","72","  instance.handleIssueCheck('foo', eventNoShiftKey);","73","  expect(wrapper.state().checked.length).toBe(1);","74","","75","  instance.handleIssueCheck('non-existing-key', eventWithShiftKey);","76","  expect(wrapper.state().checked.length).toBe(1);","77","});","78","","85","  instance.handleIssueCheck('foo', eventNoShiftKey);","86","  instance.handleIssueCheck('bar', eventNoShiftKey);"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/IssuesList.tsx":[{"add":["30","  onIssueCheck: ((issueKey: string) => void) | undefined;"],"delete":["30","  onIssueCheck: ((issueKey: string, event: { shiftKey?: boolean }) => void) | undefined;"]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/Issue.tsx":[{"add":["33","  onCheck?: (issue: string) => void;","99","    key('space', 'issues', () => {","101","        this.props.onCheck(this.props.issue.key);"],"delete":["33","  onCheck?: (issue: string, event: { shiftKey?: boolean }) => void;","99","    key('space', 'issues', (event: KeyboardEvent) => {","101","        this.props.onCheck(this.props.issue.key, event);"]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/IssueView.tsx":[{"add":["21","import { updateIssue } from '.\/actions';","25","import Checkbox from '..\/controls\/Checkbox';","37","  onCheck?: (issue: string) => void;","45","  handleCheck = (_checked: boolean) => {","47","      this.props.onCheck(this.props.issue.key);","113","          <>","114","            <Checkbox","115","              checked={this.props.checked || false}","116","              className=\"issue-checkbox-container\"","117","              onCheck={this.handleCheck}","119","          <\/>"],"delete":["24","import { updateIssue } from '.\/actions';","36","  onCheck?: (issue: string, event: { shiftKey?: boolean }) => void;","44","  handleCheck = (event: React.MouseEvent) => {","45","    event.preventDefault();","47","      this.props.onCheck(this.props.issue.key, event);","113","          <a className=\"js-toggle issue-checkbox-container\" href=\"#\" onClick={this.handleCheck}>","114","            <i","115","              className={classNames('issue-checkbox', 'icon-checkbox', {","116","                'icon-checkbox-checked': this.props.checked","117","              })}","119","          <\/a>"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/ListItem.tsx":[{"add":["30","  onCheck: ((issueKey: string) => void) | undefined;"],"delete":["30","  onCheck: ((issueKey: string, event: { shiftKey?: boolean }) => void) | undefined;"]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/Issue.css":[{"add":["209","  display: flex;","210","  justify-content: center;","211","  align-items: center;"],"delete":["209","  display: block;","226",".issue-checkbox {","227","  position: absolute;","228","  top: 50%;","229","  left: 50%;","230","  margin: -8px 0 0 -8px;","231","}","232",""]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/App.tsx":[{"add":["23","import { keyBy, omit, without } from 'lodash';","494","    done: (lastIssue: T.Issue, paging: T.Paging) => boolean","496","    const recursiveFetch = (","497","      p: number,","498","      issues: T.Issue[]","499","    ): Promise<{ issues: T.Issue[]; paging: T.Paging }> => {","500","      return this.fetchIssuesPage(p)","501","        .then(response => {","502","          return {","503","            issues: [...issues, ...response.issues],","504","            paging: response.paging","505","          };","506","        })","507","        .then(({ issues, paging }) => {","508","          return done(issues[issues.length - 1], paging)","509","            ? { issues, paging }","510","            : recursiveFetch(p + 1, issues);","511","        });","512","    };","514","    return recursiveFetch(p, []);","554","    const done = (lastIssue: T.Issue, paging: T.Paging) => {","564","    if (done(issues[issues.length - 1], paging)) {","744","  handleIssueCheck = (issue: string) => {","745","    this.setState(state => ({","746","      checkAll: false,","747","      checked: state.checked.includes(issue)","748","        ? without(state.checked, issue)","749","        : [...state.checked, issue]","750","    }));"],"delete":["23","import { keyBy, omit, union, without } from 'lodash';","118","  lastChecked?: string;","495","    done: (issues: T.Issue[], paging: T.Paging) => boolean","497","    return this.fetchIssuesPage(p).then(response => {","498","      const { issues, paging } = response;","500","      return done(issues, paging)","501","        ? { issues, paging }","502","        : this.fetchIssuesUntil(p + 1, done).then(nextResponse => {","503","            return {","504","              issues: [...issues, ...nextResponse.issues],","505","              paging: nextResponse.paging","506","            };","507","          });","508","    });","548","    const done = (issues: T.Issue[], paging: T.Paging) => {","552","      const lastIssue = issues[issues.length - 1];","559","    if (done(issues, paging)) {","739","  handleIssueCheck = (issue: string, event: { shiftKey?: boolean }) => {","740","    \/\/ Selecting multiple issues with shift+click","741","    const { lastChecked } = this.state;","742","    if (event.shiftKey && lastChecked) {","743","      this.setState(state => {","744","        const issueKeys = state.issues.map(issue => issue.key);","745","        const currentIssueIndex = issueKeys.indexOf(issue);","746","        const lastSelectedIndex = issueKeys.indexOf(lastChecked);","747","        const shouldCheck = state.checked.includes(lastChecked);","748","        let { checked } = state;","749","        if (currentIssueIndex < 0) {","750","          return null;","751","        }","752","        const start = Math.min(currentIssueIndex, lastSelectedIndex);","753","        const end = Math.max(currentIssueIndex, lastSelectedIndex);","754","        for (let i = start; i < end + 1; i++) {","755","          checked = shouldCheck","756","            ? union(checked, [state.issues[i].key])","757","            : without(checked, state.issues[i].key);","758","        }","759","        return { checkAll: false, checked };","760","      });","761","    } else {","762","      this.setState(state => ({","763","        checkAll: false,","764","        lastChecked: issue,","765","        checked: state.checked.includes(issue)","766","          ? without(state.checked, issue)","767","          : [...state.checked, issue]","768","      }));","769","    }"]}]}},"f457ba93734048ec9b7e2e980d18827d1d2a507f":{"changes":{"server\/sonar-web\/src\/main\/js\/main\/nav\/global\/search-view.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/main\/nav\/global\/search-view.js":[{"add":["200","      \/\/ if the input value has changed since we sent the request,","201","      \/\/ just ignore the output, because another request already sent","202","      if (q !== that._bufferedValue) {","203","        return;","204","      }","205",""],"delete":["144","    if (this.searchRequest != null && this.searchRequest.abort != null) {","145","      this.searchRequest.abort();","146","    }"]}]}},"721de262d732560c98256e7935017f6d5dd142a3":{"changes":{"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/webhook\/ws\/WebhookSupportTest.java":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/webhook\/ws\/WebhookSupport.java":"MODIFY"},"diff":{"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/webhook\/ws\/WebhookSupportTest.java":[{"add":["80","      .hasMessage(\"Invalid URL: loopback and wildcard addresses are not allowed for webhooks.\");"],"delete":["80","      .hasMessage(\"Invalid URL\");"]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/webhook\/ws\/WebhookSupport.java":[{"add":["62","        throw new IllegalArgumentException(\"Invalid URL: loopback and wildcard addresses are not allowed for webhooks.\");"],"delete":["62","        throw new IllegalArgumentException(\"Invalid URL\");"]}]}},"18af892e0df11889eb699c4e562e6bbd979b559f":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/components\/MeasureContent.js":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/measure\/ws\/ComponentTreeSortTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/measure\/ws\/ComponentTreeSort.java":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/components\/MeasureContent.js":[{"add":["135","      opts.s = isDiff ? 'metricPeriod' : 'metric';"],"delete":["135","      opts.s = isDiff ? 'metricPeriod,name' : 'metric,name';"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/measure\/ws\/ComponentTreeSortTest.java":[{"add":["140","  public void sort_by_name_ascending_in_case_of_equality() {","141","    components = newArrayList(","142","      newComponentWithoutSnapshotId(\"PROJECT 12\", Qualifiers.PROJECT, \"PROJECT_PATH_1\"),","143","      newComponentWithoutSnapshotId(\"PROJECT 11\", Qualifiers.PROJECT, \"PROJECT_PATH_1\"),","144","      newComponentWithoutSnapshotId(\"PROJECT 0\", Qualifiers.PROJECT, \"PROJECT_PATH_2\"));","145","","146","    ComponentTreeWsRequest wsRequest = newRequest(newArrayList(PATH_SORT), false, null);","147","","148","    List<ComponentDto> result = sortComponents(wsRequest);","149","","150","    assertThat(result).extracting(\"name\").containsExactly(\"PROJECT 0\", \"PROJECT 11\", \"PROJECT 12\");","151","  }","152","","153","  @Test"],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/measure\/ws\/ComponentTreeSort.java":[{"add":["88","    primaryOrdering = primaryOrdering.compound(componentNameOrdering(true));"],"delete":[]}]}},"4882ea80f8b10706fef9d6b9a325f8820dde75e3":{"changes":{"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/BuildComponentTreeStepTest.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/component\/ComponentTreeBuilder.java":"MODIFY"},"diff":{"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/BuildComponentTreeStepTest.java":[{"add":["42","import org.sonar.db.component.BranchType;","83","  private static final String REPORT_UNCHANGED_FILE_PATH = \"src\/main\/File3.java\";","138","  public void verify_tree_is_correctly_built_in_prs() {","139","    setAnalysisMetadataHolder(true);","140","    reportReader.putComponent(component(ROOT_REF, PROJECT, REPORT_PROJECT_KEY, FILE_1_REF, FILE_2_REF, FILE_3_REF, UNCHANGED_FILE_REF));","141","    reportReader.putComponent(componentWithPath(FILE_1_REF, FILE, REPORT_FILE_PATH_1));","142","    reportReader.putComponent(componentWithPath(FILE_2_REF, FILE, REPORT_FILE_PATH_2));","143","    reportReader.putComponent(componentWithPath(FILE_3_REF, FILE, REPORT_FILE_PATH_3));","144","    reportReader.putComponent(unchangedComponentWithPath(UNCHANGED_FILE_REF, FILE, REPORT_UNCHANGED_FILE_PATH));","145","","146","    TestComputationStepContext context = new TestComputationStepContext();","147","    underTest.execute(context);","148","","149","    \/\/ modified root","150","    Component mRoot = treeRootHolder.getRoot();","151","    verifyComponent(mRoot, Component.Type.PROJECT, ROOT_REF, 1);","152","","153","    Component mDir = mRoot.getChildren().get(0);","154","    assertThat(mDir.getName()).isEqualTo(\"src\/main\/java\");","155","    verifyComponent(mDir, Component.Type.DIRECTORY, null, 2);","156","","157","    Component mDir1 = mDir.getChildren().get(0);","158","    assertThat(mDir1.getName()).isEqualTo(\"src\/main\/java\/dir1\");","159","    verifyComponent(mDir1, Component.Type.DIRECTORY, null, 1);","160","    verifyComponent(mDir1.getChildren().get(0), Component.Type.FILE, FILE_1_REF, 0);","161","","162","    Component mDir2 = mDir.getChildren().get(1);","163","    assertThat(mDir2.getName()).isEqualTo(\"src\/main\/java\/dir2\");","164","    verifyComponent(mDir2, Component.Type.DIRECTORY, null, 2);","165","    verifyComponent(mDir2.getChildren().get(0), Component.Type.FILE, FILE_2_REF, 0);","166","    verifyComponent(mDir2.getChildren().get(1), Component.Type.FILE, FILE_3_REF, 0);","167","","168","    \/\/ root","169","    Component root = treeRootHolder.getReportTreeRoot();","170","    verifyComponent(root, Component.Type.PROJECT, ROOT_REF, 1);","171","","172","    Component dir = root.getChildren().get(0);","173","    assertThat(dir.getName()).isEqualTo(\"src\/main\");","174","    verifyComponent(dir, Component.Type.DIRECTORY, null, 2);","175","","176","    Component dir1 = dir.getChildren().get(0);","177","    assertThat(dir1.getName()).isEqualTo(\"src\/main\/java\");","178","    verifyComponent(dir1, Component.Type.DIRECTORY, null, 2);","179","    verifyComponent(dir1.getChildren().get(0), Component.Type.DIRECTORY, null, 1);","180","    verifyComponent(dir1.getChildren().get(1), Component.Type.DIRECTORY, null, 2);","181","","182","    Component dir2 = dir1.getChildren().get(0);","183","    assertThat(dir2.getName()).isEqualTo(\"src\/main\/java\/dir1\");","184","    verifyComponent(dir2, Component.Type.DIRECTORY, null, 1);","185","    verifyComponent(dir2.getChildren().get(0), Component.Type.FILE, FILE_1_REF, 0);","186","","187","    Component dir3 = dir1.getChildren().get(1);","188","    assertThat(dir3.getName()).isEqualTo(\"src\/main\/java\/dir2\");","189","    verifyComponent(dir3, Component.Type.DIRECTORY, null, 2);","190","    verifyComponent(dir3.getChildren().get(0), Component.Type.FILE, FILE_2_REF, 0);","191","    verifyComponent(dir3.getChildren().get(1), Component.Type.FILE, FILE_3_REF, 0);","192","","193","    context.getStatistics().assertValue(\"components\", 7);","194","  }","195","","196","  @Test","485","    return component(componentRef, componentType, key, FileStatus.CHANGED, null, children);","486","  }","487","","488","  private static ScannerReport.Component unchangedComponentWithPath(int componentRef, ComponentType componentType, String path, int... children) {","489","    return component(componentRef, componentType, REPORT_PROJECT_KEY + \":\" + path, FileStatus.SAME, path, children);","493","    return component(componentRef, componentType, REPORT_PROJECT_KEY + \":\" + path, FileStatus.CHANGED, path, children);","496","  private static ScannerReport.Component component(int componentRef, ComponentType componentType, String key, FileStatus status, @Nullable String path, int... children) {","500","      .setStatus(status)","553","    setAnalysisMetadataHolder(false);","554","  }","555","","556","  private void setAnalysisMetadataHolder(boolean isPr) {","557","    Branch branch = isPr ? new PrBranch() : new DefaultBranchImpl();","560","      .setBranch(branch)","573","  private static class PrBranch extends DefaultBranchImpl {","574","    @Override","575","    public BranchType getType() {","576","      return BranchType.PULL_REQUEST;","577","    }","578","  }"],"delete":["76","  private static final String REPORT_MODULE_KEY = \"MODULE_KEY\";","83","  private static final String REPORT_LEAFLESS_MODULE_KEY = \"LEAFLESS_MODULE_KEY\";","84","  private static final String REPORT_LEAFLESS_DIR_PATH = \"src\/main\/java\/leafless\";","85","  private static final String REPORT_UNCHANGED_FILE_PATH = \"src\/main\/java\/leafless\/File3.java\";","428","    return component(componentRef, componentType, key, null, children);","432","    return component(componentRef, componentType, REPORT_PROJECT_KEY + \":\" + path, path, children);","435","  private static ScannerReport.Component component(int componentRef, ComponentType componentType, String key, @Nullable String path, int... children) {","439","      .setStatus(FileStatus.UNAVAILABLE)","494","      .setBranch(new DefaultBranchImpl())"]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/component\/ComponentTreeBuilder.java":[{"add":["43","import static org.sonar.scanner.protocol.output.ScannerReport.Component.ComponentType.FILE;","98","    checkArgument(rootComponent.getType() == ScannerReport.Component.ComponentType.PROJECT, \"Expected root component of type 'PROJECT'\");","101","    rootComponent.getChildRefList().stream()","110","      checkArgument(component.getType() == FILE, \"Unsupported component type '%s'\", component.getType());","111","      addFile(root, component);","117","    checkArgument(!StringUtils.isEmpty(file.getProjectRelativePath()), \"Files should have a project relative path: \" + file);","132","      if (component.getType() == FILE) {","215","    return buildChangedComponentTree(project, \"\");","218","  @Nullable","219","  private static Component buildChangedComponentTree(Component component, String parentPath) {","220","    switch (component.getType()) {","221","      case PROJECT:","222","        return buildChangedProject(component);","223","      case DIRECTORY:","224","        return buildChangedDirectory(component, parentPath);","225","      case FILE:","226","        return buildChangedFile(component);","227","      default:","228","        throw new IllegalArgumentException(format(\"Unsupported component type '%s'\", component.getType()));","229","    }","230","  }","231","","232","  private static Component buildChangedProject(Component component) {","233","    return changedComponentBuilder(component, \"\", \"\")","234","      .setProjectAttributes(new ProjectAttributes(component.getProjectAttributes()))","235","      .addChildren(buildChangedComponentChildren(component))","236","      .build();","237","  }","238","","239","  @Nullable","240","  private static Component buildChangedDirectory(Component component, String parentPath) {","241","    List<Component> children = buildChangedComponentChildren(component);","242","    if (children.isEmpty()) {","243","      return null;","244","    }","245","","246","    if (children.size() == 1 && children.get(0).getType() == Component.Type.DIRECTORY) {","247","      Component child = children.get(0);","248","      return changedComponentBuilder(child, parentPath, child.getName())","249","        .addChildren(child.getChildren())","250","        .build();","251","    } else {","252","      return changedComponentBuilder(component, parentPath, component.getName())","253","        .addChildren(children)","254","        .build();","255","    }","256","  }","257","","258","  private static List<Component> buildChangedComponentChildren(Component component) {","259","    return component.getChildren().stream()","260","      .map(c -> ComponentTreeBuilder.buildChangedComponentTree(c, component.getName()))","261","      .filter(Objects::nonNull)","262","      .collect(MoreCollectors.toList());","263","  }","264","","265","  private static ComponentImpl.Builder changedComponentBuilder(Component component, String parentPath, String path) {","273","      .setShortName(removeStart(removeStart(path, parentPath), \"\/\"))","282","    return component;","339","    checkArgument(component.getType() == FILE);"],"delete":["21","import com.google.common.base.Preconditions;","66","  @Nullable","99","    Preconditions.checkArgument(rootComponent.getType() == ScannerReport.Component.ComponentType.PROJECT, \"Expected root component of type 'PROJECT'\");","102","    rootComponent.getChildRefList()","103","      .stream()","112","      switch (component.getType()) {","113","        case FILE:","114","          addFile(root, component);","115","          break;","116","        default:","117","          throw new IllegalArgumentException(format(\"Unsupported component type '%s'\", component.getType()));","118","      }","124","    Preconditions.checkArgument(!StringUtils.isEmpty(file.getProjectRelativePath()), \"Files should have a project relative path: \" + file);","139","      if (component.getType() == ScannerReport.Component.ComponentType.FILE) {","222","    return buildChangedComponentTree(project);","225","  private static ComponentImpl.Builder changedComponentBuilder(Component component) {","233","      .setShortName(component.getShortName())","238","  private static Component buildChangedComponentTree(Component component) {","239","    switch (component.getType()) {","240","      case PROJECT:","241","        return buildChangedProject(component);","242","      case DIRECTORY:","243","        return buildChangedIntermediate(component);","244","      case FILE:","245","        return buildChangedFile(component);","246","","247","      default:","248","        throw new IllegalArgumentException(format(\"Unsupported component type '%s'\", component.getType()));","249","    }","250","  }","251","","252","  private static Component buildChangedProject(Component component) {","253","    return changedComponentBuilder(component)","254","      .setProjectAttributes(new ProjectAttributes(component.getProjectAttributes()))","255","      .addChildren(buildChangedComponentChildren(component))","256","      .build();","257","  }","258","","259","  @Nullable","260","  private static Component buildChangedIntermediate(Component component) {","261","    List<Component> children = buildChangedComponentChildren(component);","262","    if (children.isEmpty()) {","263","      return null;","264","    }","265","    return changedComponentBuilder(component)","266","      .addChildren(children)","267","      .build();","268","  }","269","","270","  @Nullable","275","    return changedComponentBuilder(component)","276","      .setFileAttributes(component.getFileAttributes())","277","      .build();","278","  }","279","","280","  private static List<Component> buildChangedComponentChildren(Component component) {","281","    return component.getChildren()","282","      .stream()","283","      .map(ComponentTreeBuilder::buildChangedComponentTree)","284","      .filter(Objects::nonNull)","285","      .collect(MoreCollectors.toList());","342","    checkArgument(component.getType() == ScannerReport.Component.ComponentType.FILE);"]}]}},"8d3059a3f0b2d64261b44a55189348f0f54e7da8":{"changes":{"\/dev\/null":"DELETE","server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/components\/Conditions.js":"MODIFY","sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY"},"diff":{"\/dev\/null":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/components\/Conditions.js":[{"add":["90","      <div className=\"quality-gate-section\" id=\"quality-gate-conditions\">","93","        <div className=\"big-spacer-bottom\">{translate('quality_gates.introduction')}<\/div>","109","          <table className=\"data zebra zebra-hover\" id=\"quality-gate-conditions\">"],"delete":["21","import ConditionsAlert from '.\/ConditionsAlert';","91","      <div id=\"quality-gate-conditions\" className=\"quality-gate-section\">","94","        <ConditionsAlert \/>","110","          <table id=\"quality-gate-conditions\" className=\"data zebra zebra-hover\">"]}],"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":[],"delete":["1358","alerts.notes.ok=at least one threshold is defined, no threshold is reached.","1359","alerts.notes.warn=at least one warning threshold is reached, no error threshold is reached.","1360","alerts.notes.error=at least one error threshold is reached."]}]}},"5c03e3bf05097c98a88223339cf300b613b61c0d":{"changes":{"\/dev\/null":"DELETE","it\/it-tests\/src\/test\/resources\/administration\/UsersPageTest\/generate_and_revoke_user_token.html":"ADD","it\/it-tests\/src\/test\/java\/it\/administration\/UsersPageTest.java":"MODIFY","it\/it-tests\/src\/test\/resources\/administration\/UsersPageTest\/admin_should_change_its_own_password.html":"ADD"},"diff":{"\/dev\/null":[{"add":[],"delete":[]}],"it\/it-tests\/src\/test\/resources\/administration\/UsersPageTest\/generate_and_revoke_user_token.html":[{"add":[],"delete":[]}],"it\/it-tests\/src\/test\/java\/it\/administration\/UsersPageTest.java":[{"add":["36","      \"\/administration\/UsersPageTest\/generate_and_revoke_user_token.html\"","44","      \"\/administration\/UsersPageTest\/admin_should_change_its_own_password.html\""],"delete":["24","import org.junit.BeforeClass;","27","import org.sonarqube.ws.client.PostRequest;","28","import org.sonarqube.ws.client.WsClient;","31","import static util.ItUtils.newAdminWsClient;","32","","37","  private static WsClient adminWsClient;","38","","39","  @BeforeClass","40","  public static void setUp() {","41","    adminWsClient = newAdminWsClient(orchestrator);","42","  }","47","      \"\/administration\/UsersUITest\/generate_and_revoke_user_token.html\"","54","    createUser(\"users-page-user\", \"User\");","55","    makeAdmin(\"users-page-user\");","56","","58","      \"\/administration\/UsersUITest\/admin_should_change_its_own_password.html\"","61","","62","    deactivateUser(\"users-page-user\");","63","  }","64","","65","  private static void createUser(String login, String name) {","66","    adminWsClient.wsConnector().call(","67","      new PostRequest(\"api\/users\/create\")","68","        .setParam(\"login\", login)","69","        .setParam(\"name\", name)","70","        .setParam(\"password\", \"password\"));","71","  }","72","","73","  private static void makeAdmin(String login) {","74","    adminWsClient.wsConnector().call(","75","      new PostRequest(\"api\/permissions\/add_user\")","76","        .setParam(\"login\", login)","77","        .setParam(\"permission\", \"admin\"));","78","  }","79","","80","  private static void deactivateUser(String login) {","81","    adminWsClient.wsConnector().call(","82","      new PostRequest(\"api\/users\/deactivate\")","83","        .setParam(\"login\", login));"]}],"it\/it-tests\/src\/test\/resources\/administration\/UsersPageTest\/admin_should_change_its_own_password.html":[{"add":[],"delete":[]}]}},"0644be43e7d604609c02f600e7067d6d429137b5":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/meta\/MetaSize.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/styles.css":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/ui\/SizeRating.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/meta\/MetaSize.js":[{"add":["24","import SizeRating from '..\/..\/..\/components\/ui\/SizeRating';","45","            <span className=\"spacer-right\">","46","              <SizeRating value={ncloc.value}\/>","47","            <\/span>"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/styles.css":[{"add":["321","  line-height: 24px;","322","  font-size: 18px;"],"delete":["321","  line-height: 1;","322","  font-size: 24px;"]}],"server\/sonar-web\/src\/main\/js\/components\/ui\/SizeRating.js":[{"add":["19","\/\/ @flow","26","  props: {","27","    value: number,","28","    small?: boolean,","29","    muted?: boolean"],"delete":["25","  static propTypes = {","26","    value: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string]),","27","    small: React.PropTypes.bool,","28","    muted: React.PropTypes.bool"]}]}},"60dc681dbf066bf2afa19992c678a132bdc19d54":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/issue\/components\/IssueTitleBar.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/workspace\/templates\/workspace-rule.hbs":"MODIFY","server\/sonar-web\/src\/main\/less\/init\/icons.less":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/icons-components\/LinkIcon.js":"ADD","server\/sonar-web\/src\/main\/js\/components\/charts\/TreeMapRect.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/templates\/rule\/coding-rules-rule-meta.hbs":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/Action.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/components\/__tests__\/__snapshots__\/IssueTitleBar-test.js.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/issue\/components\/IssueTitleBar.js":[{"add":["25","import LinkIcon from '..\/..\/..\/components\/icons-components\/LinkIcon';","107","                  className=\"js-issue-permalink link-no-underline\"","110","                  to={issueUrl}>","111","                  <LinkIcon \/>","112","                <\/Link>"],"delete":["106","                  className=\"js-issue-permalink icon-link\"","109","                  to={issueUrl}","110","                \/>"]}],"server\/sonar-web\/src\/main\/js\/components\/workspace\/templates\/workspace-rule.hbs":[{"add":["44","        <a class=\"link-no-underline\" target=\"_blank\" href=\"{{link permalink}}\">","45","          <svg","46","            xmlns=\"http:\/\/www.w3.org\/2000\/svg\"","47","            height=14","48","            width=14","49","            viewBox=\"0 0 16 16\">","50","            <path","51","              fill=\"currentColor\"","52","              d=\"M13.501 11.429q0-0.357-0.25-0.607l-1.857-1.857q-0.25-0.25-0.607-0.25-0.375 0-0.643 0.286 0.027 0.027 0.17 0.165t0.192 0.192 0.134 0.17 0.116 0.228 0.031 0.246q0 0.357-0.25 0.607t-0.607 0.25q-0.134 0-0.246-0.031t-0.228-0.116-0.17-0.134-0.192-0.192-0.165-0.17q-0.295 0.277-0.295 0.652 0 0.357 0.25 0.607l1.839 1.848q0.241 0.241 0.607 0.241 0.357 0 0.607-0.232l1.313-1.304q0.25-0.25 0.25-0.598zM7.224 5.134q0-0.357-0.25-0.607l-1.839-1.848q-0.25-0.25-0.607-0.25-0.348 0-0.607 0.241l-1.313 1.304q-0.25 0.25-0.25 0.598 0 0.357 0.25 0.607l1.857 1.857q0.241 0.241 0.607 0.241 0.375 0 0.643-0.277-0.027-0.027-0.17-0.165t-0.192-0.192-0.134-0.17-0.116-0.228-0.031-0.246q0-0.357 0.25-0.607t0.607-0.25q0.134 0 0.246 0.031t0.228 0.116 0.17 0.134 0.192 0.192 0.165 0.17q0.295-0.277 0.295-0.652zM15.215 11.429q0 1.071-0.759 1.813l-1.313 1.304q-0.741 0.741-1.813 0.741-1.080 0-1.821-0.759l-1.839-1.848q-0.741-0.741-0.741-1.813 0-1.098 0.786-1.866l-0.786-0.786q-0.768 0.786-1.857 0.786-1.071 0-1.821-0.75l-1.857-1.857q-0.75-0.75-0.75-1.821t0.759-1.813l1.313-1.304q0.741-0.741 1.813-0.741 1.080 0 1.821 0.759l1.839 1.848q0.741 0.741 0.741 1.813 0 1.098-0.786 1.866l0.786 0.786q0.768-0.786 1.857-0.786 1.071 0 1.821 0.75l1.857 1.857q0.75 0.75 0.75 1.821z\"","53","            \/>","54","          <\/svg>","55","        <\/a>"],"delete":["44","        <a class=\"icon-link\" target=\"_blank\" href=\"{{link permalink}}\"><\/a>"]}],"server\/sonar-web\/src\/main\/less\/init\/icons.less":[{"add":[],"delete":["524",".icon-link:before {","525","  content: \"\\f127\";","526","  font-size: @iconSmallFontSize;","527","}"]}],"server\/sonar-web\/src\/main\/js\/components\/icons-components\/LinkIcon.js":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/components\/charts\/TreeMapRect.js":[{"add":["23","import LinkIcon from '..\/icons-components\/LinkIcon';","63","          <LinkIcon \/>"],"delete":["62","          <span className=\"icon-link\" \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/templates\/rule\/coding-rules-rule-meta.hbs":[{"add":["4","    <a class=\"coding-rules-detail-permalink link-no-underline spacer-left\" target=\"_blank\" href=\"{{permalink}}\"","5","       data-toggle=\"tooltip\" data-placement=\"left\" title=\"Rule permalink\">","6","      <svg","7","        class=\"text-text-top\"","8","        xmlns=\"http:\/\/www.w3.org\/2000\/svg\"","9","        height=14","10","        width=14","11","        viewBox=\"0 0 16 16\">","12","        <path","13","          fill=\"currentColor\"","14","          d=\"M13.501 11.429q0-0.357-0.25-0.607l-1.857-1.857q-0.25-0.25-0.607-0.25-0.375 0-0.643 0.286 0.027 0.027 0.17 0.165t0.192 0.192 0.134 0.17 0.116 0.228 0.031 0.246q0 0.357-0.25 0.607t-0.607 0.25q-0.134 0-0.246-0.031t-0.228-0.116-0.17-0.134-0.192-0.192-0.165-0.17q-0.295 0.277-0.295 0.652 0 0.357 0.25 0.607l1.839 1.848q0.241 0.241 0.607 0.241 0.357 0 0.607-0.232l1.313-1.304q0.25-0.25 0.25-0.598zM7.224 5.134q0-0.357-0.25-0.607l-1.839-1.848q-0.25-0.25-0.607-0.25-0.348 0-0.607 0.241l-1.313 1.304q-0.25 0.25-0.25 0.598 0 0.357 0.25 0.607l1.857 1.857q0.241 0.241 0.607 0.241 0.375 0 0.643-0.277-0.027-0.027-0.17-0.165t-0.192-0.192-0.134-0.17-0.116-0.228-0.031-0.246q0-0.357 0.25-0.607t0.607-0.25q0.134 0 0.246 0.031t0.228 0.116 0.17 0.134 0.192 0.192 0.165 0.17q0.295-0.277 0.295-0.652zM15.215 11.429q0 1.071-0.759 1.813l-1.313 1.304q-0.741 0.741-1.813 0.741-1.080 0-1.821-0.759l-1.839-1.848q-0.741-0.741-0.741-1.813 0-1.098 0.786-1.866l-0.786-0.786q-0.768 0.786-1.857 0.786-1.071 0-1.821-0.75l-1.857-1.857q-0.75-0.75-0.75-1.821t0.759-1.813l1.313-1.304q0.741-0.741 1.813-0.741 1.080 0 1.821 0.759l1.839 1.848q0.741 0.741 0.741 1.813 0 1.098-0.786 1.866l0.786 0.786q0.768-0.786 1.857-0.786 1.071 0 1.821 0.75l1.857 1.857q0.75 0.75 0.75 1.821z\"","15","        \/>","16","      <\/svg>","17","    <\/a>"],"delete":["4","    <a class=\"coding-rules-detail-permalink icon-link spacer-left\" target=\"_blank\" href=\"{{permalink}}\"","5","       data-toggle=\"tooltip\" data-placement=\"left\" title=\"Rule permalink\"><\/a>"]}],"server\/sonar-web\/src\/main\/js\/apps\/web-api\/components\/Action.js":[{"add":["29","import LinkIcon from '..\/..\/..\/components\/icons-components\/LinkIcon';","92","            <Link","93","              to={{ pathname: '\/web_api\/' + actionKey }}","94","              className=\"spacer-right link-no-underline\">","95","              <LinkIcon \/>","96","            <\/Link>"],"delete":["91","            <Link to={{ pathname: '\/web_api\/' + actionKey }} className=\"spacer-right icon-link\" \/>"]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/components\/__tests__\/__snapshots__\/IssueTitleBar-test.js.snap":[{"add":["65","              className=\"js-issue-permalink link-no-underline\"","80","            >","81","              <LinkIcon \/>","82","            <\/Link>","154","              className=\"js-issue-permalink link-no-underline\"","169","            >","170","              <LinkIcon \/>","171","            <\/Link>"],"delete":["65","              className=\"js-issue-permalink icon-link\"","80","            \/>","152","              className=\"js-issue-permalink icon-link\"","167","            \/>"]}]}},"3c1453a726a753e9f8e15a43d70d7e7ee1d835a8":{"changes":{"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/AddUniqueIndexOnRulesParameters.java":"ADD","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/PurgeDuplicateRulesParameters.java":"ADD","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/PurgeDuplicateRulesParametersTest.java":"ADD","server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/AddUniqueIndexOnRulesParametersTest\/rules_parameters.sql":"ADD","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/qualityprofile\/ws\/CompareActionTest.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/DbVersion72.java":"MODIFY","server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/PurgeDuplicateRulesParametersTest\/rules_parameters_etc.sql":"ADD","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/rule\/RuleDaoTest.java":"MODIFY","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/AddUniqueIndexOnRulesParametersTest.java":"ADD","server\/sonar-db-core\/src\/main\/resources\/org\/sonar\/db\/version\/schema-h2.ddl":"MODIFY","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/DbVersion72Test.java":"MODIFY"},"diff":{"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/AddUniqueIndexOnRulesParameters.java":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/PurgeDuplicateRulesParameters.java":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/PurgeDuplicateRulesParametersTest.java":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/AddUniqueIndexOnRulesParametersTest\/rules_parameters.sql":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/qualityprofile\/ws\/CompareActionTest.java":[{"add":[],"delete":["210","    RuleParamDto param = RuleParamDto.createFor(ruleDefinition).setName(\"param_\" + id).setType(RuleParamType.STRING.toString());","211","    db.ruleDao().insertRuleParam(session, ruleDefinition, param);"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/DbVersion72.java":[{"add":["57","      .add(2128, \"Purge duplicate rules_parameters and their orphans\", PurgeDuplicateRulesParameters.class)","58","      .add(2129, \"Add unique index on rule_id + name on rules_parameters\", AddUniqueIndexOnRulesParameters.class)"],"delete":[]}],"server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/PurgeDuplicateRulesParametersTest\/rules_parameters_etc.sql":[{"add":[],"delete":[]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/rule\/RuleDaoTest.java":[{"add":["747","    RuleDefinitionDto ruleDefinitionDto = db.rules().insert();","749","    RuleParamDto orig = RuleParamDto.createFor(ruleDefinitionDto)","755","    underTest.insertRuleParam(db.getSession(), ruleDefinitionDto, orig);","757","    List<RuleParamDto> ruleParamDtos = underTest.selectRuleParamsByRuleKey(db.getSession(), ruleDefinitionDto.getKey());","758","    assertThat(ruleParamDtos).hasSize(1);","759","","760","    RuleParamDto loaded = ruleParamDtos.get(0);","761","    assertThat(loaded.getRuleId()).isEqualTo(orig.getRuleId());","762","    assertThat(loaded.getName()).isEqualTo(orig.getName());","763","    assertThat(loaded.getType()).isEqualTo(orig.getType());","764","    assertThat(loaded.getDefaultValue()).isEqualTo(orig.getDefaultValue());","765","    assertThat(loaded.getDescription()).isEqualTo(orig.getDescription());","766","  }","767","","768","  @Test","769","  public void should_fail_to_insert_duplicate_parameter() {","770","    RuleDefinitionDto ruleDefinitionDto = db.rules().insert();","771","","772","    RuleParamDto param = RuleParamDto.createFor(ruleDefinitionDto)","773","      .setName(\"max\")","774","      .setType(\"INTEGER\")","775","      .setDefaultValue(\"30\")","776","      .setDescription(\"My Parameter\");","777","","778","    underTest.insertRuleParam(db.getSession(), ruleDefinitionDto, param);","779","","780","    thrown.expect(PersistenceException.class);","781","    underTest.insertRuleParam(db.getSession(), ruleDefinitionDto, param);"],"delete":["747","    db.prepareDbUnit(getClass(), \"insert_parameter.xml\");","748","    RuleDefinitionDto rule1 = underTest.selectOrFailDefinitionByKey(db.getSession(), RuleKey.of(\"plugin\", \"NewRuleKey\"));","750","    RuleParamDto param = RuleParamDto.createFor(rule1)","756","    underTest.insertRuleParam(db.getSession(), rule1, param);","757","    db.getSession().commit();","759","    db.assertDbUnit(getClass(), \"insert_parameter-result.xml\", \"rules_parameters\");"]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/AddUniqueIndexOnRulesParametersTest.java":[{"add":[],"delete":[]}],"server\/sonar-db-core\/src\/main\/resources\/org\/sonar\/db\/version\/schema-h2.ddl":[{"add":["45","CREATE UNIQUE INDEX \"RULES_PARAMETERS_UNIQUE\" ON \"RULES_PARAMETERS\" (\"RULE_ID\", \"NAME\");"],"delete":[]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/DbVersion72Test.java":[{"add":["36","    verifyMigrationCount(underTest, 30);"],"delete":["36","    verifyMigrationCount(underTest, 28);"]}]}},"8be4454cd37014235a372dba54caea9ae25a5722":{"changes":{"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/TrackerExecution.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/TrackerExecutionTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/issue\/IssueChangeDao.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/issue\/IssueChangeDaoTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/issue\/IssueChangeMapper.xml":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/ComponentIssuesLoader.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/issue\/IssueTesting.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/ComponentIssuesLoaderTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/issue\/IssueChangeMapper.java":"MODIFY"},"diff":{"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/TrackerExecution.java":[{"add":["69","    componentIssuesLoader.loadLatestDiffChangesForReopeningOfClosedIssues(matchesClosedIssues);"],"delete":["69","    componentIssuesLoader.loadChanges(matchesClosedIssues);"]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/TrackerExecutionTest.java":[{"add":["141","    verify(componentIssuesLoader).loadLatestDiffChangesForReopeningOfClosedIssues(mappedClosedIssues);"],"delete":["141","    verify(componentIssuesLoader).loadChanges(mappedClosedIssues);"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/issue\/IssueChangeDao.java":[{"add":["24","import org.apache.ibatis.session.ResultHandler;","32","import static org.sonar.db.DatabaseUtils.executeLargeInputsWithoutOutput;","55","  public void scrollDiffChangesOfIssues(DbSession dbSession, Collection<String> issueKeys, ResultHandler<IssueChangeDto> handler) {","56","    if (issueKeys.isEmpty()) {","57","      return;","58","    }","59","","60","    executeLargeInputsWithoutOutput(issueKeys, issueKeySubList -> mapper(dbSession).scrollDiffChangesOfIssues(issueKeySubList, handler));","61","  }","62",""],"delete":[]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/issue\/IssueChangeDaoTest.java":[{"add":["21","import java.util.ArrayList;","24","import java.util.stream.Stream;","25","import org.apache.ibatis.session.ResultContext;","26","import org.apache.ibatis.session.ResultHandler;","34","import static com.google.common.collect.ImmutableList.of;","191","  @Test","192","  public void scrollDiffChangesOfIssues_scrolls_only_diff_changes_of_selected_issues() {","193","    IssueDto issue1 = db.issues().insertIssue();","194","    IssueChangeDto diffChange1 = db.issues().insertChange(issue1, t -> t.setChangeType(TYPE_FIELD_CHANGE));","195","    db.issues().insertChange(issue1, t -> t.setChangeType(TYPE_COMMENT));","196","    IssueDto issue2 = db.issues().insertIssue();","197","    IssueChangeDto diffChange2 = db.issues().insertChange(issue2, t -> t.setChangeType(TYPE_FIELD_CHANGE));","198","    db.issues().insertChange(issue2, t -> t.setChangeType(TYPE_COMMENT));","199","    IssueDto issue3 = db.issues().insertIssue();","200","    IssueChangeDto diffChange31 = db.issues().insertChange(issue3, t -> t.setChangeType(TYPE_FIELD_CHANGE));","201","    IssueChangeDto diffChange32 = db.issues().insertChange(issue3, t -> t.setChangeType(TYPE_FIELD_CHANGE));","202","    db.issues().insertChange(issue3, t -> t.setChangeType(TYPE_COMMENT));","203","    RecordingIssueChangeDtoResultHandler recordingHandler = new RecordingIssueChangeDtoResultHandler();","204","","205","    underTest.scrollDiffChangesOfIssues(db.getSession(), of(), recordingHandler.clear());","206","    assertThat(recordingHandler.getDtoKeys()).isEmpty();","207","    underTest.scrollDiffChangesOfIssues(db.getSession(), of(\"fooBarCacahuete\"), recordingHandler.clear());","208","    assertThat(recordingHandler.getDtoKeys()).isEmpty();","209","","210","    underTest.scrollDiffChangesOfIssues(db.getSession(), of(issue1.getKee()), recordingHandler.clear());","211","    assertThat(recordingHandler.getDtoKeys()).containsOnly(diffChange1.getKey());","212","","213","    underTest.scrollDiffChangesOfIssues(db.getSession(), of(issue2.getKee()), recordingHandler.clear());","214","    assertThat(recordingHandler.getDtoKeys()).containsOnly(diffChange2.getKey());","215","","216","    underTest.scrollDiffChangesOfIssues(db.getSession(), of(issue1.getKee(), issue3.getKee()), recordingHandler.clear());","217","    assertThat(recordingHandler.getDtoKeys()).containsOnly(diffChange1.getKey(), diffChange31.getKey(), diffChange32.getKey());","218","  }","219","","220","  @Test","221","  public void scrollDiffChangesOfIssues_orders_changes_by_issue_and_then_creationDate() {","222","    IssueDto issue1 = db.issues().insertIssue();","223","    IssueChangeDto[] diffChanges = {","224","      db.issues().insertChange(issue1, t -> t.setChangeType(TYPE_FIELD_CHANGE).setCreatedAt(1L).setIssueChangeCreationDate(50L)),","225","      db.issues().insertChange(issue1, t -> t.setChangeType(TYPE_FIELD_CHANGE).setCreatedAt(2L).setIssueChangeCreationDate(20L)),","226","      db.issues().insertChange(issue1, t -> t.setChangeType(TYPE_FIELD_CHANGE).setCreatedAt(3L).setIssueChangeCreationDate(30L)),","227","      db.issues().insertChange(issue1, t -> t.setChangeType(TYPE_FIELD_CHANGE).setCreatedAt(4L).setIssueChangeCreationDate(80L)),","228","      db.issues().insertChange(issue1, t -> t.setChangeType(TYPE_FIELD_CHANGE).setCreatedAt(5L).setIssueChangeCreationDate(10L)),","229","    };","230","    RecordingIssueChangeDtoResultHandler recordingHandler = new RecordingIssueChangeDtoResultHandler();","231","    underTest.scrollDiffChangesOfIssues(db.getSession(), of(issue1.getKee()), recordingHandler.clear());","232","    assertThat(recordingHandler.getDtoKeys()).containsExactly(","233","      diffChanges[3].getKey(),","234","      diffChanges[0].getKey(),","235","      diffChanges[2].getKey(),","236","      diffChanges[1].getKey(),","237","      diffChanges[4].getKey());","238","  }","239","","240","  private static class RecordingIssueChangeDtoResultHandler implements ResultHandler<IssueChangeDto> {","241","    private final List<IssueChangeDto> dtos = new ArrayList<>();","242","","243","    @Override","244","    public void handleResult(ResultContext<? extends IssueChangeDto> resultContext) {","245","      dtos.add(resultContext.getResultObject());","246","    }","247","","248","    public RecordingIssueChangeDtoResultHandler clear() {","249","      dtos.clear();","250","      return this;","251","    }","252","","253","    public Stream<String> getDtoKeys() {","254","      return dtos.stream().map(IssueChangeDto::getKey);","255","    }","256","  }"],"delete":[]}],"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/issue\/IssueChangeMapper.xml":[{"add":["44","","45","  <select id=\"scrollDiffChangesOfIssues\" parameterType=\"map\" resultType=\"IssueChange\" fetchSize=\"${_scrollFetchSize}\" resultSetType=\"FORWARD_ONLY\">","46","    select","47","      <include refid=\"issueChangeColumns\"\/>","48","    from issue_changes c","49","    where","50","      c.change_type='diff'","51","      and c.issue_key in","52","      <foreach collection=\"issueKeys\" open=\"(\" close=\")\" item=\"key\" separator=\",\">","53","        #{key,jdbcType=VARCHAR}","54","      <\/foreach>","55","    order by","56","      c.issue_key,c.issue_change_creation_date desc","57","  <\/select>"],"delete":[]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/ComponentIssuesLoader.java":[{"add":["50","import static org.sonar.core.util.stream.MoreCollectors.uniqueIndex;","110","  \/**","111","   * Loads the most recent diff changes of the specified issues which contain the latest status and resolution of the","112","   * issue.","113","   *\/","114","  public void loadLatestDiffChangesForReopeningOfClosedIssues(Collection<DefaultIssue> issues) {","115","    if (issues.isEmpty()) {","116","      return;","117","    }","118","","119","    try (DbSession dbSession = dbClient.openSession(false)) {","120","      loadLatestDiffChangesForReopeningOfClosedIssues(dbSession, issues);","121","    }","122","  }","123","","124","  \/**","125","   * To be efficient both in term of memory and speed:","126","   * <ul>","127","   *   <li>only diff changes are loaded from DB, sorted by issue and then change creation date<\/li>","128","   *   <li>data from DB is streamed<\/li>","129","   *   <li>only the latest change(s) with status and resolution are added to the {@link DefaultIssue} objects<\/li>","130","   * <\/ul>","131","   *\/","132","  private void loadLatestDiffChangesForReopeningOfClosedIssues(DbSession dbSession, Collection<DefaultIssue> issues) {","133","    Map<String, DefaultIssue> issuesByKey = issues.stream().collect(uniqueIndex(DefaultIssue::key));","134","","135","    dbClient.issueChangeDao()","136","      .scrollDiffChangesOfIssues(dbSession, issuesByKey.keySet(), new ResultHandler<IssueChangeDto>() {","137","        private DefaultIssue currentIssue = null;","138","        private boolean previousStatusFound = false;","139","        private boolean previousResolutionFound = false;","140","","141","        @Override","142","        public void handleResult(ResultContext<? extends IssueChangeDto> resultContext) {","143","          IssueChangeDto issueChangeDto = resultContext.getResultObject();","144","          if (currentIssue == null || !currentIssue.key().equals(issueChangeDto.getIssueKey())) {","145","            currentIssue = issuesByKey.get(issueChangeDto.getIssueKey());","146","            previousStatusFound = false;","147","            previousResolutionFound = false;","148","          }","149","","150","          if (currentIssue != null) {","151","            FieldDiffs fieldDiffs = issueChangeDto.toFieldDiffs();","152","            boolean hasPreviousStatus = fieldDiffs.get(\"status\") != null;","153","            boolean hasPreviousResolution = fieldDiffs.get(\"resolution\") != null;","154","            if ((!previousStatusFound && hasPreviousStatus) || (!previousResolutionFound && hasPreviousResolution)) {","155","              currentIssue.addChange(fieldDiffs);","156","            }","157","            previousStatusFound |= hasPreviousStatus;","158","            previousResolutionFound |= hasPreviousResolution;","159","          }","160","        }","161","      });","162","  }","163","","184","    changeDtoByIssueKey.computeIfAbsent(i.key(), k -> emptyList())","185","      .forEach(c -> addChangeOrComment(i, c));","186","  }","187","","188","  private static void addChangeOrComment(DefaultIssue i, IssueChangeDto c) {","189","    switch (c.getChangeType()) {","190","      case IssueChangeDto.TYPE_FIELD_CHANGE:","191","        i.addChange(c.toFieldDiffs());","192","        break;","193","      case IssueChangeDto.TYPE_COMMENT:","194","        i.addComment(c.toComment());","195","        break;","196","      default:","197","        throw new IllegalStateException(\"Unknow change type: \" + c.getChangeType());","198","    }"],"delete":["97","  public void loadChanges(Collection<DefaultIssue> issues) {","98","    if (issues.isEmpty()) {","99","      return;","100","    }","101","","102","    try (DbSession dbSession = dbClient.openSession(false)) {","103","      loadChanges(dbSession, issues);","104","    }","105","  }","106","","139","    changeDtoByIssueKey.computeIfAbsent(i.key(), k -> emptyList()).forEach(c -> {","140","      switch (c.getChangeType()) {","141","        case IssueChangeDto.TYPE_FIELD_CHANGE:","142","          i.addChange(c.toFieldDiffs());","143","          break;","144","        case IssueChangeDto.TYPE_COMMENT:","145","          i.addComment(c.toComment());","146","          break;","147","        default:","148","          throw new IllegalStateException(\"Unknow change type: \" + c.getChangeType());","149","      }","150","    });"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/issue\/IssueTesting.java":[{"add":["28","import org.sonar.core.util.UuidFactoryFast;","77","      .setKey(UuidFactoryFast.getInstance().create())"],"delete":["76","      .setKey(\"uuid_\" + randomAlphabetic(10))"]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/ComponentIssuesLoaderTest.java":[{"add":["21","import com.google.common.collect.ImmutableList;","25","import java.util.ArrayList;","27","import java.util.Collections;","31","import java.util.stream.IntStream;","52","import static java.util.Collections.emptyList;","228","  @Test","229","  public void loadLatestDiffChangesForReopeningOfClosedIssues_does_not_query_DB_if_issue_list_is_empty() {","230","    DbClient dbClient = mock(DbClient.class);","231","    ComponentIssuesLoader underTest = new ComponentIssuesLoader(dbClient,","232","      null \/* not used in method *\/, null \/* not used in method *\/, newConfiguration(\"0\"), null \/* not used by method *\/);","233","","234","    underTest.loadLatestDiffChangesForReopeningOfClosedIssues(emptyList());","235","","236","    verifyZeroInteractions(dbClient, system2);","237","  }","238","","239","  @Test","240","  @UseDataProvider(\"statusOrResolutionFieldName\")","241","  public void loadLatestDiffChangesForReopeningOfClosedIssues_add_diff_change_with_most_recent_status_or_resolution(String statusOrResolutionFieldName) {","242","    ComponentDto project = dbTester.components().insertPublicProject();","243","    ComponentDto file = dbTester.components().insertComponent(ComponentTesting.newFileDto(project));","244","    RuleDefinitionDto rule = dbTester.rules().insert();","245","    IssueDto issue = dbTester.issues().insert(rule, project, file);","246","    dbTester.issues().insertChange(issue, t -> t.setChangeData(randomDiffWith(statusOrResolutionFieldName, \"val1\")).setIssueChangeCreationDate(5));","247","    dbTester.issues().insertChange(issue, t -> t.setChangeData(randomDiffWith(statusOrResolutionFieldName, \"val2\")).setIssueChangeCreationDate(20));","248","    dbTester.issues().insertChange(issue, t -> t.setChangeData(randomDiffWith(statusOrResolutionFieldName, \"val3\")).setIssueChangeCreationDate(13));","249","    ComponentIssuesLoader underTest = new ComponentIssuesLoader(dbClient,","250","      null \/* not used in method *\/, null \/* not used in method *\/, newConfiguration(\"0\"), null \/* not used by method *\/);","251","    DefaultIssue defaultIssue = new DefaultIssue().setKey(issue.getKey());","252","","253","    underTest.loadLatestDiffChangesForReopeningOfClosedIssues(ImmutableList.of(defaultIssue));","254","","255","    assertThat(defaultIssue.changes())","256","      .hasSize(1);","257","    assertThat(defaultIssue.changes())","258","      .extracting(t -> t.get(statusOrResolutionFieldName))","259","      .filteredOn(t -> hasValue(t, \"val2\"))","260","      .hasSize(1);","261","  }","262","","263","  @Test","264","  public void loadLatestDiffChangesForReopeningOfClosedIssues_add_single_diff_change_when_most_recent_status_and_resolution_is_the_same_diff() {","265","    ComponentDto project = dbTester.components().insertPublicProject();","266","    ComponentDto file = dbTester.components().insertComponent(ComponentTesting.newFileDto(project));","267","    RuleDefinitionDto rule = dbTester.rules().insert();","268","    IssueDto issue = dbTester.issues().insert(rule, project, file);","269","    dbTester.issues().insertChange(issue, t -> t.setChangeData(randomDiffWith(\"status\", \"valStatus1\")).setIssueChangeCreationDate(5));","270","    dbTester.issues().insertChange(issue, t -> t.setChangeData(randomDiffWith(\"status\", \"valStatus2\")).setIssueChangeCreationDate(19));","271","    dbTester.issues().insertChange(issue, t -> t.setChangeData(randomDiffWith(\"status\", \"valStatus3\", \"resolution\", \"valRes3\")).setIssueChangeCreationDate(20));","272","    dbTester.issues().insertChange(issue, t -> t.setChangeData(randomDiffWith(\"resolution\", \"valRes4\")).setIssueChangeCreationDate(13));","273","    ComponentIssuesLoader underTest = new ComponentIssuesLoader(dbClient,","274","      null \/* not used in method *\/, null \/* not used in method *\/, newConfiguration(\"0\"), null \/* not used by method *\/);","275","    DefaultIssue defaultIssue = new DefaultIssue().setKey(issue.getKey());","276","","277","    underTest.loadLatestDiffChangesForReopeningOfClosedIssues(ImmutableList.of(defaultIssue));","278","","279","    assertThat(defaultIssue.changes())","280","      .hasSize(1);","281","    assertThat(defaultIssue.changes())","282","      .extracting(t -> t.get(\"status\"))","283","      .filteredOn(t -> hasValue(t, \"valStatus3\"))","284","      .hasSize(1);","285","    assertThat(defaultIssue.changes())","286","      .extracting(t -> t.get(\"resolution\"))","287","      .filteredOn(t -> hasValue(t, \"valRes3\"))","288","      .hasSize(1);","289","  }","290","","291","  @Test","292","  public void loadLatestDiffChangesForReopeningOfClosedIssues_adds_2_diff_changes_if_most_recent_status_and_resolution_are_not_the_same_diff() {","293","    ComponentDto project = dbTester.components().insertPublicProject();","294","    ComponentDto file = dbTester.components().insertComponent(ComponentTesting.newFileDto(project));","295","    RuleDefinitionDto rule = dbTester.rules().insert();","296","    IssueDto issue = dbTester.issues().insert(rule, project, file);","297","    dbTester.issues().insertChange(issue, t -> t.setChangeData(randomDiffWith(\"status\", \"valStatus1\")).setIssueChangeCreationDate(5));","298","    dbTester.issues().insertChange(issue, t -> t.setChangeData(randomDiffWith(\"status\", \"valStatus2\", \"resolution\", \"valRes2\")).setIssueChangeCreationDate(19));","299","    dbTester.issues().insertChange(issue, t -> t.setChangeData(randomDiffWith(\"status\", \"valStatus3\")).setIssueChangeCreationDate(20));","300","    dbTester.issues().insertChange(issue, t -> t.setChangeData(randomDiffWith(\"resolution\", \"valRes4\")).setIssueChangeCreationDate(13));","301","    ComponentIssuesLoader underTest = new ComponentIssuesLoader(dbClient,","302","      null \/* not used in method *\/, null \/* not used in method *\/, newConfiguration(\"0\"), null \/* not used by method *\/);","303","    DefaultIssue defaultIssue = new DefaultIssue().setKey(issue.getKey());","304","","305","    underTest.loadLatestDiffChangesForReopeningOfClosedIssues(ImmutableList.of(defaultIssue));","306","","307","    assertThat(defaultIssue.changes())","308","      .hasSize(2);","309","    assertThat(defaultIssue.changes())","310","      .extracting(t -> t.get(\"status\"))","311","      .filteredOn(t -> hasValue(t, \"valStatus3\"))","312","      .hasSize(1);","313","    assertThat(defaultIssue.changes())","314","      .extracting(t -> t.get(\"resolution\"))","315","      .filteredOn(t -> hasValue(t, \"valRes2\"))","316","      .hasSize(1);","317","  }","318","","319","  private static boolean hasValue(@Nullable FieldDiffs.Diff t, String value) {","320","    if (t == null) {","321","      return false;","322","    }","323","    return (t.oldValue() == null || value.equals(t.oldValue())) && (t.newValue() == null || value.equals(t.newValue()));","324","  }","325","","326","  @DataProvider","327","  public static Object[][] statusOrResolutionFieldName() {","328","    return new Object[][] {","329","      {\"status\"},","330","      {\"resolution\"},","331","    };","332","  }","333","","334","  private static String randomDiffWith(String... fieldsAndValues) {","335","    Random random = new Random();","336","    List<Diff> diffs = new ArrayList<>();","337","    for (int i = 0; i < fieldsAndValues.length; i++) {","338","      int oldOrNew = random.nextInt(3);","339","      String value = fieldsAndValues[i + 1];","340","      diffs.add(new Diff(fieldsAndValues[i], oldOrNew <= 2 ? value : null, oldOrNew >= 2 ? value : null));","341","      i++;","342","    }","343","    IntStream.range(0, random.nextInt(5))","344","      .forEach(i -> diffs.add(new Diff(randomAlphabetic(10), random.nextBoolean() ? null : randomAlphabetic(11), random.nextBoolean() ? null : randomAlphabetic(12))));","345","    Collections.shuffle(diffs);","346","","347","    FieldDiffs res = new FieldDiffs();","348","    diffs.forEach(diff -> res.setDiff(diff.field, diff.oldValue, diff.newValue));","349","    return res.toEncodedString();","350","  }","351","","352","  private static final class Diff {","353","    private final String field;","354","    private final String oldValue;","355","    private final String newValue;","356","","357","    private Diff(String field, @Nullable String oldValue, @Nullable String newValue) {","358","      this.field = field;","359","      this.oldValue = oldValue;","360","      this.newValue = newValue;","361","    }","362","  }","363",""],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/issue\/IssueChangeMapper.java":[{"add":["24","import org.apache.ibatis.session.ResultHandler;","40","  List<IssueChangeDto> selectByIssuesAndType(@Param(\"issueKeys\") List<String> issueKeys, @Param(\"changeType\") String changeType);","41","","42","  \/**","43","   * Scrolls through all changes with type {@link IssueChangeDto#TYPE_FIELD_CHANGE diff}, sorted by issue key and","44","   * then change creation date.","45","   *\/","46","  void scrollDiffChangesOfIssues(@Param(\"issueKeys\") List<String> issueKeys, ResultHandler<IssueChangeDto> handler);"],"delete":["39","  List<IssueChangeDto> selectByIssuesAndType(@Param(\"issueKeys\") List<String> issueKeys,","40","    @Param(\"changeType\") String changeType);","43",""]}]}},"88bdd17e11b618321f7fee543e08e363fdb5763b":{"changes":{"server\/sonar-process-monitor\/src\/main\/java\/org\/sonar\/application\/cluster\/HazelcastCluster.java":"MODIFY","server\/sonar-process-monitor\/src\/main\/java\/org\/sonar\/application\/cluster\/AppStateClusterImpl.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/web\/PlatformServletContextListener.java":"MODIFY"},"diff":{"server\/sonar-process-monitor\/src\/main\/java\/org\/sonar\/application\/cluster\/HazelcastCluster.java":[{"add":["31","import com.hazelcast.core.HazelcastInstanceNotActiveException;","42","import org.slf4j.Logger;","43","import org.slf4j.LoggerFactory;","56","  private static final Logger LOGGER = LoggerFactory.getLogger(HazelcastCluster.class);","57","","152","      try {","153","        \/\/ Removing listeners","154","        operationalProcesses.removeEntryListener(operationalProcessListenerUUID);","155","        hzInstance.getClientService().removeClientListener(clientListenerUUID);","157","        \/\/ Removing the operationalProcess from the replicated map","158","        operationalProcesses.keySet().forEach(","159","          clusterNodeProcess -> {","160","            if (clusterNodeProcess.getNodeUuid().equals(getLocalUUID())) {","161","              operationalProcesses.remove(clusterNodeProcess);","162","            }","163","          });","165","        \/\/ Shutdown Hazelcast properly","166","        hzInstance.shutdown();","167","      } catch (HazelcastInstanceNotActiveException e) {","168","        \/\/ hazelcastCluster may be already closed by the shutdown hook","169","        LOGGER.debug(\"Unable to close Hazelcast cluster\", e);","170","      }"],"delete":["147","      \/\/ Removing listeners","148","      operationalProcesses.removeEntryListener(operationalProcessListenerUUID);","149","      hzInstance.getClientService().removeClientListener(clientListenerUUID);","151","      \/\/ Removing the operationalProcess from the replicated map","152","      operationalProcesses.keySet().forEach(","153","        clusterNodeProcess -> {","154","          if (clusterNodeProcess.getNodeUuid().equals(getLocalUUID())) {","155","            operationalProcesses.remove(clusterNodeProcess);","156","          }","157","        });","159","      \/\/ Shutdown Hazelcast properly","160","      hzInstance.shutdown();"]}],"server\/sonar-process-monitor\/src\/main\/java\/org\/sonar\/application\/cluster\/AppStateClusterImpl.java":[{"add":["89","    hazelcastCluster.close();"],"delete":["22","import com.hazelcast.core.HazelcastInstanceNotActiveException;","90","    try {","91","      hazelcastCluster.close();","92","    } catch (HazelcastInstanceNotActiveException e) {","93","      \/\/ hazelcastCluster may be already closed by the shutdown hook","94","      LOGGER.debug(\"Unable to close Hazelcast cluster\", e);","95","    }"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/web\/PlatformServletContextListener.java":[{"add":["21","import ch.qos.logback.classic.LoggerContext;","27","import org.slf4j.LoggerFactory;","68","    LoggerContext loggerContext = (LoggerContext) LoggerFactory.getILoggerFactory();","69","    loggerContext.stop();"],"delete":[]}]}},"90970dd0e1c0858d328bf535d17e83e1580574af":{"changes":{"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/webhook\/ws\/WebhooksWsParameters.java":"MODIFY","server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/webhook\/ws\/CreateActionTest.java":"MODIFY"},"diff":{"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/webhook\/ws\/WebhooksWsParameters.java":[{"add":["35","  static final int PROJECT_KEY_PARAM_MAXIMUM_LENGTH = 400;"],"delete":["35","  static final int PROJECT_KEY_PARAM_MAXIMUM_LENGTH = 100;"]}],"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/webhook\/ws\/CreateActionTest.java":[{"add":["100","  public void create_a_webhook_with_400_length_project_key() {","101","    String longProjectKey = generateStringWithLength(400);","102","    ComponentDto project = componentDbTester.insertPrivateProject(componentDto -> componentDto.setDbKey(longProjectKey));","103","","104","    userSession.logIn().addProjectPermission(ADMIN, project);","105","","106","    CreateWsResponse response = wsActionTester.newRequest()","107","      .setParam(\"project\", longProjectKey)","108","      .setParam(\"name\", NAME_WEBHOOK_EXAMPLE_001)","109","      .setParam(\"url\", URL_WEBHOOK_EXAMPLE_001)","110","      .setParam(\"secret\", \"a_secret\")","111","      .executeProtobuf(CreateWsResponse.class);","112","","113","    assertThat(response.getWebhook()).isNotNull();","114","    assertThat(response.getWebhook().getKey()).isNotNull();","115","    assertThat(response.getWebhook().getName()).isEqualTo(NAME_WEBHOOK_EXAMPLE_001);","116","    assertThat(response.getWebhook().getUrl()).isEqualTo(URL_WEBHOOK_EXAMPLE_001);","117","    assertThat(response.getWebhook().getSecret()).isEqualTo(\"a_secret\");","118","  }","119","","120","  @Test","374","","375","  @Test","376","  public void throw_IllegalArgumentException_if_project_key_greater_than_400() {","377","    String longProjectKey = generateStringWithLength(401);","378","    userSession.logIn().addPermission(ADMINISTER, defaultOrganizationProvider.get().getUuid());","379","","380","    expectedException.expect(IllegalArgumentException.class);","381","    expectedException.expectMessage(\"'project' length (401) is longer than the maximum authorized (400)\");","382","","383","    wsActionTester.newRequest()","384","      .setParam(\"project\", longProjectKey)","385","      .setParam(\"name\", NAME_WEBHOOK_EXAMPLE_001)","386","      .setParam(\"url\", URL_WEBHOOK_EXAMPLE_001)","387","      .setParam(\"secret\", \"a_secret\")","388","      .executeProtobuf(CreateWsResponse.class);","389","  }","390","","391","","392","  private static String generateStringWithLength(int length) {","393","    StringBuilder sb = new StringBuilder(length);","394","    for (int i = 0; i < length; i++) {","395","      sb.append(\"x\");","396","    }","397","    return sb.toString();","398","  }","399",""],"delete":[]}]}},"4df60a42ed232f82c6c97c00296c4dbb8ac4398e":{"changes":{"\/dev\/null":"DELETE","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/RuleUpdaterTest.java":"ADD"},"diff":{"\/dev\/null":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/RuleUpdaterTest.java":[{"add":[],"delete":[]}]}},"7031c2ae9d1a5caefd9c27cc302624e01403687b":{"changes":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/report\/AnalysisContextReportPublisherTest.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/AnalysisContextReportPublisher.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/report\/AnalysisContextReportPublisherTest.java":[{"add":["22","import java.io.File;","23","import java.nio.charset.StandardCharsets;","24","import java.util.Collections;","29","import org.apache.commons.lang.StringUtils;","75","  public void prepare() {","87","    when(pluginRepo.getPluginInfos()).thenReturn(Collections.singletonList(new PluginInfo(\"xoo\").setName(\"Xoo\").setVersion(Version.create(\"1.0\"))));","93","    assertThat(FileUtils.readFileToString(writer.getFileStructure().analysisLog(), StandardCharsets.UTF_8)).contains(\"Xoo 1.0 (xoo)\");","117","    String content = FileUtils.readFileToString(writer.getFileStructure().analysisLog(), StandardCharsets.UTF_8);","133","    String content = FileUtils.readFileToString(writer.getFileStructure().analysisLog(), StandardCharsets.UTF_8);","148","    String content = FileUtils.readFileToString(writer.getFileStructure().analysisLog(), StandardCharsets.UTF_8);","159","    content = FileUtils.readFileToString(writer.getFileStructure().analysisLog(), StandardCharsets.UTF_8);","175","    String content = FileUtils.readFileToString(writer.getFileStructure().analysisLog(), StandardCharsets.UTF_8);","186","    content = FileUtils.readFileToString(writer.getFileStructure().analysisLog(), StandardCharsets.UTF_8);","208","    assertThat(FileUtils.readFileToString(writer.getFileStructure().analysisLog(), StandardCharsets.UTF_8)).containsSubsequence(","215","  @Test","216","  public void shouldShortenModuleProperties() throws Exception {","217","    File baseDir = temp.newFolder();","218","    ScannerReportWriter writer = new ScannerReportWriter(temp.newFolder());","219","    publisher.init(writer);","220","","221","    assertThat(writer.getFileStructure().analysisLog()).exists();","222","","223","    publisher.dumpModuleSettings(new DefaultInputModule(ProjectDefinition.create()","224","      .setBaseDir(baseDir)","225","      .setWorkDir(temp.newFolder())","226","      .setProperty(\"sonar.projectKey\", \"foo\")","227","      .setProperty(\"sonar.projectBaseDir\", baseDir.toString())","228","      .setProperty(\"sonar.aVeryLongProp\", StringUtils.repeat(\"abcde\", 1000))));","229","","230","    assertThat(FileUtils.readFileToString(writer.getFileStructure().analysisLog(), StandardCharsets.UTF_8)).containsSubsequence(","231","      \"sonar.aVeryLongProp=\" + StringUtils.repeat(\"abcde\", 199) + \"ab...\",","232","      \"sonar.projectBaseDir=\" + baseDir.toString(),","233","      \"sonar.projectKey=foo\");","234","  }","235","","244","    assertThat(FileUtils.readFileToString(writer.getFileStructure().analysisLog(), StandardCharsets.UTF_8)).containsSubsequence(","273","    String content = FileUtils.readFileToString(writer.getFileStructure().analysisLog(), StandardCharsets.UTF_8);"],"delete":["22","import java.util.Arrays;","72","  public void prepare() throws Exception {","84","    when(pluginRepo.getPluginInfos()).thenReturn(Arrays.asList(new PluginInfo(\"xoo\").setName(\"Xoo\").setVersion(Version.create(\"1.0\"))));","90","    assertThat(FileUtils.readFileToString(writer.getFileStructure().analysisLog())).contains(\"Xoo 1.0 (xoo)\");","114","    String content = FileUtils.readFileToString(writer.getFileStructure().analysisLog());","130","    String content = FileUtils.readFileToString(writer.getFileStructure().analysisLog());","145","    String content = FileUtils.readFileToString(writer.getFileStructure().analysisLog());","156","    content = FileUtils.readFileToString(writer.getFileStructure().analysisLog());","172","    String content = FileUtils.readFileToString(writer.getFileStructure().analysisLog());","183","    content = FileUtils.readFileToString(writer.getFileStructure().analysisLog());","205","    assertThat(FileUtils.readFileToString(writer.getFileStructure().analysisLog())).containsSubsequence(","220","    assertThat(FileUtils.readFileToString(writer.getFileStructure().analysisLog())).containsSubsequence(","249","    String content = FileUtils.readFileToString(writer.getFileStructure().analysisLog());"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/AnalysisContextReportPublisher.java":[{"add":["31","import org.apache.commons.lang.StringUtils;","55","  private static final int MAX_WIDTH = 1000;","148","    fileWriter.append(String.format(KEY_VALUE_FORMAT, prop, sensitive(prop) ? \"******\" : StringUtils.abbreviate(value, MAX_WIDTH))).append('\\n');"],"delete":["31","","147","    fileWriter.append(String.format(KEY_VALUE_FORMAT, prop, sensitive(prop) ? \"******\" : value)).append('\\n');"]}]}},"45fe2d05b66ad79545b10fdd89a31fdc9ebb632a":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/test\/ws\/ListActionTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/test\/ws\/ListAction.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/test\/index\/TestIndexTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/test\/ws\/ListActionTest.java":[{"add":["27","import org.junit.rules.ExpectedException;","37","import org.sonar.server.exceptions.NotFoundException;","52","  public ExpectedException expectedException = ExpectedException.none();","53","  @Rule","55","  @Rule","56","  public DbTester db = DbTester.create(System2.INSTANCE);","59","  TestIndex testIndex;","205","  @Test","206","  public void fail_when_test_uuid_is_unknown() throws Exception {","207","    expectedException.expect(NotFoundException.class);","208","    expectedException.expectMessage(\"Test with id 'unknown-test-uuid' is not found\");","209","","210","    ws.newGetRequest(\"api\/tests\", \"list\")","211","      .setParam(ListAction.TEST_ID, \"unknown-test-uuid\")","212","      .execute();","213","  }","214",""],"delete":["46","  @Rule","47","  public DbTester db = DbTester.create(System2.INSTANCE);","48","","54","","56","  TestIndex testIndex;"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/test\/ws\/ListAction.java":[{"add":["52","import static org.sonar.server.ws.WsUtils.checkFoundWithOptional;","88","          \"<\/ul>\",","89","        TEST_ID, TEST_FILE_ID, TEST_FILE_KEY, SOURCE_FILE_ID, SOURCE_FILE_KEY, SOURCE_FILE_LINE_NUMBER))","147","      dbClient.closeSession(dbSession);","241","    TestDoc testDoc = checkFoundWithOptional(testIndex.getNullableByTestUuid(testUuid), \"Test with id '%s' is not found\", testUuid);","242","    checkComponentUuidPermission(dbSession, testDoc.fileUuid());"],"delete":["37","import org.sonar.db.MyBatis;","88","          \"<\/ul>\", TEST_ID, TEST_FILE_ID, TEST_FILE_KEY, SOURCE_FILE_ID, SOURCE_FILE_KEY, SOURCE_FILE_LINE_NUMBER))","146","      MyBatis.closeQuietly(dbSession);","240","    checkComponentUuidPermission(dbSession, testIndex.getByTestUuid(testUuid).fileUuid());"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/test\/index\/TestIndexTest.java":[{"add":["21","import com.google.common.base.Optional;","32","import static org.assertj.guava.api.Assertions.assertThat;","103","  public void getNullableByTestUuid() throws Exception {","104","    es.putDocuments(TestIndexDefinition.INDEX, TestIndexDefinition.TYPE,","105","      newTestDoc(\"1\", \"TESTFILE1\", newCoverageBlock(\"3\"), newCoverageBlock(\"4\"), newCoverageBlock(\"5\")),","106","      newTestDoc(\"2\", \"TESTFILE1\", newCoverageBlock(\"5\"), newCoverageBlock(\"6\"), newCoverageBlock(\"7\")));","107","","108","    Optional<TestDoc> result = underTest.getNullableByTestUuid(\"1\");","109","","110","    assertThat(result).isPresent();","111","    TestDoc test = result.get();","112","    assertThat(test.testUuid()).isEqualTo(\"1\");","113","    assertThat(test.fileUuid()).isEqualTo(\"TESTFILE1\");","114","    assertThat(test.name()).isEqualTo(\"name-1\");","115","    assertThat(test.durationInMs()).isEqualTo(1L);","116","    assertThat(test.status()).isEqualTo(\"status-1\");","117","    assertThat(test.message()).isEqualTo(\"message-1\");","118","    assertThat(test.coveredFiles()).hasSize(3);","119","    assertThat(test.coveredFiles()).extractingResultOf(\"fileUuid\").containsOnly(\"main-uuid-3\", \"main-uuid-4\", \"main-uuid-5\");","120","  }","121","","122","  @Test","123","  public void getNullableByTestUuid_with_absent_value() {","124","    Optional<TestDoc> result = underTest.getNullableByTestUuid(\"unknown-uuid\");","125","","126","    assertThat(result).isAbsent();","127","  }","128","","129","  @Test"],"delete":[]}]}},"2f2a4577f3b8f38dd6f279add2378010b4e7f5f8":{"changes":{"server\/sonar-web\/src\/main\/less\/components\/source.less":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/less\/components\/source.less":[{"add":["30","  min-height: 200px;","358","  right: 0;","362","  border-right: none;"],"delete":["357","  right: -1px;"]}]}},"d11fb8ece1a77f028a7ba95004df46ce725a0c00":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/settings\/__tests__\/DefinitionActions-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/inputs\/InputForPassword.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/inputs\/__tests__\/InputForPassword-test.js":"MODIFY","tests\/build.gradle":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/__tests__\/__snapshots__\/DefinitionActions-test.tsx.snap":"MODIFY","tests\/src\/test\/java\/org\/sonarqube\/tests\/settings\/SettingsSuite.java":"ADD","server\/sonar-qa-util\/src\/main\/java\/org\/sonarqube\/qa\/util\/pageobjects\/settings\/SettingsPage.java":"MODIFY","tests\/src\/test\/java\/org\/sonarqube\/tests\/settings\/ValidatorsTest.java":"ADD"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/settings\/__tests__\/DefinitionActions-test.tsx":[{"add":["76","      hasValueChanged={changedValue !== ''}"],"delete":["71","it('displays default value label when current value differs', () => {","72","  const wrapper = shallowRender('foobar', true, false);","73","  expect(wrapper).toMatchSnapshot();","74","});","75",""]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/inputs\/InputForPassword.js":[{"add":["31","  componentWillReceiveProps(nextProps \/*: Props*\/) {","32","    if (!nextProps.hasValueChanged && this.props.hasValueChanged) {","33","      this.setState({ changing: false, value: '' });","34","    }","35","  }","36","","38","    this.props.onChange(e.target.value);","39","    this.setState({ changing: true, value: e.target.value });","50","      <form>","51","        <input className=\"hidden\" type=\"password\" \/>","52","        <input","53","          autoComplete=\"off\"","54","          autoFocus={this.state.changing}","55","          className=\"js-password-input settings-large-input text-top\"","56","          name={this.props.name}","57","          onChange={e => this.handleInputChange(e)}","58","          type=\"password\"","59","          value={this.state.value}","60","        \/>","61","      <\/form>","66","    const hasValue = !!this.props.value;","67","","68","    if (this.state.changing || !hasValue) {","74","        <i className=\"big-spacer-right icon-lock icon-gray\" \/>","75","        <button onClick={e => this.handleChangeClick(e)}>{translate('change_verb')}<\/button>"],"delete":["32","    this.setState({ value: e.target.value });","41","  handleCancelChangeClick(e) {","42","    e.preventDefault();","43","    e.target.blur();","44","    this.setState({ changing: false, value: '' });","45","  }","46","","47","  handleFormSubmit(e) {","48","    e.preventDefault();","49","    this.props.onChange(this.state.value);","50","    this.setState({ changing: false, value: '' });","51","  }","52","","55","      <div>","56","        <form onSubmit={e => this.handleFormSubmit(e)}>","57","          <input className=\"hidden\" type=\"password\" \/>","58","          <input","59","            value={this.state.value}","60","            name={this.props.name}","61","            className=\"js-password-input settings-large-input text-top\"","62","            type=\"password\"","63","            autoFocus={true}","64","            autoComplete={false}","65","            onChange={e => this.handleInputChange(e)}","66","          \/>","67","","68","          <button className=\"spacer-left button-success\">{translate('save')}<\/button>","69","","70","          <a className=\"spacer-left\" href=\"#\" onClick={e => this.handleCancelChangeClick(e)}>","71","            {translate('cancel')}","72","          <\/a>","73","        <\/form>","74","      <\/div>","79","    if (this.state.changing) {","83","    const hasValue = !!this.props.value;","84","","87","        {hasValue && <i className=\"big-spacer-right icon-lock icon-gray\" \/>}","88","","89","        <button onClick={e => this.handleChangeClick(e)}>","90","          {hasValue ? translate('change_verb') : translate('set')}","91","        <\/button>"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/inputs\/__tests__\/InputForPassword-test.js":[{"add":[],"delete":["45","it('should close form', () => {","46","  const onChange = jest.fn();","47","  const input = shallow(","48","    <InputForPassword name=\"foo\" value=\"bar\" isDefault={false} onChange={onChange} \/>","49","  );","50","  const button = input.find('button');","51","  expect(button.length).toBe(1);","52","","53","  click(button);","54","  expect(input.find('form').length).toBe(1);","55","","56","  click(input.find('form').find('a'));","57","  expect(input.find('form').length).toBe(0);","58","});","59",""]}],"tests\/build.gradle":[{"add":["104","        includeTestsMatching 'org.sonarqube.tests.settings.*Suite'"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/__tests__\/__snapshots__\/DefinitionActions-test.tsx.snap":[{"add":["84","      className=\"spacer-right\"","87","      reset_verb"],"delete":["5","    className=\"spacer-top note\"","6","    style={","7","      Object {","8","        \"lineHeight\": \"24px\",","9","      }","10","    }","11","  >","12","    settings._default","13","  <\/div>","14","  <div","37","    className=\"spacer-top note\"","38","    style={","39","      Object {","40","        \"lineHeight\": \"24px\",","41","      }","42","    }","43","  >","44","    settings._default","45","  <\/div>","46","  <div","69","    className=\"spacer-top note\"","70","    style={","71","      Object {","72","        \"lineHeight\": \"24px\",","73","      }","74","    }","75","  >","76","    settings._default","77","  <\/div>","78","  <div","114","      className=\"spacer-right button-success\"","115","      disabled={false}","118","      save","119","    <\/Button>","120","    <Button","121","      className=\"spacer-right button-link\"","122","      onClick={[Function]}","123","    >","124","      cancel","125","    <\/Button>","126","  <\/div>","127","<\/React.Fragment>","128","`;","129","","130","exports[`displays default value label when current value differs 1`] = `","131","<React.Fragment>","132","  <div","133","    className=\"settings-definition-changes nowrap\"","134","  >","135","    <Button","136","      className=\"spacer-right button-success\"","137","      disabled={true}","138","      onClick={[Function]}","139","    >","140","      save","141","    <\/Button>","142","    <Button","143","      className=\"spacer-right button-link\"","144","      onClick={[Function]}","145","    >","146","      cancel","165","      className=\"spacer-right button-success\"","166","      disabled={true}","167","      onClick={[Function]}","168","    >","169","      save","170","    <\/Button>","171","    <Button","177","    <Button","178","      className=\"spacer-right button-link\"","179","      onClick={[Function]}","180","    >","181","      cancel","182","    <\/Button>","197","    className=\"spacer-top note\"","198","    style={","199","      Object {","200","        \"lineHeight\": \"24px\",","201","      }","202","    }","203","  >","204","    settings._default","205","  <\/div>","206","  <div"]}],"tests\/src\/test\/java\/org\/sonarqube\/tests\/settings\/SettingsSuite.java":[{"add":[],"delete":[]}],"server\/sonar-qa-util\/src\/main\/java\/org\/sonarqube\/qa\/util\/pageobjects\/settings\/SettingsPage.java":[{"add":["25","import org.openqa.selenium.Keys;","26","","27","import static com.codeborne.selenide.Selectors.byText;","60","  public SettingsPage assertSettingValueIsNotedAsDefault(String settingKey) {","61","    Selenide.$(\"[data-key=\\\"\" + settingKey + \"\\\"]\").find(\".spacer-top.note\")","62","      .shouldBe(Condition.text(\"(default)\"));","63","    return this;","64","  }","65","","76","  public SettingsPage assertSettingValueCanBeSaved(String settingKey) {","77","    Selenide.$(\"[data-key=\\\"\" + settingKey + \"\\\"]\").find(byText(\"Save\"))","78","      .should(Condition.exist)","79","      .shouldNotBe(Condition.attribute(\"disabled\"));","80","    return this;","81","  }","82","","83","  public SettingsPage assertSettingValueCannotBeSaved(String settingKey) {","84","    Selenide.$(\"[data-key=\\\"\" + settingKey + \"\\\"]\").find(byText(\"Save\"))","85","      .should(Condition.exist)","86","      .shouldBe(Condition.attribute(\"disabled\"));","87","    return this;","88","  }","89","","90","  public SettingsPage assertSettingValueCanBeReset(String settingKey) {","91","    Selenide.$(\"[data-key=\\\"\" + settingKey + \"\\\"]\").find(byText(\"Reset\"))","92","      .should(Condition.exist);","93","    return this;","94","  }","95","","96","  public SettingsPage assertSettingValueCanBeCanceled(String settingKey) {","97","    Selenide.$(\"[data-key=\\\"\" + settingKey + \"\\\"]\").find(byText(\"Cancel\"))","98","      .should(Condition.exist);","99","    return this;","100","  }","101","","102","  public SettingsPage assertInputCount(String settingKey, int count) {","103","    Selenide.$(\"[data-key=\\\"\" + settingKey + \"\\\"]\").findAll(\"input\").shouldHaveSize(count);","104","    return this;","105","  }","106","","107","  public SettingsPage changeSettingValue(String settingKey, String value) {","108","    Selenide.$(\"[data-key=\\\"\" + settingKey + \"\\\"]\").find(\"input\").val(value);","109","    return this;","110","  }","111","","112","  public SettingsPage changeSettingValue(String settingKey, int index, String value) {","113","    Selenide.$(\"[data-key=\\\"\" + settingKey + \"\\\"]\").findAll(\"input\").get(index).val(value);","114","    return this;","115","  }","116","","117","  public SettingsPage clickOnCancel(String settingKey) {","118","    Selenide.$(\"[data-key=\\\"\" + settingKey + \"\\\"]\").find(byText(\"Cancel\")).click();","119","    return this;","120","  }","121","","122","  public SettingsPage removeFirstValue(String settingKey) {","123","    Selenide.$(\"[data-key=\\\"\" + settingKey + \"\\\"]\").find(\".button.js-remove-value.button-icon\").click();","124","    return this;","125","  }","126","","127","  public SettingsPage sendDeleteKeyToSettingField(String settingKey) {","128","    Selenide.$(\"[data-key=\\\"\" + settingKey + \"\\\"]\").find(\"input\").sendKeys(Keys.BACK_SPACE);","129","    return this;","130","  }","131",""],"delete":[]}],"tests\/src\/test\/java\/org\/sonarqube\/tests\/settings\/ValidatorsTest.java":[{"add":[],"delete":[]}]}},"76558f8bb1c7c7fff227e343d764656e97094453":{"changes":{"server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v67\/CleanupDisabledUsersTest\/users.sql":"ADD","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v67\/DbVersion67Test.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v67\/DbVersion67.java":"MODIFY","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v67\/CleanupDisabledUsersTest.java":"ADD","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v67\/CleanupDisabledUsers.java":"ADD"},"diff":{"server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v67\/CleanupDisabledUsersTest\/users.sql":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v67\/DbVersion67Test.java":[{"add":["38","    verifyMigrationCount(underTest, 4);"],"delete":["38","    verifyMigrationCount(underTest, 3);"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v67\/DbVersion67.java":[{"add":["31","      .add(1833, \"Cleanup disabled users\", CleanupDisabledUsers.class)"],"delete":[]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v67\/CleanupDisabledUsersTest.java":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v67\/CleanupDisabledUsers.java":[{"add":[],"delete":[]}]}},"b085c7e3887dbca984d0211edf1c93a08972fced":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/controller.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/controller.js":[{"add":["24","import throwGlobalError from '..\/..\/app\/utils\/throwGlobalError';","62","    return $.get(url, options)","63","      .done(r => {","64","        const rules = that.app.list.parseRules(r);","65","        if (firstPage) {","66","          that.app.list.reset(rules);","67","        } else {","68","          that.app.list.add(rules);","69","        }","70","        that.app.list.setIndex();","71","        that.app.list.addExtraAttributes(that.app.repositories);","72","        that.app.facets.reset(that._allFacets());","73","        that.app.facets.add(r.facets, { merge: true });","74","        that.enableFacets(that._enabledFacets());","75","        that.app.state.set({","76","          page: r.p,","77","          pageSize: r.ps,","78","          total: r.total,","79","          maxResultsReached: r.p * r.ps >= r.total","80","        });","81","        if (firstPage && that.isRulePermalink()) {","82","          that.showDetails(that.app.list.first());","83","        }","84","      })","85","      .fail(error => {","86","        this.app.state.set({ maxResultsReached: true });","87","        throwGlobalError(error);"],"delete":["61","    return $.get(url, options).done(r => {","62","      const rules = that.app.list.parseRules(r);","63","      if (firstPage) {","64","        that.app.list.reset(rules);","65","      } else {","66","        that.app.list.add(rules);","67","      }","68","      that.app.list.setIndex();","69","      that.app.list.addExtraAttributes(that.app.repositories);","70","      that.app.facets.reset(that._allFacets());","71","      that.app.facets.add(r.facets, { merge: true });","72","      that.enableFacets(that._enabledFacets());","73","      that.app.state.set({","74","        page: r.p,","75","        pageSize: r.ps,","76","        total: r.total,","77","        maxResultsReached: r.p * r.ps >= r.total","79","      if (firstPage && that.isRulePermalink()) {","80","        that.showDetails(that.app.list.first());","81","      }","82","    });"]}]}},"27f9120cef1ffe43e71e8b8dd3198c9526c88984":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/component\/NewComponentTest.java":"ADD","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/component\/NewComponent.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/component\/NewComponentTest.java":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/component\/NewComponent.java":[{"add":["23","import org.sonar.api.resources.Qualifiers;","24","","25","import static com.google.common.base.Preconditions.checkArgument;","29","  private static final int MAX_KEY_LENGHT = 400;","30","  private static final int MAX_NAME_LENGTH = 2000;","31","  private static final int MAX_QUALIFIER_LENGTH = 10;","65","    if (qualifier != null) {","66","      checkArgument(qualifier.length() <= MAX_QUALIFIER_LENGTH,","67","        \"Component qualifier length (%s) is longer than the maximum authorized (%s)\", qualifier.length(), MAX_QUALIFIER_LENGTH);","68","    }","69","","75","    checkArgument(key != null, \"Key can't be null\");","76","    checkArgument(key.length() <= MAX_KEY_LENGHT, \"Component key length (%s) is longer than the maximum authorized (%s)\", key.length(), MAX_KEY_LENGHT);","77","    checkArgument(name != null, \"Name can't be null\");","78","    checkArgument(name.length() <= MAX_NAME_LENGTH, \"Component name length (%s) is longer than the maximum authorized (%s)\", name.length(), MAX_NAME_LENGTH);"],"delete":["21","import com.google.common.base.Preconditions;","22","import org.sonar.api.resources.Qualifiers;","23","","67","    Preconditions.checkNotNull(key, \"Key can't be null\");","68","    Preconditions.checkNotNull(name, \"Name can't be null\");"]}]}},"0c2f6292c648f0ab951f6fe2700d6e445464e3bf":{"changes":{"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/permission\/ws\/AddGroupAction.java":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/permission\/ws\/WsParameters.java":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/permission\/ws\/AddUserAction.java":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/permission\/ws\/RemoveGroupAction.java":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/permission\/ws\/RemoveUserAction.java":"MODIFY"},"diff":{"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/permission\/ws\/AddGroupAction.java":[{"add":["68","      .setDescription(\"Add a permission to a group.<br \/> \" +","82","    wsParameters.createPermissionParameter(action, \"The permission you would like to grant to the group.\");"],"delete":["68","      .setDescription(\"Add permission to a group.<br \/> \" +","82","    wsParameters.createPermissionParameter(action);"]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/permission\/ws\/WsParameters.java":[{"add":["50","    permissionParamDescription = String.format(\"<ul>\" +","51","        \"<li>Possible values for global permissions: %s<\/li>\" +","52","        \"<li>Possible values for project permissions %s<\/li>\" +","53","        \"<\/ul>\",","57","        \"<ul>\" +","58","        \"<li>Possible values for project permissions %s<\/li>\" +","59","        \"<\/ul>\",","64","    return createPermissionParameter(action, \"Permission.\");","65","  }","66","","67","  public WebService.NewParam createPermissionParameter(WebService.NewAction action, String descriptionHeader) {","69","      .setDescription(descriptionHeader + permissionParamDescription)"],"delete":["50","    permissionParamDescription = String.format(\"Permission\" +","51","      \"<ul>\" +","52","      \"<li>Possible values for global permissions: %s<\/li>\" +","53","      \"<li>Possible values for project permissions %s<\/li>\" +","54","      \"<\/ul>\",","58","      \"<ul>\" +","59","      \"<li>Possible values for project permissions %s<\/li>\" +","60","      \"<\/ul>\",","66","      .setDescription(permissionParamDescription)"]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/permission\/ws\/AddUserAction.java":[{"add":["86","    wsParameters.createPermissionParameter(action, \"The permission you would like to grant to the user\");"],"delete":["86","    wsParameters.createPermissionParameter(action);"]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/permission\/ws\/RemoveGroupAction.java":[{"add":["82","    wsParameters.createPermissionParameter(action, \"The permission you would like to revoke from the group.\");"],"delete":["82","    wsParameters.createPermissionParameter(action);"]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/permission\/ws\/RemoveUserAction.java":[{"add":["80","    wsParameters.createPermissionParameter(action, \"The permission you would like to revoke from the user.\");"],"delete":["80","    wsParameters.createPermissionParameter(action);"]}]}},"3254f4804263e94f81d696e717322c1460d5b737":{"changes":{"sonar-ws\/src\/test\/java\/org\/sonarqube\/ws\/client\/rule\/RulesServiceTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualityprofile\/ws\/BulkRuleActivationActions.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/platformlevel\/PlatformLevel4.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/qualityprofile\/ws\/QProfilesWsTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/ws\/RuleQueryFactoryTest.java":"ADD","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/ws\/SearchAction.java":"MODIFY","server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/qualityprofile\/ws\/QProfilesWsMediumTest\/bulk_activate_rule.json":"ADD","sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/rule\/RulesService.java":"MODIFY","server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/qualityprofile\/ws\/QProfilesWsMediumTest\/bulk_activate_rule_not_all.json":"ADD","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/ws\/RuleQueryFactory.java":"ADD","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/qualityprofile\/ws\/QProfilesWsMediumTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/index\/RuleIndexTest.java":"MODIFY","server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/qualityprofile\/ws\/QProfilesWsMediumTest\/does_not_return_warnings_when_bulk_activate_on_profile_and_rules_exist_on_another_language_than_profile.json":"ADD"},"diff":{"sonar-ws\/src\/test\/java\/org\/sonarqube\/ws\/client\/rule\/RulesServiceTest.java":[{"add":["42","import static org.sonarqube.ws.client.rule.RulesWsParameters.PARAM_RULE_KEY;"],"delete":["39","import static org.sonarqube.ws.client.rule.RulesWsParameters.PARAM_RULE_KEY;"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualityprofile\/ws\/BulkRuleActivationActions.java":[{"add":["31","import org.sonar.server.rule.ws.RuleQueryFactory;","34","import static org.sonar.server.rule.ws.SearchAction.defineRuleSearchParameters;","46","  private final RuleQueryFactory ruleQueryFactory;","50","  public BulkRuleActivationActions(QProfileService profileService, RuleQueryFactory ruleQueryFactory, I18n i18n, UserSession userSession) {","52","    this.ruleQueryFactory = ruleQueryFactory;","75","    defineRuleSearchParameters(activate);","96","    defineRuleSearchParameters(deactivate);","109","      ruleQueryFactory.createRuleQuery(request),","117","      ruleQueryFactory.createRuleQuery(request),"],"delete":["22","import org.sonar.api.rule.RuleStatus;","24","import org.sonar.api.rules.RuleType;","30","import org.sonar.api.server.ws.WebService.Param;","32","import org.sonar.db.DbClient;","35","import org.sonar.server.rule.RuleService;","36","import org.sonar.server.rule.index.RuleQuery;","37","import org.sonar.server.rule.ws.SearchAction;","40","import static org.sonarqube.ws.client.rule.RulesWsParameters.PARAM_ACTIVATION;","41","import static org.sonarqube.ws.client.rule.RulesWsParameters.PARAM_ACTIVE_SEVERITIES;","42","import static org.sonarqube.ws.client.rule.RulesWsParameters.PARAM_AVAILABLE_SINCE;","43","import static org.sonarqube.ws.client.rule.RulesWsParameters.PARAM_INHERITANCE;","44","import static org.sonarqube.ws.client.rule.RulesWsParameters.PARAM_IS_TEMPLATE;","45","import static org.sonarqube.ws.client.rule.RulesWsParameters.PARAM_LANGUAGES;","46","import static org.sonarqube.ws.client.rule.RulesWsParameters.PARAM_QPROFILE;","47","import static org.sonarqube.ws.client.rule.RulesWsParameters.PARAM_REPOSITORIES;","48","import static org.sonarqube.ws.client.rule.RulesWsParameters.PARAM_RULE_KEY;","49","import static org.sonarqube.ws.client.rule.RulesWsParameters.PARAM_SEVERITIES;","50","import static org.sonarqube.ws.client.rule.RulesWsParameters.PARAM_STATUSES;","51","import static org.sonarqube.ws.client.rule.RulesWsParameters.PARAM_TAGS;","52","import static org.sonarqube.ws.client.rule.RulesWsParameters.PARAM_TEMPLATE_KEY;","53","import static org.sonarqube.ws.client.rule.RulesWsParameters.PARAM_TYPES;","64","  private final DbClient dbClient;","66","  private final RuleService ruleService;","70","  public BulkRuleActivationActions(DbClient dbClient, QProfileService profileService, RuleService ruleService, I18n i18n, UserSession userSession) {","71","    this.dbClient = dbClient;","73","    this.ruleService = ruleService;","96","    SearchAction.defineRuleSearchParameters(activate);","117","    SearchAction.defineRuleSearchParameters(deactivate);","130","      createRuleQuery(ruleService.newRuleQuery(), request),","137","    \/\/ TODO filter on rule language","139","      createRuleQuery(ruleService.newRuleQuery(), request),","144","  private static RuleQuery createRuleQuery(RuleQuery query, Request request) {","145","    query.setQueryText(request.param(Param.TEXT_QUERY));","146","    query.setSeverities(request.paramAsStrings(PARAM_SEVERITIES));","147","    query.setRepositories(request.paramAsStrings(PARAM_REPOSITORIES));","148","    query.setAvailableSince(request.hasParam(PARAM_AVAILABLE_SINCE) ? request.paramAsDate(PARAM_AVAILABLE_SINCE).getTime() : null);","149","    query.setStatuses(request.paramAsEnums(PARAM_STATUSES, RuleStatus.class));","150","    query.setLanguages(request.paramAsStrings(PARAM_LANGUAGES));","151","    query.setActivation(request.paramAsBoolean(PARAM_ACTIVATION));","152","    query.setQProfileKey(request.param(PARAM_QPROFILE));","153","    query.setTags(request.paramAsStrings(PARAM_TAGS));","154","    query.setInheritance(request.paramAsStrings(PARAM_INHERITANCE));","155","    query.setActiveSeverities(request.paramAsStrings(PARAM_ACTIVE_SEVERITIES));","156","    query.setIsTemplate(request.paramAsBoolean(PARAM_IS_TEMPLATE));","157","    query.setTemplateKey(request.param(PARAM_TEMPLATE_KEY));","158","    query.setTypes(request.paramAsEnums(PARAM_TYPES, RuleType.class));","159","    query.setKey(request.param(PARAM_RULE_KEY));","160","","161","    String sortParam = request.param(Param.SORT);","162","    if (sortParam != null) {","163","      query.setSortField(sortParam);","164","      query.setAscendingSort(request.mandatoryParamAsBoolean(Param.ASCENDING));","165","    }","166","    return query;","167","  }","168",""]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/platformlevel\/PlatformLevel4.java":[{"add":["253","import org.sonar.server.rule.ws.RuleQueryFactory;","445","      RuleQueryFactory.class,"],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/qualityprofile\/ws\/QProfilesWsTest.java":[{"add":["61","      new BulkRuleActivationActions(profileService, null, i18n, userSessionRule),","79","      new RenameAction(null, userSessionRule))).controller(QProfilesWs.API_ENDPOINT);","235","      \"profileKey\", \"profileName\", \"language\", \"since\", \"to\", \"p\", \"ps\");","245","      \"profileKey\", \"profileName\", \"language\", \"parentKey\", \"parentName\");","255","      \"leftKey\", \"rightKey\");","265","      \"fromKey\", \"toName\");","274","      \"profileKey\", \"language\", \"profileName\");","283","      \"language\", \"name\");","301","      \"profileKey\", \"language\", \"profileName\");","311","      \"key\", \"name\");"],"delete":["35","import org.sonar.server.rule.RuleService;","54","    RuleService ruleService = mock(RuleService.class);","63","      new BulkRuleActivationActions(null, profileService, ruleService, i18n, userSessionRule),","81","      new RenameAction(null, userSessionRule)","82","      )).controller(QProfilesWs.API_ENDPOINT);","238","      \"profileKey\", \"profileName\", \"language\", \"since\", \"to\", \"p\", \"ps\"","239","      );","249","      \"profileKey\", \"profileName\", \"language\", \"parentKey\", \"parentName\"","250","      );","260","      \"leftKey\", \"rightKey\"","261","      );","271","      \"fromKey\", \"toName\"","272","      );","281","      \"profileKey\", \"language\", \"profileName\"","282","      );","291","      \"language\", \"name\"","292","      );","310","      \"profileKey\", \"language\", \"profileName\"","311","      );","321","      \"key\", \"name\"","322","      );"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/ws\/RuleQueryFactoryTest.java":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/ws\/SearchAction.java":[{"add":["99","  private final RuleQueryFactory ruleQueryFactory;","105","  public SearchAction(RuleIndex ruleIndex, ActiveRuleCompleter activeRuleCompleter, RuleQueryFactory ruleQueryFactory, DbClient dbClient, RuleMapper mapper) {","108","    this.ruleQueryFactory = ruleQueryFactory;","150","      RuleQuery query = ruleQueryFactory.createRuleQuery(request);","152","      SearchResponse responseBuilder = buildResponse(dbSession, searchWsRequest, context, searchResult, query);","159","  private SearchResponse buildResponse(DbSession dbSession, SearchWsRequest request, SearchOptions context, SearchResult result, RuleQuery query) {","162","    doContextResponse(dbSession, request, result, responseBuilder, query);","378","  protected void doContextResponse(DbSession dbSession, SearchWsRequest request, SearchResult result, SearchResponse.Builder response, RuleQuery query) {","382","      activeRuleCompleter.completeSearch(dbSession, query, result.rules, response);"],"delete":["24","import com.google.common.collect.ImmutableList;","52","import org.sonar.db.qualityprofile.QualityProfileDto;","67","import static org.sonar.api.utils.DateUtils.parseDate;","77","import static org.sonar.server.util.EnumUtils.toEnums;","108","  public SearchAction(RuleIndex ruleIndex, ActiveRuleCompleter activeRuleCompleter, DbClient dbClient, RuleMapper mapper) {","152","      RuleQuery query = doQuery(searchWsRequest);","154","      SearchResponse responseBuilder = buildResponse(dbSession, searchWsRequest, context, searchResult);","161","  private SearchResponse buildResponse(DbSession dbSession, SearchWsRequest request, SearchOptions context, SearchResult result) {","164","    doContextResponse(dbSession, request, result, responseBuilder);","313","  private static RuleQuery createRuleQuery(RuleQuery query, SearchWsRequest request) {","314","    query.setQueryText(request.getQuery());","315","    query.setSeverities(request.getSeverities());","316","    query.setRepositories(request.getRepositories());","317","    query.setAvailableSince(request.getAvailableSince() != null ? parseDate(request.getAvailableSince()).getTime() : null);","318","    query.setStatuses(toEnums(request.getStatuses(), RuleStatus.class));","319","    query.setLanguages(request.getLanguages());","320","    query.setActivation(request.getActivation());","321","    query.setQProfileKey(request.getQProfile());","322","    query.setTags(request.getTags());","323","    query.setInheritance(request.getInheritance());","324","    query.setActiveSeverities(request.getActiveSeverities());","325","    query.setIsTemplate(request.getIsTemplate());","326","    query.setTemplateKey(request.getTemplateKey());","327","    query.setTypes(toEnums(request.getTypes(), RuleType.class));","328","    query.setKey(request.getRuleKey());","329","","330","    String sortParam = request.getSort();","331","    if (sortParam != null) {","332","      query.setSortField(sortParam);","333","      query.setAscendingSort(request.getAsc());","334","    }","335","    return query;","336","  }","337","","345","    \/\/ TODO Get rid of this horrible hack: fields on request are not the same as fields for ES search ! 1\/2","406","  protected RuleQuery doQuery(SearchWsRequest request) {","407","    RuleQuery plainQuery = createRuleQuery(new RuleQuery(), request);","408","","409","    String qProfileKey = request.getQProfile();","410","    if (qProfileKey != null) {","411","      QualityProfileDto qProfile = activeRuleCompleter.loadProfile(qProfileKey);","412","      if (qProfile != null) {","413","        plainQuery.setLanguages(ImmutableList.of(qProfile.getLanguage()));","414","      }","415","    }","416","","417","    return plainQuery;","418","  }","419","","420","  protected void doContextResponse(DbSession dbSession, SearchWsRequest request, SearchResult result, SearchResponse.Builder response) {","421","    \/\/ TODO Get rid of this horrible hack: fields on request are not the same as fields for ES search ! 2\/2","425","      activeRuleCompleter.completeSearch(dbSession, doQuery(request), result.rules, response);","602","  private enum TypeToString implements Function<RuleType, String> {","603","    INSTANCE;","604","","605","    @Override","606","    public String apply(@Nonnull RuleType input) {","607","      return input.name();","608","    }","609","","610","  }"]}],"server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/qualityprofile\/ws\/QProfilesWsMediumTest\/bulk_activate_rule.json":[{"add":[],"delete":[]}],"sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/rule\/RulesService.java":[{"add":["35","import static org.sonarqube.ws.client.rule.RulesWsParameters.PARAM_RULE_KEY;"],"delete":["32","import static org.sonarqube.ws.client.rule.RulesWsParameters.PARAM_RULE_KEY;"]}],"server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/qualityprofile\/ws\/QProfilesWsMediumTest\/bulk_activate_rule_not_all.json":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/ws\/RuleQueryFactory.java":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/qualityprofile\/ws\/QProfilesWsMediumTest.java":[{"add":["58","import static org.sonarqube.ws.client.rule.RulesWsParameters.PARAM_QPROFILE;","272","    createRule(profile.getLanguage(), \"toto\");","273","    createRule(profile.getLanguage(), \"tata\");","274","    createRule(profile.getLanguage(), \"hello\");","275","    createRule(profile.getLanguage(), \"world\");","286","    request.execute().assertJson(getClass(), \"bulk_activate_rule.json\");","297","    createRule(java.getLanguage(), \"toto\");","298","    createRule(java.getLanguage(), \"tata\");","299","    createRule(php.getLanguage(), \"hello\");","300","    createRule(php.getLanguage(), \"world\");","311","    request.execute().assertJson(getClass(), \"bulk_activate_rule_not_all.json\");","321","    createRule(profile.getLanguage(), \"toto\");","322","    createRule(profile.getLanguage(), \"tata\");","323","    createRule(profile.getLanguage(), \"hello\");","324","    createRule(profile.getLanguage(), \"world\");","335","    request.execute();","345","    request.execute();","378","  }","380","  @Test","381","  public void does_not_return_warnings_when_bulk_activate_on_profile_and_rules_exist_on_another_language_than_profile() throws Exception {","382","    QualityProfileDto javaProfile = createProfile(\"java\");","383","    createRule(javaProfile.getLanguage(), \"toto\");","384","    createRule(javaProfile.getLanguage(), \"tata\");","385","    QualityProfileDto phpProfile = createProfile(\"php\");","386","    createRule(phpProfile.getLanguage(), \"hello\");","387","    createRule(phpProfile.getLanguage(), \"world\");","388","    session.commit();","389","    ruIndexer.index();","390","","391","    \/\/ 1. Activate Rule","392","    WsTester.TestRequest request = wsTester.newPostRequest(QProfilesWs.API_ENDPOINT, BulkRuleActivationActions.BULK_ACTIVATE_ACTION);","393","    request.setParam(RuleActivationActions.PROFILE_KEY, javaProfile.getKey());","394","    request.setParam(PARAM_QPROFILE, javaProfile.getKey());","395","    request.setParam(\"activation\", \"false\");","396","    request.execute().assertJson(getClass(), \"does_not_return_warnings_when_bulk_activate_on_profile_and_rules_exist_on_another_language_than_profile.json\");","397","    session.clearCache();","398","","399","    \/\/ 2. Assert ActiveRule in DAO","400","    assertThat(db.activeRuleDao().selectByProfileKey(session, javaProfile.getKey())).hasSize(2);"],"delete":["271","    RuleDto rule0 = createRule(profile.getLanguage(), \"toto\");","272","    RuleDto rule1 = createRule(profile.getLanguage(), \"tata\");","273","    RuleDto rule2 = createRule(profile.getLanguage(), \"hello\");","274","    RuleDto rule3 = createRule(profile.getLanguage(), \"world\");","285","    WsTester.Result result = request.execute();","296","    RuleDto rule0 = createRule(java.getLanguage(), \"toto\");","297","    RuleDto rule1 = createRule(java.getLanguage(), \"tata\");","298","    RuleDto rule2 = createRule(php.getLanguage(), \"hello\");","299","    RuleDto rule3 = createRule(php.getLanguage(), \"world\");","310","    WsTester.Result result = request.execute();","320","    RuleDto rule0 = createRule(profile.getLanguage(), \"toto\");","321","    RuleDto rule1 = createRule(profile.getLanguage(), \"tata\");","322","    RuleDto rule2 = createRule(profile.getLanguage(), \"hello\");","323","    RuleDto rule3 = createRule(profile.getLanguage(), \"world\");","334","    WsTester.Result result = request.execute();","344","    result = request.execute();"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/index\/RuleIndexTest.java":[{"add":["255","      newDoc(RULE_KEY_4).setType(BUG));","266","    assertThat(index.search(query, new SearchOptions()).getIds()).containsOnly(RULE_KEY_3, RULE_KEY_4);","459","        .hasSize(3);","464","        .containsOnly(RULE_KEY_4);","471","        .isEmpty();","478","        .hasSize(2);","485","        .isEmpty();","492","        .hasSize(1);","499","        .isEmpty();","506","        .hasSize(3);","624","    result = index.search(new RuleQuery().setLanguages(ImmutableList.of(\"cpp\")), new SearchOptions().addFacets(asList(FACET_LANGUAGES, FACET_REPOSITORIES, FACET_TAGS)));","635","      .setTags(ImmutableList.of(\"T2\")), new SearchOptions().addFacets(asList(FACET_LANGUAGES, FACET_REPOSITORIES, FACET_TAGS)));","650","      .setTypes(asList(BUG, CODE_SMELL)), new SearchOptions().addFacets(asList(FACET_LANGUAGES, FACET_REPOSITORIES, FACET_TAGS, FACET_TYPES)));","749","  @Test","750","  public void search_all_keys_by_profile() {","751","    indexRules(","752","      newDoc(RULE_KEY_1),","753","      newDoc(RULE_KEY_2),","754","      newDoc(RULE_KEY_3));","755","","756","    indexActiveRules(","757","      ActiveRuleDocTesting.newDoc(ActiveRuleKey.of(QUALITY_PROFILE_KEY1, RULE_KEY_1)),","758","      ActiveRuleDocTesting.newDoc(ActiveRuleKey.of(QUALITY_PROFILE_KEY2, RULE_KEY_1)),","759","      ActiveRuleDocTesting.newDoc(ActiveRuleKey.of(QUALITY_PROFILE_KEY1, RULE_KEY_2)));","760","","761","    assertThat(tester.countDocuments(INDEX, TYPE_ACTIVE_RULE)).isEqualTo(3);","762","","763","    \/\/ 1. get all active rules.","764","    assertThat(index.searchAll(new RuleQuery().setActivation(true))).containsOnly(RULE_KEY_1, RULE_KEY_2);","765","","766","    \/\/ 2. get all inactive rules.","767","    assertThat(index.searchAll(new RuleQuery().setActivation(false))).containsOnly(RULE_KEY_3);","768","","769","    \/\/ 3. get all rules not active on profile","770","    assertThat(index.searchAll(new RuleQuery().setActivation(false).setQProfileKey(QUALITY_PROFILE_KEY2))).containsOnly(RULE_KEY_2, RULE_KEY_3);","771","","772","    \/\/ 4. get all active rules on profile","773","    assertThat(index.searchAll(new RuleQuery().setActivation(true).setQProfileKey(QUALITY_PROFILE_KEY2))).containsOnly(RULE_KEY_1);","774","  }","775",""],"delete":["255","      newDoc(RULE_KEY_4).setType(BUG)","256","    );","267","    assertThat(index.search(query, new SearchOptions()).getIds()).containsOnly(RULE_KEY_3,RULE_KEY_4);","460","      .hasSize(3);","465","      .containsOnly(RULE_KEY_4);","472","      .isEmpty();","479","      .hasSize(2);","486","      .isEmpty();","493","      .hasSize(1);","500","      .isEmpty();","507","      .hasSize(3);","625","    result = index.search(new RuleQuery().setLanguages(ImmutableList.of(\"cpp\"))","626","      , new SearchOptions().addFacets(asList(FACET_LANGUAGES, FACET_REPOSITORIES, FACET_TAGS)));","637","      .setTags(ImmutableList.of(\"T2\"))","638","      , new SearchOptions().addFacets(asList(FACET_LANGUAGES, FACET_REPOSITORIES, FACET_TAGS)));","653","      .setTypes(asList(BUG, CODE_SMELL))","654","      , new SearchOptions().addFacets(asList(FACET_LANGUAGES, FACET_REPOSITORIES, FACET_TAGS, FACET_TYPES)));"]}],"server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/qualityprofile\/ws\/QProfilesWsMediumTest\/does_not_return_warnings_when_bulk_activate_on_profile_and_rules_exist_on_another_language_than_profile.json":[{"add":[],"delete":[]}]}},"e314496d2198c3d827dd7baa7ec1c8fe5a4f6fb1":{"changes":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/dashboard\/configure.html.erb":"MODIFY","server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/server_id_configuration\/index.html.erb":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/dashboard\/configure.html.erb":[{"add":["61","    portal.highlightWidget('<%= escape_javascript(params[:highlight]) -%>');"],"delete":["61","    portal.highlightWidget(<%= escape_javascript(params[:highlight]) -%>);"]}],"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/server_id_configuration\/index.html.erb":[{"add":["10","            <span class=\"<%= @bad_id ? 'error' : 'notice' -%>\" id=\"server_id\"><big><%= h @server_id -%><\/big><\/span>","25","        <input type=\"text\" name=\"organisation\" value=\"<%= h @organisation -%>\" size=\"50\"\/>","36","        <input type=\"text\" name=\"address\" value=\"<%= h @address -%>\"\/>"],"delete":["10","            <span class=\"<%= @bad_id ? 'error' : 'notice' -%>\" id=\"server_id\"><big><%= @server_id -%><\/big><\/span>","25","        <input type=\"text\" name=\"organisation\" value=\"<%= @organisation -%>\" size=\"50\"\/>","36","        <input type=\"text\" name=\"address\" value=\"<%= @address -%>\"\/>"]}]}},"9d33d9fa1a229413e5c131bcb0bfcae72a8fc87b":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/branch\/ws\/ListAction.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/setting\/ws\/ValuesAction.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/branch\/ws\/ListAction.java":[{"add":["41","import org.sonar.db.permission.OrganizationPermission;","166","      !userSession.hasComponentPermission(SCAN_EXECUTION, component) &&","167","      !userSession.hasPermission(OrganizationPermission.SCAN, component.getOrganizationUuid())) {"],"delete":["165","      !userSession.hasComponentPermission(SCAN_EXECUTION, component)) {"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/setting\/ws\/ValuesAction.java":[{"add":["41","import org.sonar.db.permission.OrganizationPermission;","157","    if (!userSession.hasComponentPermission(USER, component) &&","158","        !userSession.hasComponentPermission(SCAN_EXECUTION, component) &&","159","        !userSession.hasPermission(OrganizationPermission.SCAN, component.getOrganizationUuid())) {","160","        throw insufficientPrivilegesException();"],"delete":["156","    if (!userSession.hasComponentPermission(USER, component) && !userSession.hasComponentPermission(SCAN_EXECUTION, component)) {","157","      throw insufficientPrivilegesException();"]}]}},"e0ae4a26c5dad932325b50de173d845688f89dbd":{"changes":{"server\/sonar-web\/src\/main\/js\/helpers\/measures.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/helpers\/measures.js":[{"add":["268","function shouldDisplayDaysInShortFormat (days) {","396","        formatMeasure(maintainabilityGrid[0] * 100, 'PERCENT')","397","    );","405","      formatMeasure(maintainabilityRatingThreshold * 100, 'PERCENT')","406","  );"],"delete":["268","function shouldDisplayDaysInShortFormat(days) {","368","","397","        `${maintainabilityGrid[0]}%`);","405","      `${maintainabilityRatingThreshold}%`);"]}]}},"c23100da7c62f1f6933b30b60d9333a96c73db44":{"changes":{"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/ComponentNavMenu.js":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ui\/ws\/ComponentAction.java":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/ComponentNavMenu.js":[{"add":["127","    const adminLinks = this.renderAdministrationLinks();","128","    if (!adminLinks.some(link => link != null)) {","131","","145","          {adminLinks}","151","  renderAdministrationLinks() {","152","    return [","153","      this.renderSettingsLink(),","154","      this.renderProfilesLink(),","155","      this.renderQualityGateLink(),","156","      this.renderCustomMeasuresLink(),","157","      this.renderLinksLink(),","158","      this.renderPermissionsLink(),","159","      this.renderBackgroundTasksLink(),","160","      this.renderUpdateKeyLink(),","161","      ...this.renderAdminExtensions(),","162","      this.renderDeletionLink()","163","    ];","164","  }","165","","171","      <li key=\"settings\">","186","      <li key=\"profiles\">","201","      <li key=\"quality_gate\">","216","      <li key=\"custom_measures\">","231","      <li key=\"links\">","246","      <li key=\"permissions\">","261","      <li key=\"background_tasks\">","276","      <li key=\"update_key\">","298","      <li key=\"project_delete\">"],"delete":["56","  shouldShowAdministration() {","57","    return Object.keys(this.props.conf).some(key => this.props.conf[key]);","58","  }","59","","131","    if (!this.shouldShowAdministration()) {","147","          {this.renderSettingsLink()}","148","          {this.renderProfilesLink()}","149","          {this.renderQualityGateLink()}","150","          {this.renderCustomMeasuresLink()}","151","          {this.renderLinksLink()}","152","          {this.renderPermissionsLink()}","153","          {this.renderBackgroundTasksLink()}","154","          {this.renderUpdateKeyLink()}","155","          {this.renderAdminExtensions()}","156","          {this.renderDeletionLink()}","167","      <li>","182","      <li>","197","      <li>","212","      <li>","227","      <li>","242","      <li>","257","      <li>","272","      <li>","294","      <li>"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ui\/ws\/ComponentAction.java":[{"add":["249","    boolean showBackgroundTasks = isProjectAdmin && (isProject || Qualifiers.VIEW.equals(component.qualifier()));","262","    json.prop(\"showBackgroundTasks\", showBackgroundTasks);"],"delete":["261","    json.prop(\"showBackgroundTasks\", isProjectAdmin);"]}]}},"bc9b9edb7c887a74c47c59d615c48ae7024ab392":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/index\/IssueIndex.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/index\/IssueIndexTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/index\/IssueIndex.java":[{"add":["477","    \/\/ from GMT to server TZ","487","      \/\/ ES dateHistogram bounds are inclusive while createdBefore parameter is exclusive","488","      .extendedBounds(startTime, endTime - 1_000L);"],"delete":["486","      .extendedBounds(startTime, endTime);"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/index\/IssueIndexTest.java":[{"add":["73","  IssueIndex underTest;","89","    underTest = new IssueIndex(tester.client(), system, userSessionRule);","100","    Issue loaded = underTest.getByKey(issue.key());","114","    Issue result = underTest.getByKey(issue.key());","125","    Issue result = underTest.getByKey(issue.key());","136","    Issue result = underTest.getByKey(issue.key());","142","    underTest.getByKey(\"unknown\");","153","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).issueKeys(newArrayList(\"1\", \"2\")).build(), new SearchOptions()).getDocs()).hasSize(2);","154","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).issueKeys(newArrayList(\"1\")).build(), new SearchOptions()).getDocs()).hasSize(1);","155","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).issueKeys(newArrayList(\"3\", \"4\")).build(), new SearchOptions()).getDocs()).isEmpty();","172","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).build(), new SearchOptions()).getDocs()).hasSize(6);","173","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(\"unknown\")).build(), new SearchOptions()).getDocs()).isEmpty();","186","    SearchResult<IssueDoc> result = underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"projectUuids\")));","204","      underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).moduleUuids(newArrayList(file.uuid())).build(), new SearchOptions()).getDocs())","207","      underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).moduleUuids(newArrayList(module.uuid())).build(), new SearchOptions()).getDocs())","210","      underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).moduleUuids(newArrayList(subModule.uuid())).build(), new SearchOptions())","214","      underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).moduleUuids(newArrayList(project.uuid())).build(), new SearchOptions()).getDocs())","217","      underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).moduleUuids(newArrayList(\"unknown\")).build(), new SearchOptions()).getDocs())","240","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).fileUuids(newArrayList(file1.uuid(), file2.uuid(), file3.uuid())).build(), new SearchOptions())","242","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).fileUuids(newArrayList(file1.uuid())).build(), new SearchOptions())","244","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).moduleRootUuids(newArrayList(subModule.uuid())).build(), new SearchOptions())","246","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).moduleRootUuids(newArrayList(module.uuid())).build(), new SearchOptions())","248","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).build(), new SearchOptions())","250","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).viewUuids(newArrayList(view)).build(), new SearchOptions())","252","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(\"unknown\")).build(), new SearchOptions())","275","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(\"unknown\")).build(), new SearchOptions()).getDocs()).isEmpty();","276","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).build(), new SearchOptions()).getDocs()).hasSize(6);","277","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).viewUuids(newArrayList(view)).build(), new SearchOptions()).getDocs()).hasSize(6);","278","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).moduleUuids(newArrayList(module.uuid())).build(), new SearchOptions()).getDocs()).hasSize(2);","279","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).moduleUuids(newArrayList(subModule.uuid())).build(), new SearchOptions()).getDocs()).hasSize(2); \/\/ XXX","282","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).fileUuids(newArrayList(file1.uuid())).build(), new SearchOptions()).getDocs()).hasSize(1);","283","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).fileUuids(newArrayList(file1.uuid(), file2.uuid(), file3.uuid())).build(), new SearchOptions()).getDocs())","301","    SearchResult<IssueDoc> result = underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"fileUuids\")));","317","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).directories(newArrayList(\"\/src\/main\/xoo\")).build(), new SearchOptions()).getDocs()).hasSize(1);","318","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).directories(newArrayList(\"\/\")).build(), new SearchOptions()).getDocs()).hasSize(1);","319","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).directories(newArrayList(\"unknown\")).build(), new SearchOptions()).getDocs()).isEmpty();","332","    SearchResult<IssueDoc> result = underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"directories\")));","357","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).viewUuids(newArrayList(view1)).build(), new SearchOptions()).getDocs()).hasSize(2);","358","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).viewUuids(newArrayList(view2)).build(), new SearchOptions()).getDocs()).hasSize(1);","359","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).viewUuids(newArrayList(view1, view2)).build(), new SearchOptions()).getDocs()).hasSize(3);","360","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).viewUuids(newArrayList(\"unknown\")).build(), new SearchOptions()).getDocs()).isEmpty();","372","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).severities(newArrayList(Severity.INFO, Severity.MAJOR)).build(), new SearchOptions()).getDocs()).hasSize(2);","373","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).severities(newArrayList(Severity.INFO)).build(), new SearchOptions()).getDocs()).hasSize(1);","374","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).severities(newArrayList(Severity.BLOCKER)).build(), new SearchOptions()).getDocs()).isEmpty();","387","    SearchResult<IssueDoc> result = underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"severities\")));","401","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).statuses(newArrayList(Issue.STATUS_CLOSED, Issue.STATUS_OPEN)).build(), new SearchOptions()).getDocs()).hasSize(2);","402","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).statuses(newArrayList(Issue.STATUS_CLOSED)).build(), new SearchOptions()).getDocs()).hasSize(1);","403","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).statuses(newArrayList(Issue.STATUS_CONFIRMED)).build(), new SearchOptions()).getDocs()).isEmpty();","416","    SearchResult<IssueDoc> result = underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"statuses\")));","431","      underTest.search(IssueQuery.builder(userSessionRule).resolutions(newArrayList(Issue.RESOLUTION_FALSE_POSITIVE, Issue.RESOLUTION_FIXED)).build(), new SearchOptions()).getDocs())","433","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).resolutions(newArrayList(Issue.RESOLUTION_FALSE_POSITIVE)).build(), new SearchOptions()).getDocs()).hasSize(1);","434","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).resolutions(newArrayList(Issue.RESOLUTION_REMOVED)).build(), new SearchOptions()).getDocs()).isEmpty();","447","    SearchResult<IssueDoc> result = underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"resolutions\")));","462","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).resolved(true).build(), new SearchOptions()).getDocs()).hasSize(1);","463","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).resolved(false).build(), new SearchOptions()).getDocs()).hasSize(2);","464","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).resolved(null).build(), new SearchOptions()).getDocs()).hasSize(3);","475","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).rules(newArrayList(ruleKey)).build(), new SearchOptions()).getDocs()).hasSize(1);","476","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).rules(newArrayList(RuleKey.of(\"rule\", \"without issue\"))).build(), new SearchOptions()).getDocs()).isEmpty();","487","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).languages(newArrayList(\"xoo\")).build(),","489","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).languages(newArrayList(\"unknown\")).build(), new SearchOptions()).getDocs()).isEmpty();","500","    SearchResult<IssueDoc> result = underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"languages\")));","515","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).assignees(newArrayList(\"steph\")).build(), new SearchOptions()).getDocs()).hasSize(1);","516","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).assignees(newArrayList(\"steph\", \"simon\")).build(), new SearchOptions()).getDocs()).hasSize(2);","517","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).assignees(newArrayList(\"unknown\")).build(), new SearchOptions()).getDocs()).isEmpty();","531","    SearchResult<IssueDoc> result = underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"assignees\")));","547","    SearchResult<IssueDoc> result = underTest.search(IssueQuery.builder(userSessionRule).assignees(Arrays.asList(\"j-b\")).build(),","563","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).assigned(true).build(), new SearchOptions()).getDocs()).hasSize(1);","564","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).assigned(false).build(), new SearchOptions()).getDocs()).hasSize(2);","565","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).assigned(null).build(), new SearchOptions()).getDocs()).hasSize(3);","578","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).authors(newArrayList(\"steph\")).build(), new SearchOptions()).getDocs()).hasSize(1);","579","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).authors(newArrayList(\"steph\", \"simon\")).build(), new SearchOptions()).getDocs()).hasSize(2);","580","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).authors(newArrayList(\"unknown\")).build(), new SearchOptions()).getDocs()).isEmpty();","594","    SearchResult<IssueDoc> result = underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"authors\")));","608","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).createdAfter(parseDate(\"2014-09-19\")).build(), new SearchOptions()).getDocs()).hasSize(2);","610","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).createdAfter(parseDate(\"2014-09-20\")).build(), new SearchOptions()).getDocs()).hasSize(2);","611","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).createdAfter(parseDate(\"2014-09-21\")).build(), new SearchOptions()).getDocs()).hasSize(1);","612","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).createdAfter(parseDate(\"2014-09-25\")).build(), new SearchOptions()).getDocs()).isEmpty();","624","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).createdBefore(parseDate(\"2014-09-19\")).build(), new SearchOptions()).getDocs()).isEmpty();","626","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).createdBefore(parseDate(\"2014-09-20\")).build(), new SearchOptions()).getDocs()).isEmpty();","627","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).createdBefore(parseDate(\"2014-09-21\")).build(), new SearchOptions()).getDocs()).hasSize(1);","628","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).createdBefore(parseDate(\"2014-09-25\")).build(), new SearchOptions()).getDocs()).hasSize(2);","641","    assertThat(underTest.search(IssueQuery.builder(userSessionRule)","646","    assertThat(underTest.search(IssueQuery.builder(userSessionRule)","651","    assertThat(underTest.search(IssueQuery.builder(userSessionRule)","656","    assertThat(underTest.search(IssueQuery.builder(userSessionRule)","661","    assertThat(underTest.search(IssueQuery.builder(userSessionRule)","666","    assertThat(underTest.search(IssueQuery.builder(userSessionRule)","671","    assertThat(underTest.search(IssueQuery.builder(userSessionRule)","685","    assertThat(underTest.search(IssueQuery.builder(userSessionRule)","689","    assertThat(underTest.search(IssueQuery.builder(userSessionRule)","697","      underTest.search(IssueQuery.builder(userSessionRule).createdAfter(parseDate(\"2014-09-20\")).createdBefore(parseDate(\"2014-09-19\")).build(),","708","      underTest.search(IssueQuery.builder(userSessionRule).createdAfter(new Date(Long.MAX_VALUE)).build(), new SearchOptions());","722","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).createdAt(parseDate(\"2014-09-20\")).build(), new SearchOptions()).getDocs()).hasSize(1);","723","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).createdAt(parseDate(\"2014-09-21\")).build(), new SearchOptions()).getDocs()).isEmpty();","736","    SearchResult<IssueDoc> result = underTest.search(query, options);","754","    Map<String, Long> createdAt = underTest.search(IssueQuery.builder(userSessionRule)","770","    Map<String, Long> createdAt = underTest.search(IssueQuery.builder(userSessionRule)","787","    Map<String, Long> createdAt = underTest.search(IssueQuery.builder(userSessionRule)","802","  public void facet_on_created_at_with_one_day() {","803","    SearchOptions SearchOptions = fixtureForCreatedAtFacet();","804","","805","    Map<String, Long> createdAt = underTest.search(IssueQuery.builder(userSessionRule)","806","        .createdAfter(parseDateTime(\"2014-09-01T00:00:00-0100\"))","807","        .createdBefore(parseDateTime(\"2014-09-02T00:00:00-0100\")).build(),","808","      SearchOptions).getFacets().get(\"createdAt\");","809","    assertThat(createdAt).containsOnly(","810","      entry(\"2014-09-01T01:00:00+0000\", 2L));","811","  }","812","","813","  @Test","817","    Map<String, Long> createdAt = underTest.search(IssueQuery.builder(userSessionRule)","836","    Map<String, Long> createdAt = underTest.search(IssueQuery.builder(userSessionRule)","851","    Map<String, Long> createdAt = underTest.search(IssueQuery.builder(userSessionRule).build(),","883","    SearchResult<IssueDoc> result = underTest.search(query.build(), new SearchOptions().setPage(2, 10));","887","    result = underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().setOffset(0).setLimit(5));","891","    result = underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().setOffset(2).setLimit(0));","908","    SearchResult<IssueDoc> result = underTest.search(query.build(), new SearchOptions().setLimit(Integer.MAX_VALUE));","923","    SearchResult<IssueDoc> result = underTest.search(query.build(), new SearchOptions());","929","    result = underTest.search(query.build(), new SearchOptions());","948","    SearchResult<IssueDoc> result = underTest.search(query.build(), new SearchOptions());","956","    result = underTest.search(query.build(), new SearchOptions());","974","    SearchResult<IssueDoc> result = underTest.search(query.build(), new SearchOptions());","980","    result = underTest.search(query.build(), new SearchOptions());","996","    SearchResult<IssueDoc> result = underTest.search(query.build(), new SearchOptions());","1002","    result = underTest.search(query.build(), new SearchOptions());","1018","    SearchResult<IssueDoc> result = underTest.search(query.build(), new SearchOptions());","1024","    result = underTest.search(query.build(), new SearchOptions());","1041","    SearchResult<IssueDoc> result = underTest.search(query.build(), new SearchOptions());","1048","    result = underTest.search(query.build(), new SearchOptions());","1075","    SearchResult<IssueDoc> result = underTest.search(query.build(), new SearchOptions());","1086","    result = underTest.search(query.build(), new SearchOptions());","1114","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions()).getDocs()).hasSize(1);","1117","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions()).getDocs()).hasSize(1);","1120","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions()).getDocs()).hasSize(2);","1123","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions()).getDocs()).isEmpty();","1126","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project3.uuid())).build(), new SearchOptions()).getDocs()).isEmpty();","1146","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions()).getDocs()).hasSize(1);","1149","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions()).getDocs()).hasSize(1);","1152","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions()).getDocs()).hasSize(0);","1155","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project3.key())).build(), new SearchOptions()).getDocs()).hasSize(0);","1171","    assertThat(underTest.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions()).getDocs()).hasSize(1);","1192","    List<IssueDoc> issues = Lists.newArrayList(underTest.selectIssuesForBatch(file));","1224","    assertThat(Lists.newArrayList(underTest.selectIssuesForBatch(project))).hasSize(3);","1225","    assertThat(Lists.newArrayList(underTest.selectIssuesForBatch(module))).hasSize(3);","1226","    assertThat(Lists.newArrayList(underTest.selectIssuesForBatch(subModule))).hasSize(2);","1227","    assertThat(Lists.newArrayList(underTest.selectIssuesForBatch(file))).hasSize(1);","1228","    assertThat(Lists.newArrayList(underTest.selectIssuesForBatch(ComponentTesting.newProjectDto()))).isEmpty();","1234","      underTest.selectIssuesForBatch(new ComponentDto().setScope(Scopes.DIRECTORY));","1255","    assertThat(Lists.newArrayList(underTest.selectIssuesForBatch(project1))).hasSize(1);","1258","    assertThat(Lists.newArrayList(underTest.selectIssuesForBatch(project2))).isEmpty();"],"delete":["73","  IssueIndex index;","89","    index = new IssueIndex(tester.client(), system, userSessionRule);","100","    Issue loaded = index.getByKey(issue.key());","114","    Issue result = index.getByKey(issue.key());","125","    Issue result = index.getByKey(issue.key());","136","    Issue result = index.getByKey(issue.key());","142","    index.getByKey(\"unknown\");","153","    assertThat(index.search(IssueQuery.builder(userSessionRule).issueKeys(newArrayList(\"1\", \"2\")).build(), new SearchOptions()).getDocs()).hasSize(2);","154","    assertThat(index.search(IssueQuery.builder(userSessionRule).issueKeys(newArrayList(\"1\")).build(), new SearchOptions()).getDocs()).hasSize(1);","155","    assertThat(index.search(IssueQuery.builder(userSessionRule).issueKeys(newArrayList(\"3\", \"4\")).build(), new SearchOptions()).getDocs()).isEmpty();","172","    assertThat(index.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).build(), new SearchOptions()).getDocs()).hasSize(6);","173","    assertThat(index.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(\"unknown\")).build(), new SearchOptions()).getDocs()).isEmpty();","186","    SearchResult<IssueDoc> result = index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"projectUuids\")));","204","      index.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).moduleUuids(newArrayList(file.uuid())).build(), new SearchOptions()).getDocs())","207","      index.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).moduleUuids(newArrayList(module.uuid())).build(), new SearchOptions()).getDocs())","210","      index.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).moduleUuids(newArrayList(subModule.uuid())).build(), new SearchOptions())","214","      index.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).moduleUuids(newArrayList(project.uuid())).build(), new SearchOptions()).getDocs())","217","      index.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).moduleUuids(newArrayList(\"unknown\")).build(), new SearchOptions()).getDocs())","240","    assertThat(index.search(IssueQuery.builder(userSessionRule).fileUuids(newArrayList(file1.uuid(), file2.uuid(), file3.uuid())).build(), new SearchOptions())","242","    assertThat(index.search(IssueQuery.builder(userSessionRule).fileUuids(newArrayList(file1.uuid())).build(), new SearchOptions())","244","    assertThat(index.search(IssueQuery.builder(userSessionRule).moduleRootUuids(newArrayList(subModule.uuid())).build(), new SearchOptions())","246","    assertThat(index.search(IssueQuery.builder(userSessionRule).moduleRootUuids(newArrayList(module.uuid())).build(), new SearchOptions())","248","    assertThat(index.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).build(), new SearchOptions())","250","    assertThat(index.search(IssueQuery.builder(userSessionRule).viewUuids(newArrayList(view)).build(), new SearchOptions())","252","    assertThat(index.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(\"unknown\")).build(), new SearchOptions())","275","    assertThat(index.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(\"unknown\")).build(), new SearchOptions()).getDocs()).isEmpty();","276","    assertThat(index.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project.uuid())).build(), new SearchOptions()).getDocs()).hasSize(6);","277","    assertThat(index.search(IssueQuery.builder(userSessionRule).viewUuids(newArrayList(view)).build(), new SearchOptions()).getDocs()).hasSize(6);","278","    assertThat(index.search(IssueQuery.builder(userSessionRule).moduleUuids(newArrayList(module.uuid())).build(), new SearchOptions()).getDocs()).hasSize(2);","279","    assertThat(index.search(IssueQuery.builder(userSessionRule).moduleUuids(newArrayList(subModule.uuid())).build(), new SearchOptions()).getDocs()).hasSize(2); \/\/ XXX","282","    assertThat(index.search(IssueQuery.builder(userSessionRule).fileUuids(newArrayList(file1.uuid())).build(), new SearchOptions()).getDocs()).hasSize(1);","283","    assertThat(index.search(IssueQuery.builder(userSessionRule).fileUuids(newArrayList(file1.uuid(), file2.uuid(), file3.uuid())).build(), new SearchOptions()).getDocs())","301","    SearchResult<IssueDoc> result = index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"fileUuids\")));","317","    assertThat(index.search(IssueQuery.builder(userSessionRule).directories(newArrayList(\"\/src\/main\/xoo\")).build(), new SearchOptions()).getDocs()).hasSize(1);","318","    assertThat(index.search(IssueQuery.builder(userSessionRule).directories(newArrayList(\"\/\")).build(), new SearchOptions()).getDocs()).hasSize(1);","319","    assertThat(index.search(IssueQuery.builder(userSessionRule).directories(newArrayList(\"unknown\")).build(), new SearchOptions()).getDocs()).isEmpty();","332","    SearchResult<IssueDoc> result = index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"directories\")));","357","    assertThat(index.search(IssueQuery.builder(userSessionRule).viewUuids(newArrayList(view1)).build(), new SearchOptions()).getDocs()).hasSize(2);","358","    assertThat(index.search(IssueQuery.builder(userSessionRule).viewUuids(newArrayList(view2)).build(), new SearchOptions()).getDocs()).hasSize(1);","359","    assertThat(index.search(IssueQuery.builder(userSessionRule).viewUuids(newArrayList(view1, view2)).build(), new SearchOptions()).getDocs()).hasSize(3);","360","    assertThat(index.search(IssueQuery.builder(userSessionRule).viewUuids(newArrayList(\"unknown\")).build(), new SearchOptions()).getDocs()).isEmpty();","372","    assertThat(index.search(IssueQuery.builder(userSessionRule).severities(newArrayList(Severity.INFO, Severity.MAJOR)).build(), new SearchOptions()).getDocs()).hasSize(2);","373","    assertThat(index.search(IssueQuery.builder(userSessionRule).severities(newArrayList(Severity.INFO)).build(), new SearchOptions()).getDocs()).hasSize(1);","374","    assertThat(index.search(IssueQuery.builder(userSessionRule).severities(newArrayList(Severity.BLOCKER)).build(), new SearchOptions()).getDocs()).isEmpty();","387","    SearchResult<IssueDoc> result = index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"severities\")));","401","    assertThat(index.search(IssueQuery.builder(userSessionRule).statuses(newArrayList(Issue.STATUS_CLOSED, Issue.STATUS_OPEN)).build(), new SearchOptions()).getDocs()).hasSize(2);","402","    assertThat(index.search(IssueQuery.builder(userSessionRule).statuses(newArrayList(Issue.STATUS_CLOSED)).build(), new SearchOptions()).getDocs()).hasSize(1);","403","    assertThat(index.search(IssueQuery.builder(userSessionRule).statuses(newArrayList(Issue.STATUS_CONFIRMED)).build(), new SearchOptions()).getDocs()).isEmpty();","416","    SearchResult<IssueDoc> result = index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"statuses\")));","431","      index.search(IssueQuery.builder(userSessionRule).resolutions(newArrayList(Issue.RESOLUTION_FALSE_POSITIVE, Issue.RESOLUTION_FIXED)).build(), new SearchOptions()).getDocs())","433","    assertThat(index.search(IssueQuery.builder(userSessionRule).resolutions(newArrayList(Issue.RESOLUTION_FALSE_POSITIVE)).build(), new SearchOptions()).getDocs()).hasSize(1);","434","    assertThat(index.search(IssueQuery.builder(userSessionRule).resolutions(newArrayList(Issue.RESOLUTION_REMOVED)).build(), new SearchOptions()).getDocs()).isEmpty();","447","    SearchResult<IssueDoc> result = index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"resolutions\")));","462","    assertThat(index.search(IssueQuery.builder(userSessionRule).resolved(true).build(), new SearchOptions()).getDocs()).hasSize(1);","463","    assertThat(index.search(IssueQuery.builder(userSessionRule).resolved(false).build(), new SearchOptions()).getDocs()).hasSize(2);","464","    assertThat(index.search(IssueQuery.builder(userSessionRule).resolved(null).build(), new SearchOptions()).getDocs()).hasSize(3);","475","    assertThat(index.search(IssueQuery.builder(userSessionRule).rules(newArrayList(ruleKey)).build(), new SearchOptions()).getDocs()).hasSize(1);","476","    assertThat(index.search(IssueQuery.builder(userSessionRule).rules(newArrayList(RuleKey.of(\"rule\", \"without issue\"))).build(), new SearchOptions()).getDocs()).isEmpty();","487","    assertThat(index.search(IssueQuery.builder(userSessionRule).languages(newArrayList(\"xoo\")).build(),","489","    assertThat(index.search(IssueQuery.builder(userSessionRule).languages(newArrayList(\"unknown\")).build(), new SearchOptions()).getDocs()).isEmpty();","500","    SearchResult<IssueDoc> result = index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"languages\")));","515","    assertThat(index.search(IssueQuery.builder(userSessionRule).assignees(newArrayList(\"steph\")).build(), new SearchOptions()).getDocs()).hasSize(1);","516","    assertThat(index.search(IssueQuery.builder(userSessionRule).assignees(newArrayList(\"steph\", \"simon\")).build(), new SearchOptions()).getDocs()).hasSize(2);","517","    assertThat(index.search(IssueQuery.builder(userSessionRule).assignees(newArrayList(\"unknown\")).build(), new SearchOptions()).getDocs()).isEmpty();","531","    SearchResult<IssueDoc> result = index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"assignees\")));","547","    SearchResult<IssueDoc> result = index.search(IssueQuery.builder(userSessionRule).assignees(Arrays.asList(\"j-b\")).build(),","563","    assertThat(index.search(IssueQuery.builder(userSessionRule).assigned(true).build(), new SearchOptions()).getDocs()).hasSize(1);","564","    assertThat(index.search(IssueQuery.builder(userSessionRule).assigned(false).build(), new SearchOptions()).getDocs()).hasSize(2);","565","    assertThat(index.search(IssueQuery.builder(userSessionRule).assigned(null).build(), new SearchOptions()).getDocs()).hasSize(3);","578","    assertThat(index.search(IssueQuery.builder(userSessionRule).authors(newArrayList(\"steph\")).build(), new SearchOptions()).getDocs()).hasSize(1);","579","    assertThat(index.search(IssueQuery.builder(userSessionRule).authors(newArrayList(\"steph\", \"simon\")).build(), new SearchOptions()).getDocs()).hasSize(2);","580","    assertThat(index.search(IssueQuery.builder(userSessionRule).authors(newArrayList(\"unknown\")).build(), new SearchOptions()).getDocs()).isEmpty();","594","    SearchResult<IssueDoc> result = index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().addFacets(newArrayList(\"authors\")));","608","    assertThat(index.search(IssueQuery.builder(userSessionRule).createdAfter(parseDate(\"2014-09-19\")).build(), new SearchOptions()).getDocs()).hasSize(2);","610","    assertThat(index.search(IssueQuery.builder(userSessionRule).createdAfter(parseDate(\"2014-09-20\")).build(), new SearchOptions()).getDocs()).hasSize(2);","611","    assertThat(index.search(IssueQuery.builder(userSessionRule).createdAfter(parseDate(\"2014-09-21\")).build(), new SearchOptions()).getDocs()).hasSize(1);","612","    assertThat(index.search(IssueQuery.builder(userSessionRule).createdAfter(parseDate(\"2014-09-25\")).build(), new SearchOptions()).getDocs()).isEmpty();","624","    assertThat(index.search(IssueQuery.builder(userSessionRule).createdBefore(parseDate(\"2014-09-19\")).build(), new SearchOptions()).getDocs()).isEmpty();","626","    assertThat(index.search(IssueQuery.builder(userSessionRule).createdBefore(parseDate(\"2014-09-20\")).build(), new SearchOptions()).getDocs()).isEmpty();","627","    assertThat(index.search(IssueQuery.builder(userSessionRule).createdBefore(parseDate(\"2014-09-21\")).build(), new SearchOptions()).getDocs()).hasSize(1);","628","    assertThat(index.search(IssueQuery.builder(userSessionRule).createdBefore(parseDate(\"2014-09-25\")).build(), new SearchOptions()).getDocs()).hasSize(2);","641","    assertThat(index.search(IssueQuery.builder(userSessionRule)","646","    assertThat(index.search(IssueQuery.builder(userSessionRule)","651","    assertThat(index.search(IssueQuery.builder(userSessionRule)","656","    assertThat(index.search(IssueQuery.builder(userSessionRule)","661","    assertThat(index.search(IssueQuery.builder(userSessionRule)","666","    assertThat(index.search(IssueQuery.builder(userSessionRule)","671","    assertThat(index.search(IssueQuery.builder(userSessionRule)","685","    assertThat(index.search(IssueQuery.builder(userSessionRule)","689","    assertThat(index.search(IssueQuery.builder(userSessionRule)","697","      index.search(IssueQuery.builder(userSessionRule).createdAfter(parseDate(\"2014-09-20\")).createdBefore(parseDate(\"2014-09-19\")).build(),","708","      index.search(IssueQuery.builder(userSessionRule).createdAfter(new Date(Long.MAX_VALUE)).build(), new SearchOptions());","722","    assertThat(index.search(IssueQuery.builder(userSessionRule).createdAt(parseDate(\"2014-09-20\")).build(), new SearchOptions()).getDocs()).hasSize(1);","723","    assertThat(index.search(IssueQuery.builder(userSessionRule).createdAt(parseDate(\"2014-09-21\")).build(), new SearchOptions()).getDocs()).isEmpty();","736","    SearchResult<IssueDoc> result = index.search(query, options);","754","    Map<String, Long> createdAt = index.search(IssueQuery.builder(userSessionRule)","770","    Map<String, Long> createdAt = index.search(IssueQuery.builder(userSessionRule)","787","    Map<String, Long> createdAt = index.search(IssueQuery.builder(userSessionRule)","805","    Map<String, Long> createdAt = index.search(IssueQuery.builder(userSessionRule)","824","    Map<String, Long> createdAt = index.search(IssueQuery.builder(userSessionRule)","839","    Map<String, Long> createdAt = index.search(IssueQuery.builder(userSessionRule).build(),","871","    SearchResult<IssueDoc> result = index.search(query.build(), new SearchOptions().setPage(2, 10));","875","    result = index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().setOffset(0).setLimit(5));","879","    result = index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions().setOffset(2).setLimit(0));","896","    SearchResult<IssueDoc> result = index.search(query.build(), new SearchOptions().setLimit(Integer.MAX_VALUE));","911","    SearchResult<IssueDoc> result = index.search(query.build(), new SearchOptions());","917","    result = index.search(query.build(), new SearchOptions());","936","    SearchResult<IssueDoc> result = index.search(query.build(), new SearchOptions());","944","    result = index.search(query.build(), new SearchOptions());","962","    SearchResult<IssueDoc> result = index.search(query.build(), new SearchOptions());","968","    result = index.search(query.build(), new SearchOptions());","984","    SearchResult<IssueDoc> result = index.search(query.build(), new SearchOptions());","990","    result = index.search(query.build(), new SearchOptions());","1006","    SearchResult<IssueDoc> result = index.search(query.build(), new SearchOptions());","1012","    result = index.search(query.build(), new SearchOptions());","1029","    SearchResult<IssueDoc> result = index.search(query.build(), new SearchOptions());","1036","    result = index.search(query.build(), new SearchOptions());","1063","    SearchResult<IssueDoc> result = index.search(query.build(), new SearchOptions());","1074","    result = index.search(query.build(), new SearchOptions());","1102","    assertThat(index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions()).getDocs()).hasSize(1);","1105","    assertThat(index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions()).getDocs()).hasSize(1);","1108","    assertThat(index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions()).getDocs()).hasSize(2);","1111","    assertThat(index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions()).getDocs()).isEmpty();","1114","    assertThat(index.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project3.uuid())).build(), new SearchOptions()).getDocs()).isEmpty();","1134","    assertThat(index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions()).getDocs()).hasSize(1);","1137","    assertThat(index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions()).getDocs()).hasSize(1);","1140","    assertThat(index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions()).getDocs()).hasSize(0);","1143","    assertThat(index.search(IssueQuery.builder(userSessionRule).projectUuids(newArrayList(project3.key())).build(), new SearchOptions()).getDocs()).hasSize(0);","1159","    assertThat(index.search(IssueQuery.builder(userSessionRule).build(), new SearchOptions()).getDocs()).hasSize(1);","1180","    List<IssueDoc> issues = Lists.newArrayList(index.selectIssuesForBatch(file));","1212","    assertThat(Lists.newArrayList(index.selectIssuesForBatch(project))).hasSize(3);","1213","    assertThat(Lists.newArrayList(index.selectIssuesForBatch(module))).hasSize(3);","1214","    assertThat(Lists.newArrayList(index.selectIssuesForBatch(subModule))).hasSize(2);","1215","    assertThat(Lists.newArrayList(index.selectIssuesForBatch(file))).hasSize(1);","1216","    assertThat(Lists.newArrayList(index.selectIssuesForBatch(ComponentTesting.newProjectDto()))).isEmpty();","1222","      index.selectIssuesForBatch(new ComponentDto().setScope(Scopes.DIRECTORY));","1243","    assertThat(Lists.newArrayList(index.selectIssuesForBatch(project1))).hasSize(1);","1246","    assertThat(Lists.newArrayList(index.selectIssuesForBatch(project2))).isEmpty();"]}]}},"776b495d21c108c7125c96aaa15d6b36106a6f39":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/sessions\/components\/LoginForm.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/sessions\/components\/Login.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/sessions\/components\/__tests__\/__snapshots__\/Login-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/sessions\/components\/__tests__\/__snapshots__\/LoginForm-test.tsx.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/sessions\/components\/LoginForm.tsx":[{"add":[],"delete":["21","import GlobalMessagesContainer from '..\/..\/..\/app\/components\/GlobalMessagesContainer';","89","        <GlobalMessagesContainer \/>","90",""]}],"server\/sonar-web\/src\/main\/js\/apps\/sessions\/components\/Login.tsx":[{"add":["22","import GlobalMessagesContainer from '..\/..\/..\/app\/components\/GlobalMessagesContainer';","37","      <GlobalMessagesContainer \/>","38",""],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/sessions\/components\/__tests__\/__snapshots__\/Login-test.tsx.snap":[{"add":["12","  <Connect(GlobalMessages) \/>","31","  <Connect(GlobalMessages) \/>"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/sessions\/components\/__tests__\/__snapshots__\/LoginForm-test.tsx.snap":[{"add":[],"delete":["21","  <Connect(GlobalMessages) \/>","94","  <Connect(GlobalMessages) \/>","167","  <Connect(GlobalMessages) \/>"]}]}},"a2c0562b148c6bc7c43aa5b8f191ba6cdea41d30":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/__tests__\/__snapshots__\/BulkChange-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/BulkChange.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/__tests__\/__snapshots__\/BulkChange-test.tsx.snap":[{"add":["103","    overlayPlacement=\"bottom-left\""],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/BulkChange.tsx":[{"add":["27","import { PopupPlacement } from 'sonar-ui-common\/components\/ui\/popups';","104","          overlayPlacement={PopupPlacement.BottomLeft}"],"delete":[]}]}},"fbdda573c5f20a65c86767f6b7828c99dd1e9774":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/SourceViewerBase.js":"MODIFY","sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/SourceViewerBase.js":[{"add":["100","  sourceRemoved: boolean,","147","      sourceRemoved: false,","228","              sourceRemoved: false,","253","        } else if (response.status === 404) {","254","          this.setState({ component, loading: false, sourceRemoved: true });","314","          if ([403, 404].includes(response.status)) {","316","          } else {","577","    const { component, loading, sources, notAccessible, sourceRemoved } = this.state;","599","    const displaySources = !notAccessible && !sourceRemoved;","600","","604","        {notAccessible &&","608","        {sourceRemoved &&","609","          <div className=\"alert alert-warning spacer-top\">","610","            {translate('code_viewer.no_source_code_displayed_due_to_source_removed')}","611","          <\/div>}","612","        {displaySources && sources != null && this.renderCode(sources)}"],"delete":["309","          if (response.status === 403) {","311","          } else if (response.status === 404) {","572","    const { component, loading } = this.state;","597","        {this.state.notAccessible &&","601","        {this.state.sources != null && this.renderCode(this.state.sources)}"]}],"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["1151","code_viewer.no_source_code_displayed_due_to_source_removed=The file was removed, no source code can be displayed."],"delete":[]}]}},"78d77d771aef671903f673658f55cc7c936e61a9":{"changes":{"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/PopulateFileSourceLineCount.java":"MODIFY"},"diff":{"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/PopulateFileSourceLineCount.java":[{"add":["49","    massUpdate.update(\"update file_sources set line_count = ? where project_uuid = ?\")","50","      \/\/ Having transactions involving many rows can be very slow and should be avoided.","51","      \/\/ A project can have many file_sources, so transaction is committed after each project.","52","      .setBatchSize(1);","53","    massUpdate.rowPluralName(\"file sources\");"],"delete":["49","    massUpdate.update(\"update file_sources set line_count = ? where project_uuid = ?\");","50","    massUpdate.rowPluralName(\"file source line counts\");"]}]}},"c448fdb79b7768cfbfd481ab15e25b823ef45a25":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/web-api\/styles\/web-api.css":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/web-api\/styles\/web-api.css":[{"add":["86","","87",".web-api-params td code {","88","  white-space: normal;","89","  word-wrap: break-word;","90","}"],"delete":[]}]}},"860d96245089300ba787786b7266ea687c3df431":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/styles.css":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/styles.css":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/ComponentSourceSnippetViewer.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/styles.css":[{"add":[],"delete":["295",".issue-location {","296","  display: inline-block;","297","  vertical-align: top;","298","  line-height: 18px;","299","  height: 18px;","300","  box-sizing: border-box;","301","  background-color: var(--issueBgColor);","302","  transition: background-color 0.3s ease;","303","}","304",""]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/styles.css":[{"add":["306",".issue-location {","307","  display: inline-block;","308","  vertical-align: top;","309","  line-height: 18px;","310","  height: 18px;","311","  box-sizing: border-box;","312","  background-color: var(--issueBgColor);","313","  transition: background-color 0.3s ease;","314","}","315",""],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/ComponentSourceSnippetViewer.tsx":[{"add":["216","    displayDuplications,","225","    displayDuplications: boolean;","249","        displayDuplications={displayDuplications}","322","    const displayDuplications = snippet.some(s => !!s.duplicated);","323","","339","                displayDuplications,"],"delete":["247","        displayDuplications={!!line.duplicated}"]}]}},"88bb8230b1bfd3e6ec923c35890c1daba93fece4":{"changes":{"sonar-duplications\/src\/test\/java\/org\/sonar\/duplications\/internal\/pmd\/TokenizerBridgeTest.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/cpd\/deprecated\/JavaCpdBlockIndexerTest.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/cpd\/deprecated\/DefaultCpdBlockIndexer.java":"MODIFY","sonar-duplications\/src\/main\/java\/org\/sonar\/duplications\/cpd\/FileCodeLoaderWithoutCache.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/cpd\/deprecated\/JavaCpdBlockIndexer.java":"MODIFY","plugins\/sonar-xoo-plugin\/src\/test\/java\/org\/sonar\/xoo\/lang\/XooTokenizerTest.java":"MODIFY","sonar-duplications\/src\/test\/java\/org\/sonar\/duplications\/internal\/pmd\/PmdBridgeTest.java":"MODIFY","sonar-duplications\/src\/main\/java\/org\/sonar\/duplications\/internal\/pmd\/TokenizerBridge.java":"MODIFY","plugins\/sonar-xoo-plugin\/src\/main\/java\/org\/sonar\/xoo\/lang\/XooTokenizer.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/cpd\/deprecated\/DeprecatedCpdBlockIndexerSensor.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/SourcePublisher.java":"MODIFY"},"diff":{"sonar-duplications\/src\/test\/java\/org\/sonar\/duplications\/internal\/pmd\/TokenizerBridgeTest.java":[{"add":["21","import java.io.ByteArrayInputStream;","22","import java.io.IOException;","23","import java.io.InputStreamReader;","24","import java.nio.charset.StandardCharsets;","25","import java.util.List;","53","    bridge = new TokenizerBridge(tokenizer, 10);","58","    bridge.chunk(\"file.txt\", new InputStreamReader(new ByteArrayInputStream(new byte[0]), StandardCharsets.UTF_8));","67","    bridge.chunk(\"file.txt\", new InputStreamReader(new ByteArrayInputStream(new byte[0]), StandardCharsets.UTF_8));","68","    List<TokensLine> lines = bridge.chunk(\"file.txt\", new InputStreamReader(new ByteArrayInputStream(new byte[0]), StandardCharsets.UTF_8));"],"delete":["28","import java.io.IOException;","29","import java.util.List;","30","","51","    bridge = new TokenizerBridge(tokenizer, \"UTF-8\", 10);","56","    bridge.chunk(null);","65","    bridge.chunk(null);","66","    List<TokensLine> lines = bridge.chunk(null);"]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/cpd\/deprecated\/JavaCpdBlockIndexerTest.java":[{"add":["23","import java.nio.charset.StandardCharsets;","40","import org.sonar.api.config.Settings;","74","      .setCharset(StandardCharsets.UTF_8)"],"delete":["38","import org.sonar.api.config.Settings;"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/cpd\/deprecated\/DefaultCpdBlockIndexer.java":[{"add":["23","import java.io.IOException;","24","import java.io.InputStreamReader;","84","    TokenizerBridge bridge = new TokenizerBridge(mapping.getTokenizer(), getBlockSize(languageKey));","89","        List<Block> blocks;","90","        try (InputStreamReader isr = new InputStreamReader(inputFile.inputStream(), inputFile.charset())) {","91","          blocks = bridge.chunk(resourceEffectiveKey, inputFile.absolutePath(), isr);","92","        } catch (IOException e) {","93","          throw new IllegalStateException(\"Unable to read content of file \" + inputFile.absolutePath(), e);","94","        }"],"delete":["82","    TokenizerBridge bridge = new TokenizerBridge(mapping.getTokenizer(), fs.encoding().name(), getBlockSize(languageKey));","87","        List<Block> blocks = bridge.chunk(resourceEffectiveKey, inputFile.file());"]}],"sonar-duplications\/src\/main\/java\/org\/sonar\/duplications\/cpd\/FileCodeLoaderWithoutCache.java":[{"add":["25","  private final String fileName;","26","  private final Reader fileReader;","28","  public FileCodeLoaderWithoutCache(String fileName, Reader fileReader) {","29","    this.fileName = fileName;","30","    this.fileReader = fileReader;","35","    return fileReader;","40","    return fileName;"],"delete":["21","import java.io.File;","22","import java.io.FileInputStream;","23","import java.io.InputStreamReader;","28","  private File file;","29","  private String encoding;","31","  public FileCodeLoaderWithoutCache(File file, String encoding) {","32","    this.file = file;","33","    this.encoding = encoding;","38","    return new InputStreamReader(new FileInputStream(file), encoding);","43","    return this.file.getAbsolutePath();"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/cpd\/deprecated\/JavaCpdBlockIndexer.java":[{"add":["92","      try (InputStream is = inputFile.inputStream();","93","        Reader reader = new InputStreamReader(is, inputFile.charset())) {","101","      List<Block> blocks;","102","      try {","103","        blocks = blockChunker.chunk(resourceEffectiveKey, statements);","104","      } catch (Exception e) {","105","        throw new IllegalStateException(\"Cannot process file \" + inputFile.file(), e);","106","      }"],"delete":["22","import java.io.FileInputStream;","93","      try (InputStream is = new FileInputStream(inputFile.file());","94","        Reader reader = new InputStreamReader(is, fs.encoding())) {","102","      List<Block> blocks = blockChunker.chunk(resourceEffectiveKey, statements);"]}],"plugins\/sonar-xoo-plugin\/src\/test\/java\/org\/sonar\/xoo\/lang\/XooTokenizerTest.java":[{"add":["21","import java.io.File;","22","import java.io.IOException;","23","import java.io.InputStreamReader;","24","import java.nio.charset.StandardCharsets;","38","import org.sonar.api.config.Settings;","39","import org.sonar.duplications.cpd.FileCodeLoaderWithoutCache;","67","    FileUtils.write(source, \"token1 token2 token3\\ntoken4\", StandardCharsets.UTF_8);","71","      .setCharset(StandardCharsets.UTF_8)","77","    try (InputStreamReader reader = new InputStreamReader(inputFile.inputStream(), inputFile.charset())) {","78","      SourceCode sourceCode = new SourceCode(new FileCodeLoaderWithoutCache(inputFile.absolutePath(), reader));","79","      tokenizer.tokenize(sourceCode, cpdTokens);","80","    }"],"delete":["33","import org.sonar.api.config.Settings;","34","","35","import java.io.File;","36","import java.io.IOException;","65","    FileUtils.write(source, \"token1 token2 token3\\ntoken4\");","73","    SourceCode sourceCode = mock(SourceCode.class);","74","    when(sourceCode.getFileName()).thenReturn(inputFile.absolutePath());","76","    tokenizer.tokenize(sourceCode, cpdTokens);"]}],"sonar-duplications\/src\/test\/java\/org\/sonar\/duplications\/internal\/pmd\/PmdBridgeTest.java":[{"add":["21","import java.io.File;","22","import java.io.IOException;","23","import java.nio.charset.StandardCharsets;","24","import java.nio.file.Files;","25","import java.util.Collection;","26","import java.util.List;","47","    bridge = new TokenizerBridge(new JavaTokenizer(), 10);","51","  public void testDuplicationInSingleFile() throws IOException {","70","  public void testDuplicationBetweenTwoFiles() throws IOException {","92","  private void addToIndex(File file) throws IOException {","93","    List<Block> blocks = bridge.chunk(file.getAbsolutePath(), file.getAbsolutePath(), Files.newBufferedReader(file.toPath(), StandardCharsets.UTF_8));"],"delete":["31","import java.io.File;","32","import java.util.Collection;","33","import java.util.List;","34","","45","    bridge = new TokenizerBridge(new JavaTokenizer(), \"UTF-8\", 10);","49","  public void testDuplicationInSingleFile() {","68","  public void testDuplicationBetweenTwoFiles() {","90","  private void addToIndex(File file) {","91","    List<Block> blocks = bridge.chunk(file.getAbsolutePath(), file);"]}],"sonar-duplications\/src\/main\/java\/org\/sonar\/duplications\/internal\/pmd\/TokenizerBridge.java":[{"add":["23","import java.io.IOException;","24","import java.io.Reader;","25","import java.util.List;","41","  public TokenizerBridge(Tokenizer tokenizer, int blockSize) {","46","  public List<Block> chunk(String resourceId, String fileName, Reader fileReader) {","47","    return blockBuilder.chunk(resourceId, chunk(fileName, fileReader));","50","  public List<TokensLine> chunk(String fileName, Reader fileReader) {","51","    SourceCode sourceCode = new SourceCode(new FileCodeLoaderWithoutCache(fileName, fileReader));"],"delete":["30","import java.io.File;","31","import java.io.IOException;","32","import java.util.List;","33","","40","  private final String encoding;","43","  public TokenizerBridge(Tokenizer tokenizer, String encoding, int blockSize) {","45","    this.encoding = encoding;","49","  \/\/ TODO remove from here","50","  public List<Block> chunk(String resourceId, File file) {","51","    return blockBuilder.chunk(resourceId, chunk(file));","54","  public List<TokensLine> chunk(File file) {","55","    SourceCode sourceCode = new SourceCode(new FileCodeLoaderWithoutCache(file, encoding));"]}],"plugins\/sonar-xoo-plugin\/src\/main\/java\/org\/sonar\/xoo\/lang\/XooTokenizer.java":[{"add":["50","    for (String line : source.getCode()) {","51","      for (String token : Splitter.on(\" \").split(line)) {","52","        TokenEntry cpdToken = new TokenEntry(token, fileName, lineIdx);","53","        cpdTokens.add(cpdToken);","55","      lineIdx++;"],"delete":["50","    try {","51","      for (String line : FileUtils.readLines(new File(fileName), fs.encoding())) {","52","        for (String token : Splitter.on(\" \").split(line)) {","53","          TokenEntry cpdToken = new TokenEntry(token, fileName, lineIdx);","54","          cpdTokens.add(cpdToken);","55","        }","56","        lineIdx++;","58","    } catch (IOException e) {","59","      throw new IllegalStateException(\"Unable to tokenize\", e);"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/cpd\/deprecated\/DeprecatedCpdBlockIndexerSensor.java":[{"add":["74","      LOG.debug(\"{} is used for {}\", blockIndexer.getClass().getName(), language);"],"delete":["74","      LOG.info(\"{} is used for {}\", blockIndexer, language);"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/SourcePublisher.java":[{"add":["21","import java.io.BufferedReader;","22","import java.io.File;","23","import java.io.FileOutputStream;","24","import java.io.IOException;","25","import java.io.InputStream;","26","import java.io.InputStreamReader;","27","import java.nio.charset.StandardCharsets;","47","        InputStream in = inputFile.inputStream();","48","        BufferedReader reader = new BufferedReader(new InputStreamReader(in, inputFile.charset()))) {"],"delete":["21","import org.apache.commons.io.ByteOrderMark;","23","import org.apache.commons.io.input.BOMInputStream;","28","import java.io.BufferedReader;","29","import java.io.File;","30","import java.io.FileInputStream;","31","import java.io.FileOutputStream;","32","import java.io.IOException;","33","import java.io.InputStreamReader;","34","import java.nio.charset.StandardCharsets;","35","","50","        BOMInputStream bomIn = new BOMInputStream(new FileInputStream(inputFile.file()),","51","          ByteOrderMark.UTF_8, ByteOrderMark.UTF_16LE, ByteOrderMark.UTF_16BE, ByteOrderMark.UTF_32LE, ByteOrderMark.UTF_32BE);","52","        BufferedReader reader = new BufferedReader(new InputStreamReader(bomIn, inputFile.charset()))) {"]}]}},"0df26fe8b6e2273ddd5e6db253c4408abc55447c":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/projects\/filters\/__tests__\/__snapshots__\/SearchFilterContainer-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/PageHeader.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projects\/filters\/SearchFilterContainer.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/projects\/filters\/__tests__\/__snapshots__\/SearchFilterContainer-test.tsx.snap":[{"add":["10","    value=\"\""],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/PageHeader.tsx":[{"add":["84","      <SearchFilterContainer onQueryChange={props.onQueryChange} query={props.query} \/>"],"delete":["84","      <SearchFilterContainer","85","        onQueryChange={props.onQueryChange}","86","        organization={props.organization}","87","        query={props.query}","88","      \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/projects\/filters\/SearchFilterContainer.tsx":[{"add":["25","  onQueryChange: (change: { search?: string }) => void;","29","  handleSearch = (search?: string) => {","30","    this.props.onQueryChange({ search });","40","          value={this.props.query.search || ''}"],"delete":["24","  className?: string;","26","  onQueryChange: (change: T.RawQuery) => void;","27","  organization?: { key: string };","31","  handleSearch = (userQuery?: string) => {","32","    this.props.onQueryChange({ search: userQuery });"]}]}},"c98857962b32056da0858a3286ac634b2b52dc66":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/platform\/ws\/StatusActionTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/ws\/StatusAction.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/platform\/ws\/StatusActionTest.java":[{"add":["146","  public void status_is_STATUS_STARTING_if_platform_is_SAFEMODE_and_databaseMigration_is_SUCCEEDED() throws Exception {","147","    verifyStatus(Platform.Status.SAFEMODE, DatabaseMigrationState.Status.SUCCEEDED, STATUS_STARTING);","166","  public void status_is_STARTING_if_platform_is_STARTING_and_databaseMigration_is_SUCCEEDED() throws Exception {","167","    verifyStatus(Platform.Status.STARTING, DatabaseMigrationState.Status.SUCCEEDED, STATUS_STARTING);"],"delete":["146","  public void status_is_MIGRATION_RUNNING_if_platform_is_SAFEMODE_and_databaseMigration_is_SUCCEEDED() throws Exception {","147","    verifyStatus(Platform.Status.SAFEMODE, DatabaseMigrationState.Status.SUCCEEDED, STATUS_MIGRATION_RUNNING);","166","  public void status_is_MIGRATION_RUNNING_if_platform_is_STARTING_and_databaseMigration_is_SUCCEEDED() throws Exception {","167","    verifyStatus(Platform.Status.STARTING, DatabaseMigrationState.Status.SUCCEEDED, STATUS_MIGRATION_RUNNING);"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/ws\/StatusAction.java":[{"add":["137","        return Status.STARTING;","153","        return Status.STARTING;"],"delete":["137","        return Status.DB_MIGRATION_RUNNING;","153","        \/\/ status of Platform will change to STARTING _before_ DatabaseMigration status becomes SUCCEEDED","154","        \/\/ (see DatabaseMigrationImpl#doDatabaseMigration, platform's restart is requested _before_ DatabaseMigration status is updated)","155","        \/\/ so, in theory, this case can not happen","156","        return Status.DB_MIGRATION_RUNNING;"]}]}},"e4a472c43a9b7a5fd5592fa3d00cc0c35c2ab837":{"changes":{"server\/sonar-web\/config\/webpack.config.js":"MODIFY"},"diff":{"server\/sonar-web\/config\/webpack.config.js":[{"add":["72","        'react-dom': path.resolve(__dirname, '..\/node_modules\/react-dom'),","73","        \/\/ d3-selection exports an event object, which requires live-binding.","74","        \/\/ In order to support this, we need to tell Webpack to NOT look into","75","        \/\/ the dist\/ folder of this module, but in the src\/ folder instead.","76","        \/\/ See https:\/\/github.com\/d3\/d3-selection#event","77","        'd3-selection': path.resolve(__dirname, '..\/node_modules\/d3-selection\/src\/index.js')"],"delete":["72","        'react-dom': path.resolve(__dirname, '..\/node_modules\/react-dom')"]}]}},"83dd467a6b49b6048b86b1eb8a9416926a1d1077":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/account\/containers\/SecurityContainer.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/account\/components\/Security.js":"MODIFY","server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/account\/index.html.erb":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/account\/containers\/SecurityContainer.js":[{"add":["24","  return { user: state.user };"],"delete":["24","  return {","25","    user: state.user,","26","    canChangePassword: window.sonarqube.user.canChangePassword","27","  };"]}],"server\/sonar-web\/src\/main\/js\/apps\/account\/components\/Security.js":[{"add":["24","export default function Security ({ user }) {","32","          {user.local && ("],"delete":["24","export default function Security ({ user, canChangePassword }) {","32","          {canChangePassword && ("]}],"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/account\/index.html.erb":[{"add":[],"delete":["3","      canChangePassword: <%= User.editable_password? ? 'true' : 'false' -%>,"]}]}},"92e63318a312ad5ac0c24056b2b9e74c564f0029":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/es\/StickyFacetBuilder.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/es\/StickyFacetBuilder.java":[{"add":["40","import static java.lang.Math.max;","48","  \/** In some cases the user selects >15 items for one facet. In that case, we want to calculate the doc count for all of them (not just the first 15 items, which would be the","49","   * default for the TermsAggregation). *\/","50","  private static final int MAXIMUM_NUMBER_OF_SELECTED_ITEMS_WHOSE_DOC_COUNT_WILL_BE_CALCULATED = 50;","153","      .size(max(MAXIMUM_NUMBER_OF_SELECTED_ITEMS_WHOSE_DOC_COUNT_WILL_BE_CALCULATED, includes.length()))"],"delete":[]}]}},"b5725e190b7ea352448401d9e8e94ad8c58fd9f8":{"changes":{"server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v81\/DeleteSonarPullRequestProviderPropertyTest\/schema.sql":"MODIFY","server\/sonar-db-dao\/src\/schema\/schema-sq.ddl":"MODIFY","server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/step\/DataChangeTest\/schema.sql":"MODIFY","server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v81\/MigrateDeprecatedGithubPrivateKeyToNewKeyTest\/schema.sql":"MODIFY","server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v81\/MigrateGithubAlmSettingsTest\/schema.sql":"MODIFY","server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v81\/MigrateAzureAlmSettingsTest\/schema.sql":"MODIFY","server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v00\/PopulateInitialSchemaTest\/v79.sql":"MODIFY","server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v80\/PopulateNewCodePeriodTableTest\/schema.sql":"MODIFY","server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v81\/MigrateBitbucketAlmSettingsTest\/schema.sql":"MODIFY","server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v80\/RemoveLeakPeriodPropertiesTest\/schema.sql":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/dump\/SQSchemaDumper.java":"MODIFY","server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v80\/RemoveGitHubLoginGenerationStrategyPropertyTest\/schema.sql":"MODIFY","build.gradle":"MODIFY","server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v80\/PopulateProjectQualityGatesTableTest\/schema.sql":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/resources\/org\/sonar\/ce\/task\/projectanalysis\/dbmigration\/PopulateFileSourceLineCountTest\/file_sources.sql":"MODIFY","server\/sonar-db-core\/src\/test\/resources\/org\/sonar\/db\/ResultSetIteratorTest\/schema.sql":"MODIFY","server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v80\/RemoveDefaultQualityGateFromPropertiesTableTest\/schema.sql":"MODIFY"},"diff":{"server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v81\/DeleteSonarPullRequestProviderPropertyTest\/schema.sql":[{"add":["1","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),"],"delete":["1","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),"]}],"server\/sonar-db-dao\/src\/schema\/schema-sq.ddl":[{"adddelete}],"server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/step\/DataChangeTest\/schema.sql":[{"add":["1","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),"],"delete":["1","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),"]}],"server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v81\/MigrateDeprecatedGithubPrivateKeyToNewKeyTest\/schema.sql":[{"add":["1","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),"],"delete":["1","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),"]}],"server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v81\/MigrateGithubAlmSettingsTest\/schema.sql":[{"add":["28","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),","40","    \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),"],"delete":["28","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","40","    ID INTEGER NOT NULL AUTO_INCREMENT (1,1),"]}],"server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v81\/MigrateAzureAlmSettingsTest\/schema.sql":[{"add":["28","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),","40","    \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),"],"delete":["28","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","40","    ID INTEGER NOT NULL AUTO_INCREMENT (1,1),"]}],"server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v00\/PopulateInitialSchemaTest\/v79.sql":[{"add":["40","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),","52","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),","94","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),","126","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),","136","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),","167","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),","199","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),","249","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),","284","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),","295","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),","316","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),","343","  \"ID\" BIGINT NOT NULL AUTO_INCREMENT (1,1),","375","  \"ID\" BIGINT NOT NULL AUTO_INCREMENT (1,1),","408","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),","466","  \"ID\" BIGINT NOT NULL AUTO_INCREMENT (1,1),","480","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),","492","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),","498","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),","509","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),","519","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),","550","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),","571","  \"ID\" BIGINT NOT NULL AUTO_INCREMENT (1,1),","611","  \"ID\" BIGINT NOT NULL AUTO_INCREMENT (1,1),","626","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),","638","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),","649","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),","659","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),","682","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),","701","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),","721","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),","796","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),"],"delete":["40","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","52","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","94","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","126","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","136","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","167","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","199","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","249","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","284","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","295","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","316","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","343","  \"ID\" BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","375","  \"ID\" BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","408","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","466","  \"ID\" BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","480","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","492","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","498","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","509","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","519","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","550","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","571","  \"ID\" BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","611","  \"ID\" BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","626","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","638","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","649","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","659","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","682","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","701","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","721","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","796","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),"]}],"server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v80\/PopulateNewCodePeriodTableTest\/schema.sql":[{"add":["29","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),","41","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),","63","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),","76","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),"],"delete":["29","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","41","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","63","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","76","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),"]}],"server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v81\/MigrateBitbucketAlmSettingsTest\/schema.sql":[{"add":["28","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),","40","    \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),"],"delete":["28","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","40","    ID INTEGER NOT NULL AUTO_INCREMENT (1,1),"]}],"server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v80\/RemoveLeakPeriodPropertiesTest\/schema.sql":[{"add":["1","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),"],"delete":["1","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/dump\/SQSchemaDumper.java":[{"add":["99","          .replaceAll(\" \\\"PUBLIC\\\"\\\\.\", \" \")","123","    String res = fixAutoIncrementIdColumn(cleanedSql, \"\\\"ID\\\" INTEGER DEFAULT (NEXT VALUE FOR \", \"\\\"ID\\\" INTEGER NOT NULL AUTO_INCREMENT (1,1)\");","124","    res = fixAutoIncrementIdColumn(res, \"\\\"ID\\\" BIGINT DEFAULT (NEXT VALUE FOR \", \"\\\"ID\\\" BIGINT NOT NULL AUTO_INCREMENT (1,1)\");"],"delete":["99","          .replaceAll(\" PUBLIC\\\\.\", \" \")","123","    String res = fixAutoIncrementIdColumn(cleanedSql, \"ID INTEGER DEFAULT (NEXT VALUE FOR \", \"ID INTEGER NOT NULL AUTO_INCREMENT (1,1)\");","124","    res = fixAutoIncrementIdColumn(res, \"ID BIGINT DEFAULT (NEXT VALUE FOR \", \"ID BIGINT NOT NULL AUTO_INCREMENT (1,1)\");"]}],"server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v80\/RemoveGitHubLoginGenerationStrategyPropertyTest\/schema.sql":[{"add":["1","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),"],"delete":["1","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),"]}],"build.gradle":[{"add":["191","      dependency 'com.h2database:h2:1.4.199'"],"delete":["191","      dependency 'com.h2database:h2:1.3.176'"]}],"server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v80\/PopulateProjectQualityGatesTableTest\/schema.sql":[{"add":["1","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),","48","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),","59","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),"],"delete":["1","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","48","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),","59","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),"]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/resources\/org\/sonar\/ce\/task\/projectanalysis\/dbmigration\/PopulateFileSourceLineCountTest\/file_sources.sql":[{"add":["1","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),"],"delete":["1","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),"]}],"server\/sonar-db-core\/src\/test\/resources\/org\/sonar\/db\/ResultSetIteratorTest\/schema.sql":[{"add":["1","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),"],"delete":["1","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),"]}],"server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v80\/RemoveDefaultQualityGateFromPropertiesTableTest\/schema.sql":[{"add":["1","  \"ID\" INTEGER NOT NULL AUTO_INCREMENT (1,1),"],"delete":["1","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),"]}]}},"d234df518982af0f6194b457929786b06b7e32fe":{"changes":{"server\/sonar-web\/src\/main\/js\/helpers\/urls.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/workspace\/__tests__\/__snapshots__\/WorkspaceRuleViewer-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/withAppState.tsx":"ADD","server\/sonar-web\/src\/main\/js\/components\/workspace\/__tests__\/WorkspaceRuleViewer-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/workspace\/__tests__\/WorkspaceRuleDetails-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/workspace\/WorkspaceRuleDetails.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/helpers\/urls.ts":[{"add":["213","  return getRulesUrl({ open: rule, rule_key: rule }, organization); \/\/ eslint-disable-line camelcase"],"delete":["213","  \/* eslint-disable camelcase *\/","214","  return getRulesUrl({ open: rule, rule_key: rule }, organization);","215","  \/* eslint-enable camelcase *\/"]}],"server\/sonar-web\/src\/main\/js\/components\/workspace\/__tests__\/__snapshots__\/WorkspaceRuleViewer-test.tsx.snap":[{"add":["30","    <Connect(withAppState(WorkspaceRuleDetails))"],"delete":["30","    <WorkspaceRuleDetails"]}],"server\/sonar-web\/src\/main\/js\/components\/withAppState.tsx":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/components\/workspace\/__tests__\/WorkspaceRuleViewer-test.tsx":[{"add":["37","  const details = wrapper.findWhere(w => w.name().includes('WorkspaceRuleDetails'));","38","  details.prop<Function>('onLoad')({ name: 'Foo' });"],"delete":["37","  wrapper.find('WorkspaceRuleDetails').prop<Function>('onLoad')({ name: 'Foo' });"]}],"server\/sonar-web\/src\/main\/js\/components\/workspace\/__tests__\/WorkspaceRuleDetails-test.tsx":[{"add":["21","import { WorkspaceRuleDetails } from '..\/WorkspaceRuleDetails';","33","    <WorkspaceRuleDetails","34","      appState={{ organizationsEnabled: false }}","35","      onLoad={jest.fn()}","36","      organizationKey={undefined}","37","      ruleKey=\"foo\"","38","    \/>","49","    <WorkspaceRuleDetails","50","      appState={{ organizationsEnabled: false }}","51","      onLoad={onLoad}","52","      organizationKey={undefined}","53","      ruleKey=\"foo\"","54","    \/>"],"delete":["21","import WorkspaceRuleDetails from '..\/WorkspaceRuleDetails';","33","    <WorkspaceRuleDetails onLoad={jest.fn()} organizationKey={undefined} ruleKey=\"foo\" \/>","44","    <WorkspaceRuleDetails onLoad={onLoad} organizationKey={undefined} ruleKey=\"foo\" \/>"]}],"server\/sonar-web\/src\/main\/js\/components\/workspace\/WorkspaceRuleDetails.tsx":[{"add":["21","import { withAppState } from '..\/withAppState';","26","import { RuleDetails, AppState } from '..\/..\/app\/types';","30","  appState: Pick<AppState, 'organizationsEnabled'>;","42","export class WorkspaceRuleDetails extends React.PureComponent<Props, State> {","92","    const { organizationsEnabled } = this.props.appState;","93","    const organization = organizationsEnabled ? organizationKey : undefined;","104","              organization={organization}","111","              organization={organization}","120","","121","export default withAppState(WorkspaceRuleDetails);"],"delete":["25","import { RuleDetails } from '..\/..\/app\/types';","40","export default class WorkspaceRuleDetails extends React.PureComponent<Props, State> {","100","              organization={organizationKey}","107","              organization={organizationKey}"]}]}},"3f40e0bcabc43f283e69782dd1b30d7203841188":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/debt\/DebtRulesXMLImporter.java":"MODIFY","server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/debt\/DebtRulesXMLImporterTest\/ignore_remediation_cost_having_zero_value.xml":"ADD","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/debt\/DebtRulesXMLImporterTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/debt\/DebtRulesXMLImporter.java":[{"add":["35","import org.sonar.server.debt.DebtModelXMLExporter.*;","36","","37","import javax.annotation.CheckForNull;","38","import javax.annotation.Nonnull;","39","import javax.annotation.Nullable;","40","import javax.xml.stream.XMLInputFactory;","41","import javax.xml.stream.XMLStreamException;","42","","43","import java.io.Reader;","44","import java.io.StringReader;","45","import java.util.List;","48","import static java.lang.Boolean.FALSE;","49","import static java.lang.Boolean.TRUE;","50","import static javax.xml.stream.XMLInputFactory.*;","51","import static org.apache.commons.lang.StringUtils.isNotBlank;","52","import static org.sonar.api.server.debt.DebtRemediationFunction.Type.CONSTANT_ISSUE;","53","import static org.sonar.api.server.debt.DebtRemediationFunction.Type.LINEAR;","54","import static org.sonar.api.utils.Duration.MINUTE;","55","import static org.sonar.server.debt.DebtCharacteristicsXMLImporter.convertKey;","56","import static org.sonar.server.debt.DebtModelXMLExporter.*;","90","    xmlFactory.setProperty(IS_COALESCING, TRUE);","91","    xmlFactory.setProperty(IS_NAMESPACE_AWARE, FALSE);","92","    xmlFactory.setProperty(SUPPORT_DTD, FALSE);","93","    xmlFactory.setProperty(IS_VALIDATING, FALSE);","111","            ruleDebt.setSubCharacteristicKey(convertKey(parentKey));","135","    if (isNotBlank(ruleRepositoryKey) && isNotBlank(ruleKey)) {","161","        textValue = \"mn\".equals(textValue) ? MINUTE : textValue;","170","    Property coefficientProperty = properties.coefficient();","171","    String coefficient = coefficientProperty == null ? null : coefficientProperty.toDuration();","172","    Property offsetProperty = properties.offset();","173","    String offset = offsetProperty == null ? null : offsetProperty.toDuration();","174","    if (function != null && (coefficient != null || offset != null)) {","182","    if (\"constant_resource\".equals(function)) {","183","      validationMessages.addWarningText(String.format(\"Constant\/file function is no longer used, technical debt definitions on '%s' are ignored.\", ruleKey));","184","      return null;","185","    }","188","      return createRuleDebt(ruleKey, LINEAR.name(), coefficient, null, validationMessages);","190","    if (CONSTANT_ISSUE.name().equalsIgnoreCase(function) && coefficient != null && offset == null) {","191","      return createRuleDebt(ruleKey, CONSTANT_ISSUE.name(), null, coefficient, validationMessages);","192","    }","193","    return new RuleDebt().setRuleKey(ruleKey).setFunction(function.toUpperCase()).setCoefficient(coefficient).setOffset(offset);","197","    List<Property> list;","200","      this.list = newArrayList();","204","      this.list.add(property);","221","      return Iterables.find(list, new PropertyMatchKey(key), null);","259","  private static class PropertyMatchKey implements Predicate<Property> {","262","    public PropertyMatchKey(String key) {"],"delete":["25","import java.io.Reader;","26","import java.io.StringReader;","27","import java.util.List;","28","import javax.annotation.CheckForNull;","29","import javax.annotation.Nonnull;","30","import javax.annotation.Nullable;","31","import javax.xml.stream.XMLInputFactory;","32","import javax.xml.stream.XMLStreamException;","41","import org.sonar.api.server.debt.DebtRemediationFunction;","44","import org.sonar.server.debt.DebtModelXMLExporter.RuleDebt;","47","import static org.sonar.server.debt.DebtModelXMLExporter.CHARACTERISTIC;","48","import static org.sonar.server.debt.DebtModelXMLExporter.CHARACTERISTIC_KEY;","49","import static org.sonar.server.debt.DebtModelXMLExporter.PROPERTY;","50","import static org.sonar.server.debt.DebtModelXMLExporter.PROPERTY_COEFFICIENT;","51","import static org.sonar.server.debt.DebtModelXMLExporter.PROPERTY_FUNCTION;","52","import static org.sonar.server.debt.DebtModelXMLExporter.PROPERTY_KEY;","53","import static org.sonar.server.debt.DebtModelXMLExporter.PROPERTY_OFFSET;","54","import static org.sonar.server.debt.DebtModelXMLExporter.PROPERTY_TEXT_VALUE;","55","import static org.sonar.server.debt.DebtModelXMLExporter.PROPERTY_VALUE;","56","import static org.sonar.server.debt.DebtModelXMLExporter.REPOSITORY_KEY;","57","import static org.sonar.server.debt.DebtModelXMLExporter.RULE_KEY;","91","    xmlFactory.setProperty(XMLInputFactory.IS_COALESCING, Boolean.TRUE);","92","    xmlFactory.setProperty(XMLInputFactory.IS_NAMESPACE_AWARE, Boolean.FALSE);","93","    xmlFactory.setProperty(XMLInputFactory.SUPPORT_DTD, Boolean.FALSE);","94","    xmlFactory.setProperty(XMLInputFactory.IS_VALIDATING, Boolean.FALSE);","112","            ruleDebt.setSubCharacteristicKey(DebtCharacteristicsXMLImporter.convertKey(parentKey));","136","    if (StringUtils.isNotBlank(ruleRepositoryKey) && StringUtils.isNotBlank(ruleKey)) {","162","        textValue = \"mn\".equals(textValue) ? Duration.MINUTE : textValue;","171","    if (function != null) {","172","","173","      Property coefficientProperty = properties.coefficient();","174","      String coefficient = coefficientProperty != null ? coefficientProperty.toDuration() : null;","175","      Property offsetProperty = properties.offset();","176","      String offset = offsetProperty != null ? offsetProperty.toDuration() : null;","177","","187","      return new RuleDebt().setRuleKey(ruleKey).setFunction(DebtRemediationFunction.Type.LINEAR.name()).setCoefficient(coefficient);","188","    } else if (\"constant_resource\".equals(function)) {","189","      validationMessages.addWarningText(String.format(\"Constant\/file function is no longer used, technical debt definitions on '%s' are ignored.\", ruleKey));","190","    } else if (DebtRemediationFunction.Type.CONSTANT_ISSUE.name().equalsIgnoreCase(function) && coefficient != null && offset == null) {","191","      return new RuleDebt().setRuleKey(ruleKey).setFunction(DebtRemediationFunction.Type.CONSTANT_ISSUE.name()).setOffset(coefficient);","192","    } else {","193","      return new RuleDebt().setRuleKey(ruleKey).setFunction(function.toUpperCase()).setCoefficient(coefficient).setOffset(offset);","195","    return null;","199","    List<Property> properties;","202","      this.properties = newArrayList();","206","      this.properties.add(property);","223","      return Iterables.find(properties, new PropertyMathKey(key), null);","261","  private static class PropertyMathKey implements Predicate<Property> {","264","    public PropertyMathKey(String key) {","274",""]}],"server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/debt\/DebtRulesXMLImporterTest\/ignore_remediation_cost_having_zero_value.xml":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/debt\/DebtRulesXMLImporterTest.java":[{"add":["23","import java.nio.charset.StandardCharsets;","24","import java.util.List;","182","  public void ignore_remediation_cost_having_zero_value() throws Exception {","183","    String xml = getFileContent(\"ignore_remediation_cost_having_zero_value.xml\");","184","","185","    List<RuleDebt> results = importer.importXML(xml, validationMessages);","186","    assertThat(results).isEmpty();","187","  }","188","","189","  @Test"],"delete":["28","import java.nio.charset.StandardCharsets;","29","import java.util.List;","30",""]}]}},"61e72deca5f7a39ea0b3e4236fc668089c885eee":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/bulk-change-modal-view.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/bulk-change-modal-view.js":[{"add":["71","    this.disableForm();","76","          if (!that.isDestroyed) {","77","            if (r.failed) {","78","              that.showWarnMessage(profile, r.succeeded, r.failed);","79","            } else {","80","              that.showSuccessMessage(profile, r.succeeded);","81","            }","88","      if (!that.isDestroyed) {","89","        that.$(that.ui.codingRulesSubmitBulkChange.selector).hide();","90","        that.enableForm();","91","        that.$('.modal-field').hide();","92","        that.$('.js-modal-close').focus();","93","      }"],"delete":["75","          if (r.failed) {","76","            that.showWarnMessage(profile, r.succeeded, r.failed);","77","          } else {","78","            that.showSuccessMessage(profile, r.succeeded);","85","      that.$(that.ui.codingRulesSubmitBulkChange.selector).hide();","86","      that.$('.modal-field').hide();","87","      that.$('.js-modal-close').focus();"]}]}},"a854aaaef0a305bea8d49b7094610900663b174f":{"changes":{"\/dev\/null":"DELETE"},"diff":{"\/dev\/null":[{"add":[],"delete":[]}]}},"1de29b3cc0b22983c78362f3f0c5b370d0dcb264":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/models\/filter.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/models\/filter.js":[{"add":["4","      return baseUrl + '\/api\/issue_filters\/show\/' + this.id;"],"delete":["4","      return '\/api\/issue_filters\/show\/' + this.id;"]}]}},"fa2da3f08329ff6498ecc09b4630a259514e65bc":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/__snapshots__\/CrossComponentSourceViewerWrapper-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/ComponentSourceSnippetViewer.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/__snapshots__\/CrossComponentSourceViewerWrapper-test.tsx.snap":[{"add":["18","  <ContextProvider","20","    value={","22","        \"branchLike\": undefined,","23","        \"file\": Object {","37","      }","38","    }","39","  >","40","    <ComponentSourceSnippetViewer","41","      issue={","42","        Object {","43","          \"actions\": Array [],","44","          \"component\": \"main.js\",","45","          \"componentLongName\": \"main.js\",","46","          \"componentQualifier\": \"FIL\",","47","          \"componentUuid\": \"foo1234\",","48","          \"creationDate\": \"2017-03-01T09:36:01+0100\",","49","          \"flows\": Array [","50","            Array [","51","              Object {","52","                \"component\": \"main.js\",","53","                \"textRange\": Object {","54","                  \"endLine\": 2,","55","                  \"endOffset\": 2,","56","                  \"startLine\": 1,","57","                  \"startOffset\": 1,","58","                },","59","              },","60","              Object {","61","                \"component\": \"main.js\",","62","                \"textRange\": Object {","63","                  \"endLine\": 2,","64","                  \"endOffset\": 2,","65","                  \"startLine\": 1,","66","                  \"startOffset\": 1,","67","                },","68","              },","69","              Object {","70","                \"component\": \"main.js\",","71","                \"textRange\": Object {","72","                  \"endLine\": 2,","73","                  \"endOffset\": 2,","74","                  \"startLine\": 1,","75","                  \"startOffset\": 1,","76","                },","77","              },","78","            ],","79","            Array [","80","              Object {","81","                \"component\": \"main.js\",","82","                \"textRange\": Object {","83","                  \"endLine\": 2,","84","                  \"endOffset\": 2,","85","                  \"startLine\": 1,","86","                  \"startOffset\": 1,","87","                },","88","              },","89","              Object {","90","                \"component\": \"main.js\",","91","                \"textRange\": Object {","92","                  \"endLine\": 2,","93","                  \"endOffset\": 2,","94","                  \"startLine\": 1,","95","                  \"startOffset\": 1,","96","                },","97","              },","98","            ],","99","          ],","100","          \"fromHotspot\": false,","101","          \"key\": \"1\",","102","          \"line\": 25,","103","          \"message\": \"Reduce the number of conditional operators (4) used in the expression\",","104","          \"organization\": \"myorg\",","105","          \"project\": \"myproject\",","106","          \"projectKey\": \"foo\",","107","          \"projectName\": \"Foo\",","108","          \"projectOrganization\": \"org\",","109","          \"rule\": \"javascript:S1067\",","110","          \"ruleName\": \"foo\",","111","          \"secondaryLocations\": Array [","112","            Object {","113","              \"component\": \"main.js\",","114","              \"textRange\": Object {","115","                \"endLine\": 2,","116","                \"endOffset\": 2,","117","                \"startLine\": 1,","118","                \"startOffset\": 1,","119","              },","120","            },","121","            Object {","122","              \"component\": \"main.js\",","123","              \"textRange\": Object {","124","                \"endLine\": 2,","125","                \"endOffset\": 2,","126","                \"startLine\": 1,","127","                \"startOffset\": 1,","128","              },","129","            },","130","          ],","131","          \"severity\": \"MAJOR\",","132","          \"status\": \"OPEN\",","133","          \"textRange\": Object {","134","            \"endLine\": 26,","135","            \"endOffset\": 15,","136","            \"startLine\": 25,","137","            \"startOffset\": 0,","138","          },","139","          \"transitions\": Array [],","140","          \"type\": \"BUG\",","141","        }","142","      }","143","      issuesByLine={Object {}}","144","      last={true}","145","      loadDuplications={[Function]}","146","      locations={","147","        Array [","158","        ]","160","      onIssueChange={[MockFunction]}","161","      onIssuePopupToggle={[Function]}","162","      onLinePopupToggle={[Function]}","163","      onLocationSelect={[MockFunction]}","164","      renderDuplicationPopup={[Function]}","165","      scroll={[MockFunction]}","166","      snippetGroup={","167","        Object {","168","          \"component\": Object {","169","            \"key\": \"main.js\",","170","            \"measures\": Object {","171","              \"coverage\": \"85.2\",","172","              \"duplicationDensity\": \"1.0\",","173","              \"issues\": \"12\",","174","              \"lines\": \"56\",","175","            },","176","            \"path\": \"main.js\",","177","            \"project\": \"my-project\",","178","            \"projectName\": \"MyProject\",","179","            \"q\": \"FIL\",","180","            \"uuid\": \"foo-bar\",","181","          },","182","          \"locations\": Array [","183","            Object {","184","              \"component\": \"main.js\",","185","              \"index\": 0,","186","              \"textRange\": Object {","187","                \"endLine\": 2,","188","                \"endOffset\": 2,","189","                \"startLine\": 1,","190","                \"startOffset\": 1,","191","              },","192","            },","193","          ],","194","          \"sources\": Object {","195","            \"16\": Object {","196","              \"code\": \"<span class=\\\\\"k\\\\\">import<\/span> java.util.<span class=\\\\\"sym-9 sym\\\\\">ArrayList<\/span>;\",","197","              \"coverageStatus\": \"covered\",","198","              \"coveredConditions\": 2,","199","              \"duplicated\": false,","200","              \"isNew\": true,","201","              \"line\": 16,","202","              \"scmAuthor\": \"simon.brandhof@sonarsource.com\",","203","              \"scmDate\": \"2018-12-11T10:48:39+0100\",","204","              \"scmRevision\": \"80f564becc0c0a1c9abaa006eca83a4fd278c3f0\",","205","            },","206","          },","207","        }","208","      }","209","    \/>","210","  <\/ContextProvider>"],"delete":["18","  <ComponentSourceSnippetViewer","19","    issue={","20","      Object {","21","        \"actions\": Array [],","22","        \"component\": \"main.js\",","23","        \"componentLongName\": \"main.js\",","24","        \"componentQualifier\": \"FIL\",","25","        \"componentUuid\": \"foo1234\",","26","        \"creationDate\": \"2017-03-01T09:36:01+0100\",","27","        \"flows\": Array [","28","          Array [","29","            Object {","30","              \"component\": \"main.js\",","31","              \"textRange\": Object {","32","                \"endLine\": 2,","33","                \"endOffset\": 2,","34","                \"startLine\": 1,","35","                \"startOffset\": 1,","36","              },","37","            },","38","            Object {","39","              \"component\": \"main.js\",","40","              \"textRange\": Object {","41","                \"endLine\": 2,","42","                \"endOffset\": 2,","43","                \"startLine\": 1,","44","                \"startOffset\": 1,","45","              },","46","            },","47","            Object {","48","              \"component\": \"main.js\",","49","              \"textRange\": Object {","50","                \"endLine\": 2,","51","                \"endOffset\": 2,","52","                \"startLine\": 1,","53","                \"startOffset\": 1,","54","              },","55","            },","56","          ],","57","          Array [","58","            Object {","59","              \"component\": \"main.js\",","60","              \"textRange\": Object {","61","                \"endLine\": 2,","62","                \"endOffset\": 2,","63","                \"startLine\": 1,","64","                \"startOffset\": 1,","65","              },","66","            },","67","            Object {","68","              \"component\": \"main.js\",","69","              \"textRange\": Object {","70","                \"endLine\": 2,","71","                \"endOffset\": 2,","72","                \"startLine\": 1,","73","                \"startOffset\": 1,","74","              },","75","            },","76","          ],","77","        ],","78","        \"fromHotspot\": false,","79","        \"key\": \"1\",","80","        \"line\": 25,","81","        \"message\": \"Reduce the number of conditional operators (4) used in the expression\",","82","        \"organization\": \"myorg\",","83","        \"project\": \"myproject\",","84","        \"projectKey\": \"foo\",","85","        \"projectName\": \"Foo\",","86","        \"projectOrganization\": \"org\",","87","        \"rule\": \"javascript:S1067\",","88","        \"ruleName\": \"foo\",","89","        \"secondaryLocations\": Array [","90","          Object {","91","            \"component\": \"main.js\",","92","            \"textRange\": Object {","93","              \"endLine\": 2,","94","              \"endOffset\": 2,","95","              \"startLine\": 1,","96","              \"startOffset\": 1,","97","            },","98","          },","99","          Object {","100","            \"component\": \"main.js\",","101","            \"textRange\": Object {","102","              \"endLine\": 2,","103","              \"endOffset\": 2,","104","              \"startLine\": 1,","105","              \"startOffset\": 1,","106","            },","107","          },","108","        ],","109","        \"severity\": \"MAJOR\",","110","        \"status\": \"OPEN\",","111","        \"textRange\": Object {","112","          \"endLine\": 26,","113","          \"endOffset\": 15,","114","          \"startLine\": 25,","115","          \"startOffset\": 0,","116","        },","117","        \"transitions\": Array [],","118","        \"type\": \"BUG\",","119","      }","120","    }","121","    issuesByLine={Object {}}","123","    last={true}","124","    loadDuplications={[Function]}","125","    locations={","126","      Array [","127","        Object {","128","          \"component\": \"main.js\",","129","          \"index\": 0,","130","          \"textRange\": Object {","131","            \"endLine\": 2,","132","            \"endOffset\": 2,","133","            \"startLine\": 1,","134","            \"startOffset\": 1,","135","          },","136","        },","137","      ]","138","    }","139","    onIssueChange={[MockFunction]}","140","    onIssuePopupToggle={[Function]}","141","    onLinePopupToggle={[Function]}","142","    onLocationSelect={[MockFunction]}","143","    renderDuplicationPopup={[Function]}","144","    scroll={[MockFunction]}","145","    snippetGroup={","147","        \"component\": Object {","161","        \"locations\": Array [","172","        ],","173","        \"sources\": Object {","174","          \"16\": Object {","175","            \"code\": \"<span class=\\\\\"k\\\\\">import<\/span> java.util.<span class=\\\\\"sym-9 sym\\\\\">ArrayList<\/span>;\",","176","            \"coverageStatus\": \"covered\",","177","            \"coveredConditions\": 2,","178","            \"duplicated\": false,","179","            \"isNew\": true,","180","            \"line\": 16,","181","            \"scmAuthor\": \"simon.brandhof@sonarsource.com\",","182","            \"scmDate\": \"2018-12-11T10:48:39+0100\",","183","            \"scmRevision\": \"80f564becc0c0a1c9abaa006eca83a4fd278c3f0\",","184","          },","185","        },","187","    }","188","  \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/ComponentSourceSnippetViewer.tsx":[{"add":["97","      this.props.snippetGroup.locations,"],"delete":["96","    const mainLocation: T.FlowLocation = {","97","      component: this.props.issue.component,","98","      textRange: this.props.issue.textRange || {","99","        endLine: 0,","100","        endOffset: 0,","101","        startLine: 0,","102","        startOffset: 0","103","      }","104","    };","106","      this.props.snippetGroup.locations.concat(mainLocation),"]}]}},"c189245cda6020e46179bb1d0c9f54497440883b":{"changes":{"sonar-batch\/src\/test\/java\/org\/sonar\/batch\/mediumtest\/fs\/FileSystemMediumTest.java":"MODIFY"},"diff":{"sonar-batch\/src\/test\/java\/org\/sonar\/batch\/mediumtest\/fs\/FileSystemMediumTest.java":[{"add":["236","      \/\/ check that symlink was not resolved to target","237","      assertThat(result.inputFiles()).extractingResultOf(\"path\").toString().startsWith(projectDir.toString());","238","    }","239","  }","240","","241","  \/\/ SONAR-6719","242","  @Test","243","  public void scanProjectWithWrongCase() {","244","    if (System2.INSTANCE.isOsWindows()) {","245","      File projectDir = new File(\"src\/test\/resources\/mediumtest\/xoo\/sample\");","246","      TaskResult result = tester","247","        .newScanTask(new File(projectDir, \"sonar-project.properties\"))","248","        .property(\"sonar.sources\", \"SRC\")","249","        .start();","250","","251","      assertThat(result.inputFiles()).hasSize(3);","252","      assertThat(result.inputFiles()).extractingResultOf(\"relativePath\").startsWith(\"src\");"],"delete":[]}]}},"18d88fb429fbee1fb7b8aa4fc7d2dcb3021bb093":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/users\/templates\/users-tokens.hbs":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/account\/templates\/account-tokens.hbs":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/users\/templates\/users-tokens.hbs":[{"add":["20","            <div title=\"{{name}}\">","21","              {{limitString name}}","22","            <\/div>","59","    <input type=\"text\" required maxlength=\"100\" placeholder=\"Enter Token Name\">","66","        New token \"{{limitString newToken.name}}\" has been created. Make sure you copy it now, you won\u2019t be able to see it again!"],"delete":["20","            {{name}}","57","    <input type=\"text\" required maxlength=\"30\" placeholder=\"Enter Token Name\">","64","        New token \"{{newToken.name}}\" has been created. Make sure you copy it now, you won\u2019t be able to see it again!"]}],"server\/sonar-web\/src\/main\/js\/apps\/account\/templates\/account-tokens.hbs":[{"add":["7","  <table class=\"data\">","8","    <thead>","9","    <tr>","10","      <th>Name<\/th>","11","      <th class=\"text-right\">Created<\/th>","12","      <th>&nbsp;<\/th>","13","    <\/tr>","14","    <\/thead>","15","    <tbody>","16","    {{#each tokens}}","18","        <td>","19","          <div title=\"{{name}}\">","20","            {{limitString name}}","21","          <\/div>","22","        <\/td>","23","        <td class=\"thin nowrap text-right\">","24","          {{d createdAt}}","25","        <\/td>","26","        <td class=\"thin nowrap text-right\">","27","          <div class=\"big-spacer-left\">","28","            <form class=\"js-revoke-token-form\" data-token=\"{{name}}\">","29","              {{#if deleting}}","30","                <button class=\"button-red active input-small\">Sure?<\/button>","31","              {{else}}","32","                <button class=\"button-red input-small\">Revoke<\/button>","33","              {{\/if}}","34","            <\/form>","35","          <\/div>","36","        <\/td>","38","    {{else}}","39","      <tr>","40","        <td colspan=\"3\">","41","          <span class=\"note\">No tokens<\/span>","42","        <\/td>","43","      <\/tr>","44","    {{\/each}}","45","    <\/tbody>","46","  <\/table>","56","  <input type=\"text\" required maxlength=\"100\" placeholder=\"Enter Token Name\">","63","      New token \"{{limitString newToken.name}}\" has been created. Make sure you copy it now, you won\u2019t be able to see it","64","      again!"],"delete":["7","  <div class=\"abs-width-400\">","8","    <table class=\"data\">","9","      <thead>","11","        <th>Name<\/th>","12","        <th class=\"text-right\">Created<\/th>","13","        <th>&nbsp;<\/th>","15","      <\/thead>","16","      <tbody>","17","      {{#each tokens}}","18","        <tr>","19","          <td>","20","            {{name}}","21","          <\/td>","22","          <td class=\"thin nowrap text-right\">","23","            {{d createdAt}}","24","          <\/td>","25","          <td class=\"thin nowrap text-right\">","26","            <div class=\"big-spacer-left\">","27","              <form class=\"js-revoke-token-form\" data-token=\"{{name}}\">","28","                {{#if deleting}}","29","                  <button class=\"button-red active input-small\">Sure?<\/button>","30","                {{else}}","31","                  <button class=\"button-red input-small\">Revoke<\/button>","32","                {{\/if}}","33","              <\/form>","34","            <\/div>","35","          <\/td>","36","        <\/tr>","37","      {{else}}","38","        <tr>","39","          <td colspan=\"3\">","40","            <span class=\"note\">No tokens<\/span>","41","          <\/td>","42","        <\/tr>","43","      {{\/each}}","44","      <\/tbody>","45","    <\/table>","46","  <\/div>","56","  <input type=\"text\" required maxlength=\"30\" placeholder=\"Enter Token Name\">","63","      New token \"{{newToken.name}}\" has been created. Make sure you copy it now, you won\u2019t be able to see it again!"]}]}},"ba40f3dab6efc2e6004a9329947ac37437afe4c1":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/permission-templates\/components\/ListHeader.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/permission-templates\/components\/ListHeader.js":[{"add":["46","        <div className=\"permission-column-inner\">","47","          <span className=\"text-middle\">{translate('projects_role', permission.key)}<\/span>","48","          <HelpTooltip className=\"spacer-left\" overlay={this.renderTooltip(permission)} \/>","49","        <\/div>"],"delete":["46","        <span className=\"text-middle\">{translate('projects_role', permission.key)}<\/span>","47","        <HelpTooltip className=\"spacer-left\" overlay={this.renderTooltip(permission)} \/>"]}]}},"87714eac31a67db8d55af07b7e6411eb64bce2a8":{"changes":{"server\/sonar-web\/src\/main\/js\/api\/components.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/DirectoryFacet.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/DirectoryFacet-test.tsx":"ADD","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/__snapshots__\/DirectoryFacet-test.tsx.snap":"ADD"},"diff":{"server\/sonar-web\/src\/main\/js\/api\/components.ts":[{"add":["162","export function getDirectories(data: GetTreeParams) {","163","  return getTree<TreeComponentWithPath>({ ...data, qualifiers: 'DIR' });","164","}","165",""],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/DirectoryFacet.tsx":[{"add":["25","import { getDirectories, TreeComponentWithPath } from '..\/..\/..\/api\/components';","32","  fetching: boolean;","38","  stats: Facet | undefined;","42","  getFacetItemText = (path: string) => {","43","    return collapsePath(path, 15);","46","  getSearchResultKey = (directory: TreeComponentWithPath) => {","47","    return directory.path;","50","  getSearchResultText = (directory: TreeComponentWithPath) => {","55","    return getDirectories({","60","    }).then(({ components, paging }) => ({","61","      paging,","62","      results: components.filter(dir => dir.path !== undefined)","63","    }));","66","  loadSearchResultCount = (directories: TreeComponentWithPath[]) => {","68","      directories: directories.map(directory => directory.path)","79","  renderFacetItem = (path: string) => {","80","    return this.renderDirectory(collapsePath(path, 15));","83","  renderSearchResult = (directory: TreeComponentWithPath, term: string) => {","84","    return this.renderDirectory(highlightTerm(collapsePath(directory.path, 15), term));","89","      <ListStyleFacet<TreeComponentWithPath>"],"delete":["25","import { getTree, TreeComponent } from '..\/..\/..\/api\/components';","31","  fetching: boolean;","38","  stats: T.Dict<number> | undefined;","42","  getFacetItemText = (directory: string) => {","43","    return collapsePath(directory, 15);","46","  getSearchResultKey = (directory: TreeComponent) => {","47","    return directory.name;","50","  getSearchResultText = (directory: TreeComponent) => {","55","    return getTree({","58","      qualifiers: 'DIR',","61","    }).then(({ components, paging }) => ({ paging, results: components }));","64","  loadSearchResultCount = (directories: TreeComponent[]) => {","66","      directories: directories.map(directory => directory.name)","77","  renderFacetItem = (directory: string) => {","78","    return this.renderDirectory(collapsePath(directory, 15));","81","  renderSearchResult = (directory: TreeComponent, term: string) => {","82","    return this.renderDirectory(highlightTerm(collapsePath(directory.name), term));","87","      <ListStyleFacet<TreeComponent>"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/DirectoryFacet-test.tsx":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/__snapshots__\/DirectoryFacet-test.tsx.snap":[{"add":[],"delete":[]}]}},"f831f6244ff31d74d8c8454ad144848780643d71":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/ComponentSourceSnippetViewer.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/ComponentSourceSnippetViewer.tsx":[{"add":["315","        linePopup={this.props.linePopup}"],"delete":[]}]}},"1cef2be2d888440727f9c90c75b4a2d263c55702":{"changes":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/report\/ComponentsPublisherTest.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/ComponentsPublisher.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/report\/ComponentsPublisherTest.java":[{"add":["23","import java.nio.file.Files;","198","  public void should_write_relative_path_to_root_for_modules_in_flat_hierarchy() throws IOException {","199","    Path rootBaseDir = temp.newFolder().toPath();","200","    Path module1BaseDir = rootBaseDir.resolve(\"module1\");","201","    Path module2BaseDir = rootBaseDir.resolve(\"module2\");","202","    Files.createDirectories(module1BaseDir);","203","    Files.createDirectories(module2BaseDir);","204","","205","    ProjectDefinition rootDef = ProjectDefinition.create()","206","      .setKey(\"foo\")","207","      .setProperty(CoreProperties.PROJECT_VERSION_PROPERTY, \"1.0\")","208","      .setName(\"Root project\")","209","      .setDescription(\"Root description\")","210","      .setBaseDir(rootBaseDir.toFile())","211","      .setWorkDir(temp.newFolder());","212","    DefaultInputModule root = new DefaultInputModule(rootDef, 1);","213","","214","    ProjectDefinition module1Def = ProjectDefinition.create()","215","      .setKey(\"module1k\")","216","      .setName(\"Module1\")","217","      .setDescription(\"Module description\")","218","      .setBaseDir(module1BaseDir.toFile())","219","      .setWorkDir(temp.newFolder());","220","    rootDef.addSubProject(module1Def);","221","    DefaultInputModule module1 = new DefaultInputModule(module1Def, 2);","222","","223","    ProjectDefinition module2Def = ProjectDefinition.create()","224","      .setKey(\"module2k\")","225","      .setName(\"Module2\")","226","      .setDescription(\"Module description\")","227","      .setBaseDir(module2BaseDir.toFile())","228","      .setWorkDir(temp.newFolder());","229","    module1Def.addSubProject(module2Def);","230","    DefaultInputModule module2 = new DefaultInputModule(module2Def, 3);","231","","232","    Map<DefaultInputModule, DefaultInputModule> modules = new HashMap<>();","233","    modules.put(module2, module1);","234","    modules.put(module1, root);","235","    moduleHierarchy = new DefaultInputModuleHierarchy(modules);","236","    tree.index(module2, module1);","237","    tree.index(module1, root);","238","    ComponentsPublisher publisher = new ComponentsPublisher(moduleHierarchy, tree, branchConfiguration);","239","    publisher.publish(writer);","240","","241","    assertThat(reader.readComponent(2).getProjectRelativePath()).isEqualTo(\"module1\");","242","    assertThat(reader.readComponent(3).getProjectRelativePath()).isEqualTo(\"module2\");","243","  }","244","","245","  @Test"],"delete":[]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/ComponentsPublisher.java":[{"add":["76","   * Writes the tree of components recursively, deep-first.","77","   *","127","    }","129","    String projectRelativePath = getProjectRelativePath(component);","130","    if (projectRelativePath != null) {","131","      builder.setProjectRelativePath(projectRelativePath);"],"delete":["76","   * Writes the tree of components recursively, deep-first. ","127","      String projectRelativePath = getProjectRelativePath(component);","128","      if (projectRelativePath != null) {","129","        builder.setProjectRelativePath(projectRelativePath);","130","      }"]}]}},"33e68fd792458053de7492ba6cba4edf0f517ac7":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/__tests__\/__snapshots__\/ProjectActivityGraphs-test.js.snap":"ADD","server\/sonar-web\/src\/main\/js\/components\/charts\/line-chart.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/component-measures\/details\/history\/MeasureHistory.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/__tests__\/ProjectActivityGraphs-test.js":"ADD","server\/sonar-web\/src\/main\/js\/components\/charts\/AdvancedTimeline.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/__tests__\/__snapshots__\/ProjectActivityGraphs-test.js.snap":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/components\/charts\/line-chart.js":[{"add":["65","      .defined(d => d.y != null)","80","    const points = this.props.data.filter(point => point.y != null).map((point, index) => {","128","    const p = d3Line()","129","      .x(d => xScale(d.x))","130","      .y(d => yScale(d.y))","131","      .defined(d => d.y != null)","132","      .curve(curveBasis);"],"delete":["79","    const points = this.props.data.map((point, index) => {","127","    const p = d3Line().x(d => xScale(d.x)).y(d => yScale(d.y)).curve(curveBasis);"]}],"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/details\/history\/MeasureHistory.js":[{"add":["78","      return r.measures[0].history.filter(analysis => analysis.value != null).map(analysis => ({"],"delete":["78","      return r.measures[0].history.map(analysis => ({"]}],"server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/__tests__\/ProjectActivityGraphs-test.js":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/components\/charts\/AdvancedTimeline.js":[{"add":["162","    const lineGenerator = d3Line()","163","      .defined(d => d.y || d.y === 0)","164","      .x(d => xScale(d.x))","165","      .y(d => yScale(d.y));","183","    const areaGenerator = area()","184","      .defined(d => d.y || d.y === 0)","185","      .x(d => xScale(d.x))","186","      .y1(d => yScale(d.y))","187","      .y0(yScale(0));"],"delete":["162","    const lineGenerator = d3Line().x(d => xScale(d.x)).y(d => yScale(d.y));","180","    const areaGenerator = area().x(d => xScale(d.x)).y1(d => yScale(d.y)).y0(yScale(0));"]}]}},"9b55dfb4c834e56c248c4fd4e62e3347553f08f3":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/ws\/RepositoriesAction.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/ws\/RepositoriesActionTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/ws\/RepositoriesAction.java":[{"add":["86","    Pattern pattern = Pattern.compile(query == null ? MATCH_ALL : MATCH_ALL + Pattern.quote(query) + MATCH_ALL, Pattern.CASE_INSENSITIVE);"],"delete":["86","    Pattern pattern = Pattern.compile(query == null ? MATCH_ALL : MATCH_ALL + query + MATCH_ALL, Pattern.CASE_INSENSITIVE);"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/ws\/RepositoriesActionTest.java":[{"add":["35","  private static final String EMPTY_JSON_RESPONSE = \"{\\\"repositories\\\":[]}\";","51","  }","53","  @Test","54","  public void should_list_repositories() throws Exception {","58","  }","59","","60","  @Test","61","  public void filter_repositories_by_name() throws Exception {","67","  @Test","68","  public void do_not_consider_query_as_regexp_when_filtering_repositories_by_name() throws Exception {","69","    \/\/ invalid regexp : do not fail. Query is not a regexp.","70","    newRequest().setParam(\"q\", \"[\").execute().assertJson(EMPTY_JSON_RESPONSE);","71","","72","    \/\/ this is not the \"match all\" regexp","73","    newRequest().setParam(\"q\", \".*\").execute().assertJson(EMPTY_JSON_RESPONSE);","74","","75","  }","76",""],"delete":["42","    wsTester = new WsTester(new RulesWs(new RepositoriesAction(dbTester.getDbClient())));","43","  }","44","","45","  @Test","46","  public void should_list_repositories() throws Exception {"]}]}},"64a3e43ee8d95c88c0b394ff258d35a2f38504f5":{"changes":{"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/measure\/ProjectMeasuresIndexerIterator.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/measure\/ProjectMeasuresIndexerIteratorTest.java":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/measure\/ProjectMeasuresIndexerIterator.java":[{"add":[],"delete":["224","    throw new IllegalArgumentException(\"Measure has no value\");"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/measure\/ProjectMeasuresIndexerIteratorTest.java":[{"add":["163","  public void ignore_measure_that_does_not_have_value() throws Exception {","164","    MetricDto metric1 = insertIntMetric(\"lines\");","165","    MetricDto metric2 = insertIntMetric(\"ncloc\");","166","    MetricDto leakMetric = insertIntMetric(\"new_lines\");","170","    MeasureDto withValue = insertMeasure(project, analysis, metric1, 10d);","171","    MeasureDto withLeakValue = insertMeasure(project, analysis, leakMetric, null, 20d);","172","    MeasureDto withoutValue = insertMeasure(project, analysis, metric2, null, null);","173","","174","    Map<String, Double> numericMeasures = createResultSetAndReturnDocsById().get(project.uuid()).getMeasures().getNumericMeasures();","175","    assertThat(numericMeasures).containsOnly(entry(\"lines\", 10d), entry(\"new_lines\", 20d));","176","  }","177","","178","  @Test","179","  public void ignore_numeric_measure_that_has_text_value_but_not_numeric_value() throws Exception {","180","    MetricDto metric1 = insertIntMetric(\"lines\");","181","    MetricDto metric2 = insertIntMetric(\"ncloc\");","182","    ComponentDto project = ComponentTesting.newPrivateProjectDto(dbTester.getDefaultOrganization());","183","    SnapshotDto analysis = dbTester.components().insertProjectAndSnapshot(project);","184","","185","    MeasureDto withNumericValue = insertMeasure(project, analysis, metric1, 10d);","186","    MeasureDto withTextValue = insertMeasure(project, analysis, metric2, \"foo\");","187","","188","    Map<String, Double> numericMeasures = createResultSetAndReturnDocsById().get(project.uuid()).getMeasures().getNumericMeasures();","189","    assertThat(numericMeasures).containsOnly(entry(\"lines\", 10d));"],"delete":["163","  public void fail_when_measure_return_no_value() throws Exception {","164","    MetricDto metric = insertIntMetric(\"new_lines\");","167","    insertMeasure(project, analysis, metric, 10d);","169","    expectedException.expect(IllegalStateException.class);","170","    createResultSetAndReturnDocsById();"]}]}},"e21fbb25bc5a1b3a4658a78993d51404b6f8204e":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/FileFacet.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/SourceViewerHeaderSlim.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/__tests__\/__snapshots__\/SourceViewerHeaderSlim-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/__snapshots__\/FileFacet-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/FileFacet-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/__tests__\/__snapshots__\/SourceViewerHeader-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/utils.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/Sidebar.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/SourceViewerHeader.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/FileFacet.tsx":[{"add":["31","import { Facet, Query } from '..\/utils';","37","  files: string[];","47","  getFacetItemText = (path: string) => {","48","    return path;","52","    return file.path;","78","          return file.path;","91","  renderFacetItem = (path: string) => {","92","    return this.renderFile(path);","119","        values={this.props.files}"],"delete":["31","import { Facet, Query, ReferencedComponent } from '..\/utils';","37","  fileUuids: string[];","43","  referencedComponents: T.Dict<ReferencedComponent>;","48","  getFilePath = (fileUuid: string) => {","49","    const { referencedComponents } = this.props;","50","    return referencedComponents[fileUuid]","51","      ? collapsePath(referencedComponents[fileUuid].path || '', 15)","52","      : fileUuid;","53","  };","54","","55","  getReferencedComponent = (key: string) => {","56","    const { referencedComponents } = this.props;","57","    const fileUuid = Object.keys(referencedComponents).find(uuid => {","58","      return referencedComponents[uuid].key === key;","59","    });","60","    return fileUuid ? referencedComponents[fileUuid] : undefined;","61","  };","62","","63","  getFacetItemText = (fileUuid: string) => {","64","    const { referencedComponents } = this.props;","65","    return referencedComponents[fileUuid] ? referencedComponents[fileUuid].path || '' : fileUuid;","69","    const component = this.getReferencedComponent(file.key);","70","    return component ? component.uuid : file.key;","96","          const component = this.getReferencedComponent(file.key);","97","          return component && component.uuid;","110","  renderFacetItem = (fileUuid: string) => {","111","    const name = this.getFilePath(fileUuid);","112","    return this.renderFile(name);","139","        values={this.props.fileUuids}"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/SourceViewerHeaderSlim.tsx":[{"add":["56","  const { measures, path, project, projectName, q, subProject, subProjectName } = sourceViewerFile;","106","              files: path,"],"delete":["56","  const {","57","    measures,","58","    path,","59","    project,","60","    projectName,","61","    q,","62","    subProject,","63","    subProjectName,","64","    uuid","65","  } = sourceViewerFile;","115","              fileUuids: uuid,"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/__tests__\/__snapshots__\/SourceViewerHeaderSlim-test.tsx.snap":[{"add":["60","            \"files\": \"foo\/bar.ts\",","154","            \"files\": \"foo\/bar.ts\",","234","            \"files\": \"foo\/bar.ts\",","303","            \"files\": \"foo\/bar.ts\","],"delete":["60","            \"fileUuids\": \"foo-bar\",","154","            \"fileUuids\": \"foo-bar\",","234","            \"fileUuids\": \"foo-bar\",","303","            \"fileUuids\": \"foo-bar\","]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/__snapshots__\/FileFacet-test.tsx.snap":[{"add":["52","  fooUuid"],"delete":["52","  foo\/bar.js"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/FileFacet-test.tsx":[{"add":["26","import { Query } from '..\/..\/utils';","78","    expect(instance.getSearchResultKey({ key: 'bar', path: 'bar' } as TreeComponentWithPath)).toBe(","79","      'bar'","80","    );","94","      files={['foo', 'bar']}"],"delete":["26","import { Query, ReferencedComponent } from '..\/..\/utils';","78","    expect(instance.getSearchResultKey({ key: 'foo' } as TreeComponentWithPath)).toBe('fooUuid');","79","    expect(instance.getSearchResultKey({ key: 'bar' } as TreeComponentWithPath)).toBe('bar');","83","    expect(instance.getFacetItemText('fooUuid')).toBe('foo\/bar.js');","94","      fileUuids={['foo', 'bar']}","100","      referencedComponents={{","101","        fooUuid: { key: 'foo', uuid: 'fooUuid', path: 'foo\/bar.js' } as ReferencedComponent","102","      }}"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/__tests__\/__snapshots__\/SourceViewerHeader-test.tsx.snap":[{"add":["379","                \"files\": \"foo\/bar.ts\",","410","                \"files\": \"foo\/bar.ts\",","441","                \"files\": \"foo\/bar.ts\",","472","                \"files\": \"foo\/bar.ts\","],"delete":["379","                \"fileUuids\": \"foo-bar\",","410","                \"fileUuids\": \"foo-bar\",","441","                \"fileUuids\": \"foo-bar\",","472","                \"fileUuids\": \"foo-bar\","]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/utils.ts":[{"add":["89","    files: parseAsArray(query.files, parseAsString),","127","    files: serializeStringArray(query.files),"],"delete":["89","    files: parseAsArray(query.fileUuids, parseAsString),","127","    fileUuids: serializeStringArray(query.files),","163","    files: 'fileUuids',","176","    fileUuids: 'files',"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/Sidebar.tsx":[{"add":["90","          files={query.files}"],"delete":["90","          fileUuids={query.files}","92","          referencedComponents={this.props.referencedComponentsById}"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/SourceViewerHeader.tsx":[{"add":["83","              files: sourceViewerFile.path,"],"delete":["83","              fileUuids: sourceViewerFile.uuid,"]}]}},"bf2b385a2e8b9bfbc5cc66efb1356394c431b3e2":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/issue\/IssueAssignerTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/issue\/IssueAssigner.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/issue\/IssueDto.java":"MODIFY","tests\/src\/test\/java\/org\/sonarqube\/tests\/issue\/AutoAssignTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/issue\/IssueAssignerTest.java":[{"add":["22","import org.junit.Test;","33","import static java.util.stream.Collectors.joining;","34","import static java.util.stream.IntStream.range;","102","  public void dont_store_author_too_long() throws Exception {","103","    String scmAuthor = range(0, 256).mapToObj(i -> \"s\").collect(joining());","104","    addScmUser(scmAuthor, \"John C\");","105","    setSingleChangeset(scmAuthor, 123456789L, \"rev-1\");","106","    DefaultIssue issue = new DefaultIssue().setLine(1);","107","","108","    underTest.onIssue(FILE, issue);","109","","110","    assertThat(issue.authorLogin()).isNull();","111","    assertThat(issue.assignee()).isEqualTo(\"John C\");","112","","113","    assertThat(logTester.logs(LoggerLevel.DEBUG)).contains(\"SCM account '\" + scmAuthor + \"' is too long to be stored as issue author\");","114","  }","115","","116","  @Test"],"delete":["21","import org.junit.Test;","170",""]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/issue\/IssueAssigner.java":[{"add":["30","import org.sonar.db.issue.IssueDto;","78","        if (scmAuthor.length() <= IssueDto.AUTHOR_MAX_SIZE) {","79","          issueUpdater.setNewAuthor(issue, scmAuthor, changeContext);","80","        } else {","81","          LOGGER.debug(\"SCM account '{}' is too long to be stored as issue author\", scmAuthor);","82","        }","86","        String author = Strings.isNullOrEmpty(scmAuthor) ? null : scmAccountToUser.getNullable(scmAuthor);"],"delete":["77","        issueUpdater.setNewAuthor(issue, scmAuthor, changeContext);","81","        String author = issue.authorLogin() == null ? null : scmAccountToUser.getNullable(issue.authorLogin());"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/issue\/IssueDto.java":[{"add":["53","  public static final int AUTHOR_MAX_SIZE = 255;","353","    checkArgument(s == null || s.length() <= AUTHOR_MAX_SIZE, \"Value is too long for issue author login: %s\", s);"],"delete":["352","    checkArgument(s == null || s.length() <= 255, \"Value is too long for issue author login: %s\", s);"]}],"tests\/src\/test\/java\/org\/sonarqube\/tests\/issue\/AutoAssignTest.java":[{"add":["41","import static org.assertj.core.groups.Tuple.tuple;","84","    \/\/ SCM accounts longer than 255","85","    createUser(\"user9\", \"User 9\", \"user9@email.com\", IntStream.range(0, 256).mapToObj(i -> \"s\").collect(Collectors.joining()));","102","    \/\/ SCM accounts longer than 255 chars","103","    verifyIssueAssignee(issues, 10, \"user9\");","119","    assertThat(search(IssueQuery.create().assignees(\"user2\")).list()).hasSize(9);","142","    assertThat(issues)","143","      .extracting(Issue::line, Issue::author)","144","      .containsExactlyInAnyOrder(","145","        tuple(1, \"\"),","146","        tuple(2, \"\"),","147","        tuple(3, \"\"),","148","        tuple(4, \"\"),","149","        tuple(5, \"\"),","150","        tuple(6, \"\"),","151","        tuple(7, \"\"),","152","        tuple(8, \"\"),","153","        tuple(9, \"\"),","154","        tuple(10, \"\"));","163","    assertThat(issues)","164","      .extracting(Issue::line, Issue::author)","165","      .containsExactlyInAnyOrder(","166","        tuple(1, \"user1\"),","167","        tuple(2, \"user2\"),","168","        tuple(3, \"user3name\"),","169","        tuple(4, \"user4name\"),","170","        tuple(5, \"user5@email.com\"),","171","        tuple(6, \"user6@email.com\"),","172","        tuple(7, \"user7scmaccount\"),","173","        tuple(8, \"user8scmaccount\"),","174","        tuple(9, \"user8scmaccount\"),","175","        \/\/ SONAR-8727","176","        tuple(10, \"\"));"],"delete":["83","    \/\/ SCM accounts long then 255 chars will be ignored","84","    createUser(\"user9\", \"User 9\", \"user9@email.com\", IntStream.range(0,256).mapToObj(i -> \"s\").collect(Collectors.joining()));","101","    \/\/ SCM accounts long then 255 chars will be ignored","102","    verifyIssueAssignee(issues, 10, null);","118","    assertThat(search(IssueQuery.create().assignees(\"user2\")).list()).hasSize(8);","141","    for (Issue issue : issues) {","142","      assertThat(issue.author()).isEmpty();","143","    }","152","    for (Issue issue : issues) {","153","      assertThat(issue.author()).isNotEmpty();","154","    }"]}]}},"8c0b3350b714e835e91d89f958eefa531533070a":{"changes":{"sonar-application\/build.gradle":"MODIFY","server\/sonar-docs\/build.gradle":"MODIFY","sonar-application\/bundled_plugins.gradle":"ADD"},"diff":{"sonar-application\/build.gradle":[{"add":["29","    \/\/ please keep list ordered","30","    compile 'org.slf4j:slf4j-api'","32","    compile 'org.elasticsearch.client:transport'","33","    compile project(':server:sonar-ce')","34","    compile project(':server:sonar-main')","35","    compile project(':server:sonar-process')","36","    compile project(':server:sonar-webserver')","37","    compile project(':sonar-core')","38","    compile project(path: ':sonar-plugin-api', configuration: 'shadow')","39","    compile project(':sonar-plugin-api-impl')","41","    compileOnly 'com.google.code.findbugs:jsr305'","43","    jsw 'tanukisoft:wrapper:3.2.3'","44","    scanner project(path: ':sonar-scanner-engine-shaded', configuration: 'shadow')","45","    web project(':server:sonar-web')","46","    shutdowner project(':sonar-shutdowner')","48","    jdbc_h2 'com.h2database:h2'","49","    jdbc_mssql 'com.microsoft.sqlserver:mssql-jdbc'","50","    jdbc_postgresql 'org.postgresql:postgresql'","53","\/\/ declare dependencies in configuration bundledPlugin to be packaged in extensions\/plugins","54","apply from: 'bundled_plugins.gradle'","55",""],"delete":["29","  \/\/ please keep list ordered","30","  compile 'org.slf4j:slf4j-api'","32","  compile 'org.elasticsearch.client:transport'","33","  compile project(':server:sonar-ce')","34","  compile project(':server:sonar-main')","35","  compile project(':server:sonar-process')","36","  compile project(':server:sonar-webserver')","37","  compile project(':sonar-core')","38","  compile project(path: ':sonar-plugin-api', configuration: 'shadow')","39","  compile project(':sonar-plugin-api-impl')","41","  compileOnly 'com.google.code.findbugs:jsr305'","43","  jsw 'tanukisoft:wrapper:3.2.3'","44","  scanner project(path: ':sonar-scanner-engine-shaded', configuration: 'shadow')","45","  web project(':server:sonar-web')","46","  shutdowner project(':sonar-shutdowner')","48","  jdbc_h2 'com.h2database:h2'","49","  jdbc_mssql 'com.microsoft.sqlserver:mssql-jdbc'","50","  jdbc_postgresql 'org.postgresql:postgresql'","51","","52","  bundledPlugin 'org.sonarsource.css:sonar-css-plugin@jar'","53","  bundledPlugin \"org.sonarsource.dotnet:sonar-csharp-plugin@jar\"","54","  bundledPlugin \"org.sonarsource.dotnet:sonar-vbnet-plugin@jar\"","55","  bundledPlugin 'org.sonarsource.flex:sonar-flex-plugin@jar'","56","  bundledPlugin 'org.sonarsource.html:sonar-html-plugin@jar'","57","  bundledPlugin 'org.sonarsource.java:sonar-java-plugin@jar'","58","  bundledPlugin 'org.sonarsource.jacoco:sonar-jacoco-plugin@jar'","59","  bundledPlugin 'org.sonarsource.javascript:sonar-javascript-plugin@jar'","60","  bundledPlugin 'org.sonarsource.php:sonar-php-plugin@jar'","61","  bundledPlugin 'org.sonarsource.python:sonar-python-plugin@jar'","62","  bundledPlugin 'org.sonarsource.slang:sonar-go-plugin@jar'","63","  bundledPlugin \"org.sonarsource.slang:sonar-kotlin-plugin@jar\"","64","  bundledPlugin \"org.sonarsource.slang:sonar-ruby-plugin@jar\"","65","  bundledPlugin 'org.sonarsource.scm.git:sonar-scm-git-plugin@jar'","66","  bundledPlugin 'org.sonarsource.scm.svn:sonar-scm-svn-plugin@jar'","67","  bundledPlugin \"org.sonarsource.slang:sonar-scala-plugin@jar\"","68","  bundledPlugin 'org.sonarsource.typescript:sonar-typescript-plugin@jar'","69","  bundledPlugin 'org.sonarsource.xml:sonar-xml-plugin@jar'"]}],"server\/sonar-docs\/build.gradle":[{"add":["17","  bundledPlugin {","18","    transitive = false","19","  }","22","\/\/ loads the bundled_plugins.gradle of each edition","23","\/\/ (they will all add there own bundled plugins to the bundledPlugin dependency configuration)","24","apply from: new File(rootDir, 'sonar-application\/bundled_plugins.gradle')","25","File closeSourceDir = new File(rootDir, 'private');","26","if (closeSourceDir.exists()) {","27","  apply from: new File(closeSourceDir, 'edition-developer\/bundled_plugins.gradle')","28","  apply from: new File(closeSourceDir, 'edition-enterprise\/bundled_plugins.gradle')","29","  apply from: new File(closeSourceDir, 'edition-datacenter\/bundled_plugins.gradle')","34","    configurations.bundledPlugin.files.each {"],"delete":["17","  languagePlugin { transitive = false }","20","dependencies {","21","  languagePlugin 'com.sonarsource.abap:sonar-abap-plugin@jar' \/\/ private","22","  languagePlugin 'com.sonarsource.slang:sonar-apex-plugin@jar' \/\/ private","23","  languagePlugin \"org.sonarsource.dotnet:sonar-csharp-plugin@jar\"","24","  languagePlugin 'com.sonarsource.cpp:sonar-cfamily-plugin@jar' \/\/ private","25","  languagePlugin 'com.sonarsource.cobol:sonar-cobol-plugin@jar' \/\/ private","26","  languagePlugin 'org.sonarsource.css:sonar-css-plugin@jar'","27","  languagePlugin 'org.sonarsource.flex:sonar-flex-plugin@jar'","28","  languagePlugin 'org.sonarsource.java:sonar-java-plugin@jar'","29","  languagePlugin 'org.sonarsource.javascript:sonar-javascript-plugin@jar'","30","  languagePlugin \"org.sonarsource.slang:sonar-kotlin-plugin@jar\"","31","  languagePlugin 'org.sonarsource.php:sonar-php-plugin@jar'","32","  languagePlugin 'com.sonarsource.pli:sonar-pli-plugin@jar' \/\/ private","33","  languagePlugin 'com.sonarsource.plsql:sonar-plsql-plugin@jar' \/\/ private","34","  languagePlugin 'org.sonarsource.python:sonar-python-plugin@jar'","35","  languagePlugin 'com.sonarsource.rpg:sonar-rpg-plugin@jar' \/\/ private","36","  languagePlugin 'org.sonarsource.slang:sonar-go-plugin@jar'","37","  languagePlugin \"org.sonarsource.slang:sonar-ruby-plugin@jar\"","38","  languagePlugin \"org.sonarsource.slang:sonar-scala-plugin@jar\"","39","  languagePlugin 'com.sonarsource.swift:sonar-swift-plugin@jar' \/\/ private","40","  languagePlugin 'org.sonarsource.typescript:sonar-typescript-plugin@jar'","41","  languagePlugin 'com.sonarsource.tsql:sonar-tsql-plugin@jar' \/\/ private","42","  languagePlugin \"org.sonarsource.dotnet:sonar-vbnet-plugin@jar\"","43","  languagePlugin 'com.sonarsource.plugins.vb:sonar-vb-plugin@jar' \/\/ private","44","  languagePlugin 'org.sonarsource.html:sonar-html-plugin@jar'","45","  languagePlugin 'org.sonarsource.xml:sonar-xml-plugin@jar'","50","    configurations.languagePlugin.files.each {"]}],"sonar-application\/bundled_plugins.gradle":[{"add":[],"delete":[]}]}},"18f20eed6127994e54d2fcc7f9772fdcafcfd25d":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/__tests__\/__snapshots__\/SourceViewerHeader-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/SourceViewerHeader.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/__tests__\/__snapshots__\/SourceViewerHeader-test.tsx.snap":[{"add":["348","        <Link","349","          onlyActiveOnIndex={false}","350","          style={Object {}}","351","          to={","352","            Object {","353","              \"pathname\": \"\/project\/issues\",","354","              \"query\": Object {","355","                \"fileUuids\": \"foo-bar\",","356","                \"id\": \"my-project\",","357","                \"resolved\": \"false\",","358","                \"types\": \"BUG\",","359","              },","360","            }","361","          }","362","        >","363","          0","364","        <\/Link>","379","        <Link","380","          onlyActiveOnIndex={false}","381","          style={Object {}}","382","          to={","383","            Object {","384","              \"pathname\": \"\/project\/issues\",","385","              \"query\": Object {","386","                \"fileUuids\": \"foo-bar\",","387","                \"id\": \"my-project\",","388","                \"resolved\": \"false\",","389","                \"types\": \"VULNERABILITY\",","390","              },","391","            }","392","          }","393","        >","394","          2","395","        <\/Link>","410","        <Link","411","          onlyActiveOnIndex={false}","412","          style={Object {}}","413","          to={","414","            Object {","415","              \"pathname\": \"\/project\/issues\",","416","              \"query\": Object {","417","                \"fileUuids\": \"foo-bar\",","418","                \"id\": \"my-project\",","419","                \"resolved\": \"false\",","420","                \"types\": \"CODE_SMELL\",","421","              },","422","            }","423","          }","424","        >","425","          1","426","        <\/Link>","441","        <Link","442","          onlyActiveOnIndex={false}","443","          style={Object {}}","444","          to={","445","            Object {","446","              \"pathname\": \"\/project\/issues\",","447","              \"query\": Object {","448","                \"fileUuids\": \"foo-bar\",","449","                \"id\": \"my-project\",","450","                \"resolved\": \"false\",","451","                \"types\": \"SECURITY_HOTSPOT\",","452","              },","453","            }","454","          }","455","        >","456","          2","457","        <\/Link>"],"delete":["348","        0","363","        2","378","        1","393","        2"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/SourceViewerHeader.tsx":[{"add":["26","import QualifierIcon from '..\/icons-components\/QualifierIcon';","31","import { translate } from '..\/..\/helpers\/l10n';","33","import { collapsedDirFromPath, fileFromPath } from '..\/..\/helpers\/path';","35","import {","36","  getBranchLikeUrl,","37","  getBaseUrl,","38","  getCodeUrl,","39","  getComponentIssuesUrl,","40","  getPathUrlAsString","41","} from '..\/..\/helpers\/urls';","73","  renderIssueMeasures = () => {","74","    const { branchLike, issues, sourceViewerFile } = this.props;","75","    if (issues && issues.length > 0) {","76","      return (","77","        <>","78","          <div className=\"source-viewer-header-measure-separator\" \/>","79","","80","          {['BUG', 'VULNERABILITY', 'CODE_SMELL', 'SECURITY_HOTSPOT'].map((type: T.IssueType) => {","81","            const params = {","82","              ...getBranchLikeQuery(branchLike),","83","              fileUuids: sourceViewerFile.uuid,","84","              resolved: 'false',","85","              types: type","86","            };","87","","88","            const total = issues.filter(issue => issue.type === type).length;","89","            return (","90","              <div className=\"source-viewer-header-measure\" key={type}>","91","                <span className=\"source-viewer-header-measure-label\">","92","                  {translate('issue.type', type)}","93","                <\/span>","94","                <span className=\"source-viewer-header-measure-value\">","95","                  <Link to={getComponentIssuesUrl(sourceViewerFile.project, params)}>","96","                    {formatMeasure(total, 'INT')}","97","                  <\/Link>","98","                <\/span>","99","              <\/div>","100","            );","101","          })}","102","        <\/>","103","      );","104","    }","105","  };","106","","108","    const { showMeasures } = this.props;","119","    const unitTestsOrLines = q === 'UTS' ? 'tests' : 'lines';","171","            {measures[unitTestsOrLines] && (","174","                  {translate(`metric.${unitTestsOrLines}.name`)}","177","                  {formatMeasure(measures[unitTestsOrLines], 'SHORT_INT')}","204","            {this.renderIssueMeasures()}"],"delete":["23","import QualifierIcon from '..\/icons-components\/QualifierIcon';","30","import { getPathUrlAsString, getBranchLikeUrl, getBaseUrl, getCodeUrl } from '..\/..\/helpers\/urls';","31","import { collapsedDirFromPath, fileFromPath } from '..\/..\/helpers\/path';","32","import { translate } from '..\/..\/helpers\/l10n';","68","    const { issues, showMeasures } = this.props;","79","    const isUnitTest = q === 'UTS';","131","            {isUnitTest && (","134","                  {translate('metric.tests.name')}","137","                  {formatMeasure(measures.tests, 'SHORT_INT')}","138","                <\/span>","139","              <\/div>","140","            )}","141","","142","            {!isUnitTest && (","143","              <div className=\"source-viewer-header-measure\">","144","                <span className=\"source-viewer-header-measure-label\">","145","                  {translate('metric.lines.name')}","146","                <\/span>","147","                <span className=\"source-viewer-header-measure-value\">","148","                  {formatMeasure(measures.lines, 'SHORT_INT')}","175","            {issues && issues.length > 0 && (","176","              <>","177","                <div className=\"source-viewer-header-measure-separator\" \/>","178","","179","                {['BUG', 'VULNERABILITY', 'CODE_SMELL', 'SECURITY_HOTSPOT'].map(","180","                  (type: T.IssueType) => {","181","                    const total = issues.filter(issue => issue.type === type).length;","182","                    return (","183","                      <div className=\"source-viewer-header-measure\" key={type}>","184","                        <span className=\"source-viewer-header-measure-label\">","185","                          {translate('issue.type', type)}","186","                        <\/span>","187","                        <span className=\"source-viewer-header-measure-value\">","188","                          {formatMeasure(total, 'INT')}","189","                        <\/span>","190","                      <\/div>","191","                    );","192","                  }","193","                )}","194","              <\/>","195","            )}"]}]}},"46a49f0b5ef205f5632b44dc07221eed79ec803d":{"changes":{"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/DbClient.java":"MODIFY","server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/purge\/SessionTokensCleanerExecutorServiceImpl.java":"ADD","server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/user\/ws\/DeactivateActionTest.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v00\/CreateInitialSchema.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/def\/VarcharColumnDef.java":"MODIFY","server\/sonar-db-core\/src\/main\/java\/org\/sonar\/db\/version\/SqTables.java":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/authentication\/ws\/LogoutAction.java":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/user\/ws\/DeactivateAction.java":"MODIFY","server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/user\/SessionTokenMapper.xml":"ADD","server\/sonar-db-dao\/src\/schema\/schema-sq.ddl":"MODIFY","server\/sonar-db-dao\/src\/testFixtures\/java\/org\/sonar\/db\/user\/UserDbTester.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/DaoModule.java":"MODIFY","server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/authentication\/ws\/LogoutActionTest.java":"MODIFY","server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/AuthenticationModule.java":"MODIFY","server\/sonar-webserver-auth\/src\/test\/java\/org\/sonar\/server\/authentication\/JwtHttpHandlerTest.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/DbVersion84.java":"MODIFY","server\/sonar-webserver-auth\/src\/test\/java\/org\/sonar\/server\/authentication\/JwtSerializerTest.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v83\/DbVersion83.java":"MODIFY","server\/sonar-webserver-auth\/src\/test\/java\/org\/sonar\/server\/authentication\/AuthenticationModuleTest.java":"MODIFY","server\/sonar-webserver-auth\/src\/test\/java\/org\/sonar\/server\/authentication\/purge\/SessionTokensCleanerTest.java":"ADD","server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/JwtHttpHandler.java":"MODIFY","server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/JwtSerializer.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/MyBatis.java":"MODIFY","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/CreateSessionTokensTableTest.java":"ADD","server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/purge\/SessionTokensCleanerExecutorService.java":"ADD","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/user\/SessionTokensDao.java":"ADD","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/user\/SessionTokensDaoTest.java":"ADD","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/user\/SessionTokenMapper.java":"ADD","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/CreateSessionTokensTable.java":"ADD","server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/purge\/SessionTokensCleaner.java":"ADD","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/user\/SessionTokenDto.java":"ADD"},"diff":{"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/DbClient.java":[{"add":["84","import org.sonar.db.user.SessionTokensDao;","165","  private final SessionTokensDao sessionTokensDao;","243","    sessionTokensDao = getDao(map, SessionTokensDao.class);","532","  public SessionTokensDao sessionTokensDao() {","533","    return sessionTokensDao;","534","  }","535",""],"delete":[]}],"server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/purge\/SessionTokensCleanerExecutorServiceImpl.java":[{"add":[],"delete":[]}],"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/user\/ws\/DeactivateActionTest.java":[{"add":["40","import org.sonar.db.user.SessionTokenDto;","263","  public void deactivate_user_deletes_his_session_tokens() {","264","    logInAsSystemAdministrator();","265","    UserDto user = db.users().insertUser();","266","    SessionTokenDto sessionToken1 = db.users().insertSessionToken(user);","267","    SessionTokenDto sessionToken2 =db.users().insertSessionToken(user);","268","    UserDto anotherUser = db.users().insertUser();","269","    SessionTokenDto sessionToken3 =db.users().insertSessionToken(anotherUser);","270","","271","    deactivate(user.getLogin());","272","","273","    assertThat(db.getDbClient().sessionTokensDao().selectByUuid(dbSession, sessionToken1.getUuid())).isNotPresent();","274","    assertThat(db.getDbClient().sessionTokensDao().selectByUuid(dbSession, sessionToken2.getUuid())).isNotPresent();","275","    assertThat(db.getDbClient().sessionTokensDao().selectByUuid(dbSession, sessionToken3.getUuid())).isPresent();","276","  }","277","","278","  @Test"],"delete":[]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v00\/CreateInitialSchema.java":[{"add":["46","import static org.sonar.server.platform.db.migration.def.VarcharColumnDef.USER_UUID_SIZE;","244","        .addColumn(newLenientVarcharBuilder(\"submitter_uuid\").setLimit(USER_UUID_SIZE).setIsNullable(true).build())","280","        .addColumn(newLenientVarcharBuilder(\"submitter_uuid\").setLimit(USER_UUID_SIZE).setIsNullable(true).build())","561","        .addColumn(newLenientVarcharBuilder(\"user_login\").setLimit(USER_UUID_SIZE).build())","573","    VarcharColumnDef assigneeCol = newLenientVarcharBuilder(\"assignee\").setLimit(USER_UUID_SIZE).build();","595","        .addColumn(newLenientVarcharBuilder(\"reporter\").setLimit(USER_UUID_SIZE).build())","654","        .addColumn(newLenientVarcharBuilder(USER_UUID_COL_NAME).setLimit(USER_UUID_SIZE).build())","740","      .addColumn(newVarcharColumnBuilder(USER_UUID_COL_NAME).setIsNullable(false).setLimit(USER_UUID_SIZE).build())","1052","      .addColumn(newLenientVarcharBuilder(USER_UUID_COL_NAME).setLimit(USER_UUID_SIZE).setIsNullable(true).build())","1167","      .addColumn(newVarcharColumnBuilder(\"note_user_uuid\").setLimit(USER_UUID_SIZE).setIsNullable(true).build())","1256","    VarcharColumnDef userUuidCol = newVarcharColumnBuilder(USER_UUID_COL_NAME).setLimit(USER_UUID_SIZE).setIsNullable(false).build();","1287","    VarcharColumnDef userUuidCol = newVarcharColumnBuilder(USER_UUID_COL_NAME).setLimit(USER_UUID_SIZE).setIsNullable(false).build();","1305","    VarcharColumnDef uuidCol = newVarcharColumnBuilder(\"uuid\").setLimit(USER_UUID_SIZE).setIsNullable(false).build();"],"delete":["243","        .addColumn(newLenientVarcharBuilder(\"submitter_uuid\").setLimit(255).setIsNullable(true).build())","279","        .addColumn(newLenientVarcharBuilder(\"submitter_uuid\").setLimit(255).setIsNullable(true).build())","560","        .addColumn(newLenientVarcharBuilder(\"user_login\").setLimit(255).build())","572","    VarcharColumnDef assigneeCol = newLenientVarcharBuilder(\"assignee\").setLimit(255).build();","594","        .addColumn(newLenientVarcharBuilder(\"reporter\").setLimit(255).build())","653","        .addColumn(newLenientVarcharBuilder(USER_UUID_COL_NAME).setLimit(255).build())","739","      .addColumn(newVarcharColumnBuilder(USER_UUID_COL_NAME).setIsNullable(false).setLimit(255).build())","1051","      .addColumn(newLenientVarcharBuilder(USER_UUID_COL_NAME).setLimit(255).setIsNullable(true).build())","1166","      .addColumn(newVarcharColumnBuilder(\"note_user_uuid\").setLimit(255).setIsNullable(true).build())","1255","    VarcharColumnDef userUuidCol = newVarcharColumnBuilder(USER_UUID_COL_NAME).setLimit(255).setIsNullable(false).build();","1286","    VarcharColumnDef userUuidCol = newVarcharColumnBuilder(USER_UUID_COL_NAME).setLimit(255).setIsNullable(false).build();","1304","    VarcharColumnDef uuidCol = newVarcharColumnBuilder(\"uuid\").setLimit(255).setIsNullable(false).build();"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/def\/VarcharColumnDef.java":[{"add":["45","  \/**","46","   * UUID length of the USERS table is not using the standard UUID length.","47","   * The reason of this is because when the UUID column was introduced in the USERS table, existing rows were fed with the login, which has a length of 255.","48","   * @see <a https:\/\/jira.sonarsource.com\/browse\/SONAR-10597>SONAR-10597<\/a>","49","   *\/","50","  public static final int USER_UUID_SIZE = 255;","51",""],"delete":[]}],"server\/sonar-db-core\/src\/main\/java\/org\/sonar\/db\/version\/SqTables.java":[{"add":["114","    \"session_tokens\","],"delete":[]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/authentication\/ws\/LogoutAction.java":[{"add":["89","      String userLogin = token.map(value -> value.getUserDto().getLogin()).orElse(null);"],"delete":["89","      String userLogin = token.isPresent() ? token.get().getUserDto().getLogin() : null;"]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/user\/ws\/DeactivateAction.java":[{"add":["110","      dbClient.sessionTokensDao().deleteByUser(dbSession, user);","111","      dbClient.userDao().deactivateUser(dbSession, user);"],"delete":["110","      deactivateUser(dbSession, user);","112","","113","      LOGGER.debug(\"Deactivate user: {}; by admin: {}\", login, userSession.isSystemAdministrator());","119","  private void deactivateUser(DbSession dbSession, UserDto user) {","120","    dbClient.userDao().deactivateUser(dbSession, user);","121","  }","122",""]}],"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/user\/SessionTokenMapper.xml":[{"add":[],"delete":[]}],"server\/sonar-db-dao\/src\/schema\/schema-sq.ddl":[{"add":["873","CREATE TABLE \"SESSION_TOKENS\"(","874","    \"UUID\" VARCHAR(40) NOT NULL,","875","    \"USER_UUID\" VARCHAR(255) NOT NULL,","876","    \"EXPIRATION_DATE\" BIGINT NOT NULL,","877","    \"CREATED_AT\" BIGINT NOT NULL,","878","    \"UPDATED_AT\" BIGINT NOT NULL","879",");","880","ALTER TABLE \"SESSION_TOKENS\" ADD CONSTRAINT \"PK_SESSION_TOKENS\" PRIMARY KEY(\"UUID\");","881","CREATE INDEX \"SESSION_TOKENS_USER_UUID\" ON \"SESSION_TOKENS\"(\"USER_UUID\");","882",""],"delete":[]}],"server\/sonar-db-dao\/src\/testFixtures\/java\/org\/sonar\/db\/user\/UserDbTester.java":[{"add":["43","import static org.apache.commons.lang.math.RandomUtils.nextLong;","381","  \/\/ USER TOKEN","382","","392","  \/\/ SESSION TOKENS","393","","394","  @SafeVarargs","395","  public final SessionTokenDto insertSessionToken(UserDto user, Consumer<SessionTokenDto>... populators) {","396","    SessionTokenDto dto = new SessionTokenDto()","397","      .setUserUuid(user.getUuid())","398","      .setExpirationDate(nextLong());","399","    stream(populators).forEach(p -> p.accept(dto));","400","    db.getDbClient().sessionTokensDao().insert(db.getSession(), dto);","401","    db.commit();","402","    return dto;","403","  }","404",""],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/DaoModule.java":[{"add":["86","import org.sonar.db.user.SessionTokensDao;","159","    SessionTokensDao.class,"],"delete":[]}],"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/authentication\/ws\/LogoutActionTest.java":[{"add":["42","import static org.mockito.Mockito.verifyNoInteractions;","93","    verifyNoInteractions(jwtHttpHandler, chain);","98","  public void logout_logged_user() {","104","    verifyNoInteractions(chain);","109","  public void logout_unlogged_user() {","115","    verifyNoInteractions(chain);","120","  public void generate_auth_event_on_failure() {","129","    verifyNoInteractions(chain);"],"delete":["42","import static org.mockito.Mockito.verifyZeroInteractions;","93","    verifyZeroInteractions(jwtHttpHandler, chain);","98","  public void logout_logged_user() throws Exception {","104","    verifyZeroInteractions(chain);","109","  public void logout_unlogged_user() throws Exception {","115","    verifyZeroInteractions(chain);","120","  public void generate_auth_event_on_failure() throws Exception {","129","    verifyZeroInteractions(chain);"]}],"server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/AuthenticationModule.java":[{"add":["23","import org.sonar.server.authentication.purge.SessionTokensCleaner;","24","import org.sonar.server.authentication.purge.SessionTokensCleanerExecutorServiceImpl;","33","      CredentialsAuthentication.class,","34","      CredentialsExternalAuthentication.class,","35","      CredentialsLocalAuthentication.class,","37","      IdentityProviderRepository.class,","38","      InitFilter.class,","39","      JwtCsrfVerifier.class,","40","      JwtHttpHandler.class,","41","      JwtSerializer.class,","42","      OAuth2AuthenticationParametersImpl.class,","43","      OAuth2CallbackFilter.class,","44","      OAuth2ContextFactory.class,","45","      OAuthCsrfVerifier.class,","47","      SessionTokensCleaner.class,","48","      SessionTokensCleanerExecutorServiceImpl.class,","49","      UserLastConnectionDatesUpdaterImpl.class,","50","      UserRegistrarImpl.class,","51","      UserSessionInitializer.class);"],"delete":["29","      InitFilter.class,","30","      OAuth2CallbackFilter.class,","31","      IdentityProviderRepository.class,","33","      OAuth2ContextFactory.class,","34","      UserRegistrarImpl.class,","35","      OAuthCsrfVerifier.class,","36","      UserSessionInitializer.class,","37","      JwtSerializer.class,","38","      JwtHttpHandler.class,","39","      JwtCsrfVerifier.class,","40","      OAuth2AuthenticationParametersImpl.class,","41","      CredentialsAuthentication.class,","42","      CredentialsLocalAuthentication.class,","43","      CredentialsExternalAuthentication.class,","47","      UserLastConnectionDatesUpdaterImpl.class);"]}],"server\/sonar-webserver-auth\/src\/test\/java\/org\/sonar\/server\/authentication\/JwtHttpHandlerTest.java":[{"add":["24","import java.util.Map;","41","import org.sonar.db.user.SessionTokenDto;","45","import static org.assertj.core.api.Assertions.entry;","48","import static org.mockito.ArgumentMatchers.anyLong;","55","import static org.mockito.Mockito.verifyNoInteractions;","69","  private static final long IN_FIVE_MINUTES = NOW + 5 * 60 * 1000L;","70","","109","    verifySessionTokenInDb(jwtArgumentCaptor.getValue());","150","    verifyToken(jwtArgumentCaptor.getAllValues().get(0), user, firstSessionTimeoutInMinutes * 60, NOW);","188","    SessionTokenDto sessionToken = db.users().insertSessionToken(user, st -> st.setExpirationDate(IN_FIVE_MINUTES));","189","    Claims claims = createToken(sessionToken, NOW);","202","    SessionTokenDto sessionToken = db.users().insertSessionToken(user, st -> st.setExpirationDate(IN_FIVE_MINUTES));","203","    Claims claims = createToken(sessionToken, TEN_DAYS_AGO);","209","    verify(jwtSerializer).refresh(any(Claims.class), eq(NOW + 3 * 24 * 60 * 60 * 1000L));","210","    assertThat(dbClient.sessionTokensDao().selectByUuid(dbSession, sessionToken.getUuid()).get().getExpirationDate())","211","      .isNotEqualTo(IN_FIVE_MINUTES)","212","      .isEqualTo(NOW + 3 * 24 * 60 * 60 * 1000L);","220","    SessionTokenDto sessionToken = db.users().insertSessionToken(user, st -> st.setExpirationDate(IN_FIVE_MINUTES));","221","    Claims claims = createToken(sessionToken, TEN_DAYS_AGO);","235","    SessionTokenDto sessionToken = db.users().insertSessionToken(user, st -> st.setExpirationDate(IN_FIVE_MINUTES));","236","    Claims claims = createToken(sessionToken, NOW - (4L * 30 * 24 * 60 * 60 * 1000));","247","    SessionTokenDto sessionToken = db.users().insertSessionToken(user, st -> st.setExpirationDate(IN_FIVE_MINUTES));","248","    Claims claims = createToken(sessionToken, NOW);","267","    verifyNoInteractions(httpSession, jwtSerializer);","277","    verifyNoInteractions(httpSession, jwtSerializer);","285","    SessionTokenDto sessionToken = db.users().insertSessionToken(user, st -> st.setExpirationDate(IN_FIVE_MINUTES));","286","    Claims claims = createToken(sessionToken, NOW);","296","  public void validate_token_does_nothing_when_no_session_token_in_db() {","297","    UserDto user = db.users().insertUser();","298","    addJwtCookie();","299","    \/\/ No SessionToken in DB","300","    Claims claims = createToken(\"ABCD\", user.getUuid(), NOW, IN_FIVE_MINUTES);","301","    claims.put(\"lastRefreshTime\", SIX_MINUTES_AGO);","302","    when(jwtSerializer.decode(JWT_TOKEN)).thenReturn(Optional.of(claims));","303","","304","    underTest.validateToken(request, response);","305","","306","    assertThat(underTest.validateToken(request, response).isPresent()).isFalse();","307","  }","308","","309","  @Test","310","  public void validate_token_does_nothing_when_expiration_date_from_session_token_is_expired() {","311","    UserDto user = db.users().insertUser();","312","    addJwtCookie();","313","    \/\/ In SessionToken, the expiration date is expired...","314","    SessionTokenDto sessionToken = db.users().insertSessionToken(user, st -> st.setExpirationDate(FOUR_MINUTES_AGO));","315","    \/\/ ...whereas in the cookie, the expiration date is not expired","316","    Claims claims = createToken(sessionToken.getUuid(), user.getUuid(), NOW, IN_FIVE_MINUTES);","317","    claims.put(\"lastRefreshTime\", SIX_MINUTES_AGO);","318","    when(jwtSerializer.decode(JWT_TOKEN)).thenReturn(Optional.of(claims));","319","","320","    underTest.validateToken(request, response);","321","","322","    assertThat(underTest.validateToken(request, response).isPresent()).isFalse();","323","  }","324","","325","  @Test","330","    SessionTokenDto sessionToken = db.users().insertSessionToken(user, st -> st.setExpirationDate(IN_FIVE_MINUTES));","331","    Claims claims = createToken(sessionToken, TEN_DAYS_AGO);","337","    verify(jwtSerializer).refresh(any(Claims.class), anyLong());","343","    addJwtCookie();","344","    UserDto user = db.users().insertUser();","345","    SessionTokenDto sessionToken = db.users().insertSessionToken(user, st -> st.setExpirationDate(IN_FIVE_MINUTES));","346","    Claims claims = createToken(sessionToken, TEN_DAYS_AGO);","347","    claims.put(\"lastRefreshTime\", FOUR_MINUTES_AGO);","348","    when(jwtSerializer.decode(JWT_TOKEN)).thenReturn(Optional.of(claims));","349","","354","    assertThat(dbClient.sessionTokensDao().selectByUuid(dbSession, sessionToken.getUuid())).isNotPresent();","357","  @Test","358","  public void does_not_remove_token_from_db_when_no_jwt_token_in_cookie() {","359","    addJwtCookie();","360","    UserDto user = db.users().insertUser();","361","    SessionTokenDto sessionToken = db.users().insertSessionToken(user, st -> st.setExpirationDate(IN_FIVE_MINUTES));","362","    when(jwtSerializer.decode(JWT_TOKEN)).thenReturn(Optional.empty());","363","","364","    underTest.removeToken(request, response);","365","","366","    verifyCookie(findCookie(\"JWT-SESSION\").get(), null, 0);","367","    verify(jwtCsrfVerifier).removeState(request, response);","368","    assertThat(dbClient.sessionTokensDao().selectByUuid(dbSession, sessionToken.getUuid())).isPresent();","369","  }","370","","371","  @Test","372","  public void does_not_remove_token_from_db_when_no_cookie() {","373","    UserDto user = db.users().insertUser();","374","    SessionTokenDto sessionToken = db.users().insertSessionToken(user, st -> st.setExpirationDate(IN_FIVE_MINUTES));","375","","376","    underTest.removeToken(request, response);","377","","378","    verifyCookie(findCookie(\"JWT-SESSION\").get(), null, 0);","379","    verify(jwtCsrfVerifier).removeState(request, response);","380","    assertThat(dbClient.sessionTokensDao().selectByUuid(dbSession, sessionToken.getUuid())).isPresent();","381","  }","382","","383","  private void verifyToken(JwtSerializer.JwtSession token, UserDto user, long expectedExpirationDuration, long expectedRefreshTime) {","384","    assertThat(token.getExpirationTime()).isEqualTo(NOW + expectedExpirationDuration * 1000L);","404","  private void verifySessionTokenInDb(JwtSerializer.JwtSession jwtSession) {","405","    Map<String, Object> map = db.selectFirst(dbSession, \"select st.uuid as \\\"uuid\\\", \" +","406","      \"st.user_uuid as \\\"userUuid\\\", \" +","407","      \"st.expiration_date as \\\"expirationDate\\\" \" +","408","      \"from session_tokens st \");","409","    assertThat(map)","410","      .contains(","411","        entry(\"uuid\", jwtSession.getSessionTokenUuid()),","412","        entry(\"expirationDate\", jwtSession.getExpirationTime()));","413","  }","414","","429","  private Claims createToken(SessionTokenDto sessionToken, long createdAt) {","430","    return createToken(sessionToken.getUuid(), sessionToken.getUserUuid(), createdAt, sessionToken.getExpirationDate());","433","  private Claims createToken(String uuid, String userUuid, long createdAt, long expiredAt) {","435","    claims.setId(uuid);"],"delete":["51","import static org.mockito.Mockito.verifyZeroInteractions;","67","","144","    verifyToken(jwtArgumentCaptor.getAllValues().get(0), user,firstSessionTimeoutInMinutes * 60, NOW);","182","    Claims claims = createToken(user.getUuid(), NOW);","195","    Claims claims = createToken(user.getUuid(), TEN_DAYS_AGO);","201","    verify(jwtSerializer).refresh(any(Claims.class), eq(3 * 24 * 60 * 60));","209","    Claims claims = createToken(user.getUuid(), TEN_DAYS_AGO);","223","    Claims claims = createToken(user.getUuid(), NOW - (4L * 30 * 24 * 60 * 60 * 1000));","224","    claims.setExpiration(new Date(NOW + 5 * 60 * 1000));","235","","236","    Claims claims = createToken(user.getLogin(), NOW);","255","    verifyZeroInteractions(httpSession, jwtSerializer);","265","    verifyZeroInteractions(httpSession, jwtSerializer);","273","    Claims claims = createToken(user.getUuid(), NOW);","286","","288","    Claims claims = createToken(user.getUuid(), TEN_DAYS_AGO);","294","    verify(jwtSerializer).refresh(any(Claims.class), anyInt());","306","  private void verifyToken(JwtSerializer.JwtSession token, UserDto user, int expectedExpirationTime, long expectedRefreshTime) {","307","    assertThat(token.getExpirationTimeInSeconds()).isEqualTo(expectedExpirationTime);","341","  private Claims createToken(String userUuid, long createdAt) {","342","    \/\/ Expired in 5 minutes by default","343","    return createToken(userUuid, createdAt, NOW + 5 * 60 * 1000);","346","  private Claims createToken(String userUuid, long createdAt, long expiredAt) {","348","    claims.setId(\"ID\");"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/DbVersion84.java":[{"add":["782","      .add(3800, \"Remove favourites for components with qualifiers 'DIR', 'FIL', 'UTS'\", RemoveFilesFavouritesFromProperties.class)","783","      .add(3801, \"Create 'SESSION_TOKENS' table\", CreateSessionTokensTable.class)"],"delete":["782","      .add(3800, \"Remove favourites for components with qualifiers 'DIR', 'FIL', 'UTS'\", RemoveFilesFavouritesFromProperties.class);","783",""]}],"server\/sonar-webserver-auth\/src\/test\/java\/org\/sonar\/server\/authentication\/JwtSerializerTest.java":[{"add":["39","import static io.jsonwebtoken.SignatureAlgorithm.HS256;","40","import static org.apache.commons.lang.time.DateUtils.addMinutes;","41","import static org.apache.commons.lang.time.DateUtils.addYears;","49","  private static final String SESSION_TOKEN_UUID = \"ABCD\";","56","  private JwtSerializer underTest = new JwtSerializer(settings.asConfig(), system2);","63","    String token = underTest.encode(new JwtSession(USER_LOGIN, SESSION_TOKEN_UUID, addMinutes(new Date(), 20).getTime()));","74","    String token = underTest.encode(new JwtSession(USER_LOGIN, SESSION_TOKEN_UUID, addMinutes(new Date(), 20).getTime()));","78","    assertThat(claims.getExpiration().getTime())","79","      .isGreaterThanOrEqualTo(addMinutes(new Date(), 19).getTime());","87","    long oneYearLater = addYears(new Date(), 1).getTime();","88","    String token = underTest.encode(new JwtSession(USER_LOGIN, SESSION_TOKEN_UUID, oneYearLater));","93","    assertThat(claims.getExpiration().getTime()).isGreaterThanOrEqualTo(oneYearLater - 1000L);","101","    String token = underTest.encode(new JwtSession(USER_LOGIN, SESSION_TOKEN_UUID, addMinutes(new Date(), 20).getTime(), ImmutableMap.of(\"custom\", \"property\")));","113","    String token = underTest.encode(new JwtSession(USER_LOGIN, SESSION_TOKEN_UUID, addMinutes(new Date(), 20).getTime()));","116","    assertThat(claims.getId()).isEqualTo(SESSION_TOKEN_UUID);","121","    assertThat(claims.getExpiration()).isAfterOrEqualTo(addMinutes(new Date(), 19));","132","      .setExpiration(addMinutes(new Date(), -20))","133","      .signWith(decodeSecretKey(A_SECRET_KEY), HS256)","148","      .setExpiration(addMinutes(new Date(), 20))","149","      .signWith(decodeSecretKey(\"LyWgHktP0FuHB2K+kMs3KWMCJyFHVZDdDSqpIxAMVaQ=\"), HS256)","164","      .setExpiration(addMinutes(new Date(), 20))","165","      .signWith(decodeSecretKey(A_SECRET_KEY), HS256)","182","      .setExpiration(addMinutes(new Date(), 20))","183","      .signWith(HS256, decodeSecretKey(A_SECRET_KEY))","201","      .signWith(decodeSecretKey(A_SECRET_KEY), HS256)","217","      .setExpiration(addMinutes(new Date(), 20))","218","      .signWith(decodeSecretKey(A_SECRET_KEY), HS256)","233","    assertThat(underTest.getSecretKey().getAlgorithm()).isEqualTo(HS256.getJcaName());","253","    Date expiredAt = addMinutes(new Date(), 10);","263","    String encodedToken = underTest.refresh(token, addMinutes(new Date(), 20).getTime());","273","      .isAfterOrEqualTo(addMinutes(new Date(), 19));","280","    String token = underTest.encode(new JwtSession(USER_LOGIN, SESSION_TOKEN_UUID, addMinutes(new Date(), 20).getTime()));","283","    String newToken = underTest.refresh(claims.get(), addMinutes(new Date(), 45).getTime());","293","    underTest.encode(new JwtSession(USER_LOGIN, SESSION_TOKEN_UUID, addMinutes(new Date(), 10).getTime()));","309","    underTest.refresh(new DefaultClaims(), addMinutes(new Date(), 10).getTime());","314","    return new SecretKeySpec(decodedKey, 0, decodedKey.length, HS256.getJcaName());"],"delete":["24","import io.jsonwebtoken.SignatureAlgorithm;","37","import org.sonar.core.util.UuidFactory;","38","import org.sonar.core.util.UuidFactoryImpl;","55","  private UuidFactory uuidFactory = UuidFactoryImpl.INSTANCE;","56","  private JwtSerializer underTest = new JwtSerializer(settings.asConfig(), system2, uuidFactory);","63","    String token = underTest.encode(new JwtSession(USER_LOGIN, 10));","73","    Date now = new Date();","75","    long expirationTimeInSeconds = 10L;","76","    String token = underTest.encode(new JwtSession(USER_LOGIN, expirationTimeInSeconds));","80","    assertThat(claims.getExpiration().getTime()).isGreaterThanOrEqualTo(now.getTime() + expirationTimeInSeconds * 1000L - 1000L);","87","    Date now = new Date();","89","    long oneYearInSeconds = 12 * 30 * 24 * 60 * 60L;","90","    String token = underTest.encode(new JwtSession(USER_LOGIN, oneYearInSeconds));","95","    assertThat(claims.getExpiration().getTime()).isGreaterThanOrEqualTo(now.getTime() + oneYearInSeconds * 1000L - 1000L);","103","    String token = underTest.encode(new JwtSession(USER_LOGIN, 10, ImmutableMap.of(\"custom\", \"property\")));","114","    Date now = new Date();","116","    String token = underTest.encode(new JwtSession(USER_LOGIN, 20 * 60));","119","    assertThat(claims.getId()).isNotEmpty();","124","    assertThat(claims.getExpiration()).isAfterOrEqualsTo(new Date(now.getTime() + 19 * 60 * 1000));","135","      .setExpiration(new Date(system2.now()))","136","      .signWith(SignatureAlgorithm.HS256, decodeSecretKey(A_SECRET_KEY))","151","      .setExpiration(new Date(system2.now() + 20 * 60 * 1000))","152","      .signWith(SignatureAlgorithm.HS256, decodeSecretKey(\"LyWgHktP0FuHB2K+kMs3KWMCJyFHVZDdDSqpIxAMVaQ=\"))","167","      .setExpiration(new Date(system2.now() + 20 * 60 * 1000))","168","      .signWith(SignatureAlgorithm.HS256, decodeSecretKey(A_SECRET_KEY))","185","      .setExpiration(new Date(system2.now() + 20 * 60 * 1000))","186","      .signWith(SignatureAlgorithm.HS256, decodeSecretKey(A_SECRET_KEY))","204","      .signWith(SignatureAlgorithm.HS256, decodeSecretKey(A_SECRET_KEY))","220","      .setExpiration(new Date(system2.now() + 20 * 60 * 1000))","221","      .signWith(SignatureAlgorithm.HS256, decodeSecretKey(A_SECRET_KEY))","236","    assertThat(underTest.getSecretKey().getAlgorithm()).isEqualTo(SignatureAlgorithm.HS256.getJcaName());","256","    Date expiredAt = new Date(now.getTime() + 10 * 60 * 1000);","266","    String encodedToken = underTest.refresh(token, 20 * 60);","276","      .isAfterOrEqualsTo(new Date(now.getTime() + 19 * 1000));","283","    String token = underTest.encode(new JwtSession(USER_LOGIN, 30));","286","    String newToken = underTest.refresh(claims.get(), 45);","296","    underTest.encode(new JwtSession(USER_LOGIN, 10));","312","    underTest.refresh(new DefaultClaims(), 10);","317","    return new SecretKeySpec(decodedKey, 0, decodedKey.length, SignatureAlgorithm.HS256.getJcaName());"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v83\/DbVersion83.java":[{"add":[],"delete":["49",""]}],"server\/sonar-webserver-auth\/src\/test\/java\/org\/sonar\/server\/authentication\/AuthenticationModuleTest.java":[{"add":["33","    assertThat(container.size()).isGreaterThan(COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER);"],"delete":["33","    assertThat(container.size()).isEqualTo(COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER + 20);"]}],"server\/sonar-webserver-auth\/src\/test\/java\/org\/sonar\/server\/authentication\/purge\/SessionTokensCleanerTest.java":[{"add":[],"delete":[]}],"server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/JwtHttpHandler.java":[{"add":["36","import org.sonar.db.user.SessionTokenDto;","82","    long expirationTime = system2.now() + sessionTimeoutInSeconds * 1000L;","83","    SessionTokenDto sessionToken = createSessionToken(user, expirationTime);","87","      sessionToken.getUuid(),","88","      expirationTime,","97","  private SessionTokenDto createSessionToken(UserDto user, long expirationTime) {","98","    try (DbSession dbSession = dbClient.openSession(false)) {","99","      SessionTokenDto sessionToken = new SessionTokenDto()","100","        .setUserUuid(user.getUuid())","101","        .setExpirationDate(expirationTime);","102","      dbClient.sessionTokensDao().insert(dbSession, sessionToken);","103","      dbSession.commit();","104","      return sessionToken;","105","    }","106","  }","107","","114","    return token.map(Token::getUserDto);","122","    try (DbSession dbSession = dbClient.openSession(false)) {","123","      return validateToken(dbSession, encodedToken.get(), request, response);","124","    }","140","  private Optional<Token> validateToken(DbSession dbSession, String tokenEncoded, HttpServletRequest request, HttpServletResponse response) {","146","","147","    Optional<SessionTokenDto> sessionToken = dbClient.sessionTokensDao().selectByUuid(dbSession, token.getId());","148","    if (!sessionToken.isPresent()) {","149","      return Optional.empty();","150","    }","151","    \/\/ Check on expiration is already done when decoding the JWT token, but here is done a double check with the expiration date from DB.","152","    Date now = new Date(system2.now());","153","    if (now.getTime() > sessionToken.get().getExpirationDate()) {","154","      return Optional.empty();","155","    }","162","      refreshToken(dbSession, sessionToken.get(), token, request, response);","165","    Optional<UserDto> user = selectUserFromUuid(dbSession, token.getSubject());","175","  private void refreshToken(DbSession dbSession, SessionTokenDto tokenFromDb, Claims tokenFromCookie, HttpServletRequest request, HttpServletResponse response) {","176","    long expirationTime = system2.now() + sessionTimeoutInSeconds * 1000L;","177","    String refreshToken = jwtSerializer.refresh(tokenFromCookie, expirationTime);","179","    jwtCsrfVerifier.refreshState(request, response, (String) tokenFromCookie.get(CSRF_JWT_PARAM), sessionTimeoutInSeconds);","180","","181","    dbClient.sessionTokensDao().update(dbSession, tokenFromDb.setExpirationDate(expirationTime));","182","    dbSession.commit();","186","    removeSessionToken(request);","191","  private void removeSessionToken(HttpServletRequest request) {","192","    Optional<Cookie> jwtCookie = findCookie(JWT_COOKIE, request);","193","    if (!jwtCookie.isPresent()) {","194","      return;","195","    }","196","    Optional<Claims> claims = jwtSerializer.decode(jwtCookie.get().getValue());","197","    if (!claims.isPresent()) {","198","      return;","199","    }","200","    try (DbSession dbSession = dbClient.openSession(false)) {","201","      dbClient.sessionTokensDao().deleteByUuid(dbSession, claims.get().getId());","202","      dbSession.commit();","203","    }","204","  }","205","","210","  private Optional<UserDto> selectUserFromUuid(DbSession dbSession, String userUuid) {","211","    UserDto user = dbClient.userDao().selectByUuid(dbSession, userUuid);","212","    return Optional.ofNullable(user != null && user.isActive() ? user : null);"],"delete":["84","      sessionTimeoutInSeconds,","99","    if (token.isPresent()) {","100","      return Optional.of(token.get().getUserDto());","101","    }","102","    return Optional.empty();","110","    return validateToken(encodedToken.get(), request, response);","126","  private Optional<Token> validateToken(String tokenEncoded, HttpServletRequest request, HttpServletResponse response) {","131","","132","    Date now = new Date(system2.now());","140","      refreshToken(token, request, response);","143","    Optional<UserDto> user = selectUserFromUuid(token.getSubject());","153","  private void refreshToken(Claims token, HttpServletRequest request, HttpServletResponse response) {","154","    String refreshToken = jwtSerializer.refresh(token, sessionTimeoutInSeconds);","156","    jwtCsrfVerifier.refreshState(request, response, (String) token.get(CSRF_JWT_PARAM), sessionTimeoutInSeconds);","168","  private Optional<UserDto> selectUserFromUuid(String userUuid) {","169","    try (DbSession dbSession = dbClient.openSession(false)) {","170","      UserDto user = dbClient.userDao().selectByUuid(dbSession, userUuid);","171","      return Optional.ofNullable(user != null && user.isActive() ? user : null);","172","    }"]}],"server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/JwtSerializer.java":[{"add":["27","import io.jsonwebtoken.security.SignatureException;","61","  public JwtSerializer(Configuration config, System2 system2) {","74","    this.secretKey = encodedKey","75","      .map(JwtSerializer::decodeSecretKeyProperty)","76","      .orElseGet(JwtSerializer::generateSecretKey);","82","      .setId(jwtSession.getSessionTokenUuid())","84","      .setIssuedAt(new Date(system2.now()))","85","      .setExpiration(new Date(jwtSession.getExpirationTime()))","86","      .signWith(secretKey, SIGNATURE_ALGORITHM);","97","      claims = (Claims) Jwts.parserBuilder()","99","        .build()","100","        .parse(token)","118","  String refresh(Claims token, long expirationTime) {","124","    jwtBuilder.setExpiration(new Date(expirationTime))","125","      .signWith(secretKey, SIGNATURE_ALGORITHM);","151","    private final String sessionTokenUuid;","152","    private final long expirationTime;","155","    JwtSession(String userLogin, String sessionTokenUuid, long expirationTime) {","156","      this(userLogin, sessionTokenUuid, expirationTime, Collections.emptyMap());","159","    JwtSession(String userLogin, String sessionTokenUuid, long expirationTime, Map<String, Object> properties) {","161","      this.sessionTokenUuid = requireNonNull(sessionTokenUuid, \"Session token UUID cannot be null\");","162","      this.expirationTime = expirationTime;","170","    String getSessionTokenUuid() {","171","      return sessionTokenUuid;","172","    }","173","","174","    long getExpirationTime() {","175","      return expirationTime;"],"delete":["27","import io.jsonwebtoken.SignatureException;","40","import org.sonar.core.util.UuidFactory;","59","  private final UuidFactory uuidFactory;","63","  public JwtSerializer(Configuration config, System2 system2, UuidFactory uuidFactory) {","66","    this.uuidFactory = uuidFactory;","77","    if (encodedKey.isPresent()) {","78","      this.secretKey = decodeSecretKeyProperty(encodedKey.get());","79","    } else {","80","      this.secretKey = generateSecretKey();","81","    }","86","    long now = system2.now();","88","      .setId(uuidFactory.create())","90","      .setIssuedAt(new Date(now))","91","      .setExpiration(new Date(now + jwtSession.getExpirationTimeInSeconds() * 1000))","92","      .signWith(SIGNATURE_ALGORITHM, secretKey);","103","      claims = Jwts.parser()","105","        .parseClaimsJws(token)","123","  String refresh(Claims token, int expirationTimeInSeconds) {","125","    long now = system2.now();","130","    jwtBuilder.setExpiration(new Date(now + expirationTimeInSeconds * 1_000L))","131","      .signWith(SIGNATURE_ALGORITHM, secretKey);","157","    private final long expirationTimeInSeconds;","160","    JwtSession(String userLogin, long expirationTimeInSeconds) {","161","      this(userLogin, expirationTimeInSeconds, Collections.emptyMap());","164","    JwtSession(String userLogin, long expirationTimeInSeconds, Map<String, Object> properties) {","166","      this.expirationTimeInSeconds = expirationTimeInSeconds;","174","    long getExpirationTimeInSeconds() {","175","      return expirationTimeInSeconds;"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/MyBatis.java":[{"add":["142","import org.sonar.db.user.SessionTokenMapper;","289","      SessionTokenMapper.class,"],"delete":[]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/CreateSessionTokensTableTest.java":[{"add":[],"delete":[]}],"server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/purge\/SessionTokensCleanerExecutorService.java":[{"add":[],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/user\/SessionTokensDao.java":[{"add":[],"delete":[]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/user\/SessionTokensDaoTest.java":[{"add":[],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/user\/SessionTokenMapper.java":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/CreateSessionTokensTable.java":[{"add":[],"delete":[]}],"server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/purge\/SessionTokensCleaner.java":[{"add":[],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/user\/SessionTokenDto.java":[{"add":[],"delete":[]}]}},"47b6860dcd8520b6a2d7cdf66f26a6c41b26bbfb":{"changes":{"server\/sonar-main\/src\/main\/java\/org\/sonar\/application\/es\/EsSettings.java":"MODIFY","server\/sonar-main\/src\/test\/java\/org\/sonar\/application\/es\/EsSettingsTest.java":"MODIFY"},"diff":{"server\/sonar-main\/src\/main\/java\/org\/sonar\/application\/es\/EsSettings.java":[{"add":["46","  private static final String SECCOMP_PROPERTY = \"bootstrap.system_call_filter\";","78","    configureOthers(builder);","149","  private void configureOthers(Map<String, String> builder) {","151","    if (props.value(\"sonar.search.javaAdditionalOpts\", \"\").contains(\"-D\" + SECCOMP_PROPERTY + \"=false\")) {","152","      builder.put(SECCOMP_PROPERTY, \"false\");","153","    }"],"delete":["77","    configureAction(builder);","148","  private static void configureAction(Map<String, String> builder) {"]}],"server\/sonar-main\/src\/test\/java\/org\/sonar\/application\/es\/EsSettingsTest.java":[{"add":["313","  @Test","314","  public void enable_seccomp_filter_by_default() throws Exception {","315","    Props props = minProps(CLUSTER_DISABLED);","316","    Map<String, String> settings = new EsSettings(props, new EsInstallation(props), System2.INSTANCE).build();","317","","318","    assertThat(settings.get(\"bootstrap.system_call_filter\")).isNull();","319","  }","320","","321","  @Test","322","  public void disable_seccomp_filter_if_configured_in_search_additional_props() throws Exception {","323","    Props props = minProps(CLUSTER_DISABLED);","324","    props.set(\"sonar.search.javaAdditionalOpts\", \"-Xmx1G -Dbootstrap.system_call_filter=false -Dfoo=bar\");","325","    Map<String, String> settings = new EsSettings(props, new EsInstallation(props), System2.INSTANCE).build();","326","","327","    assertThat(settings.get(\"bootstrap.system_call_filter\")).isEqualTo(\"false\");","328","  }","329",""],"delete":[]}]}},"2d8b4511099529d8f36f89d64b357c51a27c173f":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/language\/ws\/ListAction.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/language\/ws\/LanguageWsTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/language\/ws\/ListAction.java":[{"add":["82","    Pattern pattern = Pattern.compile(query == null ? MATCH_ALL : MATCH_ALL + Pattern.quote(query) + MATCH_ALL, Pattern.CASE_INSENSITIVE);"],"delete":["82","    Pattern pattern = Pattern.compile(query == null ? MATCH_ALL : MATCH_ALL + query + MATCH_ALL, Pattern.CASE_INSENSITIVE);"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/language\/ws\/LanguageWsTest.java":[{"add":["41","  private static final String EMPTY_JSON_RESPONSE = \"{\\\"languages\\\": []}\";","46","  private WsTester tester;","80","  public void list_all_languages() throws Exception {","92","  }","94","  @Test","95","  public void filter_languages_by_key_or_name() throws Exception {","104","  \/**","105","   * Potential vulnerability : the query provided by user must","106","   * not be executed as a regexp.","107","   *\/","108","  @Test","109","  public void filter_escapes_the_user_query() throws Exception {","110","    \/\/ invalid regexp","111","    tester.newGetRequest(CONTROLLER_LANGUAGES, ACTION_LIST)","112","      .setParam(\"q\", \"[\")","113","      .execute().assertJson(EMPTY_JSON_RESPONSE);","114","","115","    \/\/ do not consider param as a regexp","116","    tester.newGetRequest(CONTROLLER_LANGUAGES, ACTION_LIST)","117","      .setParam(\"q\", \".*\")","118","      .execute().assertJson(EMPTY_JSON_RESPONSE);","119","  }","120","","122","    TestLanguage(String key, String language) {"],"delete":["45","  WsTester tester;","79","  public void should_list_languages() throws Exception {","101","    public TestLanguage(String key, String language) {"]}]}},"46a60dac2e0603911843f85298745dbfa7e079ac":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/components\/MeasureContent.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/hoc\/withKeyboardNavigation.tsx":"MODIFY","\/dev\/null":"DELETE","server\/sonar-web\/src\/main\/js\/apps\/component-measures\/style.css":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/ui\/PageActions.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/ui\/__tests__\/__snapshots__\/PageActions-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/hoc\/__tests__\/withKeyboardNavigation-test.tsx":"MODIFY","server\/sonar-docs\/src\/pages\/user-guide\/keyboard-shortcuts.md":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/component-measures\/components\/MeasureOverview.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/ui\/__tests__\/PageActions-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/helpers\/testUtils.ts":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/components\/MeasureContent.tsx":[{"add":["27","import SourceViewer from '..\/..\/..\/components\/SourceViewer\/SourceViewer';","305","    const { baseComponent, measure, metric, paging, secondaryMeasure } = this.state;","336","                        <>","337","                          <MeasureViewSelect","338","                            className=\"measure-view-select big-spacer-right\"","339","                            handleViewChange={this.updateView}","340","                            metric={metric}","341","                            view={view}","342","                          \/>","343","","344","                          <PageActions","345","                            current={","346","                              selectedIdx !== undefined && view !== 'treemap'","347","                                ? selectedIdx + 1","348","                                : undefined","349","                            }","350","                            showShortcuts={['list', 'tree'].includes(view)}","351","                            total={paging && paging.total}","352","                          \/>","353","                        <\/>","371","          {isFile ? (","372","            <div className=\"measure-details-viewer\">","373","              <SourceViewer branchLike={branchLike} component={baseComponent.key} \/>","374","            <\/div>","375","          ) : (","376","            this.renderMeasure()","377","          )}"],"delete":["27","import CodeView from '..\/drilldown\/CodeView';","265","  renderCode() {","266","    return (","267","      <div className=\"measure-details-viewer\">","268","        <CodeView","269","          branchLike={this.props.branchLike}","270","          component={this.state.baseComponent!}","271","          components={this.state.components}","272","          leakPeriod={this.props.leakPeriod}","273","          selectedIdx={this.getSelectedIndex()}","274","          updateSelected={this.updateSelected}","275","        \/>","276","      <\/div>","277","    );","278","  }","279","","320","    const { baseComponent, measure, metric, secondaryMeasure } = this.state;","351","                        <MeasureViewSelect","352","                          className=\"measure-view-select big-spacer-right\"","353","                          handleViewChange={this.updateView}","354","                          metric={metric}","355","                          view={view}","356","                        \/>","358","                    <PageActions","359","                      current={","360","                        selectedIdx !== undefined && view !== 'treemap'","361","                          ? selectedIdx + 1","362","                          : undefined","363","                      }","364","                      isFile={isFile}","365","                      paging={this.state.paging}","366","                      showShortcuts={['list', 'tree'].includes(view)}","367","                      totalLoadedComponents={this.state.components.length}","368","                    \/>","385","          {isFile ? this.renderCode() : this.renderMeasure()}"]}],"server\/sonar-web\/src\/main\/js\/components\/hoc\/withKeyboardNavigation.tsx":[{"add":["161","          <PageActions showShortcuts={!this.props.isFile} \/>"],"delete":["66","      key('k', KEY_SCOPE, () => {","67","        return this.skipIfNotFile(this.handleSelectPrevious);","68","      });","69","      key('j', KEY_SCOPE, () => {","70","        return this.skipIfNotFile(this.handleSelectNext);","71","      });","92","    skipIfNotFile = (handler: () => void) => {","93","      if (this.props.isFile) {","94","        handler();","95","        return false;","96","      } else {","97","        return true;","98","      }","99","    };","100","","174","      const { components = [], isFile } = this.props;","175","      const index = this.getCurrentIndex();","176","","179","          <PageActions","180","            current={index > -1 ? index + 1 : undefined}","181","            isFile={isFile}","182","            showPaging={isFile && index > -1}","183","            showShortcuts={true}","184","            totalLoadedComponents={components.length}","185","          \/>"]}],"\/dev\/null":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/style.css":[{"add":[],"delete":["66",".measure-details-page-actions {","67","  display: inline-block;","68","  text-align: right;","69","}","70","","71",".measure-details-page-actions .spinner {","72","  vertical-align: text-bottom;","73","}","74",""]}],"server\/sonar-web\/src\/main\/js\/components\/ui\/PageActions.tsx":[{"add":["23","export interface Props {","26","  total?: number;","30","  const { current, showShortcuts, total = 0 } = props;","34","      {showShortcuts && (","35","        <span className=\"note nowrap\">","36","          <span className=\"big-spacer-right\">","37","            <span className=\"shortcut-button little-spacer-right\">↑<\/span>","38","            <span className=\"shortcut-button little-spacer-right\">↓<\/span>","39","            {translate('component_measures.to_select_files')}","40","          <\/span>","41","","42","          <span>","43","            <span className=\"shortcut-button little-spacer-right\">←<\/span>","44","            <span className=\"shortcut-button little-spacer-right\">→<\/span>","45","            {translate('component_measures.to_navigate')}","46","          <\/span>","47","        <\/span>","48","      )}","50","        <div className=\"nowrap\">","51","          <FilesCounter className=\"big-spacer-left\" current={current} total={total} \/>"],"delete":["23","interface Props {","25","  isFile?: boolean;","26","  paging?: T.Paging;","27","  showPaging?: boolean;","29","  totalLoadedComponents?: number;","33","  const { isFile, paging, showPaging, showShortcuts, totalLoadedComponents } = props;","34","  let total = 0;","35","","36","  if (showPaging && totalLoadedComponents) {","37","    total = totalLoadedComponents;","38","  } else if (paging !== undefined) {","39","    total = isFile && totalLoadedComponents ? totalLoadedComponents : paging.total;","40","  }","44","      {!isFile && showShortcuts && renderShortcuts()}","45","      {isFile && (paging || showPaging) && renderFileShortcuts()}","47","        <div className=\"measure-details-page-actions nowrap\">","48","          <FilesCounter className=\"big-spacer-left\" current={props.current} total={total} \/>","54","","55","function renderShortcuts() {","56","  return (","57","    <span className=\"note nowrap\">","58","      <span className=\"big-spacer-right\">","59","        <span className=\"shortcut-button little-spacer-right\">↑<\/span>","60","        <span className=\"shortcut-button little-spacer-right\">↓<\/span>","61","        {translate('component_measures.to_select_files')}","62","      <\/span>","63","","64","      <span>","65","        <span className=\"shortcut-button little-spacer-right\">←<\/span>","66","        <span className=\"shortcut-button little-spacer-right\">→<\/span>","67","        {translate('component_measures.to_navigate')}","68","      <\/span>","69","    <\/span>","70","  );","71","}","72","","73","function renderFileShortcuts() {","74","  return (","75","    <span className=\"note nowrap\">","76","      <span>","77","        <span className=\"shortcut-button little-spacer-right\">j<\/span>","78","        <span className=\"shortcut-button little-spacer-right\">k<\/span>","79","        {translate('component_measures.to_navigate_files')}","80","      <\/span>","81","    <\/span>","82","  );","83","}"]}],"server\/sonar-web\/src\/main\/js\/components\/ui\/__tests__\/__snapshots__\/PageActions-test.tsx.snap":[{"add":["2","exports[`should render correctly 1`] = `","41","exports[`should render correctly 2`] = `","42","<div","43","  className=\"page-actions display-flex-center\"","44",">","45","  <span","46","    className=\"note nowrap\"","47","  >","48","    <span","49","      className=\"big-spacer-right\"","50","    >","51","      <span","52","        className=\"shortcut-button little-spacer-right\"","53","      >","54","        ↑","55","      <\/span>","56","      <span","57","        className=\"shortcut-button little-spacer-right\"","58","      >","59","        ↓","60","      <\/span>","61","      component_measures.to_select_files","62","    <\/span>","63","    <span>","64","      <span","65","        className=\"shortcut-button little-spacer-right\"","66","      >","67","        ←","68","      <\/span>","69","      <span","70","        className=\"shortcut-button little-spacer-right\"","71","      >","72","        →","73","      <\/span>","74","      component_measures.to_navigate","75","    <\/span>","76","  <\/span>","77","  <div","78","    className=\"nowrap\"","79","  >","80","    <FilesCounter","81","      className=\"big-spacer-left\"","82","      total={10}","83","    \/>","84","  <\/div>","85","<\/div>","86","`;","87","","88","exports[`should render correctly 3`] = `","93","    className=\"nowrap\""],"delete":["2","exports[`should display correctly for a file 1`] = `","3","<div","4","  className=\"page-actions display-flex-center\"","5","\/>","6","`;","7","","8","exports[`should display correctly for a file 2`] = `","9","<div","10","  className=\"page-actions display-flex-center\"","11",">","12","  <span","13","    className=\"note nowrap\"","14","  >","15","    <span>","16","      <span","17","        className=\"shortcut-button little-spacer-right\"","18","      >","19","        j","20","      <\/span>","21","      <span","22","        className=\"shortcut-button little-spacer-right\"","23","      >","24","        k","25","      <\/span>","26","      component_measures.to_navigate_files","27","    <\/span>","28","  <\/span>","29","  <div","30","    className=\"measure-details-page-actions nowrap\"","31","  >","32","    <FilesCounter","33","      className=\"big-spacer-left\"","34","      total={10}","35","    \/>","36","  <\/div>","37","<\/div>","38","`;","39","","40","exports[`should display correctly for a project 1`] = `","79","exports[`should display the total of files 1`] = `","84","    className=\"measure-details-page-actions nowrap\"","94","","95","exports[`should display the total of files 2`] = `","96","<div","97","  className=\"page-actions display-flex-center\"","98",">","99","  <span","100","    className=\"note nowrap\"","101","  >","102","    <span>","103","      <span","104","        className=\"shortcut-button little-spacer-right\"","105","      >","106","        j","107","      <\/span>","108","      <span","109","        className=\"shortcut-button little-spacer-right\"","110","      >","111","        k","112","      <\/span>","113","      component_measures.to_navigate_files","114","    <\/span>","115","  <\/span>","116","  <div","117","    className=\"measure-details-page-actions nowrap\"","118","  >","119","    <FilesCounter","120","      className=\"big-spacer-left\"","121","      current={12}","122","      total={20}","123","    \/>","124","  <\/div>","125","<\/div>","126","`;","127","","128","exports[`should not display shortcuts for treemap 1`] = `","129","<div","130","  className=\"page-actions display-flex-center\"","131","\/>","132","`;"]}],"server\/sonar-web\/src\/main\/js\/components\/hoc\/__tests__\/withKeyboardNavigation-test.tsx":[{"add":["132","it('should correctly bind key events for codeview navigation', () => {"],"delete":["132","it('should correctly bind key events for sibling navigation', () => {","151","  expect(onSelect).not.toBeCalled();","155","  expect(onSelect).not.toBeCalled();","158","  expect(onHighlight).not.toBeCalled();","162","  expect(onHighlight).not.toBeCalled();","165","  keydown('j');","166","  expect(onSelect).toBeCalledWith(COMPONENTS[2]);","167","","168","  keydown('k');","169","  expect(onSelect).toBeCalledWith(COMPONENTS[0]);","170",""]}],"server\/sonar-docs\/src\/pages\/user-guide\/keyboard-shortcuts.md":[{"add":[],"delete":["44","| `j` `k`  | switch between files                          |"]}],"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/components\/MeasureOverview.tsx":[{"add":["136","    const { paging } = this.state;","156","                    total={paging && paging.total}"],"delete":["136","    const isFile = isFileType(component);","156","                    isFile={isFile}","157","                    paging={this.state.paging}"]}],"server\/sonar-web\/src\/main\/js\/components\/ui\/__tests__\/PageActions-test.tsx":[{"add":["21","import PageActions, { Props } from '..\/PageActions';","23","it('should render correctly', () => {","24","  expect(shallowRender()).toMatchSnapshot();","25","  expect(shallowRender({ total: 10 })).toMatchSnapshot();","26","  expect(shallowRender({ current: 12, showShortcuts: false, total: 120 })).toMatchSnapshot();","29","function shallowRender(props: Partial<Props> = {}) {","30","  return shallow(<PageActions showShortcuts={true} {...props} \/>);","31","}"],"delete":["21","import PageActions from '..\/PageActions';","23","const PAGING = {","24","  pageIndex: 1,","25","  pageSize: 100,","26","  total: 120","27","};","28","","29","it('should display correctly for a project', () => {","30","  expect(","31","    shallow(<PageActions isFile={false} showShortcuts={true} totalLoadedComponents={20} \/>)","32","  ).toMatchSnapshot();","35","it('should display correctly for a file', () => {","36","  const wrapper = shallow(","37","    <PageActions isFile={true} showShortcuts={true} totalLoadedComponents={10} \/>","38","  );","39","  expect(wrapper).toMatchSnapshot();","40","  wrapper.setProps({ paging: { total: 100 } });","41","  expect(wrapper).toMatchSnapshot();","42","});","43","","44","it('should not display shortcuts for treemap', () => {","45","  expect(","46","    shallow(<PageActions isFile={false} showShortcuts={false} totalLoadedComponents={20} \/>)","47","  ).toMatchSnapshot();","48","});","49","","50","it('should display the total of files', () => {","51","  expect(","52","    shallow(","53","      <PageActions","54","        current={12}","55","        isFile={false}","56","        paging={PAGING}","57","        showShortcuts={false}","58","        totalLoadedComponents={20}","59","      \/>","60","    )","61","  ).toMatchSnapshot();","62","  expect(","63","    shallow(","64","      <PageActions","65","        current={12}","66","        isFile={true}","67","        paging={PAGING}","68","        showShortcuts={true}","69","        totalLoadedComponents={20}","70","      \/>","71","    )","72","  ).toMatchSnapshot();","73","});"]}],"server\/sonar-web\/src\/main\/js\/helpers\/testUtils.ts":[{"add":["75","  40: 'down'"],"delete":["75","  40: 'down',","76","  74: 'j',","77","  75: 'k'"]}]}},"3a7c8c60ca1a3cbd87959f795a70203d6556e35b":{"changes":{"server\/sonar-auth-gitlab\/src\/main\/java\/org\/sonar\/auth\/gitlab\/GitLabSettings.java":"MODIFY","server\/sonar-auth-gitlab\/src\/test\/java\/org\/sonar\/auth\/gitlab\/GitLabSettingsTest.java":"MODIFY"},"diff":{"server\/sonar-auth-gitlab\/src\/main\/java\/org\/sonar\/auth\/gitlab\/GitLabSettings.java":[{"add":["50","    String url = configuration.get(GITLAB_AUTH_URL).orElse(null);","51","    if (url != null && url.endsWith(\"\/\")) {","52","      return url.substring(0, url.length() - 1);","53","    }","54","    return url;"],"delete":["50","    return configuration.get(GITLAB_AUTH_URL).orElse(null);"]}],"server\/sonar-auth-gitlab\/src\/test\/java\/org\/sonar\/auth\/gitlab\/GitLabSettingsTest.java":[{"add":["53","","54","    settings.setProperty(GITLAB_AUTH_URL, \"https:\/\/gitlab.com\/api\/\");","55","    assertThat(config.url()).isEqualTo(\"https:\/\/gitlab.com\/api\");","56","","57",""],"delete":[]}]}},"9e553274fbe228c06b92527ace1446d08ee244c3":{"changes":{"sonar-core\/src\/test\/java\/org\/sonar\/core\/issue\/tracking\/TrackerTest.java":"MODIFY","sonar-core\/src\/main\/java\/org\/sonar\/core\/issue\/tracking\/Tracker.java":"MODIFY"},"diff":{"sonar-core\/src\/test\/java\/org\/sonar\/core\/issue\/tracking\/TrackerTest.java":[{"add":["43","  public static final RuleKey RULE_MISSING_PACKAGE_INFO = RuleKey.of(\"java\", \"MissingPackageInfo\");","435","  @Test","436","  public void match_issues_with_same_rule_key_on_project_level() {","437","    FakeInput baseInput = new FakeInput();","438","    Issue base1 = baseInput.createIssue(RULE_MISSING_PACKAGE_INFO, \"[com.test:abc] Missing package-info.java in package.\");","439","    Issue base2 = baseInput.createIssue(RULE_MISSING_PACKAGE_INFO, \"[com.test:abc\/def] Missing package-info.java in package.\");","440","","441","    FakeInput rawInput = new FakeInput();","442","    Issue raw1 = rawInput.createIssue(RULE_MISSING_PACKAGE_INFO, \"[com.test:abc\/def] Missing package-info.java in package.\");","443","    Issue raw2 = rawInput.createIssue(RULE_MISSING_PACKAGE_INFO, \"[com.test:abc] Missing package-info.java in package.\");","444","","445","    Tracking<Issue, Issue> tracking = tracker.trackNonClosed(rawInput, baseInput);","446","    assertThat(tracking.getUnmatchedBases()).hasSize(0);","447","    assertThat(tracking.baseFor(raw1)).isEqualTo(base2);","448","    assertThat(tracking.baseFor(raw2)).isEqualTo(base1);","449","  }","450",""],"delete":[]}],"sonar-core\/src\/main\/java\/org\/sonar\/core\/issue\/tracking\/Tracker.java":[{"add":["37","    \/\/ 1. match by rule, line, line hash and message","38","    match(tracking, LineAndLineHashAndMessage::new);","39","","40","    \/\/ 2. match issues with same rule, same line and same line hash, but not necessarily with same message","43","    \/\/ 3. detect code moves by comparing blocks of codes","46","    \/\/ 4. match issues with same rule, same message and same line hash","49","    \/\/ 5. match issues with same rule, same line and same message","52","    \/\/ 6. match issues with same rule and same line hash but different line and different message."],"delete":["37","    \/\/ 1. match issues with same rule, same line and same line hash, but not necessarily with same message","40","    \/\/ 2. detect code moves by comparing blocks of codes","43","    \/\/ 3. match issues with same rule, same message and same line hash","46","    \/\/ 4. match issues with same rule, same line and same message","49","    \/\/ 5. match issues with same rule and same line hash but different line and different message."]}]}},"d050cbd64722be89211c33d76995d37f8d6477f8":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/es\/NewIndex.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/es\/NewIndex.java":[{"add":["234","      Map<String, String> hash = new TreeMap<>();","235","      hash.put(\"type\", \"date\");","236","      hash.put(\"format\", \"date_time||epoch_second\");","237","      return setProperty(fieldName, hash);","356","      Map<String, Object> hash = new TreeMap<>();","357","      hash.put(\"type\", getFieldType());","358","      hash.put(INDEX, disableSearch ? INDEX_NOT_SEARCHABLE : INDEX_SEARCHABLE);","359","      hash.put(\"norms\", valueOf(!disableNorms));","360","      hash.put(\"store\", valueOf(store));","367","      return indexType.setProperty(fieldName, hash);","401","      Map<String, String> subHash = new TreeMap<>();","402","      subHash.put(\"type\", getFieldType());","403","      subHash.put(INDEX, INDEX_SEARCHABLE);","404","      subHash.put(\"norms\", \"false\");","405","      subHash.put(\"store\", valueOf(store));","407","        subHash.put(\"doc_values\", valueOf(!disabledDocValues));","409","      multiFields.put(fieldName, subHash);","497","      return setProperty(fieldName, ImmutableSortedMap.of(","513","      return indexType.setProperty(fieldName, ImmutableSortedMap.of(","514","        \"type\", \"nested\",","515","        \"properties\", properties));"],"delete":["234","      return setProperty(fieldName, ImmutableMap.of(\"type\", \"date\", \"format\", \"date_time||epoch_second\"));","353","      ImmutableMap.Builder<String, String> hash = ImmutableMap.builder();","354","      hash.put(\"type\", getFieldType())","355","        .put(INDEX, disableSearch ? INDEX_NOT_SEARCHABLE : INDEX_SEARCHABLE)","356","        .put(\"norms\", valueOf(!disableNorms))","357","        .put(\"store\", valueOf(store));","364","      return indexType.setProperty(fieldName, hash.build());","398","      ImmutableMap.Builder<String, String> builder = ImmutableMap.builder();","399","      builder.put(\"type\", getFieldType())","400","        .put(INDEX, INDEX_SEARCHABLE)","401","        .put(\"norms\", \"false\")","402","        .put(\"store\", valueOf(store));","404","        builder.put(\"doc_values\", valueOf(!disabledDocValues));","406","      multiFields.put(fieldName, builder.build());","494","      return setProperty(fieldName, ImmutableMap.of(","509","      Map<String, Object> hash = new TreeMap<>();","510","      hash.put(\"type\", \"nested\");","511","      hash.put(\"properties\", properties);","513","      return indexType.setProperty(fieldName, hash);"]}]}},"5e93a5a3e81c5285e354d4632024c31581bd7ae5":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/ActivationFormModal.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/CustomRuleFormModal.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/RuleDetailsParameters.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/RuleDetailsDescription.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/ActivationFormModal.tsx":[{"add":["20","import { sanitize } from 'dompurify';","228","                    \/\/ eslint-disable-next-line react\/no-danger","229","                    dangerouslySetInnerHTML={{ __html: sanitize(param.htmlDesc || '') }}"],"delete":["227","                    \/\/ Safe: defined by rule creator (instance admin?)","228","                    dangerouslySetInnerHTML={{ __html: param.htmlDesc || '' }}"]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/CustomRuleFormModal.tsx":[{"add":["19","import { sanitize } from 'dompurify';","307","        \/\/ eslint-disable-next-line react\/no-danger","308","        dangerouslySetInnerHTML={{ __html: sanitize(param.htmlDesc || '') }}"],"delete":["306","        \/\/ Safe: defined by rule creator (instance admin?)","307","        dangerouslySetInnerHTML={{ __html: param.htmlDesc || '' }}"]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/RuleDetailsParameters.tsx":[{"add":["19","import { sanitize } from 'dompurify';","32","        <p","33","          \/\/ eslint-disable-next-line react\/no-danger","34","          dangerouslySetInnerHTML={{ __html: sanitize(param.htmlDesc || '') }}"],"delete":["31","        <p \/\/ Safe: defined by rule creator (instance admin?)","32","          dangerouslySetInnerHTML={{ __html: param.htmlDesc || '' }}"]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/RuleDetailsDescription.tsx":[{"add":["19","import { sanitize } from 'dompurify';","115","          \/\/ eslint-disable-next-line react\/no-danger","116","          dangerouslySetInnerHTML={{ __html: sanitize(this.props.ruleDetails.htmlNote) }}","197","            \/\/ eslint-disable-next-line react\/no-danger","198","            dangerouslySetInnerHTML={{ __html: sanitize(ruleDetails.htmlDesc || '') }}"],"delete":["114","          \/\/ Safe: defined by rule creator (instance admin?)","115","          dangerouslySetInnerHTML={{ __html: this.props.ruleDetails.htmlNote }}","196","            \/\/ Safe: defined by rule creator (instance admin?)","197","            dangerouslySetInnerHTML={{ __html: ruleDetails.htmlDesc || '' }}"]}]}},"f6f52d114ec91f37716e515d6d880819ea7e96fd":{"changes":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/component\/index.html.erb":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/component\/index.html.erb":[{"add":["1","  <% if @resource %>","12","  <% end %>"],"delete":[]}]}},"15dcaa5c3a0f87c71bebf03cb5bf0e6e6cccc2ab":{"changes":{"sonar-scanner-engine\/src\/main\/resources\/org\/sonar\/batch\/scan\/report\/issuesreport_files\/sonar.css":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/main\/resources\/org\/sonar\/batch\/scan\/report\/issuesreport_files\/sonar.css":[{"add":[],"delete":["217","  height: 2.2em;"]}]}},"a2c9177fd9e0f72b38cacdba32ab5cf1a9c22fcb":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/__tests__\/ProjectsList-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/__tests__\/__snapshots__\/ProjectsList-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/ProjectsList.tsx":"MODIFY","server\/sonar-web\/__mocks__\/react-virtualized\/dist\/commonjs\/WindowScroller.ts":"ADD","server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/__tests__\/__snapshots__\/GraphHistory-test.tsx.snap":"MODIFY","server\/sonar-web\/__mocks__\/react-virtualized\/dist\/commonjs\/AutoSizer.ts":"ADD"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/__tests__\/ProjectsList-test.tsx":[{"add":["21","import { ListRowProps } from 'react-virtualized';","22","import { AutoSizer } from 'react-virtualized\/dist\/commonjs\/AutoSizer';","23","import { WindowScroller } from 'react-virtualized\/dist\/commonjs\/WindowScroller';","26","jest.mock('react-virtualized\/dist\/commonjs\/AutoSizer');","27","jest.mock('react-virtualized\/dist\/commonjs\/WindowScroller');","28","","29","it('renders correctly', () => {","30","  const wrapper = shallowRender();","31","  expect(","32","    wrapper","33","      .find(WindowScroller)","34","      .dive()","35","      .find(AutoSizer)","36","      .dive()","37","  ).toMatchSnapshot('list element');","38","","39","  expect(","40","    wrapper.instance().renderRow({ index: 0, key: 'foo-key', style: {} } as ListRowProps)","41","  ).toMatchSnapshot('row element');","51","  return shallow<ProjectsList>("],"delete":["23","it('renders', () => {","24","  expect(shallowRender()).toMatchSnapshot();","34","  return shallow("]}],"server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/__tests__\/__snapshots__\/ProjectsList-test.tsx.snap":[{"add":["2","exports[`renders correctly: list element 1`] = `","3","<div>","4","  <List","5","    aria-label=\"project_plural\"","6","    autoHeight={true}","7","    estimatedRowSize={30}","8","    height={200}","9","    isScrolling={false}","10","    noRowsRenderer={[Function]}","11","    onRowsRendered={[Function]}","13","    overscanIndicesGetter={[Function]}","14","    overscanRowCount={2}","15","    rowCount={2}","16","    rowHeight={163}","17","    rowRenderer={[Function]}","18","    scrollToAlignment=\"auto\"","19","    scrollToIndex={-1}","20","    scrollTop={0}","21","    style={","22","      Object {","23","        \"outline\": \"none\",","24","      }","25","    }","26","    width={200}","27","  \/>","28","<\/div>","29","`;","30","","31","exports[`renders correctly: row element 1`] = `","32","<div","33","  role=\"row\"","34","  style={","35","    Object {","36","      \"height\": 143,","37","    }","38","  }","39",">","40","  <div","41","    role=\"gridcell\"","43","    <ProjectCard","44","      currentUser={","45","        Object {","46","          \"isLoggedIn\": true,","47","        }","48","      }","49","      height={143}","50","      project={","51","        Object {","52","          \"key\": \"foo\",","53","          \"name\": \"Foo\",","54","        }","55","      }","56","      type=\"overall\"","57","    \/>","58","  <\/div>"],"delete":["2","exports[`renders 1`] = `","3","<div","4","  className=\"projects-list\"","5",">","6","  <WindowScroller","7","    onResize={[Function]}","9","    scrollElement={[Window]}","10","    scrollingResetTimeInterval={150}","11","    serverHeight={0}","12","    serverWidth={0}","14","    <Component \/>","15","  <\/WindowScroller>"]}],"server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/ProjectsList.tsx":[{"add":["23","import { translate } from 'sonar-ui-common\/helpers\/l10n';","77","      <div key={key} role=\"row\" style={{ ...style, height }}>","78","        <div role=\"gridcell\">","79","          <ProjectCard","80","            currentUser={this.props.currentUser}","81","            handleFavorite={this.props.handleFavorite}","82","            height={height}","83","            key={project.key}","84","            organization={this.props.organization}","85","            project={project}","86","            type={this.props.cardType}","87","          \/>","88","        <\/div>","102","                  aria-label={translate('project_plural')}"],"delete":["76","      <div key={key} style={{ ...style, height }}>","77","        <ProjectCard","78","          currentUser={this.props.currentUser}","79","          handleFavorite={this.props.handleFavorite}","80","          height={height}","81","          key={project.key}","82","          organization={this.props.organization}","83","          project={project}","84","          type={this.props.cardType}","85","        \/>"]}],"server\/sonar-web\/__mocks__\/react-virtualized\/dist\/commonjs\/WindowScroller.ts":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/__tests__\/__snapshots__\/GraphHistory-test.tsx.snap":[{"add":["34","    <AutoSizer>"],"delete":["34","    <AutoSizer","35","      disableHeight={false}","36","      disableWidth={false}","37","      onResize={[Function]}","38","      style={Object {}}","39","    >"]}],"server\/sonar-web\/__mocks__\/react-virtualized\/dist\/commonjs\/AutoSizer.ts":[{"add":[],"delete":[]}]}},"11b5185acd1215b4eec4243caab19e4c14004e89":{"changes":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/server\/ws\/internal\/ValidatingRequest.java":"MODIFY","sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/server\/ws\/RequestTest.java":"MODIFY","sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/server\/ws\/internal\/SimpleGetRequestTest.java":"MODIFY"},"diff":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/server\/ws\/internal\/ValidatingRequest.java":[{"add":["218","      throw new IllegalArgumentException(format(\"'%s' value '%s' cannot be parsed as an integer\", key, value), exception);"],"delete":["218","      throw new IllegalStateException(format(\"'%s' value '%s' cannot be parsed as an integer\", key, value), exception);"]}],"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/server\/ws\/RequestTest.java":[{"add":["62","  private FakeRequest underTest = new FakeRequest();","147","  public void paramAsInt_throws_IAE_if_maximum_defined_and_value_not_a_number() {","148","    String param = \"maximum_value_param\";","149","    defineParameterTestAction(newParam -> newParam.setMaximumValue(10), param);","150","","151","    expectedException.expect(IllegalArgumentException.class);","152","    expectedException.expectMessage(\"'maximum_value_param' value 'foo' cannot be parsed as an integer\");","153","","154","    underTest.setParam(param, \"foo\").paramAsInt(param);","155","  }","156","","157","  @Test","227","  public void paramAsInt() {","622","  public void param_as_part() {","634","  public void mandatory_param_as_part() {"],"delete":["62","  FakeRequest underTest = new FakeRequest();","216","  public void param_as_int() {","611","  public void param_as_part() throws Exception {","623","  public void mandatory_param_as_part() throws Exception {"]}],"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/server\/ws\/internal\/SimpleGetRequestTest.java":[{"add":["52","  public void get_part() {"],"delete":["52","  public void get_part() throws Exception {"]}]}},"c8afbfd7e00b8f27ce097efab84e186b3afebe6e":{"changes":{"tests\/src\/test\/java\/org\/sonarqube\/tests\/qualityProfile\/BuiltInQualityProfilesNotificationTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/platformlevel\/PlatformLevel4.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/platformlevel\/PlatformLevelStartup.java":"MODIFY"},"diff":{"tests\/src\/test\/java\/org\/sonarqube\/tests\/qualityProfile\/BuiltInQualityProfilesNotificationTest.java":[{"add":["91","      .setServerProperty(\"sonar.notifications.delay\", \"1\")"],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/platformlevel\/PlatformLevel4.java":[{"add":["152","import org.sonar.server.qualityprofile.BuiltInQualityProfilesNotificationDispatcher;","153","import org.sonar.server.qualityprofile.BuiltInQualityProfilesNotificationTemplate;","459","      \/\/ Those class are required in order to be able to send emails during startup","460","      \/\/ Without having two NotificationModule (one in StartupLevel and one in Level4)","461","      BuiltInQualityProfilesNotificationTemplate.class,","462","      BuiltInQualityProfilesNotificationDispatcher.class,","463",""],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/platformlevel\/PlatformLevelStartup.java":[{"add":["40","import org.sonar.server.startup.RenameDeprecatedPropertyKeys;"],"delete":["23","import org.sonar.server.notification.NotificationModule;","31","import org.sonar.server.qualityprofile.BuiltInQualityProfilesNotificationDispatcher;","32","import org.sonar.server.qualityprofile.BuiltInQualityProfilesNotificationTemplate;","42","import org.sonar.server.startup.RenameDeprecatedPropertyKeys;","66","      \/\/ TODO Should we put it in level 2 ?","67","      NotificationModule.class,","68","      BuiltInQualityProfilesNotificationDispatcher.class,","69","      BuiltInQualityProfilesNotificationTemplate.class,"]}]}},"590a9d5d2cd511bde4f7763478fb7f6b8d0e2faa":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/__tests__\/utils-test.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/pullRequests\/__tests__\/PullRequestOverview-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/pullRequests\/PullRequestOverview.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/types\/quality-gates.ts":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/__tests__\/utils-test.ts":[{"add":["64","          level: 'OK',"],"delete":["64","          level: 'WARNING',"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/pullRequests\/__tests__\/PullRequestOverview-test.tsx":[{"add":["26","import { PR_METRICS } from '..\/..\/utils';","106","it('should correctly fetch all required metrics for a passing QG', async () => {","107","  const wrapper = shallowRender({ conditions: [] });","109","  expect(getMeasuresAndMeta).toBeCalledWith('my-project', PR_METRICS, expect.any(Object));","110","});","111","","112","it('should correctly fetch all required metrics for a failing QG', async () => {","113","  const wrapper = shallowRender({","114","    conditions: [mockQualityGateStatusCondition({ level: 'ERROR', metric: 'foo' })]","115","  });","116","  await waitAndUpdate(wrapper);","117","  expect(getMeasuresAndMeta).toBeCalledWith(","118","    'my-project',","119","    [...PR_METRICS, 'foo'],","120","    expect.any(Object)","121","  );"],"delete":["105","it('should correctly handle a WS failure', async () => {","106","  (getMeasuresAndMeta as jest.Mock).mockRejectedValueOnce({});","107","  const fetchBranchStatus = jest.fn().mockRejectedValue({});","108","  const wrapper = shallowRender({ fetchBranchStatus });","109","","111","  expect(wrapper.type()).toBeNull();"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/pullRequests\/PullRequestOverview.tsx":[{"add":["20","import { differenceBy, uniq } from 'lodash';","51","  fetchBranchStatus: (branchLike: BranchLike, projectKey: string) => void;","76","    if (this.props.conditions === undefined) {","77","      this.fetchBranchStatusData();","78","    } else {","79","      this.fetchBranchData();","80","    }","81","  }","82","","83","  componentDidUpdate(prevProps: Props) {","84","    if (this.conditionsHaveChanged(prevProps)) {","85","      this.fetchBranchData();","86","    }","93","  conditionsHaveChanged = (prevProps: Props) => {","94","    const prevConditions = prevProps.conditions ?? [];","95","    const newConditions = this.props.conditions ?? [];","96","    const diff = differenceBy(","97","      prevConditions.filter(c => c.level === 'ERROR'),","98","      newConditions.filter(c => c.level === 'ERROR'),","99","      c => c.metric","100","    );","101","","102","    return (","103","      (prevProps.conditions === undefined && this.props.conditions !== undefined) || diff.length > 0","104","    );","105","  };","106","","107","  fetchBranchStatusData = () => {","112","    this.props.fetchBranchStatus(branchLike, key);","113","  };","114","","115","  fetchBranchData = () => {","116","    const {","117","      branchLike,","118","      component: { key },","119","      conditions","120","    } = this.props;","124","    const metricKeys =","125","      conditions !== undefined","126","        ? \/\/ Also load metrics that apply to failing QG conditions.","127","          uniq([...PR_METRICS, ...conditions.filter(c => c.level !== 'OK').map(c => c.metric)])","128","        : PR_METRICS;","129","","130","    getMeasuresAndMeta(key, metricKeys, {","131","      additionalFields: 'metrics',","132","      ...getBranchLikeQuery(branchLike)","133","    }).then(","134","      ({ component, metrics }) => {"],"delete":["50","  fetchBranchStatus: (branchLike: BranchLike, projectKey: string) => Promise<void>;","75","    this.fetchBranchData();","82","  fetchBranchData = () => {","90","    Promise.all([","91","      getMeasuresAndMeta(key, PR_METRICS, {","92","        additionalFields: 'metrics',","93","        ...getBranchLikeQuery(branchLike)","94","      }),","95","      this.props.fetchBranchStatus(branchLike, key)","96","    ]).then(","97","      ([{ component, metrics }]) => {"]}],"server\/sonar-web\/src\/main\/js\/types\/quality-gates.ts":[{"add":["46","  status: T.Status;","69","  level: T.Status;"],"delete":["46","  status: string;","69","  level: string;"]}]}},"eacba88db0a44e34156e9e31d315ef31d61e726a":{"changes":{"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/permission\/ws\/template\/TemplateGroupsActionTest.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/template\/PermissionTemplateDaoTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/permission\/template\/PermissionTemplateMapper.xml":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/template\/GroupWithPermissionTemplateDaoTest.java":"MODIFY","server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/permission\/ws\/template\/TemplateUsersActionTest.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/template\/UserWithPermissionTemplateDaoTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/permission\/PermissionQuery.java":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/permission\/ws\/template\/TemplateUsersAction.java":"MODIFY"},"diff":{"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/permission\/ws\/template\/TemplateGroupsActionTest.java":[{"add":["21","import java.util.stream.IntStream;","27","import org.sonar.api.web.UserRole;","41","import org.sonar.server.permission.ws.BasePermissionWsTest;","53","import static org.sonar.db.permission.PermissionQuery.DEFAULT_PAGE_SIZE;","150","    GroupDto group4 = db.users().insertGroup(db.getDefaultOrganization(), \"group-4-name\");","152","    addGroupToTemplate(newPermissionTemplateGroup(ADMIN, anotherTemplate.getId(), group4.getId()));","159","    assertThat(response.getGroupsList()).extracting(\"name\").containsExactly(\"Anyone\", \"group-1-name\", \"group-2-name\", \"group-3-name\", \"group-4-name\");","163","    assertThat(response.getGroups(3).getPermissionsList()).isEmpty();","294","  public void search_ignores_other_template_and_is_ordered_by_groups_with_permission_then_by_name_when_many_groups() {","295","    OrganizationDto defaultOrg = db.getDefaultOrganization();","296","    PermissionTemplateDto template = addTemplateToDefaultOrganization();","297","    PermissionTemplateDto otherTemplate = db.permissionTemplates().insertTemplate(defaultOrg);","298","    IntStream.rangeClosed(1, DEFAULT_PAGE_SIZE + 1).forEach(i -> {","299","      GroupDto group = db.users().insertGroup(defaultOrg, \"Group-\" + i);","300","      db.permissionTemplates().addGroupToTemplate(otherTemplate, group, UserRole.USER);","301","    });","302","    String lastGroupName = \"Group-\" + (DEFAULT_PAGE_SIZE + 1);","303","    db.permissionTemplates().addGroupToTemplate(template, db.users().selectGroup(defaultOrg, lastGroupName).get(), UserRole.USER);","304","    loginAsAdmin(db.getDefaultOrganization());","305","","306","    WsGroupsResponse response = newRequest()","307","      .setParam(PARAM_TEMPLATE_ID, template.getUuid())","308","      .executeProtobuf(WsGroupsResponse.class);","309","","310","    assertThat(response.getGroupsList())","311","      .extracting(\"name\")","312","      .hasSize(DEFAULT_PAGE_SIZE)","313","      .startsWith(\"Anyone\", lastGroupName, \"Group-1\");","314","  }","315","","316","  @Test","398","    db.commit();"],"delete":["38","import org.sonar.server.permission.ws.BasePermissionWsTest;","93","    commit();","149","    commit();","156","    assertThat(response.getGroupsList()).extracting(\"name\").containsExactly(\"Anyone\", \"group-1-name\", \"group-2-name\", \"group-3-name\");","180","    commit();","207","    commit();","225","    commit();","246","    commit();","264","    commit();","283","    commit();","386","  private void commit() {","387","    db.commit();","388","  }"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/template\/PermissionTemplateDaoTest.java":[{"add":["71","  public void create_permission_template() {","89","  public void select_permission_template_by_uuid() {","170","  public void delete_permission_template() {","204","  public void add_user_permission_to_template() {","217","  public void remove_user_permission_from_template() {","233","  public void add_group_permission_to_template() {","265","  public void add_group_permission_to_anyone() {"],"delete":["56","","72","  public void should_create_permission_template() {","90","  public void should_select_permission_template_by_uuid() {","171","  public void should_delete_permission_template() {","205","  public void should_add_user_permission_to_template() {","218","  public void should_remove_user_permission_from_template() {","234","  public void should_add_group_permission_to_template() {","266","  public void should_add_group_permission_to_anyone() {"]}],"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/permission\/template\/PermissionTemplateMapper.xml":[{"add":["141","    LEFT JOIN perm_templates_users ptu ON ptu.user_id=u.id","142","      AND ptu.template_id=#{templateId}","143","    INNER JOIN organization_members om ON u.id=om.user_id","144","      AND om.organization_uuid=#{query.organizationUuid}","183","      AND ptg.template_id=#{templateId}","192","    FROM groups g","193","    LEFT JOIN perm_templates_groups ptg ON","194","      ptg.template_id=#{templateId}","196","      g.organization_uuid=#{query.organizationUuid,jdbcType=VARCHAR}"],"delete":["141","    LEFT JOIN perm_templates_users ptu ON ptu.user_id=u.id AND ptu.template_id=#{templateId}","142","    INNER JOIN organization_members om ON u.id=om.user_id AND om.organization_uuid=#{query.organizationUuid}","189","    FROM perm_templates_groups ptg"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/template\/GroupWithPermissionTemplateDaoTest.java":[{"add":["40","import static org.sonar.db.permission.PermissionQuery.DEFAULT_PAGE_SIZE;","106","  public void selectGroupNamesByQueryAndTemplate_is_order_by_groups_with_permission_then_by_name_when_many_groups() {","107","    OrganizationDto organization = db.organizations().insert();","108","    PermissionTemplateDto template = permissionTemplateDbTester.insertTemplate(organization);","109","    IntStream.rangeClosed(1, DEFAULT_PAGE_SIZE + 1).forEach(i -> {","110","      db.users().insertGroup(organization, \"Group-\" + i);","111","    });","112","","113","    String lastGroupName = \"Group-\" + (DEFAULT_PAGE_SIZE + 1);","114","    permissionTemplateDbTester.addGroupToTemplate(template, db.users().selectGroup(organization, lastGroupName).get(), UserRole.USER);","115","","116","    PermissionQuery query = PermissionQuery.builder().setOrganizationUuid(organization.getUuid()).build();","117","    assertThat(underTest.selectGroupNamesByQueryAndTemplate(db.getSession(), query, template.getId()))","118","      .hasSize(DEFAULT_PAGE_SIZE)","119","      .startsWith(\"Anyone\", lastGroupName, \"Group-1\");","120","  }","121","","122","  @Test","123","  public void selectGroupNamesByQueryAndTemplate_ignores_other_template_and_is_ordered_by_groups_with_permission_then_by_name_when_many_groups() {","124","    OrganizationDto organization = db.organizations().insert();","125","    PermissionTemplateDto template = permissionTemplateDbTester.insertTemplate(organization);","126","    PermissionTemplateDto otherTemplate = permissionTemplateDbTester.insertTemplate(organization);","127","    IntStream.rangeClosed(1, DEFAULT_PAGE_SIZE + 1).forEach(i -> {","128","      GroupDto group = db.users().insertGroup(organization, \"Group-\" + i);","129","      permissionTemplateDbTester.addGroupToTemplate(otherTemplate, group, UserRole.USER);","130","    });","131","","132","    String lastGroupName = \"Group-\" + (DEFAULT_PAGE_SIZE + 1);","133","    permissionTemplateDbTester.addGroupToTemplate(template, db.users().selectGroup(organization, lastGroupName).get(), UserRole.USER);","134","","135","    PermissionQuery query = PermissionQuery.builder().setOrganizationUuid(organization.getUuid()).build();","136","    assertThat(underTest.selectGroupNamesByQueryAndTemplate(db.getSession(), query, template.getId()))","137","      .hasSize(DEFAULT_PAGE_SIZE)","138","      .startsWith(\"Anyone\", lastGroupName, \"Group-1\");","139","  }","140","","141","  @Test","159","    GroupDto group = db.users().insertGroup(organization, \"Group\");"],"delete":["93","","123","    GroupDto group = db.users().insertGroup(newGroupDto().setName(\"Group\"));"]}],"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/permission\/ws\/template\/TemplateUsersActionTest.java":[{"add":["21","import java.util.stream.IntStream;","27","import org.sonar.api.web.UserRole;","30","import org.sonar.db.organization.OrganizationDto;","42","import org.sonar.server.permission.ws.BasePermissionWsTest;","53","import static org.sonar.db.permission.PermissionQuery.DEFAULT_PAGE_SIZE;","221","  public void search_ignores_other_template_and_is_ordered_by_users_with_permission_when_many_users() {","222","    OrganizationDto defaultOrg = db.getDefaultOrganization();","223","    PermissionTemplateDto template = addTemplateToDefaultOrganization();","224","    \/\/ Add another template having some users with permission to make sure it's correctly ignored","225","    PermissionTemplateDto otherTemplate = db.permissionTemplates().insertTemplate(defaultOrg);","226","    IntStream.rangeClosed(1, DEFAULT_PAGE_SIZE + 1).forEach(i -> {","227","      UserDto user = db.users().insertUser(\"User-\" + i);","228","      db.organizations().addMember(db.getDefaultOrganization(), user);","229","      db.permissionTemplates().addUserToTemplate(otherTemplate, user, UserRole.USER);","230","    });","231","    String lastLogin = \"User-\" + (DEFAULT_PAGE_SIZE + 1);","232","    db.permissionTemplates().addUserToTemplate(template, db.users().selectUserByLogin(lastLogin).get(), UserRole.USER);","233","    loginAsAdmin(defaultOrg);","234","","235","    Permissions.UsersWsResponse response = newRequest(null, null)","236","      .setParam(PARAM_TEMPLATE_NAME, template.getName())","237","      .executeProtobuf(Permissions.UsersWsResponse.class);","238","","239","    assertThat(response.getUsersList())","240","      .extracting(\"login\")","241","      .hasSize(DEFAULT_PAGE_SIZE)","242","      .startsWith(lastLogin);","243","  }","244","","245","  @Test"],"delete":["38","import org.sonar.server.permission.ws.BasePermissionWsTest;"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/template\/UserWithPermissionTemplateDaoTest.java":[{"add":["22","import java.util.stream.IntStream;","40","import static org.sonar.db.permission.PermissionQuery.DEFAULT_PAGE_SIZE;","164","  public void selectUserLoginsByQueryAndTemplate_is_order_by_groups_with_permission_when_many_users() {","165","    OrganizationDto organization = db.organizations().insert();","166","    PermissionTemplateDto template = db.permissionTemplates().insertTemplate(organization);","167","    \/\/ Add another template having some users with permission to make sure it's correctly ignored","168","    PermissionTemplateDto otherTemplate = db.permissionTemplates().insertTemplate(organization);","169","    IntStream.rangeClosed(1, DEFAULT_PAGE_SIZE + 1).forEach(i -> {","170","      UserDto user = db.users().insertUser(\"User-\" + i);","171","      db.organizations().addMember(organization, user);","172","      db.permissionTemplates().addUserToTemplate(otherTemplate, user, UserRole.USER);","173","    });","174","    String lastLogin = \"User-\" + (DEFAULT_PAGE_SIZE + 1);","175","    db.permissionTemplates().addUserToTemplate(template, db.users().selectUserByLogin(lastLogin).get(), UserRole.USER);","176","","177","    PermissionQuery query = PermissionQuery.builder().setOrganizationUuid(organization.getUuid()).build();","178","    assertThat(underTest.selectUserLoginsByQueryAndTemplate(db.getSession(), query, template.getId()))","179","      .hasSize(DEFAULT_PAGE_SIZE)","180","      .startsWith(lastLogin);","181","  }","182","","183","  @Test","258",""],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/permission\/PermissionQuery.java":[{"add":[],"delete":["52","  private final String template;","72","    this.template = builder.template;","93","  \/\/ TODO remove it, it should not be in the query, but set as a separate parameter","94","  @Deprecated","95","  public String template() {","96","    return template;","97","  }","98","","141","    private String template;","158","    public Builder setTemplate(@Nullable String template) {","159","      this.template = template;","160","      return this;","161","    }","162",""]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/permission\/ws\/template\/TemplateUsersAction.java":[{"add":["38","import org.sonar.server.permission.RequestValidator;"],"delete":["40","import org.sonar.server.permission.RequestValidator;","123","      .setTemplate(template.getUuid())"]}]}},"2bc87f33684239adbfa746db78ca73290688adaa":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/controls\/Select.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/ProjectFacet.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/AssigneeFacet-test.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/controls\/SearchSelect.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/facet\/FacetFooter.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/TagFacet.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/controls\/__tests__\/__snapshots__\/SearchSelect-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/RuleFacet.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/controls\/__tests__\/SearchSelect-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/controls\/react-select.css":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/TagFacet.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/AssigneeFacet.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/BulkChangeModal.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/controls\/Select.tsx":[{"add":["51","    <ReactSelectAny {...props} clearRenderer={renderInput} clearable={clearable} ref={innerRef} \/>"],"delete":["51","    <ReactSelectAny {...props} clearable={clearable} clearRenderer={renderInput} ref={innerRef} \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/ProjectFacet.js":[{"add":["98","  handleSelect = (option \/*: { value: string } *\/) => {","100","    this.props.onChange({ [this.property]: uniq([...projects, option.value]) });"],"delete":["98","  handleSelect = (rule \/*: string *\/) => {","100","    this.props.onChange({ [this.property]: uniq([...projects, rule]) });"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/AssigneeFacet-test.js":[{"add":["95","  onSelect({ value: 'qux' });"],"delete":["95","  onSelect('qux');"]}],"server\/sonar-web\/src\/main\/js\/components\/controls\/SearchSelect.tsx":[{"add":["21","import Select, { Creatable } from '..\/..\/components\/controls\/Select';","31","  canCreate?: boolean;","34","  multi?: boolean;","36","  onSelect?: (option: Option) => void;","37","  onMultiSelect?: (options: Option[]) => void;","38","  promptTextCreator?: (label: string) => string;","79","  handleSearch = (query: string) => {","80","    \/\/ Ignore the result if the query changed","81","    const currentQuery = query;","82","    this.props.onSearch(currentQuery).then(","85","          this.setState(state => ({","86","            loading: false,","87","            options: state.query === currentQuery ? options : state.options","88","          }));","97","  };","99","  handleChange = (option: Option | Option[]) => {","100","    if (Array.isArray(option)) {","101","      if (this.props.onMultiSelect) {","102","        this.props.onMultiSelect(option);","103","      }","104","    } else if (this.props.onSelect) {","105","      this.props.onSelect(option);","106","    }","107","  };","114","      \/\/ `onInputChange` is called with an empty string after a user selects a value","115","      \/\/ in this case we shouldn't reset `options`, because it also resets select value :(","125","    const Component = this.props.canCreate ? Creatable : Select;","127","      <Component","131","        escapeClearsValue={false}","134","        multi={this.props.multi}","146","        promptTextCreator={this.props.promptTextCreator}"],"delete":["21","import Select from '..\/..\/components\/controls\/Select';","34","  onSelect: (value: string) => void;","75","  handleSearch = (query: string) =>","76","    this.props.onSearch(query).then(","79","          this.setState({ loading: false, options });","89","  handleChange = (option: Option) => this.props.onSelect(option.value);","92","    \/\/ `onInputChange` is called with an empty string after a user selects a value","93","    \/\/ in this case we shouldn't reset `options`, because it also resets select value :(","108","      <Select"]}],"server\/sonar-web\/src\/main\/js\/components\/facet\/FacetFooter.tsx":[{"add":["27","  onSelect: (option: Option) => void;"],"delete":["27","  onSelect: (value: string) => void;"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/TagFacet.js":[{"add":["80","  handleSelect = (option \/*: { value: string } *\/) => {","82","    this.props.onChange({ [this.property]: uniq([...tags, option.value]) });"],"delete":["80","  handleSelect = (tag \/*: string *\/) => {","82","    this.props.onChange({ [this.property]: uniq([...tags, tag]) });"]}],"server\/sonar-web\/src\/main\/js\/components\/controls\/__tests__\/__snapshots__\/SearchSelect-test.tsx.snap":[{"add":["7","  escapeClearsValue={false}"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/RuleFacet.js":[{"add":["82","  handleSelect = (option \/*: { value: string } *\/) => {","84","    this.props.onChange({ [this.property]: uniq([...rules, option.value]) });"],"delete":["82","  handleSelect = (rule \/*: string *\/) => {","84","    this.props.onChange({ [this.property]: uniq([...rules, rule]) });"]}],"server\/sonar-web\/src\/main\/js\/components\/controls\/__tests__\/SearchSelect-test.tsx":[{"add":["37","  expect(onSelect).lastCalledWith({ value: 'foo' });"],"delete":["37","  expect(onSelect).lastCalledWith('foo');"]}],"server\/sonar-web\/src\/main\/js\/components\/controls\/react-select.css":[{"add":["419","  padding: 1px 5px;"],"delete":["419","  padding: 1px 5px 3px;"]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/TagFacet.tsx":[{"add":["30","  handleSearch = (query: string) => {","31","    return getRuleTags({ organization: this.props.organization, ps: 50, q: query }).then(tags =>","34","  };","36","  handleSelect = (option: { value: string }) => {","37","    this.props.onChange({ tags: uniq([...this.props.values, option.value]) });","38","  };"],"delete":["30","  handleSearch = (query: string) =>","31","    getRuleTags({ organization: this.props.organization, ps: 50, q: query }).then(tags =>","35","  handleSelect = (tag: string) => this.props.onChange({ tags: uniq([...this.props.values, tag]) });"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/AssigneeFacet.js":[{"add":["86","  handleSelect = (option \/*: { value: string } *\/) => {","88","    this.props.onChange({ assigned: true, [this.property]: uniq([...assignees, option.value]) });"],"delete":["86","  handleSelect = (assignee \/*: string *\/) => {","88","    this.props.onChange({ assigned: true, [this.property]: uniq([...assignees, assignee]) });"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/BulkChangeModal.js":[{"add":["25","import Select from '..\/..\/..\/components\/controls\/Select';","51","  initialTags: Array<{ label:string, value: string }>,","60","  addTags?: Array<{ label: string, value: string }>,","61","  assignee?: { avatar?: string, label: string, value: string },","65","  removeTags?: Array<{ label: string, value: string }>,","86","    this.state = { initialTags: [], issues: [], loading: true, submitting: false, organization };","95","    ]).then(","96","      ([issues, tags]) => {","97","        if (this.mounted) {","98","          this.setState({","99","            initialTags: tags.map(tag => ({ label: tag, value: tag })),","100","            issues: issues.issues,","101","            loading: false,","102","            paging: issues.paging","103","          });","104","        }","105","      },","106","      () => {}","107","    );","147","  handleAssigneeSearch = (query \/*: string *\/) => {","148","    return searchAssignees(query, this.state.organization);","149","  };","151","  handleAssigneeSelect = (assignee \/*: { avatar?: string, label: string, value: string } *\/) => {","155","  handleTagsSearch = (query \/*: string *\/) => {","156","    return searchIssueTags({ organization: this.state.organization, q: query }).then(tags =>","157","      tags.map(tag => ({ label: tag, value: tag }))","158","    );","159","  };","160","","161","  handleTagsSelect = (field \/*: string *\/) => (","162","    options \/*: Array<{ label: string, value: string }> *\/","163","  ) => {","164","    this.setState({ [field]: options });","165","  };","166","","185","    \/* eslint-disable camelcase *\/","188","        add_tags: this.state.addTags && this.state.addTags.map(t => t.value).join(),","189","        assign: this.state.assignee && this.state.assignee.value,","191","        do_transition: this.state.transition,","192","        remove_tags: this.state.removeTags && this.state.removeTags.map(t => t.value).join(),","193","        sendNotifications: this.state.notifications,","194","        set_severity: this.state.severity,","195","        set_type: this.state.type","200","    \/* eslint-enable camelcase *\/","336","        options={options}","365","        options={options}","376","    const { initialTags } = this.state;","379","    if (initialTags == null || affected === 0) {","384","      <SearchSelect","385","        canCreate={allowCreate}","386","        defaultOptions={this.state.initialTags}","388","        minimumQueryLength={0}","390","        onMultiSelect={this.handleTagsSelect(field)}","391","        onSearch={this.handleTagsSearch}","393","        renderOption={this.renderAssigneeOption}","394","        resetOnBlur={false}"],"delete":["25","import Select, { Creatable } from '..\/..\/..\/components\/controls\/Select';","57","  tags?: Array<string>,","60","  addTags?: Array<string>,","61","  assignee?: string,","65","  removeTags?: Array<string>,","86","    this.state = { issues: [], loading: true, submitting: false, organization };","95","    ]).then(([issues, tags]) => {","96","      if (this.mounted) {","97","        this.setState({","98","          issues: issues.issues,","99","          loading: false,","100","          paging: issues.paging,","101","          tags","102","        });","103","      }","104","    });","144","  handleAssigneeSearch = (query \/*: string *\/) => searchAssignees(query, this.state.organization);","146","  handleAssigneeSelect = (assignee \/*: string *\/) => {","166","  handleMultiSelectFieldChange = (field \/*: string *\/) => (","167","    options \/*: Array<{ value: string }> *\/","168","  ) => {","169","    this.setState({ [field]: options.map(option => option.value) });","170","  };","171","","176","        assign: this.state.assignee,","177","        set_type: this.state.type,","178","        set_severity: this.state.severity,","179","        add_tags: this.state.addTags && this.state.addTags.join(),","180","        remove_tags: this.state.removeTags && this.state.removeTags.join(),","181","        do_transition: this.state.transition,","183","        sendNotifications: this.state.notifications","322","        options={options}","351","        options={options}","365","    if (this.state.tags == null || affected === 0) {","369","    const Component = allowCreate ? Creatable : Select;","370","","371","    const options = [...this.state.tags, ...(this.state[field] || [])].map(tag => ({","372","      label: tag,","373","      value: tag","374","    }));","375","","377","      <Component","378","        clearable={false}","381","        onChange={this.handleMultiSelectFieldChange(field)}","382","        options={options}","384","        searchable={true}"]}]}},"f6276b3b6fecce2b160ed8bdc62a3e87439249e4":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/ProjectActivityApp.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/components\/__tests__\/__snapshots__\/IssueCommentLine-test.js.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/events\/__tests__\/__snapshots__\/PreviewGraphTooltips-test.js.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/ComponentNavMeta.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/__tests__\/__snapshots__\/ProjectCardOverall-test.js.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/ProjectActivityAnalysis.js":"MODIFY","server\/sonar-web\/src\/main\/js\/helpers\/periods.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/background-tasks\/components\/TaskDay.tsx":"ADD","server\/sonar-web\/src\/main\/js\/app\/components\/LocalizationContainer.tsx":"ADD","server\/sonar-web\/src\/main\/js\/apps\/background-tasks\/components\/TaskDate.tsx":"ADD","server\/sonar-web\/src\/main\/js\/app\/utils\/exposeLibraries.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/events\/PreviewGraphTooltips.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/popups\/ChangelogPopup.js":"MODIFY","server\/sonar-web\/package.json":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/licenses\/LicenseRow.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/__tests__\/LeakPeriodLegend-test.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/GraphsTooltips.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/__tests__\/ProjectCardOverall-test.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/popups\/__tests__\/ChangelogPopup-test.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/__tests__\/utils-test.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/__tests__\/__snapshots__\/ProjectActivityDateInput-test.js.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/component-measures\/components\/LeakPeriodLegend.js":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/__tests__\/ComponentNavMeta-test.tsx":"ADD","server\/sonar-web\/src\/main\/js\/apps\/overview\/events\/Analysis.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/ProjectActivityAppContainer.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/utils.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/account\/projects\/ProjectCard.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/intl\/DateTimeFormatter.tsx":"ADD","server\/sonar-web\/src\/main\/js\/helpers\/testUtils.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/background-tasks\/types.ts":"ADD","server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/__tests__\/__snapshots__\/LeakPeriodLegend-test.js.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/licenses\/__tests__\/LicenseRow-test.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/__tests__\/__snapshots__\/utils-test.js.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/ProjectActivityAnalysesList.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/background-tasks\/components\/DateFilter.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/main\/enhance.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/ProjectCardOverall.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/intl\/TimeFormatter.tsx":"ADD","server\/sonar-web\/src\/main\/js\/helpers\/__tests__\/query-test.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/components\/IssueChangelog.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/components\/ProfileDate.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/helpers\/handlebars\/d.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/component-measures\/components\/MeasureContent.js":"MODIFY","server\/sonar-web\/src\/main\/js\/helpers\/__tests__\/dates-test.ts":"ADD","server\/sonar-web\/src\/main\/js\/helpers\/query.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/__tests__\/__snapshots__\/ProjectActivityAnalysesList-test.js.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/changelog\/Changelog.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/components\/__tests__\/IssueCommentLine-test.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/ApplicationLeakPeriodLegend.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/LeakPeriodLegend.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/__tests__\/ProjectActivityAnalysesList-test.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/utils.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/intl\/DateFormatter.tsx":"ADD","server\/sonar-web\/src\/main\/js\/helpers\/handlebars\/fromNow.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/components\/__tests__\/IssueChangelog-test.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/events\/Event.js":"MODIFY","sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/main\/CodeSmells.js":"MODIFY","server\/sonar-web\/src\/main\/js\/helpers\/handlebars\/dt.js":"MODIFY","server\/sonar-web\/src\/main\/js\/helpers\/l10n.ts":"ADD","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/CreationDateFacet.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/ProjectActivityDateInput.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/widgets\/barchart.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/background-tasks\/components\/Task.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/home\/EvolutionStagnant.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/ProjectCardLeak.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/events\/__tests__\/__snapshots__\/Event-test.js.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/popups\/__tests__\/__snapshots__\/ChangelogPopup-test.js.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/__tests__\/ProjectActivityDateInput-test.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/home\/EvolutionRules.tsx":"MODIFY","server\/sonar-web\/config\/webpack.config.js":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/intl\/DateTooltipFormatter.tsx":"ADD","server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/__tests__\/__snapshots__\/GraphsTooltips-test.js.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/component-measures\/components\/__tests__\/__snapshots__\/LeakPeriodLegend-test.js.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/components\/__tests__\/__snapshots__\/IssueChangelog-test.js.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/GraphsHistory.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/__tests__\/ProjectCardLeak-test.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/__tests__\/__snapshots__\/ProjectCardLeak-test.js.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/controls\/DateInput.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/component-measures\/components\/__tests__\/LeakPeriodLegend-test.js":"MODIFY","server\/sonar-web\/src\/main\/js\/helpers\/__tests__\/l10n-test.ts":"ADD","server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/ComponentNav.js":"MODIFY","\/dev\/null":"DELETE","server\/sonar-web\/src\/main\/js\/components\/issue\/components\/IssueCommentLine.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/OverviewApp.js":"MODIFY","server\/sonar-web\/src\/main\/js\/helpers\/dates.ts":"ADD","server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/__tests__\/__snapshots__\/ApplicationLeakPeriodLegend-test.js.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/events\/__tests__\/__snapshots__\/Analysis-test.js.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/changelog\/__tests__\/Changelog-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/intl\/TimeTooltipFormatter.tsx":"ADD","server\/sonar-web\/yarn.lock":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/account\/projects\/__tests__\/ProjectCard-test.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/ProjectActivityApp.js":[{"add":["90","            leakPeriodDate={new Date(props.project.leakPeriodDate)}"],"delete":["22","import moment from 'moment';","91","            leakPeriodDate={moment(props.project.leakPeriodDate).toDate()}"]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/components\/__tests__\/__snapshots__\/IssueCommentLine-test.js.snap":[{"add":["44","    <FormattedRelative","45","      updateInterval={10000}","46","      value=\"2017-03-01T09:36:01+0100\"","47","    \/>","143","    <FormattedRelative","144","      updateInterval={10000}","145","      value=\"2017-03-01T09:36:01+0100\"","146","    \/>","184","    <FormattedRelative","185","      updateInterval={10000}","186","      value=\"2017-03-01T09:36:01+0100\"","187","    \/>"],"delete":["44","    (","45","    a month ago","46","    )","142","    (","143","    a month ago","144","    )","182","    (","183","    a month ago","184","    )"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/events\/__tests__\/__snapshots__\/PreviewGraphTooltips-test.js.snap":[{"add":["19","      <DateFormatter","21","        long={true}"],"delete":["19","      <FormattedDate","21","        format=\"LL\""]}],"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/ComponentNavMeta.js":[{"add":["20","import DateTimeFormatter from '..\/..\/..\/..\/components\/intl\/DateTimeFormatter';","23","import Tooltip from '..\/..\/..\/..\/components\/controls\/Tooltip';","37","      <Tooltip","38","        key=\"isInProgress\"","39","        overlay={<div dangerouslySetInnerHTML={{ __html: tooltip }} \/>}","40","        mouseLeaveDelay={2}>","41","        <li>","42","          <i className=\"spinner\" style={{ marginTop: '-1px' }} \/>{' '}","43","          <span className=\"text-info\">{translate('background_task.status.IN_PROGRESS')}<\/span>","44","        <\/li>","45","      <\/Tooltip>","52","      <Tooltip","53","        key=\"isPending\"","54","        overlay={<div dangerouslySetInnerHTML={{ __html: tooltip }} \/>}","55","        mouseLeaveDelay={2}>","56","        <li>","57","          <PendingIcon \/> <span>{translate('background_task.status.PENDING')}<\/span>","58","        <\/li>","59","      <\/Tooltip>","66","      <Tooltip","67","        key=\"isFailed\"","68","        overlay={<div dangerouslySetInnerHTML={{ __html: tooltip }} \/>}","69","        mouseLeaveDelay={2}>","70","        <li>","71","          <span className=\"badge badge-danger\">","72","            {translate('background_task.status.FAILED')}","73","          <\/span>","74","        <\/li>","75","      <\/Tooltip>","81","        <DateTimeFormatter date={props.analysisDate} \/>"],"delete":["19","import moment from 'moment';","36","      <li key=\"isInProgress\" data-toggle=\"tooltip\" title={tooltip}>","37","        <i className=\"spinner\" style={{ marginTop: '-1px' }} \/>{' '}","38","        <span className=\"text-info\">{translate('background_task.status.IN_PROGRESS')}<\/span>","39","      <\/li>","46","      <li key=\"isPending\" data-toggle=\"tooltip\" title={tooltip}>","47","        <PendingIcon \/> <span>{translate('background_task.status.PENDING')}<\/span>","48","      <\/li>","55","      <li key=\"isFailed\" data-toggle=\"tooltip\" title={tooltip}>","56","        <span className=\"badge badge-danger\">","57","          {translate('background_task.status.FAILED')}","58","        <\/span>","59","      <\/li>","62","","66","        {moment(props.analysisDate).format('LLL')}"]}],"server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/__tests__\/__snapshots__\/ProjectCardOverall-test.js.snap":[{"add":["37","      <DateTimeFormatter","38","        date=\"2017-01-01\"","39","      \/>"],"delete":["37","      <span","38","        className=\"big-spacer-left\"","39","      >","40","        projects.last_analysis_on_x.March 1, 2017 9:36 AM","41","      <\/span>"]}],"server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/ProjectActivityAnalysis.js":[{"add":["25","import TimeTooltipFormatter from '..\/..\/..\/components\/intl\/TimeTooltipFormatter';","67","          <TimeTooltipFormatter className=\"text-middle\" date={date} placement=\"right\" \/>"],"delete":["25","import FormattedDate from '..\/..\/..\/components\/ui\/FormattedDate';","67","          <FormattedDate className=\"text-middle\" date={date} format=\"LT\" tooltipFormat=\"LTS\" \/>"]}],"server\/sonar-web\/src\/main\/js\/helpers\/periods.js":[{"add":["52","  return new Date(period.date);"],"delete":["19","import moment from 'moment';","53","  return moment(period.date).toDate();"]}],"server\/sonar-web\/src\/main\/js\/apps\/background-tasks\/components\/TaskDay.tsx":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/app\/components\/LocalizationContainer.tsx":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/background-tasks\/components\/TaskDate.tsx":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/app\/utils\/exposeLibraries.js":[{"add":[],"delete":["19","import moment from 'moment';","37","  window.moment = moment;"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/events\/PreviewGraphTooltips.js":[{"add":["21","import DateFormatter from '..\/..\/..\/components\/intl\/DateFormatter';","58","            <DateFormatter date={this.props.selectedDate} long={true} \/>"],"delete":["21","import FormattedDate from '..\/..\/..\/components\/ui\/FormattedDate';","58","            <FormattedDate date={this.props.selectedDate} format=\"LL\" \/>"]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/popups\/ChangelogPopup.js":[{"add":["25","import DateTimeFormatter from '..\/..\/..\/components\/intl\/DateTimeFormatter';","88","                  <DateTimeFormatter date={issue.creationDate} \/>","98","                    <DateTimeFormatter date={item.creationDate} \/>"],"delete":["21","import moment from 'moment';","88","                  {moment(issue.creationDate).format('LLL')}","98","                    {moment(item.creationDate).format('LLL')}"]}],"server\/sonar-web\/package.json":[{"add":["22","    \"intl-relativeformat\": \"2.0.0\",","32","    \"react-intl\": \"2.3.0\",","55","    \"@types\/react-intl\": \"2.3.1\","],"delete":["25","    \"moment\": \"2.18.1\","]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/licenses\/LicenseRow.js":[{"add":["21","import DateFormatter from '..\/..\/..\/components\/intl\/DateFormatter';","52","              <DateFormatter date={license.expiration} long={true} \/>"],"delete":["21","import moment from 'moment';","52","              {moment(license.expiration).format('LL')}"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/__tests__\/LeakPeriodLegend-test.js":[{"add":["39","    expect(","40","      shallow(<LeakPeriodLegend period={period} \/>).find('FormattedRelative')","41","    ).toMatchSnapshot();","50","    expect(","51","      shallow(<LeakPeriodLegend period={period} \/>).find('FormattedRelative')","52","    ).toMatchSnapshot();","60","    expect(shallow(<LeakPeriodLegend period={period} \/>).find('FormattedRelative')).toHaveLength(1);","68","    expect(shallow(<LeakPeriodLegend period={period} \/>).find('FormattedRelative')).toHaveLength(1);"],"delete":["39","    expect(shallow(<LeakPeriodLegend period={period} \/>).find('.note')).toMatchSnapshot();","48","    expect(shallow(<LeakPeriodLegend period={period} \/>).find('.note')).toMatchSnapshot();","56","    expect(shallow(<LeakPeriodLegend period={period} \/>).find('.note')).toMatchSnapshot();","64","    expect(shallow(<LeakPeriodLegend period={period} \/>).find('.note')).toMatchSnapshot();"]}],"server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/GraphsTooltips.js":[{"add":["22","import DateTimeFormatter from '..\/..\/..\/components\/intl\/DateTimeFormatter';","100","            <DateTimeFormatter date={this.props.selectedDate} \/>"],"delete":["22","import FormattedDate from '..\/..\/..\/components\/ui\/FormattedDate';","100","            <FormattedDate date={this.props.selectedDate} format=\"LL\" \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/__tests__\/ProjectCardOverall-test.js":[{"add":[],"delete":["37","jest.mock('moment', () => () => ({","38","  format: () => 'March 1, 2017 9:36 AM',","39","  fromNow: () => 'a month ago'","40","}));","41",""]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/popups\/__tests__\/ChangelogPopup-test.js":[{"add":[],"delete":["23","jest.mock('moment', () => () => ({ format: () => 'March 1, 2017 9:36 AM' }));","24",""]}],"server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/__tests__\/utils-test.js":[{"add":["21","import * as dates from '..\/..\/..\/helpers\/dates';","26","    date: new Date('2017-06-09T13:06:10.000Z'),","29","  { key: 'AVyM9n3cHjR_PLDzRciT', date: new Date('2017-06-09T11:12:27.000Z'), events: [] },","32","    date: new Date('2017-06-09T11:12:27.000Z'),","37","    date: new Date('2017-05-18T14:13:07.000Z'),","46","  { key: 'AVwaa1qkpbBde8B6UhYI', date: new Date('2017-05-18T07:17:32.000Z'), events: [] },","49","    date: new Date('2017-05-16T07:09:59.000Z'),","59","  { key: 'AVvtGF3IY6vCuQNDdwxI', date: new Date('2017-05-09T12:03:59.000Z'), events: [] }","66","      { date: new Date('2017-04-27T08:21:32.000Z'), value: '100' },","67","      { date: new Date('2017-04-30T23:06:24.000Z'), value: '100' }","73","      { date: new Date('2017-04-27T08:21:32.000Z'), value: '12' },","74","      { date: new Date('2017-04-30T23:06:24.000Z'), value: '50' }","86","  from: new Date('2017-04-27T08:21:32.000Z'),","109","  dates.startOfDay = jest.fn(date => {","110","    const startDay = new Date(date);","111","    startDay.setUTCHours(0, 0, 0, 0);","112","    return startDay;","113","  });","114","","140","        to: new Date('2017-06-09T11:12:27.000Z'),","141","        from: new Date('2017-05-18T14:13:07.000Z')","149","          { key: 'AVyMjlK1HjR_PLDzRbB9', date: new Date('2017-06-09T13:06:10.000Z'), events: [] },","150","          { key: 'AVyM9n3cHjR_PLDzRciT', date: new Date('2017-06-09T11:12:27.000Z'), events: [] },","151","          { key: 'AVyMjlK1HjR_PLDzRbB9', date: new Date('2017-06-09T11:12:27.000Z'), events: [] },","152","          { key: 'AVxZtCpH7841nF4RNEMI', date: new Date('2017-05-18T14:13:07.000Z'), events: [] }","207","        from: '2017-04-27T08:21:32.000Z',","218","      from: '2017-04-27T08:21:32+0000',","222","      from: '2017-04-27T08:21:32+0000',","232","      from: '2017-04-27T08:21:32+0000',","239","      from: '2017-04-27T08:21:32+0000',","255","            { x: new Date('2017-04-27T08:21:32.000Z'), y: 2 },","256","            { x: new Date('2017-04-30T23:06:24.000Z'), y: 2 }","272","            { x: new Date('2017-04-27T08:21:32.000Z'), y: 2 },","273","            { x: new Date('2017-04-30T23:06:24.000Z'), y: 2 }","283","          data: [{ x: new Date('2017-04-27T08:21:32.000Z'), y: 2 }]"],"delete":["25","    date: new Date('2017-06-09T13:06:10+0200'),","28","  { key: 'AVyM9n3cHjR_PLDzRciT', date: new Date('2017-06-09T11:12:27+0200'), events: [] },","31","    date: new Date('2017-06-09T11:12:27+0200'),","36","    date: new Date('2017-05-18T14:13:07+0200'),","45","  { key: 'AVwaa1qkpbBde8B6UhYI', date: new Date('2017-05-18T07:17:32+0200'), events: [] },","48","    date: new Date('2017-05-16T07:09:59+0200'),","58","  { key: 'AVvtGF3IY6vCuQNDdwxI', date: new Date('2017-05-09T12:03:59+0200'), events: [] }","65","      { date: new Date('2017-04-27T08:21:32+0200'), value: '100' },","66","      { date: new Date('2017-04-30T23:06:24+0200'), value: '100' }","72","      { date: new Date('2017-04-27T08:21:32+0200'), value: '12' },","73","      { date: new Date('2017-04-30T23:06:24+0200'), value: '50' }","85","  from: new Date('2017-04-27T08:21:32+0200'),","93","jest.mock('moment', () => date => ({","94","  startOf: () => {","95","    return {","96","      valueOf: () => `${date.getFullYear()}-${date.getMonth()}-${date.getDate()}`","97","    };","98","  },","99","  toDate: () => new Date(date),","100","  format: format => `Formated.${format}:${date.valueOf()}`","101","}));","102","","143","        to: new Date('2017-06-09T11:12:27+0200'),","144","        from: new Date('2017-05-18T14:13:07+0200')","152","          { key: 'AVyMjlK1HjR_PLDzRbB9', date: new Date('2017-06-09T13:06:10+0200'), events: [] },","153","          { key: 'AVyM9n3cHjR_PLDzRciT', date: new Date('2017-06-09T11:12:27+0200'), events: [] },","154","          { key: 'AVyMjlK1HjR_PLDzRbB9', date: new Date('2017-06-09T11:12:27+0200'), events: [] },","155","          { key: 'AVxZtCpH7841nF4RNEMI', date: new Date('2017-05-18T14:13:07+0200'), events: [] }","210","        from: '2017-04-27T08:21:32+0200',","221","      from: 'Formated.YYYY-MM-DDTHH:mm:ssZZ:1493274092000',","225","      from: 'Formated.YYYY-MM-DDTHH:mm:ssZZ:1493274092000',","235","      from: 'Formated.YYYY-MM-DDTHH:mm:ssZZ:1493274092000',","242","      from: 'Formated.YYYY-MM-DDTHH:mm:ssZZ:1493274092000',","258","            { x: new Date('2017-04-27T08:21:32+0200'), y: 2 },","259","            { x: new Date('2017-04-30T23:06:24+0200'), y: 2 }","275","            { x: new Date('2017-04-27T08:21:32+0200'), y: 2 },","276","            { x: new Date('2017-04-30T23:06:24+0200'), y: 2 }","286","          data: [{ x: new Date('2017-04-27T08:21:32+0200'), y: 2 }]"]}],"server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/__tests__\/__snapshots__\/ProjectActivityDateInput-test.js.snap":[{"add":["10","    value=\"10\/27\/2016\"","19","    value=\"12\/27\/2016\""],"delete":["10","    value=\"2016-10-27\"","19","    value=\"2016-12-27\""]}],"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/components\/LeakPeriodLegend.js":[{"add":["22","import { FormattedRelative } from 'react-intl';","23","import DateFormatter from '..\/..\/..\/components\/intl\/DateFormatter';","56","  const tooltip = (","57","    <div>","58","      <FormattedRelative value={date} \/>","59","      {', '}","60","      <DateFormatter date={date} long={true} \/>","61","    <\/div>","62","  );"],"delete":["22","import moment from 'moment';","55","  const fromNow = moment(date).fromNow();","56","  const tooltip = fromNow + ', ' + moment(date).format('LL');"]}],"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/__tests__\/ComponentNavMeta-test.tsx":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/events\/Analysis.js":[{"add":["23","import DateTooltipFormatter from '..\/..\/..\/components\/intl\/DateTooltipFormatter';","48","          <DateTooltipFormatter date={analysis.date} placement=\"right\" \/>"],"delete":["23","import FormattedDate from '..\/..\/..\/components\/ui\/FormattedDate';","48","          <FormattedDate date={analysis.date} format=\"LL\" \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/ProjectActivityAppContainer.js":[{"add":["174","        analyses: analyses.map(analysis => ({ ...analysis, date: new Date(analysis.date) })),","188","            date: new Date(analysis.date),"],"delete":["21","import moment from 'moment';","175","        analyses: analyses.map(analysis => ({ ...analysis, date: moment(analysis.date).toDate() })),","189","            date: moment(analysis.date).toDate(),"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/utils.ts":[{"add":["20","import { differenceInYears, isValidDate } from '..\/..\/helpers\/dates';","67","export function isStagnant(profile: Profile): boolean {","68","  if (profile.userUpdatedAt) {","69","    const updateDate = new Date(profile.userUpdatedAt);","70","    if (isValidDate(updateDate)) {","71","      return differenceInYears(new Date(), updateDate) >= 1;","72","    }","73","  }","74","  return false;"],"delete":["20","import * as moment from 'moment';","67","export function isStagnant(profile: Profile) {","68","  return moment().diff(moment(profile.userUpdatedAt), 'years') >= 1;"]}],"server\/sonar-web\/src\/main\/js\/apps\/account\/projects\/ProjectCard.tsx":[{"add":["21","import { FormattedRelative } from 'react-intl';","24","import DateTimeFormatter from '..\/..\/..\/components\/intl\/DateTimeFormatter';","26","import Tooltip from '..\/..\/..\/components\/controls\/Tooltip';","33","export default function ProjectCard({ project }: Props) {","41","          ? <Tooltip","42","              overlay={<DateTimeFormatter date={project.lastAnalysisDate} \/>}","43","              placement=\"right\">","44","              <div className=\"account-project-analysis\">","45","                <FormattedRelative value={project.lastAnalysisDate}>","46","                  {(relativeDate: string) =>","47","                    <span>","48","                      {translateWithParameters('my_account.projects.analyzed_x', relativeDate)}","49","                    <\/span>}","50","                <\/FormattedRelative>","51","              <\/div>","52","            <\/Tooltip>"],"delete":["20","import * as moment from 'moment';","31","export default function ProjectCard(props: Props) {","32","  const { project } = props;","34","  const analysisMoment = isAnalyzed && moment(project.lastAnalysisDate);","41","          ? <div","42","              className=\"account-project-analysis\"","43","              title={analysisMoment ? analysisMoment.format('LLL') : undefined}>","44","              {translateWithParameters(","45","                'my_account.projects.analyzed_x',","46","                analysisMoment ? analysisMoment.fromNow() : undefined","47","              )}","48","            <\/div>"]}],"server\/sonar-web\/src\/main\/js\/components\/intl\/DateTimeFormatter.tsx":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/helpers\/testUtils.ts":[{"add":["19","import { shallow, ShallowWrapper } from 'enzyme';","20","import { IntlProvider } from 'react-intl';","72","","73","const intlProvider = new IntlProvider({ locale: 'en' }, {});","74","const { intl } = intlProvider.getChildContext();","75","export function shallowWithIntl(node, options = {}) {","76","  return shallow(node, { ...options, context: { intl, ...options.context } });","77","}"],"delete":["19","import { ShallowWrapper } from 'enzyme';"]}],"server\/sonar-web\/src\/main\/js\/apps\/background-tasks\/types.ts":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/__tests__\/__snapshots__\/LeakPeriodLegend-test.js.snap":[{"add":["11","<FormattedRelative","12","  updateInterval={10000}","13","  value={2013-09-21T22:00:00.000Z}","14","\/>","18","<FormattedRelative","19","  updateInterval={10000}","20","  value={2013-09-21T22:00:00.000Z}","21","\/>"],"delete":["11","<span","12","  className=\"note\"","13",">","14","  overview.last_analysis_x.4 years ago","15","<\/span>","16","`;","17","","18","exports[`check note previous_analysis 1`] = `","19","<span","20","  className=\"note\"","21",">","22","  overview.started_x.4 years ago","23","<\/span>","24","`;","25","","26","exports[`check note previous_version 1`] = `","27","<span","28","  className=\"note\"","29",">","30","  overview.started_x.4 years ago","31","<\/span>","35","<span","36","  className=\"note\"","37",">","38","  overview.started_x.4 years ago","39","<\/span>"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/licenses\/__tests__\/LicenseRow-test.js":[{"add":["75","  expect(licenseExpiration.find('DateFormatter')).toHaveLength(1);"],"delete":["75","  expect(licenseExpiration.text()).toContain('2015');"]}],"server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/__tests__\/__snapshots__\/utils-test.js.snap":[{"add":["6","      \"x\": 2017-04-27T08:21:32.000Z,","10","      \"x\": 2017-04-30T23:06:24.000Z,","25","        \"x\": 2017-04-27T08:21:32.000Z,","29","        \"x\": 2017-04-30T23:06:24.000Z,","40","        \"x\": 2017-04-27T08:21:32.000Z,","44","        \"x\": 2017-04-30T23:06:24.000Z,","59","      \"1495065600000\": Array [","61","          \"date\": 2017-05-18T14:13:07.000Z,","78","      \"1494892800000\": Array [","80","          \"date\": 2017-05-16T07:09:59.000Z,","107","      \"1496966400000\": Array [","109","          \"date\": 2017-06-09T11:12:27.000Z,","120","      \"1495065600000\": Array [","122","          \"date\": 2017-05-18T14:13:07.000Z,","133","      \"1496966400000\": Array [","135","          \"date\": 2017-06-09T11:12:27.000Z,","162","      \"1496966400000\": Array [","164","          \"date\": 2017-06-09T13:06:10.000Z,","175","          \"date\": 2017-06-09T11:12:27.000Z,","186","      \"1495065600000\": Array [","188","          \"date\": 2017-05-18T14:13:07.000Z,","199","          \"date\": 2017-05-18T07:17:32.000Z,","204","      \"1496966400000\": Array [","206","          \"date\": 2017-06-09T11:12:27.000Z,","223","      \"1494288000000\": Array [","225","          \"date\": 2017-05-09T12:03:59.000Z,","226","          \"events\": Array [],","227","          \"key\": \"AVvtGF3IY6vCuQNDdwxI\",","228","        },","229","      ],","230","      \"1494892800000\": Array [","231","        Object {","232","          \"date\": 2017-05-16T07:09:59.000Z,","259","      \"1495065600000\": Array [","261","          \"date\": 2017-05-18T14:13:07.000Z,","266","      \"1496966400000\": Array [","268","          \"date\": 2017-06-09T13:06:10.000Z,","273","          \"date\": 2017-06-09T11:12:27.000Z,","278","          \"date\": 2017-06-09T11:12:27.000Z,"],"delete":["6","      \"x\": 2017-04-27T06:21:32.000Z,","10","      \"x\": 2017-04-30T21:06:24.000Z,","25","        \"x\": 2017-04-27T06:21:32.000Z,","29","        \"x\": 2017-04-30T21:06:24.000Z,","40","        \"x\": 2017-04-27T06:21:32.000Z,","44","        \"x\": 2017-04-30T21:06:24.000Z,","59","      \"2017-4-18\": Array [","61","          \"date\": 2017-05-18T12:13:07.000Z,","78","      \"2017-4-16\": Array [","80","          \"date\": 2017-05-16T05:09:59.000Z,","107","      \"2017-5-9\": Array [","109","          \"date\": 2017-06-09T09:12:27.000Z,","120","      \"2017-4-18\": Array [","122","          \"date\": 2017-05-18T12:13:07.000Z,","133","      \"2017-5-9\": Array [","135","          \"date\": 2017-06-09T09:12:27.000Z,","162","      \"2017-5-9\": Array [","164","          \"date\": 2017-06-09T11:06:10.000Z,","175","          \"date\": 2017-06-09T09:12:27.000Z,","186","      \"2017-4-18\": Array [","188","          \"date\": 2017-05-18T12:13:07.000Z,","199","          \"date\": 2017-05-18T05:17:32.000Z,","204","      \"2017-5-9\": Array [","206","          \"date\": 2017-06-09T09:12:27.000Z,","223","      \"2017-4-16\": Array [","225","          \"date\": 2017-05-16T05:09:59.000Z,","241","      \"2017-4-9\": Array [","242","        Object {","243","          \"date\": 2017-05-09T10:03:59.000Z,","244","          \"events\": Array [],","245","          \"key\": \"AVvtGF3IY6vCuQNDdwxI\",","246","        },","247","      ],","259","      \"2017-4-18\": Array [","261","          \"date\": 2017-05-18T12:13:07.000Z,","266","      \"2017-5-9\": Array [","268","          \"date\": 2017-06-09T11:06:10.000Z,","273","          \"date\": 2017-06-09T09:12:27.000Z,","278","          \"date\": 2017-06-09T09:12:27.000Z,"]}],"server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/ProjectActivityAnalysesList.js":[{"add":["24","import DateFormatter from '..\/..\/..\/components\/intl\/DateFormatter';","192","                  <li key={day} className=\"project-activity-day\">","194","                      <DateFormatter date={Number(day)} long={true} \/>"],"delete":["22","import moment from 'moment';","25","import FormattedDate from '..\/..\/..\/components\/ui\/FormattedDate';","193","                  <li","194","                    key={day}","195","                    className=\"project-activity-day\"","196","                    data-day={moment(Number(day)).format('YYYY-MM-DD')}>","198","                      <FormattedDate date={Number(day)} format=\"LL\" \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/background-tasks\/components\/DateFilter.js":[{"add":["21","import { toShortNotSoISOString, isValidDate } from '..\/..\/..\/helpers\/dates';","47","    const minDate = new Date(this.refs.minDate.value);","48","    const maxDate = new Date(this.refs.maxDate.value);","50","    if (isValidDate(minDate)) {","51","      date.minSubmittedAt = toShortNotSoISOString(minDate);","54","    if (isValidDate(maxDate)) {","55","      date.maxExecutedAt = toShortNotSoISOString(maxDate);"],"delete":["19","\/\/ @flow","21","import moment from 'moment';","23","import { DATE_FORMAT } from '..\/constants';","49","    const minDateRaw = this.refs.minDate.value;","50","    const maxDateRaw = this.refs.maxDate.value;","51","    const minDate = moment(minDateRaw, DATE_FORMAT, true);","52","    const maxDate = moment(maxDateRaw, DATE_FORMAT, true);","54","    if (minDate.isValid()) {","55","      date.minSubmittedAt = minDate.format(DATE_FORMAT);","58","    if (maxDate.isValid()) {","59","      date.maxExecutedAt = maxDate.format(DATE_FORMAT);"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/main\/enhance.js":[{"add":["23","import DateTimeFormatter from '..\/..\/..\/components\/intl\/DateTimeFormatter';","159","","160","      const tooltip = (","161","        <DateTimeFormatter date={component.analysisDate}>","162","          {formattedAnalysisDate =>","163","            <span>","164","              {translateWithParameters('widget.as_calculated_on_x', formattedAnalysisDate)}","165","            <\/span>}","166","        <\/DateTimeFormatter>","167","      );","168",""],"delete":["21","import moment from 'moment';","159","      const formattedAnalysisDate = moment(component.analysisDate).format('LLL');","160","      const tooltip = translateWithParameters('widget.as_calculated_on_x', formattedAnalysisDate);"]}],"server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/ProjectCardOverall.js":[{"add":["23","import DateTimeFormatter from '..\/..\/..\/components\/intl\/DateTimeFormatter';","89","            <DateTimeFormatter date={project.analysisDate}>","90","              {formattedDate =>","91","                <span className=\"big-spacer-left\">","92","                  {translateWithParameters('projects.last_analysis_on_x', formattedDate)}","93","                <\/span>}","94","            <\/DateTimeFormatter>"],"delete":["22","import moment from 'moment';","89","            <span className=\"big-spacer-left\">","90","              {translateWithParameters(","91","                'projects.last_analysis_on_x',","92","                moment(project.analysisDate).format('LLL')","93","              )}","94","            <\/span>"]}],"server\/sonar-web\/src\/main\/js\/components\/intl\/TimeFormatter.tsx":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/helpers\/__tests__\/query-test.js":[{"add":["80","  const date = new Date('2016-06-20T13:09:48.256Z');"],"delete":["19","import moment from 'moment';","81","  const date = moment.utc('2016-06-20T13:09:48.256Z');"]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/components\/IssueChangelog.js":[{"add":["21","import { FormattedRelative } from 'react-intl';","24","import DateTimeFormatter from '..\/..\/..\/components\/intl\/DateTimeFormatter';","25","import Tooltip from '..\/..\/..\/components\/controls\/Tooltip';","57","        <Tooltip","58","          overlay={<DateTimeFormatter date={this.props.creationDate} \/>}","59","          placement=\"left\"","60","          mouseEnterDelay={0.5}>","61","          <button","62","            className=\"button-link issue-action issue-action-with-options js-issue-show-changelog\"","63","            onClick={this.handleClick}>","64","            <span className=\"issue-meta-label\">","65","              <FormattedRelative value={this.props.creationDate} \/>","66","            <\/span>","67","            <i className=\"icon-dropdown little-spacer-left\" \/>","68","          <\/button>","69","        <\/Tooltip>"],"delete":["21","import moment from 'moment';","49","    const momentCreationDate = moment(this.props.creationDate);","56","        <button","57","          className=\"button-link issue-action issue-action-with-options js-issue-show-changelog\"","58","          title={momentCreationDate.format('LLL')}","59","          onClick={this.handleClick}>","60","          <span className=\"issue-meta-label\">","61","            {momentCreationDate.fromNow()}","62","          <\/span>","63","          <i className=\"icon-dropdown little-spacer-left\" \/>","64","        <\/button>"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/components\/ProfileDate.tsx":[{"add":["20","import { FormattedRelative } from 'react-intl';","21","import DateTimeFormatter from '..\/..\/..\/components\/intl\/DateTimeFormatter';","22","import Tooltip from '..\/..\/..\/components\/controls\/Tooltip';","31","    ? <Tooltip overlay={<DateTimeFormatter date={date} \/>}>","32","        <span>","33","          <FormattedRelative value={date} \/>","34","        <\/span>","35","      <\/Tooltip>"],"delete":["20","import * as moment from 'moment';","29","    ? <span title={moment(date).format('LLL')} data-toggle=\"tooltip\">","30","        {moment(date).fromNow()}","31","      <\/span>"]}],"server\/sonar-web\/src\/main\/js\/helpers\/handlebars\/d.js":[{"add":["20","  return new Intl.DateTimeFormat(localStorage.getItem('l10n.locale') || 'en', {","21","    year: 'numeric',","22","    month: 'long',","23","    day: 'numeric'","24","  }).format(new Date(date));"],"delete":["19","const moment = require('moment');","20","","22","  return moment(date).format('LL');"]}],"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/components\/MeasureContent.js":[{"add":["218","      isDiffMetric(this.props.metric.key) && leakPeriod != null ? new Date(leakPeriod.date) : null;","224","          const scmDate = new Date(line.scmDate);"],"delete":["22","import moment from 'moment';","219","      isDiffMetric(this.props.metric.key) && leakPeriod != null","220","        ? moment(leakPeriod.date).toDate()","221","        : null;","227","          const scmDate = moment(line.scmDate).toDate();"]}],"server\/sonar-web\/src\/main\/js\/helpers\/__tests__\/dates-test.ts":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/helpers\/query.js":[{"add":["21","import { isValidDate, toNotSoISOString } from '.\/dates';","67","  if (value) {","68","    const date = new Date(value);","69","    if (isValidDate(date)) {","70","      return date;","71","    }","89","    return toNotSoISOString(value);"],"delete":["21","import moment from 'moment';","67","  const date = moment(value);","68","  if (value && date) {","69","    return date.toDate();","87","    return moment(value).format('YYYY-MM-DDTHH:mm:ssZZ');"]}],"server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/__tests__\/__snapshots__\/ProjectActivityAnalysesList-test.js.snap":[{"add":["31","          <DateFormatter","32","            date=\"1477267200000\"","33","            long={true}","100","          <DateFormatter","101","            date=\"1477526400000\"","102","            long={true}","169","          <DateFormatter","170","            date=\"1477526400000\"","171","            long={true}","244","          <DateFormatter","245","            date=\"1477440000000\"","246","            long={true}","290","          <DateFormatter","291","            date=\"1477267200000\"","292","            long={true}"],"delete":["27","        data-day=\"Formated.YYYY-MM-DD:2016-9-24\"","32","          <FormattedDate","33","            date=\"2016-9-24\"","34","            format=\"LL\"","97","        data-day=\"Formated.YYYY-MM-DD:2016-9-27\"","102","          <FormattedDate","103","            date=\"2016-9-27\"","104","            format=\"LL\"","167","        data-day=\"Formated.YYYY-MM-DD:2016-9-27\"","172","          <FormattedDate","173","            date=\"2016-9-27\"","174","            format=\"LL\"","243","        data-day=\"Formated.YYYY-MM-DD:2016-9-26\"","248","          <FormattedDate","249","            date=\"2016-9-26\"","250","            format=\"LL\"","290","        data-day=\"Formated.YYYY-MM-DD:2016-9-24\"","295","          <FormattedDate","296","            date=\"2016-9-24\"","297","            format=\"LL\""]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/changelog\/Changelog.tsx":[{"add":["22","import DateTimeFormatter from '..\/..\/..\/components\/intl\/DateTimeFormatter';","25","import { differenceInSeconds } from '..\/..\/..\/helpers\/dates';","38","    const isSameDate =","39","      prev != null && differenceInSeconds(new Date(prev.date), new Date(event.date)) < 10;","55","          {!isBulkChange && <DateTimeFormatter date={event.date} \/>}"],"delete":["21","import * as moment from 'moment';","37","    const isSameDate = prev != null && moment(prev.date).diff(event.date, 'seconds') < 10;","53","          {!isBulkChange && moment(event.date).format('LLL')}"]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/components\/__tests__\/IssueCommentLine-test.js":[{"add":[],"delete":["33","jest.mock('moment', () => () => ({ fromNow: () => 'a month ago' }));","34",""]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/ApplicationLeakPeriodLegend.js":[{"add":["22","import DateTooltipFormatter from '..\/..\/..\/components\/intl\/DateTooltipFormatter';","81","              {leak.projectName}: <DateTooltipFormatter date={leak.date} \/>"],"delete":["22","import FormattedDate from '..\/..\/..\/components\/ui\/FormattedDate';","81","              {leak.projectName}: <FormattedDate date={leak.date} format=\"LL\" \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/LeakPeriodLegend.js":[{"add":["21","import { FormattedRelative } from 'react-intl';","22","import DateFormatter from '..\/..\/..\/components\/intl\/DateFormatter';","85","  const tooltip = (","86","    <DateFormatter date={leakPeriodDate} long={true}>","87","      {formattedLeakPeriodDate =>","88","        <span>","89","          {translateWithParameters(","90","            ['date'].includes(period.mode)","91","              ? 'overview.last_analysis_on_x'","92","              : 'overview.started_on_x',","93","            formattedLeakPeriodDate","94","          )}","95","        <\/span>}","96","    <\/DateFormatter>","97","  );","103","        <FormattedRelative value={leakPeriodDate}>","104","          {fromNow =>","105","            <span className=\"note\">","106","              {translateWithParameters(","107","                ['date'].includes(period.mode) ? 'overview.last_analysis_x' : 'overview.started_x',","108","                fromNow","109","              )}","110","            <\/span>}","111","        <\/FormattedRelative>"],"delete":["21","import moment from 'moment';","84","  const momentDate = moment(leakPeriodDate);","85","  const fromNow = momentDate.fromNow();","86","  const note = ['date'].includes(period.mode)","87","    ? translateWithParameters('overview.last_analysis_x', fromNow)","88","    : translateWithParameters('overview.started_x', fromNow);","89","  const tooltip = ['date'].includes(period.mode)","90","    ? translateWithParameters('overview.last_analysis_on_x', momentDate.format('LL'))","91","    : translateWithParameters('overview.started_on_x', momentDate.format('LL'));","92","","98","        <span className=\"note\">","99","          {note}","100","        <\/span>"]}],"server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/__tests__\/ProjectActivityAnalysesList-test.js":[{"add":["22","import * as dates from '..\/..\/..\/..\/helpers\/dates';","88","dates.startOfDay = jest.fn(date => {","89","  const startDay = new Date(date);","90","  startDay.setUTCHours(0, 0, 0, 0);","91","  return startDay;","92","});","93",""],"delete":["85","jest.mock('moment', () => date => ({","86","  startOf: () => {","87","    return {","88","      valueOf: () => `${date.getFullYear()}-${date.getMonth()}-${date.getDate()}`","89","    };","90","  },","91","  toDate: () => new Date(date),","92","  format: format => `Formated.${format}:${date}`","93","}));","94",""]}],"server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/utils.js":[{"add":["30","import { startOfDay } from '..\/..\/helpers\/dates';","159","    const day = startOfDay(new Date(analysis.date)).getTime().toString();"],"delete":["20","import moment from 'moment';","159","    const day = moment(analysis.date).startOf('day').valueOf().toString();"]}],"server\/sonar-web\/src\/main\/js\/components\/intl\/DateFormatter.tsx":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/helpers\/handlebars\/fromNow.js":[{"add":["19","const IntlRelativeFormat = require('intl-relativeformat');","22","  return new IntlRelativeFormat(localStorage.getItem('l10n.locale') || 'en').format(date);"],"delete":["19","const moment = require('moment');","22","  return moment(date).fromNow();"]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/components\/__tests__\/IssueChangelog-test.js":[{"add":[],"delete":["30","jest.mock('moment', () => () => ({","31","  format: () => 'March 1, 2017 9:36 AM',","32","  fromNow: () => 'a month ago'","33","}));","34",""]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/events\/Event.js":[{"add":["23","\/*:: import type { Event as EventType } from '..\/..\/projectActivity\/types'; *\/","37","    <span className=\"overview-analysis-event\">","39","      {event.description","40","        ? <Tooltip overlay={event.description} placement=\"left\" mouseEnterDelay={0.5}>","41","            <strong>","42","              {event.name}","43","            <\/strong>","44","          <\/Tooltip>","45","        : <strong>","46","            {event.name}","47","          <\/strong>}","48","    <\/span>"],"delete":["22","\/*:: import type { Event as EventType } from '..\/..\/projectActivity\/types'; *\/","37","    <div className=\"overview-analysis-event\">","39","      <Tooltip overlay={event.description} placement=\"left\">","40","        <strong>","41","          {event.name}","42","        <\/strong>","43","      <\/Tooltip>","44","    <\/div>"]}],"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["1537","quality_profiles.x_updated_on_y={0}, updated on {1}"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/main\/CodeSmells.js":[{"add":["21","import { FormattedRelative } from 'react-intl';","23","import DateTimeFormatter from '..\/..\/..\/components\/intl\/DateTimeFormatter';","46","    const tooltip = (","47","      <DateTimeFormatter date={component.analysisDate}>","48","        {formattedAnalysisDate =>","49","          <span>","50","            {translateWithParameters('widget.as_calculated_on_x', formattedAnalysisDate)}","51","          <\/span>}","52","      <\/DateTimeFormatter>","53","    );","64","    if (!this.props.historyStartDate) {","65","      return null;","66","    }","68","      <FormattedRelative value={this.props.historyStartDate}>","69","        {fromNow =>","70","          <span className=\"overview-domain-timeline-date\">","71","            {translateWithParameters('overview.started_x', fromNow)}","72","          <\/span>}","73","      <\/FormattedRelative>"],"delete":["19","import moment from 'moment';","45","    const formattedAnalysisDate = moment(component.analysisDate).format('LLL');","46","    const tooltip = translateWithParameters('widget.as_calculated_on_x', formattedAnalysisDate);","47","","58","    const momentDate = moment(this.props.historyStartDate);","59","    const fromNow = momentDate.fromNow();","61","      <span className=\"overview-domain-timeline-date\">","62","        {translateWithParameters('overview.started_x', fromNow)}","63","      <\/span>"]}],"server\/sonar-web\/src\/main\/js\/helpers\/handlebars\/dt.js":[{"add":["20","  return new Intl.DateTimeFormat(localStorage.getItem('l10n.locale') || 'en', {","21","    year: 'numeric',","22","    month: 'long',","23","    day: 'numeric',","24","    hour: 'numeric',","25","    minute: 'numeric'","26","  }).format(new Date(date));"],"delete":["19","const moment = require('moment');","20","","22","  return moment(date).format('LLL');"]}],"server\/sonar-web\/src\/main\/js\/helpers\/l10n.ts":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/CreationDateFacet.js":[{"add":["22","import { FormattedRelative, intlShape } from 'react-intl';","23","import { formatterOption, longFormatterOption } from '..\/..\/..\/components\/intl\/DateFormatter';","24","import DateTimeFormatter from '..\/..\/..\/components\/intl\/DateTimeFormatter';","30","import { isSameDay, toShortNotSoISOString } from '..\/..\/..\/helpers\/dates';","58","  static contextTypes = {","59","    intl: intlShape","60","  };","61","","91","    { createdAfter, createdBefore } \/*: {","92","    createdAfter: Date,","93","    createdBefore?: Date","97","      createdAfter: toShortNotSoISOString(createdAfter),","98","      createdBefore: createdBefore && toShortNotSoISOString(createdBefore)","102","  handlePeriodChange = (property \/*: string *\/, value \/*: string *\/) => {","107","      [property]: toShortNotSoISOString(new Date(value))","111","  handlePeriodChangeBefore = (value \/*: string *\/) =>","112","    this.handlePeriodChange('createdBefore', value);","114","  handlePeriodChangeAfter = (value \/*: string *\/) => this.handlePeriodChange('createdAfter', value);","115","","116","  handlePeriodClick = (period \/*: string *\/) => this.resetTo({ createdInLast: period });","117","","118","  handleLeakPeriodClick = () => this.resetTo({ sinceLeakPeriod: true });","133","    const { formatDate } = this.context.intl;","134","    const beforeDate = createdBefore ? createdBefore : undefined;","135","    const data = periods.map((start, index) => {","136","      const startDate = new Date(start);","137","      let nextStartDate = index < periods.length - 1 ? periods[index + 1] : beforeDate;","138","      let endDate;","139","      if (nextStartDate) {","140","        nextStartDate = new Date(nextStartDate);","141","        endDate = new Date(nextStartDate);","142","        endDate.setDate(endDate.getDate() - 1);","143","      }","146","        formatMeasure(stats[start], 'SHORT_INT') +","147","        '<br\/>' +","148","        formatDate(startDate, longFormatterOption);","149","      if (endDate && !isSameDay(endDate, startDate)) {","150","        tooltip += ' \u2013 ' + formatDate(endDate, longFormatterOption);","154","        createdAfter: startDate,","155","        createdBefore: nextStartDate,","158","        y: stats[start]","185","        <DateTimeFormatter date={this.props.createdAt} \/>","188","          <FormattedRelative value={this.props.createdAt} \/>","196","    const { formatDate } = this.context.intl;","201","          onChange={this.handlePeriodChangeAfter}","203","          value={createdAfter ? formatDate(createdAfter, formatterOption) : undefined}","207","          onChange={this.handlePeriodChangeBefore}","209","          value={createdBefore ? formatDate(createdBefore, formatterOption) : undefined}","215","  renderPredefinedPeriods() {","264","          {this.renderPredefinedPeriods()}"],"delete":["21","import moment from 'moment';","48","const DATE_FORMAT = 'YYYY-MM-DDTHH:mm:ssZZ';","49","","86","    {","87","      createdAfter,","88","      createdBefore","89","    } \/*: {","90","    createdAfter: Object,","91","    createdBefore?: Object","95","      createdAfter: createdAfter.format(DATE_FORMAT),","96","      createdBefore: createdBefore && createdBefore.format(DATE_FORMAT)","100","  handlePeriodChange = (property \/*: string *\/) => (value \/*: string *\/) => {","105","      [property]: value","109","  handlePeriodClick = (period \/*: string *\/) => {","110","    this.resetTo({ createdInLast: period });","111","  };","113","  handleLeakPeriodClick = () => {","114","    this.resetTo({ sinceLeakPeriod: true });","115","  };","130","    const data = periods.map((startDate, index) => {","131","      const startMoment = moment(startDate);","132","      const nextStartMoment =","133","        index < periods.length - 1","134","          ? moment(periods[index + 1])","135","          : createdBefore ? moment(createdBefore) : undefined;","136","      const endMoment = nextStartMoment && nextStartMoment.clone().subtract(1, 'days');","139","        formatMeasure(stats[startDate], 'SHORT_INT') + '<br>' + startMoment.format('LL');","140","","141","      if (endMoment) {","142","        const isSameDay = endMoment.diff(startMoment, 'days') <= 1;","143","        if (!isSameDay) {","144","          tooltip += ' \u2013 ' + endMoment.format('LL');","145","        }","149","        createdAfter: startMoment,","150","        createdBefore: nextStartMoment,","151","        startMoment,","154","        y: stats[startDate]","179","    const m = moment(this.props.createdAt);","182","        {m.format('LLL')}","185","          ({m.fromNow()})","193","","198","          onChange={this.handlePeriodChange('createdAfter')}","200","          value={createdAfter ? moment(createdAfter).format('YYYY-MM-DD') : undefined}","204","          onChange={this.handlePeriodChange('createdBefore')}","206","          value={createdBefore ? moment(createdBefore).format('YYYY-MM-DD') : undefined}","212","  renderPrefefinedPeriods() {","261","          {this.renderPrefefinedPeriods()}"]}],"server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/ProjectActivityDateInput.js":[{"add":["21","import { intlShape } from 'react-intl';","23","import { formatterOption } from '..\/..\/..\/components\/intl\/DateFormatter';","39","  static contextTypes = {","40","    intl: intlShape","41","  };","42","","49","  formatDate = (date \/*: ?Date *\/) =>","50","    date ? this.context.intl.formatDate(date, formatterOption) : undefined;"],"delete":["21","import moment from 'moment';","44","  formatDate = (date \/*: ?Date *\/) => (date ? moment(date).format('YYYY-MM-DD') : null);"]}],"server\/sonar-web\/src\/main\/js\/components\/widgets\/barchart.js":[{"add":["23","import { isSameDay, toNotSoISOString } from '..\/..\/helpers\/dates';","53","      endDate: options.endDate ? new Date(options.endDate) : null","93","        .attr('data-period-start', d => toNotSoISOString(new Date(d.val)))","95","          const ending = i < data.length - 1 ? new Date(data[i + 1].val) : options.endDate;","97","            return toNotSoISOString(ending);","103","          const beginning = new Date(d.val);","104","          let ending = options.endDate;","105","          if (i < data.length - 1) {","106","            ending = new Date(data[i + 1].val);","107","            ending.setDate(ending.getDate() - 1);","108","          }","114","              (isSameDay(ending, beginning) ? '' : ' \u2013 ' + ending.format('LL'))"],"delete":["20","import moment from 'moment';","29","const DATE_FORMAT = 'YYYY-MM-DDTHH:mm:ssZZ';","30","","55","      endDate: options.endDate ? moment(options.endDate) : null","95","        .attr('data-period-start', d => moment(d.val).format(DATE_FORMAT))","97","          const ending = i < data.length - 1 ? moment(data[i + 1].val) : options.endDate;","99","            return ending.format(DATE_FORMAT);","105","          const beginning = moment(d.val);","106","          const ending =","107","            i < data.length - 1 ? moment(data[i + 1].val).subtract(1, 'days') : options.endDate;","109","            const isSameDay = ending.diff(beginning, 'days') <= 1;","114","              (isSameDay ? '' : ' \u2013 ' + ending.format('LL'))"]}],"server\/sonar-web\/src\/main\/js\/apps\/background-tasks\/components\/Task.js":[{"add":["50","        <TaskDate date={task.submittedAt} baseDate={task.submittedAt} \/>","51","        <TaskDate date={task.startedAt} baseDate={task.submittedAt} \/>","52","        <TaskDate date={task.executedAt} baseDate={task.submittedAt} \/>"],"delete":["50","        <TaskDate date={task.submittedAt} baseDate={task.submittedAt} format=\"LTS\" \/>","51","        <TaskDate date={task.startedAt} baseDate={task.submittedAt} format=\"LTS\" \/>","52","        <TaskDate date={task.executedAt} baseDate={task.submittedAt} format=\"LTS\" \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/home\/EvolutionStagnant.tsx":[{"add":["20","import DateFormatter from '..\/..\/..\/components\/intl\/DateFormatter';","22","import { translate, translateWithParameters } from '..\/..\/..\/helpers\/l10n';","31","export default function EvolutionStagnant(props: Props) {","62","            <DateFormatter date={profile.rulesUpdatedAt} long={true}>","63","              {formattedDate =>","64","                <div className=\"note\">","65","                  {translateWithParameters(","66","                    'quality_profiles.x_updated_on_y',","67","                    profile.languageName,","68","                    formattedDate","69","                  )}","70","                <\/div>}","71","            <\/DateFormatter>"],"delete":["20","import * as moment from 'moment';","22","import { translate } from '..\/..\/..\/helpers\/l10n';","31","export default function EvolutionStagnan(props: Props) {","62","            <div className=\"note\">","63","              {profile.languageName}","64","              {', '}","65","              updated on {moment(profile.rulesUpdatedAt).format('LL')}","66","            <\/div>"]}],"server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/ProjectCardLeak.js":[{"add":["23","import { FormattedRelative } from 'react-intl';","24","import DateTimeFormatter from '..\/..\/..\/components\/intl\/DateTimeFormatter.tsx';","93","              <FormattedRelative value={project.leakPeriodDate}>","94","                {fromNow =>","95","                  <span className=\"project-card-leak-date pull-right\">","96","                    {translateWithParameters('projects.leak_period_x', fromNow)}","97","                  <\/span>}","98","              <\/FormattedRelative>}","100","              <DateTimeFormatter date={project.analysisDate}>","101","                {formattedDate =>","102","                  <span>","103","                    {translateWithParameters('projects.last_analysis_on_x', formattedDate)}","104","                  <\/span>}","105","              <\/DateTimeFormatter>}"],"delete":["22","import moment from 'moment';","92","              <span className=\"project-card-leak-date pull-right\">","93","                {translateWithParameters(","94","                  'projects.leak_period_x',","95","                  moment(project.leakPeriodDate).fromNow()","96","                )}","97","              <\/span>}","99","              <span>","100","                {translateWithParameters(","101","                  'projects.last_analysis_on_x',","102","                  moment(project.analysisDate).format('LLL')","103","                )}","104","              <\/span>}"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/events\/__tests__\/__snapshots__\/Event-test.js.snap":[{"add":["11","<span","21","  <strong>","22","    test","23","  <\/strong>","24","<\/span>"],"delete":["11","<div","21","  <Tooltip","22","    placement=\"left\"","23","  >","24","    <strong>","25","      test","26","    <\/strong>","27","  <\/Tooltip>","28","<\/div>"]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/popups\/__tests__\/__snapshots__\/ChangelogPopup-test.js.snap":[{"add":["17","            <DateTimeFormatter","18","              date=\"2017-03-01T09:36:01+0100\"","19","            \/>","31","            <DateTimeFormatter","32","              date=\"2017-03-01T09:36:01+0100\"","33","            \/>"],"delete":["17","            March 1, 2017 9:36 AM","29","            March 1, 2017 9:36 AM"]}],"server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/__tests__\/ProjectActivityDateInput-test.js":[{"add":["20","import { shallowWithIntl } from '..\/..\/..\/..\/helpers\/testUtils';","25","    shallowWithIntl("],"delete":["20","import { shallow } from 'enzyme';","25","    shallow("]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/home\/EvolutionRules.tsx":[{"add":["25","import { toShortNotSoISOString } from '..\/..\/..\/helpers\/dates';","55","  periodStartDate: string;","57","","58","  constructor(props: Props) {","59","    super(props);","60","    this.state = {};","61","    const startDate = new Date();","62","    startDate.setFullYear(startDate.getFullYear() - 1);","63","    this.periodStartDate = toShortNotSoISOString(startDate);","64","  }","77","      available_since: this.periodStartDate,","100","      { available_since: this.periodStartDate },"],"delete":["21","import * as moment from 'moment';","30","const PERIOD_START_MOMENT = moment().subtract(1, 'year');","31","","58","  state: State = {};","71","      available_since: PERIOD_START_MOMENT.format('YYYY-MM-DD'),","94","      {","95","        available_since: PERIOD_START_MOMENT.format('YYYY-MM-DD')","96","      },"]}],"server\/sonar-web\/config\/webpack.config.js":[{"add":[],"delete":["34","      'moment',"]}],"server\/sonar-web\/src\/main\/js\/components\/intl\/DateTooltipFormatter.tsx":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/__tests__\/__snapshots__\/GraphsTooltips-test.js.snap":[{"add":["19","      <DateTimeFormatter","54","      <DateTimeFormatter","109","      <DateTimeFormatter"],"delete":["19","      <FormattedDate","21","        format=\"LL\"","55","      <FormattedDate","57","        format=\"LL\"","111","      <FormattedDate","113","        format=\"LL\""]}],"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/components\/__tests__\/__snapshots__\/LeakPeriodLegend-test.js.snap":[{"add":["4","  overlay={","5","    <div>","6","      <FormattedRelative","7","        updateInterval={10000}","8","        value={2017-05-16T11:50:02.000Z}","9","      \/>","10","      , ","11","      <DateFormatter","12","        date={2017-05-16T11:50:02.000Z}","13","        long={true}","14","      \/>","15","    <\/div>","16","  }"],"delete":["4","  overlay=\"a month ago, March 1, 2017 9:36 AM\""]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/components\/__tests__\/__snapshots__\/IssueChangelog-test.js.snap":[{"add":["29","  <Tooltip","30","    mouseEnterDelay={0.5}","31","    overlay={","32","      <DateTimeFormatter","33","        date=\"2017-03-01T09:36:01+0100\"","34","      \/>","35","    }","36","    placement=\"left\"","38","    <button","39","      className=\"button-link issue-action issue-action-with-options js-issue-show-changelog\"","40","      onClick={[Function]}","42","      <span","43","        className=\"issue-meta-label\"","44","      >","45","        <FormattedRelative","46","          updateInterval={10000}","47","          value=\"2017-03-01T09:36:01+0100\"","48","        \/>","49","      <\/span>","50","      <i","51","        className=\"icon-dropdown little-spacer-left\"","52","      \/>","53","    <\/button>","54","  <\/Tooltip>","76","  <Tooltip","77","    mouseEnterDelay={0.5}","78","    overlay={","79","      <DateTimeFormatter","80","        date=\"2017-03-01T09:36:01+0100\"","81","      \/>","82","    }","83","    placement=\"left\"","85","    <button","86","      className=\"button-link issue-action issue-action-with-options js-issue-show-changelog\"","87","      onClick={[Function]}","89","      <span","90","        className=\"issue-meta-label\"","91","      >","92","        <FormattedRelative","93","          updateInterval={10000}","94","          value=\"2017-03-01T09:36:01+0100\"","95","        \/>","96","      <\/span>","97","      <i","98","        className=\"icon-dropdown little-spacer-left\"","99","      \/>","100","    <\/button>","101","  <\/Tooltip>"],"delete":["29","  <button","30","    className=\"button-link issue-action issue-action-with-options js-issue-show-changelog\"","31","    onClick={[Function]}","32","    title=\"March 1, 2017 9:36 AM\"","34","    <span","35","      className=\"issue-meta-label\"","37","      a month ago","38","    <\/span>","39","    <i","40","      className=\"icon-dropdown little-spacer-left\"","41","    \/>","42","  <\/button>","64","  <button","65","    className=\"button-link issue-action issue-action-with-options js-issue-show-changelog\"","66","    onClick={[Function]}","67","    title=\"March 1, 2017 9:36 AM\"","69","    <span","70","      className=\"issue-meta-label\"","72","      a month ago","73","    <\/span>","74","    <i","75","      className=\"icon-dropdown little-spacer-left\"","76","    \/>","77","  <\/button>"]}],"server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/GraphsHistory.js":[{"add":["88","        date: new Date(analysis.date)"],"delete":["20","import moment from 'moment';","89","        date: moment(analysis.date).toDate()"]}],"server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/__tests__\/ProjectCardLeak-test.js":[{"add":["40","  expect(card.find('.project-card-dates').find('FormattedRelative').getNodes()).toHaveLength(1);","41","  expect(card.find('.project-card-dates').find('DateTimeFormatter').getNodes()).toHaveLength(1);"],"delete":["37","jest.mock('moment', () => () => ({","38","  format: () => 'March 1, 2017 9:36 AM',","39","  fromNow: () => 'a month ago'","40","}));","41","","45","  expect(card.find('.project-card-dates').find('span').getNodes()).toHaveLength(2);"]}],"server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/__tests__\/__snapshots__\/ProjectCardLeak-test.js.snap":[{"add":["37","      <FormattedRelative","38","        updateInterval={10000}","39","        value=\"2016-12-01\"","40","      \/>","41","      <DateTimeFormatter","42","        date=\"2017-01-01\"","43","      \/>"],"delete":["37","      <span","38","        className=\"project-card-leak-date pull-right\"","39","      >","40","        projects.leak_period_x.a month ago","41","      <\/span>","42","      <span>","43","        projects.last_analysis_on_x.March 1, 2017 9:36 AM","44","      <\/span>"]}],"server\/sonar-web\/src\/main\/js\/components\/controls\/DateInput.tsx":[{"add":["47","    if (nextProps.value != null && this.input) {","65","    if ($.fn && ($.fn as any).datepicker && this.input) {","66","      ($(this.input) as any).datepicker(opts);"],"delete":["47","    if (nextProps.value != null) {","65","    if ($.fn && ($.fn as any).datepicker) {","66","      ($(this.refs.input) as any).datepicker(opts);"]}],"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/components\/__tests__\/LeakPeriodLegend-test.js":[{"add":[],"delete":["47","jest.mock('moment', () => () => ({","48","  format: () => 'March 1, 2017 9:36 AM',","49","  fromNow: () => 'a month ago',","50","  toDate: () => 'date'","51","}));","52",""]}],"server\/sonar-web\/src\/main\/js\/helpers\/__tests__\/l10n-test.ts":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/ComponentNav.js":[{"add":["81","        <ComponentNavMeta","82","          {...this.props}","83","          {...this.state}","84","          version={this.props.component.version}","85","          analysisDate={this.props.component.analysisDate}","86","        \/>"],"delete":["26","import { TooltipsContainer } from '..\/..\/..\/..\/components\/mixins\/tooltips-mixin';","82","        <TooltipsContainer options={{ delay: { show: 0, hide: 2000 } }}>","83","          <ComponentNavMeta","84","            {...this.props}","85","            {...this.state}","86","            version={this.props.component.version}","87","            analysisDate={this.props.component.analysisDate}","88","          \/>","89","        <\/TooltipsContainer>"]}],"\/dev\/null":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/components\/IssueCommentLine.js":[{"add":["21","import { FormattedRelative } from 'react-intl';","100","          <FormattedRelative value={comment.createdAt} \/>"],"delete":["21","import moment from 'moment';","100","          ({moment(comment.createdAt).fromNow()})"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/OverviewApp.js":[{"add":["125","            date: new Date(analysis.date),"],"delete":["22","import moment from 'moment';","126","            date: moment(analysis.date).toDate(),"]}],"server\/sonar-web\/src\/main\/js\/helpers\/dates.ts":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/__tests__\/__snapshots__\/ApplicationLeakPeriodLegend-test.js.snap":[{"add":["30","        <DateTooltipFormatter","37","        <DateTooltipFormatter"],"delete":["30","        <FormattedDate","32","          format=\"LL\"","38","        <FormattedDate","40","          format=\"LL\""]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/events\/__tests__\/__snapshots__\/Analysis-test.js.snap":[{"add":["10","      <DateTooltipFormatter","12","        placement=\"right\""],"delete":["10","      <FormattedDate","12","        format=\"LL\""]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/changelog\/__tests__\/Changelog-test.tsx":[{"add":["47","  expect(changelog.find('DateTimeFormatter')).toHaveLength(1);"],"delete":["47","  expect(changelog.text()).toContain('2016');"]}],"server\/sonar-web\/src\/main\/js\/components\/intl\/TimeTooltipFormatter.tsx":[{"add":[],"delete":[]}],"server\/sonar-web\/yarn.lock":[{"add":["67","\"@types\/react-intl@2.3.1\":","68","  version \"2.3.1\"","69","  resolved \"https:\/\/registry.yarnpkg.com\/@types\/react-intl\/-\/react-intl-2.3.1.tgz#d036dbe54f6ef29f2a150ed303a84f1693ddf905\"","70","","3439","intl-format-cache@^2.0.5:","3440","  version \"2.0.5\"","3441","  resolved \"https:\/\/registry.yarnpkg.com\/intl-format-cache\/-\/intl-format-cache-2.0.5.tgz#b484cefcb9353f374f25de389a3ceea1af18d7c9\"","3442","","3443","intl-messageformat-parser@1.2.0:","3444","  version \"1.2.0\"","3445","  resolved \"https:\/\/registry.yarnpkg.com\/intl-messageformat-parser\/-\/intl-messageformat-parser-1.2.0.tgz#5906b7f953ab7470e0dc8549097b648b991892ff\"","3446","","3447","intl-messageformat@1.3.0, intl-messageformat@^1.3.0:","3448","  version \"1.3.0\"","3449","  resolved \"https:\/\/registry.yarnpkg.com\/intl-messageformat\/-\/intl-messageformat-1.3.0.tgz#f7d926aded7a3ab19b2dc601efd54e99a4bd4eae\"","3450","  dependencies:","3451","    intl-messageformat-parser \"1.2.0\"","3452","","3453","intl-messageformat@^2.0.0:","3454","  version \"2.1.0\"","3455","  resolved \"https:\/\/registry.yarnpkg.com\/intl-messageformat\/-\/intl-messageformat-2.1.0.tgz#1c51da76f02a3f7b360654cdc51bbc4d3fa6c72c\"","3456","  dependencies:","3457","    intl-messageformat-parser \"1.2.0\"","3458","","3459","intl-relativeformat@2.0.0:","3460","  version \"2.0.0\"","3461","  resolved \"https:\/\/registry.yarnpkg.com\/intl-relativeformat\/-\/intl-relativeformat-2.0.0.tgz#d6ba9dc6c625819bc0abdb1d4e238138b7488f26\"","3462","  dependencies:","3463","    intl-messageformat \"^2.0.0\"","3464","","3465","intl-relativeformat@^1.3.0:","3466","  version \"1.3.0\"","3467","  resolved \"https:\/\/registry.yarnpkg.com\/intl-relativeformat\/-\/intl-relativeformat-1.3.0.tgz#893dc7076fccd380cf091a2300c380fa57ace45b\"","3468","  dependencies:","3469","    intl-messageformat \"1.3.0\"","3470","","3471","invariant@^2.0.0, invariant@^2.1.1, invariant@^2.2.0, invariant@^2.2.1, invariant@^2.2.2:","5707","react-intl@2.3.0:","5708","  version \"2.3.0\"","5709","  resolved \"https:\/\/registry.yarnpkg.com\/react-intl\/-\/react-intl-2.3.0.tgz#e1df6af5667fdf01cbe4aab20e137251e2ae5142\"","5710","  dependencies:","5711","    intl-format-cache \"^2.0.5\"","5712","    intl-messageformat \"^1.3.0\"","5713","    intl-relativeformat \"^1.3.0\"","5714","    invariant \"^2.1.1\"","5715",""],"delete":["3435","invariant@^2.0.0, invariant@^2.2.0, invariant@^2.2.1, invariant@^2.2.2:","4552","moment@2.18.1:","4553","  version \"2.18.1\"","4554","  resolved \"https:\/\/registry.yarnpkg.com\/moment\/-\/moment-2.18.1.tgz#c36193dd3ce1c2eed2adb7c802dbbc77a81b1c0f\"","4555",""]}],"server\/sonar-web\/src\/main\/js\/apps\/account\/projects\/__tests__\/ProjectCard-test.js":[{"add":["51","  expect(output.find('.account-project-analysis FormattedRelative')).toHaveLength(1);"],"delete":["51","  expect(output.find('.account-project-analysis').text()).toContain(","52","    'my_account.projects.analyzed_x'","53","  );"]}]}},"4812e6d383f4c1385771fab50c1edb339f5937fb":{"changes":{"server\/sonar-docs\/src\/layouts\/layout.css":"MODIFY","server\/sonar-docs\/src\/templates\/page.tsx":"MODIFY"},"diff":{"server\/sonar-docs\/src\/layouts\/layout.css":[{"add":["665",".collapse div > a:first-child {","679",".collapse div > a:first-child:hover {","683",".collapse.close div > a:first-child {","687",".collapse.close div > * {","691",".collapse.close div > a:first-child {","695",".collapse div *:last-child {","699",".collapse div .alert {"],"delete":["665",".collapse > a:first-child {","679",".collapse > a:first-child:hover {","683",".collapse.close > a:first-child {","687",".collapse.close > * {","691",".collapse.close > a:first-child {","695",".collapse *:last-child {","699",".collapse .alert {"]}],"server\/sonar-docs\/src\/templates\/page.tsx":[{"add":["44","      const customBlockWrapper = collapsables[i].querySelector('.custom-block-body');","45","      if (customBlockWrapper) {","46","        let firstChild = customBlockWrapper.firstElementChild;","47","        if (firstChild) {","48","          firstChild.outerHTML = firstChild.outerHTML","49","            .replace(\/<h2\/gi, '<a href=\"#\"')","50","            .replace(\/<\\\/h2>\/gi, '<\/a>');","51","","52","          \/\/ We changed the element. It's reference is no longer correct in some","53","          \/\/ browsers. Fetch it again.","54","          firstChild = customBlockWrapper.firstElementChild;","55","          firstChild!.addEventListener('click', (event: Event & { currentTarget: HTMLElement }) => {","56","            event.preventDefault();","57","            if (","58","              event.currentTarget.parentElement &&","59","              event.currentTarget.parentElement.parentElement","60","            ) {","61","              event.currentTarget.parentElement.parentElement.classList.toggle('close');","62","            }","63","          });","64","        }"],"delete":["44","      const firstChild = collapsables[i].firstElementChild;","45","      if (firstChild) {","46","        firstChild.outerHTML = firstChild.outerHTML","47","          .replace(\/<h2\/gi, '<a href=\"#\"')","48","          .replace(\/<\\\/h2>\/gi, '<\/a>');","49","        firstChild.addEventListener('click', (event: Event & { currentTarget: HTMLElement }) => {","50","          event.preventDefault();","51","          if (event.currentTarget.parentElement) {","52","            event.currentTarget.parentElement.classList.toggle('close');","53","          }","54","        });"]}]}},"7562d01e1fd1b72a70fd3c392145a1dbebb28155":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/BranchOverviewRenderer.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/MeasuresPanelNoNewCode-test.tsx":"MODIFY","sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/BranchOverview.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/BranchOverviewRenderer-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/BranchOverview-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/MeasuresPanel.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/__snapshots__\/BranchOverviewRenderer-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/__snapshots__\/MeasuresPanelNoNewCode-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/MeasuresPanelNoNewCode.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/helpers\/branch-like.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/__snapshots__\/BranchOverview-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/__snapshots__\/MeasuresPanel-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/App.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/MeasuresPanel-test.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/BranchOverviewRenderer.tsx":[{"add":["23","import { Branch } from '..\/..\/..\/types\/branch-like';","35","  branch?: Branch;","53","    branch,","75","          <NoCodeWarning branchLike={branch} component={component} measures={measures} \/>","90","                  branch={branch}","99","                  branchLike={branch}"],"delete":["23","import { BranchLike } from '..\/..\/..\/types\/branch-like';","35","  branchLike?: BranchLike;","53","    branchLike,","75","          <NoCodeWarning branchLike={branchLike} component={component} measures={measures} \/>","90","                  branchLike={branchLike}","99","                  branchLike={branchLike}"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/MeasuresPanelNoNewCode-test.tsx":[{"add":["86","  expect(","87","    shallowRender({","88","      period: mockPeriod({ date: undefined, mode: 'REFERENCE_BRANCH', parameter: 'master' })","89","    })","90","  ).toMatchSnapshot();","91","  expect(","92","    shallowRender({","93","      period: mockPeriod({ date: undefined, mode: 'REFERENCE_BRANCH', parameter: 'notsame' })","94","    })","95","  ).toMatchSnapshot();","108","    <MeasuresPanelNoNewCode branch={mockMainBranch()} component={mockComponent()} {...props} \/>"],"delete":["98","    <MeasuresPanelNoNewCode branchLike={mockMainBranch()} component={mockComponent()} {...props} \/>"]}],"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["2770","overview.measures.same_reference.explanation=This branch is configured to use itself as reference branch. It will never have New Code.","2771","overview.measures.bad_reference.explanation=This branch could not be compared to its reference branch. See the SCM or analysis report for more details. "],"delete":["2770","overview.measures.bad_setting.explanation=This branch is configured to use itself as reference branch. It will never have New Code."]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/BranchOverview.tsx":[{"add":["45","import { Branch, BranchLike } from '..\/..\/..\/types\/branch-like';","55","  branch?: Branch;","97","      !isSameBranchLike(this.props.branch, prevProps.branch)","117","    const { branch, component } = this.props;","123","      ...getBranchLikeQuery(branch)","127","      branch","131","      (branch && !isMainBranch(branch) && getBranchLikeDisplayName(branch)) || undefined;","213","      branch,","220","      ...getBranchLikeQuery(branch)","230","    this.loadMeasuresAndMeta(key, branch, metricKeys).then(","243","            branchLike: branch","293","    const { branch, component } = this.props;","300","      ...getBranchLikeQuery(branch),","323","    const { branch } = this.props;","326","      ...getBranchLikeQuery(branch),","390","    const { branch, component } = this.props;","415","        branch={branch}"],"delete":["45","import { BranchLike } from '..\/..\/..\/types\/branch-like';","55","  branchLike?: BranchLike;","97","      !isSameBranchLike(this.props.branchLike, prevProps.branchLike)","117","    const { branchLike, component } = this.props;","123","      ...getBranchLikeQuery(branchLike)","127","      branchLike","131","      (branchLike && !isMainBranch(branchLike) && getBranchLikeDisplayName(branchLike)) ||","132","      undefined;","214","      branchLike,","221","      ...getBranchLikeQuery(branchLike)","231","    this.loadMeasuresAndMeta(key, branchLike, metricKeys).then(","244","            branchLike","294","    const { branchLike, component } = this.props;","301","      ...getBranchLikeQuery(branchLike),","324","    const { branchLike } = this.props;","327","      ...getBranchLikeQuery(branchLike),","391","    const { branchLike, component } = this.props;","416","        branchLike={branchLike}"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/BranchOverviewRenderer-test.tsx":[{"add":["35","      branch={mockMainBranch()}"],"delete":["35","      branchLike={mockMainBranch()}"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/BranchOverview-test.tsx":[{"add":["256","    const wrapper = shallowRender({ branch: mockBranch(), component });","360","      branch={mockMainBranch()}"],"delete":["256","    const wrapper = shallowRender({ branchLike: mockBranch(), component });","360","      branchLike={mockMainBranch()}"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/MeasuresPanel.tsx":[{"add":["27","import { Branch } from '..\/..\/..\/types\/branch-like';","40","  branch?: Branch;","53","  const { appLeak, branch, component, loading, measures = [], period } = props;","109","              <MeasuresPanelNoNewCode branch={branch} component={component} period={period} \/>","119","                    branchLike={branch}","135","                        branchLike={branch}","146","                            branchLike={branch}","157","                      branchLike={branch}","168","                          branchLike={branch}"],"delete":["27","import { BranchLike } from '..\/..\/..\/types\/branch-like';","40","  branchLike?: BranchLike;","53","  const { appLeak, branchLike, component, loading, measures = [], period } = props;","109","              <MeasuresPanelNoNewCode","110","                branchLike={branchLike}","111","                component={component}","112","                period={period}","113","              \/>","123","                    branchLike={branchLike}","139","                        branchLike={branchLike}","150","                            branchLike={branchLike}","161","                      branchLike={branchLike}","172","                          branchLike={branchLike}"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/__snapshots__\/BranchOverviewRenderer-test.tsx.snap":[{"add":["52","            branch={","267","            branch={"],"delete":["52","            branchLike={","267","            branchLike={"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/__snapshots__\/MeasuresPanelNoNewCode-test.tsx.snap":[{"add":["28","      overview.measures.bad_reference.explanation","29","    <\/p>","30","    <p>","31","      <FormattedMessage","32","        defaultMessage=\"overview.measures.empty_link\"","33","        id=\"overview.measures.empty_link\"","34","        values={","35","          Object {","36","            \"learn_more_link\": <Link","37","              onlyActiveOnIndex={false}","38","              style={Object {}}","39","              to=\"\/documentation\/user-guide\/clean-as-you-code\/\"","40","            >","41","              learn_more","42","            <\/Link>,","43","          }","44","        }","45","      \/>","77","      overview.measures.bad_reference.explanation","81","        defaultMessage=\"overview.measures.empty_link\"","82","        id=\"overview.measures.empty_link\"","85","            \"learn_more_link\": <Link","88","              to=\"\/documentation\/user-guide\/clean-as-you-code\/\"","90","              learn_more","91","            <\/Link>,","92","          }","93","        }","94","      \/>","95","    <\/p>","96","  <\/div>","97","<\/div>","98","`;","99","","100","exports[`should render the default message 5`] = `","101","<div","102","  className=\"display-flex-center display-flex-justify-center\"","103","  style={","104","    Object {","105","      \"height\": 500,","106","    }","107","  }","108",">","109","  <img","110","    alt=\"\"","111","    className=\"spacer-right\"","112","    height={52}","113","    src=\"\/images\/source-code.svg\"","114","  \/>","115","  <div","116","    className=\"big-spacer-left text-muted\"","117","    style={","118","      Object {","119","        \"maxWidth\": 500,","120","      }","121","    }","122","  >","123","    <p","124","      className=\"spacer-bottom big-spacer-top big\"","125","    >","126","      overview.measures.same_reference.explanation","127","    <\/p>","128","  <\/div>","129","<\/div>","130","`;","131","","132","exports[`should render the default message 6`] = `","133","<div","134","  className=\"display-flex-center display-flex-justify-center\"","135","  style={","136","    Object {","137","      \"height\": 500,","138","    }","139","  }","140",">","141","  <img","142","    alt=\"\"","143","    className=\"spacer-right\"","144","    height={52}","145","    src=\"\/images\/source-code.svg\"","146","  \/>","147","  <div","148","    className=\"big-spacer-left text-muted\"","149","    style={","150","      Object {","151","        \"maxWidth\": 500,","152","      }","153","    }","154","  >","155","    <p","156","      className=\"spacer-bottom big-spacer-top big\"","157","    >","158","      overview.measures.bad_reference.explanation","159","    <\/p>","160","    <p>","161","      <FormattedMessage","162","        defaultMessage=\"overview.measures.empty_link\"","163","        id=\"overview.measures.empty_link\"","164","        values={","165","          Object {","166","            \"learn_more_link\": <Link","167","              onlyActiveOnIndex={false}","168","              style={Object {}}","169","              to=\"\/documentation\/user-guide\/clean-as-you-code\/\"","170","            >","171","              learn_more"],"delete":["28","      overview.measures.bad_setting.explanation","60","      overview.measures.bad_setting.explanation","64","        defaultMessage=\"overview.measures.bad_setting.link\"","65","        id=\"overview.measures.bad_setting.link\"","68","            \"setting_link\": <Link","71","              to={","72","                Object {","73","                  \"pathname\": \"\/project\/baseline\",","74","                  \"query\": Object {","75","                    \"id\": \"my-project\",","76","                  },","77","                }","78","              }","80","              settings.new_code_period.category"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/MeasuresPanelNoNewCode.tsx":[{"add":["25","import { Branch } from '..\/..\/..\/types\/branch-like';","29","  branch?: Branch;","35","  const { branch, component, period } = props;","38","","39","  const hasBadReferenceBranch =","40","    !isApp && !!period && !period.date && period.mode === 'REFERENCE_BRANCH';","47","  const hasBadNewCodeSettingSameRef = hasBadReferenceBranch && branch?.name === period?.parameter;","48","","49","  const badExplanationKey = hasBadReferenceBranch","50","    ? hasBadNewCodeSettingSameRef","51","      ? 'overview.measures.same_reference.explanation'","52","      : 'overview.measures.bad_reference.explanation'","53","    : 'overview.measures.empty_explanation';","66","        <p className=\"spacer-bottom big-spacer-top big\">{translate(badExplanationKey)}<\/p>","67","        {hasBadNewCodeSettingSameRef ? (","78","                        query: { id: component.key, ...getBranchLikeQuery(branch) }"],"delete":["25","import { BranchLike } from '..\/..\/..\/types\/branch-like';","29","  branchLike?: BranchLike;","35","  const { branchLike, component, period } = props;","44","  const hasBadNewCodeSetting =","45","    !isApp && !!period && !period.date && period.mode === 'REFERENCE_BRANCH';","58","        <p className=\"spacer-bottom big-spacer-top big\">","59","          {hasBadNewCodeSetting","60","            ? translate('overview.measures.bad_setting.explanation')","61","            : translate('overview.measures.empty_explanation')}","62","        <\/p>","63","        {hasBadNewCodeSetting ? (","74","                        query: { id: component.key, ...getBranchLikeQuery(branchLike) }"]}],"server\/sonar-web\/src\/main\/js\/helpers\/branch-like.ts":[{"add":[],"delete":["61","export function getBranchQualityGateColor(status: string) {","62","  let indicatorColor = 'gray';","63","  if (status === 'ERROR') {","64","    indicatorColor = 'red';","65","  } else if (status === 'WARN') {","66","    indicatorColor = 'orange';","67","  } else if (status === 'OK') {","68","    indicatorColor = 'green';","69","  }","70","  return indicatorColor;","71","}","72",""]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/__snapshots__\/BranchOverview-test.tsx.snap":[{"add":["45","  branch={","967","  branch={","1882","  branch={"],"delete":["45","  branchLike={","967","  branchLike={","1882","  branchLike={"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/__snapshots__\/MeasuresPanel-test.tsx.snap":[{"add":["3256","      branch={","3362","      branch={","3905","      branch={"],"delete":["3256","      branchLike={","3362","      branchLike={","3905","      branchLike={"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/App.tsx":[{"add":["69","          <BranchOverview branch={branchLike} component={component} \/>"],"delete":["69","          <BranchOverview branchLike={branchLike} component={component} \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/branches\/__tests__\/MeasuresPanel-test.tsx":[{"add":["62","    branch: mockBranch({ name: 'own-reference' }),","94","      branch={mockMainBranch()}"],"delete":["62","    branchLike: mockBranch({ name: 'own-reference' }),","94","      branchLike={mockMainBranch()}"]}]}},"66ebeab366167d2a5aef1d7f935234481a9d5e31":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/test\/ws\/ListAction.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/test\/index\/TestIndex.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/test\/index\/TestIndexTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/test\/ws\/ListAction.java":[{"add":["239","    checkComponentUuidPermission(dbSession, testIndex.getByTestUuid(testUuid).fileUuid());"],"delete":["239","    checkComponentUuidPermission(dbSession, testIndex.searchByTestUuid(testUuid).fileUuid());"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/test\/index\/TestIndex.java":[{"add":["90","  public TestDoc getByTestUuid(String testUuid) {"],"delete":["90","  public TestDoc searchByTestUuid(String testUuid) {"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/test\/index\/TestIndexTest.java":[{"add":["88","    TestDoc test = underTest.getByTestUuid(\"1\");"],"delete":["88","    TestDoc test = underTest.searchByTestUuid(\"1\");"]}]}},"474f76882a1c04451f9a210a59aa8efa1039426d":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/common\/LocationIndex.css":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/common\/LocationIndex.css":[{"add":["48","  margin-left: -22px;"],"delete":["48","  position: absolute;","49","  margin-left: -4px;","50","  transform: translateX(-100%);","51","}","52","","53",".location-index.is-leading + .is-leading {","54","  position: relative;","55","  transform: none;"]}]}},"a08697f54c9f0b98c1a811c22135b9ae303df05e":{"changes":{"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/PersistLiveMeasuresStep.java":"MODIFY"},"diff":{"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/PersistLiveMeasuresStep.java":[{"add":["139","      dbSession.commit();"],"delete":["91","      dbSession.commit();"]}]}},"60d5ed1ee8daf428dc11494eae18cb5664d95683":{"changes":{"\/dev\/null":"DELETE","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/qualityprofile\/ActiveRuleTest.java":"ADD","sonar-db\/src\/main\/resources\/org\/sonar\/db\/qualityprofile\/ActiveRuleMapper.xml":"MODIFY"},"diff":{"\/dev\/null":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/qualityprofile\/ActiveRuleTest.java":[{"add":[],"delete":[]}],"sonar-db\/src\/main\/resources\/org\/sonar\/db\/qualityprofile\/ActiveRuleMapper.xml":[{"add":["19","    INNER JOIN rules_profiles qp ON qp.id=a.profile_id","20","    INNER JOIN rules r ON r.id = a.rule_id","35","    INNER JOIN rules_profiles qp ON qp.id=a.profile_id","37","    LEFT JOIN active_rules active_rule_parent ON active_rule_parent.profile_id=profile_parent.id AND a.rule_id=active_rule_parent.rule_id"],"delete":["19","    LEFT JOIN rules_profiles qp ON qp.id=a.profile_id","20","    LEFT JOIN rules r ON r.id = a.rule_id","23","","36","    LEFT JOIN rules_profiles qp ON qp.id=a.profile_id","38","    LEFT JOIN active_rules active_rule_parent ON active_rule_parent.profile_id=profile_parent.id AND","39","    a.rule_id=active_rule_parent.rule_id","94",""]}]}},"bdd538eb0c2b5937c565480ecab58908d095aad2":{"changes":{"sonar-core\/src\/main\/java\/org\/sonar\/core\/issue\/FieldDiffs.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/ws\/ChangelogAction.java":"MODIFY","sonar-core\/src\/test\/java\/org\/sonar\/core\/issue\/FieldDiffsTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/issue\/IssueChangeDto.java":"MODIFY"},"diff":{"sonar-core\/src\/main\/java\/org\/sonar\/core\/issue\/FieldDiffs.java":[{"add":["24","import java.nio.charset.StandardCharsets;","25","import java.util.Base64;","31","import org.apache.commons.lang.StringUtils;","44","  private static final String CHAR_TO_ESCAPE = \"|,{}=:\";","49","  public static final String ASSIGNEE = \"assignee\";","50","  public static final String ENCODING_PREFIX = \"{base64:\";","51","  public static final String ENCODING_SUFFIX = \"}\";","56","    if (diffs.containsKey(ASSIGNEE)) {","57","      Map<String, Diff> result = Maps.newLinkedHashMap(diffs);","58","      result.put(ASSIGNEE, decode(result.get(ASSIGNEE)));","59","      return result;","60","    }","65","    if (field.equals(ASSIGNEE)) {","66","      return decode(diffs.get(ASSIGNEE));","67","    }","102","    if (field.equals(ASSIGNEE)) {","103","      oldValue = encodeField(oldValue);","104","      newValue = encodeField(newValue);","105","    }","115","  public String toEncodedString() {","116","    return serialize(true);","117","  }","118","","121","    return serialize(false);","122","  }","123","","124","  private String serialize(boolean shouldEncode) {","135","      if (shouldEncode) {","136","        sb.append(entry.getValue().toEncodedString());","137","      } else {","138","        sb.append(entry.getValue().toString());","139","      }","151","      String[] keyValues = field.split(\"=\", 2);","156","          diffs.setDiff(keyValues[0], emptyToNull(values.substring(0, split)), emptyToNull(values.substring(split + 1)));","158","          diffs.setDiff(keyValues[0], null, emptyToNull(values));","161","        diffs.setDiff(keyValues[0], null, null);","167","  @SuppressWarnings(\"unchecked\")","168","  Diff decode(Diff encoded) {","169","    return new Diff(","170","        decodeField(encoded.oldValue),","171","        decodeField(encoded.newValue)","172","    );","173","  }","174","","175","  private static Serializable decodeField(@Nullable Serializable field) {","176","    if (field == null || !isEncoded(field)) {","177","      return field;","178","    }","179","","180","    String encodedField = field.toString();","181","    String value = encodedField.substring(ENCODING_PREFIX.length(), encodedField.indexOf(ENCODING_SUFFIX));","182","    return new String(Base64.getDecoder().decode(value), StandardCharsets.UTF_8);","183","  }","184","","185","  private static Serializable encodeField(@Nullable Serializable field) {","186","    if (field == null || !shouldEncode(field.toString())) {","187","      return field;","188","    }","189","","190","    return ENCODING_PREFIX + Base64.getEncoder().encodeToString(field.toString().getBytes(StandardCharsets.UTF_8)) + ENCODING_SUFFIX;","191","  }","192","","193","  private static boolean shouldEncode(String field) {","194","    return !field.isEmpty() && !isEncoded(field) && containsCharToEscape(field);","195","  }","196","","197","  private static boolean containsCharToEscape(Serializable s) {","198","    return StringUtils.containsAny(s.toString(), CHAR_TO_ESCAPE);","199","  }","200","","201","  private static boolean isEncoded(Serializable field) {","202","    return field.toString().startsWith(ENCODING_PREFIX) && field.toString().endsWith(ENCODING_SUFFIX);","203","  }","204","","234","    void setNewValue(@Nullable T t) {","250","    private String toEncodedString() {","251","      return serialize(true);","252","    }","253","","256","      return serialize(false);","257","    }","258","","259","    private String serialize(boolean shouldEncode) {","262","        sb.append(shouldEncode ? oldValue : decodeField(oldValue));","266","        sb.append(shouldEncode ? newValue : decodeField(newValue));"],"delete":["108","      sb.append(entry.getValue().toString());","120","      String[] keyValues = field.split(\"=\");","125","          diffs.setDiff(keyValues[0], values.substring(0, split), values.substring(split +1));","127","          diffs.setDiff(keyValues[0], \"\", emptyToNull(values));","130","        diffs.setDiff(keyValues[0], \"\", \"\");","165","    void setNewValue(T t) {","183","      \/\/ TODO escape , and | characters","186","        sb.append(oldValue.toString());","190","        sb.append(newValue.toString());"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/ws\/ChangelogAction.java":[{"add":["144","      String oldValue = value.oldValue() != null ? value.oldValue().toString() : null;","145","      String newValue = value.newValue() != null ? value.newValue().toString() : null;","148","        setNullable(results.getFileLongName(emptyToNull(newValue)), diffBuilder::setNewValue);","149","        setNullable(results.getFileLongName(emptyToNull(oldValue)), diffBuilder::setOldValue);","152","        setNullable(emptyToNull(newValue), diffBuilder::setNewValue);","153","        setNullable(emptyToNull(oldValue), diffBuilder::setOldValue);"],"delete":["146","        setNullable(results.getFileLongName(emptyToNull(value.newValue().toString())), diffBuilder::setNewValue);","147","        setNullable(results.getFileLongName(emptyToNull(value.oldValue().toString())), diffBuilder::setOldValue);","150","        setNullable(emptyToNull(value.newValue().toString()), diffBuilder::setNewValue);","151","        setNullable(emptyToNull(value.oldValue().toString()), diffBuilder::setOldValue);"]}],"sonar-core\/src\/test\/java\/org\/sonar\/core\/issue\/FieldDiffsTest.java":[{"add":["27","  private static final String NAME_WITH_RESERVED_CHARS = \"name,with|reserved=chars:\";","28","  private static final String ENCODED_NAME_WITH_RESERVED_CHARS = \"{base64:bmFtZSx3aXRofHJlc2VydmVkPWNoYXJzOg==}\";","29","","30","  private FieldDiffs diffs = new FieldDiffs();","55","    diffs.setDiff(\"technicalDebt\", 50L, \"100\");","58","    assertThat(diff.oldValueLong()).isEqualTo(50L);","59","    assertThat(diff.newValueLong()).isEqualTo(100L);","72","  public void diff_with_assignee() {","73","    diffs.setDiff(\"assignee\", \"oldAssignee\", NAME_WITH_RESERVED_CHARS);","74","","75","    FieldDiffs.Diff diff = diffs.diffs().get(\"assignee\");","76","    assertThat(diff.oldValue()).isEqualTo(\"oldAssignee\");","77","    assertThat(diff.newValue()).isEqualTo(NAME_WITH_RESERVED_CHARS);","78","  }","79","","80","  @Test","81","  public void get() {","82","    diffs.setDiff(\"severity\", \"BLOCKER\", \"INFO\");","83","","84","    FieldDiffs.Diff diff = diffs.get(\"severity\");","85","    assertThat(diff.oldValue()).isEqualTo(\"BLOCKER\");","86","    assertThat(diff.newValue()).isEqualTo(\"INFO\");","87","  }","88","","89","  @Test","90","  public void get_with_assignee() {","91","    diffs.setDiff(\"assignee\", \"oldAssignee\", NAME_WITH_RESERVED_CHARS);","92","","93","    FieldDiffs.Diff diff = diffs.get(\"assignee\");","94","    assertThat(diff.oldValue()).isEqualTo(\"oldAssignee\");","95","    assertThat(diff.newValue()).isEqualTo(NAME_WITH_RESERVED_CHARS);","96","  }","97","","98","  @Test","132","  public void test_toEncodedString() {","133","    diffs.setDiff(\"assignee\", \"oldAssignee\", NAME_WITH_RESERVED_CHARS);","134","    diffs.setDiff(\"resolution\", \"OPEN\", \"FIXED\");","135","","136","    assertThat(diffs.toEncodedString()).isEqualTo(\"assignee=oldAssignee|\" + ENCODED_NAME_WITH_RESERVED_CHARS + \",resolution=OPEN|FIXED\");","137","  }","138","","139","  @Test","161","    assertThat(diff.oldValue()).isEqualTo(null);","165","    assertThat(diff.oldValue()).isEqualTo(null);","170","    assertThat(diff.newValue()).isEqualTo(null);","171","  }","172","","173","  @Test","174","  public void test_parse_encoded_assignee() {","175","    diffs = FieldDiffs.parse(\"severity=BLOCKER|INFO,assignee=oldValue|\" + ENCODED_NAME_WITH_RESERVED_CHARS);","176","    assertThat(diffs.diffs()).hasSize(2);","177","","178","    FieldDiffs.Diff diff = diffs.diffs().get(\"severity\");","179","    assertThat(diff.oldValue()).isEqualTo(\"BLOCKER\");","180","    assertThat(diff.newValue()).isEqualTo(\"INFO\");","181","","182","    diff = diffs.diffs().get(\"assignee\");","183","    assertThat(diff.oldValue()).isEqualTo(\"oldValue\");","184","    assertThat(diff.newValue()).isEqualTo(NAME_WITH_RESERVED_CHARS);","193","    assertThat(diff.oldValue()).isEqualTo(null);","197","    assertThat(diff.oldValue()).isEqualTo(null);","198","    assertThat(diff.newValue()).isEqualTo(null);"],"delete":["27","  FieldDiffs diffs = new FieldDiffs();","52","    diffs.setDiff(\"technicalDebt\", 50l, \"100\");","55","    assertThat(diff.oldValueLong()).isEqualTo(50l);","56","    assertThat(diff.newValueLong()).isEqualTo(100l);","123","    assertThat(diff.oldValue()).isEqualTo(\"\");","127","    assertThat(diff.oldValue()).isEqualTo(\"\");","132","    assertThat(diff.newValue()).isEqualTo(\"\");","141","    assertThat(diff.oldValue()).isEqualTo(\"\");","145","    assertThat(diff.oldValue()).isEqualTo(\"\");","146","    assertThat(diff.newValue()).isEqualTo(\"\");"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/issue\/IssueChangeDto.java":[{"add":["74","    dto.setChangeData(diffs.toEncodedString());"],"delete":["74","    dto.setChangeData(diffs.toString());"]}]}},"079b3642a07821dca29955040135c77cd44fc543":{"changes":{"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/PurgeOrphansForCE.java":"MODIFY"},"diff":{"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/PurgeOrphansForCE.java":[{"add":["33","    switch (getDialect().getId()) {"],"delete":["27","  private final Database db;","28","","31","    this.db = db;","36","    switch (db.getDialect().getId()) {"]}]}},"fb03a19566ef193e4860fb276824ff315ca5047d":{"changes":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/scm\/ScmProvider.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/ChangedLinesPublisher.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/report\/ChangedLinesPublisherTest.java":"MODIFY"},"diff":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/scm\/ScmProvider.java":[{"add":["70","   * If nothing is returned for a file, the scanner will consider that the provider was unable to determine changes for that file and it will","71","   * assume that nothing was changed in it.","72","   * If null is returned, an imprecise fallback mechanism will be used to detect which lines are new (based on SCM dates)."],"delete":["70","   * If null is returned or if a path is not included in the map, an imprecise fallback mechanism will be used to detect which lines","71","   * are new (based on SCM dates)."]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/ChangedLinesPublisher.java":[{"add":["91","      Set<Integer> changedLines = pathSetMap.get(e.getKey());","93","      if (changedLines == null) {","95","        \/\/ assume that no line was changed","96","        writeChangedLines(writer, e.getValue().scannerId(), Collections.emptySet());","97","      } else {","98","        \/\/ detect unchanged last empty line","99","        if (changedLines.size() + 1 == inputFile.lines() && inputFile.lineLength(inputFile.lines()) == 0) {","100","          changedLines.add(inputFile.lines());","101","        }","102","        count++;","103","        writeChangedLines(writer, e.getValue().scannerId(), changedLines);"],"delete":["91","      Set<Integer> changedLines = pathSetMap.getOrDefault(e.getKey(), Collections.emptySet());","93","      \/\/ detect unchanged last empty line","94","      if (changedLines.size() + 1 == inputFile.lines() && inputFile.lineLength(inputFile.lines()) == 0) {","95","        changedLines.add(inputFile.lines());","96","      }","97","","98","      if (changedLines.isEmpty()) {","101","      count++;","102","      writeChangedLines(writer, e.getValue().scannerId(), changedLines);"]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/report\/ChangedLinesPublisherTest.java":[{"add":["21","import com.google.common.collect.ImmutableMap;","37","import org.sonar.api.utils.log.LogTester;","46","import static org.assertj.core.api.Assumptions.assumeThat;","66","  @Rule","67","  public LogTester logTester = new LogTester();","68","","122","    DefaultInputFile fileNotReturned = createInputFile(\"path2\", \"l1\\nl2\\nl3\\n\");","123","    DefaultInputFile fileWithoutChangedLines = createInputFile(\"path3\", \"l1\\nl2\\nl3\\n\");","124","","125","    Set<Path> paths = new HashSet<>(Arrays.asList(BASE_DIR.resolve(\"path1\"), BASE_DIR.resolve(\"path2\"), BASE_DIR.resolve(\"path3\")));","127","    when(provider.branchChangedLines(TARGET_BRANCH, BASE_DIR, paths))","128","      .thenReturn(ImmutableMap.of(BASE_DIR.resolve(\"path1\"), lines, BASE_DIR.resolve(\"path3\"), Collections.emptySet()));","129","    when(inputComponentStore.allChangedFilesToPublish()).thenReturn(Arrays.asList(fileWithChangedLines, fileNotReturned, fileWithoutChangedLines));","135","    assertPublished(fileNotReturned, Collections.emptySet());","136","","137","    assumeThat(logTester.logs()).contains(\"File '\/root\/path2' was detected as changed but without having changed lines\");"],"delete":["116","    DefaultInputFile fileWithoutChangedLines = createInputFile(\"path2\", \"l1\\nl2\\nl3\\n\");","117","    Set<Path> paths = new HashSet<>(Arrays.asList(BASE_DIR.resolve(\"path1\"), BASE_DIR.resolve(\"path2\")));","119","    when(provider.branchChangedLines(TARGET_BRANCH, BASE_DIR, paths)).thenReturn(Collections.singletonMap(BASE_DIR.resolve(\"path1\"), lines));","120","    when(inputComponentStore.allChangedFilesToPublish()).thenReturn(Arrays.asList(fileWithChangedLines, fileWithoutChangedLines));","172","  private void assertNotPublished(DefaultInputFile file) {","173","    assertThat(new File(temp.getRoot(), \"changed-lines-\" + file.scannerId() + \".pb\")).doesNotExist();","174","  }","175",""]}]}},"5e36feac9416523f4eb4fb94415db49e6ec01e7d":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/system\/utils.ts":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/system\/utils.ts":[{"add":["49","  return omit(sysInfoObject, [","50","    HEALTH_FIELD,","51","    HEALTHCAUSES_FIELD,","52","    'Name',","53","    PLUGINS_FIELD,","54","    SETTINGS_FIELD","55","  ]);"],"delete":["49","  return omit(sysInfoObject, [HEALTH_FIELD, HEALTHCAUSES_FIELD, 'Name', SETTINGS_FIELD]);"]}]}},"a8e86376906473e4b9b0d5eec23ae8b918e39e7a":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/setting\/ThreadLocalSettings.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/setting\/ThreadLocalSettingsTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/setting\/ThreadLocalSettings.java":[{"add":[],"delete":["36","import static com.google.common.base.Preconditions.checkState;","148","   *","149","   * @throws IllegalStateException if the current thread already has specific cache","152","    checkState(CACHE.get() == null,","153","      \"load called twice for thread '%s' or state wasn't cleared last time it was used\", Thread.currentThread().getName());"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/setting\/ThreadLocalSettingsTest.java":[{"add":["37","import static java.util.Collections.emptyMap;","81","    assertThat(underTest.get(\"foo\")).hasValue(\"bar\");","90","    assertThat(underTest.get(\"foo\")).hasValue(\"bar\");","103","    assertThat(underTest.get(\"foo\")).hasValue(\"bar\");","150","    assertThat(underTest.get(\"foo\")).hasValue(\"1\");","160","    assertThat(underTest.get(\"foo\")).hasValue(\"from db\");","172","    assertThat(underTest.get(\"foo\")).hasValue(\"from system\");","210","    assertThat(underTest.get(A_KEY)).hasValue(\"v1\");","214","    assertThat(underTest.get(A_KEY)).hasValue(\"v1\");","219","    assertThat(underTest.get(A_KEY)).hasValue(\"v1\");","226","  public void load_invalidates_cache_if_unload_has_not_been_called() {","227","    underTest = create(emptyMap());","229","    underTest.set(\"foo\", \"bar\");","230","    \/\/ unload() is not called","233","    assertThat(underTest.get(\"foo\")).isEmpty();","345","  private void insertPropertyIntoDb(String key, String value) {"],"delete":["80","    assertThat(underTest.get(\"foo\").get()).isEqualTo(\"bar\");","89","    assertThat(underTest.get(\"foo\").get()).isEqualTo(\"bar\");","102","    assertThat(underTest.get(\"foo\").get()).isEqualTo(\"bar\");","149","    assertThat(underTest.get(\"foo\").get()).isEqualTo(\"1\");","159","    assertThat(underTest.get(\"foo\").get()).isEqualTo(\"from db\");","171","    assertThat(underTest.get(\"foo\").get()).isEqualTo(\"from system\");","209","    assertThat(underTest.get(A_KEY).get()).isEqualTo(\"v1\");","213","    assertThat(underTest.get(A_KEY).get()).isEqualTo(\"v1\");","218","    assertThat(underTest.get(A_KEY).get()).isEqualTo(\"v1\");","225","  public void load_throws_ISE_if_load_called_twice_without_unload_in_between() {","226","    underTest = create(Collections.emptyMap());","228","","229","    expectedException.expect(IllegalStateException.class);","230","    expectedException.expectMessage(\"load called twice for thread '\" + Thread.currentThread().getName()","231","      + \"' or state wasn't cleared last time it was used\");","345","  private void insertPropertyIntoDb(String key, @Nullable String value) {"]}]}},"8b8f07ed8becdef5cf45fc27567ea24cd43e124a":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/permissions\/project\/components\/PageHeader.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/permissions\/project\/components\/PageHeader.tsx":[{"add":["69","        ? translate('visibility', component.visibility, 'description', component.qualifier)"],"delete":["69","        ? translate('visibility', component.visibility, 'description')"]}]}},"668947a3d283074ea36006b9932ae91855f8ca73":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/__tests__\/App-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/App.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/__tests__\/App-test.tsx":[{"add":["22","import { getComponents } from '..\/..\/..\/api\/components';","24","import Search from '..\/Search';","32","jest.mock('..\/..\/..\/api\/components', () => ({","33","  getComponents: jest.fn().mockResolvedValue({ paging: { total: 0 }, components: [] })","34","}));","46","  jest.clearAllMocks();","77","it('should handle date filtering', () => {","78","  const wrapper = shallowRender();","79","  wrapper","80","    .find(Search)","81","    .props()","82","    .onDateChanged(new Date('2019-11-14T06:55:02.663Z'));","83","  expect(getComponents).toHaveBeenCalledWith({","84","    ...defaultSearchParameters,","85","    qualifiers: 'TRK',","86","    analyzedBefore: '2019-11-14'","87","  });","88","});","89","","97","  (getComponents as jest.Mock).mockImplementation(() =>","133","  expect((getComponents as jest.Mock).mock.calls).toHaveLength(2);","148","  return shallow<App>("],"delete":["30","jest.mock('..\/..\/..\/api\/components', () => ({ getComponents: jest.fn() }));","31","","32","const getComponents = require('..\/..\/..\/api\/components').getComponents as jest.Mock<any>;","44","  getComponents","45","    .mockImplementation(() => Promise.resolve({ paging: { total: 0 }, components: [] }))","46","    .mockClear();","84","  getComponents.mockImplementation(() =>","120","  expect(getComponents.mock.calls).toHaveLength(2);","135","  return shallow("]}],"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/App.tsx":[{"add":["23","import { toShortNotSoISOString } from 'sonar-ui-common\/helpers\/dates';","88","      analyzedBefore: analyzedBefore && toShortNotSoISOString(analyzedBefore),"],"delete":["23","import { toNotSoISOString } from 'sonar-ui-common\/helpers\/dates';","88","      analyzedBefore: analyzedBefore && toNotSoISOString(analyzedBefore),"]}]}},"fc10db309e0ef2124b2c3c1469bea606642bcf69":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/measure\/live\/IssueCounter.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/measure\/live\/IssueMetricFormulaFactoryImplTest.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/IssueCounterTest.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/IssueCounter.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/measure\/live\/IssueCounter.java":[{"add":["32","import static org.sonar.api.rules.RuleType.SECURITY_HOTSPOT;","33","","119","      if (group.getRuleType() != SECURITY_HOTSPOT.getDbConstant()) {","120","        absolute += group.getCount();","121","        if (group.isInLeak()) {","122","          leak += group.getCount();","123","        }"],"delete":["117","      absolute += group.getCount();","118","      if (group.isInLeak()) {","119","        leak += group.getCount();"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/measure\/live\/IssueMetricFormulaFactoryImplTest.java":[{"add":["126","      \/\/ exclude security hotspot","127","      newGroup(RuleType.SECURITY_HOTSPOT).setSeverity(Severity.CRITICAL).setCount(15),","152","      \/\/ exclude security hotspot","153","      newResolvedGroup(Issue.RESOLUTION_WONT_FIX, Issue.STATUS_RESOLVED).setCount(15).setRuleType(RuleType.SECURITY_HOTSPOT.getDbConstant()),","174","      \/\/ exclude security hotspot","175","      newGroup(RuleType.SECURITY_HOTSPOT).setStatus(Issue.STATUS_OPEN).setCount(12),","189","      \/\/ exclude security hotspot","190","      newGroup(RuleType.SECURITY_HOTSPOT).setEffort(9).setInLeak(true),","191","      newGroup(RuleType.SECURITY_HOTSPOT).setEffort(11).setInLeak(false),","533","      newGroup(RuleType.SECURITY_HOTSPOT).setEffort(9.0).setInLeak(true),"],"delete":[]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/IssueCounterTest.java":[{"add":["333","    underTest.onIssue(FILE2, createSecurityHotspot());","342","    assertThat(measureRepository.getRawMeasure(FILE1, ISSUES_METRIC).get().getIntValue()).isEqualTo(0);","343","    assertThat(measureRepository.getRawMeasure(FILE1, OPEN_ISSUES_METRIC).get().getIntValue()).isEqualTo(0);","346","    assertThat(measureRepository.getRawMeasure(FILE2, ISSUES_METRIC).get().getIntValue()).isEqualTo(0);","347","    assertThat(measureRepository.getRawMeasure(FILE2, OPEN_ISSUES_METRIC).get().getIntValue()).isEqualTo(0);","352","    assertThat(measureRepository.getRawMeasure(PROJECT, ISSUES_METRIC).get().getIntValue()).isEqualTo(0);","353","    assertThat(measureRepository.getRawMeasure(PROJECT, OPEN_ISSUES_METRIC).get().getIntValue()).isEqualTo(0);"],"delete":["333","    underTest.onIssue(FILE1, createSecurityHotspot());","342","    assertThat(measureRepository.getRawMeasure(FILE1, ISSUES_METRIC).get().getIntValue()).isEqualTo(2);","343","    assertThat(measureRepository.getRawMeasure(FILE1, OPEN_ISSUES_METRIC).get().getIntValue()).isEqualTo(2);","346","    assertThat(measureRepository.getRawMeasure(FILE2, ISSUES_METRIC).get().getIntValue()).isEqualTo(1);","347","    assertThat(measureRepository.getRawMeasure(FILE2, OPEN_ISSUES_METRIC).get().getIntValue()).isEqualTo(1);","352","    assertThat(measureRepository.getRawMeasure(PROJECT, ISSUES_METRIC).get().getIntValue()).isEqualTo(3);","353","    assertThat(measureRepository.getRawMeasure(PROJECT, OPEN_ISSUES_METRIC).get().getIntValue()).isEqualTo(3);"]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/IssueCounter.java":[{"add":["135","    if (issue.type() == RuleType.SECURITY_HOTSPOT) {","136","      return;","137","    }","138","","284","      counterForPeriod.add(issue);"],"delete":["280","      if (issue.type() != RuleType.SECURITY_HOTSPOT) {","281","        counterForPeriod.add(issue);","282","      }"]}]}},"ece4346b3e8165d48ea7a064902bc01df2081c24":{"changes":{"sonar-db\/src\/main\/java\/org\/sonar\/db\/source\/FileSourceDto.java":"MODIFY","sonar-db\/src\/test\/java\/org\/sonar\/db\/version\/v51\/FeedFileSourcesBinaryDataTest.java":"MODIFY","sonar-db\/src\/test\/java\/org\/sonar\/db\/source\/FileSourceDtoTest.java":"MODIFY"},"diff":{"sonar-db\/src\/main\/java\/org\/sonar\/db\/source\/FileSourceDto.java":[{"add":["21","import com.google.protobuf.CodedInputStream;","22","import com.google.protobuf.InvalidProtocolBufferException;","40","  private static final String SIZE_LIMIT_EXCEEDED_EXCEPTION_MESSAGE = \"Protocol message was too large.  May be malicious.  \" +","41","    \"Use CodedInputStream.setSizeLimit() to increase the size limit.\";","42","","97","      return decodeRegularSourceData(binaryData);","105","  private static DbFileSources.Data decodeRegularSourceData(byte[] binaryData) throws IOException {","106","    try (LZ4BlockInputStream lz4Input = new LZ4BlockInputStream(new ByteArrayInputStream(binaryData))) {","107","      return DbFileSources.Data.parseFrom(lz4Input);","108","    } catch (InvalidProtocolBufferException e) {","109","      if (SIZE_LIMIT_EXCEEDED_EXCEPTION_MESSAGE.equals(e.getMessage())) {","110","        return decodeHugeSourceData(binaryData);","111","      }","112","      throw e;","116","  private static DbFileSources.Data decodeHugeSourceData(byte[] binaryData) throws IOException {","117","    try (LZ4BlockInputStream lz4Input = new LZ4BlockInputStream(new ByteArrayInputStream(binaryData))) {","118","      CodedInputStream input = CodedInputStream.newInstance(lz4Input);","119","      input.setSizeLimit(Integer.MAX_VALUE);","120","      return DbFileSources.Data.parseFrom(input);"],"delete":["92","      return decodeSourceDataImpl(new ByteArrayInputStream(binaryData));","100","  \/**","101","   * Decompress and deserialize content of column FILE_SOURCES.BINARY_DATA.","102","   * The parameter \"input\" is always closed by this method.","103","   *\/","104","  public static DbFileSources.Data decodeSourceData(InputStream binaryInput) {","105","    try {","106","      return decodeSourceDataImpl(binaryInput);","107","    } catch (IOException e) {","108","      throw new IllegalStateException(\"Fail to decompress and deserialize source data\", e);","112","  private static DbFileSources.Data decodeSourceDataImpl(InputStream binaryInput) throws IOException {","113","    try (LZ4BlockInputStream lz4Input = new LZ4BlockInputStream(binaryInput)) {","114","      return DbFileSources.Data.parseFrom(lz4Input);"]}],"sonar-db\/src\/test\/java\/org\/sonar\/db\/version\/v51\/FeedFileSourcesBinaryDataTest.java":[{"add":["88","      return new FileSourceDto().decodeSourceData(rs.getBytes(1));"],"delete":["21","import java.io.InputStream;","89","      InputStream data = rs.getBinaryStream(1);","90","      return FileSourceDto.decodeSourceData(data);"]}],"sonar-db\/src\/test\/java\/org\/sonar\/db\/source\/FileSourceDtoTest.java":[{"add":["31","  private static final String LOREM_IPSUM = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam ac magna libero. \" +","32","    \"Integer eu quam vulputate, interdum ante quis, sodales mauris. Nam mollis ornare dolor at maximus. Cras pharetra aliquam fringilla. \" +","33","    \"Nunc hendrerit, elit eu mattis fermentum, ligula metus malesuada nunc, non fermentum augue tellus eu odio. Praesent ut vestibulum nibh. \" +","34","    \"Curabitur sit amet dignissim magna, at efficitur dolor. Ut non felis aliquam justo euismod gravida. Morbi eleifend vitae ante eu pulvinar. \" +","35","    \"Aliquam rhoncus magna quis lorem posuere semper.\";","36","","62","      .setBinaryData(new byte[] {1, 2, 3, 4, 5})","63","      .setId(id)","64","      .setFileUuid(fileUuid)","65","      .setProjectUuid(projectUuid);","72","","73","  @Test","74","  public void getSourceData_reads_Data_object_bigger_than_default_size_limit() {","75","    DbFileSources.Data build = createOver64MBDataStructure();","76","    byte[] bytes = FileSourceDto.encodeSourceData(build);","77","","78","    DbFileSources.Data data = new FileSourceDto().decodeSourceData(bytes);","79","    assertThat(data.getLinesCount()).isEqualTo(build.getLinesCount());","80","  }","81","","82","  private static DbFileSources.Data createOver64MBDataStructure() {","83","    DbFileSources.Data.Builder dataBuilder = DbFileSources.Data.newBuilder();","84","    DbFileSources.Line.Builder lineBuilder = DbFileSources.Line.newBuilder();","85","    for (int i = 0; i < 199999; i++) {","86","      dataBuilder.addLines(","87","        lineBuilder.setSource(LOREM_IPSUM)","88","          .setLine(i)","89","          .build());","90","    }","91","    return dataBuilder.build();","92","  }"],"delete":["56","        .setBinaryData(new byte[]{1, 2, 3, 4, 5})","57","        .setId(id)","58","        .setFileUuid(fileUuid)","59","        .setProjectUuid(projectUuid);"]}]}},"65820cf1d1c7c8c12b143c2a5aa6d3d3f6048479":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/log\/CeLogging.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/log\/CeLoggingTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/log\/CeLogging.java":[{"add":["21","import ch.qos.logback.classic.Logger;","27","import ch.qos.logback.core.sift.AppenderTracker;","28","import ch.qos.logback.core.util.Duration;","39","import org.sonar.process.LogbackHelper;","45","import static com.google.common.base.Preconditions.checkState;","59","  private static final long TIMEOUT_2_MINUTES = 1000 * 60 * 2L;","60","  private static final String CE_APPENDER_NAME = \"ce\";","61","  \/\/ using 0L as timestamp when retrieving appender to stop it will make it instantly eligible for removal","62","  private static final long STOPPING_TRACKER_TIMESTAMP = 0L;","63","","68","  private final LogbackHelper helper = new LogbackHelper();","120","      stopAppender(relativePath);","125","  private void stopAppender(String relativePath) {","126","    Appender<ILoggingEvent> appender = helper.getRootContext().getLogger(Logger.ROOT_LOGGER_NAME).getAppender(CE_APPENDER_NAME);","127","    checkState(appender instanceof SiftingAppender, \"Appender with name %s is null or not a SiftingAppender\", CE_APPENDER_NAME);","128","    AppenderTracker<ILoggingEvent> ceAppender = ((SiftingAppender) appender).getAppenderTracker();","129","    ceAppender.getOrCreate(relativePath, STOPPING_TRACKER_TIMESTAMP).stop();","130","  }","131","","182","    siftingAppender.setName(CE_APPENDER_NAME);","183","    siftingAppender.setTimeout(new Duration(TIMEOUT_2_MINUTES));"],"delete":["163","    siftingAppender.setName(\"ce\");"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/log\/CeLoggingTest.java":[{"add":["21","import ch.qos.logback.classic.Logger;","25","import ch.qos.logback.core.Appender;","27","import ch.qos.logback.core.joran.spi.JoranException;","31","import java.util.Collection;","34","import org.junit.After;","35","import org.junit.Before;","40","import org.slf4j.LoggerFactory;","43","import org.sonar.process.LogbackHelper;","49","import static org.mockito.Mockito.mock;","50","import static org.mockito.Mockito.when;","51","import static org.sonar.server.computation.log.CeLogging.MDC_LOG_PATH;","60","  private LogbackHelper helper = new LogbackHelper();","61","  private File dataDir;","62","","63","  @Before","64","  public void setUp() throws Exception {","65","    this.dataDir = temp.newFolder();","66","  }","67","","68","  @After","69","  public void resetLogback() throws JoranException {","70","    helper.resetFromXml(\"\/logback-test.xml\");","71","  }","72","","73","  @After","74","  public void cleanMDC() throws Exception {","75","    MDC.clear();","76","  }","77","","102","  public void initForTask_adds_path_of_ce_log_file_in_MDC() throws IOException {","103","    CeLogging underTest = new CeLogging(newSettings(dataDir, 5));","105","    CeTask task = createCeTask(\"TYPE1\", \"U1\");","107","    assertThat(MDC.get(MDC_LOG_PATH)).isNotEmpty().isEqualTo(LogFileRef.from(task).getRelativePath());","108","  }","109","","110","  @Test","111","  public void clearForTask_throws_ISE_if_CE_appender_is_not_configured() throws IOException {","112","    CeLogging underTest = new CeLogging(newSettings(dataDir, 5));","113","","114","    CeTask task = createCeTask(\"TYPE1\", \"U1\");","115","    underTest.initForTask(task);","116","","117","    expectedException.expect(IllegalStateException.class);","118","    expectedException.expectMessage(\"Appender with name ce is null or not a SiftingAppender\");","119","","121","  }","122","","123","  @Test","124","  public void clearForTask_throws_ISE_if_CE_appender_is_not_a_SiftingAppender() throws IOException {","125","    Appender<ILoggingEvent> mockCeAppender = mock(Appender.class);","126","    when(mockCeAppender.getName()).thenReturn(\"ce\");","127","    helper.getRootContext().getLogger(Logger.ROOT_LOGGER_NAME).addAppender(mockCeAppender);","128","","129","    CeLogging underTest = new CeLogging(newSettings(dataDir, 5));","130","","131","    CeTask task = createCeTask(\"TYPE1\", \"U1\");","132","    underTest.initForTask(task);","133","","134","    expectedException.expect(IllegalStateException.class);","135","    expectedException.expectMessage(\"Appender with name ce is null or not a SiftingAppender\");","136","","137","    underTest.clearForTask();","138","  }","139","","140","  @Test","141","  public void clearForTask_clears_MDC() throws IOException {","142","    setupCeAppender();","143","","144","    CeLogging underTest = new CeLogging(newSettings(dataDir, 5));","145","","146","    CeTask task = createCeTask(\"TYPE1\", \"U1\");","147","    underTest.initForTask(task);","148","    assertThat(MDC.get(MDC_LOG_PATH)).isNotEmpty().isEqualTo(LogFileRef.from(task).getRelativePath());","149","","150","    underTest.clearForTask();","151","    assertThat(MDC.get(MDC_LOG_PATH)).isNull();","152","  }","153","","154","  @Test","155","  public void cleanForTask_stops_only_appender_for_MDC_value() throws IOException {","156","    Logger rootLogger = setupCeAppender();","157","","158","    CeLogging underTest = new CeLogging(newSettings(dataDir, 5));","159","","160","    \/\/ init MDC","161","    underTest.initForTask(createCeTask(\"TYPE1\", \"U1\"));","162","    verifyNoAppender(rootLogger);","163","","164","    \/\/ logging will create and start the appender","165","    LoggerFactory.getLogger(getClass()).info(\"some log!\");","166","    verifyAllAppenderStarted(rootLogger, 1);","167","","168","    \/\/ init MDC and create appender for another task","169","    \/\/ (in the same thread, which should not happen, but it's good enough for our test)","170","    CeTask ceTask = createCeTask(\"TYPE1\", \"U2\");","171","    underTest.initForTask(ceTask);","172","    LoggerFactory.getLogger(getClass()).info(\"some other log!\");","173","    verifyAllAppenderStarted(rootLogger, 2);","174","","175","    \/\/ stop appender which is currently referenced in MDC","176","    underTest.clearForTask();","177","","178","    Appender appender = verifySingleAppenderIsStopped(rootLogger, 2);","179","    assertThat(appender.getName()).isEqualTo(\"ce-\" + LogFileRef.from(ceTask).getRelativePath());","185","      File file = new File(dataDir, format(\"U%d.log\", i));","191","    assertThat(dataDir.listFiles()).hasSize(5);","194","    CeLogging underTest = new CeLogging(newSettings(dataDir, 3));","195","    underTest.purgeDir(dataDir);","197","    assertThat(dataDir.listFiles()).hasSize(3);","198","    assertThat(dataDir.listFiles()).extracting(\"name\")","204","    FileUtils.touch(new File(dataDir, \"U1.log\"));","206","    CeLogging underTest = new CeLogging(newSettings(dataDir, 5));","207","    underTest.purgeDir(dataDir);","209","    assertThat(dataDir.listFiles()).extracting(\"name\").containsOnly(\"U1.log\");","214","    FileUtils.touch(new File(dataDir, \"U1.log\"));","216","    CeLogging underTest = new CeLogging(newSettings(dataDir, 0));","217","    underTest.purgeDir(dataDir);","219","    assertThat(dataDir.listFiles()).isEmpty();","227","    Settings settings = newSettings(dataDir, -1);","229","    logging.purgeDir(dataDir);","234","    SiftingAppender siftingAppender = CeLogging.createAppenderConfiguration(new LoggerContext(), dataDir);","241","    assertThat(siftingAppender.getDiscriminator().getKey()).isEqualTo(MDC_LOG_PATH);","242","    assertThat(siftingAppender.getTimeout().getMilliseconds()).isEqualTo(1000 * 60 * 2);","243","  }","244","","245","  private Logger setupCeAppender() {","246","    Logger rootLogger = helper.getRootContext().getLogger(Logger.ROOT_LOGGER_NAME);","247","    rootLogger.addAppender(CeLogging.createAppenderConfiguration(helper.getRootContext(), dataDir));","248","    return rootLogger;","249","  }","250","","251","  private void verifyNoAppender(Logger rootLogger) {","252","    Collection<Appender<ILoggingEvent>> allAppenders = getAllAppenders(rootLogger);","253","    assertThat(allAppenders).isEmpty();","254","  }","255","","256","  private void verifyAllAppenderStarted(Logger rootLogger, int expectedSize) {","257","    Collection<Appender<ILoggingEvent>> allAppenders = getAllAppenders(rootLogger);","258","    assertThat(allAppenders).hasSize(expectedSize);","259","    for (Appender<ILoggingEvent> appender : allAppenders) {","260","      assertThat(appender.isStarted()).isTrue();","261","    }","262","  }","263","","264","  private Appender verifySingleAppenderIsStopped(Logger rootLogger, int expectedSize) {","265","    Collection<Appender<ILoggingEvent>> allAppenders = getAllAppenders(rootLogger);","266","    assertThat(allAppenders).hasSize(expectedSize);","267","    Appender res = null;","268","    for (Appender<ILoggingEvent> appender : allAppenders) {","269","      if (!appender.isStarted()) {","270","        assertThat(res).describedAs(\"More than one appender found stopped\").isNull();","271","        res = appender;","272","      }","273","    }","274","    assertThat(res).describedAs(\"There should be one stopped appender\").isNotNull();","275","    return res;","276","  }","277","","278","  private Collection<Appender<ILoggingEvent>> getAllAppenders(Logger rootLogger) {","279","    Appender<ILoggingEvent> ceAppender = rootLogger.getAppender(\"ce\");","280","    assertThat(ceAppender).isInstanceOf(SiftingAppender.class);","281","    return ((SiftingAppender) ceAppender).getAppenderTracker().allComponents();","290","","291","  private static CeTask createCeTask(String type, String uuid) {","292","    return new CeTask.Builder().setType(type).setUuid(uuid).build();","293","  }"],"delete":["46","","52","    File dataDir = temp.newFolder();","75","  public void use_MDC_to_store_path_to_in_progress_task_logs() throws IOException {","76","    CeLogging underTest = new CeLogging(newSettings(temp.newFolder(), 5));","78","    CeTask task = new CeTask.Builder().setType(\"TYPE1\").setUuid(\"U1\").build();","80","    assertThat(MDC.get(CeLogging.MDC_LOG_PATH)).isNotEmpty().isEqualTo(LogFileRef.from(task).getRelativePath());","82","    assertThat(MDC.get(CeLogging.MDC_LOG_PATH)).isNull();","87","    File dir = temp.newFolder();","89","      File file = new File(dir, format(\"U%d.log\", i));","95","    assertThat(dir.listFiles()).hasSize(5);","98","    CeLogging underTest = new CeLogging(newSettings(dir, 3));","99","    underTest.purgeDir(dir);","101","    assertThat(dir.listFiles()).hasSize(3);","102","    assertThat(dir.listFiles()).extracting(\"name\")","108","    File dir = temp.newFolder();","109","    FileUtils.touch(new File(dir, \"U1.log\"));","111","    CeLogging underTest = new CeLogging(newSettings(dir, 5));","112","    underTest.purgeDir(dir);","114","    assertThat(dir.listFiles()).extracting(\"name\").containsOnly(\"U1.log\");","119","    File dir = temp.newFolder();","120","    FileUtils.touch(new File(dir, \"U1.log\"));","122","    CeLogging underTest = new CeLogging(newSettings(temp.newFolder(), 0));","123","    underTest.purgeDir(dir);","125","    assertThat(dir.listFiles()).isEmpty();","133","    Settings settings = newSettings(temp.newFolder(), -1);","135","    logging.purgeDir(temp.newFolder());","140","    File logsDir = temp.newFolder();","141","    SiftingAppender siftingAppender = CeLogging.createAppenderConfiguration(new LoggerContext(), logsDir);","148","    assertThat(siftingAppender.getDiscriminator().getKey()).isEqualTo(CeLogging.MDC_LOG_PATH);"]}]}},"777d3a179ecc4900883a699fd13c4b528509ccb2":{"changes":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/controllers\/web_api_controller.rb":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/controllers\/web_api_controller.rb":[{"add":["23","    # Fix a very strange bug that generates a server error when the format parameter is set","24","    params[:format] = nil if params[:format]"],"delete":["23",""]}]}},"159d8427bd256d7bcc27d8329bcb4baa15131e4b":{"changes":{"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/__tests__\/__snapshots__\/ComponentNavWarnings-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/ComponentNavMeta.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/__tests__\/__snapshots__\/ComponentNavMeta-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/ComponentNavWarnings.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/nav\/ContextNavBar.css":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/__tests__\/__snapshots__\/ComponentNavWarnings-test.tsx.snap":[{"add":["5","    className=\"badge badge-focus badge-medium display-inline-flex-center js-component-analysis-warnings flex-1\""],"delete":["5","    className=\"badge badge-focus badge-medium display-inline-flex-center js-component-analysis-warnings\""]}],"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/ComponentNavMeta.tsx":[{"add":["52","    <div className=\"navbar-context-meta flex-0\">"],"delete":["52","    <div className=\"navbar-context-meta\">"]}],"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/__tests__\/__snapshots__\/ComponentNavMeta-test.tsx.snap":[{"add":["4","  className=\"navbar-context-meta flex-0\"","44","  className=\"navbar-context-meta flex-0\"","88","  className=\"navbar-context-meta flex-0\""],"delete":["4","  className=\"navbar-context-meta\"","44","  className=\"navbar-context-meta\"","88","  className=\"navbar-context-meta\""]}],"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/ComponentNavWarnings.tsx":[{"add":["53","        <div className=\"badge badge-focus badge-medium display-inline-flex-center js-component-analysis-warnings flex-1\">"],"delete":["53","        <div className=\"badge badge-focus badge-medium display-inline-flex-center js-component-analysis-warnings\">"]}],"server\/sonar-web\/src\/main\/js\/components\/nav\/ContextNavBar.css":[{"add":[],"delete":["76","  min-width: 0;"]}]}},"f76f82c6ef66e60e4986521d141514763e5c405a":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/util\/RubyUtilsTest.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/bootstrap\/GlobalContainer.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/server\/ws\/Request.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/utils\/DateUtils.java":"MODIFY","sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/utils\/DateUtilsTest.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/repository\/QualityProfileProviderTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/platformlevel\/PlatformLevel1.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionComponentsTest.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/ProjectAnalysisInfo.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/IssueQueryFactoryTest.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/ProjectAnalysisInfoTest.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/utils\/System2.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/rule\/ActiveRulesProviderTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/IssueQueryFactory.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionTest.java":[{"add":["21","import java.time.Clock;","98","  private IssueQueryFactory issueQueryFactory = new IssueQueryFactory(dbClient, Clock.systemUTC(), userSessionRule);","101","  private SearchResponseLoader searchResponseLoader = new SearchResponseLoader(userSessionRule, dbClient, new ActionFinder(userSessionRule),","102","    new TransitionService(userSessionRule, issueWorkflow));"],"delete":["97","  private IssueQueryFactory issueQueryFactory = new IssueQueryFactory(dbClient, System2.INSTANCE, userSessionRule);","100","  private SearchResponseLoader searchResponseLoader = new SearchResponseLoader(userSessionRule, dbClient, new ActionFinder(userSessionRule), new TransitionService(userSessionRule, issueWorkflow));"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/util\/RubyUtilsTest.java":[{"add":["133","    throwable.expect(RuntimeException.class);"],"delete":["26","import org.sonar.api.utils.SonarException;","134","    throwable.expect(SonarException.class);"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/bootstrap\/GlobalContainer.java":[{"add":["21","import java.time.Clock;","97","      Clock.systemDefaultZone(),"],"delete":[]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/server\/ws\/Request.java":[{"add":["247","    } catch (RuntimeException notDateException) {"],"delete":["34","import org.sonar.api.utils.SonarException;","248","    } catch (SonarException notDateException) {"]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/utils\/DateUtils.java":[{"add":["21","import java.time.Instant;","22","import java.time.LocalDate;","23","import java.time.OffsetDateTime;","24","import java.time.ZoneId;","25","import java.time.format.DateTimeFormatter;","26","import java.time.format.DateTimeParseException;","27","import java.time.temporal.ChronoUnit;","44","  private static final DateTimeFormatter DATETIME_FORMATTER = DateTimeFormatter.ofPattern(DATETIME_FORMAT);","49","  \/**","50","   * Warning: relies on default timezone!","51","   *\/","53","    return d.toInstant().atZone(ZoneId.systemDefault()).toLocalDate().toString();","56","  \/**","57","   * Warning: relies on default timezone!","58","   *\/","60","    return formatDateTime(OffsetDateTime.ofInstant(d.toInstant(), ZoneId.systemDefault()));","63","  \/**","64","   * Warning: relies on default timezone!","65","   *\/","67","    return formatDateTime(OffsetDateTime.ofInstant(Instant.ofEpochMilli(ms), ZoneId.systemDefault()));","70","  \/**","71","   * @since 6.6","72","   *\/","73","  public static String formatDateTime(OffsetDateTime dt) {","74","    return DATETIME_FORMATTER.format(dt);","75","  }","76","","77","  \/**","78","   * Warning: relies on default timezone!","79","   *\/","81","    return date == null ? \"\" : formatDateTime(date);","95","   * Return a date at the start of day.","100","    return Date.from(parseLocalDate(s).atStartOfDay(ZoneId.systemDefault()).toInstant());","125","   * @since 6.6","126","   *\/","127","  public static LocalDate parseLocalDate(String s) {","128","    try {","129","      return LocalDate.parse(s);","130","    } catch (DateTimeParseException e) {","131","      throw MessageException.of(\"The date '\" + s + \"' does not respect format '\" + DATE_FORMAT + \"'\", e);","132","    }","133","  }","134","","135","  \/**","136","   * Parse format {@link #DATE_FORMAT}. This method never throws exception.","137","   *","138","   * @param s any string","139","   * @return the date, {@code null} if parsing error or if parameter is {@code null}","140","   * @since 6.6","141","   *\/","142","  @CheckForNull","143","  public static LocalDate parseLocalDateQuietly(@Nullable String s) {","144","    LocalDate date = null;","145","    if (s != null) {","146","      try {","147","        date = parseLocalDate(s);","148","      } catch (RuntimeException e) {","149","        \/\/ ignore","150","      }","151","","152","    }","153","    return date;","154","  }","155","","156","  \/**","161","    return Date.from(parseOffsetDateTime(s).toInstant());","162","  }","163","","164","  \/**","165","   * @param s string in format {@link #DATETIME_FORMAT}","166","   * @throws SonarException when string cannot be parsed","167","   * @since 6.6","168","   *\/","169","  public static OffsetDateTime parseOffsetDateTime(String s) {","170","    try {","171","      return OffsetDateTime.parse(s, DATETIME_FORMATTER);","172","    } catch (DateTimeParseException e) {","173","      throw MessageException.of(\"The date '\" + s + \"' does not respect format '\" + DATETIME_FORMAT + \"'\", e);","198","   * Parse format {@link #DATETIME_FORMAT}. This method never throws exception.","199","   *","200","   * @param s any string","201","   * @return the datetime, {@code null} if parsing error or if parameter is {@code null}","202","   * @since 6.6","203","   *\/","204","  @CheckForNull","205","  public static OffsetDateTime parseOffsetDateTimeQuietly(@Nullable String s) {","206","    OffsetDateTime datetime = null;","207","    if (s != null) {","208","      try {","209","        datetime = parseOffsetDateTime(s);","210","      } catch (RuntimeException e) {","211","        \/\/ ignore","212","      }","213","","214","    }","215","    return datetime;","216","  }","217","","218","  \/**","219","   * Warning: may rely on default timezone!","230","    OffsetDateTime odt = parseOffsetDateTimeQuietly(stringDate);","231","    if (odt != null) {","232","      return Date.from(odt.toInstant());","235","    LocalDate ld = parseLocalDateQuietly(stringDate);","236","    checkArgument(ld != null, \"Date '%s' cannot be parsed as either a date or date+time\", stringDate);","238","    return Date.from(ld.atStartOfDay(ZoneId.systemDefault()).toInstant());","242","   * Warning: may rely on default timezone!","252","   * So '2016-09-01' would return a date equivalent to '2016-09-02T00:00:00+0000' in GMT (Warning: relies on default timezone!)","284","    return Date.from(date.toInstant().plus(numberOfDays, ChronoUnit.DAYS));"],"delete":["21","import java.io.NotSerializableException;","22","import java.io.ObjectInputStream;","23","import java.io.ObjectOutputStream;","24","import java.lang.ref.Reference;","25","import java.lang.ref.SoftReference;","26","import java.text.DateFormat;","27","import java.text.FieldPosition;","28","import java.text.ParsePosition;","29","import java.text.SimpleDateFormat;","46","  private static final ThreadSafeDateFormat THREAD_SAFE_DATE_FORMAT = new ThreadSafeDateFormat(DATE_FORMAT);","47","  private static final ThreadSafeDateFormat THREAD_SAFE_DATETIME_FORMAT = new ThreadSafeDateFormat(DATETIME_FORMAT);","53","    return THREAD_SAFE_DATE_FORMAT.format(d);","57","    return THREAD_SAFE_DATETIME_FORMAT.format(d);","61","    return THREAD_SAFE_DATETIME_FORMAT.format(new Date(ms));","65","    return date == null ? \"\" : THREAD_SAFE_DATETIME_FORMAT.format(date);","83","    ParsePosition pos = new ParsePosition(0);","84","    Date result = THREAD_SAFE_DATE_FORMAT.parse(s, pos);","85","    if (pos.getIndex() != s.length()) {","86","      throw new SonarException(\"The date '\" + s + \"' does not respect format '\" + DATE_FORMAT + \"'\");","87","    }","88","    return result;","116","","118","    ParsePosition pos = new ParsePosition(0);","119","    Date result = THREAD_SAFE_DATETIME_FORMAT.parse(s, pos);","120","    if (pos.getIndex() != s.length()) {","121","      throw new SonarException(\"The date '\" + s + \"' does not respect format '\" + DATETIME_FORMAT + \"'\");","123","    return result;","157","    Date date = parseDateTimeQuietly(stringDate);","158","    if (date != null) {","159","      return date;","162","    date = parseDateQuietly(stringDate);","163","    checkArgument(date != null, \"Date '%s' cannot be parsed as either a date or date+time\", stringDate);","165","    return date;","178","   * So '2016-09-01' would return a date equivalent to '2016-09-02T00:00:00+0000' in GMT","210","    return org.apache.commons.lang.time.DateUtils.addDays(date, numberOfDays);","213","  static class ThreadSafeDateFormat extends DateFormat {","214","    private final String format;","215","    private final ThreadLocal<Reference<DateFormat>> cache = new ThreadLocal<Reference<DateFormat>>() {","216","      @Override","217","      public Reference<DateFormat> get() {","218","        Reference<DateFormat> softRef = super.get();","219","        if (softRef == null || softRef.get() == null) {","220","          SimpleDateFormat sdf = new SimpleDateFormat(format);","221","          sdf.setLenient(false);","222","          softRef = new SoftReference<>(sdf);","223","          super.set(softRef);","224","        }","225","        return softRef;","226","      }","227","    };","228","","229","    ThreadSafeDateFormat(String format) {","230","      this.format = format;","231","    }","232","","233","    private DateFormat getDateFormat() {","234","      return cache.get().get();","235","    }","236","","237","    @Override","238","    public StringBuffer format(Date date, StringBuffer toAppendTo, FieldPosition fieldPosition) {","239","      return getDateFormat().format(date, toAppendTo, fieldPosition);","240","    }","241","","242","    @Override","243","    public Date parse(String source, ParsePosition pos) {","244","      return getDateFormat().parse(source, pos);","245","    }","246","","247","    private void readObject(ObjectInputStream ois) throws NotSerializableException {","248","      throw new NotSerializableException();","249","    }","250","","251","    private void writeObject(ObjectOutputStream ois) throws NotSerializableException {","252","      throw new NotSerializableException();","253","    }","254","  }"]}],"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/utils\/DateUtilsTest.java":[{"add":["51","    expectedException.expect(MessageException.class);","57","    expectedException.expect(MessageException.class);","70","    expectedException.expect(MessageException.class);","82","    expectedException.expect(MessageException.class);","88","    expectedException.expect(MessageException.class);","102","    assertThat(DateUtils.formatDate(new Date())).hasSize(10);"],"delete":["24","import java.util.ArrayList;","26","import java.util.List;","33","import static org.assertj.core.api.Fail.fail;","54","    expectedException.expect(SonarException.class);","60","    expectedException.expect(SonarException.class);","73","    expectedException.expect(SonarException.class);","85","    expectedException.expect(SonarException.class);","91","    expectedException.expect(SonarException.class);","105","    assertThat(DateUtils.formatDate(new Date()).length()).isEqualTo(10);","196","  \/**","197","   * Cordially copied from XStream unit test","198","   * See http:\/\/koders.com\/java\/fid8A231D75F2C6E6909FB26BCA11C12D08AD05FB50.aspx?s=ThreadSafeDateFormatTest","199","   *\/","200","  @Test","201","  public void shouldBeThreadSafe() throws Exception {","202","    final DateUtils.ThreadSafeDateFormat format = new DateUtils.ThreadSafeDateFormat(\"yyyy-MM-dd'T'HH:mm:ss,S z\");","203","    final Date now = new Date();","204","    final List<Throwable> throwables = new ArrayList<>();","205","","206","    final ThreadGroup tg = new ThreadGroup(\"shouldBeThreadSafe\") {","207","      @Override","208","      public void uncaughtException(Thread t, Throwable e) {","209","        throwables.add(e);","210","        super.uncaughtException(t, e);","211","      }","212","    };","213","","214","    final int[] counter = new int[1];","215","    counter[0] = 0;","216","    final Thread[] threads = new Thread[10];","217","    for (int i = 0; i < threads.length; ++i) {","218","      threads[i] = new Thread(tg, \"JUnit Thread \" + i) {","219","","220","        @Override","221","        public void run() {","222","          int i = 0;","223","          try {","224","            synchronized (this) {","225","              notifyAll();","226","              wait();","227","            }","228","            while (i < 1000 && !interrupted()) {","229","              String formatted = format.format(now);","230","              Thread.yield();","231","              assertThat(now).isEqualTo(format.parse(formatted));","232","              ++i;","233","            }","234","          } catch (Exception e) {","235","            fail(\"Unexpected exception: \" + e);","236","          }","237","          synchronized (counter) {","238","            counter[0] += i;","239","          }","240","        }","241","","242","      };","243","    }","244","","245","    for (int i = 0; i < threads.length; ++i) {","246","      synchronized (threads[i]) {","247","        threads[i].start();","248","        threads[i].wait();","249","      }","250","    }","251","","252","    for (int i = 0; i < threads.length; ++i) {","253","      synchronized (threads[i]) {","254","        threads[i].notifyAll();","255","      }","256","    }","257","","258","    Thread.sleep(1000);","259","","260","    for (int i = 0; i < threads.length; ++i) {","261","      threads[i].interrupt();","262","    }","263","    for (int i = 0; i < threads.length; ++i) {","264","      synchronized (threads[i]) {","265","        threads[i].join();","266","      }","267","    }","268","","269","    assertThat(throwables).isEmpty();","270","    assertThat(counter[0]).isGreaterThanOrEqualTo(threads.length);","271","  }"]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/repository\/QualityProfileProviderTest.java":[{"add":["23","import java.util.Date;","31","import org.sonar.api.utils.DateUtils;","73","    response.add(QualityProfile.newBuilder().setKey(\"profile\").setName(\"profile\").setLanguage(\"lang\").setRulesUpdatedAt(DateUtils.formatDateTime(new Date())).build());"],"delete":["71","    response.add(QualityProfile.newBuilder().setKey(\"profile\").setName(\"profile\").setLanguage(\"lang\").build());"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/platformlevel\/PlatformLevel1.java":[{"add":["21","import java.time.Clock;","104","      Clock.systemDefaultZone(),"],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionComponentsTest.java":[{"add":["22","import java.time.Clock;","96","  private IssueQueryFactory issueQueryFactory = new IssueQueryFactory(dbClient, Clock.systemUTC(), userSession);"],"delete":["95","  private IssueQueryFactory issueQueryFactory = new IssueQueryFactory(dbClient, System2.INSTANCE, userSession);"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/ProjectAnalysisInfo.java":[{"add":["21","import java.time.Clock;","37","  private final Clock clock;","43","  public ProjectAnalysisInfo(Configuration settings, Clock clock) {","45","    this.clock = clock;","59","      return Date.from(clock.instant());","64","    } catch (RuntimeException e) {","66","    }","67","    try {","68","      \/\/ sonar.projectDate may have been specified as a date","70","    } catch (RuntimeException e) {","71","      throw new IllegalArgumentException(\"Illegal value for '\" + CoreProperties.PROJECT_DATE_PROPERTY + \"'\", e);"],"delete":["23","","29","import org.sonar.api.utils.SonarException;","30","import org.sonar.api.utils.System2;","39","  private final System2 system2;","45","  public ProjectAnalysisInfo(Configuration settings, System2 system2) {","47","    this.system2 = system2;","61","      return new Date(system2.now());","63","    Date date;","67","    } catch (SonarException e) {"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/IssueQueryFactoryTest.java":[{"add":["21","import java.time.Clock;","22","import java.time.ZoneOffset;","62","  private Clock clock = mock(Clock.class);","63","  private IssueQueryFactory underTest = new IssueQueryFactory(db.getDbClient(), clock, userSession);","130","  public void creation_date_support_localdate() {","131","    SearchWsRequest request = new SearchWsRequest()","132","      .setCreatedAt(\"2013-04-16\");","133","","134","    IssueQuery query = underTest.create(request);","135","","136","    assertThat(query.createdAt()).isEqualTo(DateUtils.parseDate(\"2013-04-16\"));","137","  }","138","","139","  @Test","140","  public void creation_date_support_zoneddatetime() {","141","    SearchWsRequest request = new SearchWsRequest()","142","      .setCreatedAt(\"2013-04-16T09:08:24+0200\");","143","","144","    IssueQuery query = underTest.create(request);","145","","146","    assertThat(query.createdAt()).isEqualTo(DateUtils.parseDateTime(\"2013-04-16T09:08:24+0200\"));","147","  }","148","","149","  @Test","426","        .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.componentUuids()), IssueQuery::isMainBranch)","427","        .containsOnly(branch.uuid(), singletonList(file.uuid()), false);","438","        .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.projectUuids()), IssueQuery::isMainBranch)","439","        .containsOnly(project.uuid(), singletonList(project.uuid()), true);","443","        .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.projectUuids()), IssueQuery::isMainBranch)","444","        .containsOnly(project.uuid(), singletonList(project.uuid()), true);","464","    when(clock.instant()).thenReturn(now.toInstant());","465","    when(clock.getZone()).thenReturn(ZoneOffset.UTC);"],"delete":["29","import org.sonar.api.utils.System2;","61","  private System2 system = mock(System2.class);","62","  private IssueQueryFactory underTest = new IssueQueryFactory(db.getDbClient(), system, userSession);","405","      .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.componentUuids()), IssueQuery::isMainBranch)","406","      .containsOnly(branch.uuid(), singletonList(file.uuid()), false);","417","      .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.projectUuids()), IssueQuery::isMainBranch)","418","      .containsOnly(project.uuid(), singletonList(project.uuid()), true);","422","      .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.projectUuids()), IssueQuery::isMainBranch)","423","      .containsOnly(project.uuid(), singletonList(project.uuid()), true);","443","    when(system.now()).thenReturn(now.getTime());"]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/ProjectAnalysisInfoTest.java":[{"add":["21","import java.time.Clock;","23","import java.time.OffsetDateTime;","25","import java.time.ZoneOffset;","27","import org.junit.Rule;","29","import org.junit.rules.ExpectedException;","37","","38","  @Rule","39","  public ExpectedException thrown = ExpectedException.none();","40","","41","  @Test","42","  public void testSimpleDateTime() {","43","    MapSettings settings = new MapSettings();","44","    settings.appendProperty(CoreProperties.PROJECT_DATE_PROPERTY, \"2017-01-01T12:13:14+0200\");","45","    settings.appendProperty(CoreProperties.PROJECT_VERSION_PROPERTY, \"version\");","46","    Clock clock = mock(Clock.class);","47","    ProjectAnalysisInfo info = new ProjectAnalysisInfo(settings.asConfig(), clock);","48","    info.start();","49","    OffsetDateTime date = OffsetDateTime.of(2017, 1, 1, 12, 13, 14, 0, ZoneOffset.ofHours(2));","50","","51","    assertThat(info.analysisDate()).isEqualTo(Date.from(date.toInstant()));","52","    assertThat(info.analysisVersion()).isEqualTo(\"version\");","53","  }","54","","59","    Clock clock = mock(Clock.class);","60","    ProjectAnalysisInfo info = new ProjectAnalysisInfo(settings.asConfig(), clock);","65","  }","66","","67","  @Test","68","  public void emptyDate() {","69","    MapSettings settings = new MapSettings();","70","    settings.appendProperty(CoreProperties.PROJECT_DATE_PROPERTY, \"\");","71","    settings.appendProperty(CoreProperties.PROJECT_VERSION_PROPERTY, \"version\");","72","    Clock clock = mock(Clock.class);","73","    ProjectAnalysisInfo info = new ProjectAnalysisInfo(settings.asConfig(), clock);","74","","75","    thrown.expect(RuntimeException.class);","76","","77","    info.start();"],"delete":["27","import org.sonar.api.utils.System2;","37","    settings.appendProperty(CoreProperties.PROJECT_VERSION_PROPERTY, \"version\");","38","    System2 system = mock(System2.class);","39","    ProjectAnalysisInfo info = new ProjectAnalysisInfo(settings.asConfig(), system);","44","    assertThat(info.analysisVersion()).isEqualTo(\"version\");"]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/utils\/System2.java":[{"add":["22","import java.time.Clock;","75","   * @deprecated since 6.6 use {@link Clock} that is available in pico.","77","  @Deprecated"],"delete":[]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/rule\/ActiveRulesProviderTest.java":[{"add":["22","import java.util.Date;","31","import org.sonar.api.utils.DateUtils;","83","      QualityProfile p = QualityProfile.newBuilder().setKey(k).setLanguage(k).setRulesUpdatedAt(DateUtils.formatDateTime(new Date())).build();"],"delete":["81","      QualityProfile p = QualityProfile.newBuilder().setKey(k).setLanguage(k).build();"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/IssueQueryFactory.java":[{"add":["27","import java.time.Clock;","28","import java.time.OffsetDateTime;","29","import java.time.Period;","92","  private final Clock clock;","95","  public IssueQueryFactory(DbClient dbClient, Clock clock, UserSession userSession) {","97","    this.clock = clock;","140","      actualCreatedAfter = Date.from(","141","        OffsetDateTime.now(clock)","142","          .minus(Period.parse(\"P\" + createdInLast.toUpperCase(Locale.ENGLISH)))","143","          .toInstant());","396","  private static void setBranch(IssueQuery.Builder builder, ComponentDto component, @Nullable String branch) {"],"delete":["42","import org.joda.time.DateTime;","43","import org.joda.time.format.ISOPeriodFormat;","47","import org.sonar.api.utils.System2;","92","  private final System2 system;","95","  public IssueQueryFactory(DbClient dbClient, System2 system, UserSession userSession) {","97","    this.system = system;","140","      actualCreatedAfter = new DateTime(system.now()).minus(","141","        ISOPeriodFormat.standard().parsePeriod(\"P\" + createdInLast.toUpperCase(Locale.ENGLISH))).toDate();","394","  private static void setBranch(IssueQuery.Builder builder, ComponentDto component, @Nullable String branch){"]}]}},"8cc12b67b83105eb44dd8beb296640971b6fe17d":{"changes":{"server\/sonar-process\/src\/main\/java\/org\/sonar\/process\/SecurityManagement.java":"MODIFY"},"diff":{"server\/sonar-process\/src\/main\/java\/org\/sonar\/process\/SecurityManagement.java":[{"add":["21","import java.security.CodeSource;","23","import java.security.PermissionCollection;","24","import java.security.Permissions;","73","    \/\/ workaround for SONAR-13559 \/ JDK-8014008","74","    \/\/ borrowed as-is from https:\/\/github.com\/elastic\/elasticsearch\/pull\/14274","75","    @Override","76","    public PermissionCollection getPermissions(CodeSource codesource) {","77","      \/\/ code should not rely on this method, or at least use it correctly:","78","      \/\/ https:\/\/bugs.openjdk.java.net\/browse\/JDK-8014008","79","      \/\/ return them a new empty permissions object so jvisualvm etc work","80","      for (StackTraceElement element : Thread.currentThread().getStackTrace()) {","81","        if (\"sun.rmi.server.LoaderHandler\".equals(element.getClassName()) &&","82","          \"loadClass\".equals(element.getMethodName())) {","83","          return new Permissions();","84","        }","85","      }","86","      \/\/ return UNSUPPORTED_EMPTY_COLLECTION since it is safe.","87","      return super.getPermissions(codesource);","88","    }","89",""],"delete":[]}]}},"2278146794b220eb8b859759527a8578370bb0fa":{"changes":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/report\/ComponentsPublisherTest.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/ComponentsPublisher.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/report\/ComponentsPublisherTest.java":[{"add":["157","  public void should_set_modified_name_with_branch() throws IOException {","158","    ProjectAnalysisInfo projectAnalysisInfo = mock(ProjectAnalysisInfo.class);","159","    when(projectAnalysisInfo.analysisDate()).thenReturn(DateUtils.parseDate(\"2012-12-12\"));","160","","161","    ProjectDefinition rootDef = ProjectDefinition.create()","162","      .setKey(\"foo\")","163","      .setDescription(\"Root description\")","164","      .setBaseDir(temp.newFolder())","165","      .setWorkDir(temp.newFolder())","166","      .setProperty(CoreProperties.PROJECT_BRANCH_PROPERTY, \"my_branch\");","167","","168","    DefaultInputModule root = new DefaultInputModule(rootDef, 1);","169","","170","    moduleHierarchy = mock(InputModuleHierarchy.class);","171","    when(moduleHierarchy.root()).thenReturn(root);","172","","173","    ComponentsPublisher publisher = new ComponentsPublisher(moduleHierarchy, tree, branchConfiguration);","174","    publisher.publish(writer);","175","    Component rootProtobuf = reader.readComponent(1);","176","    assertThat(rootProtobuf.getKey()).isEqualTo(\"foo\");","177","    assertThat(rootProtobuf.getName()).isEqualTo(\"foo my_branch\");","178","  }","179","","180","  @Test"],"delete":[]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/ComponentsPublisher.java":[{"add":["260","      return module.definition().getName() + \" \" + module.definition().getBranch();"],"delete":["260","      return module.definition().getOriginalName() + \" \" + module.definition().getBranch();"]}]}},"ae779528b341900152976ceefbef862ce715dbe6":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/security-hotspots\/components\/__tests__\/HotspotSnippetContainer-test.tsx":"MODIFY","sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/Line.css":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/LineIssuesIndicator.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/Line-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/LineNumber-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/CrossComponentSourceViewerWrapper.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/DuplicationPopup.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/LineDuplicationBlock-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/ComponentSourceSnippetGroupViewer-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/security-hotspots\/components\/__tests__\/__snapshots__\/HotspotSnippetContainer-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/LineNumber.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/LineDuplicationBlock.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/__snapshots__\/Line-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/__snapshots__\/LineIssuesIndicator-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/SnippetViewer-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/__snapshots__\/LineDuplicationBlock-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/SnippetViewer.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/security-hotspots\/components\/__tests__\/HotspotSnippetContainerRenderer-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/__snapshots__\/SCMPopup-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/LineIssuesIndicator-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/LineSCM-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/__snapshots__\/SnippetViewer-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/LineSCM.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/Line.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/LineCoverage.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/SCMPopup.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/security-hotspots\/components\/__tests__\/__snapshots__\/HotspotSnippetContainerRenderer-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/ComponentSourceSnippetGroupViewer.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/security-hotspots\/components\/HotspotSnippetContainer.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/security-hotspots\/components\/HotspotSnippetContainerRenderer.tsx":"MODIFY","\/dev\/null":"DELETE","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/__snapshots__\/LineSCM-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/__snapshots__\/CrossComponentSourceViewerWrapper-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/SourceViewerBase.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/__snapshots__\/LineNumber-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/LineOptionsPopup.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/LineCoverage-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/SCMPopup-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/__snapshots__\/LineOptionsPopup-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/SourceViewerCode.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/LineOptionsPopup-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/__snapshots__\/LineCoverage-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/CrossComponentSourceViewerWrapper-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/__tests__\/__snapshots__\/SourceViewerBase-test.tsx.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/security-hotspots\/components\/__tests__\/HotspotSnippetContainer-test.tsx":[{"add":[],"delete":["157","it('should handle line popups', async () => {","158","  (getSources as jest.Mock).mockResolvedValueOnce(","159","    range(5, 18).map(line => mockSourceLine({ line }))","160","  );","161","","162","  const wrapper = shallowRender();","163","  await waitAndUpdate(wrapper);","164","","165","  const params = wrapper.state().sourceLines[0];","166","","167","  wrapper","168","    .find(HotspotSnippetContainerRenderer)","169","    .props()","170","    .onLinePopupToggle(params);","171","","172","  expect(wrapper.state().linePopup).toEqual(params);","173","","174","  \/\/ Close it","175","  wrapper","176","    .find(HotspotSnippetContainerRenderer)","177","    .props()","178","    .onLinePopupToggle(params);","179","","180","  expect(wrapper.state().linePopup).toBeUndefined();","181","});","182",""]}],"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["2490","source_viewer.line_X=Line: {0}","2491","source_viewer.click_for_scm_info=Click to see SCM information","2492","source_viewer.author_X=Author: {0}","2503","source_viewer.tooltip.scm.commited_on=Committed on","2504","source_viewer.tooltip.scm.revision=Revision","2505","","2506","source_viewer.issues_on_line.show=Click to show all issues on this line","2507","source_viewer.issues_on_line.hide=Click to hide all issues on this line"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/Line.css":[{"add":["33",".source-line [role='button'] {","34","  cursor: pointer;","35","}","36","","192",".source-line-scm .dropdown {","193","  display: block;","194","}","195","","196",".source-line-scm [role='button'] {","197","  height: 18px;","198","}","199",""],"delete":["142",".source-meta[role='button'] {","143","  cursor: pointer;","144","}","145","","154",".source-line-number:before {","155","  content: attr(data-line-number);","156","}","157","","191",".source-duplications-expanded .source-line-duplications {","192","  display: none;","193","}","194","","195",".source-duplications-expanded .source-line-duplications-extra {","196","  display: table-cell;","197","}","198","","211",".source-line-scm-inner:before {","212","  content: attr(data-author);","213","}","214","","220",".source-line-bar[role='button'] {","221","  cursor: pointer;","222","}","223",""]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/LineIssuesIndicator.tsx":[{"add":["22","import { translate } from 'sonar-ui-common\/helpers\/l10n';","25","export interface LineIssuesIndicatorProps {","27","  issuesOpen?: boolean;","32","export function LineIssuesIndicator(props: LineIssuesIndicatorProps) {","33","  const { issues, issuesOpen, line } = props;","34","  const hasIssues = issues.length > 0;","35","  const className = classNames('source-meta', 'source-line-issues', {","36","    'source-line-with-issues': hasIssues","37","  });","38","  const mostImportantIssue = hasIssues ? sortByType(issues)[0] : null;","39","","40","  const handleClick = (e: React.MouseEvent<HTMLElement>) => {","41","    e.preventDefault();","42","    e.currentTarget.blur();","43","    props.onClick();","46","  return (","47","    <td className={className} data-line-number={line.line}>","48","      {hasIssues && (","49","        <span","50","          aria-label={translate('source_viewer.issues_on_line', issuesOpen ? 'hide' : 'show')}","51","          onClick={handleClick}","52","          role=\"button\"","53","          tabIndex={0}>","54","          {mostImportantIssue != null && <IssueIcon type={mostImportantIssue.type} \/>}","55","          {issues.length > 1 && <span className=\"source-line-issues-counter\">{issues.length}<\/span>}","56","        <\/span>","57","      )}","58","    <\/td>","59","  );","61","","62","export default React.memo(LineIssuesIndicator);"],"delete":["24","interface Props {","30","export default class LineIssuesIndicator extends React.PureComponent<Props> {","31","  handleClick = (event: React.MouseEvent<HTMLElement>) => {","32","    event.preventDefault();","33","    this.props.onClick();","36","  render() {","37","    const { issues, line } = this.props;","38","    const hasIssues = issues.length > 0;","39","    const className = classNames('source-meta', 'source-line-issues', {","40","      'source-line-with-issues': hasIssues","41","    });","42","    const mostImportantIssue = hasIssues ? sortByType(issues)[0] : null;","43","","44","    return (","45","      <td","46","        className={className}","47","        data-line-number={line.line}","48","        onClick={hasIssues ? this.handleClick : undefined}","49","        role={hasIssues ? 'button' : undefined}","50","        tabIndex={hasIssues ? 0 : undefined}>","51","        {mostImportantIssue != null && <IssueIcon type={mostImportantIssue.type} \/>}","52","        {issues.length > 1 && <span className=\"source-line-issues-counter\">{issues.length}<\/span>}","53","      <\/td>","54","    );","55","  }"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/Line-test.tsx":[{"add":[],"delete":["108","      linePopup={undefined}","110","      onLinePopupToggle={jest.fn()}"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/LineNumber-test.tsx":[{"add":["21","import { LineNumber, LineNumberProps } from '..\/LineNumber';","23","it('should render correctly', () => {","24","  expect(shallowRender()).toMatchSnapshot('default');","25","  expect(shallowRender({ line: { line: 0 } })).toMatchSnapshot('no line number');","28","function shallowRender(props: Partial<LineNumberProps> = {}) {","29","  return shallow(<LineNumber line={{ line: 3 }} {...props} \/>);","30","}"],"delete":["21","import { click } from 'sonar-ui-common\/helpers\/testUtils';","22","import LineNumber from '..\/LineNumber';","24","it('render line 3', () => {","25","  const line = { line: 3 };","26","  const wrapper = shallow(<LineNumber line={line} onPopupToggle={jest.fn()} popupOpen={false} \/>);","27","  expect(wrapper).toMatchSnapshot();","28","  click(wrapper);","31","it('render line 0', () => {","32","  const line = { line: 0 };","33","  const wrapper = shallow(<LineNumber line={line} onPopupToggle={jest.fn()} popupOpen={false} \/>);","34","  expect(wrapper).toMatchSnapshot();","35","});"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/CrossComponentSourceViewerWrapper.tsx":[{"add":["90","  fetchDuplications = (component: string) => {","97","          this.setState({","100","            duplicationsByLine: getDuplicationsByLine(r.duplications)","101","          });","192","    const { components, duplications, duplicationsByLine } = this.state;","206","                duplications={duplications}","207","                duplicationsByLine={duplicationsByLine}"],"delete":["62","  linePopup?: T.LinePopup & { component: string };","91","  fetchDuplications = (component: string, line: T.SourceLine) => {","98","          this.setState(state => ({","101","            duplicationsByLine: getDuplicationsByLine(r.duplications),","102","            linePopup:","103","              r.duplications.length === 1","104","                ? { component, index: 0, line: line.line, name: 'duplications' }","105","                : state.linePopup","106","          }));","121","            linePopup: undefined,","153","  handleLinePopupToggle = ({","154","    component,","155","    index,","156","    line,","157","    name,","158","    open","159","  }: T.LinePopup & { component: string }) => {","160","    this.setState((state: State) => {","161","      const samePopup =","162","        state.linePopup !== undefined &&","163","        state.linePopup.line === line &&","164","        state.linePopup.name === name &&","165","        state.linePopup.component === component &&","166","        state.linePopup.index === index;","167","      if (open !== false && !samePopup) {","168","        return { linePopup: { component, index, line, name } };","169","      } else if (open !== true && samePopup) {","170","        return { linePopup: undefined };","171","      }","172","      return null;","173","    });","174","  };","175","","176","  handleCloseLinePopup = () => {","177","    this.setState({ linePopup: undefined });","178","  };","179","","197","            onClose={this.handleCloseLinePopup}","226","    const { components, duplications, duplicationsByLine, linePopup } = this.state;","233","          let componentProps = {};","234","          if (linePopup && snippetGroup.component.key === linePopup.component) {","235","            componentProps = {","236","              duplications,","237","              duplicationsByLine,","238","              linePopup: { index: linePopup.index, line: linePopup.line, name: linePopup.name }","239","            };","240","          }","257","                onLinePopupToggle={this.handleLinePopupToggle}","262","                {...componentProps}"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/DuplicationPopup.tsx":[{"add":["104","      <div className=\"source-viewer-bubble-popup abs-width-400\">","105","        {this.props.inRemovedComponent && (","106","          <Alert variant=\"warning\">","107","            {translate('duplications.dups_found_on_deleted_resource')}","108","          <\/Alert>","109","        )}","110","        {duplications.length > 0 && (","111","          <>","112","            <h6 className=\"spacer-bottom\">","113","              {translate('component_viewer.transition.duplication')}","114","            <\/h6>","115","            {duplications.map(duplication => (","116","              <div className=\"spacer-top text-ellipsis\" key={duplication.file.key}>","117","                <div className=\"component-name\">","118","                  {this.isDifferentComponent(duplication.file, this.props.sourceViewerFile) && (","119","                    <>","120","                      <div className=\"component-name-parent\">","121","                        <QualifierIcon className=\"little-spacer-right\" qualifier=\"TRK\" \/>","122","                        <Link to={getProjectUrl(duplication.file.project)}>","123","                          {duplication.file.projectName}","124","                        <\/Link>","125","                      <\/div>","126","                      {duplication.file.subProject && duplication.file.subProjectName && (","128","                          <QualifierIcon className=\"little-spacer-right\" qualifier=\"BRC\" \/>","129","                          {duplication.file.subProjectName}","131","                      )}","132","                    <\/>","133","                  )}","135","                  {duplication.file.key !== this.props.sourceViewerFile.key && (","136","                    <div className=\"component-name-path\">","137","                      {this.renderDuplication(","138","                        duplication.file,","139","                        <>","140","                          <span>{collapsedDirFromPath(duplication.file.name)}<\/span>","141","                          <span className=\"component-name-file\">","142","                            {fileFromPath(duplication.file.name)}","143","                          <\/span>","144","                        <\/>","145","                      )}","146","                    <\/div>","147","                  )}","148","","149","                  <div className=\"component-name-path\">","150","                    {'Lines: '}","151","                    {duplication.blocks.map((block, index) => (","152","                      <React.Fragment key={index}>","156","                            {block.from}","157","                            {' \u2013 '}","158","                            {block.from + block.size - 1}","159","                          <\/>,","160","                          block.from","162","                        {index < duplication.blocks.length - 1 && ', '}","163","                      <\/React.Fragment>","164","                    ))}","167","              <\/div>","168","            ))}","169","          <\/>","170","        )}","171","      <\/div>"],"delete":["22","import { DropdownOverlay } from 'sonar-ui-common\/components\/controls\/Dropdown';","25","import { PopupPlacement } from 'sonar-ui-common\/components\/ui\/popups';","38","  onClose: () => void;","67","    this.props.onClose();","108","      <DropdownOverlay placement={PopupPlacement.RightTop}>","109","        <div className=\"source-viewer-bubble-popup abs-width-400\">","110","          {this.props.inRemovedComponent && (","111","            <Alert variant=\"warning\">","112","              {translate('duplications.dups_found_on_deleted_resource')}","113","            <\/Alert>","114","          )}","115","          {duplications.length > 0 && (","116","            <>","117","              <h6 className=\"spacer-bottom\">","118","                {translate('component_viewer.transition.duplication')}","119","              <\/h6>","120","              {duplications.map(duplication => (","121","                <div className=\"spacer-top text-ellipsis\" key={duplication.file.key}>","122","                  <div className=\"component-name\">","123","                    {this.isDifferentComponent(duplication.file, this.props.sourceViewerFile) && (","124","                      <>","126","                          <QualifierIcon className=\"little-spacer-right\" qualifier=\"TRK\" \/>","127","                          <Link to={getProjectUrl(duplication.file.project)}>","128","                            {duplication.file.projectName}","129","                          <\/Link>","131","                        {duplication.file.subProject && duplication.file.subProjectName && (","132","                          <div className=\"component-name-parent\">","133","                            <QualifierIcon className=\"little-spacer-right\" qualifier=\"BRC\" \/>","134","                            {duplication.file.subProjectName}","135","                          <\/div>","136","                        )}","137","                      <\/>","138","                    )}","140","                    {duplication.file.key !== this.props.sourceViewerFile.key && (","141","                      <div className=\"component-name-path\">","145","                            <span>{collapsedDirFromPath(duplication.file.name)}<\/span>","146","                            <span className=\"component-name-file\">","147","                              {fileFromPath(duplication.file.name)}","148","                            <\/span>","149","                          <\/>","151","                      <\/div>","152","                    )}","153","","154","                    <div className=\"component-name-path\">","155","                      {'Lines: '}","156","                      {duplication.blocks.map((block, index) => (","157","                        <React.Fragment key={index}>","158","                          {this.renderDuplication(","159","                            duplication.file,","160","                            <>","161","                              {block.from}","162","                              {' \u2013 '}","163","                              {block.from + block.size - 1}","164","                            <\/>,","165","                            block.from","166","                          )}","167","                          {index < duplication.blocks.length - 1 && ', '}","168","                        <\/React.Fragment>","169","                      ))}","170","                    <\/div>","173","              ))}","174","            <\/>","175","          )}","176","        <\/div>","177","      <\/DropdownOverlay>"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/LineDuplicationBlock-test.tsx":[{"add":["21","import Toggler from 'sonar-ui-common\/components\/controls\/Toggler';","23","import { LineDuplicationBlock, LineDuplicationBlockProps } from '..\/LineDuplicationBlock';","25","it('should render correctly', () => {","26","  expect(shallowRender()).toMatchSnapshot('default');","27","  expect(","28","    shallowRender({ line: { line: 3, duplicated: false }, duplicated: false })","29","  ).toMatchSnapshot('not duplicated');","30","});","31","","32","it('should correctly open\/close the dropdown', () => {","33","  const wrapper = shallowRender();","34","  click(wrapper.find('div[role=\"button\"]'));","35","  expect(wrapper.find(Toggler).prop('open')).toBe(true);","36","  wrapper.find(Toggler).prop('onRequestClose')();","37","  expect(wrapper.find(Toggler).prop('open')).toBe(false);","38","});","39","","40","it('should correctly call the onCick prop', () => {","41","  const line = { line: 1, duplicated: true };","42","  const onClick = jest.fn();","43","  const wrapper = shallowRender({ line, onClick });","44","","45","  \/\/ Propagate if blocks aren't loaded.","46","  click(wrapper.find('div[role=\"button\"]'));","47","  expect(onClick).toBeCalledWith(line);","48","","49","  \/\/ Don't propagate if blocks were loaded.","50","  onClick.mockClear();","51","  wrapper.setProps({ blocksLoaded: true });","52","  click(wrapper.find('div[role=\"button\"]'));","53","  expect(onClick).not.toBeCalled();","54","});","55","","56","function shallowRender(props: Partial<LineDuplicationBlockProps> = {}) {","57","  return shallow<LineDuplicationBlockProps>(","59","      blocksLoaded={false}","62","      line={{ line: 3, duplicated: true }}","64","      {...props}","67","}"],"delete":["22","import LineDuplicationBlock from '..\/LineDuplicationBlock';","24","it('render duplicated line', () => {","25","  const line = { line: 3, duplicated: true };","26","  const onPopupToggle = jest.fn();","27","  const wrapper = shallow(","31","      line={line}","32","      onPopupToggle={onPopupToggle}","33","      popupOpen={false}","37","  expect(wrapper).toMatchSnapshot();","38","  click(wrapper.find('[tabIndex]'));","39","  expect(onPopupToggle).toHaveBeenCalled();","40","});","41","","42","it('render not duplicated line', () => {","43","  const line = { line: 3, duplicated: false };","44","  const wrapper = shallow(","45","    <LineDuplicationBlock","46","      duplicated={false}","47","      index={1}","48","      line={line}","49","      onPopupToggle={jest.fn()}","50","      popupOpen={false}","51","      renderDuplicationPopup={jest.fn()}","52","    \/>","53","  );","54","  expect(wrapper).toMatchSnapshot();","55","});"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/ComponentSourceSnippetGroupViewer-test.tsx":[{"add":[],"delete":["223","  const onLinePopupToggle = jest.fn();","228","    onLinePopupToggle,","243","    .prop<Function>('handleLinePopupToggle')({ line: 13, name: 'foo' });","244","  expect(onLinePopupToggle).toHaveBeenCalledWith({ component: 'a', line: 13, name: 'foo' });","245","","246","  wrapper","247","    .find('SnippetViewer')","248","    .first()","266","      duplications={undefined}","267","      duplicationsByLine={undefined}","272","      linePopup={undefined}","277","      onLinePopupToggle={jest.fn()}","324","      duplications={undefined}","325","      duplicationsByLine={undefined}","330","      linePopup={undefined}","335","      onLinePopupToggle={jest.fn()}","378","      duplications={undefined}","379","      duplicationsByLine={undefined}","384","      linePopup={undefined}","389","      onLinePopupToggle={jest.fn()}"]}],"server\/sonar-web\/src\/main\/js\/apps\/security-hotspots\/components\/__tests__\/__snapshots__\/HotspotSnippetContainer-test.tsx.snap":[{"add":[],"delete":["126","  onLinePopupToggle={[Function]}"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/LineNumber.tsx":[{"add":["20","import Dropdown from 'sonar-ui-common\/components\/controls\/Dropdown';","21","import { PopupPlacement } from 'sonar-ui-common\/components\/ui\/popups';","22","import { translateWithParameters } from 'sonar-ui-common\/helpers\/l10n';","25","export interface LineNumberProps {","29","export function LineNumber({ line }: LineNumberProps) {","30","  const { line: lineNumber } = line;","31","  const hasLineNumber = !!lineNumber;","32","  return hasLineNumber ? (","33","    <td className=\"source-meta source-line-number\" data-line-number={lineNumber}>","34","      <Dropdown","35","        overlay={<LineOptionsPopup line={line} \/>}","36","        overlayPlacement={PopupPlacement.RightTop}>","37","        <span","38","          aria-label={translateWithParameters('source_viewer.line_X', lineNumber)}","39","          role=\"button\">","40","          {lineNumber}","41","        <\/span>","42","      <\/Dropdown>","43","    <\/td>","44","  ) : (","45","    <td className=\"source-meta source-line-number\" \/>","46","  );","48","","49","export default React.memo(LineNumber);"],"delete":["20","import Toggler from 'sonar-ui-common\/components\/controls\/Toggler';","23","interface Props {","25","  onPopupToggle: (linePopup: T.LinePopup) => void;","26","  popupOpen: boolean;","29","export default class LineNumber extends React.PureComponent<Props> {","30","  handleClick = (event: React.MouseEvent<HTMLElement>) => {","31","    event.preventDefault();","32","    event.stopPropagation();","33","    event.currentTarget.blur();","34","    this.props.onPopupToggle({ line: this.props.line.line, name: 'line-number' });","35","  };","36","","37","  handleTogglePopup = (open: boolean) => {","38","    this.props.onPopupToggle({ line: this.props.line.line, name: 'line-number', open });","39","  };","40","","41","  closePopup = () => {","42","    this.handleTogglePopup(false);","43","  };","44","","45","  render() {","46","    const { line, popupOpen } = this.props;","47","    const { line: lineNumber } = line;","48","    const hasLineNumber = !!lineNumber;","49","    return hasLineNumber ? (","50","      <td","51","        className=\"source-meta source-line-number\"","52","        data-line-number={lineNumber}","53","        onClick={this.handleClick}","54","        \/\/ eslint-disable-next-line jsx-a11y\/no-noninteractive-element-to-interactive-role","55","        role=\"button\"","56","        tabIndex={0}>","57","        <Toggler","58","          onRequestClose={this.closePopup}","59","          open={popupOpen}","60","          overlay={<LineOptionsPopup line={line} \/>}","61","        \/>","62","      <\/td>","63","    ) : (","64","      <td className=\"source-meta source-line-number\" \/>","65","    );","66","  }"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/LineDuplicationBlock.tsx":[{"add":["21","import { DropdownOverlay } from 'sonar-ui-common\/components\/controls\/Dropdown';","24","import { PopupPlacement } from 'sonar-ui-common\/components\/ui\/popups';","27","export interface LineDuplicationBlockProps {","28","  blocksLoaded: boolean;","32","  onClick?: (line: T.SourceLine) => void;","36","export function LineDuplicationBlock(props: LineDuplicationBlockProps) {","37","  const { blocksLoaded, duplicated, index, line } = props;","38","  const [dropdownOpen, setDropdownOpen] = React.useState(false);","40","  const className = classNames('source-meta', 'source-line-duplications', {","41","    'source-line-duplicated': duplicated","42","  });","44","  return duplicated ? (","45","    <td className={className} data-index={index} data-line-number={line.line}>","46","      <Tooltip","47","        overlay={dropdownOpen ? undefined : translate('source_viewer.tooltip.duplicated_block')}","48","        placement=\"right\">","49","        <div>","50","          <Toggler","51","            onRequestClose={() => setDropdownOpen(false)}","52","            open={dropdownOpen}","53","            overlay={","54","              <DropdownOverlay placement={PopupPlacement.RightTop}>","55","                {props.renderDuplicationPopup(index, line.line)}","56","              <\/DropdownOverlay>","57","            }>","59","              aria-label={translate('source_viewer.tooltip.duplicated_block')}","61","              onClick={() => {","62","                setDropdownOpen(true);","63","                if (!blocksLoaded && line.duplicated && props.onClick) {","64","                  props.onClick(line);","65","                }","66","              }}","70","          <\/Toggler>","71","        <\/div>","72","      <\/Tooltip>","73","    <\/td>","74","  ) : (","75","    <td className={className} data-index={index} data-line-number={line.line}>","76","      <div className=\"source-line-bar\" \/>","77","    <\/td>","78","  );","80","","81","export default React.memo(LineDuplicationBlock);"],"delete":["25","interface Props {","29","  onPopupToggle: (linePopup: T.LinePopup) => void;","30","  popupOpen: boolean;","34","export default class LineDuplicationBlock extends React.PureComponent<Props> {","35","  handleClick = (event: React.MouseEvent<HTMLElement>) => {","36","    event.preventDefault();","37","    event.stopPropagation();","38","    event.currentTarget.blur();","39","    this.props.onPopupToggle({","40","      index: this.props.index,","41","      line: this.props.line.line,","42","      name: 'duplications'","43","    });","44","  };","46","  handleTogglePopup = (open: boolean) => {","47","    this.props.onPopupToggle({","48","      index: this.props.index,","49","      line: this.props.line.line,","50","      name: 'duplications',","51","      open","52","    });","53","  };","55","  closePopup = () => {","56","    this.handleTogglePopup(false);","57","  };","58","","59","  render() {","60","    const { duplicated, index, line, popupOpen } = this.props;","61","    const className = classNames('source-meta', 'source-line-duplications-extra', {","62","      'source-line-duplicated': duplicated","63","    });","64","","65","    return duplicated ? (","66","      <td className={className} data-index={index} data-line-number={line.line}>","67","        <Toggler","68","          onRequestClose={this.closePopup}","69","          open={popupOpen}","70","          overlay={this.props.renderDuplicationPopup(index, line.line)}>","71","          <Tooltip","72","            overlay={popupOpen ? undefined : translate('source_viewer.tooltip.duplicated_block')}","73","            placement=\"right\">","76","              onClick={this.handleClick}","80","          <\/Tooltip>","81","        <\/Toggler>","82","      <\/td>","83","    ) : (","84","      <td className={className} data-index={index} data-line-number={line.line}>","85","        <div className=\"source-line-bar\" \/>","86","      <\/td>","87","    );","88","  }"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/__snapshots__\/Line-test.tsx.snap":[{"add":["7","  <Memo(LineNumber)","22","  <Memo(LineSCM)","149","  <Memo(LineNumber)","164","  <Memo(LineSCM)","291","  <Memo(LineNumber)","306","  <Memo(LineSCM)","324","  <Memo(LineCoverage)","448","  <Memo(LineNumber)","463","  <Memo(LineSCM)","481","  <Memo(LineDuplicationBlock)","482","    blocksLoaded={true}","499","    onClick={[MockFunction]}","502","  <Memo(LineDuplicationBlock)","503","    blocksLoaded={true}","522","  <Memo(LineDuplicationBlock)","523","    blocksLoaded={true}","651","  <Memo(LineNumber)","666","  <Memo(LineSCM)","681","  <Memo(LineIssuesIndicator)","748","    issuesOpen={false}","873","  <Memo(LineNumber)"],"delete":["7","  <LineNumber","21","    onPopupToggle={[MockFunction]}","22","    popupOpen={false}","24","  <LineSCM","38","    onPopupToggle={[MockFunction]}","39","    popupOpen={false}","153","  <LineNumber","167","    onPopupToggle={[MockFunction]}","168","    popupOpen={false}","170","  <LineSCM","184","    onPopupToggle={[MockFunction]}","185","    popupOpen={false}","299","  <LineNumber","313","    onPopupToggle={[MockFunction]}","314","    popupOpen={false}","316","  <LineSCM","330","    onPopupToggle={[MockFunction]}","331","    popupOpen={false}","336","  <LineCoverage","460","  <LineNumber","474","    onPopupToggle={[MockFunction]}","475","    popupOpen={false}","477","  <LineSCM","491","    onPopupToggle={[MockFunction]}","492","    popupOpen={false}","497","  <LineDuplications","498","    line={","499","      Object {","500","        \"code\": \"<span class=\\\\\"k\\\\\">import<\/span> java.util.<span class=\\\\\"sym-9 sym\\\\\">ArrayList<\/span>;\",","501","        \"coverageStatus\": \"covered\",","502","        \"coveredConditions\": 2,","503","        \"duplicated\": false,","504","        \"isNew\": true,","505","        \"line\": 16,","506","        \"scmAuthor\": \"simon.brandhof@sonarsource.com\",","507","        \"scmDate\": \"2018-12-11T10:48:39+0100\",","508","        \"scmRevision\": \"80f564becc0c0a1c9abaa006eca83a4fd278c3f0\",","509","      }","510","    }","511","    onClick={[MockFunction]}","512","  \/>","513","  <LineDuplicationBlock","530","    onPopupToggle={[MockFunction]}","531","    popupOpen={false}","534","  <LineDuplicationBlock","551","    onPopupToggle={[MockFunction]}","552","    popupOpen={false}","555","  <LineDuplicationBlock","572","    onPopupToggle={[MockFunction]}","573","    popupOpen={false}","685","  <LineNumber","699","    onPopupToggle={[MockFunction]}","700","    popupOpen={false}","702","  <LineSCM","716","    onPopupToggle={[MockFunction]}","717","    popupOpen={false}","719","  <LineIssuesIndicator","910","  <LineNumber","924","    onPopupToggle={[MockFunction]}","925","    popupOpen={false}"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/__snapshots__\/LineIssuesIndicator-test.tsx.snap":[{"add":["2","exports[`should render correctly: default 1`] = `","8","    aria-label=\"source_viewer.issues_on_line.show\"","9","    onClick={[Function]}","10","    role=\"button\"","11","    tabIndex={0}","13","    <IssueIcon","14","      type=\"BUG\"","15","    \/>","16","    <span","17","      className=\"source-line-issues-counter\"","18","    >","19","      2","20","    <\/span>","25","exports[`should render correctly: diff issue types 1`] = `","31","    aria-label=\"source_viewer.issues_on_line.show\"","32","    onClick={[Function]}","33","    role=\"button\"","34","    tabIndex={0}","36","    <IssueIcon","37","      type=\"VULNERABILITY\"","38","    \/>","39","    <span","40","      className=\"source-line-issues-counter\"","41","    >","42","      2","43","    <\/span>","48","exports[`should render correctly: no issues 1`] = `"],"delete":["2","exports[`should render correctly 1`] = `","6","  onClick={[Function]}","7","  role=\"button\"","8","  tabIndex={0}","10","  <IssueIcon","11","    type=\"BUG\"","12","  \/>","14","    className=\"source-line-issues-counter\"","16","    2","21","exports[`should render correctly 2`] = `","25","  onClick={[Function]}","26","  role=\"button\"","27","  tabIndex={0}","29","  <IssueIcon","30","    type=\"VULNERABILITY\"","31","  \/>","33","    className=\"source-line-issues-counter\"","35","    2","40","exports[`should render correctly for no issues 1`] = `"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/SnippetViewer-test.tsx":[{"add":[],"delete":["129","      handleLinePopupToggle={jest.fn()}","138","      linePopup={undefined}","163","      handleLinePopupToggle={jest.fn()}","172","      linePopup={undefined}"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/__snapshots__\/LineDuplicationBlock-test.tsx.snap":[{"add":["2","exports[`should render correctly: default 1`] = `","4","  className=\"source-meta source-line-duplications source-line-duplicated\"","8","  <Tooltip","9","    overlay=\"source_viewer.tooltip.duplicated_block\"","10","    placement=\"right\"","12","    <div>","13","      <Toggler","14","        onRequestClose={[Function]}","15","        open={false}","16","        overlay={","17","          <DropdownOverlay","18","            placement=\"right-top\"","19","          \/>","20","        }","21","      >","22","        <div","23","          aria-label=\"source_viewer.tooltip.duplicated_block\"","24","          className=\"source-line-bar\"","25","          onClick={[Function]}","26","          role=\"button\"","27","          tabIndex={0}","28","        \/>","29","      <\/Toggler>","30","    <\/div>","31","  <\/Tooltip>","35","exports[`should render correctly: not duplicated 1`] = `","37","  className=\"source-meta source-line-duplications\""],"delete":["2","exports[`render duplicated line 1`] = `","4","  className=\"source-meta source-line-duplications-extra source-line-duplicated\"","8","  <Toggler","9","    onRequestClose={[Function]}","10","    open={false}","12","    <Tooltip","13","      overlay=\"source_viewer.tooltip.duplicated_block\"","14","      placement=\"right\"","15","    >","16","      <div","17","        className=\"source-line-bar\"","18","        onClick={[Function]}","19","        role=\"button\"","20","        tabIndex={0}","21","      \/>","22","    <\/Tooltip>","23","  <\/Toggler>","27","exports[`render not duplicated line 1`] = `","29","  className=\"source-meta source-line-duplications-extra\""]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/SnippetViewer.tsx":[{"add":["53","  loadDuplications?: (line: T.SourceLine) => void;","138","    const noop = () => {};","163","        loadDuplications={this.props.loadDuplications || noop}","166","        onIssueSelect={noop}","167","        onIssueUnselect={noop}","210","    const displayDuplications =","211","      Boolean(this.props.loadDuplications) && snippet.some(s => !!s.duplicated);"],"delete":["44","  handleLinePopupToggle: (line: T.SourceLine) => void;","54","  linePopup?: T.LinePopup;","55","  loadDuplications: (line: T.SourceLine) => void;","164","        linePopup={this.props.linePopup}","165","        loadDuplications={this.props.loadDuplications}","168","        onIssueSelect={() => {}}","169","        onIssueUnselect={() => {}}","172","        onLinePopupToggle={this.props.handleLinePopupToggle}","213","    const displayDuplications = snippet.some(s => !!s.duplicated);"]}],"server\/sonar-web\/src\/main\/js\/apps\/security-hotspots\/components\/__tests__\/HotspotSnippetContainerRenderer-test.tsx":[{"add":[],"delete":["41","      linePopup={undefined}","45","      onLinePopupToggle={jest.fn()}"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/__snapshots__\/SCMPopup-test.tsx.snap":[{"add":["2","exports[`should render correctly: default 1`] = `","3","<div","4","  className=\"source-viewer-bubble-popup abs-width-400\"","5",">","6","  <div>","7","    <h4>","8","      author","9","    <\/h4>","10","    foo","11","  <\/div>","12","  <div","13","    className=\"spacer-top\"","14","  >","15","    <h4>","16","      source_viewer.tooltip.scm.commited_on","17","    <\/h4>","18","    <DateFormatter","19","      date=\"2017-01-01\"","20","    \/>","21","  <\/div>","22","  <div","23","    className=\"spacer-top\"","24","  >","25","    <h4>","26","      source_viewer.tooltip.scm.revision","27","    <\/h4>","28","    bar","29","  <\/div>","30","<\/div>","31","`;","32","","33","exports[`should render correctly: no author 1`] = `","34","<div","35","  className=\"source-viewer-bubble-popup abs-width-400\"","38","    className=\"\"","40","    <h4>","41","      source_viewer.tooltip.scm.commited_on","42","    <\/h4>","43","    <DateFormatter","44","      date=\"2017-01-01\"","45","    \/>","47","  <div","48","    className=\"spacer-top\"","49","  >","50","    <h4>","51","      source_viewer.tooltip.scm.revision","52","    <\/h4>","53","    bar","54","  <\/div>","55","<\/div>","56","`;","57","","58","exports[`should render correctly: no date 1`] = `","59","<div","60","  className=\"source-viewer-bubble-popup abs-width-400\"","61",">","62","  <div>","63","    <h4>","64","      author","65","    <\/h4>","66","    foo","67","  <\/div>","68","  <div","69","    className=\"spacer-top\"","70","  >","71","    <h4>","72","      source_viewer.tooltip.scm.revision","73","    <\/h4>","74","    bar","75","  <\/div>","76","<\/div>","77","`;","78","","79","exports[`should render correctly: no revision 1`] = `","80","<div","81","  className=\"source-viewer-bubble-popup abs-width-400\"","82",">","83","  <div>","84","    <h4>","85","      author","86","    <\/h4>","87","    foo","88","  <\/div>","89","  <div","90","    className=\"spacer-top\"","91","  >","92","    <h4>","93","      source_viewer.tooltip.scm.commited_on","94","    <\/h4>","95","    <DateFormatter","96","      date=\"2017-01-01\"","97","    \/>","98","  <\/div>","99","<\/div>"],"delete":["2","exports[`should render 1`] = `","3","<DropdownOverlay","4","  placement=\"right-top\"","7","    className=\"source-viewer-bubble-popup abs-width-400\"","9","    <div>","10","      foo","11","    <\/div>","12","    <div","13","      className=\"spacer-top\"","14","    >","15","      <DateFormatter","16","        date=\"2017-01-01\"","17","      \/>","18","    <\/div>","20","<\/DropdownOverlay>"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/LineIssuesIndicator-test.tsx":[{"add":["23","import { LineIssuesIndicator, LineIssuesIndicatorProps } from '..\/LineIssuesIndicator';","26","  expect(shallowRender()).toMatchSnapshot('default');","27","  expect(","28","    shallowRender({","29","      issues: [","30","        mockIssue(false, { key: 'foo', type: 'VULNERABILITY' }),","31","        mockIssue(false, { key: 'bar', type: 'SECURITY_HOTSPOT' })","32","      ]","33","    })","34","  ).toMatchSnapshot('diff issue types');","35","  expect(shallowRender({ issues: [] })).toMatchSnapshot('no issues');","36","});","37","","38","it('should correctly handle click', () => {","42","  click(wrapper.find('span[role=\"button\"]'));","46","function shallowRender(props: Partial<LineIssuesIndicatorProps> = {}) {"],"delete":["23","import LineIssuesIndicator from '..\/LineIssuesIndicator';","28","  expect(wrapper).toMatchSnapshot();","30","  click(wrapper);","32","","33","  const nextIssues = [","34","    mockIssue(false, { key: 'foo', type: 'VULNERABILITY' }),","35","    mockIssue(false, { key: 'bar', type: 'SECURITY_HOTSPOT' })","36","  ];","37","  wrapper.setProps({ issues: nextIssues });","38","  expect(wrapper).toMatchSnapshot();","41","it('should render correctly for no issues', () => {","42","  expect(shallowRender({ issues: [] })).toMatchSnapshot();","43","});","44","","45","function shallowRender(props: Partial<LineIssuesIndicator['props']> = {}) {"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/LineSCM-test.tsx":[{"add":["19","\/* eslint-disable sonarjs\/no-duplicate-string *\/","22","import { LineSCM, LineSCMProps } from '..\/LineSCM';","24","it('should render correctly', () => {","25","  const scmInfo = { scmRevision: 'foo', scmAuthor: 'foo', scmDate: '2017-01-01' };","26","","27","  expect(shallowRender()).toMatchSnapshot('default');","28","  expect(","29","    shallowRender({ line: { line: 3, ...scmInfo }, previousLine: { line: 2, ...scmInfo } })","30","  ).toMatchSnapshot('same commit');","31","  expect(shallowRender({ line: { line: 3, scmDate: '2017-01-01' } })).toMatchSnapshot('no author');","34","function shallowRender(props: Partial<LineSCMProps> = {}) {","35","  return shallow(","36","    <LineSCM","37","      line={{ line: 3, scmAuthor: 'foo', scmDate: '2017-01-01' }}","38","      previousLine={{ line: 2, scmAuthor: 'bar', scmDate: '2017-01-02' }}","39","      {...props}","40","    \/>","42","}"],"delete":["21","import { click } from 'sonar-ui-common\/helpers\/testUtils';","22","import LineSCM from '..\/LineSCM';","24","it('render scm details', () => {","25","  const line = { line: 3, scmAuthor: 'foo', scmDate: '2017-01-01' };","26","  const previousLine = { line: 2, scmAuthor: 'bar', scmDate: '2017-01-02' };","27","  const wrapper = shallow(","28","    <LineSCM line={line} onPopupToggle={jest.fn()} popupOpen={false} previousLine={previousLine} \/>","29","  );","30","  expect(wrapper).toMatchSnapshot();","33","it('render scm details for the first line', () => {","34","  const line = { line: 3, scmRevision: 'foo', scmAuthor: 'foo', scmDate: '2017-01-01' };","35","  const wrapper = shallow(","36","    <LineSCM line={line} onPopupToggle={jest.fn()} popupOpen={false} previousLine={undefined} \/>","38","  expect(wrapper).toMatchSnapshot();","39","});","40","","41","it('does not render scm details', () => {","42","  const line = { line: 3, scmRevision: 'foo', scmAuthor: 'foo', scmDate: '2017-01-01' };","43","  const previousLine = { line: 2, scmRevision: 'foo', scmAuthor: 'foo', scmDate: '2017-01-01' };","44","  const wrapper = shallow(","45","    <LineSCM line={line} onPopupToggle={jest.fn()} popupOpen={false} previousLine={previousLine} \/>","46","  );","47","  expect(wrapper).toMatchSnapshot();","48","});","49","","50","it('renders ellipsis when no author info', () => {","51","  const line = { line: 3, scmRevision: 'foo', scmDate: '2017-01-01' };","52","  const previousLine = { line: 2, scmRevision: 'bar', scmDate: '2017-01-01' };","53","  const wrapper = shallow(","54","    <LineSCM line={line} onPopupToggle={jest.fn()} popupOpen={false} previousLine={previousLine} \/>","55","  );","56","  expect(wrapper).toMatchSnapshot();","57","});","58","","59","it('should open popup', () => {","60","  const line = { line: 3, scmAuthor: 'foo', scmDate: '2017-01-01' };","61","  const onPopupToggle = jest.fn();","62","  const wrapper = shallow(","63","    <LineSCM line={line} onPopupToggle={onPopupToggle} popupOpen={false} previousLine={undefined} \/>","64","  );","65","  click(wrapper.find('[role=\"button\"]'));","66","  expect(onPopupToggle).toBeCalledWith({ line: 3, name: 'scm' });","67","});"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/__snapshots__\/SnippetViewer-test.tsx.snap":[{"add":[],"delete":["63","          onLinePopupToggle={[MockFunction]}","112","          onLinePopupToggle={[MockFunction]}","174","          onLinePopupToggle={[MockFunction]}","273","          onLinePopupToggle={[MockFunction]}","322","          onLinePopupToggle={[MockFunction]}","384","          onLinePopupToggle={[MockFunction]}","446","          onLinePopupToggle={[MockFunction]}","534","          onLinePopupToggle={[MockFunction]}","583","          onLinePopupToggle={[MockFunction]}","645","          onLinePopupToggle={[MockFunction]}","707","          onLinePopupToggle={[MockFunction]}","769","          onLinePopupToggle={[MockFunction]}","831","          onLinePopupToggle={[MockFunction]}","893","          onLinePopupToggle={[MockFunction]}","993","          onLinePopupToggle={[MockFunction]}","1043","          onLinePopupToggle={[MockFunction]}","1106","          onLinePopupToggle={[MockFunction]}"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/LineSCM.tsx":[{"add":["20","import Dropdown from 'sonar-ui-common\/components\/controls\/Dropdown';","21","import { PopupPlacement } from 'sonar-ui-common\/components\/ui\/popups';","22","import { translate, translateWithParameters } from 'sonar-ui-common\/helpers\/l10n';","25","export interface LineSCMProps {","30","export function LineSCM({ line, previousLine }: LineSCMProps) {","31","  const hasPopup = !!line.line;","32","  const cell = (","33","    <div className=\"source-line-scm-inner\">","34","      {isSCMChanged(line, previousLine) ? line.scmAuthor || '\u2026' : ' '}","35","    <\/div>","36","  );","38","  if (hasPopup) {","39","    let ariaLabel = translate('source_viewer.click_for_scm_info');","40","    if (line.scmAuthor) {","41","      ariaLabel = `${translateWithParameters(","42","        'source_viewer.author_X',","43","        line.scmAuthor","44","      )}, ${ariaLabel}`;","45","    }","47","    return (","48","      <td className=\"source-meta source-line-scm\" data-line-number={line.line}>","49","        <Dropdown overlay={<SCMPopup line={line} \/>} overlayPlacement={PopupPlacement.RightTop}>","50","          <div aria-label={ariaLabel} role=\"button\">","51","            {cell}","52","          <\/div>","53","        <\/Dropdown>","55","    );","56","  } else {","57","    return (","72","","73","export default React.memo(LineSCM);"],"delete":["20","import Toggler from 'sonar-ui-common\/components\/controls\/Toggler';","23","interface Props {","25","  onPopupToggle: (linePopup: T.LinePopup) => void;","26","  popupOpen: boolean;","30","export default class LineSCM extends React.PureComponent<Props> {","31","  handleClick = (event: React.MouseEvent<HTMLElement>) => {","32","    event.preventDefault();","33","    event.stopPropagation();","34","    event.currentTarget.blur();","35","    this.props.onPopupToggle({ line: this.props.line.line, name: 'scm' });","36","  };","38","  handleTogglePopup = (open: boolean) => {","39","    this.props.onPopupToggle({ line: this.props.line.line, name: 'scm', open });","40","  };","42","  closePopup = () => {","43","    this.handleTogglePopup(false);","44","  };","45","","46","  render() {","47","    const { line, popupOpen, previousLine } = this.props;","48","    const hasPopup = !!line.line;","49","    const cell = isSCMChanged(line, previousLine) && (","50","      <div className=\"source-line-scm-inner\" data-author={line.scmAuthor || '\u2026'} \/>","51","    );","52","    return hasPopup ? (","53","      <td","54","        className=\"source-meta source-line-scm\"","55","        data-line-number={line.line}","56","        onClick={this.handleClick}","57","        \/\/ eslint-disable-next-line jsx-a11y\/no-noninteractive-element-to-interactive-role","58","        role=\"button\"","59","        tabIndex={0}>","60","        <Toggler","61","          onRequestClose={this.closePopup}","62","          open={popupOpen}","63","          overlay={<SCMPopup line={line} \/>}>","64","          {cell}","65","        <\/Toggler>","67","    ) : ("]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/Line.tsx":[{"add":["88","      branchLike,","89","      displayAllIssues,","91","      displayDuplications,","92","      displayIssueLocationsCount,","93","      displayIssueLocationsLink,","94","      displayLocationMarkers,","95","      highlightedLocationMessage,","96","      displayIssues,","100","      highlighted,","101","      highlightedSymbols,","102","      issueLocations,","104","      issues,","105","      last,","106","      line,","107","      openIssues,","108","      previousLine,","109","      secondaryIssueLocations,","110","      selectedIssue,","111","      verticalBuffer","113","","115","      'source-line-highlighted': highlighted,","120","      'source-line-last': last === true","123","    const bottomPadding = verticalBuffer ? verticalBuffer * LINE_HEIGHT : undefined;","127","        <LineNumber line={line} \/>","129","        {displaySCM && <LineSCM line={line} previousLine={previousLine} \/>}","130","        {displayIssues && !displayAllIssues ? (","132","            issues={issues}","133","            issuesOpen={openIssues}","141","        {displayDuplications && (","143","            blocksLoaded={duplicationsCount > 0}","144","            duplicated={Boolean(line.duplicated)}","145","            index={0}","146","            key={0}","148","            onClick={this.props.loadDuplications}","151","        )}","153","        {duplicationsCount > 1 &&","154","          times(duplicationsCount - 1, index => (","155","            <LineDuplicationBlock","156","              blocksLoaded={true}","157","              duplicated={duplications.includes(index + 1)}","158","              index={index + 1}","159","              key={index + 1}","160","              line={this.props.line}","161","              renderDuplicationPopup={this.props.renderDuplicationPopup}","162","            \/>","163","          ))}","164","","165","        {displayCoverage && <LineCoverage line={line} \/>}","168","          branchLike={branchLike}","169","          displayIssueLocationsCount={displayIssueLocationsCount}","170","          displayIssueLocationsLink={displayIssueLocationsLink}","171","          displayLocationMarkers={displayLocationMarkers}","172","          highlightedLocationMessage={highlightedLocationMessage}","173","          highlightedSymbols={highlightedSymbols}","174","          issueLocations={issueLocations}","176","          issues={issues}","185","          secondaryIssueLocations={secondaryIssueLocations}","186","          selectedIssue={selectedIssue}","187","          showIssues={openIssues || displayAllIssues}"],"delete":["27","import LineDuplications from '.\/LineDuplications';","52","  linePopup: T.LinePopup | undefined;","54","  onLinePopupToggle: (linePopup: T.LinePopup) => void;","75","  isPopupOpen = (name: string, index?: number) => {","76","    const { line, linePopup } = this.props;","77","    return (","78","      linePopup !== undefined &&","79","      linePopup.index === index &&","80","      linePopup.line === line.line &&","81","      linePopup.name === name","82","    );","83","  };","84","","106","      line","109","      'source-line-highlighted': this.props.highlighted,","114","      'source-line-last': this.props.last === true","117","    const bottomPadding = this.props.verticalBuffer","118","      ? this.props.verticalBuffer * LINE_HEIGHT","119","      : undefined;","123","        <LineNumber","124","          line={line}","125","          onPopupToggle={this.props.onLinePopupToggle}","126","          popupOpen={this.isPopupOpen('line-number')}","127","        \/>","129","        {displaySCM && (","130","          <LineSCM","131","            line={line}","132","            onPopupToggle={this.props.onLinePopupToggle}","133","            popupOpen={this.isPopupOpen('scm')}","134","            previousLine={this.props.previousLine}","135","          \/>","136","        )}","137","        {this.props.displayIssues && !this.props.displayAllIssues ? (","139","            issues={this.props.issues}","147","        {this.props.displayDuplications && (","148","          <LineDuplications line={line} onClick={this.props.loadDuplications} \/>","149","        )}","150","","151","        {times(duplicationsCount, index => (","153","            duplicated={duplications.includes(index)}","154","            index={index}","155","            key={index}","157","            onPopupToggle={this.props.onLinePopupToggle}","158","            popupOpen={this.isPopupOpen('duplications', index)}","161","        ))}","163","        {this.props.displayCoverage && <LineCoverage line={line} \/>}","166","          branchLike={this.props.branchLike}","167","          displayIssueLocationsCount={this.props.displayIssueLocationsCount}","168","          displayIssueLocationsLink={this.props.displayIssueLocationsLink}","169","          displayLocationMarkers={this.props.displayLocationMarkers}","170","          highlightedLocationMessage={this.props.highlightedLocationMessage}","171","          highlightedSymbols={this.props.highlightedSymbols}","172","          issueLocations={this.props.issueLocations}","174","          issues={this.props.issues}","183","          secondaryIssueLocations={this.props.secondaryIssueLocations}","184","          selectedIssue={this.props.selectedIssue}","185","          showIssues={this.props.openIssues || this.props.displayAllIssues}"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/LineCoverage.tsx":[{"add":["23","export interface LineCoverageProps {","27","export function LineCoverage({ line }: LineCoverageProps) {","31","  const status = getStatusTooltip(line);","32","","35","      <Tooltip overlay={status} placement=\"right\">","36","        <div aria-label={status} className=\"source-line-bar\" \/>","68","","69","export default React.memo(LineCoverage);"],"delete":["23","interface Props {","27","export default function LineCoverage({ line }: Props) {","33","      <Tooltip overlay={getStatusTooltip(line)} placement=\"right\">","34","        <div className=\"source-line-bar\" \/>"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/SCMPopup.tsx":[{"add":["22","import { translate } from 'sonar-ui-common\/helpers\/l10n';","24","export interface SCMPopupProps {","28","export function SCMPopup({ line }: SCMPopupProps) {","29","  const hasAuthor = line.scmAuthor !== undefined && line.scmAuthor !== '';","30","  const hasDate = line.scmDate !== undefined;","32","    <div className=\"source-viewer-bubble-popup abs-width-400\">","33","      {hasAuthor && (","34","        <div>","35","          <h4>{translate('author')}<\/h4>","36","          {line.scmAuthor}","37","        <\/div>","38","      )}","39","      {hasDate && (","40","        <div className={classNames({ 'spacer-top': hasAuthor })}>","41","          <h4>{translate('source_viewer.tooltip.scm.commited_on')}<\/h4>","42","          <DateFormatter date={line.scmDate!} \/>","43","        <\/div>","44","      )}","45","      {line.scmRevision && (","46","        <div className={classNames({ 'spacer-top': hasAuthor || hasDate })}>","47","          <h4>{translate('source_viewer.tooltip.scm.revision')}<\/h4>","48","          {line.scmRevision}","49","        <\/div>","50","      )}","51","    <\/div>","54","","55","export default React.memo(SCMPopup);"],"delete":["21","import { DropdownOverlay } from 'sonar-ui-common\/components\/controls\/Dropdown';","23","import { PopupPlacement } from 'sonar-ui-common\/components\/ui\/popups';","25","interface Props {","29","export default function SCMPopup({ line }: Props) {","30","  const hasAuthor = line.scmAuthor !== '';","32","    <DropdownOverlay placement={PopupPlacement.RightTop}>","33","      <div className=\"source-viewer-bubble-popup abs-width-400\">","34","        {hasAuthor && <div>{line.scmAuthor}<\/div>}","35","        {line.scmDate && (","36","          <div className={classNames({ 'spacer-top': hasAuthor })}>","37","            <DateFormatter date={line.scmDate} \/>","38","          <\/div>","39","        )}","40","        {line.scmRevision && <div className=\"spacer-top\">{line.scmRevision}<\/div>}","41","      <\/div>","42","    <\/DropdownOverlay>"]}],"server\/sonar-web\/src\/main\/js\/apps\/security-hotspots\/components\/__tests__\/__snapshots__\/HotspotSnippetContainerRenderer-test.tsx.snap":[{"add":[],"delete":["137","        handleLinePopupToggle={[MockFunction]}","243","        loadDuplications={[Function]}"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/ComponentSourceSnippetGroupViewer.tsx":[{"add":["318","        duplications={this.props.duplications}","319","        duplicationsByLine={this.props.duplicationsByLine}","346","    const { branchLike, issue, issuesByLine, lastSnippetGroup, snippetGroup } = this.props;","367","      <div className=\"component-source-container\" ref={this.rootNodeRef}>"],"delete":["19","import * as classNames from 'classnames';","45","  linePopup?: T.LinePopup;","50","  onLinePopupToggle: (linePopup: T.LinePopup & { component: string }) => void;","275","  handleLinePopupToggle = (linePopup: T.LinePopup) => {","276","    this.props.onLinePopupToggle({","277","      ...linePopup,","278","      component: this.props.snippetGroup.component.key","279","    });","280","  };","281","","330","        handleLinePopupToggle={this.handleLinePopupToggle}","340","        linePopup={this.props.linePopup}","356","    const {","357","      branchLike,","358","      duplications,","359","      issue,","360","      issuesByLine,","361","      lastSnippetGroup,","362","      snippetGroup","363","    } = this.props;","384","      <div","385","        className={classNames('component-source-container', {","386","          'source-duplications-expanded': duplications && duplications.length > 0","387","        })}","388","        ref={this.rootNodeRef}>"]}],"server\/sonar-web\/src\/main\/js\/apps\/security-hotspots\/components\/HotspotSnippetContainer.tsx":[{"add":["150","    const { highlightedSymbols, lastLine, loading, sourceLines } = this.state;"],"delete":["39","  linePopup?: T.LinePopup & { component: string };","145","  handleLinePopupToggle = (params: T.LinePopup & { component: string }) => {","146","    const { component, index, line, name, open } = params;","147","    this.setState((state: State) => {","148","      const samePopup =","149","        state.linePopup !== undefined &&","150","        state.linePopup.line === line &&","151","        state.linePopup.name === name &&","152","        state.linePopup.component === component &&","153","        state.linePopup.index === index;","154","      if (open !== false && !samePopup) {","155","        return { linePopup: params };","156","      } else if (open !== true && samePopup) {","157","        return { linePopup: undefined };","158","      }","159","      return null;","160","    });","161","  };","162","","169","    const { highlightedSymbols, lastLine, linePopup, loading, sourceLines } = this.state;","182","        linePopup={linePopup}","186","        onLinePopupToggle={this.handleLinePopupToggle}"]}],"server\/sonar-web\/src\/main\/js\/apps\/security-hotspots\/components\/HotspotSnippetContainerRenderer.tsx":[{"add":[],"delete":["35","  linePopup?: T.LinePopup & { component: string };","37","  onLinePopupToggle: (line: T.SourceLine) => void;","53","    linePopup,","81","              handleLinePopupToggle={props.onLinePopupToggle}","90","              linePopup={linePopup}","91","              loadDuplications={noop}"]}],"\/dev\/null":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/__snapshots__\/LineSCM-test.tsx.snap":[{"add":["2","exports[`should render correctly: default 1`] = `","7","  <Dropdown","9","      <Memo(SCMPopup)","10","        line={","11","          Object {","12","            \"line\": 3,","13","            \"scmAuthor\": \"foo\",","14","            \"scmDate\": \"2017-01-01\",","15","          }","16","        }","17","      \/>","18","    }","19","    overlayPlacement=\"right-top\"","20","  >","21","    <div","22","      aria-label=\"source_viewer.author_X.foo, source_viewer.click_for_scm_info\"","23","      role=\"button\"","24","    >","25","      <div","26","        className=\"source-line-scm-inner\"","27","      >","28","        foo","29","      <\/div>","30","    <\/div>","31","  <\/Dropdown>","32","<\/td>","33","`;","34","","35","exports[`should render correctly: no author 1`] = `","36","<td","37","  className=\"source-meta source-line-scm\"","38","  data-line-number={3}","39",">","40","  <Dropdown","41","    overlay={","42","      <Memo(SCMPopup)","43","        line={","44","          Object {","45","            \"line\": 3,","46","            \"scmDate\": \"2017-01-01\",","47","          }","48","        }","49","      \/>","50","    }","51","    overlayPlacement=\"right-top\"","52","  >","53","    <div","54","      aria-label=\"source_viewer.click_for_scm_info\"","55","      role=\"button\"","56","    >","57","      <div","58","        className=\"source-line-scm-inner\"","59","      >","60","        \u2026","61","      <\/div>","62","    <\/div>","63","  <\/Dropdown>","64","<\/td>","65","`;","66","","67","exports[`should render correctly: same commit 1`] = `","68","<td","69","  className=\"source-meta source-line-scm\"","70","  data-line-number={3}","71",">","72","  <Dropdown","73","    overlay={","74","      <Memo(SCMPopup)","85","    overlayPlacement=\"right-top\"","88","      aria-label=\"source_viewer.author_X.foo, source_viewer.click_for_scm_info\"","89","      role=\"button\"","90","    >","91","      <div","92","        className=\"source-line-scm-inner\"","93","      >","94","         ","95","      <\/div>","96","    <\/div>","97","  <\/Dropdown>"],"delete":["2","exports[`does not render scm details 1`] = `","6","  onClick={[Function]}","7","  role=\"button\"","8","  tabIndex={0}","10","  <Toggler","11","    onRequestClose={[Function]}","12","    open={false}","14","      <SCMPopup","25","  \/>","26","<\/td>","27","`;","28","","29","exports[`render scm details 1`] = `","30","<td","31","  className=\"source-meta source-line-scm\"","32","  data-line-number={3}","33","  onClick={[Function]}","34","  role=\"button\"","35","  tabIndex={0}","36",">","37","  <Toggler","38","    onRequestClose={[Function]}","39","    open={false}","40","    overlay={","41","      <SCMPopup","42","        line={","43","          Object {","44","            \"line\": 3,","45","            \"scmAuthor\": \"foo\",","46","            \"scmDate\": \"2017-01-01\",","47","          }","48","        }","49","      \/>","50","    }","53","      className=\"source-line-scm-inner\"","54","      data-author=\"foo\"","55","    \/>","56","  <\/Toggler>","57","<\/td>","58","`;","59","","60","exports[`render scm details for the first line 1`] = `","61","<td","62","  className=\"source-meta source-line-scm\"","63","  data-line-number={3}","64","  onClick={[Function]}","65","  role=\"button\"","66","  tabIndex={0}","67",">","68","  <Toggler","69","    onRequestClose={[Function]}","70","    open={false}","71","    overlay={","72","      <SCMPopup","73","        line={","74","          Object {","75","            \"line\": 3,","76","            \"scmAuthor\": \"foo\",","77","            \"scmDate\": \"2017-01-01\",","78","            \"scmRevision\": \"foo\",","79","          }","80","        }","81","      \/>","82","    }","83","  >","84","    <div","85","      className=\"source-line-scm-inner\"","86","      data-author=\"foo\"","87","    \/>","88","  <\/Toggler>","89","<\/td>","90","`;","91","","92","exports[`renders ellipsis when no author info 1`] = `","93","<td","94","  className=\"source-meta source-line-scm\"","95","  data-line-number={3}","96","  onClick={[Function]}","97","  role=\"button\"","98","  tabIndex={0}","99",">","100","  <Toggler","101","    onRequestClose={[Function]}","102","    open={false}","103","    overlay={","104","      <SCMPopup","105","        line={","106","          Object {","107","            \"line\": 3,","108","            \"scmDate\": \"2017-01-01\",","109","            \"scmRevision\": \"foo\",","110","          }","111","        }","112","      \/>","113","    }","114","  >","115","    <div","116","      className=\"source-line-scm-inner\"","117","      data-author=\"\u2026\"","118","    \/>","119","  <\/Toggler>"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/__snapshots__\/CrossComponentSourceViewerWrapper-test.tsx.snap":[{"add":["50","      duplicationsByLine={Object {}}"],"delete":["171","      onLinePopupToggle={[Function]}"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/SourceViewerBase.tsx":[{"add":["470","  loadDuplications = () => {","477","          this.setState({","480","            duplicatedFiles: r.files","481","          });","666","        <div className=\"source-viewer\" ref={node => (this.node = node)}>"],"delete":["19","import * as classNames from 'classnames';","98","  displayDuplications: boolean;","108","  linePopup?: T.LinePopup;","138","      displayDuplications: false,","247","                displayDuplications: false,","256","                linePopup: undefined,","476","  loadDuplications = (line: T.SourceLine) => {","483","          this.setState(state => ({","484","            displayDuplications: true,","487","            duplicatedFiles: r.files,","488","            linePopup:","489","              r.duplications.length === 1","490","                ? { index: 0, line: line.line, name: 'duplications' }","491","                : state.linePopup","492","          }));","501","  handleLinePopupToggle = ({ index, line, name, open }: T.LinePopup) => {","502","    this.setState((state: State) => {","503","      const samePopup =","504","        state.linePopup !== undefined &&","505","        state.linePopup.name === name &&","506","        state.linePopup.line === line &&","507","        state.linePopup.index === index;","508","      if (open !== false && !samePopup) {","509","        return { linePopup: { index, line, name } };","510","      } else if (open !== true && samePopup) {","511","        return { linePopup: undefined };","512","      }","513","      return null;","514","    });","515","  };","516","","517","  closeLinePopup = () => {","518","    this.setState({ linePopup: undefined });","519","  };","520","","597","            onClose={this.closeLinePopup}","628","        linePopup={this.state.linePopup}","640","        onLinePopupToggle={this.handleLinePopupToggle}","698","    const className = classNames('source-viewer', {","699","      'source-duplications-expanded': this.state.displayDuplications","700","    });","701","","704","        <div className={className} ref={node => (this.node = node)}>"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/__snapshots__\/LineNumber-test.tsx.snap":[{"add":["2","exports[`should render correctly: default 1`] = `","7","  <Dropdown","9","      <Memo(LineOptionsPopup)","17","    overlayPlacement=\"right-top\"","18","  >","19","    <span","20","      aria-label=\"source_viewer.line_X.3\"","21","      role=\"button\"","22","    >","23","      3","24","    <\/span>","25","  <\/Dropdown>","28","","29","exports[`should render correctly: no line number 1`] = `","30","<td","31","  className=\"source-meta source-line-number\"","32","\/>","33","`;"],"delete":["2","exports[`render line 0 1`] = `","3","<td","4","  className=\"source-meta source-line-number\"","5","\/>","6","`;","7","","8","exports[`render line 3 1`] = `","12","  onClick={[Function]}","13","  role=\"button\"","14","  tabIndex={0}","16","  <Toggler","17","    onRequestClose={[Function]}","18","    open={false}","20","      <LineOptionsPopup","28","  \/>"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/LineOptionsPopup.tsx":[{"add":["25","interface LineOptionsPopupProps {","29","export function LineOptionsPopup({ line }: LineOptionsPopupProps) {","33","        <div className=\"source-viewer-bubble-popup nowrap\">","34","          <Link","35","            className=\"js-get-permalink\"","36","            rel=\"noopener noreferrer\"","37","            target=\"_blank\"","38","            to={getCodeUrl(file.project, branchLike, file.key, line.line)}>","39","            {translate('component_viewer.get_permalink')}","40","          <\/Link>","41","        <\/div>","46","","47","export default React.memo(LineOptionsPopup);"],"delete":["21","import { DropdownOverlay } from 'sonar-ui-common\/components\/controls\/Dropdown';","22","import { PopupPlacement } from 'sonar-ui-common\/components\/ui\/popups';","27","interface Props {","31","export default function LineOptionsPopup({ line }: Props) {","35","        <DropdownOverlay placement={PopupPlacement.RightTop}>","36","          <div className=\"source-viewer-bubble-popup nowrap\">","37","            <Link","38","              className=\"js-get-permalink\"","39","              onClick={event => {","40","                event.stopPropagation();","41","              }}","42","              rel=\"noopener noreferrer\"","43","              target=\"_blank\"","44","              to={getCodeUrl(file.project, branchLike, file.key, line.line)}>","45","              {translate('component_viewer.get_permalink')}","46","            <\/Link>","47","          <\/div>","48","        <\/DropdownOverlay>"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/LineCoverage-test.tsx":[{"add":["21","import { LineCoverage, LineCoverageProps } from '..\/LineCoverage';","23","it('should render correctly', () => {","24","  expect(shallowRender()).toMatchSnapshot('covered');","25","  expect(shallowRender({ line: { line: 3, coverageStatus: 'uncovered' } })).toMatchSnapshot(","26","    'uncovered'","27","  );","28","  expect(shallowRender({ line: { line: 3, coverageStatus: 'partially-covered' } })).toMatchSnapshot(","29","    'partially covered, 0 conditions'","30","  );","31","  expect(","32","    shallowRender({ line: { line: 3, coverageStatus: 'partially-covered', coveredConditions: 10 } })","33","  ).toMatchSnapshot('partially covered, 10 conditions');","34","  expect(shallowRender({ line: { line: 3, coverageStatus: undefined } })).toMatchSnapshot(","35","    'no data'","36","  );","39","function shallowRender(props: Partial<LineCoverageProps> = {}) {","40","  return shallow(<LineCoverage line={{ line: 3, coverageStatus: 'covered' }} {...props} \/>);","41","}"],"delete":["21","import LineCoverage from '..\/LineCoverage';","23","it('render covered line', () => {","24","  const line: T.SourceLine = { line: 3, coverageStatus: 'covered' };","25","  const wrapper = shallow(<LineCoverage line={line} \/>);","26","  expect(wrapper).toMatchSnapshot();","29","it('render uncovered line', () => {","30","  const line: T.SourceLine = { line: 3, coverageStatus: 'uncovered' };","31","  const wrapper = shallow(<LineCoverage line={line} \/>);","32","  expect(wrapper).toMatchSnapshot();","33","});","34","","35","it('render line with unknown coverage', () => {","36","  const line: T.SourceLine = { line: 3 };","37","  const wrapper = shallow(<LineCoverage line={line} \/>);","38","  expect(wrapper).toMatchSnapshot();","39","});"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/SCMPopup-test.tsx":[{"add":["19","\/* eslint-disable sonarjs\/no-duplicate-string *\/","22","import { SCMPopup, SCMPopupProps } from '..\/SCMPopup';","24","it('should render correctly', () => {","25","  expect(shallowRender()).toMatchSnapshot('default');","26","  expect(","27","    shallowRender({ line: { line: 3, scmDate: '2017-01-01', scmRevision: 'bar' } })","28","  ).toMatchSnapshot('no author');","29","  expect(","30","    shallowRender({ line: { line: 3, scmAuthor: 'foo', scmRevision: 'bar' } })","31","  ).toMatchSnapshot('no date');","32","  expect(","33","    shallowRender({ line: { line: 3, scmAuthor: 'foo', scmDate: '2017-01-01' } })","34","  ).toMatchSnapshot('no revision');","36","","37","function shallowRender(props: Partial<SCMPopupProps> = {}) {","38","  return shallow(","39","    <SCMPopup","40","      line={{ line: 3, scmAuthor: 'foo', scmDate: '2017-01-01', scmRevision: 'bar' }}","41","      {...props}","42","    \/>","43","  );","44","}"],"delete":["21","import SCMPopup from '..\/SCMPopup';","23","it('should render', () => {","24","  const line = { line: 3, scmAuthor: 'foo', scmDate: '2017-01-01' };","25","  expect(shallow(<SCMPopup line={line} \/>)).toMatchSnapshot();"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/__snapshots__\/LineOptionsPopup-test.tsx.snap":[{"add":["2","exports[`should render correctly 1`] = `","3","<div","4","  className=\"source-viewer-bubble-popup nowrap\"","6","  <Link","7","    className=\"js-get-permalink\"","8","    onlyActiveOnIndex={false}","9","    rel=\"noopener noreferrer\"","10","    style={Object {}}","11","    target=\"_blank\"","12","    to={","13","      Object {","14","        \"pathname\": \"\/code\",","15","        \"query\": Object {","16","          \"branch\": \"feature\",","17","          \"id\": \"prj\",","18","          \"line\": 3,","19","          \"selected\": \"foo\",","20","        },","22","    }","23","  >","24","    component_viewer.get_permalink","25","  <\/Link>","26","<\/div>"],"delete":["2","exports[`should render 1`] = `","3","<DropdownOverlay","4","  placement=\"right-top\"","6","  <div","7","    className=\"source-viewer-bubble-popup nowrap\"","8","  >","9","    <Link","10","      className=\"js-get-permalink\"","11","      onClick={[Function]}","12","      onlyActiveOnIndex={false}","13","      rel=\"noopener noreferrer\"","14","      style={Object {}}","15","      target=\"_blank\"","16","      to={","17","        Object {","18","          \"pathname\": \"\/code\",","19","          \"query\": Object {","20","            \"branch\": \"feature\",","21","            \"id\": \"prj\",","22","            \"line\": 3,","23","            \"selected\": \"foo\",","24","          },","25","        }","27","    >","28","      component_viewer.get_permalink","29","    <\/Link>","30","  <\/div>","31","<\/DropdownOverlay>"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/SourceViewerCode.tsx":[{"add":[],"delete":["61","  linePopup: T.LinePopup | undefined;","73","  onLinePopupToggle: (linePopup: T.LinePopup) => void;","145","        linePopup={this.props.linePopup}","153","        onLinePopupToggle={this.props.onLinePopupToggle}"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/LineOptionsPopup-test.tsx":[{"add":["22","import { LineOptionsPopup } from '..\/LineOptionsPopup';","34","it('should render correctly', () => {"],"delete":["22","import LineOptionsPopup from '..\/LineOptionsPopup';","34","it('should render', () => {"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/components\/__tests__\/__snapshots__\/LineCoverage-test.tsx.snap":[{"add":["2","exports[`should render correctly: covered 1`] = `","12","      aria-label=\"source_viewer.tooltip.covered\"","19","exports[`should render correctly: no data 1`] = `","34","exports[`should render correctly: partially covered, 0 conditions 1`] = `","35","<td","36","  className=\"source-meta source-line-coverage source-line-partially-covered\"","37","  data-line-number={3}","38",">","39","  <Tooltip","40","    overlay=\"source_viewer.tooltip.partially-covered\"","41","    placement=\"right\"","42","  >","43","    <div","44","      aria-label=\"source_viewer.tooltip.partially-covered\"","45","      className=\"source-line-bar\"","46","    \/>","47","  <\/Tooltip>","48","<\/td>","49","`;","50","","51","exports[`should render correctly: partially covered, 10 conditions 1`] = `","52","<td","53","  className=\"source-meta source-line-coverage source-line-partially-covered\"","54","  data-line-number={3}","55",">","56","  <Tooltip","57","    overlay=\"source_viewer.tooltip.partially-covered\"","58","    placement=\"right\"","59","  >","60","    <div","61","      aria-label=\"source_viewer.tooltip.partially-covered\"","62","      className=\"source-line-bar\"","63","    \/>","64","  <\/Tooltip>","65","<\/td>","66","`;","67","","68","exports[`should render correctly: uncovered 1`] = `","78","      aria-label=\"source_viewer.tooltip.uncovered\""],"delete":["2","exports[`render covered line 1`] = `","18","exports[`render line with unknown coverage 1`] = `","33","exports[`render uncovered line 1`] = `"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/CrossComponentSourceViewerWrapper-test.tsx":[{"add":[],"delete":["89","it('should handle line popup', async () => {","90","  const wrapper = shallowRender();","91","  await waitAndUpdate(wrapper);","92","","93","  const linePopup = { component: 'foo', index: 0, line: 16, name: 'b.tsx' };","94","  wrapper.find('ComponentSourceSnippetGroupViewer').prop<Function>('onLinePopupToggle')(linePopup);","95","  expect(wrapper.state('linePopup')).toEqual(linePopup);","96","","97","  wrapper.find('ComponentSourceSnippetGroupViewer').prop<Function>('onLinePopupToggle')(linePopup);","98","  expect(wrapper.state('linePopup')).toBeUndefined();","99","","100","  const openLinePopup = { ...linePopup, open: true };","101","  wrapper.find('ComponentSourceSnippetGroupViewer').prop<Function>('onLinePopupToggle')(","102","    openLinePopup","103","  );","104","  wrapper.find('ComponentSourceSnippetGroupViewer').prop<Function>('onLinePopupToggle')(","105","    openLinePopup","106","  );","107","  expect(wrapper.state('linePopup')).toEqual(linePopup);","108","});","109","","128","  expect(wrapper.state('linePopup')).toEqual({","129","    component: 'foo',","130","    index: 0,","131","    line: 16,","132","    name: 'duplications'","133","  });"]}],"server\/sonar-web\/src\/main\/js\/components\/SourceViewer\/__tests__\/__snapshots__\/SourceViewerBase-test.tsx.snap":[{"add":[],"delete":["155","      onLinePopupToggle={[Function]}"]}]}},"37915e1548b5a706b0aed606ee3250e3496850b0":{"changes":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/issue\/ModuleIssues.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/issue\/ModuleIssuesTest.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/issue\/ModuleIssues.java":[{"add":["21","import com.google.common.base.Strings;","75","  private static ScannerReport.Issue createReportIssue(Issue issue, int componentRef, String ruleName, String activeRuleSeverity) {","90","    locationBuilder.setComponentRef(componentRef);","99","    applyFlows(componentRef, builder, locationBuilder, textRangeBuilder, issue);","103","  private static void applyFlows(int componentRef, ScannerReport.Issue.Builder builder, ScannerReport.IssueLocation.Builder locationBuilder,","112","        int locationComponentRef = ((DefaultInputComponent) location.inputComponent()).batchId();","113","        if (locationComponentRef != componentRef) {","114","          \/\/ Some analyzers are trying to report cross file secondary locations. The API was designed to support it, but server side is not","115","          \/\/ ready to handle it (especially the UI)","116","          \/\/ So let's skip them for now (SONAR-9929)","117","          continue;","118","        }","120","        locationBuilder.setComponentRef(locationComponentRef);"],"delete":["22","","38","import com.google.common.base.Strings;","39","","77","  private static ScannerReport.Issue createReportIssue(Issue issue, int batchId, String ruleName, String activeRuleSeverity) {","92","    locationBuilder.setComponentRef(batchId);","101","    applyFlows(builder, locationBuilder, textRangeBuilder, issue);","105","  private static void applyFlows(ScannerReport.Issue.Builder builder, ScannerReport.IssueLocation.Builder locationBuilder,","115","        locationBuilder.setComponentRef(((DefaultInputComponent) location.inputComponent()).batchId());"]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/issue\/ModuleIssuesTest.java":[{"add":["21","import java.util.Arrays;","185","  \/\/ SONAR-9929 Filter secondary locations that are on different files","186","  @Test","187","  public void skip_cross_file_secondary_locations() {","188","    ruleBuilder.add(SQUID_RULE_KEY).setName(SQUID_RULE_NAME);","189","    activeRulesBuilder.create(SQUID_RULE_KEY).setSeverity(Severity.INFO).setName(SQUID_RULE_NAME).activate();","190","    initModuleIssues();","191","","192","    DefaultIssue issue = new DefaultIssue()","193","      .at(new DefaultIssueLocation().on(file).at(file.selectLine(3)).message(\"Foo\"))","194","      .forRule(SQUID_RULE_KEY)","195","      .addFlow(Arrays.asList(new DefaultIssueLocation().on(file).at(file.selectLine(4)).message(\"Location 1\"),","196","        new DefaultIssueLocation().on(new TestInputFileBuilder(\"foo\", \"src\/Foo2.php\").initMetadata(\"Foo\\nBar\\nBiz\\n\").build()).at(file.selectLine(3)).message(\"Location outside\")));","197","    when(filters.accept(anyString(), any(ScannerReport.Issue.class))).thenReturn(true);","198","","199","    boolean added = moduleIssues.initAndAddIssue(issue);","200","","201","    assertThat(added).isTrue();","202","    ArgumentCaptor<ScannerReport.Issue> argument = ArgumentCaptor.forClass(ScannerReport.Issue.class);","203","    verify(reportPublisher.getWriter()).appendComponentIssue(eq(file.batchId()), argument.capture());","204","    assertThat(argument.getValue().getFlow(0).getLocationList()).hasSize(1);","205","  }","206",""],"delete":[]}]}},"f91190bf830b3f79fb30a74b087d89dba213762d":{"changes":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/UserPermissionDaoTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/permission\/ws\/SearchGlobalPermissionsAction.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/permission\/ws\/UsersAction.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/permission\/ws\/UsersActionTest.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/PermissionQueryTest.java":"ADD","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/permission\/ws\/template\/BulkApplyTemplateActionTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/permission\/UserPermissionMapper.java":"MODIFY","server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/permission\/ws\/UsersActionTest\/search_for_users_is_paginated.json":"ADD","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/permission\/UserPermissionDao.java":"MODIFY","server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/permission\/UserPermissionMapper.xml":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/permission\/ws\/template\/ApplyTemplateActionTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/permission\/PermissionQuery.java":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/UserPermissionDaoTest.java":[{"add":["21","import java.util.ArrayList;","27","import java.util.stream.Collectors;","28","import org.assertj.core.groups.Tuple;","40","import static java.util.Arrays.stream;","41","import static java.util.Collections.emptyList;","42","import static java.util.Collections.singletonList;","81","    expectPermissions(query, asList(user2.getId(), user1.getId()), global2, global3, global1);","87","    expectPermissions(query, asList(user2.getId(), user1.getId(), user3.getId()), global2, global3, org2Global2, global1, org2Global1, project1Perm);","91","    expectPermissions(query, asList(user2.getId(), user1.getId()), global2, global1);","95","    expectPermissions(query, emptyList());","99","    expectPermissions(query, asList(user2.getId(), user1.getId()), global2, global3, global1);","103","    expectPermissions(query, singletonList(user2.getId()), global2, global3);","107","    expectPermissions(query, singletonList(user2.getId()), global2, global3);","111","    expectPermissions(query, singletonList(user2.getId()), global3);","115","    expectPermissions(query, emptyList());","134","    expectPermissions(query, asList(user2.getId(), user1.getId()), perm3, perm2, perm1);","138","    expectPermissions(query, emptyList());","142","    expectPermissions(query, asList(user2.getId(), user1.getId()), perm3, perm2, perm1);","146","    expectPermissions(query, asList(user2.getId(), user1.getId()), perm3, perm2);","150","    expectPermissions(query, emptyList());","154","    expectPermissions(query, emptyList());","171","    assertThat(underTest.countUsersByProjectPermission(dbSession, emptyList())).isEmpty();","174","    expectCount(singletonList(project1.getId()),","186","  public void selectUserIdsByQuery() {","201","    assertThat(underTest.selectUserIdsByQuery(dbSession, query)).containsExactly(user2.getId(), user1.getId());","203","    assertThat(underTest.selectUserIdsByQuery(dbSession, query)).isEmpty();","207","    assertThat(underTest.selectUserIdsByQuery(dbSession, query)).isEmpty();","211","    assertThat(underTest.selectUserIdsByQuery(dbSession, query)).containsExactly(user2.getId(), user1.getId());","215","    assertThat(underTest.selectUserIdsByQuery(dbSession, query)).containsExactly(user1.getId());","219","    assertThat(underTest.selectUserIdsByQuery(dbSession, query)).containsExactly(user1.getId());","223","    assertThat(underTest.selectUserIdsByQuery(dbSession, query)).isEmpty();","224","  }","225","","226","  @Test","227","  public void selectUserIdsByQuery_is_paginated() {","228","    OrganizationDto organization = db.organizations().insert();","229","    List<Integer> userIds = new ArrayList<>();","230","    for (int i = 0; i < 10; i++) {","231","      String name = \"user-\" + i;","232","      UserDto user = insertUser(u -> u.setName(name), organization);","233","      addGlobalPermission(organization, PROVISIONING, user);","234","      addGlobalPermission(organization, SYSTEM_ADMIN, user);","235","      userIds.add(user.getId());","236","    }","237","","238","    assertThat(underTest.selectUserIdsByQuery(dbSession, PermissionQuery.builder().setOrganizationUuid(organization.getUuid())","239","      .setPageSize(3).setPageIndex(1).build()))","240","        .containsExactly(userIds.get(0), userIds.get(1), userIds.get(2));","241","    assertThat(underTest.selectUserIdsByQuery(dbSession, PermissionQuery.builder().setOrganizationUuid(organization.getUuid())","242","      .setPageSize(2).setPageIndex(3).build()))","243","        .containsExactly(userIds.get(4), userIds.get(5));","244","    assertThat(underTest.selectUserIdsByQuery(dbSession, PermissionQuery.builder().setOrganizationUuid(organization.getUuid())","245","      .setPageSize(50).setPageIndex(1).build()))","246","        .hasSize(10);","247","  }","248","","249","  @Test","250","  public void selectUserIdsByQuery_is_sorted_by_insensitive_name() {","251","    OrganizationDto organization = db.organizations().insert();","252","    UserDto user1 = insertUser(u -> u.setName(\"user1\"), organization);","253","    addGlobalPermission(organization, PROVISIONING, user1);","254","    UserDto user3 = insertUser(u -> u.setName(\"user3\"), organization);","255","    addGlobalPermission(organization, SYSTEM_ADMIN, user3);","256","    UserDto user2 = insertUser(u -> u.setName(\"User2\"), organization);","257","    addGlobalPermission(organization, PROVISIONING, user2);","258","","259","    assertThat(underTest.selectUserIdsByQuery(dbSession, PermissionQuery.builder().setOrganizationUuid(organization.getUuid()).build()))","260","      .containsExactly(user1.getId(), user2.getId(), user3.getId());","593","    stream(organizations).forEach(organization -> db.organizations().addMember(organization, user));","599","    stream(organizations).forEach(organization -> db.organizations().addMember(organization, user));","621","  private void expectPermissions(PermissionQuery query, Collection<Integer> expectedUserIds, UserPermissionDto... expectedPermissions) {","622","    assertThat(underTest.selectUserIdsByQuery(dbSession, query)).containsExactly(expectedUserIds.toArray(new Integer[0]));","623","    List<UserPermissionDto> currentPermissions = underTest.selectUserPermissionsByQuery(dbSession, query, expectedUserIds);","624","    assertThat(currentPermissions).hasSize(expectedPermissions.length);","625","    List<Tuple> expectedPermissionsAsTuple = Arrays.stream(expectedPermissions)","626","      .map(expectedPermission -> tuple(expectedPermission.getUserId(), expectedPermission.getPermission(), expectedPermission.getComponentId(),","627","        expectedPermission.getOrganizationUuid()))","628","      .collect(Collectors.toList());","629","    assertThat(currentPermissions)","630","      .extracting(UserPermissionDto::getUserId, UserPermissionDto::getPermission, UserPermissionDto::getComponentId, UserPermissionDto::getOrganizationUuid)","631","      .containsOnly(expectedPermissionsAsTuple.toArray(new Tuple[0]));","633","    \/\/ test method \"countUsers()\"","634","    long distinctUsers = stream(expectedPermissions).mapToLong(UserPermissionDto::getUserId).distinct().count();","635","    assertThat((long) underTest.countUsersByQuery(dbSession, query)).isEqualTo(distinctUsers);"],"delete":["23","import java.util.Collections;","27","import javax.annotation.Nullable;","77","    expectPermissions(organization, query, null, global2, global3, global1);","83","    expectPermissions(organization, query, null, global2, global3, org2Global2, global1, org2Global1, project1Perm);","84","","85","    \/\/ return empty list if non-null but empty logins","86","    expectPermissions(organization, query, Collections.emptyList());","87","","88","    \/\/ global permissions of user1","89","    query = PermissionQuery.builder().setOrganizationUuid(organization.getUuid()).withAtLeastOnePermission().build();","90","    expectPermissions(organization, query, asList(user1.getLogin()), global1);","91","","92","    \/\/ global permissions of user2","93","    query = PermissionQuery.builder().setOrganizationUuid(organization.getUuid()).withAtLeastOnePermission().build();","94","    expectPermissions(organization, query, asList(user2.getLogin()), global2, global3);","95","","96","    \/\/ global permissions of user1, user2 and another one","97","    query = PermissionQuery.builder().setOrganizationUuid(organization.getUuid()).withAtLeastOnePermission().build();","98","    expectPermissions(organization, query, asList(user1.getLogin(), user2.getLogin(), \"missing\"), global2, global3, global1);","99","","100","    \/\/ empty global permissions if login does not exist","101","    query = PermissionQuery.builder().setOrganizationUuid(organization.getUuid()).withAtLeastOnePermission().build();","102","    expectPermissions(organization, query, asList(\"missing\"));","103","","104","    \/\/ empty global permissions if user does not have any","105","    query = PermissionQuery.builder().setOrganizationUuid(organization.getUuid()).withAtLeastOnePermission().build();","106","    expectPermissions(organization, query, asList(user3.getLogin()));","107","","108","    \/\/ user3 has no global permissions","109","    query = PermissionQuery.builder().setOrganizationUuid(organization.getUuid()).withAtLeastOnePermission().build();","110","    expectPermissions(organization, query, asList(user3.getLogin()));","114","    expectPermissions(organization, query, null, global2, global1);","118","    expectPermissions(organization, query, null);","122","    expectPermissions(organization, query, null, global2, global3, global1);","126","    expectPermissions(organization, query, null, global2, global3);","130","    expectPermissions(organization, query, null, global2, global3);","134","    expectPermissions(organization, query, null, global3);","138","    expectPermissions(organization, query, null);","157","    expectPermissions(organization, query, null, perm3, perm2, perm1);","158","","159","    \/\/ project permissions of user1","160","    query = PermissionQuery.builder().setOrganizationUuid(organization.getUuid()).withAtLeastOnePermission().setComponentUuid(project1.uuid()).build();","161","    expectPermissions(organization, query, asList(user1.getLogin()), perm2, perm1);","162","","163","    \/\/ project permissions of user2","164","    query = PermissionQuery.builder().setOrganizationUuid(organization.getUuid()).withAtLeastOnePermission().setComponentUuid(project1.uuid()).build();","165","    expectPermissions(organization, query, asList(user2.getLogin()), perm3);","166","","167","    \/\/ project permissions of user2 and another one","168","    query = PermissionQuery.builder().setOrganizationUuid(organization.getUuid()).withAtLeastOnePermission().setComponentUuid(project1.uuid()).build();","169","    expectPermissions(organization, query, asList(user2.getLogin(), \"missing\"), perm3);","170","","171","    \/\/ empty project permissions if login does not exist","172","    query = PermissionQuery.builder().setOrganizationUuid(organization.getUuid()).withAtLeastOnePermission().setComponentUuid(project1.uuid()).build();","173","    expectPermissions(organization, query, asList(\"missing\"));","174","","175","    \/\/ empty project permissions if user does not have any","176","    query = PermissionQuery.builder().setOrganizationUuid(organization.getUuid()).withAtLeastOnePermission().setComponentUuid(project1.uuid()).build();","177","    expectPermissions(organization, query, asList(user3.getLogin()));","181","    expectPermissions(organization, query, null);","185","    expectPermissions(organization, query, null, perm3, perm2, perm1);","189","    expectPermissions(organization, query, null, perm3, perm2);","193","    expectPermissions(organization, query, null);","197","    expectPermissions(organization, query, null);","214","    assertThat(underTest.countUsersByProjectPermission(dbSession, Collections.emptyList())).isEmpty();","217","    expectCount(asList(project1.getId()),","229","  public void selectUserIds() {","244","    assertThat(underTest.selectUserIds(dbSession, query)).containsExactly(user2.getId(), user1.getId());","246","    assertThat(underTest.selectUserIds(dbSession, query)).isEmpty();","250","    assertThat(underTest.selectUserIds(dbSession, query)).isEmpty();","254","    assertThat(underTest.selectUserIds(dbSession, query)).containsExactly(user2.getId(), user1.getId());","258","    assertThat(underTest.selectUserIds(dbSession, query)).containsExactly(user1.getId());","262","    assertThat(underTest.selectUserIds(dbSession, query)).containsExactly(user1.getId());","266","    assertThat(underTest.selectUserIds(dbSession, query)).isEmpty();","599","    Arrays.stream(organizations).forEach(organization -> db.organizations().addMember(organization, user));","605","    Arrays.stream(organizations).forEach(organization -> db.organizations().addMember(organization, user));","627","  private void expectPermissions(OrganizationDto org, PermissionQuery query, @Nullable Collection<String> logins, UserPermissionDto... expected) {","628","    \/\/ test method \"select()\"","629","    List<UserPermissionDto> permissions = underTest.select(dbSession, query, logins);","630","    assertThat(permissions).hasSize(expected.length);","631","    for (int i = 0; i < expected.length; i++) {","632","      UserPermissionDto got = permissions.get(i);","633","      UserPermissionDto expect = expected[i];","634","      assertThat(got.getUserId()).isEqualTo(expect.getUserId());","635","      assertThat(got.getPermission()).isEqualTo(expect.getPermission());","636","      assertThat(got.getComponentId()).isEqualTo(expect.getComponentId());","637","    }","639","    if (logins == null) {","640","      \/\/ test method \"countUsers()\", which does not make sense if users are filtered","641","      long distinctUsers = Arrays.stream(expected).mapToLong(p -> p.getUserId()).distinct().count();","642","      assertThat((long) underTest.countUsers(dbSession, org.getUuid(), query)).isEqualTo(distinctUsers);","643","    }","660","  private void addOrganizationMember(OrganizationDto org, UserDto user) {","661","    db.organizations().addMember(org, user);","662","  }","663",""]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/permission\/ws\/SearchGlobalPermissionsAction.java":[{"add":["96","            .setUsersCount(countUsers(dbSession, query))","116","  private int countUsers(DbSession dbSession, PermissionQuery permissionQuery) {","117","    return dbClient.userPermissionDao().countUsersByQuery(dbSession, permissionQuery);"],"delete":["96","            .setUsersCount(countUsers(dbSession, org, query))","116","  private int countUsers(DbSession dbSession, OrganizationDto org, PermissionQuery permissionQuery) {","117","    return dbClient.userPermissionDao().countUsers(dbSession, org.getUuid(), permissionQuery);"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/permission\/ws\/UsersAction.java":[{"add":["107","      int total = dbClient.userPermissionDao().countUsersByQuery(dbSession, query);","164","    List<Integer> orderedIds = dbClient.userPermissionDao().selectUserIdsByQuery(dbSession, query);","172","    List<Integer> userIds = users.stream().map(UserDto::getId).collect(Collectors.toList());","175","      .setComponentUuid(project.map(ProjectId::getUuid).orElse(null))","178","    return dbClient.userPermissionDao().selectUserPermissionsByQuery(dbSession, query, userIds);"],"delete":["107","      int total = dbClient.userPermissionDao().countUsers(dbSession, org.getUuid(), query);","164","    List<Integer> orderedIds = dbClient.userPermissionDao().selectUserIds(dbSession, query);","172","    List<String> logins = users.stream().map(UserDto::getLogin).collect(Collectors.toList());","175","      .setComponentUuid(project.isPresent() ? project.get().getUuid() : null)","178","    return dbClient.userPermissionDao().select(dbSession, query, logins);"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/permission\/ws\/UsersActionTest.java":[{"add":["32","import static org.apache.commons.lang.StringUtils.countMatches;","34","import static org.sonar.api.server.ws.WebService.Param.PAGE;","35","import static org.sonar.api.server.ws.WebService.Param.PAGE_SIZE;","43","import static org.sonar.db.permission.OrganizationPermission.PROVISION_PROJECTS;","64","    db.users().insertPermissionOnUser(user1, ADMINISTER_QUALITY_PROFILES);","231","  public void search_for_users_is_paginated() throws Exception {","232","    for (int i = 9; i >= 0; i--) {","233","      UserDto user = db.users().insertUser(newUserDto().setName(\"user-\" + i));","234","      db.organizations().addMember(db.getDefaultOrganization(), user);","235","      db.users().insertPermissionOnUser(user, ADMINISTER);","236","      db.users().insertPermissionOnUser(user, ADMINISTER_QUALITY_GATES);","237","    }","238","    loginAsAdmin(db.getDefaultOrganization());","239","","240","    assertJson(newRequest().setParam(PAGE, \"1\").setParam(PAGE_SIZE, \"2\").execute().getInput()).withStrictArrayOrder().isSimilarTo(\"{\\n\" +","241","      \"  \\\"paging\\\": {\\n\" +","242","      \"    \\\"pageIndex\\\": 1,\\n\" +","243","      \"    \\\"pageSize\\\": 2,\\n\" +","244","      \"    \\\"total\\\": 10\\n\" +","245","      \"  },\\n\" +","246","      \"  \\\"users\\\": [\\n\" +","247","      \"    {\\n\" +","248","      \"      \\\"name\\\": \\\"user-0\\\"\\n\" +","249","      \"    },\\n\" +","250","      \"    {\\n\" +","251","      \"      \\\"name\\\": \\\"user-1\\\"\\n\" +","252","      \"    }\\n\" +","253","      \"  ]\\n\" +","254","      \"}\");","255","    assertJson(newRequest().setParam(PAGE, \"3\").setParam(PAGE_SIZE, \"4\").execute().getInput()).withStrictArrayOrder().isSimilarTo(\"{\\n\" +","256","      \"  \\\"paging\\\": {\\n\" +","257","      \"    \\\"pageIndex\\\": 3,\\n\" +","258","      \"    \\\"pageSize\\\": 4,\\n\" +","259","      \"    \\\"total\\\": 10\\n\" +","260","      \"  },\\n\" +","261","      \"  \\\"users\\\": [\\n\" +","262","      \"    {\\n\" +","263","      \"      \\\"name\\\": \\\"user-8\\\"\\n\" +","264","      \"    },\\n\" +","265","      \"    {\\n\" +","266","      \"      \\\"name\\\": \\\"user-9\\\"\\n\" +","267","      \"    }\\n\" +","268","      \"  ]\\n\" +","269","      \"}\");","270","  }","271","","272","  @Test","273","  public void return_more_than_20_permissions() {","274","    loginAsAdmin(db.getDefaultOrganization());","275","    for (int i = 0; i < 30; i++) {","276","      UserDto user = db.users().insertUser(newUserDto().setLogin(\"user-\" + i));","277","      db.organizations().addMember(db.getDefaultOrganization(), user);","278","      db.users().insertPermissionOnUser(user, SCAN);","279","      db.users().insertPermissionOnUser(user, PROVISION_PROJECTS);","280","    }","281","","282","    String result = newRequest()","283","      .setParam(PAGE_SIZE, \"100\")","284","      .execute()","285","      .getInput();","286","","287","    assertThat(countMatches(result, \"scan\")).isEqualTo(30);","288","  }","289","","290","  @Test"],"delete":["62","    db.users().insertPermissionOnUser(user1, ADMINISTER_QUALITY_PROFILES);"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/PermissionQueryTest.java":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/permission\/ws\/template\/BulkApplyTemplateActionTest.java":[{"add":["265","    return db.getDbClient().userPermissionDao().selectUserIdsByQuery(db.getSession(), query);"],"delete":["265","    return db.getDbClient().userPermissionDao().selectUserIds(db.getSession(), query);"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/permission\/UserPermissionMapper.java":[{"add":["28","  List<UserPermissionDto> selectUserPermissionsByQueryAndUserIds(@Param(\"query\") PermissionQuery query, @Param(\"userIds\") Collection<Integer> userIds);","29","","30","  List<Integer> selectUserIdsByQuery(@Param(\"query\") PermissionQuery query);","33","   * Count the number of distinct users returned by {@link #selectUserIdsByQuery(PermissionQuery)}","36","  int countUsersByQuery(@Param(\"query\") PermissionQuery query);"],"delete":["24","import javax.annotation.Nullable;","26","import org.apache.ibatis.session.RowBounds;","30","  List<UserPermissionDto> selectByQuery(@Param(\"query\") PermissionQuery query, @Nullable @Param(\"userLogins\") Collection<String> userLogins, RowBounds rowBounds);","33","   * Count the number of distinct users returned by {@link #selectByQuery(PermissionQuery, Collection, RowBounds)}","35","   *","36","   * @param useNull must always be null. It is needed for using the sql of ","37","   * {@link #selectByQuery(PermissionQuery, Collection, RowBounds)}","39","  int countUsersByQuery(@Param(\"organizationUuid\") String organizationUuid, @Param(\"query\") PermissionQuery query,","40","    @Nullable @Param(\"userLogins\") Collection<String> useNull);"]}],"server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/permission\/ws\/UsersActionTest\/search_for_users_is_paginated.json":[{"add":[],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/permission\/UserPermissionDao.java":[{"add":["28","import org.sonar.db.Pagination;","38","   * List of user permissions ordered by alphabetical order of user names.","39","   * Pagination is NOT applied.","40","   * No sort is done.","41","   *","42","   * @param query non-null query including optional filters.","43","   * @param userIds Filter on user ids, including disabled users. Must not be empty and maximum size is {@link DatabaseUtils#PARTITION_SIZE_FOR_ORACLE}.","45","  public List<UserPermissionDto> selectUserPermissionsByQuery(DbSession dbSession, PermissionQuery query, Collection<Integer> userIds) {","46","    if (userIds.isEmpty()) {","47","      return emptyList();","49","    checkArgument(userIds.size() <= DatabaseUtils.PARTITION_SIZE_FOR_ORACLE, \"Maximum 1'000 users are accepted\");","50","    return mapper(dbSession).selectUserPermissionsByQueryAndUserIds(query, userIds);","53","  public List<Integer> selectUserIdsByQuery(DbSession dbSession, PermissionQuery query) {","54","    return mapper(dbSession).selectUserIdsByQuery(query)","55","      .stream()","56","      \/\/ Pagination is done in Java because it's too complex to use SQL pagination in Oracle and MsSQL with the distinct","57","      .skip(query.getPageOffset())","58","      .limit(query.getPageSize())","59","      .collect(MoreCollectors.toList());","62","  public int countUsersByQuery(DbSession dbSession, PermissionQuery query) {","63","    return mapper(dbSession).countUsersByQuery(query);"],"delete":["24","import javax.annotation.Nullable;","25","import org.apache.ibatis.session.RowBounds;","39","   * List of user permissions ordered by alphabetical order of user names","40","   *  @param query non-null query including optional filters.","41","   * @param userLogins if null, then filter on all active users. If not null, then filter on logins, including disabled users.","42","   *                   Must not be empty. If not null then maximum size is {@link DatabaseUtils#PARTITION_SIZE_FOR_ORACLE}.","44","  public List<UserPermissionDto> select(DbSession dbSession, PermissionQuery query, @Nullable Collection<String> userLogins) {","45","    if (userLogins != null) {","46","      if (userLogins.isEmpty()) {","47","        return emptyList();","48","      }","49","      checkArgument(userLogins.size() <= DatabaseUtils.PARTITION_SIZE_FOR_ORACLE, \"Maximum 1'000 users are accepted\");","51","","52","    RowBounds rowBounds = new RowBounds(query.getPageOffset(), query.getPageSize());","53","    return mapper(dbSession).selectByQuery(query, userLogins, rowBounds);","56","  \/**","57","   * Shortcut over {@link #select(DbSession, PermissionQuery, Collection)} to return only distinct user","58","   * ids, keeping the same order.","59","   *\/","60","  public List<Integer> selectUserIds(DbSession dbSession, PermissionQuery query) {","61","    List<UserPermissionDto> dtos = select(dbSession, query, null);","62","    return dtos.stream()","63","      .map(UserPermissionDto::getUserId)","64","      .distinct()","65","      .collect(MoreCollectors.toList(dtos.size()));","68","  \/**","69","   * @see UserPermissionMapper#countUsersByQuery(String, PermissionQuery, Collection)","70","   *\/","71","  public int countUsers(DbSession dbSession, String organizationUuid, PermissionQuery query) {","72","    return mapper(dbSession).countUsersByQuery(organizationUuid, query, null);"]}],"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/permission\/UserPermissionMapper.xml":[{"add":["5","  <select id=\"selectUserPermissionsByQueryAndUserIds\" parameterType=\"map\" resultType=\"org.sonar.db.permission.UserPermissionDto\">","11","    <include refid=\"sqlQueryJoins\" \/>","12","    <where>","13","      u.id in <foreach collection=\"userIds\" open=\"(\" close=\")\" item=\"userId\" separator=\",\">#{userId,jdbcType=INTEGER}<\/foreach>","14","      <include refid=\"sqlQueryFilters\" \/>","15","    <\/where>","16","  <\/select>","17","","18","  <select id=\"selectUserIdsByQuery\" parameterType=\"map\" resultType=\"int\">","19","    select","20","      distinct u.id, lower(u.name) as lowerName","21","      <include refid=\"sqlQueryJoins\" \/>","22","      <where>","23","        <include refid=\"sqlQueryFilters\" \/>","24","      <\/where>","25","    order by lowerName asc","30","    <include refid=\"sqlQueryJoins\" \/>","31","    <where>","32","      <include refid=\"sqlQueryFilters\" \/>","33","    <\/where>","36","  <sql id=\"sqlQueryJoins\">","41","  <\/sql>","43","  <sql id=\"sqlQueryFilters\">","44","    and u.active = ${_true}","45","    <if test=\"query.searchQueryToSql != null\">","46","      and (","47","      lower(u.name) like #{query.searchQueryToSqlLowercase,jdbcType=VARCHAR} ESCAPE '\/'","48","      or u.email like #{query.searchQueryToSql,jdbcType=VARCHAR} ESCAPE '\/'","49","      or u.login like #{query.searchQueryToSql,jdbcType=VARCHAR} ESCAPE '\/')","50","    <\/if>","51","    <!-- filter rows with user permissions -->","52","    <if test=\"query.withAtLeastOnePermission()\">","53","      and ur.organization_uuid = om.organization_uuid","54","      and ur.role is not null","55","      <if test=\"query.componentUuid==null\">","56","        and ur.resource_id is null","58","      <if test=\"query.componentUuid!=null\">","59","        and p.uuid = #{query.componentUuid,jdbcType=VARCHAR}","61","      <if test=\"query.permission!=null\">","62","        and ur.role = #{query.permission,jdbcType=VARCHAR}","63","      <\/if>","64","    <\/if>"],"delete":["5","  <select id=\"selectByQuery\" parameterType=\"map\" resultType=\"org.sonar.db.permission.UserPermissionDto\">","11","    <include refid=\"sqlQuery\" \/>","12","    order by lower(u.name), u.name, ur.role","17","    <include refid=\"sqlQuery\" \/>","20","  <sql id=\"sqlQuery\">","25","    <where>","26","      <if test=\"userLogins == null\">","27","        and u.active = ${_true}","28","      <\/if>","29","      <if test=\"userLogins != null\">","30","        and u.login in <foreach collection=\"userLogins\" open=\"(\" close=\")\" item=\"userLogin\" separator=\",\">#{userLogin,jdbcType=VARCHAR}<\/foreach>","31","      <\/if>","32","      <if test=\"query.searchQueryToSql != null\">","33","        and (","34","        lower(u.name) like #{query.searchQueryToSqlLowercase,jdbcType=VARCHAR} ESCAPE '\/'","35","        or u.email like #{query.searchQueryToSql,jdbcType=VARCHAR} ESCAPE '\/'","36","        or u.login like #{query.searchQueryToSql,jdbcType=VARCHAR} ESCAPE '\/')","39","      <!-- filter rows with user permissions -->","40","      <if test=\"query.withAtLeastOnePermission()\">","41","        and ur.organization_uuid = #{query.organizationUuid,jdbcType=VARCHAR}","42","        and ur.role is not null","43","        <if test=\"query.componentUuid==null\">","44","          and ur.resource_id is null","45","        <\/if>","46","        <if test=\"query.componentUuid!=null\">","47","          and p.uuid = #{query.componentUuid,jdbcType=VARCHAR}","48","        <\/if>","49","        <if test=\"query.permission!=null\">","50","          and ur.role = #{query.permission,jdbcType=VARCHAR}","51","        <\/if>","53","    <\/where>"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/permission\/ws\/template\/ApplyTemplateActionTest.java":[{"add":["226","    return db.getDbClient().userPermissionDao().selectUserIdsByQuery(db.getSession(), query);"],"delete":["226","    return db.getDbClient().userPermissionDao().selectUserIds(db.getSession(), query);"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/permission\/PermissionQuery.java":[{"add":["136","    private Integer pageIndex;","137","    private Integer pageSize;"],"delete":["136","    private Integer pageIndex = DEFAULT_PAGE_INDEX;","137","    private Integer pageSize = DEFAULT_PAGE_SIZE;"]}]}},"ed698231768df7018f76f15dcada9b9f731c08bd":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/common\/LocationMessage.css":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/components\/IssueTitleBar.js":"MODIFY","server\/sonar-web\/src\/main\/less\/components\/issues.less":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/issue\/components\/__tests__\/__snapshots__\/IssueTitleBar-test.js.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/common\/LocationMessage.css":[{"add":["10","  text-overflow: ellipsis;","11","  overflow: hidden;"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/components\/IssueTitleBar.js":[{"add":["76","    <div className=\"issue-row\">","77","      <IssueMessage message={issue.message} rule={issue.rule} organization={issue.organization} \/>","78","","79","      <div className=\"issue-row-meta\">","80","        <ul className=\"list-inline issue-meta-list\">","81","          <li className=\"issue-meta\">","82","            <IssueChangelog","83","              creationDate={issue.creationDate}","84","              isOpen={props.currentPopup === 'changelog'}","85","              issue={issue}","86","              togglePopup={props.togglePopup}","87","              onFail={props.onFail}","89","          <\/li>","90","          {issue.textRange != null && (","91","            <li className=\"issue-meta\">","92","              <span className=\"issue-meta-label\" title={translate('line_number')}>","93","                L{issue.textRange.endLine}","94","              <\/span>","95","            <\/li>","96","          )}","97","          {displayLocations && (","98","            <li className=\"issue-meta\">","99","              {props.displayLocationsLink ? (","100","                <Link onClick={stopPropagation} target=\"_blank\" to={issueUrl}>","101","                  {locationsBadge}","103","              ) : (","104","                locationsBadge","106","            <\/li>","107","          )}","108","          <li className=\"issue-meta\">","109","            <Link","110","              className=\"js-issue-permalink link-no-underline\"","111","              onClick={stopPropagation}","112","              target=\"_blank\"","113","              to={issueUrl}>","114","              <LinkIcon \/>","115","            <\/Link>","116","          <\/li>","117","          {hasSimilarIssuesFilter && (","118","            <li className=\"issue-meta\">","119","              <SimilarIssuesFilter","120","                isOpen={props.currentPopup === 'similarIssues'}","121","                issue={issue}","122","                togglePopup={props.togglePopup}","123","                onFail={props.onFail}","124","                onFilter={props.onFilter}","125","              \/>","126","            <\/li>","127","          )}","128","        <\/ul>","129","      <\/div>","130","    <\/div>"],"delete":["76","    <table className=\"issue-table\">","77","      <tbody>","78","        <tr>","79","          <td>","80","            <IssueMessage","81","              message={issue.message}","82","              rule={issue.rule}","83","              organization={issue.organization}","85","          <\/td>","86","          <td className=\"issue-table-meta-cell issue-table-meta-cell-first\">","87","            <ul className=\"list-inline issue-meta-list\">","88","              <li className=\"issue-meta\">","89","                <IssueChangelog","90","                  creationDate={issue.creationDate}","91","                  isOpen={props.currentPopup === 'changelog'}","92","                  issue={issue}","93","                  togglePopup={props.togglePopup}","94","                  onFail={props.onFail}","95","                \/>","96","              <\/li>","97","              {issue.textRange != null && (","98","                <li className=\"issue-meta\">","99","                  <span className=\"issue-meta-label\" title={translate('line_number')}>","100","                    L{issue.textRange.endLine}","101","                  <\/span>","102","                <\/li>","103","              )}","104","              {displayLocations && (","105","                <li className=\"issue-meta\">","106","                  {props.displayLocationsLink ? (","107","                    <Link onClick={stopPropagation} target=\"_blank\" to={issueUrl}>","108","                      {locationsBadge}","109","                    <\/Link>","110","                  ) : (","111","                    locationsBadge","112","                  )}","113","                <\/li>","114","              )}","115","              <li className=\"issue-meta\">","116","                <Link","117","                  className=\"js-issue-permalink link-no-underline\"","118","                  onClick={stopPropagation}","119","                  target=\"_blank\"","120","                  to={issueUrl}>","121","                  <LinkIcon \/>","123","              <\/li>","124","              {hasSimilarIssuesFilter && (","125","                <li className=\"issue-meta\">","126","                  <SimilarIssuesFilter","127","                    isOpen={props.currentPopup === 'similarIssues'}","128","                    issue={issue}","129","                    togglePopup={props.togglePopup}","130","                    onFail={props.onFail}","131","                    onFilter={props.onFilter}","132","                  \/>","133","                <\/li>","135","            <\/ul>","136","          <\/td>","137","        <\/tr>","138","      <\/tbody>","139","    <\/table>"]}],"server\/sonar-web\/src\/main\/less\/components\/issues.less":[{"add":["76",".issue-row {","77","  display: flex;","78","  margin-bottom: 5px;","79","}","80","","81",".issue-row-meta {","82","  flex-grow: 0;","83","  padding-right: 5px;","84","  white-space: nowrap;","94","  flex-grow: 1;","100","  text-overflow: ellipsis;","101","  overflow: hidden;"],"delete":["76",".issue-table + .issue-table {","77","  margin-top: 5px;"]}],"server\/sonar-web\/src\/main\/js\/components\/issue\/components\/__tests__\/__snapshots__\/IssueTitleBar-test.js.snap":[{"add":["11","<div","12","  className=\"issue-row\"","14","  <IssueMessage","15","    message=\"Reduce the number of conditional operators (4) used in the expression\"","16","    organization=\"myorg\"","17","    rule=\"javascript:S1067\"","18","  \/>","19","  <div","20","    className=\"issue-row-meta\"","21","  >","22","    <ul","23","      className=\"list-inline issue-meta-list\"","24","    >","25","      <li","26","        className=\"issue-meta\"","28","        <IssueChangelog","29","          creationDate=\"2017-03-01T09:36:01+0100\"","30","          isOpen={false}","31","          issue={","32","            Object {","33","              \"creationDate\": \"2017-03-01T09:36:01+0100\",","34","              \"flows\": Array [],","35","              \"key\": \"AVsae-CQS-9G3txfbFN2\",","36","              \"line\": 25,","37","              \"message\": \"Reduce the number of conditional operators (4) used in the expression\",","38","              \"organization\": \"myorg\",","39","              \"project\": \"myproject\",","40","              \"rule\": \"javascript:S1067\",","41","              \"secondaryLocations\": Array [],","42","              \"textRange\": Object {","43","                \"endLine\": 26,","44","                \"endOffset\": 15,","45","                \"startLine\": 25,","46","                \"startOffset\": 0,","47","              },","48","            }","49","          }","50","          onFail={[Function]}","51","          togglePopup={[Function]}","52","        \/>","53","      <\/li>","54","      <li","55","        className=\"issue-meta\"","56","      >","57","        <span","58","          className=\"issue-meta-label\"","59","          title=\"line_number\"","61","          L","62","          26","63","        <\/span>","64","      <\/li>","65","      <li","66","        className=\"issue-meta\"","67","      >","68","        <Link","69","          className=\"js-issue-permalink link-no-underline\"","70","          onClick={[Function]}","71","          onlyActiveOnIndex={false}","72","          style={Object {}}","73","          target=\"_blank\"","74","          to={","75","            Object {","76","              \"pathname\": \"\/project\/issues\",","77","              \"query\": Object {","78","                \"branch\": \"feature-1.0\",","79","                \"id\": \"myproject\",","80","                \"issues\": \"AVsae-CQS-9G3txfbFN2\",","81","                \"open\": \"AVsae-CQS-9G3txfbFN2\",","82","              },","83","            }","84","          }","85","        >","86","          <LinkIcon \/>","87","        <\/Link>","88","      <\/li>","89","    <\/ul>","90","  <\/div>","91","<\/div>","95","<div","96","  className=\"issue-row\"","98","  <IssueMessage","99","    message=\"Reduce the number of conditional operators (4) used in the expression\"","100","    organization=\"myorg\"","101","    rule=\"javascript:S1067\"","102","  \/>","103","  <div","104","    className=\"issue-row-meta\"","105","  >","106","    <ul","107","      className=\"list-inline issue-meta-list\"","108","    >","109","      <li","110","        className=\"issue-meta\"","112","        <IssueChangelog","113","          creationDate=\"2017-03-01T09:36:01+0100\"","114","          isOpen={false}","115","          issue={","116","            Object {","117","              \"creationDate\": \"2017-03-01T09:36:01+0100\",","118","              \"flows\": Array [],","119","              \"key\": \"AVsae-CQS-9G3txfbFN2\",","120","              \"line\": 25,","121","              \"message\": \"Reduce the number of conditional operators (4) used in the expression\",","122","              \"organization\": \"myorg\",","123","              \"project\": \"myproject\",","124","              \"rule\": \"javascript:S1067\",","125","              \"secondaryLocations\": Array [],","126","              \"textRange\": Object {","127","                \"endLine\": 26,","128","                \"endOffset\": 15,","129","                \"startLine\": 25,","130","                \"startOffset\": 0,","131","              },","132","            }","133","          }","134","          onFail={[Function]}","135","          togglePopup={[Function]}","136","        \/>","137","      <\/li>","138","      <li","139","        className=\"issue-meta\"","140","      >","141","        <span","142","          className=\"issue-meta-label\"","143","          title=\"line_number\"","145","          L","146","          26","147","        <\/span>","148","      <\/li>","149","      <li","150","        className=\"issue-meta\"","151","      >","152","        <Link","153","          className=\"js-issue-permalink link-no-underline\"","154","          onClick={[Function]}","155","          onlyActiveOnIndex={false}","156","          style={Object {}}","157","          target=\"_blank\"","158","          to={","159","            Object {","160","              \"pathname\": \"\/project\/issues\",","161","              \"query\": Object {","162","                \"branch\": undefined,","163","                \"id\": \"myproject\",","164","                \"issues\": \"AVsae-CQS-9G3txfbFN2\",","165","                \"open\": \"AVsae-CQS-9G3txfbFN2\",","166","              },","167","            }","168","          }","169","        >","170","          <LinkIcon \/>","171","        <\/Link>","172","      <\/li>","173","      <li","174","        className=\"issue-meta\"","175","      >","176","        <SimilarIssuesFilter","177","          isOpen={false}","178","          issue={","179","            Object {","180","              \"creationDate\": \"2017-03-01T09:36:01+0100\",","181","              \"flows\": Array [],","182","              \"key\": \"AVsae-CQS-9G3txfbFN2\",","183","              \"line\": 25,","184","              \"message\": \"Reduce the number of conditional operators (4) used in the expression\",","185","              \"organization\": \"myorg\",","186","              \"project\": \"myproject\",","187","              \"rule\": \"javascript:S1067\",","188","              \"secondaryLocations\": Array [],","189","              \"textRange\": Object {","190","                \"endLine\": 26,","191","                \"endOffset\": 15,","192","                \"startLine\": 25,","193","                \"startOffset\": 0,","194","              },","195","            }","196","          }","197","          onFail={[Function]}","198","          onFilter={[Function]}","199","          togglePopup={[Function]}","200","        \/>","201","      <\/li>","202","    <\/ul>","203","  <\/div>","204","<\/div>"],"delete":["11","<table","12","  className=\"issue-table\"","14","  <tbody>","15","    <tr>","16","      <td>","17","        <IssueMessage","18","          message=\"Reduce the number of conditional operators (4) used in the expression\"","19","          organization=\"myorg\"","20","          rule=\"javascript:S1067\"","21","        \/>","22","      <\/td>","23","      <td","24","        className=\"issue-table-meta-cell issue-table-meta-cell-first\"","26","        <ul","27","          className=\"list-inline issue-meta-list\"","29","          <li","30","            className=\"issue-meta\"","31","          >","32","            <IssueChangelog","33","              creationDate=\"2017-03-01T09:36:01+0100\"","34","              isOpen={false}","35","              issue={","36","                Object {","37","                  \"creationDate\": \"2017-03-01T09:36:01+0100\",","38","                  \"flows\": Array [],","39","                  \"key\": \"AVsae-CQS-9G3txfbFN2\",","40","                  \"line\": 25,","41","                  \"message\": \"Reduce the number of conditional operators (4) used in the expression\",","42","                  \"organization\": \"myorg\",","43","                  \"project\": \"myproject\",","44","                  \"rule\": \"javascript:S1067\",","45","                  \"secondaryLocations\": Array [],","46","                  \"textRange\": Object {","47","                    \"endLine\": 26,","48","                    \"endOffset\": 15,","49","                    \"startLine\": 25,","50","                    \"startOffset\": 0,","51","                  },","52","                }","53","              }","54","              onFail={[Function]}","55","              togglePopup={[Function]}","56","            \/>","57","          <\/li>","58","          <li","59","            className=\"issue-meta\"","60","          >","61","            <span","62","              className=\"issue-meta-label\"","63","              title=\"line_number\"","64","            >","65","              L","66","              26","67","            <\/span>","68","          <\/li>","69","          <li","70","            className=\"issue-meta\"","71","          >","72","            <Link","73","              className=\"js-issue-permalink link-no-underline\"","74","              onClick={[Function]}","75","              onlyActiveOnIndex={false}","76","              style={Object {}}","77","              target=\"_blank\"","78","              to={","79","                Object {","80","                  \"pathname\": \"\/project\/issues\",","81","                  \"query\": Object {","82","                    \"branch\": \"feature-1.0\",","83","                    \"id\": \"myproject\",","84","                    \"issues\": \"AVsae-CQS-9G3txfbFN2\",","85","                    \"open\": \"AVsae-CQS-9G3txfbFN2\",","86","                  },","87","                }","88","              }","89","            >","90","              <LinkIcon \/>","91","            <\/Link>","92","          <\/li>","93","        <\/ul>","94","      <\/td>","95","    <\/tr>","96","  <\/tbody>","97","<\/table>","101","<table","102","  className=\"issue-table\"","104","  <tbody>","105","    <tr>","106","      <td>","107","        <IssueMessage","108","          message=\"Reduce the number of conditional operators (4) used in the expression\"","109","          organization=\"myorg\"","110","          rule=\"javascript:S1067\"","111","        \/>","112","      <\/td>","113","      <td","114","        className=\"issue-table-meta-cell issue-table-meta-cell-first\"","116","        <ul","117","          className=\"list-inline issue-meta-list\"","119","          <li","120","            className=\"issue-meta\"","121","          >","122","            <IssueChangelog","123","              creationDate=\"2017-03-01T09:36:01+0100\"","124","              isOpen={false}","125","              issue={","126","                Object {","127","                  \"creationDate\": \"2017-03-01T09:36:01+0100\",","128","                  \"flows\": Array [],","129","                  \"key\": \"AVsae-CQS-9G3txfbFN2\",","130","                  \"line\": 25,","131","                  \"message\": \"Reduce the number of conditional operators (4) used in the expression\",","132","                  \"organization\": \"myorg\",","133","                  \"project\": \"myproject\",","134","                  \"rule\": \"javascript:S1067\",","135","                  \"secondaryLocations\": Array [],","136","                  \"textRange\": Object {","137","                    \"endLine\": 26,","138","                    \"endOffset\": 15,","139","                    \"startLine\": 25,","140","                    \"startOffset\": 0,","141","                  },","142","                }","143","              }","144","              onFail={[Function]}","145","              togglePopup={[Function]}","146","            \/>","147","          <\/li>","148","          <li","149","            className=\"issue-meta\"","150","          >","151","            <span","152","              className=\"issue-meta-label\"","153","              title=\"line_number\"","154","            >","155","              L","156","              26","157","            <\/span>","158","          <\/li>","159","          <li","160","            className=\"issue-meta\"","161","          >","162","            <Link","163","              className=\"js-issue-permalink link-no-underline\"","164","              onClick={[Function]}","165","              onlyActiveOnIndex={false}","166","              style={Object {}}","167","              target=\"_blank\"","168","              to={","169","                Object {","170","                  \"pathname\": \"\/project\/issues\",","171","                  \"query\": Object {","172","                    \"branch\": undefined,","173","                    \"id\": \"myproject\",","174","                    \"issues\": \"AVsae-CQS-9G3txfbFN2\",","175","                    \"open\": \"AVsae-CQS-9G3txfbFN2\",","176","                  },","177","                }","178","              }","179","            >","180","              <LinkIcon \/>","181","            <\/Link>","182","          <\/li>","183","          <li","184","            className=\"issue-meta\"","185","          >","186","            <SimilarIssuesFilter","187","              isOpen={false}","188","              issue={","189","                Object {","190","                  \"creationDate\": \"2017-03-01T09:36:01+0100\",","191","                  \"flows\": Array [],","192","                  \"key\": \"AVsae-CQS-9G3txfbFN2\",","193","                  \"line\": 25,","194","                  \"message\": \"Reduce the number of conditional operators (4) used in the expression\",","195","                  \"organization\": \"myorg\",","196","                  \"project\": \"myproject\",","197","                  \"rule\": \"javascript:S1067\",","198","                  \"secondaryLocations\": Array [],","199","                  \"textRange\": Object {","200","                    \"endLine\": 26,","201","                    \"endOffset\": 15,","202","                    \"startLine\": 25,","203","                    \"startOffset\": 0,","204","                  },","205","                }","206","              }","207","              onFail={[Function]}","208","              onFilter={[Function]}","209","              togglePopup={[Function]}","210","            \/>","211","          <\/li>","212","        <\/ul>","213","      <\/td>","214","    <\/tr>","215","  <\/tbody>","216","<\/table>"]}]}},"875b06c33e2cad8a31a06b594aba482b102073af":{"changes":{"sonar-application\/src\/main\/assembly\/conf\/wrapper.conf":"MODIFY"},"diff":{"sonar-application\/src\/main\/assembly\/conf\/wrapper.conf":[{"add":["21","wrapper.java.initmemory=8","22","wrapper.java.maxmemory=8"],"delete":["21","wrapper.java.initmemory=3","22","wrapper.java.maxmemory=3"]}]}},"2248da623eef31f86d057c29e6886ea2dc6b8cd9":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/forms\/AddGraphMetricPopup.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/forms\/__tests__\/AddGraphMetricPopup-test.tsx":"ADD","server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/forms\/__tests__\/__snapshots__\/AddGraphMetricPopup-test.tsx.snap":"ADD"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/forms\/AddGraphMetricPopup.tsx":[{"add":["24","export interface AddGraphMetricPopupProps {","36","export default function AddGraphMetricPopup({","37","  elements,","38","  metricsTypeFilter,","39","  ...props","40","}: AddGraphMetricPopupProps) {","72","        onSelect={(item: string) => elements.includes(item) && props.onSelect(item)}"],"delete":["24","interface Props {","36","export default function AddGraphMetricPopup({ elements, metricsTypeFilter, ...props }: Props) {","68","        onSelect={props.onSelect}"]}],"server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/forms\/__tests__\/AddGraphMetricPopup-test.tsx":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/forms\/__tests__\/__snapshots__\/AddGraphMetricPopup-test.tsx.snap":[{"add":[],"delete":[]}]}},"422a756b9519773b3ac8a9b30e4253772581dae1":{"changes":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/component-measures\/drilldown\/__tests__\/__snapshots__\/FilesView-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/component-measures\/drilldown\/FilesView.tsx":"MODIFY"},"diff":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["258","show_them=Show Them"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/drilldown\/__tests__\/__snapshots__\/FilesView-test.tsx.snap":[{"add":["50","    <div","51","      className=\"display-flex-center\"","53","      component_measures.hidden_best_score_metrics.9.","54","      <Button","55","        className=\"button-small spacer-left\"","56","        onClick={[Function]}","57","      >","58","        show_them","59","      <\/Button>","60","    <\/div>"],"delete":["50","    component_measures.hidden_best_score_metrics.1.","51","    <Button","52","      className=\"button-link spacer-left\"","53","      onClick={[Function]}","55","      show_all","56","    <\/Button>"]}],"server\/sonar-web\/src\/main\/js\/apps\/component-measures\/drilldown\/FilesView.tsx":[{"add":["103","  getVisibleComponents = () => {","104","    const { components } = this.props;","105","    if (this.state.showBestMeasures) {","135","    const { selectedIdx } = this.props;","136","    const visibleComponents = this.getVisibleComponents();","145","    const { selectedIdx } = this.props;","146","    const visibleComponents = this.getVisibleComponents();","165","    const filteredComponents = this.getVisibleComponents();","179","        {hidingBestMeasures &&","180","          this.props.paging && (","181","            <Alert className=\"spacer-top\" variant=\"info\">","182","              <div className=\"display-flex-center\">","183","                {translateWithParameters(","184","                  'component_measures.hidden_best_score_metrics',","185","                  formatMeasure(this.props.paging.total - filteredComponents.length, 'INT'),","186","                  formatMeasure(this.props.metric.bestValue, this.props.metric.type)","187","                )}","188","                <Button className=\"button-small spacer-left\" onClick={this.handleShowBestMeasures}>","189","                  {translate('show_them')}","190","                <\/Button>","191","              <\/div>","192","            <\/Alert>","193","          )}"],"delete":["103","  getVisibleComponents = (components: T.ComponentMeasureEnhanced[], showBestMeasures: boolean) => {","104","    if (showBestMeasures) {","134","    const { components, selectedIdx } = this.props;","135","    const visibleComponents = this.getVisibleComponents(components, this.state.showBestMeasures);","144","    const { components, selectedIdx } = this.props;","145","    const visibleComponents = this.getVisibleComponents(components, this.state.showBestMeasures);","164","    const filteredComponents = this.getVisibleComponents(components, this.state.showBestMeasures);","178","        {hidingBestMeasures && (","179","          <Alert className=\"spacer-top\" variant=\"info\">","180","            {translateWithParameters(","181","              'component_measures.hidden_best_score_metrics',","182","              components.length - filteredComponents.length,","183","              formatMeasure(this.props.metric.bestValue, this.props.metric.type)","184","            )}","185","            <Button className=\"button-link spacer-left\" onClick={this.handleShowBestMeasures}>","186","              {translate('show_all')}","187","            <\/Button>","188","          <\/Alert>","189","        )}"]}]}},"7197bceddc7c51d51cd46e22b68cdc71d277aa65":{"changes":{"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/ui\/ws\/ComponentActionTest.java":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/ui\/ws\/ComponentAction.java":"MODIFY"},"diff":{"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/ui\/ws\/ComponentActionTest.java":[{"add":["155","  public void return_favourite_for_branch() {","156","    ComponentDto project = insertOrganizationAndProject();","157","    ComponentDto branch = componentDbTester.insertProjectBranch(project, b -> b.setKey(\"feature1\").setUuid(\"xyz\"));    UserDto user = db.users().insertUser(\"obiwan\");","158","    propertyDbTester.insertProperty(new PropertyDto().setKey(\"favourite\").setResourceId(project.getId()).setUserId(user.getId()));","159","    userSession.logIn(user).addProjectPermission(UserRole.USER, project);","160","    init();","161","","162","    String json = ws.newRequest()","163","      .setParam(\"componentKey\", project.getKey())","164","      .setParam(\"branch\", branch.getBranch())","165","      .execute()","166","      .getInput();","167","","168","    assertJson(json).isSimilarTo(\"{\\n\" +","169","      \"  \\\"organization\\\": \\\"my-org\\\",\\n\" +","170","      \"  \\\"key\\\": \\\"polop\\\",\\n\" +","171","      \"  \\\"isFavorite\\\": true,\\n\" +","172","      \"  \\\"id\\\": \\\"xyz\\\",\\n\" +","173","      \"  \\\"branch\\\": \\\"feature1\\\",\" +","174","      \"  \\\"name\\\": \\\"Polop\\\",\\n\" +","175","      \"  \\\"description\\\": \\\"test project\\\"\\n\" +","176","      \"}\\n\");","177","  }","178","","179","  @Test"],"delete":[]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/ui\/ws\/ComponentAction.java":[{"add":["166","        boolean isFavourite = isFavourite(session, rootProject);","167","        writeComponent(json, component, org, analysis.orElse(null), isFavourite);","197","      String almId = b.getAlm().getId();","221","  private void writeComponent(JsonWriter json, ComponentDto component, OrganizationDto organizationDto, @Nullable SnapshotDto analysis, boolean isFavourite) {","227","      .prop(\"isFavorite\", isFavourite);"],"delete":["166","        writeComponent(json, session, component, org, analysis.orElse(null));","196","      String almId = String.valueOf(b.getAlm().getId());","220","  private void writeComponent(JsonWriter json, DbSession session, ComponentDto component, OrganizationDto organizationDto, @Nullable SnapshotDto analysis) {","226","      .prop(\"isFavorite\", isFavourite(session, component));"]}]}},"d41c7785f74e96ea1cc0295860524aa3fc29dd3a":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/projects\/main.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/projects\/main.js":[{"add":["184","    this.setState({ ready: false });"],"delete":[]}]}},"7a421e5ba7a6a9fedcb89e110632f249df17895b":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualityprofile\/RuleActivator.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualityprofile\/RuleActivator.java":[{"add":["132","    if (!changes.isEmpty()) {","133","      updateProfileDates(dbSession, context);","134","    }","135",""],"delete":["136","    if (!changes.isEmpty()) {","137","      updateProfileDates(dbSession, context);","138","    }"]}]}},"19988ce90b9b35481ee22b5760d4a5e53aedcd16":{"changes":{"sonar-db\/src\/main\/java\/org\/sonar\/db\/version\/v60\/PopulateUuidPathColumnOnProjects.java":"MODIFY"},"diff":{"sonar-db\/src\/main\/java\/org\/sonar\/db\/version\/v60\/PopulateUuidPathColumnOnProjects.java":[{"add":["120","      .mapToObj(relations.snapshotsById::get)","123","      .collect(toCollection(ArrayList::new));"],"delete":["120","      .mapToObj(snapshotId -> relations.snapshotsById.get(snapshotId))","123","      .collect(toCollection(() -> new ArrayList<>()));"]}]}},"87be67f27468e489a1160b545ad678ee37f0406e":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/projects\/filters\/Filter.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/projects\/filters\/Filter.tsx":[{"add":["75","      if (Array.isArray(value) && (event.ctrlKey || event.metaKey)) {"],"delete":["75","      if (Array.isArray(value) && event.ctrlKey) {"]}]}},"e1a6620e18b4b5d14435461289808db9221799f8":{"changes":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/report\/ReportPublisherTest.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/ReportPublisher.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/report\/ReportPublisherTest.java":[{"add":["203","      .contains(\"ANALYSIS SUCCESSFUL, you can browse https:\/\/publicserver\/sonarqube\/dashboard?id=org.sonarsource.sonarqube%3Asonarqube&pullRequest=105\")","210","        \"dashboardUrl=https:\/\/publicserver\/sonarqube\/dashboard?id=org.sonarsource.sonarqube%3Asonarqube&pullRequest=105\\n\" +"],"delete":["203","      .contains(\"ANALYSIS SUCCESSFUL, you can browse https:\/\/publicserver\/sonarqube\/project\/issues?id=org.sonarsource.sonarqube%3Asonarqube&pullRequest=105&resolved=false\")","210","        \"dashboardUrl=https:\/\/publicserver\/sonarqube\/project\/issues?id=org.sonarsource.sonarqube%3Asonarqube&pullRequest=105&resolved=false\\n\" +"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/ReportPublisher.java":[{"add":["248","        .addPathSegment(DASHBOARD)"],"delete":["248","        .addPathSegment(\"project\")","249","        .addPathSegment(\"issues\")","252","        .addQueryParameter(RESOLVED, \"false\")"]}]}},"0b547fab77e6b0e62d2357ac9c0c9102aa1a643b":{"changes":{"server\/sonar-auth-saml\/src\/test\/resources\/org\/sonar\/auth\/saml\/SamlIdentityProviderTest\/encoded_full_response_with_reverse_proxy.txt":"ADD","server\/sonar-auth-saml\/src\/test\/resources\/org\/sonar\/auth\/saml\/SamlIdentityProviderTest\/encoded_response_without_login.txt":"MODIFY","server\/sonar-auth-saml\/src\/test\/resources\/org\/sonar\/auth\/saml\/SamlIdentityProviderTest\/encoded_full_response.txt":"MODIFY","server\/sonar-auth-saml\/src\/test\/resources\/org\/sonar\/auth\/saml\/SamlIdentityProviderTest\/encoded_minimal_response.txt":"MODIFY","server\/sonar-auth-saml\/src\/test\/resources\/org\/sonar\/auth\/saml\/SamlIdentityProviderTest\/encoded_response_without_name.txt":"MODIFY","server\/sonar-auth-saml\/src\/main\/java\/org\/sonar\/auth\/saml\/SamlIdentityProvider.java":"MODIFY","server\/sonar-auth-saml\/src\/test\/java\/org\/sonar\/auth\/saml\/SamlIdentityProviderTest.java":"MODIFY"},"diff":{"server\/sonar-auth-saml\/src\/test\/resources\/org\/sonar\/auth\/saml\/SamlIdentityProviderTest\/encoded_full_response_with_reverse_proxy.txt":[{"add":[],"delete":[]}],"server\/sonar-auth-saml\/src\/test\/resources\/org\/sonar\/auth\/saml\/SamlIdentityProviderTest\/encoded_response_without_login.txt":[{"add":["0","PHNhbWxwOlJlc3BvbnNlIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIERlc3RpbmF0aW9uPSJodHRwOi8vbG9jYWxob3N0OjkwMDAvb2F1dGgyL2NhbGxiYWNrL3NhbWwiIElEPSJJRF9lZTFlNzNkZi1iMWQ4LTQzODUtOGMxNC01YmJlYTZhYTJlMTkiIEluUmVzcG9uc2VUbz0iT05FTE9HSU5fMjY3ZTFiMDUtZTIzNy00YWIwLWFiYmItODZiNTBjNDJiMGQ5IiBJc3N1ZUluc3RhbnQ9IjIwMjAtMDYtMDVUMjM6MDU6MTAuNjQ2WiIgVmVyc2lvbj0iMi4wIj48c2FtbDpJc3N1ZXI+aHR0cDovL2xvY2FsaG9zdDo4MDgwL2F1dGgvcmVhbG1zL3NvbmFycXViZTwvc2FtbDpJc3N1ZXI+PGRzaWc6U2lnbmF0dXJlIHhtbG5zOmRzaWc9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxkc2lnOlNpZ25lZEluZm8+PGRzaWc6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjxkc2lnOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZHNpZy1tb3JlI3JzYS1zaGEyNTYiLz48ZHNpZzpSZWZlcmVuY2UgVVJJPSIjSURfZWUxZTczZGYtYjFkOC00Mzg1LThjMTQtNWJiZWE2YWEyZTE5Ij48ZHNpZzpUcmFuc2Zvcm1zPjxkc2lnOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+PGRzaWc6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8+PC9kc2lnOlRyYW5zZm9ybXM+PGRzaWc6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ii8+PGRzaWc6RGlnZXN0VmFsdWU+alNoN0hwMGRFNGlrY1BsSDhYUHV2Y2Q2d1NkNXJXN2FxOVJwSGtNRzNtYz08L2RzaWc6RGlnZXN0VmFsdWU+PC9kc2lnOlJlZmVyZW5jZT48L2RzaWc6U2lnbmVkSW5mbz48ZHNpZzpTaWduYXR1cmVWYWx1ZT5kMHNXbGZMc05MbEFpSERjS3FoWEdOSTlwZ0p5QmVZQXAyaU5yd09QMStuMThnWlRPTDRZVGhNWjJTZThzb1ZyOG9hZTZjY2U1Z0RXRXQxaURERy9LeVJ2VFRvVlVoUFNQS1BKR1NBSUZjbXE0dzMwcGppSHpPY29tV1lCc1h0dEs3NUFDeHFyRUp0b2VDQi91Q0gyUlh5d05CZEoxbnFIMWcwTTY3OFRQVTZKOXg2MTRXcFc0OUhod3lldndQVDRnVnB5bW9MQXVjWlY1cUFPalJKam5uZXR5eXI3ZTVjTmU0NmMxRzdKSHBEZUdwOGFxejRiL0h2cTVGYmEvSjh2R0NST1YvdmpqMnl0dDNwN202bVFUamk1N1BIbS9wU2lqWGpDNDFEN1hpSVBlTmQrbVRMT0pZWHQvTDM0bXc4VWNnVGdnQXcrdjRNVWxhalJuNTk0dHc9PTwvZHNpZzpTaWduYXR1cmVWYWx1ZT48ZHNpZzpLZXlJbmZvPjxkc2lnOktleU5hbWU+WjlwS1VaYUlwNmJ0SjJGTVV0N2dyX0p4RVBXTGJmYjkyUlVwMUJSbTMtTTwvZHNpZzpLZXlOYW1lPjxkc2lnOlg1MDlEYXRhPjxkc2lnOlg1MDlDZXJ0aWZpY2F0ZT5NSUlDb1RDQ0FZa0NCZ0Z5aGV5aXN6QU5CZ2txaGtpRzl3MEJBUXNGQURBVU1SSXdFQVlEVlFRRERBbHpiMjVoY25GMVltVXdIaGNOTWpBd05qQTFNVGt4TnpVM1doY05NekF3TmpBMU1Ua3hPVE0zV2pBVU1SSXdFQVlEVlFRRERBbHpiMjVoY25GMVltVXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDQndLWDh4VXlyUTQ0S1BSU3ZHSVRrWVdGTE1WOFNLQ2ttQi9BWXdkVkZGTVNDTUJEYTZkNXEzWVhYa0gyTk1SVE1Edm1JK2JPNkZXUVFsWmVjNDdaS0tKaXNwUzRqWCttZjJNdW12UmVodi9JamsraUpzVm9xMEFxazRFOWhPbk1hTXpscVZVbXpMVE1ZZm5kUWQwa3QwTmtPVmRrOElPWlRGaVFLWVBZZUFiZlpWMzVXd0U2TnZoRG9Ra1ErcjJnQnZrQW1zRVZ2ZmYvMythcWF2WTMrTjAyVG03Y0wvbFhOZUJyOHRTajAwRnplODJYRUhOMTJlNmxrSEUrdTM0aFl1M3hXZFQxSnBUR0FNa0xyeXoxd29vM0ZZVDl6OE1teG45cmJuMGZpaEpqMjJYN0JGT3JUUlhsaTltZ0xvWGF6U1l2b1FpakhpMmFQSE9jNlJ4RTNBZ01CQUFFd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFCU01JQ20rMm1nZVV3R0FhckhsQnh5MlR0TU1VVXdWMWM0eVhDM3FjNENqenE5RnJJUHhWZzM3ZUhNRjBCNndjV3BzWCt4TVQ5UUtMQmt1WmZTQXNKUmlBdjRPSmdKYnQ1TDN3R2E1SmNIb3RKOUloUU5BTDlrbkM3Vm1LOG9QODRZWlkxMVhGUkF5WG53djlqVWsyVkJNek1SeWxxdlJEUEdic2M2Si9LcEFRMklCTUtiRXJzSzQ3WVdLdGovNXNXTjZwVTlIY0RNZ3JEUDN1aDdTR2hVM083OFhON21zNnY1WWxpUEhHRlN5eXN6OWZTeUNGK0J0MGxJUFIrc3V1SVpIWjlXS2lqeEVCTlhQVGlOVmVWQ0lDT2lnU1pBZGh4ZStnRjdiNCtaNlVxNGpHSVZxbVl5K091dlBHbkN4aW03R2VrM29ZVlQyVTdRYjNndFV0WTA9PC9kc2lnOlg1MDlDZXJ0aWZpY2F0ZT48L2RzaWc6WDUwOURhdGE+PGRzaWc6S2V5VmFsdWU+PGRzaWc6UlNBS2V5VmFsdWU+PGRzaWc6TW9kdWx1cz5nY0NsL01WTXEwT09DajBVcnhpRTVHRmhTekZmRWlncEpnZndHTUhWUlJURWdqQVEydW5lYXQyRjE1QjlqVEVVekE3NWlQbXp1aFZrRUpXWG5PTzJTaWlZcktVdUkxL3BuOWpMcHIwWG9iL3lJNVBvaWJGYUt0QUtwT0JQWVRwekdqTTVhbFZKc3kwekdINTNVSGRKTGREWkRsWFpQQ0RtVXhZa0NtRDJIZ0czMlZkK1ZzQk9qYjRRNkVKRVBxOW9BYjVBSnJCRmIzMy85L21xbXIyTi9qZE5rNXUzQy81VnpYZ2EvTFVvOU5CYzN2Tmx4QnpkZG51cFpCeFBydCtJV0x0OFZuVTlTYVV4Z0RKQzY4czljS0tOeFdFL2MvREpzWi9hMjU5SDRvU1k5dGwrd1JUcTAwVjVZdlpvQzZGMnMwbUw2RUlveDR0bWp4em5Pa2NSTnc9PTwvZHNpZzpNb2R1bHVzPjxkc2lnOkV4cG9uZW50PkFRQUI8L2RzaWc6RXhwb25lbnQ+PC9kc2lnOlJTQUtleVZhbHVlPjwvZHNpZzpLZXlWYWx1ZT48L2RzaWc6S2V5SW5mbz48L2RzaWc6U2lnbmF0dXJlPjxzYW1scDpTdGF0dXM+PHNhbWxwOlN0YXR1c0NvZGUgVmFsdWU9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpzdGF0dXM6U3VjY2VzcyIvPjwvc2FtbHA6U3RhdHVzPjxzYW1sOkFzc2VydGlvbiB4bWxucz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiIgSUQ9IklEXzU5NmEwYzBhLWYzZGEtNDQ2NS05NTQzLWUxNGMwMmExZWFjNiIgSXNzdWVJbnN0YW50PSIyMDIwLTA2LTA1VDIzOjA1OjEwLjY0NVoiIFZlcnNpb249IjIuMCI+PHNhbWw6SXNzdWVyPmh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9hdXRoL3JlYWxtcy9zb25hcnF1YmU8L3NhbWw6SXNzdWVyPjxzYW1sOlN1YmplY3Q+PHNhbWw6TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6MS4xOm5hbWVpZC1mb3JtYXQ6dW5zcGVjaWZpZWQiPmpvaG5kb2U8L3NhbWw6TmFtZUlEPjxzYW1sOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIj48c2FtbDpTdWJqZWN0Q29uZmlybWF0aW9uRGF0YSBJblJlc3BvbnNlVG89Ik9ORUxPR0lOXzI2N2UxYjA1LWUyMzctNGFiMC1hYmJiLTg2YjUwYzQyYjBkOSIgTm90T25PckFmdGVyPSIyMDM5LTA2LTExVDA5OjQ0OjA4LjY0NVoiIFJlY2lwaWVudD0iaHR0cDovL2xvY2FsaG9zdDo5MDAwL29hdXRoMi9jYWxsYmFjay9zYW1sIi8+PC9zYW1sOlN1YmplY3RDb25maXJtYXRpb24+PC9zYW1sOlN1YmplY3Q+PHNhbWw6Q29uZGl0aW9ucyBOb3RCZWZvcmU9IjIwMjAtMDYtMDVUMjM6MDU6MDguNjQ1WiIgTm90T25PckFmdGVyPSIyMDM5LTA2LTExVDA5OjQ0OjA4LjY0NVoiPjxzYW1sOkF1ZGllbmNlUmVzdHJpY3Rpb24+PHNhbWw6QXVkaWVuY2U+TXlBcHA8L3NhbWw6QXVkaWVuY2U+PC9zYW1sOkF1ZGllbmNlUmVzdHJpY3Rpb24+PC9zYW1sOkNvbmRpdGlvbnM+PHNhbWw6QXV0aG5TdGF0ZW1lbnQgQXV0aG5JbnN0YW50PSIyMDIwLTA2LTA1VDIzOjA1OjEwLjY0N1oiIFNlc3Npb25JbmRleD0iYTg1MzVjNTMtYmY3ZC00YWU3LWFmOGQtMDU2Y2M4MGUxMzk5OjowMjgxNWNkNS05ZWM5LTQ2NDktYTlmMC1kNWZkYjk1NTUxZGMiIFNlc3Npb25Ob3RPbk9yQWZ0ZXI9IjIwMzktMDYtMTFUMDk6NDQ6MTAuNjQ3WiI+PHNhbWw6QXV0aG5Db250ZXh0PjxzYW1sOkF1dGhuQ29udGV4dENsYXNzUmVmPnVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOnVuc3BlY2lmaWVkPC9zYW1sOkF1dGhuQ29udGV4dENsYXNzUmVmPjwvc2FtbDpBdXRobkNvbnRleHQ+PC9zYW1sOkF1dGhuU3RhdGVtZW50PjxzYW1sOkF0dHJpYnV0ZVN0YXRlbWVudD48c2FtbDpBdHRyaWJ1dGUgTmFtZT0ibmFtZSIgTmFtZUZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmF0dHJuYW1lLWZvcm1hdDpiYXNpYyI+PHNhbWw6QXR0cmlidXRlVmFsdWUgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0ieHM6c3RyaW5nIj5Kb2huIERvZTwvc2FtbDpBdHRyaWJ1dGVWYWx1ZT48L3NhbWw6QXR0cmlidXRlPjxzYW1sOkF0dHJpYnV0ZSBOYW1lPSJncm91cHMiIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6YmFzaWMiPjxzYW1sOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI+ZGV2ZWxvcGVyPC9zYW1sOkF0dHJpYnV0ZVZhbHVlPjxzYW1sOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI+cHJvZHVjdC1tYW5hZ2VyPC9zYW1sOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDpBdHRyaWJ1dGU+PHNhbWw6QXR0cmlidXRlIE5hbWU9ImVtYWlsIiBOYW1lRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXR0cm5hbWUtZm9ybWF0OmJhc2ljIj48c2FtbDpBdHRyaWJ1dGVWYWx1ZSB4bWxuczp4cz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJ4czpzdHJpbmciPmpvaG5kb2VAZW1haWwuY29tPC9zYW1sOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDpBdHRyaWJ1dGU+PC9zYW1sOkF0dHJpYnV0ZVN0YXRlbWVudD48L3NhbWw6QXNzZXJ0aW9uPjwvc2FtbHA6UmVzcG9uc2U+"],"delete":["0",""]}],"server\/sonar-auth-saml\/src\/test\/resources\/org\/sonar\/auth\/saml\/SamlIdentityProviderTest\/encoded_full_response.txt":[{"add":["0","PHNhbWxwOlJlc3BvbnNlIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIERlc3RpbmF0aW9uPSJodHRwOi8vbG9jYWxob3N0OjkwMDAvb2F1dGgyL2NhbGxiYWNrL3NhbWwiIElEPSJJRF8yOGM0YzMzZi0yZDNhLTQ5NjEtYjcwZC0yYzMwZmNkYWVkNDAiIEluUmVzcG9uc2VUbz0iT05FTE9HSU5fYjIzZDNjYWYtN2E1Yy00MzcwLWI4NDktMGRiNGQzYzM0ZTc1IiBJc3N1ZUluc3RhbnQ9IjIwMjAtMDYtMDVUMjM6MDI6MjguNDM4WiIgVmVyc2lvbj0iMi4wIj48c2FtbDpJc3N1ZXI+aHR0cDovL2xvY2FsaG9zdDo4MDgwL2F1dGgvcmVhbG1zL3NvbmFycXViZTwvc2FtbDpJc3N1ZXI+PGRzaWc6U2lnbmF0dXJlIHhtbG5zOmRzaWc9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxkc2lnOlNpZ25lZEluZm8+PGRzaWc6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjxkc2lnOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZHNpZy1tb3JlI3JzYS1zaGEyNTYiLz48ZHNpZzpSZWZlcmVuY2UgVVJJPSIjSURfMjhjNGMzM2YtMmQzYS00OTYxLWI3MGQtMmMzMGZjZGFlZDQwIj48ZHNpZzpUcmFuc2Zvcm1zPjxkc2lnOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+PGRzaWc6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8+PC9kc2lnOlRyYW5zZm9ybXM+PGRzaWc6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ii8+PGRzaWc6RGlnZXN0VmFsdWU+cnQxSEkxODFtRFUzaFV5clAwbnpGd2poMzRNTDlKT3QyZ3dVUDZWYSsxTT08L2RzaWc6RGlnZXN0VmFsdWU+PC9kc2lnOlJlZmVyZW5jZT48L2RzaWc6U2lnbmVkSW5mbz48ZHNpZzpTaWduYXR1cmVWYWx1ZT5KNmE3d3ZHRFJ3ZDVRL3pIS0xpUHFJSHhNYTU2a0xlVXZXb1B6TGVrK0FMNnQ5Y2t5UnZJbWN3ZUx4bjVLYVAyUWtBdkVua3dNT0xpUmowdXFqcnNPakhVTEtsZU8rVkgrWnZVUkxJdkxyaE5BL2dVd1VZYXA2cC9QclladUlNWWIwVUxRam8zUFR0eDdTdm1UTVRRdFJoVlJBTURITDkvQzBjbURhZEZxbDRGVE1tQVFUMmVXZ1ppSU1sTG1BUzl3bmZJQ0tpMEdpSmRYb2xaMzRPQnNsRFVzWEdBT1d1WFhiVm12V2xtTGsyRkRvNUhLRFFZYUZvTXFEQVVGQVVzVk80cGtHWGVrRnJXUUwrTC9ZSFV6QUREUzl6ZW16K2hmUExoK2plR0NPckxTYkFhWmJMV0FTN3NFTnVhT0FpdkVXZW5hcGZIQld2WWtTWmFPR09ySlE9PTwvZHNpZzpTaWduYXR1cmVWYWx1ZT48ZHNpZzpLZXlJbmZvPjxkc2lnOktleU5hbWU+WjlwS1VaYUlwNmJ0SjJGTVV0N2dyX0p4RVBXTGJmYjkyUlVwMUJSbTMtTTwvZHNpZzpLZXlOYW1lPjxkc2lnOlg1MDlEYXRhPjxkc2lnOlg1MDlDZXJ0aWZpY2F0ZT5NSUlDb1RDQ0FZa0NCZ0Z5aGV5aXN6QU5CZ2txaGtpRzl3MEJBUXNGQURBVU1SSXdFQVlEVlFRRERBbHpiMjVoY25GMVltVXdIaGNOTWpBd05qQTFNVGt4TnpVM1doY05NekF3TmpBMU1Ua3hPVE0zV2pBVU1SSXdFQVlEVlFRRERBbHpiMjVoY25GMVltVXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDQndLWDh4VXlyUTQ0S1BSU3ZHSVRrWVdGTE1WOFNLQ2ttQi9BWXdkVkZGTVNDTUJEYTZkNXEzWVhYa0gyTk1SVE1Edm1JK2JPNkZXUVFsWmVjNDdaS0tKaXNwUzRqWCttZjJNdW12UmVodi9JamsraUpzVm9xMEFxazRFOWhPbk1hTXpscVZVbXpMVE1ZZm5kUWQwa3QwTmtPVmRrOElPWlRGaVFLWVBZZUFiZlpWMzVXd0U2TnZoRG9Ra1ErcjJnQnZrQW1zRVZ2ZmYvMythcWF2WTMrTjAyVG03Y0wvbFhOZUJyOHRTajAwRnplODJYRUhOMTJlNmxrSEUrdTM0aFl1M3hXZFQxSnBUR0FNa0xyeXoxd29vM0ZZVDl6OE1teG45cmJuMGZpaEpqMjJYN0JGT3JUUlhsaTltZ0xvWGF6U1l2b1FpakhpMmFQSE9jNlJ4RTNBZ01CQUFFd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFCU01JQ20rMm1nZVV3R0FhckhsQnh5MlR0TU1VVXdWMWM0eVhDM3FjNENqenE5RnJJUHhWZzM3ZUhNRjBCNndjV3BzWCt4TVQ5UUtMQmt1WmZTQXNKUmlBdjRPSmdKYnQ1TDN3R2E1SmNIb3RKOUloUU5BTDlrbkM3Vm1LOG9QODRZWlkxMVhGUkF5WG53djlqVWsyVkJNek1SeWxxdlJEUEdic2M2Si9LcEFRMklCTUtiRXJzSzQ3WVdLdGovNXNXTjZwVTlIY0RNZ3JEUDN1aDdTR2hVM083OFhON21zNnY1WWxpUEhHRlN5eXN6OWZTeUNGK0J0MGxJUFIrc3V1SVpIWjlXS2lqeEVCTlhQVGlOVmVWQ0lDT2lnU1pBZGh4ZStnRjdiNCtaNlVxNGpHSVZxbVl5K091dlBHbkN4aW03R2VrM29ZVlQyVTdRYjNndFV0WTA9PC9kc2lnOlg1MDlDZXJ0aWZpY2F0ZT48L2RzaWc6WDUwOURhdGE+PGRzaWc6S2V5VmFsdWU+PGRzaWc6UlNBS2V5VmFsdWU+PGRzaWc6TW9kdWx1cz5nY0NsL01WTXEwT09DajBVcnhpRTVHRmhTekZmRWlncEpnZndHTUhWUlJURWdqQVEydW5lYXQyRjE1QjlqVEVVekE3NWlQbXp1aFZrRUpXWG5PTzJTaWlZcktVdUkxL3BuOWpMcHIwWG9iL3lJNVBvaWJGYUt0QUtwT0JQWVRwekdqTTVhbFZKc3kwekdINTNVSGRKTGREWkRsWFpQQ0RtVXhZa0NtRDJIZ0czMlZkK1ZzQk9qYjRRNkVKRVBxOW9BYjVBSnJCRmIzMy85L21xbXIyTi9qZE5rNXUzQy81VnpYZ2EvTFVvOU5CYzN2Tmx4QnpkZG51cFpCeFBydCtJV0x0OFZuVTlTYVV4Z0RKQzY4czljS0tOeFdFL2MvREpzWi9hMjU5SDRvU1k5dGwrd1JUcTAwVjVZdlpvQzZGMnMwbUw2RUlveDR0bWp4em5Pa2NSTnc9PTwvZHNpZzpNb2R1bHVzPjxkc2lnOkV4cG9uZW50PkFRQUI8L2RzaWc6RXhwb25lbnQ+PC9kc2lnOlJTQUtleVZhbHVlPjwvZHNpZzpLZXlWYWx1ZT48L2RzaWc6S2V5SW5mbz48L2RzaWc6U2lnbmF0dXJlPjxzYW1scDpTdGF0dXM+PHNhbWxwOlN0YXR1c0NvZGUgVmFsdWU9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpzdGF0dXM6U3VjY2VzcyIvPjwvc2FtbHA6U3RhdHVzPjxzYW1sOkFzc2VydGlvbiB4bWxucz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiIgSUQ9IklEXzAxODNiNzgwLTNhYzEtNGVhMC1iMjY5LWIxNWIyZWMyZDFjNSIgSXNzdWVJbnN0YW50PSIyMDIwLTA2LTA1VDIzOjAyOjI4LjQzOFoiIFZlcnNpb249IjIuMCI+PHNhbWw6SXNzdWVyPmh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9hdXRoL3JlYWxtcy9zb25hcnF1YmU8L3NhbWw6SXNzdWVyPjxzYW1sOlN1YmplY3Q+PHNhbWw6TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6MS4xOm5hbWVpZC1mb3JtYXQ6dW5zcGVjaWZpZWQiPmpvaG5kb2U8L3NhbWw6TmFtZUlEPjxzYW1sOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIj48c2FtbDpTdWJqZWN0Q29uZmlybWF0aW9uRGF0YSBJblJlc3BvbnNlVG89Ik9ORUxPR0lOX2IyM2QzY2FmLTdhNWMtNDM3MC1iODQ5LTBkYjRkM2MzNGU3NSIgTm90T25PckFmdGVyPSIyMDM5LTA2LTExVDA5OjQxOjI2LjQzOFoiIFJlY2lwaWVudD0iaHR0cDovL2xvY2FsaG9zdDo5MDAwL29hdXRoMi9jYWxsYmFjay9zYW1sIi8+PC9zYW1sOlN1YmplY3RDb25maXJtYXRpb24+PC9zYW1sOlN1YmplY3Q+PHNhbWw6Q29uZGl0aW9ucyBOb3RCZWZvcmU9IjIwMjAtMDYtMDVUMjM6MDI6MjYuNDM4WiIgTm90T25PckFmdGVyPSIyMDM5LTA2LTExVDA5OjQxOjI2LjQzOFoiPjxzYW1sOkF1ZGllbmNlUmVzdHJpY3Rpb24+PHNhbWw6QXVkaWVuY2U+TXlBcHA8L3NhbWw6QXVkaWVuY2U+PC9zYW1sOkF1ZGllbmNlUmVzdHJpY3Rpb24+PC9zYW1sOkNvbmRpdGlvbnM+PHNhbWw6QXV0aG5TdGF0ZW1lbnQgQXV0aG5JbnN0YW50PSIyMDIwLTA2LTA1VDIzOjAyOjI4LjQzOVoiIFNlc3Npb25JbmRleD0iMjM3NmY5YTMtM2IyYS00ZTlhLWJhOWItODQ3OWNlYmI0MjU3OjowMjgxNWNkNS05ZWM5LTQ2NDktYTlmMC1kNWZkYjk1NTUxZGMiIFNlc3Npb25Ob3RPbk9yQWZ0ZXI9IjIwMzktMDYtMTFUMDk6NDE6MjguNDM5WiI+PHNhbWw6QXV0aG5Db250ZXh0PjxzYW1sOkF1dGhuQ29udGV4dENsYXNzUmVmPnVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOnVuc3BlY2lmaWVkPC9zYW1sOkF1dGhuQ29udGV4dENsYXNzUmVmPjwvc2FtbDpBdXRobkNvbnRleHQ+PC9zYW1sOkF1dGhuU3RhdGVtZW50PjxzYW1sOkF0dHJpYnV0ZVN0YXRlbWVudD48c2FtbDpBdHRyaWJ1dGUgTmFtZT0ibmFtZSIgTmFtZUZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmF0dHJuYW1lLWZvcm1hdDpiYXNpYyI+PHNhbWw6QXR0cmlidXRlVmFsdWUgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0ieHM6c3RyaW5nIj5Kb2huIERvZTwvc2FtbDpBdHRyaWJ1dGVWYWx1ZT48L3NhbWw6QXR0cmlidXRlPjxzYW1sOkF0dHJpYnV0ZSBOYW1lPSJsb2dpbiIgTmFtZUZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmF0dHJuYW1lLWZvcm1hdDpiYXNpYyI+PHNhbWw6QXR0cmlidXRlVmFsdWUgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0ieHM6c3RyaW5nIj5qb2huZG9lPC9zYW1sOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDpBdHRyaWJ1dGU+PHNhbWw6QXR0cmlidXRlIE5hbWU9Imdyb3VwcyIgTmFtZUZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmF0dHJuYW1lLWZvcm1hdDpiYXNpYyI+PHNhbWw6QXR0cmlidXRlVmFsdWUgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0ieHM6c3RyaW5nIj5kZXZlbG9wZXI8L3NhbWw6QXR0cmlidXRlVmFsdWU+PHNhbWw6QXR0cmlidXRlVmFsdWUgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0ieHM6c3RyaW5nIj5wcm9kdWN0LW1hbmFnZXI8L3NhbWw6QXR0cmlidXRlVmFsdWU+PC9zYW1sOkF0dHJpYnV0ZT48c2FtbDpBdHRyaWJ1dGUgTmFtZT0iZW1haWwiIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6YmFzaWMiPjxzYW1sOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI+am9obmRvZUBlbWFpbC5jb208L3NhbWw6QXR0cmlidXRlVmFsdWU+PC9zYW1sOkF0dHJpYnV0ZT48L3NhbWw6QXR0cmlidXRlU3RhdGVtZW50Pjwvc2FtbDpBc3NlcnRpb24+PC9zYW1scDpSZXNwb25zZT4="],"delete":["0",""]}],"server\/sonar-auth-saml\/src\/test\/resources\/org\/sonar\/auth\/saml\/SamlIdentityProviderTest\/encoded_minimal_response.txt":[{"add":["0","PHNhbWxwOlJlc3BvbnNlIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIERlc3RpbmF0aW9uPSJodHRwOi8vbG9jYWxob3N0OjkwMDAvb2F1dGgyL2NhbGxiYWNrL3NhbWwiIElEPSJJRF85ZjFjOTUyYy0zZDA0LTQyN2ItYTE3NS05NDk3ZmQ5NGM4MmYiIEluUmVzcG9uc2VUbz0iT05FTE9HSU5fYzhmNzUxYzgtZWQ4OS00MmNlLTlhMTgtZTQyMjk0NTI0NzQ4IiBJc3N1ZUluc3RhbnQ9IjIwMjAtMDYtMDVUMjI6NTg6NDUuMTg1WiIgVmVyc2lvbj0iMi4wIj48c2FtbDpJc3N1ZXI+aHR0cDovL2xvY2FsaG9zdDo4MDgwL2F1dGgvcmVhbG1zL3NvbmFycXViZTwvc2FtbDpJc3N1ZXI+PGRzaWc6U2lnbmF0dXJlIHhtbG5zOmRzaWc9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxkc2lnOlNpZ25lZEluZm8+PGRzaWc6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjxkc2lnOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZHNpZy1tb3JlI3JzYS1zaGEyNTYiLz48ZHNpZzpSZWZlcmVuY2UgVVJJPSIjSURfOWYxYzk1MmMtM2QwNC00MjdiLWExNzUtOTQ5N2ZkOTRjODJmIj48ZHNpZzpUcmFuc2Zvcm1zPjxkc2lnOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+PGRzaWc6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8+PC9kc2lnOlRyYW5zZm9ybXM+PGRzaWc6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ii8+PGRzaWc6RGlnZXN0VmFsdWU+Zk5YVkRpTnowenJWaUJFMnhuZTVxb3FQanh6czVGTmxDRjBPKzlLejNEbz08L2RzaWc6RGlnZXN0VmFsdWU+PC9kc2lnOlJlZmVyZW5jZT48L2RzaWc6U2lnbmVkSW5mbz48ZHNpZzpTaWduYXR1cmVWYWx1ZT5Bb2ZKSkR5Zk1SYzkyMTB4MmZGY244aE8zUFY1ZVd2R2dwWTZxVkpQanlSNmZscVNsd1k1KzZ3aTdQUTRlRE53ZUNpbGxlUXdUODF5ZjJHcVBtYUVQcWorYWErQkhDWjlXa3dramk5NkVKU0o1alBRa1djbWh1NDQ4V2ljalpRY2IvU0JpeTJ0ZUpJbFlkN2Nja2EzS3JxSUI5cm53Lzc5bExabFBUeXJIdXBWcEhqL3h4aFBKV3NJVjF0NDU0Zk5ydmNaWGhraFRpTGZpWU15N1VxaGs5ZERvWU16RUo3UWhQeHZjS3R0ZU4rQjVITklCSmxHVytXYmpGRXB6NGYzb05TTTdGRmJWcktIbjFVc2dlMXNTYlo1RS90b0J0VlV4akhkV0xabTdOUWJjS3pEYmFZdGZreXlaWkd5R1RUMk93NVE3YmJUZURTd3pCVlg2aUlqYlE9PTwvZHNpZzpTaWduYXR1cmVWYWx1ZT48ZHNpZzpLZXlJbmZvPjxkc2lnOktleU5hbWU+WjlwS1VaYUlwNmJ0SjJGTVV0N2dyX0p4RVBXTGJmYjkyUlVwMUJSbTMtTTwvZHNpZzpLZXlOYW1lPjxkc2lnOlg1MDlEYXRhPjxkc2lnOlg1MDlDZXJ0aWZpY2F0ZT5NSUlDb1RDQ0FZa0NCZ0Z5aGV5aXN6QU5CZ2txaGtpRzl3MEJBUXNGQURBVU1SSXdFQVlEVlFRRERBbHpiMjVoY25GMVltVXdIaGNOTWpBd05qQTFNVGt4TnpVM1doY05NekF3TmpBMU1Ua3hPVE0zV2pBVU1SSXdFQVlEVlFRRERBbHpiMjVoY25GMVltVXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDQndLWDh4VXlyUTQ0S1BSU3ZHSVRrWVdGTE1WOFNLQ2ttQi9BWXdkVkZGTVNDTUJEYTZkNXEzWVhYa0gyTk1SVE1Edm1JK2JPNkZXUVFsWmVjNDdaS0tKaXNwUzRqWCttZjJNdW12UmVodi9JamsraUpzVm9xMEFxazRFOWhPbk1hTXpscVZVbXpMVE1ZZm5kUWQwa3QwTmtPVmRrOElPWlRGaVFLWVBZZUFiZlpWMzVXd0U2TnZoRG9Ra1ErcjJnQnZrQW1zRVZ2ZmYvMythcWF2WTMrTjAyVG03Y0wvbFhOZUJyOHRTajAwRnplODJYRUhOMTJlNmxrSEUrdTM0aFl1M3hXZFQxSnBUR0FNa0xyeXoxd29vM0ZZVDl6OE1teG45cmJuMGZpaEpqMjJYN0JGT3JUUlhsaTltZ0xvWGF6U1l2b1FpakhpMmFQSE9jNlJ4RTNBZ01CQUFFd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFCU01JQ20rMm1nZVV3R0FhckhsQnh5MlR0TU1VVXdWMWM0eVhDM3FjNENqenE5RnJJUHhWZzM3ZUhNRjBCNndjV3BzWCt4TVQ5UUtMQmt1WmZTQXNKUmlBdjRPSmdKYnQ1TDN3R2E1SmNIb3RKOUloUU5BTDlrbkM3Vm1LOG9QODRZWlkxMVhGUkF5WG53djlqVWsyVkJNek1SeWxxdlJEUEdic2M2Si9LcEFRMklCTUtiRXJzSzQ3WVdLdGovNXNXTjZwVTlIY0RNZ3JEUDN1aDdTR2hVM083OFhON21zNnY1WWxpUEhHRlN5eXN6OWZTeUNGK0J0MGxJUFIrc3V1SVpIWjlXS2lqeEVCTlhQVGlOVmVWQ0lDT2lnU1pBZGh4ZStnRjdiNCtaNlVxNGpHSVZxbVl5K091dlBHbkN4aW03R2VrM29ZVlQyVTdRYjNndFV0WTA9PC9kc2lnOlg1MDlDZXJ0aWZpY2F0ZT48L2RzaWc6WDUwOURhdGE+PGRzaWc6S2V5VmFsdWU+PGRzaWc6UlNBS2V5VmFsdWU+PGRzaWc6TW9kdWx1cz5nY0NsL01WTXEwT09DajBVcnhpRTVHRmhTekZmRWlncEpnZndHTUhWUlJURWdqQVEydW5lYXQyRjE1QjlqVEVVekE3NWlQbXp1aFZrRUpXWG5PTzJTaWlZcktVdUkxL3BuOWpMcHIwWG9iL3lJNVBvaWJGYUt0QUtwT0JQWVRwekdqTTVhbFZKc3kwekdINTNVSGRKTGREWkRsWFpQQ0RtVXhZa0NtRDJIZ0czMlZkK1ZzQk9qYjRRNkVKRVBxOW9BYjVBSnJCRmIzMy85L21xbXIyTi9qZE5rNXUzQy81VnpYZ2EvTFVvOU5CYzN2Tmx4QnpkZG51cFpCeFBydCtJV0x0OFZuVTlTYVV4Z0RKQzY4czljS0tOeFdFL2MvREpzWi9hMjU5SDRvU1k5dGwrd1JUcTAwVjVZdlpvQzZGMnMwbUw2RUlveDR0bWp4em5Pa2NSTnc9PTwvZHNpZzpNb2R1bHVzPjxkc2lnOkV4cG9uZW50PkFRQUI8L2RzaWc6RXhwb25lbnQ+PC9kc2lnOlJTQUtleVZhbHVlPjwvZHNpZzpLZXlWYWx1ZT48L2RzaWc6S2V5SW5mbz48L2RzaWc6U2lnbmF0dXJlPjxzYW1scDpTdGF0dXM+PHNhbWxwOlN0YXR1c0NvZGUgVmFsdWU9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpzdGF0dXM6U3VjY2VzcyIvPjwvc2FtbHA6U3RhdHVzPjxzYW1sOkFzc2VydGlvbiB4bWxucz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiIgSUQ9IklEXzVkZTA0NGRlLTlhNzEtNDkzMy1iZjQ3LTVlMTUxNTY2NzcyZiIgSXNzdWVJbnN0YW50PSIyMDIwLTA2LTA1VDIyOjU4OjQ1LjE4NFoiIFZlcnNpb249IjIuMCI+PHNhbWw6SXNzdWVyPmh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9hdXRoL3JlYWxtcy9zb25hcnF1YmU8L3NhbWw6SXNzdWVyPjxzYW1sOlN1YmplY3Q+PHNhbWw6TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6MS4xOm5hbWVpZC1mb3JtYXQ6dW5zcGVjaWZpZWQiPmpvaG5kb2U8L3NhbWw6TmFtZUlEPjxzYW1sOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIj48c2FtbDpTdWJqZWN0Q29uZmlybWF0aW9uRGF0YSBJblJlc3BvbnNlVG89Ik9ORUxPR0lOX2M4Zjc1MWM4LWVkODktNDJjZS05YTE4LWU0MjI5NDUyNDc0OCIgTm90T25PckFmdGVyPSIyMDM5LTA2LTExVDA5OjM3OjQzLjE4NFoiIFJlY2lwaWVudD0iaHR0cDovL2xvY2FsaG9zdDo5MDAwL29hdXRoMi9jYWxsYmFjay9zYW1sIi8+PC9zYW1sOlN1YmplY3RDb25maXJtYXRpb24+PC9zYW1sOlN1YmplY3Q+PHNhbWw6Q29uZGl0aW9ucyBOb3RCZWZvcmU9IjIwMjAtMDYtMDVUMjI6NTg6NDMuMTg0WiIgTm90T25PckFmdGVyPSIyMDM5LTA2LTExVDA5OjM3OjQzLjE4NFoiPjxzYW1sOkF1ZGllbmNlUmVzdHJpY3Rpb24+PHNhbWw6QXVkaWVuY2U+TXlBcHA8L3NhbWw6QXVkaWVuY2U+PC9zYW1sOkF1ZGllbmNlUmVzdHJpY3Rpb24+PC9zYW1sOkNvbmRpdGlvbnM+PHNhbWw6QXV0aG5TdGF0ZW1lbnQgQXV0aG5JbnN0YW50PSIyMDIwLTA2LTA1VDIyOjU4OjQ1LjE4NVoiIFNlc3Npb25JbmRleD0iODIyYWVmMmEtMGQyZS00MmNhLWE3YjEtMDI4M2Q4YWY2Y2ZiOjowMjgxNWNkNS05ZWM5LTQ2NDktYTlmMC1kNWZkYjk1NTUxZGMiIFNlc3Npb25Ob3RPbk9yQWZ0ZXI9IjIwMzktMDYtMTFUMDk6Mzc6NDUuMTg1WiI+PHNhbWw6QXV0aG5Db250ZXh0PjxzYW1sOkF1dGhuQ29udGV4dENsYXNzUmVmPnVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOnVuc3BlY2lmaWVkPC9zYW1sOkF1dGhuQ29udGV4dENsYXNzUmVmPjwvc2FtbDpBdXRobkNvbnRleHQ+PC9zYW1sOkF1dGhuU3RhdGVtZW50PjxzYW1sOkF0dHJpYnV0ZVN0YXRlbWVudD48c2FtbDpBdHRyaWJ1dGUgTmFtZT0ibmFtZSIgTmFtZUZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmF0dHJuYW1lLWZvcm1hdDpiYXNpYyI+PHNhbWw6QXR0cmlidXRlVmFsdWUgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0ieHM6c3RyaW5nIj5Kb2huIERvZTwvc2FtbDpBdHRyaWJ1dGVWYWx1ZT48L3NhbWw6QXR0cmlidXRlPjxzYW1sOkF0dHJpYnV0ZSBOYW1lPSJsb2dpbiIgTmFtZUZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmF0dHJuYW1lLWZvcm1hdDpiYXNpYyI+PHNhbWw6QXR0cmlidXRlVmFsdWUgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0ieHM6c3RyaW5nIj5qb2huZG9lPC9zYW1sOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDpBdHRyaWJ1dGU+PC9zYW1sOkF0dHJpYnV0ZVN0YXRlbWVudD48L3NhbWw6QXNzZXJ0aW9uPjwvc2FtbHA6UmVzcG9uc2U+"],"delete":["0",""]}],"server\/sonar-auth-saml\/src\/test\/resources\/org\/sonar\/auth\/saml\/SamlIdentityProviderTest\/encoded_response_without_name.txt":[{"add":["0","PHNhbWxwOlJlc3BvbnNlIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIERlc3RpbmF0aW9uPSJodHRwOi8vbG9jYWxob3N0OjkwMDAvb2F1dGgyL2NhbGxiYWNrL3NhbWwiIElEPSJJRF8wOGI3NzQxZS1lNjkwLTRiY2UtYjY4OS00YWY5NmEzMTZkYmYiIEluUmVzcG9uc2VUbz0iT05FTE9HSU5fZGE0ODgyODYtMDM3Yy00MWZjLWEwZGEtZmI5Njg1ZWU3NWMxIiBJc3N1ZUluc3RhbnQ9IjIwMjAtMDYtMDVUMjM6MDc6MjUuNjc1WiIgVmVyc2lvbj0iMi4wIj48c2FtbDpJc3N1ZXI+aHR0cDovL2xvY2FsaG9zdDo4MDgwL2F1dGgvcmVhbG1zL3NvbmFycXViZTwvc2FtbDpJc3N1ZXI+PGRzaWc6U2lnbmF0dXJlIHhtbG5zOmRzaWc9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxkc2lnOlNpZ25lZEluZm8+PGRzaWc6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjxkc2lnOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZHNpZy1tb3JlI3JzYS1zaGEyNTYiLz48ZHNpZzpSZWZlcmVuY2UgVVJJPSIjSURfMDhiNzc0MWUtZTY5MC00YmNlLWI2ODktNGFmOTZhMzE2ZGJmIj48ZHNpZzpUcmFuc2Zvcm1zPjxkc2lnOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+PGRzaWc6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8+PC9kc2lnOlRyYW5zZm9ybXM+PGRzaWc6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ii8+PGRzaWc6RGlnZXN0VmFsdWU+TTJrNEZLRm1BcXZyZjNkR0x3VmgvSEJjUmRhZFhoNHhBTHZFSTNqbFhqND08L2RzaWc6RGlnZXN0VmFsdWU+PC9kc2lnOlJlZmVyZW5jZT48L2RzaWc6U2lnbmVkSW5mbz48ZHNpZzpTaWduYXR1cmVWYWx1ZT5GcytmNDdtMlJVdFU0WUhWWWt6Vkp4b3ltWUNFYVgrR2dpZUdXMk9UaGQvSUM0TGRnUUR5Z21HekJIL3lTdGt1ZSs2S1lqYlptNDF2WDFqajZxekltT2FWd2VKZUxmSFR4dzU0K3BzZUNSZGNVcFpCWVNid3BMYml6S0VqRmZjK2hMT0dFL2dPZmpBeVBrc1ZrWE5SSG9BWFhsRENxaUNmN0FOY3BnUUpFTk40OXZBdUpvM2tSMGxjaXZSOUR2cWtpOGJrdzd5a05DMEdGTG5ZNEp5SWJCS0NrdnB5NHdKbFBwUjQrTVRkYUN3b0lDdnZURWFCb20zTlVHSVZkSzdWMFRWa2hSWHdJcVhuNmQ2YjcwTHhJK1VzV2hMVWhEZHgvZXplb2RXbVhOTkpVeWwvTXo0K1hZN0kzSmZaWW5pdnBEMndueXYrYlNzaE42V1R2UFhtTnc9PTwvZHNpZzpTaWduYXR1cmVWYWx1ZT48ZHNpZzpLZXlJbmZvPjxkc2lnOktleU5hbWU+WjlwS1VaYUlwNmJ0SjJGTVV0N2dyX0p4RVBXTGJmYjkyUlVwMUJSbTMtTTwvZHNpZzpLZXlOYW1lPjxkc2lnOlg1MDlEYXRhPjxkc2lnOlg1MDlDZXJ0aWZpY2F0ZT5NSUlDb1RDQ0FZa0NCZ0Z5aGV5aXN6QU5CZ2txaGtpRzl3MEJBUXNGQURBVU1SSXdFQVlEVlFRRERBbHpiMjVoY25GMVltVXdIaGNOTWpBd05qQTFNVGt4TnpVM1doY05NekF3TmpBMU1Ua3hPVE0zV2pBVU1SSXdFQVlEVlFRRERBbHpiMjVoY25GMVltVXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDQndLWDh4VXlyUTQ0S1BSU3ZHSVRrWVdGTE1WOFNLQ2ttQi9BWXdkVkZGTVNDTUJEYTZkNXEzWVhYa0gyTk1SVE1Edm1JK2JPNkZXUVFsWmVjNDdaS0tKaXNwUzRqWCttZjJNdW12UmVodi9JamsraUpzVm9xMEFxazRFOWhPbk1hTXpscVZVbXpMVE1ZZm5kUWQwa3QwTmtPVmRrOElPWlRGaVFLWVBZZUFiZlpWMzVXd0U2TnZoRG9Ra1ErcjJnQnZrQW1zRVZ2ZmYvMythcWF2WTMrTjAyVG03Y0wvbFhOZUJyOHRTajAwRnplODJYRUhOMTJlNmxrSEUrdTM0aFl1M3hXZFQxSnBUR0FNa0xyeXoxd29vM0ZZVDl6OE1teG45cmJuMGZpaEpqMjJYN0JGT3JUUlhsaTltZ0xvWGF6U1l2b1FpakhpMmFQSE9jNlJ4RTNBZ01CQUFFd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFCU01JQ20rMm1nZVV3R0FhckhsQnh5MlR0TU1VVXdWMWM0eVhDM3FjNENqenE5RnJJUHhWZzM3ZUhNRjBCNndjV3BzWCt4TVQ5UUtMQmt1WmZTQXNKUmlBdjRPSmdKYnQ1TDN3R2E1SmNIb3RKOUloUU5BTDlrbkM3Vm1LOG9QODRZWlkxMVhGUkF5WG53djlqVWsyVkJNek1SeWxxdlJEUEdic2M2Si9LcEFRMklCTUtiRXJzSzQ3WVdLdGovNXNXTjZwVTlIY0RNZ3JEUDN1aDdTR2hVM083OFhON21zNnY1WWxpUEhHRlN5eXN6OWZTeUNGK0J0MGxJUFIrc3V1SVpIWjlXS2lqeEVCTlhQVGlOVmVWQ0lDT2lnU1pBZGh4ZStnRjdiNCtaNlVxNGpHSVZxbVl5K091dlBHbkN4aW03R2VrM29ZVlQyVTdRYjNndFV0WTA9PC9kc2lnOlg1MDlDZXJ0aWZpY2F0ZT48L2RzaWc6WDUwOURhdGE+PGRzaWc6S2V5VmFsdWU+PGRzaWc6UlNBS2V5VmFsdWU+PGRzaWc6TW9kdWx1cz5nY0NsL01WTXEwT09DajBVcnhpRTVHRmhTekZmRWlncEpnZndHTUhWUlJURWdqQVEydW5lYXQyRjE1QjlqVEVVekE3NWlQbXp1aFZrRUpXWG5PTzJTaWlZcktVdUkxL3BuOWpMcHIwWG9iL3lJNVBvaWJGYUt0QUtwT0JQWVRwekdqTTVhbFZKc3kwekdINTNVSGRKTGREWkRsWFpQQ0RtVXhZa0NtRDJIZ0czMlZkK1ZzQk9qYjRRNkVKRVBxOW9BYjVBSnJCRmIzMy85L21xbXIyTi9qZE5rNXUzQy81VnpYZ2EvTFVvOU5CYzN2Tmx4QnpkZG51cFpCeFBydCtJV0x0OFZuVTlTYVV4Z0RKQzY4czljS0tOeFdFL2MvREpzWi9hMjU5SDRvU1k5dGwrd1JUcTAwVjVZdlpvQzZGMnMwbUw2RUlveDR0bWp4em5Pa2NSTnc9PTwvZHNpZzpNb2R1bHVzPjxkc2lnOkV4cG9uZW50PkFRQUI8L2RzaWc6RXhwb25lbnQ+PC9kc2lnOlJTQUtleVZhbHVlPjwvZHNpZzpLZXlWYWx1ZT48L2RzaWc6S2V5SW5mbz48L2RzaWc6U2lnbmF0dXJlPjxzYW1scDpTdGF0dXM+PHNhbWxwOlN0YXR1c0NvZGUgVmFsdWU9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpzdGF0dXM6U3VjY2VzcyIvPjwvc2FtbHA6U3RhdHVzPjxzYW1sOkFzc2VydGlvbiB4bWxucz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiIgSUQ9IklEXzhjODA3ODc4LTAyMTMtNGIzNy1iMzc3LWI0Yjg2ZWVkNGVkZiIgSXNzdWVJbnN0YW50PSIyMDIwLTA2LTA1VDIzOjA3OjI1LjY3NVoiIFZlcnNpb249IjIuMCI+PHNhbWw6SXNzdWVyPmh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9hdXRoL3JlYWxtcy9zb25hcnF1YmU8L3NhbWw6SXNzdWVyPjxzYW1sOlN1YmplY3Q+PHNhbWw6TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6MS4xOm5hbWVpZC1mb3JtYXQ6dW5zcGVjaWZpZWQiPmpvaG5kb2U8L3NhbWw6TmFtZUlEPjxzYW1sOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIj48c2FtbDpTdWJqZWN0Q29uZmlybWF0aW9uRGF0YSBJblJlc3BvbnNlVG89Ik9ORUxPR0lOX2RhNDg4Mjg2LTAzN2MtNDFmYy1hMGRhLWZiOTY4NWVlNzVjMSIgTm90T25PckFmdGVyPSIyMDM5LTA2LTExVDA5OjQ2OjIzLjY3NVoiIFJlY2lwaWVudD0iaHR0cDovL2xvY2FsaG9zdDo5MDAwL29hdXRoMi9jYWxsYmFjay9zYW1sIi8+PC9zYW1sOlN1YmplY3RDb25maXJtYXRpb24+PC9zYW1sOlN1YmplY3Q+PHNhbWw6Q29uZGl0aW9ucyBOb3RCZWZvcmU9IjIwMjAtMDYtMDVUMjM6MDc6MjMuNjc1WiIgTm90T25PckFmdGVyPSIyMDM5LTA2LTExVDA5OjQ2OjIzLjY3NVoiPjxzYW1sOkF1ZGllbmNlUmVzdHJpY3Rpb24+PHNhbWw6QXVkaWVuY2U+TXlBcHA8L3NhbWw6QXVkaWVuY2U+PC9zYW1sOkF1ZGllbmNlUmVzdHJpY3Rpb24+PC9zYW1sOkNvbmRpdGlvbnM+PHNhbWw6QXV0aG5TdGF0ZW1lbnQgQXV0aG5JbnN0YW50PSIyMDIwLTA2LTA1VDIzOjA3OjI1LjY3NloiIFNlc3Npb25JbmRleD0iMDg5YzYwNmItMzI1Zi00NDQ5LTgzNTUtYTU0OTVjYmU0YzRjOjowMjgxNWNkNS05ZWM5LTQ2NDktYTlmMC1kNWZkYjk1NTUxZGMiIFNlc3Npb25Ob3RPbk9yQWZ0ZXI9IjIwMzktMDYtMTFUMDk6NDY6MjUuNjc2WiI+PHNhbWw6QXV0aG5Db250ZXh0PjxzYW1sOkF1dGhuQ29udGV4dENsYXNzUmVmPnVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOnVuc3BlY2lmaWVkPC9zYW1sOkF1dGhuQ29udGV4dENsYXNzUmVmPjwvc2FtbDpBdXRobkNvbnRleHQ+PC9zYW1sOkF1dGhuU3RhdGVtZW50PjxzYW1sOkF0dHJpYnV0ZVN0YXRlbWVudD48c2FtbDpBdHRyaWJ1dGUgTmFtZT0ibG9naW4iIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6YmFzaWMiPjxzYW1sOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI+am9obmRvZTwvc2FtbDpBdHRyaWJ1dGVWYWx1ZT48L3NhbWw6QXR0cmlidXRlPjxzYW1sOkF0dHJpYnV0ZSBOYW1lPSJncm91cHMiIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6YmFzaWMiPjxzYW1sOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI+ZGV2ZWxvcGVyPC9zYW1sOkF0dHJpYnV0ZVZhbHVlPjxzYW1sOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI+cHJvZHVjdC1tYW5hZ2VyPC9zYW1sOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDpBdHRyaWJ1dGU+PHNhbWw6QXR0cmlidXRlIE5hbWU9ImVtYWlsIiBOYW1lRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXR0cm5hbWUtZm9ybWF0OmJhc2ljIj48c2FtbDpBdHRyaWJ1dGVWYWx1ZSB4bWxuczp4cz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJ4czpzdHJpbmciPmpvaG5kb2VAZW1haWwuY29tPC9zYW1sOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDpBdHRyaWJ1dGU+PC9zYW1sOkF0dHJpYnV0ZVN0YXRlbWVudD48L3NhbWw6QXNzZXJ0aW9uPjwvc2FtbHA6UmVzcG9uc2U+"],"delete":["0",""]}],"server\/sonar-auth-saml\/src\/main\/java\/org\/sonar\/auth\/saml\/SamlIdentityProvider.java":[{"add":["32","import java.util.regex.Pattern;","36","import javax.servlet.http.HttpServletRequestWrapper;","52","  private static final Pattern HTTPS_PATTERN = Pattern.compile(\"https?:\/\/\");","108","    \/\/","109","    \/\/ Workaround for onelogin\/java-saml validation not taking into account running a reverse proxy configuration. This change","110","    \/\/ makes the validation take into account 'X-Forwarded-Proto' and 'Host' headers set by the reverse proxy","111","    \/\/ More details here:","112","    \/\/ - https:\/\/github.com\/onelogin\/java-saml\/issues\/198","113","    \/\/ - https:\/\/github.com\/onelogin\/java-saml\/issues\/95","114","    \/\/","115","    HttpServletRequest processedRequest = useProxyHeadersInRequest(context.getRequest());","116","","117","    Auth auth = newAuth(initSettings(null), processedRequest, context.getResponse());","188","    samlData.put(\"onelogin.saml2.strict\", true);","202","","203","  private static HttpServletRequest useProxyHeadersInRequest(HttpServletRequest request) {","204","    String forwardedScheme = request.getHeader(\"X-Forwarded-Proto\");","205","    if (forwardedScheme != null) {","206","      request = new HttpServletRequestWrapper(request) {","207","        @Override","208","        public String getScheme() {","209","          return forwardedScheme;","210","        }","211","","212","        @Override","213","        public StringBuffer getRequestURL() {","214","          StringBuffer originalURL = ((HttpServletRequest) getRequest()).getRequestURL();","215","          return new StringBuffer(HTTPS_PATTERN.matcher(originalURL.toString()).replaceFirst(forwardedScheme + \":\/\/\"));","216","        }","217","      };","218","    }","219","","220","    return request;","221","  }"],"delete":["105","    Auth auth = newAuth(initSettings(null), context.getRequest(), context.getResponse());","176","    \/\/ TODO strict mode is unfortunately not compatible with HTTPS configuration on reverse proxy =>","177","    \/\/ https:\/\/jira.sonarsource.com\/browse\/SQAUTHSAML-8","178","    samlData.put(\"onelogin.saml2.strict\", false);"]}],"server\/sonar-auth-saml\/src\/test\/java\/org\/sonar\/auth\/saml\/SamlIdentityProviderTest.java":[{"add":["30","import org.junit.Before;","49","  private static final String SQ_CALLBACK_URL = \"http:\/\/localhost:9000\/oauth2\/callback\/saml\";","54","  private final MapSettings settings = new MapSettings(new PropertyDefinitions(System2.INSTANCE, SamlSettings.definitions()));","55","  private final SamlIdentityProvider underTest = new SamlIdentityProvider(new SamlSettings(settings.asConfig()), new SamlMessageIdChecker(db.getDbClient()));","56","  private HttpServletResponse response = mock(HttpServletResponse.class);","57","  private HttpServletRequest request = mock(HttpServletRequest.class);","59","  @Before","60","  public void setup() {","61","    this.request = mock(HttpServletRequest.class);","62","    this.response = mock(HttpServletResponse.class);","63","    when(this.request.getRequestURL()).thenReturn(new StringBuffer(SQ_CALLBACK_URL));","64","  }","119","    DumbCallbackContext callbackContext = new DumbCallbackContext(request, response, \"encoded_full_response.txt\", SQ_CALLBACK_URL);","120","","121","    underTest.callback(callbackContext);","122","","123","    assertThat(callbackContext.redirectedToRequestedPage.get()).isTrue();","124","    assertThat(callbackContext.userIdentity.getProviderLogin()).isEqualTo(\"johndoe\");","125","    assertThat(callbackContext.verifyState.get()).isTrue();","126","  }","127","","128","  @Test","129","  public void failed_callback_when_behind_a_reverse_proxy_without_needed_header() {","130","    setSettings(true);","131","    \/\/ simulate reverse proxy stripping SSL and not adding X-Forwarded-Proto header","132","    when(this.request.getRequestURL()).thenReturn(new StringBuffer(\"http:\/\/localhost\/oauth2\/callback\/saml\"));","133","    DumbCallbackContext callbackContext = new DumbCallbackContext(request, response, \"encoded_full_response_with_reverse_proxy.txt\",","134","      \"https:\/\/localhost\/oauth2\/callback\/saml\");","135","","136","    assertThatThrownBy(() -> underTest.callback(callbackContext))","137","      .isInstanceOf(UnauthorizedException.class)","138","      .hasMessageContaining(\"The response was received at http:\/\/localhost\/oauth2\/callback\/saml instead of https:\/\/localhost\/oauth2\/callback\/saml\");","139","  }","140","","141","  @Test","142","  public void successful_callback_when_behind_a_reverse_proxy_with_needed_header() {","143","    setSettings(true);","144","    \/\/ simulate reverse proxy stripping SSL and adding X-Forwarded-Proto header","145","    when(this.request.getRequestURL()).thenReturn(new StringBuffer(\"http:\/\/localhost\/oauth2\/callback\/saml\"));","146","    when(this.request.getHeader(\"X-Forwarded-Proto\")).thenReturn(\"https\");","147","    DumbCallbackContext callbackContext = new DumbCallbackContext(request, response, \"encoded_full_response_with_reverse_proxy.txt\",","148","      \"https:\/\/localhost\/oauth2\/callback\/saml\");","160","    DumbCallbackContext callbackContext = new DumbCallbackContext(request, response, \"encoded_full_response.txt\", SQ_CALLBACK_URL);","173","    DumbCallbackContext callbackContext = new DumbCallbackContext(request, response, \"encoded_minimal_response.txt\", SQ_CALLBACK_URL);","187","    DumbCallbackContext callbackContext = new DumbCallbackContext(request, response, \"encoded_full_response.txt\", SQ_CALLBACK_URL);","198","    DumbCallbackContext callbackContext = new DumbCallbackContext(request, response, \"encoded_response_without_login.txt\", SQ_CALLBACK_URL);","209","    DumbCallbackContext callbackContext = new DumbCallbackContext(request, response, \"encoded_response_without_name.txt\", SQ_CALLBACK_URL);","220","    DumbCallbackContext callbackContext = new DumbCallbackContext(request, response, \"encoded_full_response.txt\", SQ_CALLBACK_URL);","255","    DumbCallbackContext callbackContext = new DumbCallbackContext(request, response, \"encoded_full_response.txt\", SQ_CALLBACK_URL);","265","    DumbCallbackContext callbackContext = new DumbCallbackContext(request, response, \"encoded_minimal_response.txt\", SQ_CALLBACK_URL);","280","        \"MIICoTCCAYkCBgFyheyiszANBgkqhkiG9w0BAQsFADAUMRIwEAYDVQQDDAlzb25hcnF1YmUwHhcNMjAwNjA1MTkxNzU3WhcNMzAwNjA1MTkxOTM3WjAUMRIwEAYDVQQDDAlzb25hcnF1YmUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCBwKX8xUyrQ44KPRSvGITkYWFLMV8SKCkmB\/AYwdVFFMSCMBDa6d5q3YXXkH2NMRTMDvmI+bO6FWQQlZec47ZKKJispS4jX+mf2MumvRehv\/Ijk+iJsVoq0Aqk4E9hOnMaMzlqVUmzLTMYfndQd0kt0NkOVdk8IOZTFiQKYPYeAbfZV35WwE6NvhDoQkQ+r2gBvkAmsEVvff\/3+aqavY3+N02Tm7cL\/lXNeBr8tSj00Fze82XEHN12e6lkHE+u34hYu3xWdT1JpTGAMkLryz1woo3FYT9z8Mmxn9rbn0fihJj22X7BFOrTRXli9mgLoXazSYvoQijHi2aPHOc6RxE3AgMBAAEwDQYJKoZIhvcNAQELBQADggEBABSMICm+2mgeUwGAarHlBxy2TtMMUUwV1c4yXC3qc4Cjzq9FrIPxVg37eHMF0B6wcWpsX+xMT9QKLBkuZfSAsJRiAv4OJgJbt5L3wGa5JcHotJ9IhQNAL9knC7VmK8oP84YZY11XFRAyXnwv9jUk2VBMzMRylqvRDPGbsc6J\/KpAQ2IBMKbErsK47YWKtj\/5sWN6pU9HcDMgrDP3uh7SGhU3O78XN7ms6v5YliPHGFSyysz9fSyCF+Bt0lIPR+suuIZHZ9WKijxEBNXPTiNVeVCICOigSZAdhxe+gF7b4+Z6Uq4jGIVqmYy+OuvPGnCxim7Gek3oYVT2U7Qb3gtUtY0=\");","292","    private final HttpServletResponse response = mock(HttpServletResponse.class);","307","      return SQ_CALLBACK_URL;","322","    private final HttpServletResponse response;","323","    private final HttpServletRequest request;","324","    private final String expectedCallbackUrl;","330","    public DumbCallbackContext(HttpServletRequest request, HttpServletResponse response, String encodedResponseFile, String expectedCallbackUrl) {","331","      this.request = request;","332","      this.response = response;","333","      this.expectedCallbackUrl = expectedCallbackUrl;","370","      return this.expectedCallbackUrl;","375","      return this.request;","380","      return this.response;"],"delete":["52","  private MapSettings settings = new MapSettings(new PropertyDefinitions(System2.INSTANCE, SamlSettings.definitions()));","54","  private SamlMessageIdChecker samlMessageIdChecker = mock(SamlMessageIdChecker.class);","55","","56","  private SamlIdentityProvider underTest = new SamlIdentityProvider(new SamlSettings(settings.asConfig()), new SamlMessageIdChecker(db.getDbClient()));","111","    DumbCallbackContext callbackContext = new DumbCallbackContext(\"encoded_full_response.txt\");","123","    DumbCallbackContext callbackContext = new DumbCallbackContext(\"encoded_full_response.txt\");","136","    DumbCallbackContext callbackContext = new DumbCallbackContext(\"encoded_minimal_response.txt\");","150","    DumbCallbackContext callbackContext = new DumbCallbackContext(\"encoded_full_response.txt\");","161","    DumbCallbackContext callbackContext = new DumbCallbackContext(\"encoded_response_without_login.txt\");","172","    DumbCallbackContext callbackContext = new DumbCallbackContext(\"encoded_response_without_name.txt\");","183","    DumbCallbackContext callbackContext = new DumbCallbackContext(\"encoded_full_response.txt\");","218","    DumbCallbackContext callbackContext = new DumbCallbackContext(\"encoded_full_response.txt\");","228","    DumbCallbackContext callbackContext = new DumbCallbackContext(\"encoded_minimal_response.txt\");","243","        \"MIICoTCCAYkCBgFksusMzTANBgkqhkiG9w0BAQsFADAUMRIwEAYDVQQDDAlzb25hcnF1YmUwHhcNMTgwNzE5MTQyMDA2WhcNMjgwNzE5MTQyMTQ2WjAUMRIwEAYDVQQDDAlzb25hcnF1YmUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDEOth5gxpTs1f3bFGUD8hO97eMIsDZvvE3PZeKoeTRG7mOLu6rfLXphG3fE3E6\/xqUhPP5p9hJl9DwgaMewhdZhfHqtOw6\/SPMCQNFVNw9FQ7lprWKg8cZygYLDxhObEvCWPek8KcMb\/vlKD8c8ha374O9qET51CVogDM5ropp02q0ELxoUKXqphKH4+sGXRVnDHaEsFHxse1HnciZT5mF1G45vxDItdAnWKkXYKVHC+Et52tCieqM0ygpQF1lWVJFXVOqsi03YkMu7IkWvSSfAw+uEcfmquT7FbxJ2n5gp94odAkQB0HK3fABrHr+G+n2QvWG6WwQPJTL0Ov0w+tNAgMBAAEwDQYJKoZIhvcNAQELBQADggEBACQfOrJF98nunKz6CN+YZXXMYhzQiqTD0MlzCg+Rdhir+WC\/ru3Kz8omv52W\/sXEMNQbEZBksVLl8W\/1xeBS41Sf1nfutU560v\/j3\/OmOcnCw4qebqFH7nB8RL8vA4rGx430W\/PeeUMikY1mSjlwhnJGiICQ3Y8I2qM6QWEr\/Df2\/gFCW2YnHbnS6Q\/OwRQi+UFIzKklSQQa0gAnqfM4oSKU2OMhzScinWg1buMYfJSXgd4qIhPvRsZpqBsdt\/OSrU2D5Y2YfSu8oIcxBRgJoERH5BV9GdOID4fS+TYw0M0QO\/ORetNw1mA\/8Npsy8okF8Cn7fDgbnWC8uz+\/xDc14I=\");","255","","256","    private HttpServletResponse response = mock(HttpServletResponse.class);","271","      return \"http:\/\/localhost\/oauth\/callback\/saml\";","286","","287","    private HttpServletResponse response = mock(HttpServletResponse.class);","288","    private HttpServletRequest request = mock(HttpServletRequest.class);","289","","295","    public DumbCallbackContext(String encodedResponseFile) {","296","      when(getRequest().getRequestURL()).thenReturn(new StringBuffer(\"http:\/\/localhost\/oauth\/callback\/saml\"));","333","      return \"http:\/\/localhost\/oauth\/callback\/saml\";","338","      return request;","343","      return response;"]}]}},"82d291e0327d14bac525979b952a8a45e68c1104":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/authentication\/InitFilter.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/authentication\/InitFilterTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/authentication\/AuthenticationError.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/authentication\/AuthenticationFilter.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/authentication\/UserSessionInitializer.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/authentication\/OAuth2CallbackFilterTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/authentication\/OAuth2CallbackFilter.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/authentication\/UserSessionInitializerTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/authentication\/InitFilter.java":[{"add":["85","      handleAuthenticationError(e, response, getContextPath());"],"delete":["85","      handleAuthenticationError(e, response);"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/authentication\/InitFilterTest.java":[{"add":["175","  @Test","176","  public void redirect_with_context_path_when_failing_because_of_UnauthorizedException() throws Exception {","177","    when(server.getContextPath()).thenReturn(\"\/sonarqube\");","178","    IdentityProvider identityProvider = new FailWithUnauthorizedExceptionIdProvider(\"failing\");","179","    when(request.getRequestURI()).thenReturn(\"\/sonarqube\/sessions\/init\/\" + identityProvider.getKey());","180","    identityProviderRepository.addIdentityProvider(identityProvider);","181","","182","    underTest.doFilter(request, response, chain);","183","","184","    verify(response).sendRedirect(\"\/sonarqube\/sessions\/unauthorized?message=Email+john%40email.com+is+already+used\");","185","  }","186","","245",""],"delete":["229",""]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/authentication\/AuthenticationError.java":[{"add":["52","  static void handleAuthenticationError(AuthenticationException e, HttpServletResponse response, String contextPath) {","53","    redirectTo(response, getPath(e, contextPath));","56","  private static String getPath(AuthenticationException e, String contextPath) {","61","    return contextPath + format(UNAUTHORIZED_PATH_WITH_MESSAGE, encodeMessage(publicMessage));"],"delete":["52","  static void handleAuthenticationError(AuthenticationException e, HttpServletResponse response) {","53","    redirectTo(response, getPath(e));","56","  private static String getPath(AuthenticationException e) {","61","    return format(UNAUTHORIZED_PATH_WITH_MESSAGE, encodeMessage(publicMessage));"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/authentication\/AuthenticationFilter.java":[{"add":["72","","73","  String getContextPath() {","74","    return server.getContextPath();","75","  }"],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/authentication\/UserSessionInitializer.java":[{"add":["112","        handleAuthenticationError(e, response, request.getContextPath());"],"delete":["112","        handleAuthenticationError(e, response);"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/authentication\/OAuth2CallbackFilterTest.java":[{"add":["169","  public void redirect_with_context_path_when_failing_because_of_UnauthorizedExceptionException() throws Exception {","170","    when(server.getContextPath()).thenReturn(\"\/sonarqube\");","171","    FailWithUnauthorizedExceptionIdProvider identityProvider = new FailWithUnauthorizedExceptionIdProvider();","172","    identityProvider","173","      .setKey(\"failing\")","174","      .setName(\"name of failing\")","175","      .setEnabled(true);","176","    when(request.getRequestURI()).thenReturn(\"\/sonarqube\/oauth2\/callback\/\" + identityProvider.getKey());","177","    identityProviderRepository.addIdentityProvider(identityProvider);","178","","179","    underTest.doFilter(request, response, chain);","180","","181","    verify(response).sendRedirect(\"\/sonarqube\/sessions\/unauthorized?message=Email+john%40email.com+is+already+used\");","182","  }","183","","184","  @Test"],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/authentication\/OAuth2CallbackFilter.java":[{"add":["80","      handleAuthenticationError(e, response, getContextPath());"],"delete":["80","      handleAuthenticationError(e, response);"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/authentication\/UserSessionInitializerTest.java":[{"add":["31","import org.sonar.api.server.authentication.BaseIdentityProvider;","223","  @Test","224","  public void return_to_session_unauthorized_when_error_on_from_external_provider() throws Exception {","225","    when(ssoAuthenticator.authenticate(request, response)).thenReturn(Optional.empty());","226","    doThrow(AuthenticationException.newBuilder().setSource(Source.external(newBasicIdentityProvider(\"failing\"))).setPublicMessage(\"Token id hasn't been found\").build())","227","      .when(jwtHttpHandler).validateToken(request, response);","228","","229","    assertThat(underTest.initUserSession(request, response)).isFalse();","230","","231","    verify(response).sendRedirect(\"\/sessions\/unauthorized?message=Token+id+hasn%27t+been+found\");","232","  }","233","","234","  @Test","235","  public void return_to_session_unauthorized_when_error_on_from_external_provider_with_context_path() throws Exception {","236","    when(request.getContextPath()).thenReturn(\"\/sonarqube\");","237","    when(ssoAuthenticator.authenticate(request, response)).thenReturn(Optional.empty());","238","    doThrow(AuthenticationException.newBuilder().setSource(Source.external(newBasicIdentityProvider(\"failing\"))).setPublicMessage(\"Token id hasn't been found\").build())","239","      .when(jwtHttpHandler).validateToken(request, response);","240","","241","    assertThat(underTest.initUserSession(request, response)).isFalse();","242","","243","    verify(response).sendRedirect(\"\/sonarqube\/sessions\/unauthorized?message=Token+id+hasn%27t+been+found\");","244","  }","245","","265","","266","  private static BaseIdentityProvider newBasicIdentityProvider(String name) {","267","    BaseIdentityProvider mock = mock(BaseIdentityProvider.class);","268","    when(mock.getName()).thenReturn(name);","269","    return mock;","270","  }"],"delete":[]}]}},"f2cd33bc2d4e583adbe9e0ea6ada910bc7516f37":{"changes":{"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/utils\/DurationTest.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/utils\/Duration.java":"MODIFY"},"diff":{"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/utils\/DurationTest.java":[{"add":["47","    assertThat(Duration.create(0).encode(HOURS_IN_DAY)).isEqualTo(\"0min\");","57","    assertThat(Duration.decode(\"0min\", HOURS_IN_DAY)).isEqualTo(Duration.create(0));"],"delete":[]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/utils\/Duration.java":[{"add":["123","    return stringBuilder.length() == 0 ? (\"0\" + MINUTE) : stringBuilder.toString();"],"delete":["123","    return stringBuilder.toString();"]}]}},"e3ab105183d7b7678340b2cca8902929fda8200d":{"changes":{"server\/sonar-qa-util\/src\/main\/java\/org\/sonarqube\/qa\/util\/TesterSession.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/branch\/pr\/ws\/ListAction.java":"MODIFY","tests\/src\/test\/java\/org\/sonarqube\/tests\/analysis\/PermissionTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/branch\/pr\/ws\/ListActionTest.java":"MODIFY","server\/sonar-qa-util\/src\/main\/java\/org\/sonarqube\/qa\/util\/PermissionTester.java":"ADD","server\/sonar-qa-util\/src\/main\/java\/org\/sonarqube\/qa\/util\/Tester.java":"MODIFY"},"diff":{"server\/sonar-qa-util\/src\/main\/java\/org\/sonarqube\/qa\/util\/TesterSession.java":[{"add":["45","  PermissionTester permissions();","46",""],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/branch\/pr\/ws\/ListAction.java":[{"add":["36","import org.sonar.db.permission.OrganizationPermission;","50","import static org.sonar.api.web.UserRole.USER;","51","import static org.sonar.core.permission.GlobalPermissions.SCAN_EXECUTION;","58","import static org.sonar.server.user.AbstractUserSession.insufficientPrivilegesException;","80","        \"One of the following permissions is required: \" +","81","        \"<ul>\" +","82","        \"<li>'Browse' rights on the specified project<\/li>\" +","83","        \"<li>'Execute Analysis' rights on the specified project<\/li>\" +","84","        \"<\/ul>\")","97","      checkPermission(project);","118","        .forEach(b -> addPullRequest(protobufResponse, b, mergeBranchesByUuid, qualityGateMeasuresByComponentUuids.get(b.getUuid()), branchStatisticsByBranchUuid.get(b.getUuid()),","124","  private void checkPermission(ComponentDto component) {","125","    if (userSession.hasComponentPermission(USER, component) ||","126","      userSession.hasComponentPermission(SCAN_EXECUTION, component) ||","127","      userSession.hasPermission(OrganizationPermission.SCAN, component.getOrganizationUuid())) {","128","      return;","129","    }","130","    throw insufficientPrivilegesException();","131","  }","132","","134","    @Nullable LiveMeasureDto qualityGateMeasure, BranchStatistics branchStatistics, @Nullable String analysisDate) {"],"delete":["30","import org.sonar.api.web.UserRole;","77","        \"Requires 'Administer' rights on the specified project.\")","90","      userSession.checkComponentPermission(UserRole.USER, project);","111","        .forEach(b -> addPullRequest(protobufResponse, b, mergeBranchesByUuid, qualityGateMeasuresByComponentUuids.get(b.getUuid()),  branchStatisticsByBranchUuid.get(b.getUuid()),","118","                                     @Nullable LiveMeasureDto qualityGateMeasure, BranchStatistics branchStatistics, @Nullable String analysisDate) {"]}],"tests\/src\/test\/java\/org\/sonarqube\/tests\/analysis\/PermissionTest.java":[{"add":["28","import org.sonarqube.qa.util.Tester;","29","import org.sonarqube.tests.Category3Suite;","30","import org.sonarqube.ws.Permissions;","31","import org.sonarqube.ws.Projects.CreateWsResponse.Project;","33","import org.sonarqube.ws.Users.CreateWsResponse.User;","46","  public Tester tester = new Tester(orchestrator).disableOrganizations();","51","    tester.settings().setGlobalSetting(\"sonar.forceAuthentication\", \"true\");","56","    User user = createUserWithProvisioningAndScanPermissions();","59","    UserTokens.GenerateWsResponse generateWsResponse = tester.wsClient().userTokens().generate(new GenerateRequest()","60","      .setLogin(user.getLogin())","89","    User user = createUserWithProvisioningAndScanPermissions();","109","      \"sonar.login\", user.getLogin(),","110","      \"sonar.password\", user.getLogin());","115","  public void run_scanner_with_user_having_only_scan_permission_on_project() {","116","    User user = tester.users().generate();","117","    Project project = tester.projects().provision(c -> c.setVisibility(\"private\"));","118","    Permissions.PermissionTemplate template = tester.permissions().generateTemplate();","119","    tester.permissions().addUserToTemplate(user, template, \"scan\");","120","    tester.permissions().applyTemplate(template, project);","122","    BuildResult buildResult = scanQuietly(\"shared\/xoo-sample\",","123","      \"sonar.projectKey\", project.getKey(),","124","      \"sonar.login\", user.getLogin(),","125","      \"sonar.password\", user.getLogin());","145","  private User createUserWithProvisioningAndScanPermissions() {","146","    User user = tester.users().generate();","147","    tester.wsClient().permissions().addUser(new AddUserRequest().setLogin(user.getLogin()).setPermission(\"provisioning\"));","148","    tester.wsClient().permissions().addUser(new AddUserRequest().setLogin(user.getLogin()).setPermission(\"scan\"));","149","    return user;"],"delete":["24","import org.sonarqube.tests.Category3Suite;","25","import javax.annotation.Nullable;","26","import org.junit.After;","32","import org.sonarqube.ws.client.WsClient;","35","import org.sonarqube.ws.client.usertokens.RevokeRequest;","36","import org.sonarqube.ws.client.usertokens.UserTokensService;","37","import util.user.UserRule;","40","import static util.ItUtils.newAdminWsClient;","42","import static util.ItUtils.resetSettings;","43","import static util.ItUtils.setServerProperty;","47","  private static final String A_LOGIN = \"a_login\";","48","  private static final String A_PASSWORD = \"a_password\";","49","","54","  public UserRule userRule = UserRule.from(orchestrator);","55","","56","  private WsClient adminWsClient;","57","  private UserTokensService userTokensWsClient;","61","    orchestrator.resetData();","62","","64","    setServerProperty(orchestrator, \"sonar.forceAuthentication\", \"true\");","65","","66","    adminWsClient = newAdminWsClient(orchestrator);","67","    userTokensWsClient = adminWsClient.userTokens();","68","  }","69","","70","  @After","71","  public void tearDown() {","72","    resetSettings(orchestrator, null, \"sonar.forceAuthentication\");","73","    userRule.resetUsers();","78","    createUserWithProvisioningAndScanPermissions();","81","    UserTokens.GenerateWsResponse generateWsResponse = userTokensWsClient.generate(new GenerateRequest()","82","      .setLogin(A_LOGIN)","92","    userTokensWsClient.revoke(new RevokeRequest().setLogin(A_LOGIN).setName(tokenName));","112","    createUserWithProvisioningAndScanPermissions();","132","      \"sonar.login\", A_LOGIN,","133","      \"sonar.password\", A_PASSWORD);","138","  public void run_scanner_with_user_having_scan_permission_only_on_project() {","139","    userRule.createUser(A_LOGIN, A_PASSWORD);","140","    orchestrator.getServer().provisionProject(\"sample\", \"sample\");","141","    addUserPermission(A_LOGIN, \"scan\", \"sample\");","143","    BuildResult buildResult = scanQuietly(\"shared\/xoo-sample\", \"sonar.login\", A_LOGIN, \"sonar.password\", A_PASSWORD);","148","  private void addUserPermission(String login, String permission, @Nullable String projectKey) {","149","    adminWsClient.permissions().addUser(new AddUserRequest()","150","      .setLogin(login)","151","      .setPermission(permission)","152","      .setProjectKey(projectKey));","153","  }","154","","170","  private void createUserWithProvisioningAndScanPermissions() {","171","    userRule.createUser(A_LOGIN, A_PASSWORD);","172","    addUserPermission(A_LOGIN, \"provisioning\", null);","173","    addUserPermission(A_LOGIN, \"scan\", null);"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/branch\/pr\/ws\/ListActionTest.java":[{"add":["38","import org.sonar.db.permission.OrganizationPermission;","43","import org.sonar.server.exceptions.ForbiddenException;","70","import static org.sonar.api.web.UserRole.CODEVIEWER;","71","import static org.sonar.core.permission.GlobalPermissions.SCAN_EXECUTION;","271","      .extracting(Status::getQualityGateStatus, Status::hasBugs, Status::getBugs, Status::hasVulnerabilities, Status::getVulnerabilities, Status::hasCodeSmells,","272","        Status::getCodeSmells)","343","  public void does_not_fail_when_only_browse_permission_on_project() {","344","    ComponentDto project = db.components().insertMainBranch();","345","    db.components().insertProjectBranch(project,","346","      b -> b.setKey(\"123\")","347","        .setBranchType(PULL_REQUEST)","348","        .setMergeBranchUuid(project.uuid())","349","        .setPullRequestData(DbProjectBranches.PullRequestData.newBuilder().setBranch(\"feature\/bar\").build()));","350","    userSession.logIn().addProjectPermission(UserRole.USER, project);","351","","352","    ListWsResponse response = ws.newRequest()","353","      .setParam(\"project\", project.getKey())","354","      .executeProtobuf(ListWsResponse.class);","355","","356","    assertThat(response.getPullRequestsList())","357","      .extracting(PullRequest::getKey)","358","      .containsExactlyInAnyOrder(\"123\");","359","  }","360","","361","  @Test","362","  public void does_not_fail_when_only_scan_permission_on_project() {","363","    ComponentDto project = db.components().insertMainBranch();","364","    db.components().insertProjectBranch(project,","365","      b -> b.setKey(\"123\")","366","        .setBranchType(PULL_REQUEST)","367","        .setMergeBranchUuid(project.uuid())","368","        .setPullRequestData(DbProjectBranches.PullRequestData.newBuilder().setBranch(\"feature\/bar\").build()));","369","    userSession.logIn().addProjectPermission(SCAN_EXECUTION, project);","370","","371","    ListWsResponse response = ws.newRequest()","372","      .setParam(\"project\", project.getKey())","373","      .executeProtobuf(ListWsResponse.class);","374","","375","    assertThat(response.getPullRequestsList())","376","      .extracting(PullRequest::getKey)","377","      .containsExactlyInAnyOrder(\"123\");","378","  }","379","","380","  @Test","381","  public void does_not_fail_when_only_scan_permission_on_organization() {","382","    OrganizationDto organization = db.organizations().insert();","383","    userSession.logIn().addPermission(OrganizationPermission.SCAN, organization);","384","    ComponentDto project = db.components().insertMainBranch(organization);","385","    db.components().insertProjectBranch(project,","386","      b -> b.setKey(\"123\")","387","        .setBranchType(PULL_REQUEST)","388","        .setMergeBranchUuid(project.uuid())","389","        .setPullRequestData(DbProjectBranches.PullRequestData.newBuilder().setBranch(\"feature\/bar\").build()));","390","","391","    ListWsResponse response = ws.newRequest()","392","      .setParam(\"project\", project.getKey())","393","      .executeProtobuf(ListWsResponse.class);","394","","395","    assertThat(response.getPullRequestsList())","396","      .extracting(PullRequest::getKey)","397","      .containsExactlyInAnyOrder(\"123\");","398","  }","399","","400","  @Test","447","  @Test","448","  public void fail_when_not_having_right_permission() {","449","    ComponentDto project = db.components().insertMainBranch();","450","    db.components().insertProjectBranch(project,","451","      b -> b.setKey(\"123\")","452","        .setBranchType(PULL_REQUEST)","453","        .setMergeBranchUuid(project.uuid())","454","        .setPullRequestData(DbProjectBranches.PullRequestData.newBuilder().setBranch(\"feature\/bar\").build()));","455","    userSession.logIn().addProjectPermission(CODEVIEWER, project);","456","","457","    expectedException.expect(ForbiddenException.class);","458","","459","    ws.newRequest()","460","      .setParam(\"project\", project.getDbKey())","461","      .execute();","462","  }","463",""],"delete":["267","      .extracting(Status::getQualityGateStatus, Status::hasBugs, Status::getBugs, Status::hasVulnerabilities, Status::getVulnerabilities, Status::hasCodeSmells, Status::getCodeSmells)"]}],"server\/sonar-qa-util\/src\/main\/java\/org\/sonarqube\/qa\/util\/PermissionTester.java":[{"add":[],"delete":[]}],"server\/sonar-qa-util\/src\/main\/java\/org\/sonarqube\/qa\/util\/Tester.java":[{"add":["215","  @Override","216","  public PermissionTester permissions() {","217","    return rootSession.permissions();","218","  }","219","","280","","281","    @Override","282","    public PermissionTester permissions() {","283","      return new PermissionTester(this);","284","    }"],"delete":[]}]}},"b39d79b8ffa7d920b530c8d68821e01bd5b7142b":{"changes":{"server\/sonar-web\/package.json":"MODIFY","server\/sonar-web\/yarn.lock":"MODIFY"},"diff":{"server\/sonar-web\/package.json":[{"add":["14","    \"d3-selection\": \"1.4.0\","],"delete":["14","    \"d3-selection\": \"1.3.2\","]}],"server\/sonar-web\/yarn.lock":[{"add":["2818","d3-selection@1, d3-selection@1.4.0, d3-selection@^1.1.0:"],"delete":["2818","d3-selection@1, d3-selection@^1.1.0:","2823","d3-selection@1.3.2:","2824","  version \"1.3.2\"","2825","  resolved \"https:\/\/registry.yarnpkg.com\/d3-selection\/-\/d3-selection-1.3.2.tgz#6e70a9df60801c8af28ac24d10072d82cbfdf652\"","2826","  integrity sha512-OoXdv1nZ7h2aKMVg3kaUFbLLK5jXUFAMLD\/Tu5JA96mjf8f2a9ZUESGY+C36t8R1WFeWk\/e55hy54Ml2I62CRQ==","2827",""]}]}},"5f0c85650faf2514b1c74fe6389a80574a415e39":{"changes":{"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/__tests__\/HeaderMeta-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/HeaderMeta.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/__tests__\/__snapshots__\/HeaderMeta-test.tsx.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/__tests__\/HeaderMeta-test.tsx":[{"add":["32","it('should render correctly for a main project branch', () => {","33","  const wrapper = shallowRender({","34","    branchLike: mockBranch({ isMain: true })","35","  });","36","  expect(wrapper).toMatchSnapshot();","37","});","38",""],"delete":[]}],"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/HeaderMeta.tsx":[{"add":["92","  const branch = isBranch(branchLike) && !branchLike.isMain ? branchLike.name : undefined;","93","","103","        branch","111","        branch"],"delete":["101","        branch: isBranch(branchLike) ? branchLike.name : undefined","109","        branch: isBranch(branchLike) ? branchLike.name : undefined"]}],"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/__tests__\/__snapshots__\/HeaderMeta-test.tsx.snap":[{"add":["45","exports[`should render correctly for a main project branch 1`] = `","46","<Fragment>","47","  <div","48","    className=\"display-flex-center flex-0 small\"","49","  >","50","    <span","51","      className=\"header-meta-warnings\"","52","    >","53","      <ComponentNavWarnings","54","        warnings={","55","          Array [","56","            \"ERROR_1\",","57","            \"ERROR_2\",","58","          ]","59","        }","60","      \/>","61","    <\/span>","62","    <span","63","      className=\"spacer-left nowrap note\"","64","    >","65","      <DateTimeFormatter","66","        date=\"2017-01-02T00:00:00.000Z\"","67","      \/>","68","    <\/span>","69","    <span","70","      className=\"spacer-left nowrap note\"","71","    >","72","      version 0.0.1","73","    <\/span>","74","    <Connect(HomePageSelect)","75","      className=\"spacer-left\"","76","      currentPage={","77","        Object {","78","          \"branch\": undefined,","79","          \"component\": \"my-project\",","80","          \"type\": \"PROJECT\",","81","        }","82","      }","83","    \/>","84","  <\/div>","85","<\/Fragment>","86","`;","87",""],"delete":[]}]}},"7a225877b6dd3297af89fcbab079138bdea1e5e3":{"changes":{"server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/JwtHttpHandler.java":"MODIFY","server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/JwtSerializer.java":"MODIFY","server\/sonar-webserver-auth\/src\/test\/java\/org\/sonar\/server\/authentication\/JwtSerializerTest.java":"MODIFY"},"diff":{"server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/JwtHttpHandler.java":[{"add":["46","import static org.sonar.server.authentication.JwtSerializer.LAST_REFRESH_TIME_PARAM;"],"delete":["53","  private static final String LAST_REFRESH_TIME_PARAM = \"lastRefreshTime\";"]}],"server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/JwtSerializer.java":[{"add":["55","  static final String LAST_REFRESH_TIME_PARAM = \"lastRefreshTime\";","56","","82","    return Jwts.builder()","83","      .addClaims(jwtSession.getProperties())","84","      .claim(LAST_REFRESH_TIME_PARAM, system2.now())","89","      .signWith(secretKey, SIGNATURE_ALGORITHM)","90","      .compact();","120","    return Jwts.builder()","121","      .setClaims(token)","122","      .claim(LAST_REFRESH_TIME_PARAM, system2.now())","123","      .setExpiration(new Date(expirationTime))","124","      .signWith(secretKey, SIGNATURE_ALGORITHM)","125","      .compact();"],"delete":["24","import io.jsonwebtoken.JwtBuilder;","81","    JwtBuilder jwtBuilder = Jwts.builder()","86","      .signWith(secretKey, SIGNATURE_ALGORITHM);","87","    for (Map.Entry<String, Object> entry : jwtSession.getProperties().entrySet()) {","88","      jwtBuilder.claim(entry.getKey(), entry.getValue());","89","    }","90","    return jwtBuilder.compact();","120","    JwtBuilder jwtBuilder = Jwts.builder();","121","    for (Map.Entry<String, Object> entry : token.entrySet()) {","122","      jwtBuilder.claim(entry.getKey(), entry.getValue());","123","    }","124","    jwtBuilder.setExpiration(new Date(expirationTime))","125","      .signWith(secretKey, SIGNATURE_ALGORITHM);","126","    return jwtBuilder.compact();"]}],"server\/sonar-webserver-auth\/src\/test\/java\/org\/sonar\/server\/authentication\/JwtSerializerTest.java":[{"add":["254","    Date lastRefreshDate = addMinutes(new Date(), -4);","261","    token.put(\"lastRefreshTime\", lastRefreshDate.getTime());","272","    assertThat(((long) result.get(\"lastRefreshTime\"))).isGreaterThanOrEqualTo(now.getTime());"],"delete":[]}]}},"c87a24252f272406260a8e407600ace50885cf90":{"changes":{"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/AutoDbMigrationH2Test.java":"ADD","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/AutoDbMigration.java":"MODIFY","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/AutoDbMigrationTest.java":"MODIFY","server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/AutoDbMigrationH2Test\/schema_migrations.sql":"ADD"},"diff":{"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/AutoDbMigrationH2Test.java":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/AutoDbMigration.java":[{"add":["23","import java.sql.PreparedStatement;","24","import java.sql.SQLException;","70","      createH2Schema(connection, dbClient.getDatabase().getDialect().getId());","77","  protected void createH2Schema(Connection connection, String dialectId) {","79","    hackFixForProjectMeasureTreeQueries(connection);","80","  }","81","","82","  \/**","83","   * see SONAR-8586","84","   *\/","85","  private static void hackFixForProjectMeasureTreeQueries(Connection connection) {","86","    int metricId = 1;","87","    try (PreparedStatement preparedStatement = connection.prepareStatement(\"insert into PROJECT_MEASURES (METRIC_ID,COMPONENT_UUID,ANALYSIS_UUID) values (?,?,?);\")) {","88","      for (int i = 1; i < 1000; i++) {","89","        preparedStatement.setInt(1, metricId);","90","        preparedStatement.setString(2, \"foo_\" + i);","91","        preparedStatement.setString(3, \"bar_\" + i);","92","        preparedStatement.addBatch();","93","        if (i % 250 == 0) {","94","          preparedStatement.executeBatch();","95","          connection.commit();","96","        }","97","      }","98","      preparedStatement.executeBatch();","99","      connection.commit();","100","    } catch (SQLException e) {","101","      throw new RuntimeException(\"Failed to insert fake rows into table PROJECT_MEASURES\", e);","102","    }"],"delete":["68","      createSchema(connection, dbClient.getDatabase().getDialect().getId());","75","  protected void createSchema(Connection connection, String dialectId) {"]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/AutoDbMigrationTest.java":[{"add":["60","    protected void createH2Schema(Connection connection, String dialectId) {","61","      \/\/ do nothing"],"delete":["60","    protected void createSchema(Connection connection, String dialectId) {"]}],"server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/AutoDbMigrationH2Test\/schema_migrations.sql":[{"add":[],"delete":[]}]}},"86db744a5fc2ac3c998fc5c126c1298e9c085df9":{"changes":{"server\/sonar-docs\/src\/layouts\/index.js":"MODIFY","server\/sonar-docs\/src\/images\/newspaper.svg":"ADD","server\/sonar-docs\/gatsby-config.js":"MODIFY","server\/sonar-docs\/src\/templates\/page.css":"MODIFY","server\/sonar-docs\/src\/layouts\/components\/VersionSelect.js":"MODIFY","server\/sonar-docs\/src\/layouts\/components\/Sidebar.js":"MODIFY","server\/sonar-docs\/src\/templates\/page.js":"MODIFY","\/dev\/null":"DELETE","server\/sonar-docs\/src\/utils\/typography.js":"MODIFY","server\/sonar-docs\/src\/images\/community.svg":"ADD","server\/sonar-docs\/static\/favicon.ico":"ADD","server\/sonar-docs\/src\/images\/twitter.svg":"ADD","server\/sonar-docs\/build.gradle":"MODIFY"},"diff":{"server\/sonar-docs\/src\/layouts\/index.js":[{"add":[],"delete":["21","import DownloadIcon from '.\/components\/icons\/DownloadIcon';","46","              <div className=\"useful-links-block\">","47","                <div className=\"useful-link-title\">Download<\/div>","48","                <a href=\"https:\/\/www.sonarqube.org\/\" rel=\"noopener noreferrer\" target=\"_blank\">","49","                  <DownloadIcon \/> SonarQube","50","                <\/a>","51","                <div className=\"useful-link-title\">Get Help<\/div>","52","                <a","53","                  href=\"https:\/\/community.sonarsource.com\/\"","54","                  rel=\"noopener noreferrer\"","55","                  target=\"_blank\">","56","                  <img src=\"\/images\/community-icon.svg\" alt=\"Community\" \/> Community","57","                <\/a>","58","                <div className=\"useful-link-title\">Stay Connected<\/div>","59","                <a href=\"https:\/\/twitter.com\/SonarQube\" rel=\"noopener noreferrer\" target=\"_blank\">","60","                  <img src=\"\/images\/tw-icon-small.svg\" alt=\"Twitter\" \/> Twitter","61","                <\/a>","62","                <a","63","                  href=\"https:\/\/www.sonarsource.com\/resources\/product-news\/\"","64","                  rel=\"noopener noreferrer\"","65","                  target=\"_blank\">","66","                  <img src=\"\/images\/sq-icon-small.svg\" alt=\"Product News\" \/> Product News","67","                <\/a>","68","              <\/div>"]}],"server\/sonar-docs\/src\/images\/newspaper.svg":[{"add":[],"delete":[]}],"server\/sonar-docs\/gatsby-config.js":[{"add":["21","const prefix = { pathPrefix: '\/' + DOCS_VERSION }"],"delete":["21","const prefix =","22","  process.env.GATSBY_USE_PREFIX === '1'","23","    ? { pathPrefix: '\/' + process.env.GATSBY_DOCS_VERSION }","24","    : {};"]}],"server\/sonar-docs\/src\/templates\/page.css":[{"add":["67",".sidebar-footer {","68","  border-top: 1px solid #cfd3d7;","69","  flex-grow: 0;","70","  font-size: 12px;","71","}","72","","73",".sidebar-footer a {","74","  position: relative;","75","  display: inline-block;","76","  text-decoration: none;","77","  color: rgba(0, 0, 0, 0.8);","78","  line-height: 30px;","79","  margin: 10px 10px 10px -8px;","80","  padding: 0 8px;","81","  border-radius: 3px;","82","}","83","","84",".sidebar-footer a img,","85",".sidebar-footer a svg {","86","  height: 16px;","87","  color: #8a8c8f;","88","  margin-right: 5px;","89","  margin-bottom: 0;","90","  transform: translateY(2px);","91","}","92","","93",".sidebar-footer a.icon-only img {","94","  height: 12px;","95","  margin-right: 0;","96","}","97","","98",".sidebar-footer a:hover {","99","  background: #e8eff5;","100","}","101","","106",".page-sidebar a .tooltip {","107","  opacity: 0;","108","  background: rgba(0, 0, 0, 0.8);","109","  color: #fff;","110","  font-size: 12px;","111","  border-radius: 3px;","112","  line-height: 24px;","113","  padding: 0 8px;","114","  position: absolute;","115","  top: -30px;","116","  left: -50px;","117","  white-space: nowrap;","118","  transition: opacity 0.2s ease;","119","}","120","","121",".page-sidebar a .tooltip:after {","122","  top: 100%;","123","  right: 20px;","124","  border: solid transparent;","125","  content: ' ';","126","  height: 0;","127","  width: 0;","128","  position: absolute;","129","  pointer-events: none;","130","  border-color: rgba(0, 0, 0, 0);","131","  border-top-color: rgba(0, 0, 0, 0.8);","132","  border-width: 6px;","133","  margin-left: -6px;","134","}","135","","136",".page-sidebar a:hover .tooltip {","137","  opacity: 1;","138","  display: block;","139","}","140","","259","  font-weight: 500;","270","  color: #2679af;","274","  font-weight: 700;","305",".sub-menu-link.active {","306","  font-weight: 700;","307","}","308","","368","  margin: 0 auto;","682","img[src$='\/images\/exclamation.svg'],","683","img[src$='\/images\/check.svg'],","684","img[src$='\/images\/cross.svg'],","685","img[src$='\/images\/info.svg'] {"],"delete":["83",".useful-links-block {","84","  width: 200px;","85","  right: 32px;","86","  top: 32px;","87","  position: fixed;","88","  background: #f9f9fb;","89","  padding: 0 22px 22px 22px;","90","  border-radius: 3px;","91","}","92","","93",".useful-link-title {","94","  font-size: 12px;","95","  margin-top: 16px;","96","  margin-bottom: 4px;","97","}","98","","99",".useful-links-block a {","100","  color: #070706;","101","  display: block;","102","  font-size: 14px;","103","  text-decoration: inherit;","104","  line-height: 25px;","105","  transition: all 0.2s ease;","106","  margin: -4px;","107","  padding: 4px;","108","  border-radius: 3px;","109","}","110","","111",".useful-links-block a:hover {","112","  background-color: #e8eff5;","113","}","114","","115",".useful-links-block a svg,","116",".useful-links-block a img {","117","  margin-right: 6px;","118","  margin-left: 4px;","119","  margin-bottom: 0;","120","  height: 16px;","121","  transform: translateY(2px);","122","}","123","","125","  .useful-links-block {","126","    display: none;","127","  }","233","  font-weight: bold;","649","img[src='\/images\/exclamation.svg'],","650","img[src='\/images\/check.svg'],","651","img[src='\/images\/cross.svg'],","652","img[src='\/images\/info.svg'] {"]}],"server\/sonar-docs\/src\/layouts\/components\/VersionSelect.js":[{"add":["39","    const currentVersion = versions.find(v => v.current);","40","    const versionLabel =","41","      this.props.version === 'latest' && currentVersion ? currentVersion.value : this.props.version;","43","      !hasVersions || (currentVersion && versionLabel === currentVersion.value);","44","","48","          Docs <span className={isOnCurrentVersion ? 'current' : ''}>{versionLabel}<\/span>"],"delete":["40","      !hasVersions || versions.find(v => v.value === this.props.version) !== undefined;","44","          Docs <span className={isOnCurrentVersion ? 'current' : ''}>{this.props.version}<\/span>"]}],"server\/sonar-docs\/src\/layouts\/components\/Sidebar.js":[{"add":["27","import DownloadIcon from '.\/icons\/DownloadIcon';","132","      this.props.version === 'latest' ||","141","              src={`\/${this.props.version}\/images\/SonarQubeIcon.svg`}","170","        <div className=\"sidebar-footer\">","171","          <a href=\"https:\/\/www.sonarqube.org\/\" rel=\"noopener noreferrer\" target=\"_blank\">","172","            <DownloadIcon \/> SonarQube","173","          <\/a>","174","          <a href=\"https:\/\/community.sonarsource.com\/\" rel=\"noopener noreferrer\" target=\"_blank\">","175","            <img src={`\/${this.props.version}\/images\/community.svg`} alt=\"Community\" \/> Community","176","          <\/a>","177","          <a","178","            className=\"icon-only\"","179","            href=\"https:\/\/twitter.com\/SonarQube\"","180","            rel=\"noopener noreferrer\"","181","            target=\"_blank\">","182","            <img src={`\/${this.props.version}\/images\/twitter.svg`} alt=\"Twitter\" \/>","183","          <\/a>","184","          <a","185","            className=\"icon-only\"","186","            href=\"https:\/\/www.sonarsource.com\/resources\/product-news\/\"","187","            rel=\"noopener noreferrer\"","188","            target=\"_blank\">","189","            <img src={`\/${this.props.version}\/images\/newspaper.svg`} alt=\"Product News\" \/>","190","            <span className=\"tooltip\">Product News<\/span>","191","          <\/a>","192","        <\/div>"],"delete":["139","              src=\"\/images\/SonarQubeIcon.svg\""]}],"server\/sonar-docs\/src\/templates\/page.js":[{"add":["24","const version = process.env.GATSBY_DOCS_VERSION || '1.0';","25","","55","    htmlWithInclusions = replaceImageLinks(htmlWithInclusions);","58","    const version = process.env.GATSBY_DOCS_VERSION || '';","59","","64","          <link rel=\"icon\" href={`\/${version}\/favicon.ico`} \/>","65","          <link rel=\"canonical\" href={this.props.location.pathname.replace('latest', version)} \/>","113","function replaceImageLinks(content) {","114","  const version = process.env.GATSBY_DOCS_VERSION || '';","115","  if (version !== '') {","116","    content = content.replace(\/\\<img src=\"\\\/images\\\/(.*)\"\/gim, `<img src=\"\/${version}\/images\/$1\"`);","117","  }","118","  return content;","119","}","120","","123","  if (version !== '') {"],"delete":["108","  const usePrefix = process.env.GATSBY_USE_PREFIX === '1';","109","  if (usePrefix && version !== '') {"]}],"\/dev\/null":[{"add":[],"delete":[]}],"server\/sonar-docs\/src\/utils\/typography.js":[{"add":["29","  googleFonts: [{ name: fontFamily, styles: ['400,500,700'] }],"],"delete":["29","  googleFonts: [{ name: fontFamily, styles: ['400,700'] }],"]}],"server\/sonar-docs\/src\/images\/community.svg":[{"add":[],"delete":[]}],"server\/sonar-docs\/static\/favicon.ico":[{"add":[],"delete":[]}],"server\/sonar-docs\/src\/images\/twitter.svg":[{"add":[],"delete":[]}],"server\/sonar-docs\/build.gradle":[{"add":["11","  environment = [ GATSBY_DOCS_VERSION: version ]","12","  inputs.property('version', version)","31","  def archiveDir = \"$version\""],"delete":["29","  def archiveDir = \"sonarqube-docs-$version\""]}]}},"21fbe3697bdb6e66016ef8d0bea49da574e02e7d":{"changes":{"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/global\/GlobalNav.css":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/global\/GlobalNav.css":[{"add":["77","  white-space: nowrap;"],"delete":[]}]}},"b3840f39050b6a805c321748c84726038ccb3f6a":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/about\/components\/AboutApp.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/about\/components\/AboutApp.tsx":[{"add":["19","import { sanitize } from 'dompurify';","162","              \/\/ eslint-disable-next-line react\/no-danger","163","              dangerouslySetInnerHTML={{ __html: sanitize(customText) }}"],"delete":["161","              \/\/ Safe: Defined by instance admin","162","              dangerouslySetInnerHTML={{ __html: customText }}"]}]}},"a66fbbffe4a12a21014ba08aa80edd31a0a6e5d9":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/index\/RuleIndex.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/es\/EsUtils.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/RuleServiceMediumTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/es\/EsUtilsTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/index\/RuleIndex.java":[{"add":["71","import static org.sonar.server.es.EsUtils.escapeSpecialRegexChars;","480","      termsAggregation.include(\".*\" + escapeSpecialRegexChars(query) + \".*\");"],"delete":["479","      termsAggregation.include(\".*\" + query + \".*\");"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/es\/EsUtils.java":[{"add":["33","import java.util.regex.Pattern;","46","  private static final Pattern SPECIAL_REGEX_CHARS = Pattern.compile(\"[{}()\\\\[\\\\].+*?^$\\\\\\\\|]\");","98","  \/**","99","   * Escapes regexp special characters so that text can be forwarded from end-user input","100","   * to Elasticsearch regexp query (for instance attributes \"include\" and \"exclude\" of","101","   * term aggregations.","102","   *\/","103","  public static String escapeSpecialRegexChars(String str) {","104","    return SPECIAL_REGEX_CHARS.matcher(str).replaceAll(\"\\\\\\\\$0\");","105","  }","106",""],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/RuleServiceMediumTest.java":[{"add":["79","    insertRule(RuleKey.of(\"javascript\", \"S001\"), newHashSet(\"tag1\", \"misra++\"), newHashSet(\"sys1\", \"sys2\"));","83","    assertThat(service.listTags(\"\", 10)).containsOnly(\"tag1\", \"misra++\", \"tag2\", \"sys1\", \"sys2\");","86","    assertThat(service.listTags(\"misra\", 10)).containsOnly(\"misra++\");","87","    assertThat(service.listTags(\"misra+\", 10)).containsOnly(\"misra++\");","88","    assertThat(service.listTags(\"++\", 10)).containsOnly(\"misra++\");","94","","95","    assertThat(service.listTags(\"misra-\", 10)).isEmpty();","96","  }","97","","98","  @Test","99","  public void listTags_returns_empty_results_if_filter_contains_regexp_special_characters() {","100","    insertRule(RuleKey.of(\"javascript\", \"S001\"), newHashSet(\"misra++\"), newHashSet(\"sys1\", \"sys2\"));","101","","102","    assertThat(service.listTags(\"mis[\", 10)).isEmpty();","103","    assertThat(service.listTags(\"mis\\\\d\", 10)).isEmpty();","104","    assertThat(service.listTags(\".*\", 10)).isEmpty();"],"delete":["79","    insertRule(RuleKey.of(\"javascript\", \"S001\"), newHashSet(\"tag1\"), newHashSet(\"sys1\", \"sys2\"));"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/es\/EsUtilsTest.java":[{"add":["35","import static org.sonar.server.es.EsUtils.escapeSpecialRegexChars;","77","","78","  @Test","79","  public void test_escapeSpecialRegexChars() {","80","    assertThat(escapeSpecialRegexChars(\"\")).isEqualTo(\"\");","81","    assertThat(escapeSpecialRegexChars(\"foo\")).isEqualTo(\"foo\");","82","    assertThat(escapeSpecialRegexChars(\"FOO\")).isEqualTo(\"FOO\");","83","    assertThat(escapeSpecialRegexChars(\"foo++\")).isEqualTo(\"foo\\\\+\\\\+\");","84","    assertThat(escapeSpecialRegexChars(\"foo[]\")).isEqualTo(\"foo\\\\[\\\\]\");","85","    assertThat(escapeSpecialRegexChars(\".*\")).isEqualTo(\"\\\\.\\\\*\");","86","    assertThat(escapeSpecialRegexChars(\"foo\\\\d\")).isEqualTo(\"foo\\\\\\\\d\");","87","    assertThat(escapeSpecialRegexChars(\"^\")).isEqualTo(\"\\\\^\");","88","    assertThat(escapeSpecialRegexChars(\"$\")).isEqualTo(\"\\\\$\");","89","    assertThat(escapeSpecialRegexChars(\"|\")).isEqualTo(\"\\\\|\");","90","    assertThat(escapeSpecialRegexChars(\"a bit of | $ .* ^ everything\")).isEqualTo(\"a bit of \\\\| \\\\$ \\\\.\\\\* \\\\^ everything\");","91","  }"],"delete":[]}]}},"88e87020615f59ceed877b2fce817689613dcd5d":{"changes":{"server\/sonar-web\/src\/main\/js\/app\/components\/__tests__\/ComponentContainer-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/ComponentContainer.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/app\/components\/__tests__\/ComponentContainer-test.tsx":[{"add":["107","    branchLikes: [mockMainBranch()],","138","  expect(component.isSameBranch({} \/*, undefined*\/)).toBe(true);","140","  expect(component.isSameBranch({ branch: mainBranch.name }, mainBranch)).toBe(true);"],"delete":["73","const mainBranch = mockMainBranch();","74","","109","    branchLikes: [mainBranch],","140","  expect(component.isSameBranch({}, undefined)).toBe(true);"]}],"server\/sonar-web\/src\/main\/js\/app\/components\/ComponentContainer.tsx":[{"add":["271","    if (branchLike) {","272","      if (isMainBranch(branchLike)) {","273","        return (!task.pullRequest && !task.branch) || branchLike.name === task.branch;","274","      }"],"delete":["271","    if (branchLike && !isMainBranch(branchLike)) {"]}]}},"79960d4a9de4b9dfce800c45b24816d30bd0d4d3":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/DirectoryFacet.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/DirectoryFacet-test.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/DirectoryFacet.tsx":[{"add":["55","    return directory.path;"],"delete":["55","    return directory.name;"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/DirectoryFacet-test.tsx":[{"add":["72","    expect(instance.getSearchResultText({ path: 'bar' } as TreeComponentWithPath)).toBe('bar');"],"delete":["72","    expect(instance.getSearchResultText({ name: 'bar' } as TreeComponentWithPath)).toBe('bar');"]}]}},"1de512a131f84fb1b6656150347d2b075b478780":{"changes":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/bootstrap\/GlobalTempFolderProvider.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/bootstrap\/GlobalTempFolderProviderTest.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/bootstrap\/GlobalTempFolderProvider.java":[{"add":["46","","81","      Path realPath = workingPath;","82","      if (Files.isSymbolicLink(realPath)) {","83","        realPath = realPath.toRealPath();","84","      }","85","      Files.createDirectories(realPath);","165","    \/\/ nothing to do"],"delete":["46","  ","68","","82","      Files.createDirectories(workingPath);","162","  \/\/nothing to do"]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/bootstrap\/GlobalTempFolderProviderTest.java":[{"add":["50","    workingDir.delete();","130","  @Test","131","  public void homeIsSymbolicLink() throws IOException {","132","    File realSonarHome = temp.newFolder();","133","    File symlink = temp.newFolder();","134","    symlink.delete();","135","    Files.createSymbolicLink(symlink.toPath(), realSonarHome.toPath());","136","    GlobalProperties globalProperties = new GlobalProperties(ImmutableMap.of(\"sonar.userHome\", symlink.getAbsolutePath()));","137","","138","    TempFolder tempFolder = tempFolderProvider.provide(globalProperties);","139","    File newFile = tempFolder.newFile();","140","    assertThat(newFile.getParentFile().getParentFile().getAbsolutePath()).isEqualTo(symlink.getAbsolutePath());","141","    assertThat(newFile.getParentFile().getName()).startsWith(\".sonartmp_\");","142","  }","143",""],"delete":[]}]}},"7a4e71586a11644181f593aed3b23692ba887cdc":{"changes":{"\/dev\/null":"DELETE","sonar-application\/src\/main\/assembly\/lib\/jdbc\/mssql\/sqljdbc42.jar":"ADD","tests\/upgrade\/pom.xml":"MODIFY","it\/it-tests\/pom.xml":"MODIFY","sonar-db\/pom.xml":"MODIFY"},"diff":{"\/dev\/null":[{"add":[],"delete":[]}],"sonar-application\/src\/main\/assembly\/lib\/jdbc\/mssql\/sqljdbc42.jar":[{"add":[],"delete":[]}],"tests\/upgrade\/pom.xml":[{"add":["93","          <artifactId>sqljdbc<\/artifactId>","94","          <version>4.2<\/version>","96","          <systemPath>${project.basedir}\/..\/..\/sonar-application\/src\/main\/assembly\/lib\/jdbc\/mssql\/sqljdbc42.jar"],"delete":["93","          <artifactId>sqljdbc41<\/artifactId>","94","          <version>4.1<\/version>","96","          <systemPath>${project.basedir}\/..\/..\/sonar-application\/src\/main\/assembly\/lib\/jdbc\/mssql\/sqljdbc41.jar"]}],"it\/it-tests\/pom.xml":[{"add":["193","          <artifactId>sqljdbc<\/artifactId>","194","          <version>4.2<\/version>","196","          <systemPath>${project.basedir}\/..\/..\/sonar-application\/src\/main\/assembly\/lib\/jdbc\/mssql\/sqljdbc42.jar"],"delete":["193","          <artifactId>sqljdbc41<\/artifactId>","194","          <version>4.1<\/version>","196","          <systemPath>${project.basedir}\/..\/..\/sonar-application\/src\/main\/assembly\/lib\/jdbc\/mssql\/sqljdbc41.jar"]}],"sonar-db\/pom.xml":[{"add":["217","          <artifactId>sqljdbc<\/artifactId>","218","          <version>4.2<\/version>","220","          <systemPath>${project.basedir}\/..\/sonar-application\/src\/main\/assembly\/lib\/jdbc\/mssql\/sqljdbc42.jar"],"delete":["217","          <artifactId>sqljdbc41<\/artifactId>","218","          <version>4.1<\/version>","220","          <systemPath>${project.basedir}\/..\/sonar-application\/src\/main\/assembly\/lib\/jdbc\/mssql\/sqljdbc41.jar"]}]}},"715ef2a837a34a12cfad43fc806f5103f41233aa":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/issue\/components\/IssueCommentLine.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/issue\/components\/IssueCommentLine.tsx":[{"add":["20","import { sanitize } from 'dompurify';","92","          dangerouslySetInnerHTML={{ __html: sanitize(comment.htmlText) }}"],"delete":["91","          \/\/ Safe: Comes from the backend, after markdown transformation to html","92","          dangerouslySetInnerHTML={{ __html: comment.htmlText }}"]}]}},"061b025defefdba99fcbd45518742b8685fceb4a":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/plugins\/ServerPluginRepository.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/plugins\/ServerPluginRepositoryTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/plugins\/ServerPluginRepository.java":[{"add":["318","","320","        if (!getPluginFile(info).exists()) {","321","          LOG.info(\"Plugin already uninstalled: {} [{}]\", info.getName(), info.getKey());","322","          continue;","323","        }","324","","327","        File masterFile = getPluginFile(info);","352","          if (requirement.getKey().equals(pluginKey)) {","361","  private File getPluginFile(PluginInfo info) {"],"delete":["321","        File masterFile = pluginFile(info);","346","          if (requirement.getKey().equals(pluginKey) && pluginFile(otherPlugin).exists()) {","355","  private File pluginFile(PluginInfo info) {"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/plugins\/ServerPluginRepositoryTest.java":[{"add":["272","  public void dont_uninstall_non_existing_files() throws IOException {","273","    File base = copyTestPluginTo(\"test-base-plugin\", fs.getInstalledPluginsDir());","274","    File extension = copyTestPluginTo(\"test-require-plugin\", fs.getInstalledPluginsDir());","275","    File uninstallDir = temp.newFolder(\"uninstallDir\");","276","","277","    underTest.start();","278","    assertThat(underTest.getPluginInfos()).hasSize(2);","279","    underTest.uninstall(\"testbase\", uninstallDir);","280","    assertThat(underTest.getPluginInfos()).hasSize(2);","281","","282","    underTest.uninstall(\"testbase\", uninstallDir);","283","    assertThat(base).doesNotExist();","284","    assertThat(extension).doesNotExist();","285","    assertThat(uninstallDir.list()).containsOnly(base.getName(), extension.getName());","286","  }","287","","288","  @Test"],"delete":[]}]}},"654e8d189d064d173e8ec05631e8aa4a48715628":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/templates\/rule\/coding-rules-rule-meta.hbs":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/templates\/rule\/coding-rules-rule-meta.hbs":[{"add":["11","  <h3 class=\"page-title coding-rules-detail-header\">","12","    <big>{{name}}<\/big>","13","  <\/h3>"],"delete":["1","  <h3 class=\"page-title coding-rules-detail-header\">","2","    <big>{{name}}<\/big>","3","  <\/h3>"]}]}},"c58ff4caa54f4d1da9e3103afc01d64a211aef66":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/project\/ws\/UpdateKeyAction.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/queue\/ReportSubmitter.java":"MODIFY","tests\/src\/test\/java\/org\/sonarqube\/tests\/component\/ComponentSuite.java":"MODIFY","server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/component\/ComponentKeyUpdaterMapper.xml":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/component\/ComponentKeyUpdaterMapper.java":"MODIFY","tests\/src\/test\/java\/util\/XooProjectBuilder.java":"ADD","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/component\/ComponentKeyUpdaterDao.java":"MODIFY","tests\/src\/test\/java\/org\/sonarqube\/tests\/project\/ProjectKeyUpdateTest.java":"MODIFY","tests\/src\/test\/java\/org\/sonarqube\/tests\/component\/ModuleTest.java":"ADD","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/project\/ws\/UpdateKeyActionTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/project\/ws\/UpdateKeyAction.java":[{"add":["21","import com.google.common.base.Optional;","30","import org.sonar.server.exceptions.NotFoundException;","43","  public UpdateKeyAction(DbClient dbClient, ComponentService componentService) {","56","          \"Either '%s' or '%s' must be provided.<br> \" +","57","          \"Requires one of the following permissions: \" +","58","          \"<ul>\" +","59","          \"<li>'Administer System'<\/li>\" +","60","          \"<li>'Administer' rights on the specified project<\/li>\" +","61","          \"<\/ul>\",","68","      new Change(\"6.4\", \"Move from api\/components\/update_key to api\/projects\/update_key\"),","69","      new Change(\"7.1\", \"Ability to update key of a disabled module\"));","93","    String uuid = request.param(PARAM_PROJECT_ID);","94","    String key = request.param(PARAM_FROM);","95","    String newKey = request.mandatoryParam(PARAM_TO);","96","    checkArgument(uuid != null ^ key != null, \"Either '%s' or '%s' must be provided\", PARAM_PROJECT_ID, PARAM_FROM);","99","      Optional<ComponentDto> component;","100","      if (uuid != null) {","101","        component = dbClient.componentDao().selectByUuid(dbSession, uuid);","102","      } else {","103","        component = dbClient.componentDao().selectByKey(dbSession, key);","104","      }","105","      if (!component.isPresent() || component.get().getMainBranchProjectUuid() != null) {","106","        throw new NotFoundException(\"Component not found\");","107","      }","108","","109","      componentService.updateKey(dbSession, component.get(), newKey);","111","    response.noContent();"],"delete":["28","import org.sonar.server.component.ComponentFinder;","29","import org.sonar.server.component.ComponentFinder.ParamNames;","31","","32","import javax.annotation.CheckForNull;","33","import javax.annotation.Nullable;","44","  private final ComponentFinder componentFinder;","47","  public UpdateKeyAction(DbClient dbClient, ComponentFinder componentFinder, ComponentService componentService) {","49","    this.componentFinder = componentFinder;","61","        \"Either '%s' or '%s' must be provided.<br> \" +","62","        \"Requires one of the following permissions: \" +","63","        \"<ul>\" +","64","        \"<li>'Administer System'<\/li>\" +","65","        \"<li>'Administer' rights on the specified project<\/li>\" +","66","        \"<\/ul>\",","73","      new Change(\"6.4\", \"Move from api\/components\/update_key to api\/projects\/update_key\"));","97","    doHandle(toWsRequest(request));","98","    response.noContent();","99","  }","101","  private void doHandle(UpdateKeyRequest request) {","103","      ComponentDto projectOrModule = componentFinder.getByUuidOrKey(dbSession, request.getId(), request.getKey(), ParamNames.PROJECT_ID_AND_FROM);","104","      componentService.updateKey(dbSession, projectOrModule, request.getNewKey());","106","  }","107","","108","  private static UpdateKeyRequest toWsRequest(Request request) {","109","    return UpdateKeyRequest.builder()","110","      .setId(request.param(PARAM_PROJECT_ID))","111","      .setKey(request.param(PARAM_FROM))","112","      .setNewKey(request.mandatoryParam(PARAM_TO))","113","      .build();","114","  }","115","","116","  private static class UpdateKeyRequest {","117","    private final String id;","118","    private final String key;","119","    private final String newKey;","120","","121","    public UpdateKeyRequest(Builder builder) {","122","      this.id = builder.id;","123","      this.key = builder.key;","124","      this.newKey = builder.newKey;","125","    }","126","","127","    @CheckForNull","128","    public String getId() {","129","      return id;","130","    }","131","","132","    @CheckForNull","133","    public String getKey() {","134","      return key;","135","    }","136","","137","    public String getNewKey() {","138","      return newKey;","139","    }","140","","141","    public static Builder builder() {","142","      return new Builder();","143","    }","144","  }","145","","146","  private static class Builder {","147","    private String id;","148","    private String key;","149","    private String newKey;","150","","151","    private Builder() {","152","      \/\/ enforce method constructor","153","    }","154","","155","    public Builder setId(@Nullable String id) {","156","      this.id = id;","157","      return this;","158","    }","159","","160","    public Builder setKey(@Nullable String key) {","161","      this.key = key;","162","      return this;","163","    }","164","","165","    public Builder setNewKey(String newKey) {","166","      this.newKey = newKey;","167","      return this;","168","    }","169","","170","    public UpdateKeyRequest build() {","171","      checkArgument(newKey != null && !newKey.isEmpty(), \"The new key must not be empty\");","172","      return new UpdateKeyRequest(this);","173","    }"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/queue\/ReportSubmitter.java":[{"add":["127","    if (!component.projectUuid().equals(component.uuid())) {","129","      ComponentDto anotherBaseProject = dbClient.componentDao().selectOrFailByUuid(dbSession, component.projectUuid());"],"delete":["127","    if (!project.get().projectUuid().equals(project.get().uuid())) {","129","      ComponentDto anotherBaseProject = dbClient.componentDao().selectOrFailByUuid(dbSession, project.get().projectUuid());"]}],"tests\/src\/test\/java\/org\/sonarqube\/tests\/component\/ComponentSuite.java":[{"add":["33","  ComponentsWsTest.class,","34","  ModuleTest.class"],"delete":["33","  ComponentsWsTest.class","39","","41",""]}],"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/component\/ComponentKeyUpdaterMapper.xml":[{"add":["21","  <select id=\"selectProjectByUuid\" parameterType=\"String\" resultMap=\"resourceResultMap\">"],"delete":["21","  <select id=\"selectProject\" parameterType=\"String\" resultMap=\"resourceResultMap\">"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/component\/ComponentKeyUpdaterMapper.java":[{"add":["28","  ResourceDto selectProjectByUuid(@Param(\"uuid\") String uuid);"],"delete":["24","\/**","25"," * @since 3.2","26"," *\/","31","  ResourceDto selectProject(@Param(\"uuid\") String uuid);"]}],"tests\/src\/test\/java\/util\/XooProjectBuilder.java":[{"add":[],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/component\/ComponentKeyUpdaterDao.java":[{"add":["58","    ResourceDto project = mapper.selectProjectByUuid(projectOrModuleUuid);","69","        resources.add(mapper.selectProjectByUuid(branch.getUuid()));","168","    ResourceDto project = mapper.selectProjectByUuid(projectUuid);"],"delete":["58","    ResourceDto project = mapper.selectProject(projectOrModuleUuid);","69","        resources.add(mapper.selectProject(branch.getUuid()));","168","    ResourceDto project = mapper.selectProject(projectUuid);"]}],"tests\/src\/test\/java\/org\/sonarqube\/tests\/project\/ProjectKeyUpdateTest.java":[{"add":["51","import util.XooProjectBuilder;"],"delete":["25","import java.io.OutputStream;","26","import java.util.ArrayList;","30","import java.util.Properties;","33","import org.apache.commons.io.FileUtils;","34","import org.apache.commons.lang.StringUtils;","400","  private static class XooProjectBuilder {","401","    private final String key;","402","    private final List<String> moduleKeys = new ArrayList<>();","403","    private int filesPerModule = 1;","404","","405","    XooProjectBuilder(String projectKey) {","406","      this.key = projectKey;","407","    }","408","","409","    XooProjectBuilder addModules(String key, String... otherKeys) {","410","      this.moduleKeys.add(key);","411","      this.moduleKeys.addAll(asList(otherKeys));","412","      return this;","413","    }","414","","415","    XooProjectBuilder setFilesPerModule(int i) {","416","      this.filesPerModule = i;","417","      return this;","418","    }","419","","420","    File build(File dir) {","421","      for (String moduleKey : moduleKeys) {","422","        generateModule(moduleKey, new File(dir, moduleKey), new Properties());","423","      }","424","      Properties additionalProps = new Properties();","425","      additionalProps.setProperty(\"sonar.modules\", StringUtils.join(moduleKeys, \",\"));","426","      generateModule(key, dir, additionalProps);","427","      return dir;","428","    }","429","","430","    private void generateModule(String key, File dir, Properties additionalProps) {","431","      try {","432","        File sourceDir = new File(dir, \"src\");","433","        FileUtils.forceMkdir(sourceDir);","434","        for (int i = 0; i < filesPerModule; i++) {","435","          File sourceFile = new File(sourceDir, \"File\" + i + \".xoo\");","436","          FileUtils.write(sourceFile, \"content of \" + sourceFile.getName());","437","        }","438","        Properties props = new Properties();","439","        props.setProperty(\"sonar.projectKey\", key);","440","        props.setProperty(\"sonar.projectName\", key);","441","        props.setProperty(\"sonar.projectVersion\", \"1.0\");","442","        props.setProperty(\"sonar.sources\", sourceDir.getName());","443","        props.putAll(additionalProps);","444","        File propsFile = new File(dir, \"sonar-project.properties\");","445","        try (OutputStream output = FileUtils.openOutputStream(propsFile)) {","446","          props.store(output, \"generated\");","447","        }","448","      } catch (IOException e) {","449","        throw new IllegalStateException(e);","450","      }","451","    }","452","  }","453",""]}],"tests\/src\/test\/java\/org\/sonarqube\/tests\/component\/ModuleTest.java":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/project\/ws\/UpdateKeyActionTest.java":[{"add":["21","import com.google.common.base.Optional;","29","import org.sonar.api.web.UserRole;","35","import org.sonar.server.es.ProjectIndexers;","36","import org.sonar.server.es.ProjectIndexersImpl;","37","import org.sonar.server.exceptions.ForbiddenException;","39","import org.sonar.server.tester.UserSessionRule;","55","  @Rule","56","  public UserSessionRule userSessionRule = UserSessionRule.standalone();","57","  private DbClient dbClient = db.getDbClient();","58","  private ProjectIndexers projectIndexers = new ProjectIndexersImpl();","59","  private ComponentService componentService = new ComponentService(dbClient, userSessionRule, projectIndexers);","60","  private WsActionTester ws = new WsActionTester(new UpdateKeyAction(dbClient, componentService));","63","  public void update_key_of_project_referenced_by_its_key() {","65","    userSessionRule.addProjectPermission(UserRole.ADMIN, project);","67","    callByKey(project.getKey(), ANOTHER_KEY);","69","    assertThat(selectByKey(project.getKey()).isPresent()).isFalse();","70","    assertThat(selectByKey(ANOTHER_KEY).get().uuid()).isEqualTo(project.uuid());","74","  public void update_key_of_project_referenced_by_its_uuid() {","76","    userSessionRule.addProjectPermission(UserRole.ADMIN, project);","80","    assertThat(selectByKey(project.getKey()).isPresent()).isFalse();","81","    assertThat(selectByKey(ANOTHER_KEY).get().uuid()).isEqualTo(project.uuid());","82","  }","83","","84","  @Test","85","  public void update_key_of_module_referenced_by_its_uuid() {","86","    ComponentDto project = insertProject();","87","    ComponentDto module = db.components().insertComponent(ComponentTesting.newModuleDto(project));","88","    userSessionRule.addProjectPermission(UserRole.ADMIN, project);","89","","90","    callByUuid(module.uuid(), ANOTHER_KEY);","91","","92","    assertThat(selectByKey(project.getKey()).isPresent()).isTrue();","93","    assertThat(selectByKey(module.getKey()).isPresent()).isFalse();","94","    assertThat(selectByKey(ANOTHER_KEY).get().uuid()).isEqualTo(module.uuid());","95","  }","96","","97","  @Test","98","  public void update_key_of_disabled_module() {","99","    ComponentDto project = insertProject();","100","    ComponentDto module = db.components().insertComponent(ComponentTesting.newModuleDto(project).setEnabled(false));","101","    userSessionRule.addProjectPermission(UserRole.ADMIN, project);","102","","103","    callByKey(module.getKey(), ANOTHER_KEY);","104","","105","    assertThat(selectByKey(project.getKey()).isPresent()).isTrue();","106","    assertThat(selectByKey(module.getKey()).isPresent()).isFalse();","107","    ComponentDto loadedModule = selectByKey(ANOTHER_KEY).get();","108","    assertThat(loadedModule.uuid()).isEqualTo(module.uuid());","109","    assertThat(loadedModule.isEnabled()).isFalse();","110","  }","111","","112","","113","  @Test","114","  public void fail_if_not_authorized() {","115","    ComponentDto project = insertProject();","116","    userSessionRule.addProjectPermission(UserRole.USER, project);","117","","118","    expectedException.expect(ForbiddenException.class);","119","    expectedException.expectMessage(\"Insufficient privileges\");","120","","121","    callByKey(project.getKey(), ANOTHER_KEY);","127","    userSessionRule.addProjectPermission(UserRole.ADMIN, project);","129","    expectedException.expect(IllegalArgumentException.class);","130","    expectedException.expectMessage(\"The 'to' parameter is missing\");","131","","132","    callByKey(project.getKey(), null);","138","    expectedException.expectMessage(\"Either 'projectId' or 'from' must be provided\");","144","  public void fail_if_both_uuid_and_key_provided() {","146","    userSessionRule.addProjectPermission(UserRole.ADMIN, project);","148","    expectedException.expect(IllegalArgumentException.class);","149","    expectedException.expectMessage(\"Either 'projectId' or 'from' must be provided\");","150","","151","","152","    call(project.uuid(), project.getKey(), ANOTHER_KEY);","166","    userSessionRule.addProjectPermission(UserRole.ADMIN, project);","169","    expectedException.expectMessage(\"Component not found\");","178","    userSessionRule.addProjectPermission(UserRole.ADMIN, project);","181","    expectedException.expectMessage(\"Component not found\");","193","    assertThat(definition.changelog()).hasSize(2);","201","    return db.components().insertComponent(ComponentTesting.newPrivateProjectDto(db.organizations().insert()));","204","  private void callByUuid(@Nullable String uuid, @Nullable String newKey) {","205","    call(uuid, null, newKey);","208","  private void callByKey(@Nullable String key, @Nullable String newKey) {","209","    call(null, key, newKey);","227","","228","  private Optional<ComponentDto> selectByKey(String key) {","229","    return db.getDbClient().componentDao().selectByKey(db.getSession(), key);","230","  }"],"delete":["29","import org.sonar.db.DbSession;","31","import org.sonar.db.component.ComponentDbTester;","35","import org.sonar.server.component.TestComponentFinder;","41","import static org.mockito.ArgumentMatchers.any;","42","import static org.mockito.ArgumentMatchers.eq;","43","import static org.mockito.Mockito.mock;","44","import static org.mockito.Mockito.verify;","56","","57","  ComponentDbTester componentDb = new ComponentDbTester(db);","58","  DbClient dbClient = db.getDbClient();","59","","60","  ComponentService componentService = mock(ComponentService.class);","61","","62","  WsActionTester ws = new WsActionTester(new org.sonar.server.project.ws.UpdateKeyAction(dbClient, TestComponentFinder.from(db), componentService));","65","  public void call_by_key() {","68","    callByKey(project.getDbKey(), ANOTHER_KEY);","70","    assertCallComponentService(ANOTHER_KEY);","74","  public void call_by_uuid() {","79","    assertCallComponentService(ANOTHER_KEY);","84","    expectedException.expect(IllegalArgumentException.class);","85","","88","    callByKey(project.getDbKey(), null);","99","  public void fail_if_uuid_and_key_provided() {","100","    expectedException.expect(IllegalArgumentException.class);","101","","104","    call(project.uuid(), project.getDbKey(), ANOTHER_KEY);","120","    expectedException.expectMessage(String.format(\"Component key '%s' not found\", branch.getDbKey()));","131","    expectedException.expectMessage(String.format(\"Component id '%s' not found\", branch.uuid()));","149","  private void assertCallComponentService(@Nullable String newKey) {","150","    verify(componentService).updateKey(any(DbSession.class), any(ComponentDto.class), eq(newKey));","151","  }","152","","154","    return componentDb.insertComponent(ComponentTesting.newPrivateProjectDto(db.organizations().insert()));","157","  private String callByUuid(@Nullable String uuid, @Nullable String newKey) {","158","    return call(uuid, null, newKey);","161","  private String callByKey(@Nullable String key, @Nullable String newKey) {","162","    return call(null, key, newKey);"]}]}},"56194c84a561bfb8b446bf5d87c73f41e8822dab":{"changes":{"server\/sonar-web\/package.json":"MODIFY","server\/sonar-web\/yarn.lock":"MODIFY"},"diff":{"server\/sonar-web\/package.json":[{"add":["20","    \"history\": \"3.3.0\",","33","    \"react-router\": \"3.0.2\","],"delete":["20","    \"history\": \"2.0.0\",","33","    \"react-router\": \"2.8.1\","]}],"server\/sonar-web\/yarn.lock":[{"add":["1640","deep-equal@1.0.1:","2761","history@3.3.0, history@^3.0.0:","2762","  version \"3.3.0\"","2763","  resolved \"https:\/\/repox.sonarsource.com\/api\/npm\/npm\/history\/-\/history-3.3.0.tgz#fcedcce8f12975371545d735461033579a6dae9c\"","2765","    invariant \"^2.2.1\"","2766","    loose-envify \"^1.2.0\"","2767","    query-string \"^4.2.2\"","2768","    warning \"^3.0.0\"","4875","query-string@^4.1.0, query-string@^4.2.2:","5043","react-router@3.0.2:","5044","  version \"3.0.2\"","5045","  resolved \"https:\/\/repox.sonarsource.com\/api\/npm\/npm\/react-router\/-\/react-router-3.0.2.tgz#5a19156678810e01d81901f9c0fef63284b8a514\"","5047","    history \"^3.0.0\"","6043","warning@2.1.0:"],"delete":["1640","deep-equal@1.0.1, deep-equal@^1.0.0:","2761","history@2.0.0:","2762","  version \"2.0.0\"","2763","  resolved \"https:\/\/registry.yarnpkg.com\/history\/-\/history-2.0.0.tgz#6d5144af2da8a3dea4e5f1abae11a3c2e868e2c7\"","2765","    deep-equal \"^1.0.0\"","2766","    invariant \"^2.0.0\"","2767","    query-string \"^3.0.0\"","2768","    warning \"^2.0.0\"","2769","","2770","history@^2.1.2:","2771","  version \"2.1.2\"","2772","  resolved \"https:\/\/registry.yarnpkg.com\/history\/-\/history-2.1.2.tgz#4aa2de897a0e4867e4539843be6ecdb2986bfdec\"","2773","  dependencies:","2774","    deep-equal \"^1.0.0\"","2775","    invariant \"^2.0.0\"","2776","    query-string \"^3.0.0\"","2777","    warning \"^2.0.0\"","4884","query-string@^3.0.0:","4885","  version \"3.0.3\"","4886","  resolved \"https:\/\/registry.yarnpkg.com\/query-string\/-\/query-string-3.0.3.tgz#ae2e14b4d05071d4e9b9eb4873c35b0dcd42e638\"","4887","  dependencies:","4888","    strict-uri-encode \"^1.0.0\"","4889","","4890","query-string@^4.1.0:","5058","react-router@2.8.1:","5059","  version \"2.8.1\"","5060","  resolved \"https:\/\/registry.yarnpkg.com\/react-router\/-\/react-router-2.8.1.tgz#73e9491f6ceb316d0f779829081863e378ee4ed7\"","5062","    history \"^2.1.2\"","6058","warning@2.1.0, warning@^2.0.0:"]}]}},"f93996b7262dae19c2f3e91c00b240d4bd4feb7e":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/__tests__\/__snapshots__\/QualityGateCondition-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/QualityGateCondition.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/styles.css":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/__tests__\/__snapshots__\/QualityGateCondition-test.tsx.snap":[{"add":["23","      className=\"overview-quality-gate-condition-value text-center spacer-right\"","65","      className=\"overview-quality-gate-condition-value text-center spacer-right\"","118","      className=\"overview-quality-gate-condition-value text-center spacer-right\"","171","      className=\"overview-quality-gate-condition-value text-center spacer-right\"","213","      className=\"overview-quality-gate-condition-value text-center spacer-right\"","265","      className=\"overview-quality-gate-condition-value text-center spacer-right\"","317","      className=\"overview-quality-gate-condition-value text-center spacer-right\"","370","      className=\"overview-quality-gate-condition-value text-center spacer-right\"","421","      className=\"overview-quality-gate-condition-value text-center spacer-right\""],"delete":["23","      className=\"overview-quality-gate-condition-value text-center\"","65","      className=\"overview-quality-gate-condition-value text-center\"","118","      className=\"overview-quality-gate-condition-value text-center\"","171","      className=\"overview-quality-gate-condition-value text-center\"","213","      className=\"overview-quality-gate-condition-value text-center\"","265","      className=\"overview-quality-gate-condition-value text-center\"","317","      className=\"overview-quality-gate-condition-value text-center\"","370","      className=\"overview-quality-gate-condition-value text-center\"","421","      className=\"overview-quality-gate-condition-value text-center\""]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/QualityGateCondition.tsx":[{"add":["134","        <div className=\"overview-quality-gate-condition-value text-center spacer-right\">"],"delete":["134","        <div className=\"overview-quality-gate-condition-value text-center\">"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/styles.css":[{"add":["152","    calc(3 * var(--gridSize));","157","  flex: 0 0 20%;"],"delete":["152","    calc(4 * var(--gridSize));","158","  margin-right: 10px;","160","","161","  \/* for consistency with ratings *\/","162","  min-width: 24px;"]}]}},"403901698010a7e3899859dc3eaed32b8e9196e0":{"changes":{"server\/sonar-db-dao\/src\/testFixtures\/java\/org\/sonar\/db\/component\/ComponentTesting.java":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/testFixtures\/java\/org\/sonar\/db\/component\/ComponentTesting.java":[{"add":["179","    return newApplication(organizationDto.getUuid());","180","  }","181","","182","  public static ComponentDto newApplication(String organizationUuid) {","183","    return newView(organizationUuid, Uuids.createFast())"],"delete":["179","    return newView(organizationDto.getUuid(), Uuids.createFast())"]}]}},"087481a53525549b11fe3fce15534b489a44b4cf":{"changes":{"server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/httpd\/HttpAction.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/ce\/http\/CeHttpClient.java":"MODIFY","server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/httpd\/CeHttpUtils.java":"ADD","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/ws\/ChangeLogLevelAction.java":"MODIFY","server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/logging\/ChangeLogLevelHttpActionTest.java":"ADD","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/platform\/ws\/ChangeLogLevelActionTest.java":"MODIFY","server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/logging\/package-info.java":"ADD","server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/logging\/ChangeLogLevelHttpAction.java":"ADD","server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/systeminfo\/SystemInfoHttpActionTest.java":"MODIFY","server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/CeHttpModule.java":"MODIFY","server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/container\/ComputeEngineContainerImplTest.java":"MODIFY"},"diff":{"server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/httpd\/HttpAction.java":[{"add":["29"," * is started by the Pico Container). It's the action's responsibility to call the method"],"delete":["29"," * is started by the Pico Container). It's the action's responsability to call the method"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/ce\/http\/CeHttpClient.java":[{"add":["24","import okhttp3.OkHttpClient;","25","import okhttp3.RequestBody;","28","import org.sonar.api.utils.log.LoggerLevel;","29","import org.sonar.api.utils.log.Loggers;","32","import org.sonar.server.platform.ws.ChangeLogLevelAction;","42","  private static final String PATH_CHANGE_LOG_LEVEL = \"changeLogLevel\";","43","  private static final String PATH_SYSTEM_INFO = \"systemInfo\";","44","","57","    return call(SystemInfoActionClient.INSTANCE);","58","  }","59","","60","  private enum SystemInfoActionClient implements ActionClient<Optional<ProtobufSystemInfo.SystemInfo>> {","61","    INSTANCE;","62","","63","    @Override","64","    public String getPath() {","65","      return PATH_SYSTEM_INFO;","66","    }","67","","68","    @Override","69","    public Optional<ProtobufSystemInfo.SystemInfo> getDefault() {","70","      return Optional.empty();","71","    }","72","","73","    @Override","74","    public Optional<ProtobufSystemInfo.SystemInfo> call(String url) throws Exception {","75","      byte[] protobuf = IOUtils.toByteArray(new URI(url));","76","      return Optional.of(ProtobufSystemInfo.SystemInfo.parseFrom(protobuf));","77","    }","78","  }","79","","80","  public void changeLogLevel(LoggerLevel level) {","81","    call(new ChangeLogLevelActionClient(level));","82","  }","83","","84","  private static final class ChangeLogLevelActionClient implements ActionClient<Void> {","85","    private final LoggerLevel newLogLevel;","86","","87","    private ChangeLogLevelActionClient(LoggerLevel newLogLevel) {","88","      this.newLogLevel = newLogLevel;","89","    }","90","","91","    @Override","92","    public String getPath() {","93","      return PATH_CHANGE_LOG_LEVEL;","94","    }","95","","96","    @Override","97","    public Void getDefault() {","98","      return null;","99","    }","100","","101","    @Override","102","    public Void call(String url) throws Exception {","103","      okhttp3.Request request = new okhttp3.Request.Builder()","104","        .post(RequestBody.create(null, new byte[0]))","105","        .url(url + \"?level=\" + newLogLevel.name())","106","        .build();","107","      okhttp3.Response response = new OkHttpClient().newCall(request).execute();","108","      if (response.code() != 200) {","109","        Loggers.get(ChangeLogLevelAction.class).error(","110","          \"Failed to change log level in Compute Engine. Code was '{}' and response was '{}'\",","111","          response.code(),","112","          response.body().string());","113","      }","114","      return null;","115","    }","116","  }","117","","118","  private <T> T call(ActionClient<T> actionClient) {","121","        return actionClient.call(commands.getHttpUrl() + \"\/\" + actionClient.getPath());","123","      return actionClient.getDefault();","128","","129","  private interface ActionClient<T> {","130","    \/**","131","     * Path of the action.","132","     *\/","133","    String getPath();","134","","135","    \/**","136","     * Value to return when the Compute Engine is not ready.","137","     *\/","138","    T getDefault();","139","","140","    \/**","141","     * Delegates to perform the call to the Compute Engine's specified absolute URL.","142","     *\/","143","    T call(String url) throws Exception;","144","  }"],"delete":["51","        String url = commands.getHttpUrl() + \"\/systemInfo\";","52","        byte[] protobuf = IOUtils.toByteArray(new URI(url));","53","        return Optional.of(ProtobufSystemInfo.SystemInfo.parseFrom(protobuf));","55","      return Optional.empty();"]}],"server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/httpd\/CeHttpUtils.java":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/ws\/ChangeLogLevelAction.java":[{"add":["26","import org.sonar.ce.http.CeHttpClient;","38","  private final CeHttpClient ceHttpClient;","40","  public ChangeLogLevelAction(UserSession userSession, ServerLogging logging, Database db, CeHttpClient ceHttpClient) {","44","    this.ceHttpClient = ceHttpClient;","68","    ceHttpClient.changeLogLevel(level);"],"delete":["38","  public ChangeLogLevelAction(UserSession userSession, ServerLogging logging, Database db) {"]}],"server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/logging\/ChangeLogLevelHttpActionTest.java":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/platform\/ws\/ChangeLogLevelActionTest.java":[{"add":["26","import org.sonar.ce.http.CeHttpClient;","43","  private ServerLogging serverLogging = mock(ServerLogging.class);","44","  private Database db = mock(Database.class);","45","  private CeHttpClient ceHttpClient = mock(CeHttpClient.class);","46","  private ChangeLogLevelAction underTest = new ChangeLogLevelAction(userSession, serverLogging, db, ceHttpClient);","47","  private WsActionTester actionTester = new WsActionTester(underTest);","58","    verify(ceHttpClient).changeLogLevel(LoggerLevel.DEBUG);","71","    verify(ceHttpClient).changeLogLevel(LoggerLevel.TRACE);"],"delete":["39","","43","  ServerLogging serverLogging = mock(ServerLogging.class);","44","  Database db = mock(Database.class);","45","  ChangeLogLevelAction underTest = new ChangeLogLevelAction(userSession, serverLogging, db);","46","  WsActionTester actionTester = new WsActionTester(underTest);"]}],"server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/logging\/package-info.java":[{"add":[],"delete":[]}],"server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/logging\/ChangeLogLevelHttpAction.java":[{"add":[],"delete":[]}],"server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/systeminfo\/SystemInfoHttpActionTest.java":[{"add":["34","import static fi.iki.elonen.NanoHTTPD.Response.Status.METHOD_NOT_ALLOWED;","35","import static fi.iki.elonen.NanoHTTPD.Response.Status.OK;","39","import static org.sonar.ce.httpd.CeHttpUtils.createHttpSession;"],"delete":["34","import static fi.iki.elonen.NanoHTTPD.Response.Status.*;","38","import static org.mockito.Mockito.when;","79","  private NanoHTTPD.IHTTPSession createHttpSession(NanoHTTPD.Method method) {","80","    NanoHTTPD.IHTTPSession res = mock(NanoHTTPD.IHTTPSession.class);","81","    when(res.getMethod()).thenReturn(method);","82","    return res;","83","  }","84",""]}],"server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/CeHttpModule.java":[{"add":["22","import org.sonar.ce.logging.ChangeLogLevelHttpAction;","31","      SystemInfoHttpAction.class,","32","      ChangeLogLevelHttpAction.class);"],"delete":["30","      SystemInfoHttpAction.class);"]}],"server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/container\/ComputeEngineContainerImplTest.java":[{"add":["90","          + 79 \/\/ level 4","91","          + 4 \/\/ content of CeConfigurationModule","92","          + 3 \/\/ content of CeHttpModule"],"delete":["90","          + 75 \/\/ level 4","91","          + 7 \/\/ content of CeConfigurationModule","92","          + 2 \/\/ content of CeHttpModule"]}]}},"5c06629134a4543287b351f46b9382e0e6576e1c":{"changes":{"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v78\/RemoveOrphansFromProjectBranches.java":"MODIFY"},"diff":{"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v78\/RemoveOrphansFromProjectBranches.java":[{"add":["23","import org.sonar.server.platform.db.migration.SupportsBlueGreen;","27","@SupportsBlueGreen"],"delete":[]}]}},"8e548228c10184d3a9eb284f0ab0a6399c07684f":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/SelectList\/styles.css":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/users\/components\/GroupsForm.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/groups\/components\/EditMembers.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SelectList\/SelectListListElement.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/SelectList\/__tests__\/__snapshots__\/SelectListListElement-test.tsx.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/SelectList\/styles.css":[{"add":["91",".select-list-list-checkbox i {"],"delete":["91",".select-list-list-checkbox {"]}],"server\/sonar-web\/src\/main\/js\/apps\/users\/components\/GroupsForm.tsx":[{"add":["89","    return (","90","      <div className=\"select-list-list-item\">","91","        {group === undefined ? (","92","          name","93","        ) : (","94","          <>","95","            {group.name}","96","            <br \/>","97","            <span className=\"note\">{group.description}<\/span>","98","          <\/>","99","        )}","100","      <\/div>","101","    );"],"delete":["89","    return group === undefined ? name : group.name;"]}],"server\/sonar-web\/src\/main\/js\/apps\/groups\/components\/EditMembers.tsx":[{"add":["62","      name: this.props.group.name,","67","    }).then(","68","      data => {","69","        this.setState({","70","          users: data.users,","71","          selectedUsers: data.users.filter(user => user.selected).map(user => user.login)","72","        });","73","      },","74","      () => {}","75","    );","115","    return (","116","      <div className=\"select-list-list-item\">","117","        {user === undefined ? (","118","          login","119","        ) : (","120","          <>","121","            {user.name}","122","            <br \/>","123","            <span className=\"note\">{user.login}<\/span>","124","          <\/>","125","        )}","126","      <\/div>","127","    );"],"delete":["62","      id: this.props.group.id,","67","    }).then(data => {","68","      this.setState({","69","        users: data.users,","70","        selectedUsers: data.users.filter(user => user.selected).map(user => user.login)","71","      });","72","    });","112","    return user === undefined ? login : user.login;"]}],"server\/sonar-web\/src\/main\/js\/components\/SelectList\/SelectListListElement.tsx":[{"add":["66","          className={classNames('select-list-list-checkbox', { active: this.props.active })}"],"delete":["66","          className={classNames({ active: this.props.active })}"]}],"server\/sonar-web\/src\/main\/js\/components\/SelectList\/__tests__\/__snapshots__\/SelectListListElement-test.tsx.snap":[{"add":["6","    className=\"select-list-list-checkbox\"","23","    className=\"select-list-list-checkbox\""],"delete":["6","    className=\"\"","23","    className=\"\""]}]}},"d95a02b5fc788882ad59ad338b6a0b2a879dd2f3":{"changes":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/ChangedLinesPublisher.java":"MODIFY","sonar-plugin-api-impl\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/DefaultInputFile.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/report\/ChangedLinesPublisherTest.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/ChangedLinesPublisher.java":[{"add":["27","import org.sonar.api.batch.fs.internal.DefaultInputFile;","28","import org.sonar.api.batch.fs.internal.DefaultInputProject;","30","import org.sonar.api.impl.utils.ScannerUtils;","90","      DefaultInputFile inputFile = e.getValue();","93","      \/\/ detect unchanged last empty line","94","      if (changedLines.size() + 1 == inputFile.lines() && inputFile.lineLength(inputFile.lines()) == 0) {","95","        changedLines.add(inputFile.lines());","96","      }","97",""],"delete":["31","import org.sonar.api.batch.fs.internal.DefaultInputFile;","32","import org.sonar.api.batch.fs.internal.DefaultInputProject;","38","import org.sonar.api.impl.utils.ScannerUtils;"]}],"sonar-plugin-api-impl\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/DefaultInputFile.java":[{"add":["342","  public int lineLength(int line) {"],"delete":["342","  private int lineLength(int line) {"]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/report\/ChangedLinesPublisherTest.java":[{"add":["35","import org.sonar.api.batch.scm.ScmProvider;","36","import org.sonar.scanner.fs.InputModuleHierarchy;","115","    DefaultInputFile fileWithChangedLines = createInputFile(\"path1\", \"l1\\nl2\\nl3\\n\");","116","    DefaultInputFile fileWithoutChangedLines = createInputFile(\"path2\", \"l1\\nl2\\nl3\\n\");","124","    assertPublished(fileWithChangedLines, new HashSet<>(Arrays.asList(1, 10)));","128","  @Test","129","  public void write_last_line_as_changed_if_all_other_lines_are_changed_and_last_line_is_empty() {","130","    DefaultInputFile fileWithChangedLines = createInputFile(\"path1\", \"l1\\nl2\\nl3\\n\");","131","    DefaultInputFile fileWithoutChangedLines = createInputFile(\"path2\", \"l1\\nl2\\nl3\\n\");","132","    Set<Path> paths = new HashSet<>(Arrays.asList(BASE_DIR.resolve(\"path1\"), BASE_DIR.resolve(\"path2\")));","133","    Set<Integer> lines = new HashSet<>(Arrays.asList(1, 2, 3));","134","    when(provider.branchChangedLines(TARGET_BRANCH, BASE_DIR, paths)).thenReturn(Collections.singletonMap(BASE_DIR.resolve(\"path1\"), lines));","135","    when(inputComponentStore.allChangedFilesToPublish()).thenReturn(Arrays.asList(fileWithChangedLines, fileWithoutChangedLines));","136","","137","    publisher.publish(writer);","138","","139","    assertPublished(fileWithChangedLines, new HashSet<>(Arrays.asList(1, 2, 3, 4)));","140","    assertPublished(fileWithoutChangedLines, Collections.emptySet());","141","  }","142","","143","  @Test","144","  public void dont_write_last_line_as_changed_if_its_not_empty() {","145","    DefaultInputFile fileWithChangedLines = createInputFile(\"path1\", \"l1\\nl2\\nl3\\nl4\");","146","    DefaultInputFile fileWithoutChangedLines = createInputFile(\"path2\", \"l1\\nl2\\nl3\\nl4\");","147","    Set<Path> paths = new HashSet<>(Arrays.asList(BASE_DIR.resolve(\"path1\"), BASE_DIR.resolve(\"path2\")));","148","    Set<Integer> lines = new HashSet<>(Arrays.asList(1, 2, 3));","149","    when(provider.branchChangedLines(TARGET_BRANCH, BASE_DIR, paths)).thenReturn(Collections.singletonMap(BASE_DIR.resolve(\"path1\"), lines));","150","    when(inputComponentStore.allChangedFilesToPublish()).thenReturn(Arrays.asList(fileWithChangedLines, fileWithoutChangedLines));","151","","152","    publisher.publish(writer);","153","","154","    assertPublished(fileWithChangedLines, new HashSet<>(Arrays.asList(1, 2, 3)));","155","    assertPublished(fileWithoutChangedLines, Collections.emptySet());","156","  }","157","","158","  private DefaultInputFile createInputFile(String path, String contents) {","160","      .setContents(contents)"],"delete":["32","import org.sonar.api.batch.scm.ScmProvider;","35","import org.sonar.scanner.fs.InputModuleHierarchy;","115","    DefaultInputFile fileWithChangedLines = createInputFile(\"path1\");","116","    DefaultInputFile fileWithoutChangedLines = createInputFile(\"path2\");","124","    assertPublished(fileWithChangedLines, lines);","128","  private DefaultInputFile createInputFile(String path) {"]}]}},"cd45a1067c9f249f9fd3e28a4f4fb957c846906a":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/measure\/live\/IssueMetricFormulaFactoryImplTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/qualitymodel\/DebtRatingGrid.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/qualitymodel\/DebtRatingGridTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/measure\/live\/IssueMetricFormulaFactoryImplTest.java":[{"add":["256","    \/\/ A is 5% --> min debt is exactly 200*0.05=10","260","      .assertThatValueIs(CoreMetrics.SQALE_RATING, Rating.A);","632","    \/\/ A is 5% --> min debt is exactly 200*0.05=10","636","      .assertThatLeakValueIs(CoreMetrics.NEW_MAINTAINABILITY_RATING, Rating.A);"],"delete":["256","    \/\/ B is 5% --> min debt is exactly 200*0.05=10","260","      .assertThatValueIs(CoreMetrics.SQALE_RATING, Rating.B);","632","    \/\/ B is 5% --> min debt is exactly 200*0.05=10","636","      .assertThatLeakValueIs(CoreMetrics.NEW_MAINTAINABILITY_RATING, Rating.B);"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/qualitymodel\/DebtRatingGrid.java":[{"add":["23","import java.util.EnumMap;","24","import java.util.Map;","27","import static com.google.common.base.Preconditions.checkState;","28","import static java.lang.String.format;","31","import static org.sonar.server.computation.task.projectanalysis.qualitymodel.Rating.A;","32","import static org.sonar.server.computation.task.projectanalysis.qualitymodel.Rating.B;","33","import static org.sonar.server.computation.task.projectanalysis.qualitymodel.Rating.C;","34","import static org.sonar.server.computation.task.projectanalysis.qualitymodel.Rating.D;","35","import static org.sonar.server.computation.task.projectanalysis.qualitymodel.Rating.E;","40","  private final EnumMap<Rating, Bounds> ratingBounds;","49","      this.ratingBounds = buildRatingBounds(gridValues);","56","  public DebtRatingGrid(double[] gridValues) {","57","    this.gridValues = Arrays.copyOf(gridValues, gridValues.length);","58","    this.ratingBounds = buildRatingBounds(gridValues);","59","  }","60","","61","  private static EnumMap<Rating, Bounds> buildRatingBounds(double[] gridValues) {","62","    checkState(gridValues.length == 4, \"Rating grid should contains 4 values\");","63","    EnumMap<Rating, Bounds> ratingBounds = new EnumMap<>(Rating.class);","64","    ratingBounds.put(A, new Bounds(0d, gridValues[0]));","65","    ratingBounds.put(B, new Bounds(gridValues[0], gridValues[1]));","66","    ratingBounds.put(C, new Bounds(gridValues[1], gridValues[2]));","67","    ratingBounds.put(D, new Bounds(gridValues[2], gridValues[3]));","68","    ratingBounds.put(E, new Bounds(gridValues[3], Double.MAX_VALUE));","69","    return ratingBounds;","70","  }","71","","72","  public Rating getRatingForDensity(double value) {","73","    return ratingBounds.entrySet().stream()","74","      .filter(e -> e.getValue().match(value))","75","      .map(Map.Entry::getKey)","76","      .findFirst()","77","      .orElseThrow(() -> new IllegalArgumentException(format(\"Invalid value '%s'\", value)));","92","  private static class Bounds {","93","    private final double lowerBound;","94","    private final double higherBound;","95","    private final boolean isLowerBoundInclusive;","96","","97","    private Bounds(double lowerBound, double higherBound) {","98","      this.lowerBound = lowerBound;","99","      this.higherBound = higherBound;","100","      this.isLowerBoundInclusive = lowerBound == 0;","101","    }","102","","103","    boolean match(double value) {","104","      boolean lowerBoundMatch = isLowerBoundInclusive ? (value >= lowerBound) : (value > lowerBound);","105","      return lowerBoundMatch && value <= higherBound;","106","    }","107","  }","108",""],"delete":["24","import org.sonar.api.utils.MessageException;","32","","33","  public DebtRatingGrid(double[] gridValues) {","34","    this.gridValues = Arrays.copyOf(gridValues, gridValues.length);","35","  }","50","  public Rating getRatingForDensity(double density) {","51","    for (Rating rating : Rating.values()) {","52","      double lowerBound = getGradeLowerBound(rating);","53","      if (density >= lowerBound) {","54","        return rating;","55","      }","56","    }","57","    throw MessageException.of(\"The rating density value should be between 0 and \" + Double.MAX_VALUE + \" and got \" + density);"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/computation\/task\/projectanalysis\/qualitymodel\/DebtRatingGridTest.java":[{"add":["51","    assertThat(ratingGrid.getRatingForDensity(0.1)).isEqualTo(A);","53","    assertThat(ratingGrid.getRatingForDensity(0.2)).isEqualTo(B);","55","    assertThat(ratingGrid.getRatingForDensity(0.5)).isEqualTo(C);","57","    assertThat(ratingGrid.getRatingForDensity(1)).isEqualTo(D);","62","  public void density_matching_exact_grid_values() {","63","    assertThat(ratingGrid.getRatingForDensity(0.1)).isEqualTo(A);","64","    assertThat(ratingGrid.getRatingForDensity(0.2)).isEqualTo(B);","65","    assertThat(ratingGrid.getRatingForDensity(0.5)).isEqualTo(C);","66","    assertThat(ratingGrid.getRatingForDensity(1)).isEqualTo(D);","70","  public void convert_int_to_rating() {","79","  public void fail_on_invalid_density() {","80","    throwable.expect(IllegalArgumentException.class);","81","    throwable.expectMessage(\"Invalid value '-1.0'\");","82","","83","    ratingGrid.getRatingForDensity(-1);","84","  }","85","","86","  @Test","87","  public void fail_to_concert_invalid_value() {","91","","92","  @Test","93","  public void fail_on_invalid_grid() {","94","    throwable.expect(IllegalStateException.class);","95","    throwable.expectMessage(\"Rating grid should contains 4 values\");","96","","97","    ratingGrid = new DebtRatingGrid(new double[] {0.1, 0.2, 0.5});","98","  }"],"delete":["27","","52","    assertThat(ratingGrid.getRatingForDensity(0.1)).isEqualTo(B);","54","    assertThat(ratingGrid.getRatingForDensity(0.2)).isEqualTo(C);","56","    assertThat(ratingGrid.getRatingForDensity(0.5)).isEqualTo(D);","58","    assertThat(ratingGrid.getRatingForDensity(1)).isEqualTo(E);","63","  public void fail_on_invalid_density() {","64","    throwable.expect(RuntimeException.class);","65","","66","    ratingGrid.getRatingForDensity(-1);","70","  public void convert_int_to_rating() throws Exception {","79","  public void fail_to_concert_invalid_value() throws Exception {"]}]}},"c9c9262a4ca404ed4860085d17aaf8ac6b64ca1f":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/__tests__\/__snapshots__\/Summary-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/less\/init\/misc.less":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/App.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/__tests__\/__snapshots__\/Report-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/Activity.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/__tests__\/__snapshots__\/App-test.tsx.snap":"MODIFY","sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/Summary.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/__tests__\/__snapshots__\/Activity-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/Report.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/__tests__\/App-test.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/__tests__\/__snapshots__\/Summary-test.tsx.snap":[{"add":["4","  className=\"huge-spacer-bottom\""],"delete":["4","  className=\"portfolio-section portfolio-section-summary\""]}],"server\/sonar-web\/src\/main\/less\/init\/misc.less":[{"add":["85",".huge-spacer-bottom {","86","  margin-bottom: 40px;","87","}"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/App.tsx":[{"add":["33","import { translate } from '..\/..\/..\/helpers\/l10n';","100","  isEmpty = () => this.state.measures == undefined || this.state.measures['ncloc'] == undefined;","101","","102","  isNotComputed = () =>","103","    this.state.measures && this.state.measures['reliability_rating'] == undefined;","104","","115","  renderEmpty() {","116","    return (","117","      <div className=\"empty-search\">","118","        <h3>{translate('portfolio.empty')}<\/h3>","119","        <p>{translate('portfolio.empty.hint')}<\/p>","120","      <\/div>","121","    );","122","  }","123","","124","  renderWhenNotComputed() {","125","    return (","126","      <div className=\"empty-search\">","127","        <h3>{translate('portfolio.not_computed')}<\/h3>","128","      <\/div>","129","    );","130","  }","131","","132","  renderMain() {","133","    const { component } = this.props;","134","    const { measures, subComponents, totalSubComponents } = this.state;","135","","136","    if (this.isEmpty()) {","137","      return this.renderEmpty();","138","    }","139","","140","    if (this.isNotComputed()) {","141","      return this.renderWhenNotComputed();","142","    }","143","","144","    return (","145","      <div>","146","        <div className=\"portfolio-boxes\">","147","          <ReleasabilityBox component={component.key} measures={measures!} \/>","148","          <ReliabilityBox component={component.key} measures={measures!} \/>","149","          <SecurityBox component={component.key} measures={measures!} \/>","150","          <MaintainabilityBox component={component.key} measures={measures!} \/>","151","        <\/div>","152","","153","        {subComponents != undefined &&","154","        totalSubComponents != undefined && (","155","          <WorstProjects","156","            component={component.key}","157","            subComponents={subComponents}","158","            total={totalSubComponents}","159","          \/>","160","        )}","161","      <\/div>","162","    );","163","  }","164","","167","    const { loading, measures } = this.state;","176","          <div className=\"page-main\">{this.renderMain()}<\/div>","179","            {!this.isEmpty() &&","180","            !this.isNotComputed() && <Summary component={component} measures={measures!} \/>}"],"delete":["111","    const { loading, measures, subComponents, totalSubComponents } = this.state;","120","          <div className=\"page-main\">","121","            {measures != undefined && (","122","              <div className=\"portfolio-boxes\">","123","                <ReleasabilityBox component={component.key} measures={measures} \/>","124","                <ReliabilityBox component={component.key} measures={measures} \/>","125","                <SecurityBox component={component.key} measures={measures} \/>","126","                <MaintainabilityBox component={component.key} measures={measures} \/>","127","              <\/div>","128","            )}","129","","130","            {subComponents != undefined &&","131","            totalSubComponents != undefined && (","132","              <WorstProjects","133","                component={component.key}","134","                subComponents={subComponents}","135","                total={totalSubComponents}","136","              \/>","137","            )}","138","          <\/div>","141","            {measures != undefined && <Summary component={component} measures={measures} \/>}"]}],"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/__tests__\/__snapshots__\/Report-test.tsx.snap":[{"add":["3","<div>","20","<div>"],"delete":["3","<div","4","  className=\"huge-spacer-top\"","5",">","22","<div","23","  className=\"huge-spacer-top\"","24",">"]}],"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/Activity.tsx":[{"add":["99","      <div className=\"huge-spacer-bottom\">"],"delete":["99","      <div className=\"huge-spacer-top\">"]}],"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/__tests__\/__snapshots__\/App-test.tsx.snap":[{"add":["12","      <div>","13","        <div","14","          className=\"portfolio-boxes\"","15","        >","16","          <ReleasabilityBox","17","            component=\"foo\"","18","            measures={","19","              Object {","20","                \"ncloc\": \"173\",","21","                \"reliability_rating\": \"1\",","22","              }","23","            }","24","          \/>","25","          <ReliabilityBox","26","            component=\"foo\"","27","            measures={","28","              Object {","29","                \"ncloc\": \"173\",","30","                \"reliability_rating\": \"1\",","31","              }","32","            }","33","          \/>","34","          <SecurityBox","35","            component=\"foo\"","36","            measures={","37","              Object {","38","                \"ncloc\": \"173\",","39","                \"reliability_rating\": \"1\",","40","              }","41","            }","42","          \/>","43","          <MaintainabilityBox","44","            component=\"foo\"","45","            measures={","46","              Object {","47","                \"ncloc\": \"173\",","48","                \"reliability_rating\": \"1\",","49","              }","50","            }","51","          \/>","52","        <\/div>","53","        <WorstProjects","55","          subComponents={Array []}","56","          total={0}","70","        measures={","71","          Object {","72","            \"ncloc\": \"173\",","73","            \"reliability_rating\": \"1\",","74","          }","75","        }","92","","93","exports[`renders when portfolio is empty 1`] = `","94","<div","95","  className=\"page page-limited\"","96",">","97","  <div","98","    className=\"page-with-sidebar\"","99","  >","100","    <div","101","      className=\"page-main\"","102","    >","103","      <div","104","        className=\"empty-search\"","105","      >","106","        <h3>","107","          portfolio.empty","108","        <\/h3>","109","        <p>","110","          portfolio.empty.hint","111","        <\/p>","112","      <\/div>","113","    <\/div>","114","    <aside","115","      className=\"page-sidebar-fixed\"","116","    >","117","      <Activity","118","        component=\"foo\"","119","      \/>","120","      <Report","121","        component={","122","          Object {","123","            \"key\": \"foo\",","124","            \"name\": \"Foo\",","125","          }","126","        }","127","      \/>","128","    <\/aside>","129","  <\/div>","130","<\/div>","131","`;","132","","133","exports[`renders when portfolio is not computed 1`] = `","134","<div","135","  className=\"page page-limited\"","136",">","137","  <div","138","    className=\"page-with-sidebar\"","139","  >","140","    <div","141","      className=\"page-main\"","142","    >","143","      <div","144","        className=\"empty-search\"","145","      >","146","        <h3>","147","          portfolio.not_computed","148","        <\/h3>","149","      <\/div>","150","    <\/div>","151","    <aside","152","      className=\"page-sidebar-fixed\"","153","    >","154","      <Activity","155","        component=\"foo\"","156","      \/>","157","      <Report","158","        component={","159","          Object {","160","            \"key\": \"foo\",","161","            \"name\": \"Foo\",","162","          }","163","        }","164","      \/>","165","    <\/aside>","166","  <\/div>","167","<\/div>","168","`;"],"delete":["12","      <div","13","        className=\"portfolio-boxes\"","14","      >","15","        <ReleasabilityBox","17","          measures={Object {}}","18","        \/>","19","        <ReliabilityBox","20","          component=\"foo\"","21","          measures={Object {}}","22","        \/>","23","        <SecurityBox","24","          component=\"foo\"","25","          measures={Object {}}","26","        \/>","27","        <MaintainabilityBox","28","          component=\"foo\"","29","          measures={Object {}}","32","      <WorstProjects","33","        component=\"foo\"","34","        subComponents={Array []}","35","        total={0}","36","      \/>","48","        measures={Object {}}"]}],"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["3196","portfolio.empty=This portfolio is empty.","3197","portfolio.empty.hint=This portfolio has no projects, or none of associated projects has lines of code.","3198","portfolio.not_computed=This portfolio is not yet computed."],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/Summary.tsx":[{"add":["37","    <section id=\"portfolio-summary\" className=\"huge-spacer-bottom\">"],"delete":["37","    <section id=\"portfolio-summary\" className=\"portfolio-section portfolio-section-summary\">"]}],"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/__tests__\/__snapshots__\/Activity-test.tsx.snap":[{"add":["4","  className=\"huge-spacer-bottom\""],"delete":["4","  className=\"huge-spacer-top\""]}],"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/Report.tsx":[{"add":["73","        <div>","85","      <div>"],"delete":["73","        <div className=\"huge-spacer-top\">","85","      <div className=\"huge-spacer-top\">"]}],"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/__tests__\/App-test.tsx":[{"add":["51","  wrapper.setState({","52","    loading: false,","53","    measures: { ncloc: '173', reliability_rating: '1' },","54","    subComponents: [],","55","    totalSubComponents: 0","56","  });","57","  expect(wrapper).toMatchSnapshot();","58","});","59","","60","it('renders when portfolio is empty', () => {","61","  const wrapper = shallow(<App component={component} \/>);","62","  wrapper.setState({ loading: false, measures: { reliability_rating: '1' } });","63","  expect(wrapper).toMatchSnapshot();","64","});","65","","66","it('renders when portfolio is not computed', () => {","67","  const wrapper = shallow(<App component={component} \/>);","68","  wrapper.setState({ loading: false, measures: { ncloc: '173' } });"],"delete":["51","  wrapper.setState({ loading: false, measures: {}, subComponents: [], totalSubComponents: 0 });"]}]}},"86b158854981eefac8955ece83e7b3d9761583ba":{"changes":{"sonar-db\/src\/main\/resources\/org\/sonar\/db\/version\/schema-h2.ddl":"MODIFY","server\/sonar-web\/src\/main\/webapp\/WEB-INF\/db\/migrate\/939_move_duplications_id_to_bigint.rb":"ADD","sonar-db\/src\/main\/java\/org\/sonar\/db\/version\/DatabaseVersion.java":"MODIFY","sonar-db\/src\/main\/resources\/org\/sonar\/db\/version\/rows-h2.sql":"MODIFY"},"diff":{"sonar-db\/src\/main\/resources\/org\/sonar\/db\/version\/schema-h2.ddl":[{"add":["204","  \"ID\" BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),"],"delete":["204","  \"ID\" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),"]}],"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/db\/migrate\/939_move_duplications_id_to_bigint.rb":[{"add":[],"delete":[]}],"sonar-db\/src\/main\/java\/org\/sonar\/db\/version\/DatabaseVersion.java":[{"add":["31","  public static final int LAST_VERSION = 939;"],"delete":["31","  public static final int LAST_VERSION = 938;"]}],"sonar-db\/src\/main\/resources\/org\/sonar\/db\/version\/rows-h2.sql":[{"add":["359","INSERT INTO SCHEMA_MIGRATIONS(VERSION) VALUES ('939');"],"delete":[]}]}},"b1ab22e63bba4a4b7629ea69108d9c57a4e7f5d8":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/events\/PreviewGraph.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/events\/AnalysesList.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/events\/PreviewGraph.js":[{"add":["43","  router: { push: ({ pathname: string, query?: {} }) => void }","135","    this.props.router.push({ pathname: '\/project\/activity', query: { id: this.props.project } });"],"delete":["43","  router: { replace: ({ pathname: string, query?: {} }) => void }","135","    this.props.router.replace({ pathname: '\/project\/activity', query: { id: this.props.project } });"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/events\/AnalysesList.js":[{"add":["34","  router: { push: ({ pathname: string, query?: {} }) => void }"],"delete":["34","  router: { replace: ({ pathname: string, query?: {} }) => void }"]}]}},"2ffc1c1e25a0c2c7a8589e9e189ffe84cc0b125a":{"changes":{"build.gradle":"MODIFY"},"diff":{"build.gradle":[{"add":["135","      dependency 'com.google.code.gson:gson:2.8.5'"],"delete":["135","      dependency 'com.google.code.gson:gson:2.8.4'"]}]}},"9112c817aaf6d3273888cc3ef82245f4fcda3b4b":{"changes":{"server\/sonar-main\/src\/main\/java\/org\/sonar\/application\/AppLogging.java":"MODIFY","server\/sonar-main\/src\/test\/java\/org\/sonar\/application\/AppLoggingTest.java":"MODIFY","server\/sonar-process\/src\/test\/java\/org\/sonar\/process\/logging\/LogbackHelperTest.java":"MODIFY","server\/sonar-process\/src\/test\/java\/org\/sonar\/process\/logging\/TestILoggingEvent.java":"ADD","server\/sonar-process\/src\/test\/java\/org\/sonar\/process\/logging\/EscapedMessageConverterTest.java":"ADD","server\/sonar-process\/src\/main\/java\/org\/sonar\/process\/logging\/EscapedMessageConverter.java":"ADD","server\/sonar-process\/src\/test\/java\/org\/sonar\/process\/logging\/PatternLayoutEncoderTest.java":"ADD","server\/sonar-webserver-core\/src\/test\/java\/org\/sonar\/server\/app\/WebServerProcessLoggingTest.java":"MODIFY","server\/sonar-process\/src\/main\/java\/org\/sonar\/process\/logging\/PatternLayoutEncoder.java":"ADD","server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/logging\/CeProcessLoggingTest.java":"MODIFY","server\/sonar-process\/src\/main\/java\/org\/sonar\/process\/logging\/LogbackHelper.java":"MODIFY"},"diff":{"server\/sonar-main\/src\/main\/java\/org\/sonar\/application\/AppLogging.java":[{"add":["33","import org.sonar.process.logging.PatternLayoutEncoder;"],"delete":["24","import ch.qos.logback.classic.encoder.PatternLayoutEncoder;"]}],"server\/sonar-main\/src\/test\/java\/org\/sonar\/application\/AppLoggingTest.java":[{"add":["45","import org.sonar.process.logging.PatternLayoutEncoder;"],"delete":["24","import ch.qos.logback.classic.encoder.PatternLayoutEncoder;"]}],"server\/sonar-process\/src\/test\/java\/org\/sonar\/process\/logging\/LogbackHelperTest.java":[{"add":[],"delete":["23","import ch.qos.logback.classic.encoder.PatternLayoutEncoder;"]}],"server\/sonar-process\/src\/test\/java\/org\/sonar\/process\/logging\/TestILoggingEvent.java":[{"add":[],"delete":[]}],"server\/sonar-process\/src\/test\/java\/org\/sonar\/process\/logging\/EscapedMessageConverterTest.java":[{"add":[],"delete":[]}],"server\/sonar-process\/src\/main\/java\/org\/sonar\/process\/logging\/EscapedMessageConverter.java":[{"add":[],"delete":[]}],"server\/sonar-process\/src\/test\/java\/org\/sonar\/process\/logging\/PatternLayoutEncoderTest.java":[{"add":[],"delete":[]}],"server\/sonar-webserver-core\/src\/test\/java\/org\/sonar\/server\/app\/WebServerProcessLoggingTest.java":[{"add":["49","import org.sonar.process.logging.PatternLayoutEncoder;","510","    OutputStreamAppender appender = (OutputStreamAppender) rootLogger.getAppender(\"file_web\");","513","    assertThat(((LayoutWrappingEncoder) encoder).getLayout()).isInstanceOf(LogbackJsonLayout.class);"],"delete":["24","import ch.qos.logback.classic.encoder.PatternLayoutEncoder;","510","    OutputStreamAppender appender = (OutputStreamAppender)rootLogger.getAppender(\"file_web\");","513","    assertThat(((LayoutWrappingEncoder)encoder).getLayout()).isInstanceOf(LogbackJsonLayout.class);"]}],"server\/sonar-process\/src\/main\/java\/org\/sonar\/process\/logging\/PatternLayoutEncoder.java":[{"add":[],"delete":[]}],"server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/logging\/CeProcessLoggingTest.java":[{"add":["41","import org.sonar.process.logging.PatternLayoutEncoder;"],"delete":["24","import ch.qos.logback.classic.encoder.PatternLayoutEncoder;"]}],"server\/sonar-process\/src\/main\/java\/org\/sonar\/process\/logging\/LogbackHelper.java":[{"add":[],"delete":["24","import ch.qos.logback.classic.encoder.PatternLayoutEncoder;"]}]}},"b45880c057dafd84c9e47be48a061374e316d3d1":{"changes":{"server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/webhook\/WebhookCallerImpl.java":"MODIFY","server\/sonar-server-common\/src\/test\/java\/org\/sonar\/server\/webhook\/HttpUrlHelperTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/webhook\/ws\/ListAction.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/webhook\/WebhookTesting.java":"MODIFY","server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/webhook\/HttpUrlHelper.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/webhook\/ws\/ListActionTest.java":"MODIFY"},"diff":{"server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/webhook\/WebhookCallerImpl.java":[{"add":["70","      builder.setEffectiveUrl(HttpUrlHelper.obfuscateCredentials(webhook.getUrl(), url));"],"delete":["70","      builder.setEffectiveUrl(HttpUrlHelper.toEffectiveUrl(webhook.getUrl(), url));"]}],"server\/sonar-server-common\/src\/test\/java\/org\/sonar\/server\/webhook\/HttpUrlHelperTest.java":[{"add":["33","import static org.sonar.server.webhook.HttpUrlHelper.obfuscateCredentials;","39","  @UseDataProvider(\"obfuscateCredentialsUseCases\")","40","  public void verify_obfuscateCredentials(String originalUrl, String expectedUrl) {","41","    assertThat(obfuscateCredentials(originalUrl, HttpUrl.parse(originalUrl)))","42","      .isEqualTo(obfuscateCredentials(originalUrl))","43","      .isEqualTo(expectedUrl);","47","  public static Object[][] obfuscateCredentialsUseCases() {"],"delete":["38","  @UseDataProvider(\"toEffectiveUrlUseCases\")","39","  public void verify_toEffectiveUrl(String originalUrl, String expectedUrl) {","40","    assertThat(HttpUrlHelper.toEffectiveUrl(originalUrl, HttpUrl.parse(originalUrl))).isEqualTo(expectedUrl);","44","  public static Object[][] toEffectiveUrlUseCases() {"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/webhook\/ws\/ListAction.java":[{"add":["44","import static org.sonar.server.webhook.HttpUrlHelper.obfuscateCredentials;","146","          .setUrl(obfuscateCredentials(webhook.getUrl()));"],"delete":["140","      .stream()","146","          .setUrl(webhook.getUrl());"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/webhook\/WebhookTesting.java":[{"add":["21","import java.util.Arrays;","22","import java.util.function.Consumer;","51","  @SafeVarargs","52","  public static WebhookDto newOrganizationWebhook(String name, String organizationUuid, Consumer<WebhookDto>... consumers) {","53","    return getWebhookDto(consumers)","58","  @SafeVarargs","59","  private static WebhookDto getWebhookDto(Consumer<WebhookDto>... consumers) {","60","    WebhookDto res = new WebhookDto()","65","    Arrays.stream(consumers).forEach(consumer -> consumer.accept(res));","66","    return res;"],"delete":["49","  public static WebhookDto newOrganizationWebhook(String name, String organizationUuid) {","50","    return getWebhookDto()","55","  private static WebhookDto getWebhookDto() {","56","    return new WebhookDto()"]}],"server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/webhook\/HttpUrlHelper.java":[{"add":["31","public final class HttpUrlHelper {","36","  public static String obfuscateCredentials(String originalUrl) {","37","    HttpUrl parsedUrl = HttpUrl.parse(originalUrl);","38","    if (parsedUrl != null) {","39","      return obfuscateCredentials(originalUrl, parsedUrl);","40","    }","41","    return originalUrl;","42","  }","43","","54","  static String obfuscateCredentials(String originalUrl, HttpUrl parsedUrl) {","103","  @CheckForNull"],"delete":["31","final class HttpUrlHelper {","46","  public static String toEffectiveUrl(String originalUrl, HttpUrl parsedUrl) {"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/webhook\/ws\/ListActionTest.java":[{"add":["150","  public void obfuscate_credentials_in_webhook_URLs() {","151","    String url = \"http:\/\/foo:barouf@toto\/bop\";","152","    String expectedUrl = \"http:\/\/***:******@toto\/bop\";","153","    WebhookDto webhook1 = webhookDbTester.insert(newOrganizationWebhook(\"aaa\", defaultOrganizationProvider.get().getUuid(), t -> t.setUrl(url)));","154","    webhookDeliveryDbTester.insert(newDto(\"WH1-DELIVERY-1-UUID\", webhook1.getUuid(), \"COMPONENT_1\", \"TASK_1\").setCreatedAt(BEFORE));","155","    webhookDeliveryDbTester.insert(newDto(\"WH1-DELIVERY-2-UUID\", webhook1.getUuid(), \"COMPONENT_1\", \"TASK_2\").setCreatedAt(NOW));","156","    WebhookDto webhook2 = webhookDbTester.insert(newOrganizationWebhook(\"bbb\", db.getDefaultOrganization().getUuid(), t -> t.setUrl(url)));","157","","158","    userSession.logIn().addPermission(ADMINISTER, db.getDefaultOrganization().getUuid());","159","","160","    ListResponse response = wsActionTester.newRequest().executeProtobuf(ListResponse.class);","161","","162","    List<Webhooks.ListResponseElement> elements = response.getWebhooksList();","163","    assertThat(elements)","164","      .hasSize(2)","165","      .extracting(Webhooks.ListResponseElement::getUrl)","166","      .containsOnly(expectedUrl);","167","  }","168","","169","  @Test"],"delete":[]}]}},"99374f79d07f74e433104df73cc3717284b8ac02":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/component\/ComponentServiceTest.java":"MODIFY","sonar-db\/src\/test\/java\/org\/sonar\/db\/component\/ComponentDaoTest.java":"MODIFY","sonar-db\/src\/main\/java\/org\/sonar\/db\/component\/ComponentDao.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/component\/ComponentService.java":"MODIFY","sonar-db\/src\/test\/resources\/org\/sonar\/db\/component\/ComponentDaoWithDuplicatedKeysTest\/schema.sql":"ADD","sonar-db\/src\/test\/java\/org\/sonar\/db\/component\/ComponentDaoWithDuplicatedKeysTest.java":"ADD","sonar-db\/src\/test\/resources\/org\/sonar\/db\/component\/ComponentDaoTest\/delete-result.xml":"MODIFY","sonar-db\/src\/test\/resources\/org\/sonar\/db\/component\/ComponentDaoTest\/delete.xml":"ADD","sonar-db\/src\/main\/java\/org\/sonar\/db\/component\/ComponentMapper.java":"MODIFY","sonar-db\/src\/main\/resources\/org\/sonar\/db\/component\/ComponentMapper.xml":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/component\/ComponentServiceTest.java":[{"add":["22","import com.google.common.base.Optional;","31","import org.mockito.invocation.InvocationOnMock;","32","import org.mockito.stubbing.Answer;","40","import org.sonar.db.component.ComponentDao;","43","import org.sonar.db.component.ResourceIndexDao;","50","import static com.google.common.collect.Lists.newArrayList;","54","import static org.mockito.Matchers.any;","55","import static org.mockito.Matchers.eq;","56","import static org.mockito.Mockito.doAnswer;","58","import static org.mockito.Mockito.verify;","60","import static org.sonar.core.permission.GlobalPermissions.PROVISIONING;","280","    userSessionRule.login(\"john\").setGlobalPermissions(PROVISIONING);","300","    userSessionRule.login(\"john\").setGlobalPermissions(PROVISIONING);","311","    userSessionRule.login(\"john\").setGlobalPermissions(PROVISIONING);","331","    userSessionRule.login(\"john\").setGlobalPermissions(PROVISIONING);","344","    userSessionRule.login(\"john\").setGlobalPermissions(PROVISIONING);","357","    userSessionRule.login(\"john\").setGlobalPermissions(PROVISIONING);","372","  public void remove_duplicated_components_when_creating_project() throws Exception {","373","    String projectKey = \"PROJECT_KEY\";","374","","375","    userSessionRule.login(\"john\").setGlobalPermissions(PROVISIONING);","376","","377","    DbSession session = mock(DbSession.class);","378","","379","    ComponentDao componentDao = mock(ComponentDao.class);","380","    when(componentDao.selectByKey(session, projectKey)).thenReturn(Optional.<ComponentDto>absent());","381","","382","    DbClient dbClient = mock(DbClient.class);","383","    when(dbClient.openSession(false)).thenReturn(session);","384","    when(dbClient.componentDao()).thenReturn(componentDao);","385","    when(dbClient.componentIndexDao()).thenReturn(mock(ResourceIndexDao.class));","386","","387","    doAnswer(new Answer<Object>() {","388","      public Object answer(InvocationOnMock invocation) {","389","        ((ComponentDto) invocation.getArguments()[1]).setId(1L);","390","        return null;","391","      }","392","    }).when(componentDao).insert(eq(session), any(ComponentDto.class));","393","","394","    when(componentDao.selectComponentsHavingSameKeyOrderedById(session, projectKey)).thenReturn(newArrayList(","395","      ComponentTesting.newProjectDto().setId(1L).setKey(projectKey),","396","      ComponentTesting.newProjectDto().setId(2L).setKey(projectKey),","397","      ComponentTesting.newProjectDto().setId(3L).setKey(projectKey)","398","    ));","399","","400","    service = new ComponentService(dbClient, i18n, userSessionRule, System2.INSTANCE, new ComponentFinder(dbClient));","401","    service.create(NewComponent.create(projectKey, projectKey));","402","","403","    verify(componentDao).delete(session, 2L);","404","    verify(componentDao).delete(session, 3L);","405","  }","406","","407","  @Test"],"delete":["34","import org.sonar.core.permission.GlobalPermissions;","270","    userSessionRule.login(\"john\").setGlobalPermissions(GlobalPermissions.PROVISIONING);","290","    userSessionRule.login(\"john\").setGlobalPermissions(GlobalPermissions.PROVISIONING);","301","    userSessionRule.login(\"john\").setGlobalPermissions(GlobalPermissions.PROVISIONING);","321","    userSessionRule.login(\"john\").setGlobalPermissions(GlobalPermissions.PROVISIONING);","334","    userSessionRule.login(\"john\").setGlobalPermissions(GlobalPermissions.PROVISIONING);","347","    userSessionRule.login(\"john\").setGlobalPermissions(GlobalPermissions.PROVISIONING);"]}],"sonar-db\/src\/test\/java\/org\/sonar\/db\/component\/ComponentDaoTest.java":[{"add":["54","  DbSession dbSession = db.getSession();","55","","61","    ","62","    ComponentDto result = underTest.selectByUuid(dbSession, \"KLMN\").get();","78","    assertThat(underTest.selectByUuid(dbSession, \"UNKNOWN\")).isAbsent();","85","    ComponentDto result = underTest.selectByUuid(dbSession, \"STUV\").get();","106","    ComponentDto result = underTest.selectByUuid(dbSession, \"DCBA\").get();","117","    underTest.selectOrFailByUuid(dbSession, \"unknown\");","124","    Optional<ComponentDto> optional = underTest.selectByKey(dbSession, \"org.struts:struts-core:src\/org\/struts\/RequestContext.java\");","137","    assertThat(underTest.selectByKey(dbSession, \"unknown\")).isAbsent();","146","    underTest.selectOrFailByKey(dbSession, \"unknown\");","153","    ComponentDto result = underTest.selectOrFailByKey(dbSession, \"org.disabled.project\");","161","    ComponentDto result = underTest.selectOrFailByKey(dbSession, \"org.struts:struts\");","179","    List<ComponentDto> results = underTest.selectByKeys(dbSession, Collections.singletonList(\"org.struts:struts-core:src\/org\/struts\/RequestContext.java\"));","193","    assertThat(underTest.selectByKeys(dbSession, Collections.singletonList(\"unknown\"))).isEmpty();","200","    List<ComponentDto> results = underTest.selectByIds(dbSession, newArrayList(4L));","214","    assertThat(underTest.selectByIds(dbSession, newArrayList(555L))).isEmpty();","221","    List<ComponentDto> results = underTest.selectByUuids(dbSession, newArrayList(\"KLMN\"));","239","    assertThat(underTest.selectByUuids(dbSession, newArrayList(\"unknown\"))).isEmpty();","246","    List<ComponentDto> results = underTest.selectByUuids(dbSession, newArrayList(\"DCBA\"));","258","    List<String> results = underTest.selectExistingUuids(dbSession, newArrayList(\"KLMN\"));","261","    assertThat(underTest.selectExistingUuids(dbSession, newArrayList(\"KLMN\", \"unknown\"))).hasSize(1);","262","    assertThat(underTest.selectExistingUuids(dbSession, newArrayList(\"unknown\"))).isEmpty();","269","    assertThat(underTest.selectOrFailById(dbSession, 4L)).isNotNull();","276","    Optional<ComponentDto> result = underTest.selectById(dbSession, 10L);","285","    underTest.selectOrFailById(dbSession, 111L);","292","    assertThat(underTest.selectById(dbSession, 4L)).isPresent();","293","    assertThat(underTest.selectById(dbSession, 111L)).isAbsent();","300","    assertThat(underTest.existsById(4L, dbSession)).isTrue();","301","    assertThat(underTest.existsById(111L, dbSession)).isFalse();","309","    List<ComponentDto> results = underTest.selectSubProjectsByComponentUuids(dbSession, newArrayList(\"HIJK\"));","314","    results = underTest.selectSubProjectsByComponentUuids(dbSession, newArrayList(\"GHIJ\"));","319","    results = underTest.selectSubProjectsByComponentUuids(dbSession, newArrayList(\"FGHI\"));","324","    results = underTest.selectSubProjectsByComponentUuids(dbSession, newArrayList(\"EFGH\"));","329","    assertThat(underTest.selectSubProjectsByComponentUuids(dbSession, newArrayList(\"ABCD\"))).isEmpty();","332","    assertThat(underTest.selectSubProjectsByComponentUuids(dbSession, newArrayList(\"HIJK\", \"FGHI\"))).hasSize(2);","334","    assertThat(underTest.selectSubProjectsByComponentUuids(dbSession, newArrayList(\"unknown\"))).isEmpty();","336","    assertThat(underTest.selectSubProjectsByComponentUuids(dbSession, Collections.<String>emptyList())).isEmpty();","344","    List<ComponentDto> modules = underTest.selectEnabledDescendantModules(dbSession, \"ABCD\");","348","    modules = underTest.selectEnabledDescendantModules(dbSession, \"EFGH\");","352","    modules = underTest.selectEnabledDescendantModules(dbSession, \"FGHI\");","356","    assertThat(underTest.selectEnabledDescendantModules(dbSession, \"GHIJ\")).isEmpty();","357","    assertThat(underTest.selectEnabledDescendantModules(dbSession, \"unknown\")).isEmpty();","365","    List<ComponentDto> modules = underTest.selectDescendantModules(dbSession, \"ABCD\");","369","    modules = underTest.selectDescendantModules(dbSession, \"EFGH\");","373","    assertThat(underTest.selectDescendantModules(dbSession, \"IHGF\")).isEmpty();","381","    List<FilePathWithHashDto> files = underTest.selectEnabledDescendantFiles(dbSession, \"ABCD\");","388","    files = underTest.selectEnabledDescendantFiles(dbSession, \"EFGH\");","395","    files = underTest.selectEnabledDescendantFiles(dbSession, \"FGHI\");","402","    assertThat(underTest.selectEnabledDescendantFiles(dbSession, \"GHIJ\")).isEmpty();","404","    assertThat(underTest.selectEnabledDescendantFiles(dbSession, \"unknown\")).isEmpty();","412","    List<FilePathWithHashDto> files = underTest.selectEnabledFilesFromProject(dbSession, \"ABCD\");","419","    assertThat(underTest.selectEnabledFilesFromProject(dbSession, \"EFGH\")).isEmpty();","422","    assertThat(underTest.selectEnabledFilesFromProject(dbSession, \"FGHI\")).isEmpty();","425","    assertThat(underTest.selectEnabledFilesFromProject(dbSession, \"GHIJ\")).isEmpty();","427","    assertThat(underTest.selectEnabledFilesFromProject(dbSession, \"unknown\")).isEmpty();","434","    List<ComponentDto> components = underTest.selectAllComponentsFromProjectKey(dbSession, \"org.struts:struts\");","438","    assertThat(underTest.selectAllComponentsFromProjectKey(dbSession, \"UNKNOWN\")).isEmpty();","445","    List<ComponentDto> components = underTest.selectEnabledModulesFromProjectKey(dbSession, \"org.struts:struts\");","448","    assertThat(underTest.selectEnabledModulesFromProjectKey(dbSession, \"UNKNOWN\")).isEmpty();","455","    assertThat(underTest.selectAllViewsAndSubViews(dbSession)).extracting(\"uuid\").containsOnly(\"ABCD\", \"EFGH\", \"FGHI\", \"IJKL\");","456","    assertThat(underTest.selectAllViewsAndSubViews(dbSession)).extracting(\"projectUuid\").containsOnly(\"ABCD\", \"EFGH\", \"IJKL\");","463","    assertThat(underTest.selectProjectsFromView(dbSession, \"ABCD\", \"ABCD\")).containsOnly(\"JKLM\");","464","    assertThat(underTest.selectProjectsFromView(dbSession, \"EFGH\", \"EFGH\")).containsOnly(\"KLMN\", \"JKLM\");","465","    assertThat(underTest.selectProjectsFromView(dbSession, \"FGHI\", \"EFGH\")).containsOnly(\"JKLM\");","466","    assertThat(underTest.selectProjectsFromView(dbSession, \"IJKL\", \"IJKL\")).isEmpty();","467","    assertThat(underTest.selectProjectsFromView(dbSession, \"Unknown\", \"Unknown\")).isEmpty();","474","    List<ComponentDto> result = underTest.selectProjects(dbSession);","483","    List<ComponentDto> result = underTest.selectProvisionedProjects(dbSession, 0, 10, null);","494","    int numberOfProjects = underTest.countProvisionedProjects(dbSession, null);","503","    List<ComponentDto> result = underTest.selectGhostProjects(dbSession, 0, 10, null);","507","    assertThat(underTest.countGhostProjects(dbSession, null)).isEqualTo(1);","514","    List<ComponentDto> resources = underTest.selectByProjectUuid(\"ABCD\", dbSession);","544","    underTest.insert(dbSession, componentDto);","545","    dbSession.commit();","573","    underTest.insert(dbSession, componentDto);","574","    dbSession.commit();","603","    underTest.update(dbSession, componentDto);","604","    dbSession.commit();","610","  public void delete() throws Exception {","611","    ComponentDto project1= insertProject(newProjectDto().setKey(\"PROJECT_1\"));","612","    insertProject(newProjectDto().setKey(\"PROJECT_2\"));","613","","614","    underTest.delete(dbSession, project1.getId());","615","    dbSession.commit();","616","","617","    assertThat(underTest.selectByKey(dbSession, \"PROJECT_1\")).isAbsent();","618","    assertThat(underTest.selectByKey(dbSession, \"PROJECT_2\")).isPresent();","619","  }","620","","621","  @Test","623","    DbSession session = dbSession;","636","","637","  private ComponentDto insertProject(ComponentDto project) {","638","    underTest.insert(dbSession, project);","639","    dbSession.commit();","640","    return project;","641","  }"],"delete":["59","","60","    ComponentDto result = underTest.selectByUuid(db.getSession(), \"KLMN\").get();","76","    assertThat(underTest.selectByUuid(db.getSession(), \"UNKNOWN\")).isAbsent();","83","    ComponentDto result = underTest.selectByUuid(db.getSession(), \"STUV\").get();","104","    ComponentDto result = underTest.selectByUuid(db.getSession(), \"DCBA\").get();","115","    underTest.selectOrFailByUuid(db.getSession(), \"unknown\");","122","    Optional<ComponentDto> optional = underTest.selectByKey(db.getSession(), \"org.struts:struts-core:src\/org\/struts\/RequestContext.java\");","135","    assertThat(underTest.selectByKey(db.getSession(), \"unknown\")).isAbsent();","144","    underTest.selectOrFailByKey(db.getSession(), \"unknown\");","151","    ComponentDto result = underTest.selectOrFailByKey(db.getSession(), \"org.disabled.project\");","159","    ComponentDto result = underTest.selectOrFailByKey(db.getSession(), \"org.struts:struts\");","177","    List<ComponentDto> results = underTest.selectByKeys(db.getSession(), Collections.singletonList(\"org.struts:struts-core:src\/org\/struts\/RequestContext.java\"));","191","    assertThat(underTest.selectByKeys(db.getSession(), Collections.singletonList(\"unknown\"))).isEmpty();","198","    List<ComponentDto> results = underTest.selectByIds(db.getSession(), newArrayList(4L));","212","    assertThat(underTest.selectByIds(db.getSession(), newArrayList(555L))).isEmpty();","219","    List<ComponentDto> results = underTest.selectByUuids(db.getSession(), newArrayList(\"KLMN\"));","237","    assertThat(underTest.selectByUuids(db.getSession(), newArrayList(\"unknown\"))).isEmpty();","244","    List<ComponentDto> results = underTest.selectByUuids(db.getSession(), newArrayList(\"DCBA\"));","256","    List<String> results = underTest.selectExistingUuids(db.getSession(), newArrayList(\"KLMN\"));","259","    assertThat(underTest.selectExistingUuids(db.getSession(), newArrayList(\"KLMN\", \"unknown\"))).hasSize(1);","260","    assertThat(underTest.selectExistingUuids(db.getSession(), newArrayList(\"unknown\"))).isEmpty();","267","    assertThat(underTest.selectOrFailById(db.getSession(), 4L)).isNotNull();","274","    Optional<ComponentDto> result = underTest.selectById(db.getSession(), 10L);","283","    underTest.selectOrFailById(db.getSession(), 111L);","290","    assertThat(underTest.selectById(db.getSession(), 4L)).isPresent();","291","    assertThat(underTest.selectById(db.getSession(), 111L)).isAbsent();","298","    assertThat(underTest.existsById(4L, db.getSession())).isTrue();","299","    assertThat(underTest.existsById(111L, db.getSession())).isFalse();","307","    List<ComponentDto> results = underTest.selectSubProjectsByComponentUuids(db.getSession(), newArrayList(\"HIJK\"));","312","    results = underTest.selectSubProjectsByComponentUuids(db.getSession(), newArrayList(\"GHIJ\"));","317","    results = underTest.selectSubProjectsByComponentUuids(db.getSession(), newArrayList(\"FGHI\"));","322","    results = underTest.selectSubProjectsByComponentUuids(db.getSession(), newArrayList(\"EFGH\"));","327","    assertThat(underTest.selectSubProjectsByComponentUuids(db.getSession(), newArrayList(\"ABCD\"))).isEmpty();","330","    assertThat(underTest.selectSubProjectsByComponentUuids(db.getSession(), newArrayList(\"HIJK\", \"FGHI\"))).hasSize(2);","332","    assertThat(underTest.selectSubProjectsByComponentUuids(db.getSession(), newArrayList(\"unknown\"))).isEmpty();","334","    assertThat(underTest.selectSubProjectsByComponentUuids(db.getSession(), Collections.<String>emptyList())).isEmpty();","342","    List<ComponentDto> modules = underTest.selectEnabledDescendantModules(db.getSession(), \"ABCD\");","346","    modules = underTest.selectEnabledDescendantModules(db.getSession(), \"EFGH\");","350","    modules = underTest.selectEnabledDescendantModules(db.getSession(), \"FGHI\");","354","    assertThat(underTest.selectEnabledDescendantModules(db.getSession(), \"GHIJ\")).isEmpty();","355","    assertThat(underTest.selectEnabledDescendantModules(db.getSession(), \"unknown\")).isEmpty();","363","    List<ComponentDto> modules = underTest.selectDescendantModules(db.getSession(), \"ABCD\");","367","    modules = underTest.selectDescendantModules(db.getSession(), \"EFGH\");","371","    assertThat(underTest.selectDescendantModules(db.getSession(), \"IHGF\")).isEmpty();","379","    List<FilePathWithHashDto> files = underTest.selectEnabledDescendantFiles(db.getSession(), \"ABCD\");","386","    files = underTest.selectEnabledDescendantFiles(db.getSession(), \"EFGH\");","393","    files = underTest.selectEnabledDescendantFiles(db.getSession(), \"FGHI\");","400","    assertThat(underTest.selectEnabledDescendantFiles(db.getSession(), \"GHIJ\")).isEmpty();","402","    assertThat(underTest.selectEnabledDescendantFiles(db.getSession(), \"unknown\")).isEmpty();","410","    List<FilePathWithHashDto> files = underTest.selectEnabledFilesFromProject(db.getSession(), \"ABCD\");","417","    assertThat(underTest.selectEnabledFilesFromProject(db.getSession(), \"EFGH\")).isEmpty();","420","    assertThat(underTest.selectEnabledFilesFromProject(db.getSession(), \"FGHI\")).isEmpty();","423","    assertThat(underTest.selectEnabledFilesFromProject(db.getSession(), \"GHIJ\")).isEmpty();","425","    assertThat(underTest.selectEnabledFilesFromProject(db.getSession(), \"unknown\")).isEmpty();","432","    List<ComponentDto> components = underTest.selectAllComponentsFromProjectKey(db.getSession(), \"org.struts:struts\");","436","    assertThat(underTest.selectAllComponentsFromProjectKey(db.getSession(), \"UNKNOWN\")).isEmpty();","443","    List<ComponentDto> components = underTest.selectEnabledModulesFromProjectKey(db.getSession(), \"org.struts:struts\");","446","    assertThat(underTest.selectEnabledModulesFromProjectKey(db.getSession(), \"UNKNOWN\")).isEmpty();","453","    assertThat(underTest.selectAllViewsAndSubViews(db.getSession())).extracting(\"uuid\").containsOnly(\"ABCD\", \"EFGH\", \"FGHI\", \"IJKL\");","454","    assertThat(underTest.selectAllViewsAndSubViews(db.getSession())).extracting(\"projectUuid\").containsOnly(\"ABCD\", \"EFGH\", \"IJKL\");","461","    assertThat(underTest.selectProjectsFromView(db.getSession(), \"ABCD\", \"ABCD\")).containsOnly(\"JKLM\");","462","    assertThat(underTest.selectProjectsFromView(db.getSession(), \"EFGH\", \"EFGH\")).containsOnly(\"KLMN\", \"JKLM\");","463","    assertThat(underTest.selectProjectsFromView(db.getSession(), \"FGHI\", \"EFGH\")).containsOnly(\"JKLM\");","464","    assertThat(underTest.selectProjectsFromView(db.getSession(), \"IJKL\", \"IJKL\")).isEmpty();","465","    assertThat(underTest.selectProjectsFromView(db.getSession(), \"Unknown\", \"Unknown\")).isEmpty();","472","    List<ComponentDto> result = underTest.selectProjects(db.getSession());","481","    List<ComponentDto> result = underTest.selectProvisionedProjects(db.getSession(), 0, 10, null);","492","    int numberOfProjects = underTest.countProvisionedProjects(db.getSession(), null);","501","    List<ComponentDto> result = underTest.selectGhostProjects(db.getSession(), 0, 10, null);","505","    assertThat(underTest.countGhostProjects(db.getSession(), null)).isEqualTo(1);","512","    List<ComponentDto> resources = underTest.selectByProjectUuid(\"ABCD\", db.getSession());","542","    underTest.insert(db.getSession(), componentDto);","543","    db.getSession().commit();","571","    underTest.insert(db.getSession(), componentDto);","572","    db.getSession().commit();","601","    underTest.update(db.getSession(), componentDto);","602","    db.getSession().commit();","609","    DbSession session = db.getSession();"]}],"sonar-db\/src\/main\/java\/org\/sonar\/db\/component\/ComponentDao.java":[{"add":["137","  public List<ComponentDto> selectComponentsHavingSameKeyOrderedById(DbSession session, String key) {","138","    return mapper(session).selectComponentsHavingSameKeyOrderedById(key);","139","  }","140","","277","  public void delete(DbSession session, long componentId) {","278","    mapper(session).delete(componentId);","279","  }","280",""],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/component\/ComponentService.java":[{"add":["148","    ComponentDto project = createProject(newComponent);","149","    removeDuplicatedProjects(project.getKey());","150","    return project;","151","  }","153","  private ComponentDto createProject(NewComponent newComponent) {","187","  \/**","188","   * On MySQL, as PROJECTS.KEE is not unique, if the same project is provisioned multiple times, then it will be duplicated in the database.","189","   * So, after creating a project, we commit, and we search in the db if their are some duplications and we remove them.","190","   *","191","   * SONAR-6332","192","   *\/","193","  private void removeDuplicatedProjects(String projectKey) {","194","    DbSession session = dbClient.openSession(false);","195","    try {","196","      List<ComponentDto> duplicated = dbClient.componentDao().selectComponentsHavingSameKeyOrderedById(session, projectKey);","197","      for (int i = 1; i < duplicated.size(); i++) {","198","        dbClient.componentDao().delete(session, duplicated.get(i).getId());","199","      }","200","      session.commit();","201","    } finally {","202","      dbClient.closeSession(session);","203","    }","204","  }","205","","211","      dbClient.closeSession(session);"],"delete":["176","","188","      session.close();"]}],"sonar-db\/src\/test\/resources\/org\/sonar\/db\/component\/ComponentDaoWithDuplicatedKeysTest\/schema.sql":[{"add":[],"delete":[]}],"sonar-db\/src\/test\/java\/org\/sonar\/db\/component\/ComponentDaoWithDuplicatedKeysTest.java":[{"add":[],"delete":[]}],"sonar-db\/src\/test\/resources\/org\/sonar\/db\/component\/ComponentDaoTest\/delete-result.xml":[{"add":["3","  <projects id=\"2\" root_id=\"1\" kee=\"org.struts:struts-core\" name=\"Struts Core\"","6","            description=\"[null]\" enabled=\"[true]\" language=\"[null]\" copy_resource_id=\"[null]\" person_id=\"[null]\" authorization_updated_at=\"[null]\"\/>","9","  <projects long_name=\"org.struts\" id=\"3\" scope=\"DIR\" qualifier=\"DIR\" kee=\"org.struts:struts-core:src\/org\/struts\"","13","            enabled=\"[true]\" language=\"[null]\" copy_resource_id=\"[null]\" person_id=\"[null]\" path=\"src\/org\/struts\" authorization_updated_at=\"[null]\"\/>","16","  <projects long_name=\"org.struts.RequestContext\" id=\"4\" scope=\"FIL\" qualifier=\"FIL\" kee=\"org.struts:struts-core:src\/org\/struts\/RequestContext.java\"","17","            uuid=\"KLMN\" project_uuid=\"ABCD\" module_uuid=\"EFGH\" module_uuid_path=\".ABCD.EFGH.\"","18","            name=\"RequestContext.java\" root_id=\"2\"","19","            description=\"[null]\"","20","            enabled=\"[true]\" language=\"java\" copy_resource_id=\"[null]\" person_id=\"[null]\" path=\"src\/org\/struts\/RequestContext.java\" authorization_updated_at=\"[null]\"\/>"],"delete":["2","  <!-- Struts projects is authorized for all user -->","3","  <group_roles id=\"1\" group_id=\"[null]\" resource_id=\"1\" role=\"user\"\/>","4","","5","","6","  <!-- root project -->","7","  <projects id=\"1\" root_id=\"[null]\" scope=\"PRJ\" qualifier=\"TRK\" kee=\"org.struts:struts\" name=\"Struts\" deprecated_kee=\"org.struts:struts\"","8","            uuid=\"ABCD\" project_uuid=\"ABCD\" module_uuid=\"[null]\" module_uuid_path=\".ABCD.\"","9","            description=\"the description\" long_name=\"Apache Struts\"","10","            enabled=\"[true]\" language=\"[null]\" copy_resource_id=\"[null]\" person_id=\"[null]\" path=\"[null]\" created_at=\"[null]\" authorization_updated_at=\"123456789\"\/>","11","  <snapshots id=\"1\" project_id=\"1\" parent_snapshot_id=\"[null]\" root_project_id=\"1\" root_snapshot_id=\"[null]\"","12","             status=\"P\" islast=\"[true]\" purge_status=\"[null]\"","13","             period1_mode=\"[null]\" period1_param=\"[null]\" period1_date=\"[null]\"","14","             period2_mode=\"[null]\" period2_param=\"[null]\" period2_date=\"[null]\"","15","             period3_mode=\"[null]\" period3_param=\"[null]\" period3_date=\"[null]\"","16","             period4_mode=\"[null]\" period4_param=\"[null]\" period4_date=\"[null]\"","17","             period5_mode=\"[null]\" period5_param=\"[null]\" period5_date=\"[null]\"","18","             depth=\"[null]\" scope=\"PRJ\" qualifier=\"TRK\" created_at=\"1228222680000\" build_date=\"1228222680000\"","19","             version=\"[null]\" path=\"\"\/>","20","  <snapshots id=\"10\" project_id=\"1\" parent_snapshot_id=\"[null]\" root_project_id=\"1\" root_snapshot_id=\"[null]\"","21","             status=\"P\" islast=\"[false]\" purge_status=\"[null]\"","22","             period1_mode=\"[null]\" period1_param=\"[null]\" period1_date=\"[null]\"","23","             period2_mode=\"[null]\" period2_param=\"[null]\" period2_date=\"[null]\"","24","             period3_mode=\"[null]\" period3_param=\"[null]\" period3_date=\"[null]\"","25","             period4_mode=\"[null]\" period4_param=\"[null]\" period4_date=\"[null]\"","26","             period5_mode=\"[null]\" period5_param=\"[null]\" period5_date=\"[null]\"","27","             depth=\"[null]\" scope=\"PRJ\" qualifier=\"TRK\" created_at=\"1228136280000\" build_date=\"1228136280000\"","28","             version=\"[null]\" path=\"\"\/>","29","","31","  <projects id=\"2\" root_id=\"1\" kee=\"org.struts:struts-core\" name=\"Struts Core\" deprecated_kee=\"[null]\"","34","            description=\"[null]\" enabled=\"[true]\" language=\"[null]\" copy_resource_id=\"[null]\" person_id=\"[null]\" created_at=\"[null]\" authorization_updated_at=\"[null]\"\/>","35","  <snapshots id=\"2\" project_id=\"2\" parent_snapshot_id=\"1\" root_project_id=\"1\" root_snapshot_id=\"1\"","36","             status=\"P\" islast=\"[true]\" purge_status=\"[null]\"","37","             period1_mode=\"[null]\" period1_param=\"[null]\" period1_date=\"[null]\"","38","             period2_mode=\"[null]\" period2_param=\"[null]\" period2_date=\"[null]\"","39","             period3_mode=\"[null]\" period3_param=\"[null]\" period3_date=\"[null]\"","40","             period4_mode=\"[null]\" period4_param=\"[null]\" period4_date=\"[null]\"","41","             period5_mode=\"[null]\" period5_param=\"[null]\" period5_date=\"[null]\"","42","             depth=\"[null]\" scope=\"PRJ\" qualifier=\"BRC\" created_at=\"1228222680000\" build_date=\"1228222680000\"","43","             version=\"[null]\" path=\"1.\"\/>","46","  <projects long_name=\"org.struts\" id=\"3\" scope=\"DIR\" qualifier=\"DIR\" kee=\"org.struts:struts-core:src\/org\/struts\" deprecated_kee=\"[null]\"","50","            enabled=\"[true]\" language=\"[null]\" copy_resource_id=\"[null]\" person_id=\"[null]\" path=\"src\/org\/struts\" created_at=\"[null]\" authorization_updated_at=\"[null]\"\/>","51","  <snapshots id=\"3\" project_id=\"3\" parent_snapshot_id=\"2\" root_project_id=\"1\" root_snapshot_id=\"1\"","52","             status=\"P\" islast=\"[true]\" purge_status=\"[null]\"","53","             period1_mode=\"[null]\" period1_param=\"[null]\" period1_date=\"[null]\"","54","             period2_mode=\"[null]\" period2_param=\"[null]\" period2_date=\"[null]\"","55","             period3_mode=\"[null]\" period3_param=\"[null]\" period3_date=\"[null]\"","56","             period4_mode=\"[null]\" period4_param=\"[null]\" period4_date=\"[null]\"","57","             period5_mode=\"[null]\" period5_param=\"[null]\" period5_date=\"[null]\"","58","             depth=\"[null]\" scope=\"DIR\" qualifier=\"PAC\" created_at=\"1228222680000\" build_date=\"1228222680000\"","59","             version=\"[null]\" path=\"1.2.\"\/>","62","  <!--<projects long_name=\"org.struts.RequestContext\" id=\"4\" scope=\"FIL\" qualifier=\"FIL\" kee=\"org.struts:struts-core:src\/org\/struts\/RequestContext.java\"-->","63","  <!--uuid=\"KLMN\" project_uuid=\"ABCD\" module_uuid=\"EFGH\" module_uuid_path=\".ABCD.EFGH.\"-->","64","  <!--name=\"RequestContext.java\" root_id=\"2\"-->","65","  <!--description=\"[null]\"-->","66","  <!--enabled=\"[true]\" language=\"java\" copy_resource_id=\"[null]\" person_id=\"[null]\" path=\"src\/org\/struts\/RequestContext.java\" authorization_updated_at=\"[null]\" \/>-->","67","","68","  <snapshots id=\"4\" project_id=\"4\" parent_snapshot_id=\"3\" root_project_id=\"1\" root_snapshot_id=\"1\"","69","             status=\"P\" islast=\"[true]\" purge_status=\"[null]\"","70","             period1_mode=\"[null]\" period1_param=\"[null]\" period1_date=\"[null]\"","71","             period2_mode=\"[null]\" period2_param=\"[null]\" period2_date=\"[null]\"","72","             period3_mode=\"[null]\" period3_param=\"[null]\" period3_date=\"[null]\"","73","             period4_mode=\"[null]\" period4_param=\"[null]\" period4_date=\"[null]\"","74","             period5_mode=\"[null]\" period5_param=\"[null]\" period5_date=\"[null]\"","75","             depth=\"[null]\" scope=\"FIL\" qualifier=\"CLA\" created_at=\"1228222680000\" build_date=\"1228222680000\"","76","             version=\"[null]\" path=\"1.2.3.\"\/>","77","","78","  <projects id=\"10\" root_id=\"[null]\" scope=\"PRJ\" qualifier=\"TRK\" kee=\"org.disabled.project\" name=\"Disabled Project\"","79","            uuid=\"DCBA\" project_uuid=\"DCBA\" module_uuid=\"[null]\" module_uuid_path=\".\"","80","            description=\"the description\" long_name=\"Disabled project\"","81","            enabled=\"[false]\" language=\"[null]\" copy_resource_id=\"[null]\" person_id=\"[null]\" path=\"[null]\" authorization_updated_at=\"123456789\"\/>","82","","83","  <!-- Developer and technical project copy -->","84","  <projects id=\"11\" root_id=\"[null]\" scope=\"PRJ\" qualifier=\"DEV\" kee=\"DEV:anakin@skywalker.name\" name=\"Anakin Skywalker\"","85","            uuid=\"OPQR\" project_uuid=\"OPQR\" module_uuid=\"[null]\" module_uuid_path=\".OPQR.\"","86","            description=\"the description\" long_name=\"Anakin Skywalker\"","87","            enabled=\"[true]\" language=\"[null]\" copy_resource_id=\"[null]\" person_id=\"[null]\" path=\"[null]\" authorization_updated_at=\"123456789\"\/>","88","  <projects id=\"12\" root_id=\"11\" scope=\"PRJ\" qualifier=\"DEV_PRJ\" kee=\"DEV:anakin@skywalker.name:org.struts:struts\" name=\"Apache Struts\"","89","            uuid=\"STUV\" project_uuid=\"OPQR\" module_uuid=\"OPQR\" module_uuid_path=\".OPQR.\"","90","            description=\"the description\" long_name=\"Apache Struts\"","91","            enabled=\"[true]\" language=\"[null]\" copy_resource_id=\"1\" person_id=\"11\" path=\"[null]\" authorization_updated_at=\"123456789\"\/>"]}],"sonar-db\/src\/test\/resources\/org\/sonar\/db\/component\/ComponentDaoTest\/delete.xml":[{"add":[],"delete":[]}],"sonar-db\/src\/main\/java\/org\/sonar\/db\/component\/ComponentMapper.java":[{"add":["120","  List<ComponentDto> selectComponentsHavingSameKeyOrderedById(String key);","121","","128","  void delete(long componentId);","129",""],"delete":[]}],"sonar-db\/src\/main\/resources\/org\/sonar\/db\/component\/ComponentMapper.xml":[{"add":["54","  <select id=\"selectComponentsHavingSameKeyOrderedById\" parameterType=\"String\" resultType=\"Component\">","55","    SELECT id","56","    FROM projects p","57","    <where>","58","      AND p.kee=#{key}","59","    <\/where>","60","    ORDER BY p.id ASC","61","  <\/select>","62","","373","  <update id=\"update\" parameterType=\"Component\" useGeneratedKeys=\"false\">","392","  <\/update>","393","","394","  <delete id=\"delete\" parameterType=\"long\">","395","    DELETE FROM projects WHERE id=#{id}","396","  <\/delete>"],"delete":["364","  <insert id=\"update\" parameterType=\"Component\" useGeneratedKeys=\"false\">","383","  <\/insert>"]}]}},"de048e14399224bab6e00bf70c68679987462b27":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/meta\/Meta.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/OverviewApp.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/meta\/Meta.tsx":[{"add":["56","    const isApp = qualifier === 'APP';","107","        {!isPrivate &&","108","          (isProject || isApp) && (","109","            <BadgesModal","110","              branchLike={branchLike}","111","              metrics={metrics}","112","              onSonarCloud={onSonarCloud}","113","              project={component.key}","114","              qualifier={component.qualifier}","115","            \/>","116","          )}"],"delete":["106","        {!isPrivate && (","107","          <BadgesModal","108","            branchLike={branchLike}","109","            metrics={metrics}","110","            onSonarCloud={onSonarCloud}","111","            project={component.key}","112","            qualifier={component.qualifier}","113","          \/>","114","        )}"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/components\/OverviewApp.tsx":[{"add":["178","    const isApp = component.qualifier === 'APP';","184","            ? translate(isApp ? 'portfolio.app.empty' : 'overview.project.empty')","186","                isApp ? 'portfolio.app.no_lines_of_code' : 'overview.project.no_lines_of_code'"],"delete":["178","    const isProject = component.qualifier === 'TRK';","184","            ? translate(isProject ? 'overview.project.empty' : 'portfolio.app.empty')","186","                isProject ? 'overview.project.no_lines_of_code' : 'portfolio.app.no_lines_of_code'"]}]}},"4f0bd4cb6dcd98f45f140c45cf376686898d4dc3":{"changes":{"sonar-core\/src\/main\/java\/org\/sonar\/core\/issue\/tracking\/Tracking.java":"MODIFY"},"diff":{"sonar-core\/src\/main\/java\/org\/sonar\/core\/issue\/tracking\/Tracking.java":[{"add":["93","      .add(\"rawToBase\", rawToBase.size())","94","      .add(\"baseToRaw\", baseToRaw.size())","95","      .add(\"raws\", raws.size())","96","      .add(\"bases\", bases.size())"],"delete":["93","      .add(\"rawToBase\", rawToBase)","94","      .add(\"baseToRaw\", baseToRaw)","95","      .add(\"raws\", raws)","96","      .add(\"bases\", bases)"]}]}},"34caa99d1d08fc909c24d18d7cc1862021b7e28f":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/FileFacet.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/api\/components.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/DirectoryFacet.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/FileFacet-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/types\/component.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/Sidebar.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/App.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/DirectoryFacet-test.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/FileFacet.tsx":[{"add":["26","import { getFiles } from '..\/..\/..\/api\/components';","28","import { getBranchLikeQuery } from '..\/..\/..\/helpers\/branch-like';","29","import { BranchLike } from '..\/..\/..\/types\/branch-like';","30","import { TreeComponentWithPath } from '..\/..\/..\/types\/component';","34","  branchLike?: BranchLike;","78","    const { branchLike } = this.props;","79","","82","      ...getBranchLikeQuery(branchLike),"],"delete":["26","import { getFiles, TreeComponentWithPath } from '..\/..\/..\/api\/components';"]}],"server\/sonar-web\/src\/main\/js\/api\/components.ts":[{"add":["22","import { ComponentQualifier, TreeComponent, TreeComponentWithPath } from '..\/types\/component';"],"delete":["22","import { ComponentQualifier } from '..\/types\/component';","134","export interface TreeComponent extends T.LightComponent {","135","  id?: string;","136","  name: string;","137","  path?: string;","138","  refId?: string;","139","  refKey?: string;","140","  tags?: string[];","141","  visibility: T.Visibility;","142","}","143","","144","export interface TreeComponentWithPath extends TreeComponent {","145","  path: string;","146","}","147",""]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/DirectoryFacet.tsx":[{"add":["25","import { getDirectories } from '..\/..\/..\/api\/components';","27","import { getBranchLikeQuery } from '..\/..\/..\/helpers\/branch-like';","28","import { BranchLike } from '..\/..\/..\/types\/branch-like';","29","import { TreeComponentWithPath } from '..\/..\/..\/types\/component';","33","  branchLike?: BranchLike;","59","    const { branchLike } = this.props;","60","","63","      ...getBranchLikeQuery(branchLike),"],"delete":["25","import { getDirectories, TreeComponentWithPath } from '..\/..\/..\/api\/components';"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/FileFacet-test.tsx":[{"add":["21","import { getFiles } from '..\/..\/..\/..\/api\/components';","22","import ListStyleFacet from '..\/..\/..\/..\/components\/facet\/ListStyleFacet';","23","import { mockBranch } from '..\/..\/..\/..\/helpers\/mocks\/branch-like';","24","import { mockComponent } from '..\/..\/..\/..\/helpers\/testMocks';","25","import { TreeComponentWithPath } from '..\/..\/..\/..\/types\/component';","29","jest.mock('..\/..\/..\/..\/api\/components', () => ({","30","  getFiles: jest.fn().mockResolvedValue({})","31","}));","32","","33","beforeEach(() => jest.clearAllMocks());","34","","35","const branch = mockBranch();","36","const component = mockComponent();","37","","48","it('should properly search for file', () => {","49","  const wrapper = shallowRender();","50","","51","  const query = 'foo';","52","","53","  wrapper","54","    .find(ListStyleFacet)","55","    .props()","56","    .onSearch(query);","57","","58","  expect(getFiles).toHaveBeenCalledWith({","59","    branch: branch.name,","60","    component: component.key,","61","    q: query,","62","    ps: 30,","63","    p: undefined","64","  });","65","});","66","","91","      branchLike={branch}","92","      componentKey={component.key}"],"delete":["21","import { TreeComponentWithPath } from '..\/..\/..\/..\/api\/components';","59","      componentKey=\"foo\""]}],"server\/sonar-web\/src\/main\/js\/types\/component.ts":[{"add":["44","export interface TreeComponent extends T.LightComponent {","45","  id?: string;","46","  name: string;","47","  path?: string;","48","  refId?: string;","49","  refKey?: string;","50","  tags?: string[];","51","  visibility: T.Visibility;","52","}","53","","54","export interface TreeComponentWithPath extends TreeComponent {","55","  path: string;","56","}","57",""],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/Sidebar.tsx":[{"add":["22","import { BranchLike } from '..\/..\/..\/types\/branch-like';","23","import { ComponentQualifier } from '..\/..\/..\/types\/component';","41","  branchLike?: BranchLike;","63","    const { component, facets, loadingFacets, openFacets, query, branchLike } = this.props;","76","        {component.qualifier !== ComponentQualifier.Directory && (","78","            branchLike={branchLike}","87","          branchLike={branchLike}"],"delete":["60","    const { component, facets, loadingFacets, openFacets, query } = this.props;","73","        {component.qualifier !== 'DIR' && ("]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/App.tsx":[{"add":["930","    const { component, currentUser, userOrganizations, branchLike } = this.props;","955","          branchLike={branchLike}"],"delete":["930","    const { component, currentUser, userOrganizations } = this.props;"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/DirectoryFacet-test.tsx":[{"add":["21","import { getDirectories } from '..\/..\/..\/..\/api\/components';","22","import ListStyleFacet from '..\/..\/..\/..\/components\/facet\/ListStyleFacet';","23","import { mockBranch } from '..\/..\/..\/..\/helpers\/mocks\/branch-like';","24","import { mockComponent } from '..\/..\/..\/..\/helpers\/testMocks';","25","import { TreeComponentWithPath } from '..\/..\/..\/..\/types\/component';","29","jest.mock('..\/..\/..\/..\/api\/components', () => ({","30","  getDirectories: jest.fn().mockResolvedValue({})","31","}));","32","","33","beforeEach(() => jest.clearAllMocks());","34","","35","const branch = mockBranch();","36","const component = mockComponent();","37","","48","it('should properly search for directory', () => {","49","  const wrapper = shallowRender();","50","","51","  const query = 'foo';","52","","53","  wrapper","54","    .find(ListStyleFacet)","55","    .props()","56","    .onSearch(query);","57","","58","  expect(getDirectories).toHaveBeenCalledWith({","59","    branch: branch.name,","60","    component: component.key,","61","    q: query,","62","    ps: 30,","63","    p: undefined","64","  });","65","});","66","","89","      branchLike={branch}","90","      componentKey={component.key}"],"delete":["21","import { TreeComponentWithPath } from '..\/..\/..\/..\/api\/components';","57","      componentKey=\"foo\""]}]}},"b9d1c53b683a6274091b14897d57888e99a4876a":{"changes":{"server\/sonar-docs\/src\/components\/PluginMetaData.tsx":"MODIFY","server\/sonar-docs\/gatsby-config.js":"MODIFY","server\/sonar-docs\/package.json":"MODIFY","server\/sonar-docs\/yarn.lock":"MODIFY"},"diff":{"server\/sonar-docs\/src\/components\/PluginMetaData.tsx":[{"add":["84","      \/\/ The following uses an older syntax for createNodeIterator() in order","85","      \/\/ to support IE11","86","      \/\/ - IE doesn't support the new { acceptNode: (node: Node) => number }","87","      \/\/   format for the 3rd parameter, and instead expects to get it passed","88","      \/\/   the function directly. Modern browsers support both paradigms as a","89","      \/\/   fallback, so we fallback to the old one.","90","      \/\/ - IE11 requires the 4th argument.","91","      \/\/ @ts-ignore: tsc requires an additional comment at the function call.","92","      const iterator = document.createNodeIterator(","93","        pageContainer,","94","        NodeFilter.SHOW_COMMENT,","95","        \/\/ @ts-ignore: IE11 doesn't support the { acceptNode: () => number } format.","96","        (_: Node) => NodeFilter.FILTER_ACCEPT,","97","        \/\/ @ts-ignore: IE11 requires the 4th argument.","98","        false","99","      );"],"delete":["84","      const iterator = document.createNodeIterator(pageContainer, NodeFilter.SHOW_COMMENT, {","85","        acceptNode: (_: Node) => NodeFilter.FILTER_ACCEPT","86","      });"]}],"server\/sonar-docs\/gatsby-config.js":[{"add":["31","      resolve: `gatsby-plugin-polyfill-io`,","32","      options: {","33","        features: [`Promise`, `fetch`, `Object.assign`, `Symbol`, `Array.from`]","34","      }","35","    },","36","    {"],"delete":[]}],"server\/sonar-docs\/package.json":[{"add":["10","    \"gatsby-plugin-polyfill-io\": \"1.1.0\","],"delete":[]}],"server\/sonar-docs\/yarn.lock":[{"add":["5053","gatsby-plugin-polyfill-io@^1.1.0:","5054","  version \"1.1.0\"","5055","  resolved \"https:\/\/repox.jfrog.io\/repox\/api\/npm\/npm\/gatsby-plugin-polyfill-io\/-\/gatsby-plugin-polyfill-io-1.1.0.tgz#61424c773ae123680e50b9a6692a4b939a1e6e13\"","5056","  integrity sha1-YUJMdzrhI2gOULmmaSpLk5oebhM=","5057","  dependencies:","5058","    babel-runtime \"^6.26.0\"","5059",""],"delete":[]}]}},"1e1af62df661c8c43786bae8de2bf74f2d00d33d":{"changes":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY"},"diff":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["2577","component_navigation.status.failed=The last background task has failed.","2578","component_navigation.status.failed_X=The {type} has failed.","2579","component_navigation.status.failed.admin=The last background task has failed. More details available on the {url} page.","2580","component_navigation.status.failed_X.admin=The {type} has failed. More details available on the {url} page.","2582","component_navigation.status.failed_branch_X=The last {type} on this project ({branch}) failed.","2584","component_navigation.status.failed_branch_X.admin=The last {type} on this project ({branch}) failed. More details available on the {url} page."],"delete":["2577","component_navigation.status.failed=The last analysis has failed.","2578","component_navigation.status.failed.admin=The last analysis has failed. More details available on the {url} page."]}]}},"983beea417c9ffb0561857d0b7e69a97dfadc91d":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/db\/EmbeddedDatabase.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/db\/EmbeddedDatabaseTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/db\/EmbeddedDatabase.java":[{"add":["21","import java.io.File;","22","import java.sql.DriverManager;","23","import java.sql.SQLException;","33","import static com.google.common.base.Preconditions.checkArgument;","34","import static java.lang.String.format;","35","import static org.apache.commons.lang.StringUtils.isNotEmpty;","36","import static org.sonar.api.database.DatabaseProperties.PROP_EMBEDDED_PORT;","37","import static org.sonar.api.database.DatabaseProperties.PROP_PASSWORD;","38","import static org.sonar.api.database.DatabaseProperties.PROP_PASSWORD_DEFAULT_VALUE;","39","import static org.sonar.api.database.DatabaseProperties.PROP_URL;","40","import static org.sonar.api.database.DatabaseProperties.PROP_USER;","41","import static org.sonar.api.database.DatabaseProperties.PROP_USER_DEFAULT_VALUE;","42","import static org.sonar.process.ProcessProperties.PATH_DATA;","55","    File dbHome = new File(getRequiredSetting(PATH_DATA));","60","    startServer(dbHome);","61","  }","63","  private void startServer(File dbHome) {","64","    String url = getRequiredSetting(PROP_URL);","65","    String port = getRequiredSetting(PROP_EMBEDDED_PORT);","66","    String user = getSetting(PROP_USER, PROP_USER_DEFAULT_VALUE);","67","    String password = getSetting(PROP_PASSWORD, PROP_PASSWORD_DEFAULT_VALUE);","94","  private String getRequiredSetting(String property) {","95","    String value = settings.getString(property);","96","    checkArgument(isNotEmpty(value), \"Missing property %s\", property);","97","    return value;","104","  private static void createDatabase(File dbHome, String user, String password) throws SQLException {","105","    String url = format(\"jdbc:h2:%s\/sonar;USER=%s;PASSWORD=%s\", dbHome.getAbsolutePath(), user, password);"],"delete":["21","import com.google.common.annotations.VisibleForTesting;","27","import org.sonar.api.database.DatabaseProperties;","31","import org.sonar.process.ProcessProperties;","33","import java.io.File;","34","import java.sql.DriverManager;","35","import java.sql.SQLException;","48","    File dbHome = getDataDirectory(settings);","53","    String port = getSetting(DatabaseProperties.PROP_EMBEDDED_PORT, DatabaseProperties.PROP_EMBEDDED_PORT_DEFAULT_VALUE);","54","    String user = getSetting(DatabaseProperties.PROP_USER, DatabaseProperties.PROP_USER_DEFAULT_VALUE);","55","    String password = getSetting(DatabaseProperties.PROP_PASSWORD, DatabaseProperties.PROP_PASSWORD_DEFAULT_VALUE);","56","    String url = getSetting(DatabaseProperties.PROP_URL, DatabaseProperties.PROP_USER_DEFAULT_VALUE);","84","  @VisibleForTesting","85","  File getDataDirectory(Settings settings) {","86","    return new File(settings.getString(ProcessProperties.PATH_DATA));","93","  private void createDatabase(File dbHome, String user, String password) throws SQLException {","94","    String url = String.format(\"jdbc:h2:%s\/sonar;USER=%s;PASSWORD=%s\", dbHome.getAbsolutePath(), user, password);"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/db\/EmbeddedDatabaseTest.java":[{"add":["21","import java.io.IOException;","22","import java.sql.DriverManager;","24","import org.junit.After;","28","import org.junit.rules.TemporaryFolder;","29","import org.junit.rules.Timeout;","31","import org.sonar.api.utils.log.LogTester;","35","import static org.sonar.api.database.DatabaseProperties.PROP_EMBEDDED_PORT;","36","import static org.sonar.api.database.DatabaseProperties.PROP_PASSWORD;","37","import static org.sonar.api.database.DatabaseProperties.PROP_PASSWORD_DEFAULT_VALUE;","38","import static org.sonar.api.database.DatabaseProperties.PROP_URL;","39","import static org.sonar.api.database.DatabaseProperties.PROP_USER;","40","import static org.sonar.api.database.DatabaseProperties.PROP_USER_DEFAULT_VALUE;","41","import static org.sonar.process.ProcessProperties.PATH_DATA;","46","  public ExpectedException expectedException = ExpectedException.none();","47","  @Rule","48","  public LogTester logTester = new LogTester();","49","  @Rule","50","  public TemporaryFolder temporaryFolder = new TemporaryFolder();","51","  @Rule","52","  public Timeout timeout = Timeout.seconds(10);","54","  private EmbeddedDatabase underTest;","55","","56","  @After","57","  public void tearDown() throws Exception {","58","    if (underTest != null) {","59","      underTest.stop();","60","    }","61","  }","62","","63","  @Test","64","  public void start_fails_with_IAE_if_property_Data_Path_is_not_set() {","65","    EmbeddedDatabase underTest = new EmbeddedDatabase(new Settings());","66","","67","    expectedException.expect(IllegalArgumentException.class);","68","    expectedException.expectMessage(\"Missing property \" + PATH_DATA);","69","","70","    underTest.start();","71","  }","72","","73","  @Test","74","  public void start_fails_with_IAE_if_property_Data_Path_is_empty() {","75","    EmbeddedDatabase underTest = new EmbeddedDatabase(new Settings()","76","      .setProperty(PATH_DATA, \"\"));","77","","78","    expectedException.expect(IllegalArgumentException.class);","79","    expectedException.expectMessage(\"Missing property \" + PATH_DATA);","80","","81","    underTest.start();","82","  }","83","","84","  @Test","85","  public void start_fails_with_IAE_if_JDBC_URL_settings_is_not_set() throws IOException {","86","    EmbeddedDatabase underTest = new EmbeddedDatabase(new Settings()","87","      .setProperty(PATH_DATA, temporaryFolder.newFolder().getAbsolutePath()));","88","","89","    expectedException.expect(IllegalArgumentException.class);","90","    expectedException.expectMessage(\"Missing property \" + PROP_URL);","91","","92","    underTest.start();","93","  }","94","","95","  @Test","96","  public void start_fails_with_IAE_if_embedded_port_settings_is_not_set() throws IOException {","97","    EmbeddedDatabase underTest = new EmbeddedDatabase(new Settings()","98","      .setProperty(PATH_DATA, temporaryFolder.newFolder().getAbsolutePath())","99","      .setProperty(PROP_URL, \"jdbc url\"));","100","","101","    expectedException.expect(IllegalArgumentException.class);","102","    expectedException.expectMessage(\"Missing property \" + PROP_EMBEDDED_PORT);","103","","104","    underTest.start();","105","  }","106","","107","  @Test","108","  public void start_ignores_URL_to_create_database_and_uses_default_username_and_password_when_then_are_not_set() throws IOException {","110","    underTest = new EmbeddedDatabase(new Settings()","111","      .setProperty(PATH_DATA, temporaryFolder.newFolder().getAbsolutePath())","112","      .setProperty(PROP_URL, \"jdbc url\")","113","      .setProperty(PROP_EMBEDDED_PORT, \"\" + port));","115","    underTest.start();","117","    checkDbIsUp(port, PROP_USER_DEFAULT_VALUE, PROP_PASSWORD_DEFAULT_VALUE);","118","  }","119","","120","  @Test","121","  public void start_creates_db_with_specified_user_and_password() throws IOException {","122","    int port = NetworkUtils.freePort();","123","    underTest = new EmbeddedDatabase(new Settings()","124","      .setProperty(PATH_DATA, temporaryFolder.newFolder().getAbsolutePath())","125","      .setProperty(PROP_URL, \"jdbc url\")","126","      .setProperty(PROP_EMBEDDED_PORT, \"\" + port)","127","      .setProperty(PROP_USER, \"foo\")","128","      .setProperty(PROP_PASSWORD, \"bar\"));","129","","130","    underTest.start();","131","","132","    checkDbIsUp(port, \"foo\", \"bar\");","133","  }","134","","135","  @Test","136","  public void start_supports_in_memory_H2_JDBC_URL() throws IOException {","137","    int port = NetworkUtils.freePort();","138","    underTest = new EmbeddedDatabase(new Settings()","139","      .setProperty(PATH_DATA, temporaryFolder.newFolder().getAbsolutePath())","140","      .setProperty(PROP_URL, \"jdbc:h2:mem:sonar\")","141","      .setProperty(PROP_EMBEDDED_PORT, \"\" + port)","142","      .setProperty(PROP_USER, \"foo\")","143","      .setProperty(PROP_PASSWORD, \"bar\"));","144","","145","    underTest.start();","146","","147","    checkDbIsUp(port, \"foo\", \"bar\");","148","  }","149","","150","  private void checkDbIsUp(int port, String user, String password) {","152","      String driverUrl = String.format(\"jdbc:h2:tcp:\/\/localhost:%d\/sonar;USER=%s;PASSWORD=%s\", port, user, password);"],"delete":["26","import org.sonar.api.database.DatabaseProperties;","28","import org.sonar.process.ProcessProperties;","29","","30","import java.io.File;","31","import java.sql.DriverManager;","34","import static org.assertj.core.api.Assertions.assertThat;","39","  public ExpectedException throwable = ExpectedException.none();","41","  @Test(timeout = 10000)","42","  public void should_start_and_stop() {","45","    EmbeddedDatabase database = new EmbeddedDatabase(testSettings(port));","46","    database.start();","49","      String driverUrl = String.format(\"jdbc:h2:tcp:\/\/localhost:%d\/sonar;USER=login;PASSWORD=pwd\", port);","55","","56","    database.stop();","59","  @Test","60","  public void should_return_embedded_data_directory() {","61","    Settings settings = testSettings(0);","62","    EmbeddedDatabase database = new EmbeddedDatabase(settings);","63","","64","    File dataDirectory = database.getDataDirectory(settings);","65","    assertThat(dataDirectory).isNotNull();","66","    assertThat(dataDirectory.getPath()).endsWith(\"testDB\");","67","  }","68","","69","  static Settings testSettings(int port) {","70","    return new Settings()","71","      .setProperty(DatabaseProperties.PROP_USER, \"login\")","72","      .setProperty(DatabaseProperties.PROP_PASSWORD, \"pwd\")","73","      .setProperty(DatabaseProperties.PROP_EMBEDDED_PORT, \"\" + port)","74","      .setProperty(ProcessProperties.PATH_DATA, \".\/target\/testDB\");","75","  }"]}]}},"66fe88392e8301a9b7dba39a234cefe4ad9cd1ef":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/actions.ts":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/actions.ts":[{"add":["27","    return {","28","      locationsNavigator: true,","29","      selectedFlowIndex,","30","      \/\/ Also reset index = -1 to 0, we don't want to start on the issue when enabling the location navigator","31","      selectedLocationIndex:","32","        !selectedLocationIndex || selectedLocationIndex < 0 ? 0 : selectedLocationIndex","33","    };"],"delete":["20","import { allLocationsEmpty } from '.\/utils';","28","    if (!allLocationsEmpty(openIssue, selectedFlowIndex)) {","29","      return {","30","        locationsNavigator: true,","31","        selectedFlowIndex,","32","        \/\/ Also reset index = -1 to 0, we don't want to start on the issue when enabling the location navigator","33","        selectedLocationIndex:","34","          !selectedLocationIndex || selectedLocationIndex < 0 ? 0 : selectedLocationIndex","35","      };","36","    }"]}]}},"097994df9b06457852baa0eec5313f363eed9cd7":{"changes":{"server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/test\/index\/TestIndexerTest\/P3_F1_long_name.json":"ADD","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/test\/index\/TestIndexerTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/test\/index\/TestIndexDefinition.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/test\/index\/TestIndexerTest\/P3_F1_long_name.json":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/test\/index\/TestIndexerTest.java":[{"add":["138","  @Test","139","  public void long_name_can_be_indexed() throws Exception {","140","    indexTest(\"P3\", \"F1\", \"long_name\", \"U111\");","141","","142","    assertThat(countDocuments()).isEqualTo(1);","143","","144","    List<SearchHit> hits = getDocuments();","145","    Map<String, Object> document = hits.get(0).getSource();","146","    assertThat(hits).hasSize(1);","147","    assertThat(document.get(FIELD_NAME).toString()).hasSize(50000);","148","    assertThat(document.get(FIELD_FILE_UUID)).isEqualTo(\"F1\");","149","  }","150",""],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/test\/index\/TestIndexDefinition.java":[{"add":["68","    mapping.keywordFieldBuilder(FIELD_NAME).disableNorms().disableSearch().disableSortingAndAggregating().build();"],"delete":["68","    mapping.keywordFieldBuilder(FIELD_NAME).disableNorms().disableSearch().build();"]}]}},"cf0128cceea80d2637dff20713d6de9182394242":{"changes":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/controllers\/sessions_controller.rb":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/controllers\/sessions_controller.rb":[{"add":["29","    # Needed to bypass session fixation vulnerability (https:\/\/jira.sonarsource.com\/browse\/SONAR-6880)","30","    reset_session","31",""],"delete":[]}]}},"f45e42fabe2c5cfe6919d613ebfcb5c6285911ee":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/GithubTab-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/GithubTab.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/GithubTab-test.tsx.snap":[{"add":["16","        \"appId\","],"delete":["15","        \"appId\","]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/GithubTab.tsx":[{"add":["50","            additionalColumnsKeys={['url', 'appId']}"],"delete":["50","            additionalColumnsKeys={['appId', 'url']}"]}]}},"19ad13dac69306678c0b63d3034f58eabc46acaa":{"changes":{"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/source\/linereader\/DuplicationLineReaderTest.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/source\/linereader\/DuplicationLineReader.java":"MODIFY"},"diff":{"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/source\/linereader\/DuplicationLineReaderTest.java":[{"add":["70","  public void read_duplication_with_repeated_text_blocks() {","71","    DuplicationLineReader reader = duplicationLineReader(","72","      duplication(1, 2, innerDuplicate(3, 4)),","73","      duplication(3, 4, innerDuplicate(1, 2)));","74","","75","    assertThat(reader.read(line1)).isEmpty();","76","    assertThat(reader.read(line2)).isEmpty();","77","    assertThat(reader.read(line3)).isEmpty();","78","    assertThat(reader.read(line4)).isEmpty();","79","","80","    assertThat(line1.getDuplicationList()).containsExactly(1);","81","    assertThat(line2.getDuplicationList()).containsExactly(1);","82","    assertThat(line3.getDuplicationList()).containsExactly(3);","83","    assertThat(line4.getDuplicationList()).containsExactly(3);","84","  }","85","","86","  @Test"],"delete":[]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/source\/linereader\/DuplicationLineReader.java":[{"add":["72","      .collect(Collectors.toMap(e -> e, new TextBlockIndexGenerator(), (a, b) -> a, LinkedHashMap::new));"],"delete":["36","import org.sonar.core.util.stream.MoreCollectors;","73","      .collect(Collectors.toMap(e -> e, new TextBlockIndexGenerator(), MoreCollectors.mergeNotSupportedMerger(), LinkedHashMap::new));"]}]}},"b1a9efa8aada0e789b32ffb1fcaa22a40e1cb240":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/IssueQueryService.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/IssueQueryServiceTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/IssueQueryService.java":[{"add":["465","    if (stringDate == null) {","466","      return null;","467","    }","468","","469","    try {","470","      return DateUtils.parseDateTime(stringDate);","471","    } catch (SonarException notDateTime) {","473","        return DateUtils.parseDate(stringDate);","474","      } catch (SonarException notDateEither) {","475","        throw new IllegalArgumentException(String.format(\"'%s' cannot be parsed as either a date or date+time\", stringDate));"],"delete":["465","    if (stringDate != null) {","467","        return DateUtils.parseDateTime(stringDate);","468","      } catch (SonarException notDateTime) {","469","        try {","470","          return DateUtils.parseDate(stringDate);","471","        } catch (SonarException notDateEither) {","472","          throw new SonarException(String.format(\"'%s' cannot be parsed as either a date or date+time\", stringDate));","473","        }","476","    return null;"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/issue\/IssueQueryServiceTest.java":[{"add":["61","import static org.mockito.Mockito.mock;","71","  DbClient dbClient = mock(DbClient.class);","72","  DbSession session = mock(DbSession.class);","73","  ComponentDao componentDao = mock(ComponentDao.class);","74","  AuthorDao authorDao = mock(AuthorDao.class);","75","  ComponentService componentService = mock(ComponentService.class);","76","  System2 system = mock(System2.class);","78","  IssueQueryService underTest;","94","    underTest = new IssueQueryService(dbClient, componentService, system, userSessionRule);","140","    IssueQuery query = underTest.createFromMap(map);","176","    IssueQuery query = underTest.createFromMap(map);","197","      underTest.createFromMap(map);","211","      underTest.createFromMap(map);","225","      underTest.createFromMap(map);","239","    IssueQuery query = underTest.createFromMap(map);","253","      underTest.createFromMap(map);","270","    IssueQuery query = underTest.createFromMap(map);","283","    IssueQuery query = underTest.createFromMap(map);","295","    IssueQuery query = underTest.createFromMap(map);","311","    IssueQuery query = underTest.createFromMap(map);","328","    IssueQuery query = underTest.createFromMap(map);","342","    IssueQuery query = underTest.createFromMap(map);","366","    IssueQuery query = underTest.createFromMap(map);","379","    IssueQuery query = underTest.createFromMap(map);","395","    IssueQuery query = underTest.createFromMap(map);","409","    IssueQuery query = underTest.createFromMap(map);","421","    IssueQuery query = underTest.createFromMap(map);","432","      underTest.createFromMap(map);","446","    assertThat(underTest.createFromMap(map).createdAfter()).isEqualTo(DateUtils.parseDateTime(\"2012-04-30T07:35:00+0100\"));","454","    underTest.createFromRequest(new SearchWsRequest()","464","    underTest.createFromRequest(new SearchWsRequest().setSinceLeakPeriod(true));","472","    underTest.createFromRequest(new SearchWsRequest()","475","      .setProjectUuids(Collections.singletonList(\"project-uuid\")));","476","  }","477","","478","  @Test","479","  public void fail_if_date_is_not_formatted_correctly() {","480","    expectedException.expect(IllegalArgumentException.class);","481","    expectedException.expectMessage(\"'unknown-date' cannot be parsed as either a date or date+time\");","482","","483","    underTest.createFromRequest(new SearchWsRequest()","484","      .setCreatedAfter(\"unknown-date\"));","485",""],"delete":["34","import org.junit.runner.RunWith;","36","import org.mockito.Mock;","38","import org.mockito.runners.MockitoJUnitRunner;","66","@RunWith(MockitoJUnitRunner.class)","74","  @Mock","75","  DbClient dbClient;","77","  @Mock","78","  DbSession session;","79","","80","  @Mock","81","  ComponentDao componentDao;","82","","83","  @Mock","84","  AuthorDao authorDao;","85","","86","  @Mock","87","  ComponentService componentService;","88","","89","  @Mock","90","  System2 system;","91","","92","  IssueQueryService issueQueryService;","108","    issueQueryService = new IssueQueryService(dbClient, componentService, system, userSessionRule);","154","    IssueQuery query = issueQueryService.createFromMap(map);","190","    IssueQuery query = issueQueryService.createFromMap(map);","211","      issueQueryService.createFromMap(map);","225","      issueQueryService.createFromMap(map);","239","      issueQueryService.createFromMap(map);","253","    IssueQuery query = issueQueryService.createFromMap(map);","267","      issueQueryService.createFromMap(map);","284","    IssueQuery query = issueQueryService.createFromMap(map);","297","    IssueQuery query = issueQueryService.createFromMap(map);","309","    IssueQuery query = issueQueryService.createFromMap(map);","325","    IssueQuery query = issueQueryService.createFromMap(map);","342","    IssueQuery query = issueQueryService.createFromMap(map);","356","    IssueQuery query = issueQueryService.createFromMap(map);","380","    IssueQuery query = issueQueryService.createFromMap(map);","393","    IssueQuery query = issueQueryService.createFromMap(map);","409","    IssueQuery query = issueQueryService.createFromMap(map);","423","    IssueQuery query = issueQueryService.createFromMap(map);","435","    IssueQuery query = issueQueryService.createFromMap(map);","446","      issueQueryService.createFromMap(map);","460","    assertThat(issueQueryService.createFromMap(map).createdAfter()).isEqualTo(DateUtils.parseDateTime(\"2012-04-30T07:35:00+0100\"));","468","    issueQueryService.createFromRequest(new SearchWsRequest()","478","    issueQueryService.createFromRequest(new SearchWsRequest().setSinceLeakPeriod(true));","486","    issueQueryService.createFromRequest(new SearchWsRequest()","489","      .setProjectUuids(Collections.singletonList(\"project-uuid\"))","490","      );"]}]}},"bd08542fe3b12d6f8ca20d7f5323dccbb8158d33":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/GithubTab-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/AlmIntegration-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/GithubTab.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/AlmTab-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/AlmIntegrationRenderer.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/AlmBindingDefinitionsTable-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/GitlabTab-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/BitbucketTab-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/BitbucketTab.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/AlmTab-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/AzureTab.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/AzureTab-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/AlmTabRenderer-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/AlmIntegration.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/AlmTab.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/AlmIntegration-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/AlmIntegrationRenderer-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/AlmBindingDefinitionsTable-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/AlmTabRenderer.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/AlmIntegrationRenderer-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/GitlabTab.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/AlmTabRenderer-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/AzureTab-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/GitlabTab-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/AlmBindingDefinitionsTable.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/BitbucketTab-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/GithubTab-test.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/GithubTab-test.tsx.snap":[{"add":["50","    loadingAlmDefinitions={false}","51","    loadingProjectCount={false}"],"delete":["50","    loading={false}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/AlmIntegration-test.tsx":[{"add":["87","      expect(wrapper.state().loadingAlmDefinitions).toBe(false);"],"delete":["87","      expect(wrapper.state().loading).toBe(false);"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/GithubTab.tsx":[{"add":["32","  loadingAlmDefinitions: boolean;","33","  loadingProjectCount: boolean;","40","  const {","41","    branchesEnabled,","42","    component,","43","    multipleAlmEnabled,","44","    definitions,","45","    loadingAlmDefinitions,","46","    loadingProjectCount","47","  } = props;","72","            loadingAlmDefinitions={loadingAlmDefinitions}","73","            loadingProjectCount={loadingProjectCount}"],"delete":["32","  loading: boolean;","39","  const { branchesEnabled, component, multipleAlmEnabled, definitions, loading } = props;","64","            loading={loading}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/AlmTab-test.tsx.snap":[{"add":["22","  loadingAlmDefinitions={false}","23","  loadingProjectCount={false}","30","  submitting={false}"],"delete":["22","  loading={false}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/AlmIntegrationRenderer.tsx":[{"add":["36","  loadingAlmDefinitions: boolean;","37","  loadingProjectCount: boolean;","114","    loadingAlmDefinitions,","115","    loadingProjectCount,","139","          loadingAlmDefinitions={loadingAlmDefinitions}","140","          loadingProjectCount={loadingProjectCount}","149","          loadingAlmDefinitions={loadingAlmDefinitions}","150","          loadingProjectCount={loadingProjectCount}","161","          loadingAlmDefinitions={loadingAlmDefinitions}","162","          loadingProjectCount={loadingProjectCount}","172","          loadingAlmDefinitions={loadingAlmDefinitions}","173","          loadingProjectCount={loadingProjectCount}"],"delete":["36","  loading: boolean;","113","    loading,","137","          loading={loading}","146","          loading={loading}","157","          loading={loading}","167","          loading={loading}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/AlmBindingDefinitionsTable-test.tsx":[{"add":["38","  expect(shallowRender()).toMatchSnapshot('loading');","72","      loading={false}"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/GitlabTab-test.tsx":[{"add":["34","      loadingAlmDefinitions={false}","35","      loadingProjectCount={false}"],"delete":["34","      loading={false}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/BitbucketTab-test.tsx":[{"add":["32","      loadingAlmDefinitions={false}","33","      loadingProjectCount={false}"],"delete":["32","      loading={false}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/BitbucketTab.tsx":[{"add":["34","  loadingAlmDefinitions: boolean;","35","  loadingProjectCount: boolean;","42","  const { multipleAlmEnabled, definitions, loadingAlmDefinitions, loadingProjectCount } = props;","106","        loadingAlmDefinitions={loadingAlmDefinitions}","107","        loadingProjectCount={loadingProjectCount}"],"delete":["34","  loading: boolean;","41","  const { multipleAlmEnabled, definitions, loading } = props;","105","        loading={loading}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/AlmTab-test.tsx":[{"add":["100","      loadingAlmDefinitions={false}","101","      loadingProjectCount={false}"],"delete":["100","      loading={false}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/AzureTab.tsx":[{"add":["28","  loadingAlmDefinitions: boolean;","29","  loadingProjectCount: boolean;","36","  const { multipleAlmEnabled, definitions, loadingAlmDefinitions, loadingProjectCount } = props;","54","        loadingAlmDefinitions={loadingAlmDefinitions}","55","        loadingProjectCount={loadingProjectCount}"],"delete":["28","  loading: boolean;","35","  const { multipleAlmEnabled, definitions, loading } = props;","53","        loading={loading}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/AzureTab-test.tsx":[{"add":["32","      loadingAlmDefinitions={false}","33","      loadingProjectCount={false}"],"delete":["32","      loading={false}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/AlmTabRenderer-test.tsx.snap":[{"add":["29","      loading={false}","98","      loading={false}","107","exports[`should render correctly for multi-ALM binding: loading ALM definitions 1`] = `","134","      loading={false}","135","      onCreate={[MockFunction]}","136","      onDelete={[MockFunction]}","137","      onEdit={[MockFunction]}","138","    \/>","139","  <\/DeferredSpinner>","140","<\/div>","141","`;","142","","143","exports[`should render correctly for multi-ALM binding: loading project count 1`] = `","144","<div","145","  className=\"big-padded\"","146",">","147","  <DeferredSpinner","148","    loading={false}","149","    timeout={100}","150","  >","151","    <AlmBindingDefinitionsTable","152","      additionalColumnsHeaders={","153","        Array [","154","          \"url\",","155","          \"app_id\",","156","        ]","157","      }","158","      alm=\"github\"","159","      definitions={","160","        Array [","161","          Object {","162","            \"additionalColumns\": Array [","163","              \"http:\/\/github.enterprise.com\",","164","              \"123456\",","165","            ],","166","            \"key\": \"key\",","167","          },","168","        ]","169","      }","170","      loading={true}","171","      onCreate={[MockFunction]}","172","      onDelete={[MockFunction]}","173","      onEdit={[MockFunction]}","174","    \/>","175","  <\/DeferredSpinner>","176","<\/div>","177","`;","178","","179","exports[`should render correctly for multi-ALM binding: submitting 1`] = `","180","<div","181","  className=\"big-padded\"","182",">","183","  <DeferredSpinner","184","    loading={false}","185","    timeout={100}","186","  >","187","    <AlmBindingDefinitionsTable","188","      additionalColumnsHeaders={","189","        Array [","190","          \"url\",","191","          \"app_id\",","192","        ]","193","      }","194","      alm=\"github\"","195","      definitions={","196","        Array [","197","          Object {","198","            \"additionalColumns\": Array [","199","              \"http:\/\/github.enterprise.com\",","200","              \"123456\",","201","            ],","202","            \"key\": \"key\",","203","          },","204","        ]","205","      }","206","      loading={false}","242","      loading={false}","353","    loading={true}","398","    loading={true}"],"delete":["105","exports[`should render correctly for multi-ALM binding: loading 1`] = `","277","    loading={false}","322","    loading={false}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/AlmIntegration.tsx":[{"add":["38","  loadingAlmDefinitions: boolean;","39","  loadingProjectCount: boolean;","53","    loadingAlmDefinitions: true,","54","    loadingProjectCount: false","85","    this.setState({ loadingAlmDefinitions: true });","91","            loadingAlmDefinitions: false","97","          this.setState({ loadingAlmDefinitions: false });","111","    this.setState({ loadingProjectCount: true });","117","            loadingProjectCount: false,","124","          this.setState({ loadingProjectCount: false });"],"delete":["38","  loading: boolean;","52","    loading: true","83","    this.setState({ loading: true });","89","            loading: false","95","          this.setState({ loading: false });","109","    this.setState({ loading: true });","115","            loading: false,","122","          this.setState({ loading: false });"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/AlmTab.tsx":[{"add":["36","  loadingAlmDefinitions: boolean;","37","  loadingProjectCount: boolean;","115","      loadingAlmDefinitions,","116","      loadingProjectCount,","134","        loadingAlmDefinitions={loadingAlmDefinitions}","135","        loadingProjectCount={loadingProjectCount}","143","        submitting={submitting}"],"delete":["36","  loading: boolean;","114","      loading,","132","        loading={loading || submitting}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/AlmIntegration-test.tsx.snap":[{"add":["14","  loadingAlmDefinitions={true}","15","  loadingProjectCount={false}"],"delete":["14","  loading={true}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/AlmIntegrationRenderer-test.tsx":[{"add":["26","  expect(shallowRender({ loadingAlmDefinitions: true, loadingProjectCount: true })).toMatchSnapshot(","27","    'loading'","28","  );","43","      loadingAlmDefinitions={false}","44","      loadingProjectCount={false}"],"delete":["26","  expect(shallowRender({ loading: true })).toMatchSnapshot('loading');","41","      loading={false}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/AlmBindingDefinitionsTable-test.tsx.snap":[{"add":["14","      disabled={false}","67","      disabled={false}","133","            disabled={false}","144","            disabled={false}","178","            disabled={false}","189","            disabled={false}","199","exports[`should render correctly: loading 1`] = `","200","<Fragment>","201","  <div","202","    className=\"spacer-top big-spacer-bottom display-flex-space-between\"","203","  >","204","    <h2","205","      className=\"settings-sub-category-name\"","206","    >","207","      settings.almintegration.table.title","208","    <\/h2>","209","    <Button","210","      data-test=\"settings__alm-create\"","211","      disabled={false}","212","      onClick={[MockFunction]}","213","    >","214","      settings.almintegration.table.create","215","    <\/Button>","216","  <\/div>","217","  <table","218","    className=\"data zebra fixed spacer-bottom\"","219","  >","220","    <thead>","221","      <tr>","222","        <th>","223","          settings.almintegration.table.column.name","224","        <\/th>","225","        <th","226","          className=\"action-small text-center\"","227","        >","228","          settings.almintegration.table.column.edit","229","        <\/th>","230","        <th","231","          className=\"action text-center\"","232","        >","233","          settings.almintegration.table.column.delete","234","        <\/th>","235","      <\/tr>","236","    <\/thead>","237","    <tbody>","238","      <tr","239","        data-test=\"settings__alm-empty-table\"","240","      >","241","        <td","242","          colSpan={3}","243","        >","244","          settings.almintegration.table.empty.azure","245","        <\/td>","246","      <\/tr>","247","    <\/tbody>","248","  <\/table>","249","<\/Fragment>","250","`;","251","","264","      disabled={false}"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/AlmTabRenderer.tsx":[{"add":["44","  loadingAlmDefinitions: boolean;","45","  loadingProjectCount: boolean;","53","  submitting: boolean;","70","    loadingAlmDefinitions,","71","    loadingProjectCount,","74","    submitting,","114","        <DeferredSpinner loading={loadingAlmDefinitions}>","120","            loading={loadingProjectCount}","143","          loading={loadingAlmDefinitions || loadingProjectCount || submitting}"],"delete":["44","  loading: boolean;","68","    loading,","110","        <DeferredSpinner loading={loading}>","138","          loading={loading}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/AlmIntegrationRenderer-test.tsx.snap":[{"add":["78","    loadingAlmDefinitions={false}","79","    loadingProjectCount={false}","163","    loadingAlmDefinitions={false}","164","    loadingProjectCount={false}","249","    loadingAlmDefinitions={false}","250","    loadingProjectCount={false}","335","    loadingAlmDefinitions={false}","336","    loadingProjectCount={false}","426","    loadingAlmDefinitions={false}","427","    loadingProjectCount={false}","512","    loadingAlmDefinitions={true}","513","    loadingProjectCount={true}"],"delete":["78","    loading={false}","162","    loading={false}","247","    loading={false}","332","    loading={false}","422","    loading={false}","507","    loading={true}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/GitlabTab.tsx":[{"add":["32","  loadingAlmDefinitions: boolean;","33","  loadingProjectCount: boolean;","40","  const {","41","    branchesEnabled,","42","    component,","43","    multipleAlmEnabled,","44","    definitions,","45","    loadingAlmDefinitions,","46","    loadingProjectCount","47","  } = props;","71","            loadingAlmDefinitions={loadingAlmDefinitions}","72","            loadingProjectCount={loadingProjectCount}"],"delete":["32","  loading: boolean;","39","  const { branchesEnabled, component, multipleAlmEnabled, definitions, loading } = props;","63","            loading={loading}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/AlmTabRenderer-test.tsx":[{"add":["26","  expect(shallowRender({ loadingAlmDefinitions: true })).toMatchSnapshot('loading ALM definitions');","27","  expect(shallowRender({ loadingProjectCount: true })).toMatchSnapshot('loading project count');","28","  expect(shallowRender({ submitting: true })).toMatchSnapshot('submitting');","52","  expect(","53","    shallowRender({ loadingAlmDefinitions: true, multipleAlmEnabled: false })","54","  ).toMatchSnapshot();","70","      loadingAlmDefinitions={false}","71","      loadingProjectCount={false}","78","      submitting={true}"],"delete":["26","  expect(shallowRender({ loading: true })).toMatchSnapshot('loading');","50","  expect(shallowRender({ loading: true, multipleAlmEnabled: false })).toMatchSnapshot();","66","      loading={false}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/AzureTab-test.tsx.snap":[{"add":["34","    loadingAlmDefinitions={false}","35","    loadingProjectCount={false}"],"delete":["34","    loading={false}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/GitlabTab-test.tsx.snap":[{"add":["45","    loadingAlmDefinitions={false}","46","    loadingProjectCount={false}"],"delete":["45","    loading={false}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/AlmBindingDefinitionsTable.tsx":[{"add":["33","  loading: boolean;","40","  const { additionalColumnsHeaders, additionalTableInfo, alm, definitions, loading } = props;","48","        <Button data-test=\"settings__alm-create\" disabled={loading} onClick={props.onCreate}>","89","                  <ButtonIcon disabled={loading} onClick={() => props.onEdit(key)}>","94","                  <DeleteButton disabled={loading} onClick={() => props.onDelete(key)} \/>"],"delete":["39","  const { additionalColumnsHeaders, additionalTableInfo, alm, definitions } = props;","47","        <Button data-test=\"settings__alm-create\" onClick={props.onCreate}>","88","                  <ButtonIcon onClick={() => props.onEdit(key)}>","93","                  <DeleteButton onClick={() => props.onDelete(key)} \/>"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/__snapshots__\/BitbucketTab-test.tsx.snap":[{"add":["104","    loadingAlmDefinitions={false}","105","    loadingProjectCount={false}"],"delete":["104","    loading={false}"]}],"server\/sonar-web\/src\/main\/js\/apps\/settings\/components\/almIntegration\/__tests__\/GithubTab-test.tsx":[{"add":["34","      loadingAlmDefinitions={false}","35","      loadingProjectCount={false}"],"delete":["34","      loading={false}"]}]}},"3b2e5214686f9a386a35e035dc75ff0a836b8976":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/util\/GlobalLockManager.java":"ADD","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/telemetry\/TelemetryDaemonTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/platformlevel\/PlatformLevel4.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/telemetry\/TelemetryDaemon.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/util\/GlobalLockManagerTest.java":"ADD","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/platformlevel\/PlatformLevel1.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/util\/GlobalLockManager.java":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/telemetry\/TelemetryDaemonTest.java":[{"add":["31","import org.mockito.internal.matchers.Any;","53","import org.sonar.server.util.GlobalLockManager;","61","import static org.mockito.ArgumentMatchers.any;","62","import static org.mockito.ArgumentMatchers.anyInt;","99","  private final GlobalLockManager lockManager = mock(GlobalLockManager.class);","110","  private TelemetryDaemon communityUnderTest = new TelemetryDaemon(communityDataLoader, client, settings.asConfig(), internalProperties, lockManager, system2);","115","  private TelemetryDaemon commercialUnderTest = new TelemetryDaemon(commercialDataLoader, client, settings.asConfig(), internalProperties, lockManager, system2);","131","    when(lockManager.tryLock(any(), anyInt())).thenReturn(true);","183","    when(lockManager.tryLock(any(), anyInt())).thenReturn(true);","206","    when(lockManager.tryLock(any(), anyInt())).thenReturn(true);","216","    when(lockManager.tryLock(any(), anyInt())).thenReturn(true);","230","    when(lockManager.tryLock(any(), anyInt())).thenReturn(true);","246","    when(lockManager.tryLock(any(), anyInt())).thenReturn(true);","259","    when(lockManager.tryLock(any(), anyInt())).thenReturn(true);","275","    when(lockManager.tryLock(any(), anyInt())).thenReturn(true);","290","    when(lockManager.tryLock(any(), anyInt())).thenReturn(true);","306","    when(lockManager.tryLock(any(), anyInt())).thenReturn(true);","318","    when(lockManager.tryLock(any(), anyInt())).thenReturn(true);","332","    when(lockManager.tryLock(any(), anyInt())).thenReturn(true);","349","    when(lockManager.tryLock(any(), anyInt())).thenReturn(true);"],"delete":["105","  private TelemetryDaemon communityUnderTest = new TelemetryDaemon(communityDataLoader, client, settings.asConfig(), internalProperties, system2);","110","  private TelemetryDaemon commercialUnderTest = new TelemetryDaemon(commercialDataLoader, client, settings.asConfig(), internalProperties, system2);"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/platformlevel\/PlatformLevel4.java":[{"add":["521","      ProjectIndexersImpl.class,","523","      \/\/ telemetry","524","      TelemetryDataLoader.class,","525","      TelemetryDaemon.class,","526","      TelemetryClient.class","527","","528","    );"],"delete":["521","      ProjectIndexersImpl.class);","523","    \/\/ telemetry","524","    add(TelemetryDataLoader.class);","525","    addIfStartupLeader(TelemetryDaemon.class, TelemetryClient.class);"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/telemetry\/TelemetryDaemon.java":[{"add":["38","import org.sonar.server.util.GlobalLockManager;","53","  private static final String LOCK_NAME = \"TelemetryStat\";","55","  private static final String LOCK_DELAY_SEC = \"sonar.telemetry.lock.delay\";","59","  private final GlobalLockManager lockManager;","66","  public TelemetryDaemon(TelemetryDataLoader dataLoader, TelemetryClient telemetryClient, Configuration config,","67","    InternalProperties internalProperties, GlobalLockManager lockManager, System2 system2) {","72","    this.lockManager = lockManager;","121","","122","        if (!lockManager.tryLock(LOCK_NAME, lockDuration())) {","123","          return;","124","        }","125","","170","","171","  private int lockDuration(){","172","    return config.getInt(LOCK_DELAY_SEC).orElse(60);","173","  }"],"delete":["62","  public TelemetryDaemon(TelemetryDataLoader dataLoader, TelemetryClient telemetryClient, Configuration config, InternalProperties internalProperties, System2 system2) {"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/util\/GlobalLockManagerTest.java":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/platformlevel\/PlatformLevel1.java":[{"add":["63","import org.sonar.server.util.GlobalLockManager;","131","      GlobalLockManager.class,","132",""],"delete":[]}]}},"202fa876323925fe482d98cebc5bdac715337ef3":{"changes":{"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v71\/DbVersion71.java":"MODIFY","server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v71\/CleanBrokenProjectToQGReferencesTest\/properties_and_quality_gates.sql":"ADD","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v71\/CleanBrokenProjectToQGReferences.java":"ADD","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v71\/CleanBrokenProjectToQGReferencesTest.java":"ADD","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v71\/DbVersion71Test.java":"MODIFY"},"diff":{"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v71\/DbVersion71.java":[{"add":["51","      .add(2022, \"Clean broken project to QG references\", CleanBrokenProjectToQGReferences.class)"],"delete":[]}],"server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v71\/CleanBrokenProjectToQGReferencesTest\/properties_and_quality_gates.sql":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v71\/CleanBrokenProjectToQGReferences.java":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v71\/CleanBrokenProjectToQGReferencesTest.java":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v71\/DbVersion71Test.java":[{"add":["38","    verifyMigrationCount(underTest, 23);"],"delete":["38","    verifyMigrationCount(underTest, 22);"]}]}},"8d67372e016653106df9fccd746409e3169c63de":{"changes":{"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/PurgeOrphansForCETest.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/PurgeOrphansForCE.java":"MODIFY"},"diff":{"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/PurgeOrphansForCETest.java":[{"add":["21","import com.google.common.collect.ImmutableSet;","23","import java.util.Random;","24","import java.util.Set;","25","import java.util.stream.IntStream;","36","  private static final Set<String> CE_TABLES = ImmutableSet.of(\"CE_QUEUE\", \"CE_ACTIVITY\");","37","  private static final Set<String> CE_CHILD_TABLES = ImmutableSet.of(","38","    \"CE_TASK_CHARACTERISTICS\", \"CE_TASK_INPUT\", \"CE_SCANNER_CONTEXT\");","39","","43","  private Random random = new Random();","48","  public void no_effect_on_empty_db() throws SQLException {","53","  public void delete_rows_from_CE_child_tables_when_ce_tables_are_empty() throws SQLException {","54","    int count = 1 + random.nextInt(5);","55","    IntStream.range(0, count)","56","      .forEach(i -> {","57","        String uuid = i + randomAlphanumeric(10);","58","        insertInChildTables(uuid);","59","      });","60","    CE_CHILD_TABLES.forEach(tableName -> assertThat(db.countRowsOfTable(tableName)).isEqualTo(count));","64","    assertThat(db.countRowsOfTable(\"CE_ACTIVITY\")).isZero();","65","    assertThat(db.countRowsOfTable(\"CE_QUEUE\")).isZero();","66","    CE_CHILD_TABLES.forEach(tableName -> assertThat(db.countRowsOfTable(tableName)).isZero());","70","  public void do_not_delete_rows_from_CE_child_tables_if_parent_in_CE_ACTIVITY() throws SQLException {","71","    int count = 1 + random.nextInt(5);","72","    IntStream.range(0, count)","73","      .forEach(i -> {","74","        String uuid = i + randomAlphanumeric(10);","75","        insertCeActivity(uuid);","76","        insertInChildTables(uuid);","77","      });","78","    CE_CHILD_TABLES.forEach(tableName -> assertThat(db.countRowsOfTable(tableName)).isEqualTo(count));","82","    assertThat(db.countRowsOfTable(\"CE_ACTIVITY\")).isEqualTo(count);","83","    assertThat(db.countRowsOfTable(\"CE_QUEUE\")).isZero();","84","    CE_CHILD_TABLES.forEach(tableName -> assertThat(db.countRowsOfTable(tableName)).isEqualTo(count));","88","  public void do_not_delete_rows_from_CE_child_tables_if_parent_in_CE_QUEUE() throws SQLException {","89","    int count = 1 + random.nextInt(5);","90","    IntStream.range(0, count)","91","      .forEach(i -> {","92","        String uuid = i + randomAlphanumeric(10);","93","        insertCeQueue(uuid);","94","        insertInChildTables(uuid);","95","      });","96","    CE_CHILD_TABLES.forEach(tableName -> assertThat(db.countRowsOfTable(tableName)).isEqualTo(count));","100","    assertThat(db.countRowsOfTable(\"CE_ACTIVITY\")).isZero();","101","    assertThat(db.countRowsOfTable(\"CE_QUEUE\")).isEqualTo(count);","102","    CE_CHILD_TABLES.forEach(tableName -> assertThat(db.countRowsOfTable(tableName)).isEqualTo(count));","103","  }","105","  @Test","106","  public void delete_only_orphan_rows_from_ce_child_tables() throws SQLException {","107","    int withCeActivityParent = 1 + new Random().nextInt(10);","108","    int withCeQueueParent = 1 + new Random().nextInt(10);","109","    int orphans = 1 + new Random().nextInt(10);","110","    IntStream.range(0, withCeActivityParent)","111","      .forEach(i -> {","112","        String uuid = \"ca_\" + i;","113","        insertCeActivity(uuid);","114","        insertInChildTables(uuid);","115","      });","116","    IntStream.range(0, withCeQueueParent)","117","      .forEach(i -> {","118","        String uuid = \"cq_\" + i;","119","        insertCeQueue(uuid);","120","        insertInChildTables(uuid);","121","      });","122","    IntStream.range(0, orphans)","123","      .forEach(i -> {","124","        String uuid = \"orph_\" + i;","125","        insertInChildTables(uuid);","126","      });","128","    underTest.execute();","129","","130","    assertThat(db.countRowsOfTable(\"CE_ACTIVITY\")).isEqualTo(withCeActivityParent);","131","    assertThat(db.countRowsOfTable(\"CE_QUEUE\")).isEqualTo(withCeQueueParent);","132","    CE_CHILD_TABLES.forEach(tableName -> assertThat(db.countRowsOfTable(tableName)).isEqualTo(withCeActivityParent + withCeQueueParent));","133","    CE_CHILD_TABLES.forEach(tableName -> assertThat(db.select(\"select task_uuid as \\\"TASK_UUID\\\" from \" + tableName))","134","      .extracting(t -> (String) t.get(\"TASK_UUID\"))","135","      .allMatch(t -> t.startsWith(\"ca_\") || t.startsWith(\"cq_\")));","136","  }","137","","138","  @Test","139","  public void reentrant_on_empty_db() throws SQLException {","140","    underTest.execute();","141","","142","    underTest.execute();","143","  }","144","","145","  @Test","146","  public void reentrant_on_non_empty_db() throws SQLException {","147","    delete_only_orphan_rows_from_ce_child_tables();","148","","149","    underTest.execute();","167","      \"UPDATED_AT\", now);","168","  }","170","  private void insertCeQueue(String uuid) {","171","    long now = System.currentTimeMillis();","172","","173","    db.executeInsert(\"CE_QUEUE\",","174","      \"UUID\", uuid,","175","      \"TASK_TYPE\", randomAlphanumeric(15),","176","      \"STATUS\", randomAlphanumeric(15),","177","      \"EXECUTION_COUNT\", 0,","178","      \"CREATED_AT\", now,","179","      \"UPDATED_AT\", now);","180","  }","181","","182","  private void insertInChildTables(String uuid) {","183","    insertCeCharacteristics(uuid);"],"delete":["39","  public void test_is_reentrant() throws SQLException {","40","    underTest.execute();","45","  public void purge_should_not_delete_data_containing() throws SQLException {","46","    for (int i = 0; i < 10 ; i++) {","47","      insertCeActivity(randomAlphanumeric(15));","48","    }","52","    assertThat(db.countRowsOfTable(\"CE_ACTIVITY\")).isEqualTo(10);","53","    assertThat(db.countRowsOfTable(\"CE_TASK_CHARACTERISTICS\")).isEqualTo(10 * 10);","54","    assertThat(db.countRowsOfTable(\"CE_TASK_INPUT\")).isEqualTo(10);","55","    assertThat(db.countRowsOfTable(\"CE_SCANNER_CONTEXT\")).isEqualTo(10);","59","  public void purge_should_delete_orphans() throws SQLException {","60","    for (int i = 0; i < 10 ; i++) {","61","      uuid = randomAlphanumeric(20);","62","","63","      insertCeCharacteristics(uuid);","64","      insertCeScannerContext(uuid);","65","      insertCeTaskInput(uuid);","66","    }","70","    assertThat(db.countRowsOfTable(\"CE_ACTIVITY\")).isEqualTo(0);","71","    assertThat(db.countRowsOfTable(\"CE_TASK_CHARACTERISTICS\")).isEqualTo(0);","72","    assertThat(db.countRowsOfTable(\"CE_TASK_INPUT\")).isEqualTo(0);","73","    assertThat(db.countRowsOfTable(\"CE_SCANNER_CONTEXT\")).isEqualTo(0);","77","  public void purge_should_keep_existant_ce_activity_and_delete_orphans() throws SQLException {","78","    for (int i = 0; i < 5 ; i++) {","79","      insertCeActivity(randomAlphanumeric(15));","80","      uuid = randomAlphanumeric(20);","81","","82","      insertCeCharacteristics(uuid);","83","      insertCeScannerContext(uuid);","84","      insertCeTaskInput(uuid);","85","    }","89","    assertThat(db.countRowsOfTable(\"CE_ACTIVITY\")).isEqualTo(5);","90","    assertThat(db.countRowsOfTable(\"CE_TASK_CHARACTERISTICS\")).isEqualTo(5 * 10);","91","    assertThat(db.countRowsOfTable(\"CE_TASK_INPUT\")).isEqualTo(5);","92","    assertThat(db.countRowsOfTable(\"CE_SCANNER_CONTEXT\")).isEqualTo(5);","94","    assertThat(","95","      db.selectFirst(\"select count(*) as count from ce_task_characteristics ctc where length(task_uuid) = 20\")","96","        .get(\"COUNT\")","97","    ).isEqualTo(0L);","98","    assertThat(","99","      db.selectFirst(\"select count(*) as count from ce_task_input ctc where length(task_uuid) = 20\")","100","        .get(\"COUNT\")","101","    ).isEqualTo(0L);","102","    assertThat(","103","      db.selectFirst(\"select count(*) as count from ce_scanner_context ctc where length(task_uuid) = 20\")","104","        .get(\"COUNT\")","105","    ).isEqualTo(0L);","107","    assertThat(","108","      db.selectFirst(\"select count(*) as count from ce_task_characteristics ctc where not exists (select 1 from ce_activity ca where ca.uuid = ctc.task_uuid)\")","109","        .get(\"COUNT\")","110","    ).isEqualTo(0L);","111","    assertThat(","112","      db.selectFirst(\"select count(*) as count from ce_task_input cti where not exists (select 1 from ce_activity ca where ca.uuid = cti.task_uuid)\")","113","        .get(\"COUNT\")","114","    ).isEqualTo(0L);","115","    assertThat(","116","      db.selectFirst(\"select count(*) as count from ce_scanner_context csc where not exists (select 1 from ce_activity ca where ca.uuid = csc.task_uuid)\")","117","        .get(\"COUNT\")","118","    ).isEqualTo(0L);","136","      \"UPDATED_AT\", now","137","    );","141","","142","    for (int i = 0; i < 10; i++) {","143","      insertCeCharacteristics(uuid);","144","    }"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v72\/PurgeOrphansForCE.java":[{"add":["26","import static java.util.Arrays.asList;","27","","41","    for (String tableName : asList(\"ce_task_characteristics\", \"ce_task_input\", \"ce_scanner_context\")) {","42","      deleteOrphansFrom(context, tableName);","46","  private void deleteOrphansFrom(Context context, String tableName) throws SQLException {","47","    String query = buildDeleteFromQuery(tableName, \"c\",","48","      \"not exists (select 1 from ce_activity ca where ca.uuid = c.task_uuid)\" +","49","        \"and not exists (select 1 from ce_queue cq where cq.uuid = c.task_uuid)\");","51","    context.prepareUpsert(query)","56","  private String buildDeleteFromQuery(String tableName, String alias, String whereClause) {","57","    String dialectId = getDialect().getId();","58","    if (\"mssql\".equals(dialectId) || \"mysql\".equals(dialectId)) {","59","      return \"delete \" + alias + \" from \" + tableName + \" as \" + alias + \" where \" + whereClause;","60","    }","61","    return \"delete from \" + tableName + \" \" + alias + \" where \" + whereClause;","63",""],"delete":["39","    switch (getDialect().getId()) {","40","      case \"mssql\":","41","      case \"mysql\":","42","        executeForMySQLAndMsSQL(context);","43","        break;","44","      default:","45","        executeGeneric(context);","46","        break;","50","  private static void executeGeneric(Context context) throws SQLException {","51","    context.prepareUpsert(\"delete from ce_task_characteristics ctc where not exists (select 1 from ce_activity ca where ca.uuid = ctc.task_uuid)\")","52","      .execute()","53","      .commit();","55","    context.prepareUpsert(\"delete from ce_task_input cti where not exists (select 1 from ce_activity ca where ca.uuid = cti.task_uuid)\")","56","      .execute()","57","      .commit();","58","","59","    context.prepareUpsert(\"delete from ce_scanner_context csc where not exists (select 1 from ce_activity ca where ca.uuid = csc.task_uuid)\")","64","  private static void executeForMySQLAndMsSQL(Context context) throws SQLException {","65","    context.prepareUpsert(\"delete ctc from ce_task_characteristics as ctc where not exists (select 1 from ce_activity ca where ca.uuid = ctc.task_uuid)\")","66","      .execute()","67","      .commit();","68","","69","    context.prepareUpsert(\"delete cti from ce_task_input as cti where not exists (select 1 from ce_activity ca where ca.uuid = cti.task_uuid)\")","70","      .execute()","71","      .commit();","72","","73","    context.prepareUpsert(\"delete csc from ce_scanner_context as csc where not exists (select 1 from ce_activity ca where ca.uuid = csc.task_uuid)\")","74","      .execute()","75","      .commit();","76",""]}]}},"3715dddeae5b101b705cd5d3e21d0173b445603c":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/code\/components\/Search.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/code\/components\/Search.tsx":[{"add":[],"delete":["63","    this.input.focus();"]}]}},"061a1d612fc76841e3268aaa7053b07075e78dcd":{"changes":{"server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/notification\/email\/EmailNotificationChannel.java":"MODIFY"},"diff":{"server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/notification\/email\/EmailNotificationChannel.java":[{"add":["201","      email.setSSLCheckServerIdentity(true);","210","      email.setSSLCheckServerIdentity(true);"],"delete":[]}]}},"cb0937144b627e3167a363270db86b5950e1c2fc":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/plugins\/ws\/InstalledActionTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/plugins\/ws\/InstalledAction.java":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/server\/ws\/WebService.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/plugins\/ws\/InstalledActionTest.java":[{"add":["29","import org.sonar.api.server.ws.WebService.Param;","39","import static java.util.Collections.singletonList;","43","import static org.mockito.Mockito.verifyZeroInteractions;","101","      of(new PluginInfo(\"\").setName(\"\")));","125","","126","    underTest.handle(request, response);","127","","128","    verifyZeroInteractions(updateCenterMatrixFactory);","129","    assertJson(response.outputAsString()).isSimilarTo(","130","      \"{\" +","131","        \"  \\\"plugins\\\":\" +","132","        \"  [\" +","133","        \"    {\" +","134","        \"      \\\"key\\\": \\\"plugKey\\\",\" +","135","        \"      \\\"name\\\": \\\"plugName\\\",\" +","136","        \"      \\\"description\\\": \\\"desc_it\\\",\" +","137","        \"      \\\"version\\\": \\\"1.0\\\",\" +","138","        \"      \\\"license\\\": \\\"license_hey\\\",\" +","139","        \"      \\\"organizationName\\\": \\\"org_name\\\",\" +","140","        \"      \\\"organizationUrl\\\": \\\"org_url\\\",\" +","141","        \"      \\\"homepageUrl\\\": \\\"homepage_url\\\",\" +","142","        \"      \\\"issueTrackerUrl\\\": \\\"issueTracker_url\\\",\" +","143","        \"      \\\"implementationBuild\\\": \\\"sou_rev_sha1\\\"\" +","144","        \"    }\" +","145","        \"  ]\" +","146","        \"}\"","147","      );","148","  }","149","","150","  @Test","151","  public void category_is_returned_when_in_additional_fields() throws Exception {","152","    String jarFilename = getClass().getSimpleName() + \"\/\" + \"some.jar\";","153","    when(pluginRepository.getPluginInfos()).thenReturn(of(","154","      new PluginInfo(\"plugKey\")","155","        .setName(\"plugName\")","156","        .setDescription(\"desc_it\")","157","        .setVersion(Version.create(\"1.0\"))","158","        .setLicense(\"license_hey\")","159","        .setOrganizationName(\"org_name\")","160","        .setOrganizationUrl(\"org_url\")","161","        .setHomepageUrl(\"homepage_url\")","162","        .setIssueTrackerUrl(\"issueTracker_url\")","163","        .setImplementationBuild(\"sou_rev_sha1\")","164","        .setJarFile(new File(getClass().getResource(jarFilename).toURI()))","165","      )","166","    );","173","      )","174","    );","175","    when(request.paramAsStrings(Param.FIELDS)).thenReturn(singletonList(\"category\"));","198","    );"],"delete":["98","      of(","99","      new PluginInfo(\"\").setName(\"\")","100","      )","101","      );","131","        )","132","      );","155","      );"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/plugins\/ws\/InstalledAction.java":[{"add":["23","import java.util.Collections;","24","import java.util.List;","25","import java.util.Map;","37","import static java.lang.String.format;","38","import static java.util.Collections.singleton;","47","  private static final String FIELD_CATEGORY = \"category\";","61","    WebService.NewAction action = controller.createAction(\"installed\")","66","","67","    action.createFieldsParam(singleton(\"category\"))","68","      .setDescription(format(\"Comma-separated list of the additional fields to be returned in response. No additional field is returned by default. Possible values are:\" +","69","        \"<ul>\" +","70","        \"<li>%s - category as defined in the Update Center. A connection to the Update Center is needed<\/li>\" +","71","        \"<\/lu>\", FIELD_CATEGORY))","72","      .setSince(\"5.6\");","83","    List<String> additionalFields = request.paramAsStrings(WebService.Param.FIELDS);","84","    writePluginInfoList(jsonWriter, pluginInfoList, additionalFields == null ? Collections.<String>emptyList() : additionalFields);","94","  private void writePluginInfoList(JsonWriter jsonWriter, Collection<PluginInfo> pluginInfoList, List<String> additionalFields) {","95","    Map<String, Plugin> compatiblesPluginsFromUpdateCenter = additionalFields.isEmpty()","96","      ? Collections.<String, Plugin>emptyMap()","97","      : compatiblePluginsByKey(updateCenterMatrixFactory);","98","    pluginWSCommons.writePluginInfoList(jsonWriter, pluginInfoList, compatiblesPluginsFromUpdateCenter, ARRAY_PLUGINS);"],"delete":["21","import com.google.common.collect.ImmutableMap;","56","    controller.createAction(\"installed\")","71","    writePluginInfoList(jsonWriter, pluginInfoList);","81","  private void writePluginInfoList(JsonWriter jsonWriter, Collection<PluginInfo> pluginInfoList) {","82","    ImmutableMap<String, Plugin> compatiblesPluginsByKeys = compatiblePluginsByKey(updateCenterMatrixFactory);","83","    pluginWSCommons.writePluginInfoList(jsonWriter, pluginInfoList, compatiblesPluginsByKeys, ARRAY_PLUGINS);"]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/server\/ws\/WebService.java":[{"add":["389","    \/**"],"delete":["389","    \/**$"]}]}},"76f302cc06533e740d8f1e4112b3d7110ae8eb9e":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/ws\/CreateAction.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/ws\/CreateActionTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/ws\/UpdateActionTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/ws\/UpdateAction.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/ws\/DeleteAction.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/ws\/CreateAction.java":[{"add":["67","  private final RuleWsSupport ruleWsSupport;","69","  public CreateAction(DbClient dbClient, RuleCreator ruleCreator, RuleMapper ruleMapper, OrganizationFlags organizationFlags, RuleWsSupport ruleWsSupport) {","74","    this.ruleWsSupport = ruleWsSupport;","81","      .setDescription(\"Create a custom rule.<br>\" +","82","        \"Requires the 'Administer Quality Profiles' permission\")","142","    ruleWsSupport.checkQProfileAdminPermission();"],"delete":["68","  public CreateAction(DbClient dbClient, RuleCreator ruleCreator, RuleMapper ruleMapper, OrganizationFlags organizationFlags) {","79","      .setDescription(\"Create a custom rule\")"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/ws\/CreateActionTest.java":[{"add":["34","import org.sonar.server.exceptions.ForbiddenException;","35","import org.sonar.server.exceptions.UnauthorizedException;","36","import org.sonar.server.organization.DefaultOrganizationProvider;","42","import org.sonar.server.tester.UserSessionRule;","52","import static org.sonar.db.permission.OrganizationPermission.ADMINISTER_QUALITY_PROFILES;","66","  public UserSessionRule userSession = UserSessionRule.standalone();","67","","68","  @Rule","75","  private DefaultOrganizationProvider defaultOrganizationProvider = TestDefaultOrganizationProvider.from(db);","77","  private WsActionTester ws = new WsActionTester(new CreateAction(db.getDbClient(),","80","    new RuleMapper(new Languages(), createMacroInterpreter()), organizationFlags,","81","    new RuleWsSupport(db.getDbClient(), userSession, defaultOrganizationProvider)));","85","    logInAsQProfileAdministrator();","93","    String result = ws.newRequest()","130","    logInAsQProfileAdministrator();","144","    TestResponse response = ws.newRequest()","169","    logInAsQProfileAdministrator();","175","    ws.newRequest()","184","  @Test","185","  public void throw_ForbiddenException_if_not_profile_administrator() throws Exception {","186","    userSession.logIn();","187","","188","    expectedException.expect(ForbiddenException.class);","189","","190","    ws.newRequest().execute();","191","  }","192","","193","  @Test","194","  public void throw_UnauthorizedException_if_not_logged_in() throws Exception {","195","    expectedException.expect(UnauthorizedException.class);","196","","197","    ws.newRequest().execute();","198","  }","199","","206","  private void logInAsQProfileAdministrator() {","207","    userSession","208","      .logIn()","209","      .addPermission(ADMINISTER_QUALITY_PROFILES, defaultOrganizationProvider.get().getUuid());","210","  }","211",""],"delete":["68","  private WsActionTester wsTester = new WsActionTester(new CreateAction(db.getDbClient(),","71","    new RuleMapper(new Languages(), createMacroInterpreter()), organizationFlags));","82","    String result = wsTester.newRequest()","132","    TestResponse response = wsTester.newRequest()","162","    wsTester.newRequest()"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/rule\/ws\/UpdateActionTest.java":[{"add":["40","import org.sonar.server.exceptions.ForbiddenException;","41","import org.sonar.server.exceptions.UnauthorizedException;","313","  @Test","314","  public void throw_ForbiddenException_if_not_profile_administrator() throws Exception {","315","    userSession.logIn();","316","","317","    expectedException.expect(ForbiddenException.class);","318","","319","    ws.newRequest().setMethod(\"POST\").execute();","320","  }","321","","322","  @Test","323","  public void throw_UnauthorizedException_if_not_logged_in() throws Exception {","324","    expectedException.expect(UnauthorizedException.class);","325","","326","    ws.newRequest().setMethod(\"POST\").execute();","327","  }","328",""],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/ws\/UpdateAction.java":[{"add":["95","      .setDescription(\"Update an existing rule.<br>\" +","96","        \"Requires the 'Administer Quality Profiles' permission\")"],"delete":["95","      .setDescription(\"Update an existing rule\")"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/rule\/ws\/DeleteAction.java":[{"add":["43","      .setDescription(\"Delete custom rule.<br\/>\" +","44","        \"Requires the 'Administer Quality Profiles' permission\")"],"delete":["43","      .setDescription(\"Delete custom rule\")"]}]}},"7fce1bdc21b78e6fb0e12e0703762af1af9326ff":{"changes":{"tests\/src\/test\/java\/org\/sonarqube\/tests\/projectAdministration\/ProjectKeyUpdateTest.java":"MODIFY"},"diff":{"tests\/src\/test\/java\/org\/sonarqube\/tests\/projectAdministration\/ProjectKeyUpdateTest.java":[{"add":["73","    assertThat(isProjectInDatabase(\"one\")).isFalse();","74","    assertThat(isProjectInDatabase(\"two\")).isTrue();","75","    assertThat(isComponentInDatabase(\"one\")).isFalse();","76","    assertThat(isComponentInDatabase(\"two\")).isTrue();","90","    assertThat(isProjectInDatabase(\"one\")).isFalse();","94","    assertThat(isProjectInDatabase(\"one\")).isFalse();","95","    assertThat(isProjectInDatabase(\"two\")).isTrue();","130","    assertThat(isComponentInDatabase(initialKey)).isFalse();","131","    assertThat(isComponentInDatabase(newKey)).isTrue();","157","    assertThat(isComponentInDatabase(initialKey)).isFalse();","158","    assertThat(isComponentInDatabase(newKey)).isTrue();","205","  private boolean isProjectInDatabase(String projectKey) {","206","    return orchestrator.getDatabase().countSql(String.format(\"select count(id) from projects where qualifier='TRK' and kee='%s'\", projectKey)) == 1L;","209","  private boolean isComponentInDatabase(String componentKey) {","210","    return orchestrator.getDatabase().countSql(String.format(\"select count(id) from projects where kee='%s'\", componentKey)) == 1L;"],"delete":["44","import org.sonarqube.ws.client.project.SearchWsRequest;","48","import static java.util.Arrays.asList;","49","import static java.util.Collections.singletonList;","76","    assertThat(isInProjectsSearch(organization, \"one\")).isFalse();","77","    assertThat(isInProjectsSearch(organization, \"two\")).isTrue();","78","    assertThat(isInComponentSearch(organization, \"one\")).isFalse();","79","    assertThat(isInComponentSearch(organization, \"two\")).isTrue();","93","    assertThat(isInProjectsSearch(organization, \"one\")).isFalse();","97","    assertThat(isInProjectsSearch(organization, \"one\")).isFalse();","98","    assertThat(isInProjectsSearch(organization, \"two\")).isTrue();","133","    assertThat(isInComponentSearch(organization, initialKey)).isFalse();","134","    assertThat(isInComponentSearch(organization, newKey)).isTrue();","160","    assertThat(isInComponentSearch(organization, initialKey)).isFalse();","161","    assertThat(isInComponentSearch(organization, newKey)).isTrue();","190","","209","  \/**","210","   * Projects administration page - uses database","211","   *\/","212","  private boolean isInProjectsSearch(Organizations.Organization organization, String key) {","213","    WsProjects.SearchWsResponse response = tester.wsClient().projects().search(","214","      SearchWsRequest.builder().setOrganization(organization.getKey()).setQuery(key).setQualifiers(singletonList(\"TRK\")).build());","215","    return response.getComponentsCount() > 0;","218","  private boolean isInComponentSearch(Organizations.Organization organization, String key) {","219","    org.sonarqube.ws.client.component.SearchWsRequest request = new org.sonarqube.ws.client.component.SearchWsRequest()","220","      .setQualifiers(asList(\"TRK\", \"BRC\"))","221","      .setQuery(key)","222","      .setOrganization(organization.getKey());","223","    return tester.wsClient().components().search(request).getComponentsCount() == 1L;"]}]}},"335d323f8abe8e1af98f58c93ade7498abd85d9c":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/__snapshots__\/TypeFacet-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/components\/facet\/FacetHeader.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/TypeFacet.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/ResolutionFacet.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/__tests__\/__snapshots__\/TypeFacet-test.tsx.snap":[{"add":[],"delete":["100","    clearLabel=\"reset_verb\""]}],"server\/sonar-web\/src\/main\/js\/components\/facet\/FacetHeader.tsx":[{"add":["104","            {translate('clear')}"],"delete":["28","  clearLabel?: string;","105","            {translate(this.props.clearLabel || 'clear')}"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/TypeFacet.tsx":[{"add":[],"delete":["143","          clearLabel=\"reset_verb\""]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/sidebar\/ResolutionFacet.tsx":[{"add":[],"delete":["116","          clearLabel=\"reset_verb\""]}]}},"23bcc7aaf87af495bc2c2c1e3cc65bcba10703e9":{"changes":{"server\/sonar-web\/src\/main\/js\/api\/quality-profiles.js":"ADD","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/create-profile-view.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/api\/quality-profiles.js":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/create-profile-view.js":[{"add":["24","import { createQualityProfile } from '..\/..\/api\/quality-profiles';","35","  onFormSubmit: function () {","37","","38","    const form = this.$('form')[0];","39","    const data = new FormData(form);","40","","41","    createQualityProfile(data)","42","        .then(r => {","43","          this.addProfile(r.profile);","44","          this.destroy();","45","        })","46","        .catch(e => {","47","          e.response.json().then(r => this.showErrors(r.errors, r.warnings));","48","        });"],"delete":["22","import uploader from '..\/..\/components\/common\/file-upload';","35","  onFormSubmit: function (e) {","37","    this.sendRequest(e);","67","  sendRequest: function (e) {","68","    var that = this;","69","    uploader({ form: $(e.currentTarget) }).done(function (r) {","70","      if (_.isArray(r.errors) || _.isArray(r.warnings)) {","71","        that.showErrors(r.errors, r.warnings);","72","      } else {","73","        that.addProfile(r.profile);","74","        that.destroy();","75","      }","76","    });","77","  },","78",""]}]}},"6eac2ab8175deb961aad976de301d80c3fa1ae77":{"changes":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/meta\/MetaQualityProfiles.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/styles.css":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/types.ts":"MODIFY"},"diff":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["2425","overview.deleted_profile={0} has been deleted since the last analysis."],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/meta\/MetaQualityProfiles.tsx":[{"add":["28","import { ComponentQualityProfile } from '..\/..\/..\/app\/types';","37","  profiles: ComponentQualityProfile[];","58","    const requests = this.props.profiles","59","      .filter(p => !p.deleted)","60","      .map(profile => this.loadDeprecatedRulesForProfile(profile.key));","92","  renderProfile(profile: ComponentQualityProfile) {","99","        {profile.deleted ? (","100","          profile.name","101","        ) : (","102","          <Link to={getQualityProfileUrl(profile.name, profile.language, this.props.organization)}>","103","            {profile.name}","104","          <\/Link>","105","        )}","109","    if (profile.deleted) {","110","      const tooltip = translateWithParameters('overview.deleted_profile', profile.name);","111","      return (","112","        <Tooltip key={profile.key} overlay={tooltip}>","113","          <li className=\"overview-deleted-profile\">{inner}<\/li>","114","        <\/Tooltip>","115","      );","116","    }","117",""],"delete":["36","  profiles: { key: string; language: string; name: string }[];","57","    const requests = this.props.profiles.map(profile =>","58","      this.loadDeprecatedRulesForProfile(profile.key)","59","    );","91","  renderProfile(profile: { key: string; language: string; name: string }) {","95","    const path = getQualityProfileUrl(profile.name, profile.language, this.props.organization);","96","","100","        <Link to={path}>{profile.name}<\/Link>"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/styles.css":[{"add":["472",".overview-deleted-profile,"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/app\/types.ts":[{"add":["74","  qualityProfiles?: ComponentQualityProfile[];","94","export interface ComponentQualityProfile {","95","  deleted?: boolean;","96","  key: string;","97","  language: string;","98","  name: string;","99","}","100",""],"delete":["74","  qualityProfiles?: { key: string; language: string; name: string }[];"]}]}},"4b9c8ad09c0dbf6b148f0de8d9062716755e1d28":{"changes":{"server\/sonar-docs\/src\/layouts\/components\/ExternalLink.js":"MODIFY","server\/sonar-docs\/src\/layouts\/components\/CategoryLink.js":"MODIFY","server\/sonar-docs\/src\/templates\/page.css":"MODIFY","server\/sonar-docs\/src\/layouts\/components\/Sidebar.js":"MODIFY","server\/sonar-docs\/src\/layouts\/components\/SubpageLink.js":"MODIFY"},"diff":{"server\/sonar-docs\/src\/layouts\/components\/ExternalLink.js":[{"add":["24","    <a className=\"page-indexes-link\" href={external} rel=\"noopener noreferrer\" target=\"_blank\">","25","      <DetachIcon \/>","26","      {title}","27","    <\/a>"],"delete":["24","    <div>","25","      <h2>","26","        <a href={external} target=\"_blank\">","27","          <DetachIcon \/>","28","          {title}","29","        <\/a>","30","      <\/h2>","31","    <\/div>"]}],"server\/sonar-docs\/src\/layouts\/components\/CategoryLink.js":[{"add":["46","        {node ? (","47","          <Link","48","            className={isCurrentPage || open ? 'page-indexes-link active' : 'page-indexes-link'}","49","            to={url}","50","            title={node.frontmatter.title}>","51","            {node.frontmatter.title}","52","          <\/Link>","53","        ) : (","54","          <a","55","            className={isCurrentPage || open ? 'page-indexes-link active' : 'page-indexes-link'}","56","            href=\"#\"","57","            onClick={this.toggle}>","58","            {open ? <ChevronUpIcon \/> : <ChevronDownIcon \/>}","59","            {title}","60","          <\/a>","61","        )}"],"delete":["46","        <h2 className={isCurrentPage || open ? 'active' : ''}>","47","          {node ? (","48","            <Link to={url} title={node.frontmatter.title}>","49","              {node.frontmatter.title}","50","            <\/Link>","51","          ) : (","52","            <a href=\"#\" onClick={this.toggle}>","53","              {open ? <ChevronUpIcon \/> : <ChevronDownIcon \/>}","54","              {title}","55","            <\/a>","56","          )}","57","        <\/h2>"]}],"server\/sonar-docs\/src\/templates\/page.css":[{"add":["230",".page-indexes-link {","242",".page-indexes-link:hover {","246",".page-indexes-link.active {","250",".page-indexes-link,","251",".sub-menu-link {","257",".page-indexes-link svg {","266",".sub-menu-link {","272",".sub-menu-link:hover,","273",".sub-menu-link.active {"],"delete":["230",".page-indexes h2 {","242",".page-indexes h2:hover {","246",".page-indexes h2.active {","250",".page-indexes h2 a,","251",".page-indexes h3 a {","257",".page-indexes h2 svg {","266",".sub-menu h3 {","272",".sub-menu a:hover,","273",".sub-menu a.active {"]}],"server\/sonar-docs\/src\/layouts\/components\/Sidebar.js":[{"add":["78","    const items = tree.map(item => {","105","    return <nav>{items}<\/nav>;"],"delete":["78","    return tree.map(item => {"]}],"server\/sonar-docs\/src\/layouts\/components\/SubpageLink.js":[{"add":["26","      <Link","27","        className={displayHeading ? 'sub-menu-link active' : 'sub-menu-link'}","28","        to={node.fields.slug}>","29","        {node.frontmatter.title}","30","      <\/Link>"],"delete":["26","      <h3>","27","        <Link className={displayHeading ? 'active' : ''} to={node.fields.slug}>","28","          {node.frontmatter.title}","29","        <\/Link>","30","      <\/h3>"]}]}},"57ec3d37f7420a262b2724b1e7bbe958ad13b5d6":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/es\/EsClient.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/search\/SearchClientMediumTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/es\/EsTester.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/search\/SearchClient.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/app\/TomcatContexts.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/search\/BaseIndexTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/es\/EsClient.java":[{"add":["80","  private final SearchClient deprecatedClient;","83","    this.deprecatedClient = deprecatedClient;","87","    return new ProxyRefreshRequestBuilder(deprecatedClient.nativeClient()).setIndices(indices);","91","    return new ProxyFlushRequestBuilder(deprecatedClient.nativeClient()).setIndices(indices);","95","    return new ProxyIndicesStatsRequestBuilder(deprecatedClient.nativeClient()).setIndices(indices);","99","    return new ProxyNodesStatsRequestBuilder(deprecatedClient.nativeClient()).setNodesIds(nodesIds);","103","    return new ProxyClusterStatsRequestBuilder(deprecatedClient.nativeClient());","107","    return new ProxyClusterStateRequestBuilder(deprecatedClient.nativeClient());","111","    return new ProxyClusterHealthRequestBuilder(deprecatedClient.nativeClient()).setIndices(indices);","119","    return new ProxyIndicesExistsRequestBuilder(deprecatedClient.nativeClient(), indices);","123","    return new ProxyCreateIndexRequestBuilder(deprecatedClient.nativeClient(), index);","127","    return new ProxyPutMappingRequestBuilder(deprecatedClient.nativeClient()).setIndices(indices);","131","    return new ProxySearchRequestBuilder(deprecatedClient.nativeClient()).setIndices(indices);","135","    return new ProxySearchScrollRequestBuilder(scrollId, deprecatedClient.nativeClient());","139","    return new ProxyGetRequestBuilder(deprecatedClient.nativeClient());","143","    return new ProxyGetRequestBuilder(deprecatedClient.nativeClient()).setIndex(index).setType(type).setId(id);","147","    return new ProxyMultiGetRequestBuilder(deprecatedClient.nativeClient());","151","    return new ProxyCountRequestBuilder(deprecatedClient.nativeClient()).setIndices(indices);","155","    return new ProxyBulkRequestBuilder(deprecatedClient.nativeClient());","159","    return new ProxyDeleteRequestBuilder(deprecatedClient.nativeClient(), index).setType(type).setId(id);","163","    return new ProxyDeleteByQueryRequestBuilder(deprecatedClient.nativeClient()).setIndices(indices);","167","    return new ProxyIndexRequestBuilder(deprecatedClient.nativeClient()).setIndex(index).setType(type);","177","    return new ProxyClearCacheRequestBuilder(deprecatedClient.nativeClient()).setIndices(indices);","203","    return deprecatedClient.nativeClient();"],"delete":["80","  private final Client client;","83","    this.client = deprecatedClient;","84","  }","85","","86","  EsClient(Client client) {","87","    this.client = client;","91","    return new ProxyRefreshRequestBuilder(client).setIndices(indices);","95","    return new ProxyFlushRequestBuilder(client).setIndices(indices);","99","    return new ProxyIndicesStatsRequestBuilder(client).setIndices(indices);","103","    return new ProxyNodesStatsRequestBuilder(client).setNodesIds(nodesIds);","107","    return new ProxyClusterStatsRequestBuilder(client);","111","    return new ProxyClusterStateRequestBuilder(client);","115","    return new ProxyClusterHealthRequestBuilder(client).setIndices(indices);","123","    return new ProxyIndicesExistsRequestBuilder(client, indices);","127","    return new ProxyCreateIndexRequestBuilder(client, index);","131","    return new ProxyPutMappingRequestBuilder(client).setIndices(indices);","135","    return new ProxySearchRequestBuilder(client).setIndices(indices);","139","    return new ProxySearchScrollRequestBuilder(scrollId, client);","143","    return new ProxyGetRequestBuilder(client);","147","    return new ProxyGetRequestBuilder(client).setIndex(index).setType(type).setId(id);","151","    return new ProxyMultiGetRequestBuilder(client);","155","    return new ProxyCountRequestBuilder(client).setIndices(indices);","159","    return new ProxyBulkRequestBuilder(client);","163","    return new ProxyDeleteRequestBuilder(client, index).setType(type).setId(id);","167","    return new ProxyDeleteByQueryRequestBuilder(client).setIndices(indices);","171","    return new ProxyIndexRequestBuilder(client).setIndex(index).setType(type);","181","    return new ProxyClearCacheRequestBuilder(client).setIndices(indices);","207","    return client;"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/search\/SearchClientMediumTest.java":[{"add":["35",""],"delete":["47","  public void prepare_multi_search_is_not_yet_implemented() {","48","    try {","49","      searchClient.prepareMultiSearch();","50","      fail();","51","    } catch (Exception e) {","52","      assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage(\"Not yet implemented\");","53","    }","54","  }","55","","56","  @Test","57","  public void prepare_update_is_not_yet_implemented() {","58","    try {","59","      searchClient.prepareUpdate();","60","      fail();","61","    } catch (Exception e) {","62","      assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage(\"Not yet implemented\");","63","    }","64","","65","    try {","66","      searchClient.prepareUpdate(\"index\", \"type\", \"id\");","67","      fail();","68","    } catch (Exception e) {","69","      assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage(\"Not yet implemented\");","70","    }","71","  }","72","","73","  @Test","74","  public void prepare_delete_is_not_yet_implemented() {","75","    try {","76","      searchClient.prepareDelete();","77","      fail();","78","    } catch (Exception e) {","79","      assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage(\"Not yet implemented\");","80","    }","81","  }","82","","83","  @Test","93","  @Test","94","  public void prepare_percolate_is_not_yet_implemented() {","95","    try {","96","      searchClient.preparePercolate();","97","      fail();","98","    } catch (IllegalStateException e) {","99","      assertThat(e).hasMessage(\"Not yet implemented\");","100","    }","101","  }","102","","103","  @Test","104","  public void prepare_multi_percolate_is_not_yet_implemented() {","105","    try {","106","      searchClient.prepareMultiPercolate();","107","      fail();","108","    } catch (Exception e) {","109","      assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage(\"Not yet implemented\");","110","    }","111","  }","112","","113","  @Test","114","  public void prepare_suggest_is_not_yet_implemented() {","115","    try {","116","      searchClient.prepareSuggest(\"index\");","117","      fail();","118","    } catch (Exception e) {","119","      assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage(\"Not yet implemented\");","120","    }","121","  }","122","","123","  @Test","124","  public void prepare_more_like_this_is_not_yet_implemented() {","125","    try {","126","      searchClient.prepareMoreLikeThis(\"index\", \"tpye\", \"id\");","127","      fail();","128","    } catch (Exception e) {","129","      assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage(\"Not yet implemented\");","130","    }","131","  }","132","","133","  @Test","134","  public void prepare_term_vector_is_not_yet_implemented() {","135","    try {","136","      searchClient.prepareTermVector(\"index\", \"tpye\", \"id\");","137","      fail();","138","    } catch (Exception e) {","139","      assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage(\"Not yet implemented\");","140","    }","141","  }","142","","143","  @Test","144","  public void prepare_multi_term_vectors_is_not_yet_implemented() {","145","    try {","146","      searchClient.prepareMultiTermVectors();","147","      fail();","148","    } catch (Exception e) {","149","      assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage(\"Not yet implemented\");","150","    }","151","  }","152","","153","  @Test","154","  public void prepare_explain_is_not_yet_implemented() {","155","    try {","156","      searchClient.prepareExplain(\"index\", \"tpye\", \"id\");","157","      fail();","158","    } catch (Exception e) {","159","      assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage(\"Not yet implemented\");","160","    }","161","  }","162","","163","  @Test","164","  public void prepare_clear_scroll_is_not_yet_implemented() {","165","    try {","166","      searchClient.prepareClearScroll();","167","      fail();","168","    } catch (Exception e) {","169","      assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage(\"Not yet implemented\");","170","    }","171","  }"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/es\/EsTester.java":[{"add":["46","import org.sonar.server.search.SearchClient;","100","    client = new EsClient(new SearchClient(new Settings(), node.client()));"],"delete":["99","    client = new EsClient(node.client());"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/search\/SearchClient.java":[{"add":["21","import com.google.common.annotations.VisibleForTesting;","34","import org.elasticsearch.client.Client;","58","public class SearchClient implements Startable {","59","","60","  private final Settings settings;","61","  private Client nativeClient;","64","    this.settings = settings;","67","  @VisibleForTesting","68","  public SearchClient(Settings settings, Client nativeClient) {","69","    this.settings = settings;","70","    this.nativeClient = nativeClient;","71","  }","72","","73","  public Client nativeClient() {","74","    if (nativeClient == null) {","75","      throw new IllegalStateException();","76","    }","77","    return nativeClient;","81","    return new ProxyRefreshRequestBuilder(nativeClient).setIndices(indices);","85","    return new ProxyIndicesExistsRequestBuilder(nativeClient, indices);","89","    return new ProxyCreateIndexRequestBuilder(nativeClient, index);","93","    return new ProxyPutMappingRequestBuilder(nativeClient).setIndices(indices);","97","    return new ProxySearchRequestBuilder(nativeClient).setIndices(indices);","101","    return new ProxySearchScrollRequestBuilder(scrollId, nativeClient);","105","    return new ProxyGetRequestBuilder(nativeClient);","109","    return new ProxyMultiGetRequestBuilder(nativeClient);","113","    return new ProxyCountRequestBuilder(nativeClient).setIndices(indices);","117","    return new ProxyBulkRequestBuilder(nativeClient);","125","  public synchronized void start() {","126","    if (nativeClient == null) {","127","      ESLoggerFactory.setDefaultFactory(new Slf4jESLoggerFactory());","128","      org.elasticsearch.common.settings.Settings esSettings = ImmutableSettings.settingsBuilder()","129","        .put(\"node.name\", StringUtils.defaultIfEmpty(settings.getString(ProcessProperties.CLUSTER_NODE_NAME), \"sq_local_client\"))","130","        .put(\"network.bind_host\", StringUtils.defaultIfEmpty(settings.getString(ProcessProperties.SEARCH_HOST), \"localhost\"))","131","        .put(\"node.rack_id\", StringUtils.defaultIfEmpty(settings.getString(ProcessProperties.CLUSTER_NODE_NAME), \"unknown\"))","132","        .put(\"cluster.name\", StringUtils.defaultIfBlank(settings.getString(ProcessProperties.CLUSTER_NAME), \"sonarqube\"))","133","        .build();","134","      nativeClient = new TransportClient(esSettings);","135","      ((TransportClient) nativeClient).addTransportAddress(new InetSocketTransportAddress(StringUtils.defaultIfEmpty(settings.getString(ProcessProperties.SEARCH_HOST),","136","        LoopbackAddress.get()","137","          .getHostAddress()),","138","        settings.getInt(ProcessProperties.SEARCH_PORT)));","139","    }","144","    if (nativeClient != null) {","145","      nativeClient.close();","146","    }"],"delete":["28","import org.elasticsearch.action.delete.DeleteRequestBuilder;","30","import org.elasticsearch.action.explain.ExplainRequestBuilder;","33","import org.elasticsearch.action.index.IndexRequestBuilder;","34","import org.elasticsearch.action.mlt.MoreLikeThisRequestBuilder;","35","import org.elasticsearch.action.percolate.MultiPercolateRequestBuilder;","36","import org.elasticsearch.action.percolate.PercolateRequestBuilder;","37","import org.elasticsearch.action.search.ClearScrollRequestBuilder;","38","import org.elasticsearch.action.search.MultiSearchRequestBuilder;","41","import org.elasticsearch.action.suggest.SuggestRequestBuilder;","42","import org.elasticsearch.action.termvector.MultiTermVectorsRequestBuilder;","43","import org.elasticsearch.action.termvector.TermVectorRequestBuilder;","44","import org.elasticsearch.action.update.UpdateRequestBuilder;","46","import org.elasticsearch.common.Nullable;","58","import org.sonar.server.es.request.ProxyDeleteRequestBuilder;","70","public class SearchClient extends TransportClient implements Startable {","73","    super(ImmutableSettings.settingsBuilder()","74","      .put(\"node.name\", StringUtils.defaultIfEmpty(settings.getString(ProcessProperties.CLUSTER_NODE_NAME), \"sq_local_client\"))","75","      .put(\"network.bind_host\", StringUtils.defaultIfEmpty(settings.getString(ProcessProperties.SEARCH_HOST), \"localhost\"))","76","      .put(\"node.rack_id\", StringUtils.defaultIfEmpty(settings.getString(ProcessProperties.CLUSTER_NODE_NAME), \"unknown\"))","77","      .put(\"cluster.name\", StringUtils.defaultIfBlank(settings.getString(ProcessProperties.CLUSTER_NAME), \"sonarqube\"))","78","      .build());","79","    initLogging();","80","    this.addTransportAddress(new InetSocketTransportAddress(StringUtils.defaultIfEmpty(settings.getString(ProcessProperties.SEARCH_HOST), LoopbackAddress.get().getHostAddress()),","81","      settings.getInt(ProcessProperties.SEARCH_PORT)));","84","  private void initLogging() {","85","    ESLoggerFactory.setDefaultFactory(new Slf4jESLoggerFactory());","89","    return new ProxyRefreshRequestBuilder(this).setIndices(indices);","93","    return new ProxyIndicesExistsRequestBuilder(this, indices);","97","    return new ProxyCreateIndexRequestBuilder(this, index);","101","    return new ProxyPutMappingRequestBuilder(this).setIndices(indices);","104","  @Override","106","    return new ProxySearchRequestBuilder(this).setIndices(indices);","109","  @Override","111","    return new ProxySearchScrollRequestBuilder(scrollId, this);","114","  @Override","116","    return new ProxyGetRequestBuilder(this);","119","  @Override","121","    return new ProxyMultiGetRequestBuilder(this);","124","  @Override","126","    return new ProxyCountRequestBuilder(this).setIndices(indices);","129","  @Override","131","    return new ProxyBulkRequestBuilder(this);","134","  @Override","139","  \/\/ ****************************************************************************************************************","140","  \/\/ Not yet implemented methods","141","  \/\/ ****************************************************************************************************************","142","","144","  public GetRequestBuilder prepareGet(String index, String type, String id) {","145","    throw throwNotYetImplemented();","146","  }","147","","148","  @Override","149","  public IndexRequestBuilder prepareIndex() {","150","    throw throwNotYetImplemented();","151","  }","152","","153","  @Override","154","  public IndexRequestBuilder prepareIndex(String index, String type) {","155","    throw throwNotYetImplemented();","156","  }","157","","158","  @Override","159","  public IndexRequestBuilder prepareIndex(String index, String type, @Nullable String id) {","160","    throw throwNotYetImplemented();","161","  }","162","","163","  @Override","164","  public MultiSearchRequestBuilder prepareMultiSearch() {","165","    throw throwNotYetImplemented();","166","  }","167","","168","  @Override","169","  public UpdateRequestBuilder prepareUpdate() {","170","    throw throwNotYetImplemented();","171","  }","172","","173","  @Override","174","  public UpdateRequestBuilder prepareUpdate(String index, String type, String id) {","175","    throw throwNotYetImplemented();","176","  }","177","","178","  @Override","179","  public DeleteRequestBuilder prepareDelete() {","180","    throw throwNotYetImplemented();","181","  }","182","","183","  @Override","184","  public DeleteRequestBuilder prepareDelete(String index, String type, String id) {","185","    return new ProxyDeleteRequestBuilder(this, index).setType(type).setId(id);","186","  }","187","","188","  @Override","189","  public PercolateRequestBuilder preparePercolate() {","190","    throw throwNotYetImplemented();","191","  }","192","","193","  @Override","194","  public MultiPercolateRequestBuilder prepareMultiPercolate() {","195","    throw throwNotYetImplemented();","196","  }","197","","198","  @Override","199","  public SuggestRequestBuilder prepareSuggest(String... indices) {","200","    throw throwNotYetImplemented();","201","  }","202","","203","  @Override","204","  public MoreLikeThisRequestBuilder prepareMoreLikeThis(String index, String type, String id) {","205","    throw throwNotYetImplemented();","206","  }","207","","208","  @Override","209","  public TermVectorRequestBuilder prepareTermVector(String index, String type, String id) {","210","    throw throwNotYetImplemented();","211","  }","212","","213","  @Override","214","  public MultiTermVectorsRequestBuilder prepareMultiTermVectors() {","215","    throw throwNotYetImplemented();","216","  }","217","","218","  @Override","219","  public ExplainRequestBuilder prepareExplain(String index, String type, String id) {","220","    throw throwNotYetImplemented();","221","  }","222","","223","  @Override","224","  public ClearScrollRequestBuilder prepareClearScroll() {","225","    throw throwNotYetImplemented();","226","  }","227","","228","  private static IllegalStateException throwNotYetImplemented() {","229","    return new IllegalStateException(\"Not yet implemented\");","230","  }","231","","232","  @Override","233","  public void start() {","234","    \/\/ nothing to do","239","    close();"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/app\/TomcatContexts.java":[{"add":["85","  private static StandardContext addContext(Tomcat tomcat, String contextPath, File dir) {"],"delete":["85","  private StandardContext addContext(Tomcat tomcat, String contextPath, File dir) {"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/search\/BaseIndexTest.java":[{"add":["54","    searchClient.start();","74","    IndicesExistsResponse indexExistsResponse = index.getClient().nativeClient().admin().indices()"],"delete":["73","    IndicesExistsResponse indexExistsResponse = index.getClient().admin().indices()"]}]}},"2c42bcd7e4a998c9ee8c795b9945cc02da58b21c":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/__tests__\/__snapshots__\/AllProjects-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/AllProjects.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/__tests__\/__snapshots__\/AllProjects-test.tsx.snap":[{"add":["113","    <div","114","      className=\"layout-page-main-inner\"","116","      <ProjectsList","117","        cardType=\"overall\"","118","        currentUser={","119","          Object {","120","            \"isLoggedIn\": true,","121","          }","122","        }","123","        handleFavorite={[Function]}","124","        isFavorite={false}","125","        isFiltered={false}","126","        projects={","127","          Array [","129","              \"key\": \"foo\",","130","              \"measures\": Object {},","131","              \"name\": \"Foo\",","132","              \"tags\": Array [],","133","              \"visibility\": \"public\",","134","            },","135","          ]","136","        }","137","        query={","138","          Object {","139","            \"coverage\": undefined,","140","            \"duplications\": undefined,","141","            \"gate\": undefined,","142","            \"languages\": undefined,","143","            \"maintainability\": undefined,","144","            \"new_coverage\": undefined,","145","            \"new_duplications\": undefined,","146","            \"new_lines\": undefined,","147","            \"new_maintainability\": undefined,","148","            \"new_reliability\": undefined,","149","            \"new_security\": undefined,","150","            \"reliability\": undefined,","151","            \"search\": undefined,","152","            \"security\": undefined,","153","            \"size\": undefined,","154","            \"sort\": undefined,","155","            \"tags\": undefined,","156","            \"view\": undefined,","157","            \"visualization\": undefined,","159","        }","160","      \/>","161","      <ListFooter","162","        count={1}","163","        loadMore={[Function]}","164","        loading={false}","165","        ready={true}","166","        total={0}","167","      \/>","168","    <\/div>","241","    <div","242","      className=\"layout-page-main-inner\"","244","      <Visualizations","245","        displayOrganizations={false}","246","        projects={","247","          Array [","248","            Object {","249","              \"key\": \"foo\",","250","              \"measures\": Object {},","251","              \"name\": \"Foo\",","252","              \"tags\": Array [],","253","              \"visibility\": \"public\",","254","            },","255","          ]","256","        }","257","        total={0}","258","        visualization=\"risk\"","259","      \/>","260","    <\/div>","404","    <div","405","      className=\"layout-page-main-inner\"","407","      <ProjectsList","408","        cardType=\"overall\"","409","        currentUser={","410","          Object {","411","            \"isLoggedIn\": true,","413","        }","414","        handleFavorite={[Function]}","415","        isFavorite={false}","416","        isFiltered={false}","417","        organization={","418","          Object {","419","            \"key\": \"foo\",","420","            \"name\": \"Foo\",","421","          }","422","        }","423","        projects={","424","          Array [","427","              \"measures\": Object {},","429","            },","430","          ]","431","        }","432","        query={","433","          Object {","434","            \"coverage\": undefined,","435","            \"duplications\": undefined,","436","            \"gate\": undefined,","437","            \"languages\": undefined,","438","            \"maintainability\": undefined,","439","            \"new_coverage\": undefined,","440","            \"new_duplications\": undefined,","441","            \"new_lines\": undefined,","442","            \"new_maintainability\": undefined,","443","            \"new_reliability\": undefined,","444","            \"new_security\": undefined,","445","            \"reliability\": undefined,","446","            \"search\": undefined,","447","            \"security\": undefined,","448","            \"size\": undefined,","449","            \"sort\": undefined,","450","            \"tags\": undefined,","451","            \"view\": undefined,","452","            \"visualization\": undefined,","454","        }","455","      \/>","456","      <ListFooter","457","        count={1}","458","        loadMore={[Function]}","459","        loading={false}","460","        ready={true}","461","        total={0}","462","      \/>","463","    <\/div>"],"delete":["113","    <DeferredSpinner","114","      loading={false}","115","      timeout={100}","117","      <div","118","        className=\"layout-page-main-inner\"","119","      >","120","        <ProjectsList","121","          cardType=\"overall\"","122","          currentUser={","124","              \"isLoggedIn\": true,","125","            }","127","          handleFavorite={[Function]}","128","          isFavorite={false}","129","          isFiltered={false}","130","          projects={","131","            Array [","132","              Object {","133","                \"key\": \"foo\",","134","                \"measures\": Object {},","135","                \"name\": \"Foo\",","136","                \"tags\": Array [],","137","                \"visibility\": \"public\",","138","              },","139","            ]","140","          }","141","          query={","142","            Object {","143","              \"coverage\": undefined,","144","              \"duplications\": undefined,","145","              \"gate\": undefined,","146","              \"languages\": undefined,","147","              \"maintainability\": undefined,","148","              \"new_coverage\": undefined,","149","              \"new_duplications\": undefined,","150","              \"new_lines\": undefined,","151","              \"new_maintainability\": undefined,","152","              \"new_reliability\": undefined,","153","              \"new_security\": undefined,","154","              \"reliability\": undefined,","155","              \"search\": undefined,","156","              \"security\": undefined,","157","              \"size\": undefined,","158","              \"sort\": undefined,","159","              \"tags\": undefined,","160","              \"view\": undefined,","161","              \"visualization\": undefined,","162","            }","163","          }","164","        \/>","165","        <ListFooter","166","          count={1}","167","          loadMore={[Function]}","168","          ready={true}","169","          total={0}","170","        \/>","171","      <\/div>","172","    <\/DeferredSpinner>","245","    <DeferredSpinner","246","      loading={false}","247","      timeout={100}","249","      <div","250","        className=\"layout-page-main-inner\"","251","      >","252","        <Visualizations","253","          displayOrganizations={false}","254","          projects={","255","            Array [","256","              Object {","257","                \"key\": \"foo\",","258","                \"measures\": Object {},","259","                \"name\": \"Foo\",","260","                \"tags\": Array [],","261","                \"visibility\": \"public\",","262","              },","263","            ]","264","          }","265","          total={0}","266","          visualization=\"risk\"","267","        \/>","268","      <\/div>","269","    <\/DeferredSpinner>","413","    <DeferredSpinner","414","      loading={false}","415","      timeout={100}","417","      <div","418","        className=\"layout-page-main-inner\"","419","      >","420","        <ProjectsList","421","          cardType=\"overall\"","422","          currentUser={","423","            Object {","424","              \"isLoggedIn\": true,","425","            }","427","          handleFavorite={[Function]}","428","          isFavorite={false}","429","          isFiltered={false}","430","          organization={","434","            }","436","          projects={","437","            Array [","438","              Object {","439","                \"key\": \"foo\",","440","                \"measures\": Object {},","441","                \"name\": \"Foo\",","442","              },","443","            ]","444","          }","445","          query={","446","            Object {","447","              \"coverage\": undefined,","448","              \"duplications\": undefined,","449","              \"gate\": undefined,","450","              \"languages\": undefined,","451","              \"maintainability\": undefined,","452","              \"new_coverage\": undefined,","453","              \"new_duplications\": undefined,","454","              \"new_lines\": undefined,","455","              \"new_maintainability\": undefined,","456","              \"new_reliability\": undefined,","457","              \"new_security\": undefined,","458","              \"reliability\": undefined,","459","              \"search\": undefined,","460","              \"security\": undefined,","461","              \"size\": undefined,","462","              \"sort\": undefined,","463","              \"tags\": undefined,","464","              \"view\": undefined,","465","              \"visualization\": undefined,","466","            }","467","          }","468","        \/>","469","        <ListFooter","470","          count={1}","471","          loadMore={[Function]}","472","          ready={true}","473","          total={0}","474","        \/>","475","      <\/div>","476","    <\/DeferredSpinner>"]}],"server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/AllProjects.tsx":[{"add":["311","    if (this.state.loading && this.state.projects === undefined) {","312","      return <DeferredSpinner \/>;","313","    }","314","","315","    return this.getView() === 'visualizations' ? (","316","      <div className=\"layout-page-main-inner\">","317","        {this.state.projects && (","318","          <Visualizations","319","            displayOrganizations={!this.props.organization && isSonarCloud()}","320","            projects={this.state.projects}","321","            sort={this.state.query.sort}","322","            total={this.state.total}","323","            visualization={this.getVisualization()}","324","          \/>","326","      <\/div>","327","    ) : (","328","      <div className=\"layout-page-main-inner\">","329","        {this.state.projects && (","330","          <ProjectsList","331","            cardType={this.getView()}","332","            currentUser={this.props.currentUser}","333","            handleFavorite={this.handleFavorite}","334","            isFavorite={this.props.isFavorite}","335","            isFiltered={hasFilterParams(this.state.query)}","336","            organization={this.props.organization}","337","            projects={this.state.projects}","338","            query={this.state.query}","339","          \/>","340","        )}","341","        <ListFooter","342","          count={this.state.projects !== undefined ? this.state.projects.length : 0}","343","          loading={this.state.loading}","344","          loadMore={this.fetchMoreProjects}","345","          ready={!this.state.loading}","346","          total={this.state.total !== undefined ? this.state.total : 0}","347","        \/>","348","      <\/div>"],"delete":["311","    return (","312","      <DeferredSpinner loading={this.state.loading}>","313","        {this.getView() === 'visualizations' ? (","314","          <div className=\"layout-page-main-inner\">","315","            {this.state.projects && (","316","              <Visualizations","317","                displayOrganizations={!this.props.organization && isSonarCloud()}","318","                projects={this.state.projects}","319","                sort={this.state.query.sort}","320","                total={this.state.total}","321","                visualization={this.getVisualization()}","322","              \/>","323","            )}","324","          <\/div>","325","        ) : (","326","          <div className=\"layout-page-main-inner\">","327","            {this.state.projects && (","328","              <ProjectsList","329","                cardType={this.getView()}","330","                currentUser={this.props.currentUser}","331","                handleFavorite={this.handleFavorite}","332","                isFavorite={this.props.isFavorite}","333","                isFiltered={hasFilterParams(this.state.query)}","334","                organization={this.props.organization}","335","                projects={this.state.projects}","336","                query={this.state.query}","337","              \/>","338","            )}","339","            <ListFooter","340","              count={this.state.projects !== undefined ? this.state.projects.length : 0}","341","              loadMore={this.fetchMoreProjects}","342","              ready={!this.state.loading}","343","              total={this.state.total !== undefined ? this.state.total : 0}","344","            \/>","345","          <\/div>","347","      <\/DeferredSpinner>"]}]}},"ddc9196bb76ac88fc1a652d0585515eb43190218":{"changes":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/mediumtest\/ScannerMediumTester.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/branch\/BranchConfigurationLoader.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/scan\/branch\/BranchConfigurationProviderTest.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/branch\/BranchConfigurationProvider.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/mediumtest\/ScannerMediumTester.java":[{"add":["472","    public BranchConfiguration load(Map<String, String> projectSettings, ProjectBranches branches, ProjectPullRequests pullRequests) {"],"delete":["37","import java.util.function.Supplier;","473","    public BranchConfiguration load(Map<String, String> localSettings, Supplier<Map<String, String>> settingsSupplier, ProjectBranches branches, ProjectPullRequests pullRequests) {"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/branch\/BranchConfigurationLoader.java":[{"add":["26","  BranchConfiguration load(Map<String, String> projectSettings, ProjectBranches branches, ProjectPullRequests pullRequests);"],"delete":["22","import java.util.function.Supplier;","27","  BranchConfiguration load(Map<String, String> localSettings, Supplier<Map<String, String>> remoteSettingsSupplier, ProjectBranches branches, ProjectPullRequests pullRequests);"]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/scan\/branch\/BranchConfigurationProviderTest.java":[{"add":["32","import org.sonar.scanner.scan.ProjectConfiguration;","42","  private ProjectConfiguration projectConfiguration = mock(ProjectConfiguration.class);","48","  private Map<String, String> projectSettings = new HashMap<>();;","59","    when(projectConfiguration.getProperties()).thenReturn(projectSettings);","65","    BranchConfiguration configuration = provider.provide(null, projectConfiguration, branches, pullRequests);","66","    assertThat(provider.provide(null, projectConfiguration, branches, pullRequests)).isSameAs(configuration);","71","    when(loader.load(eq(projectSettings), eq(branches), eq(pullRequests))).thenReturn(config);","73","    BranchConfiguration result = provider.provide(loader, projectConfiguration, branches, pullRequests);","80","    BranchConfiguration result = provider.provide(null, projectConfiguration, branches, pullRequests);"],"delete":["21","import java.util.Collections;","32","import org.sonar.scanner.bootstrap.GlobalConfiguration;","37","import static org.mockito.ArgumentMatchers.any;","38","import static org.mockito.ArgumentMatchers.anyMap;","41","import static org.mockito.Mockito.verify;","46","  private GlobalConfiguration globalConfiguration = mock(GlobalConfiguration.class);","52","  private Map<String, String> globalPropertiesMap = new HashMap<>();;","63","    when(globalConfiguration.getProperties()).thenReturn(globalPropertiesMap);","69","    BranchConfiguration configuration = provider.provide(null, globalConfiguration, reactor, globalServerSettings, projectServerSettings, branches, pullRequests);","70","    assertThat(provider.provide(null, globalConfiguration, reactor, globalServerSettings, projectServerSettings, branches, pullRequests)).isSameAs(configuration);","75","    when(loader.load(eq(globalPropertiesMap), any(Supplier.class), eq(branches), eq(pullRequests))).thenReturn(config);","77","    BranchConfiguration result = provider.provide(loader, globalConfiguration, reactor, globalServerSettings, projectServerSettings, branches, pullRequests);","83","  public void settings_should_include_command_line_args_with_highest_priority() {","84","    when(globalConfiguration.getProperties()).thenReturn(Collections.singletonMap(\"key\", \"global\"));","85","    when(projectServerSettings.properties()).thenReturn(Collections.singletonMap(\"key\", \"settings\"));","86","    when(root.properties()).thenReturn(Collections.singletonMap(\"key\", \"root\"));","87","    provider.provide(loader, globalConfiguration, reactor, globalServerSettings, projectServerSettings, branches, pullRequests);","88","    verify(loader).load(anyMap(), settingsCaptor.capture(), any(ProjectBranches.class), any(ProjectPullRequests.class));","89","","90","    Map<String, String> map = settingsCaptor.getValue().get();","91","    assertThat(map.get(\"key\")).isEqualTo(\"root\");","92","  }","93","","94","  @Test","96","    BranchConfiguration result = provider.provide(null, globalConfiguration, reactor, globalServerSettings, projectServerSettings, branches, pullRequests);"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/branch\/BranchConfigurationProvider.java":[{"add":["26","import org.sonar.scanner.scan.ProjectConfiguration;","35","  public BranchConfiguration provide(@Nullable BranchConfigurationLoader loader, ProjectConfiguration projectConfiguration,","36","    ProjectBranches branches, ProjectPullRequests pullRequests) {","42","        branchConfiguration = loader.load(projectConfiguration.getProperties(), branches, pullRequests);"],"delete":["21","import java.util.HashMap;","22","import java.util.Map;","23","import java.util.function.Supplier;","26","import org.sonar.api.batch.bootstrap.ProjectDefinition;","27","import org.sonar.api.batch.bootstrap.ProjectReactor;","31","import org.sonar.scanner.bootstrap.GlobalConfiguration;","32","import org.sonar.scanner.bootstrap.GlobalServerSettings;","33","import org.sonar.scanner.scan.ProjectServerSettings;","42","  public BranchConfiguration provide(@Nullable BranchConfigurationLoader loader, GlobalConfiguration globalConfiguration, ProjectReactor reactor,","43","                                     GlobalServerSettings globalServerSettings, ProjectServerSettings projectServerSettings,","44","                                     ProjectBranches branches, ProjectPullRequests pullRequests) {","50","        Supplier<Map<String, String>> settingsSupplier = createSettingsSupplier(reactor.getRoot(), globalServerSettings, projectServerSettings);","51","        branchConfiguration = loader.load(globalConfiguration.getProperties(), settingsSupplier, branches, pullRequests);","57","","58","  private static Supplier<Map<String, String>> createSettingsSupplier(ProjectDefinition root,","59","                                                                      GlobalServerSettings globalServerSettings, ProjectServerSettings projectServerSettings) {","60","    \/\/ we can't get ProjectConfiguration because it creates a circular dependency.","61","    \/\/ We create our own settings which will only be loaded if needed.","62","    return () -> {","63","      Map<String, String> settings = new HashMap<>();","64","      settings.putAll(globalServerSettings.properties());","65","      settings.putAll(projectServerSettings.properties());","66","      settings.putAll(root.properties());","67","      return settings;","68","    };","69","  }"]}]}},"343905b1c517efa5902f92d45b57953e75537182":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/test\/index\/TestResultSetIterator.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/test\/index\/TestResultSetIteratorTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/test\/index\/TestResultSetIterator.java":[{"add":["33","import org.sonar.api.utils.log.Loggers;","82","    List<DbFileSources.Test> tests = parseData(fileUuid, rs.getBinaryStream(4));","83","    return toRow(projectUuid, fileUuid, updatedAt, tests);","84","  }","85","","86","  private static List<DbFileSources.Test> parseData(String fileUuid, @Nullable InputStream dataInput) {","87","    List<DbFileSources.Test> tests = Collections.emptyList();","89","      try {","90","        tests = FileSourceDto.decodeTestData(dataInput);","91","      } catch (Exception e) {","92","        Loggers.get(TestResultSetIterator.class).warn(String.format(\"Invalid file_sources.binary_data on row with file_uuid='%s', test file will be ignored\", fileUuid), e);","93","      }","95","    return tests;"],"delete":["81","    InputStream dataInput = rs.getBinaryStream(4);","82","    List<DbFileSources.Test> data;","84","      data = FileSourceDto.decodeTestData(dataInput);","85","    } else {","86","      data = Collections.emptyList();","88","    return toRow(projectUuid, fileUuid, updatedAt, data);"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/test\/index\/TestResultSetIteratorTest.java":[{"add":["30","import org.sonar.api.utils.log.LogTester;","31","import org.sonar.api.utils.log.LoggerLevel;","55","  @Rule","56","  public LogTester logTester = new LogTester();","57","","189","  public void read_does_not_fail_if_corrupted_data() throws Exception {","195","    FileSourcesUpdaterHelper.Row row = underTest.next();","196","    assertThat(row.getFileUuid()).isEqualTo(\"F1\");","197","    assertThat(row.getUpdateRequests()).isEmpty();","198","    assertThat(underTest.hasNext()).isFalse();","199","","200","    assertThat(logTester.logs(LoggerLevel.WARN)).contains(\"Invalid file_sources.binary_data on row with file_uuid='F1', test file will be ignored\");"],"delete":["36","import static org.assertj.core.api.Assertions.fail;","185","  public void fail_on_bad_data_format() throws Exception {","191","    try {","192","      assertThat(underTest.hasNext()).isTrue();","193","      underTest.next();","194","      fail(\"it should not be possible to go through not compliant data\");","195","    } catch (IllegalStateException e) {","196","      \/\/ ok","197","    }"]}]}},"75f327a6a5fae38e2d1ccf1e5ee83555da7953dc":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/component\/ComponentUpdaterTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/project\/ws\/CreateActionTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/component\/ComponentUpdater.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/component\/ComponentUpdaterTest.java":[{"add":["63","    permissionTemplateService,","64","    new FavoriteUpdater(db.getDbClient()),","65","    projectIndexer);","127","      NewComponent.newComponentBuilder()","128","        .setKey(DEFAULT_PROJECT_KEY)","129","        .setName(DEFAULT_PROJECT_NAME)","130","        .setBranch(\"origin\/master\")","131","        .setOrganizationUuid(db.getDefaultOrganization().getUuid())","132","        .build(),","133","      null);","142","      .setKey(DEFAULT_PROJECT_KEY)","143","      .setName(DEFAULT_PROJECT_NAME)","144","      .setOrganizationUuid(db.getDefaultOrganization().getUuid())","145","      .build();","155","      .setKey(DEFAULT_PROJECT_KEY)","156","      .setName(DEFAULT_PROJECT_NAME)","157","      .setOrganizationUuid(db.getDefaultOrganization().getUuid())","158","      .build();","160","      .thenReturn(true);","163","      project,","164","      userDto.getId());","172","      NewComponent.newComponentBuilder()","173","        .setKey(DEFAULT_PROJECT_KEY)","174","        .setName(DEFAULT_PROJECT_NAME)","175","        .setOrganizationUuid(db.getDefaultOrganization().getUuid())","176","        .build(),","177","      null);","185","      NewComponent.newComponentBuilder()","186","        .setKey(DEFAULT_PROJECT_KEY)","187","        .setName(DEFAULT_PROJECT_NAME)","188","        .setOrganizationUuid(db.getDefaultOrganization().getUuid())","189","        .build(),","190","      null);","203","      NewComponent.newComponentBuilder()","204","        .setKey(existing.key())","205","        .setName(DEFAULT_PROJECT_NAME)","206","        .setOrganizationUuid(existing.getOrganizationUuid())","207","        .build(),","208","      null);","219","      NewComponent.newComponentBuilder()","220","        .setKey(existing.key())","221","        .setName(DEFAULT_PROJECT_NAME)","222","        .setOrganizationUuid(existing.getOrganizationUuid())","223","        .build(),","224","      null);","233","      NewComponent.newComponentBuilder()","234","        .setKey(\"1234\")","235","        .setName(DEFAULT_PROJECT_NAME)","236","        .setOrganizationUuid(db.getDefaultOrganization().getUuid())","237","        .build(),","238","      null);","239","  }","240","","241","  @Test","242","  public void properly_fail_when_key_contains_percent_character() {","243","    expectedException.expect(BadRequestException.class);","244","    expectedException.expectMessage(\"Malformed key for Project: project%Key\");","245","","246","    underTest.create(db.getSession(),","247","      NewComponent.newComponentBuilder()","248","        .setKey(\"project%Key\")","249","        .setName(DEFAULT_PROJECT_NAME)","250","        .setOrganizationUuid(db.getDefaultOrganization().getUuid())","251","        .build(),","252","      null);","261","      NewComponent.newComponentBuilder()","262","        .setKey(DEFAULT_PROJECT_KEY)","263","        .setName(DEFAULT_PROJECT_NAME)","264","        .setBranch(\"origin?branch\")","265","        .setOrganizationUuid(db.getDefaultOrganization().getUuid())","266","        .build(),","267","      null);","273","      .setKey(\"view-key\")","274","      .setName(\"view-name\")","275","      .setQualifier(VIEW)","276","      .setOrganizationUuid(db.getDefaultOrganization().getUuid())","277","      .build();"],"delete":["63","      permissionTemplateService,","64","      new FavoriteUpdater(db.getDbClient()),","65","      projectIndexer);","127","        NewComponent.newComponentBuilder()","128","            .setKey(DEFAULT_PROJECT_KEY)","129","            .setName(DEFAULT_PROJECT_NAME)","130","            .setBranch(\"origin\/master\")","131","            .setOrganizationUuid(db.getDefaultOrganization().getUuid())","132","            .build(),","133","        null);","142","        .setKey(DEFAULT_PROJECT_KEY)","143","        .setName(DEFAULT_PROJECT_NAME)","144","        .setOrganizationUuid(db.getDefaultOrganization().getUuid())","145","        .build();","155","        .setKey(DEFAULT_PROJECT_KEY)","156","        .setName(DEFAULT_PROJECT_NAME)","157","        .setOrganizationUuid(db.getDefaultOrganization().getUuid())","158","        .build();","160","        .thenReturn(true);","163","        project,","164","        userDto.getId());","172","        NewComponent.newComponentBuilder()","173","            .setKey(DEFAULT_PROJECT_KEY)","174","            .setName(DEFAULT_PROJECT_NAME)","175","            .setOrganizationUuid(db.getDefaultOrganization().getUuid())","176","            .build(),","177","        null);","185","        NewComponent.newComponentBuilder()","186","            .setKey(DEFAULT_PROJECT_KEY)","187","            .setName(DEFAULT_PROJECT_NAME)","188","            .setOrganizationUuid(db.getDefaultOrganization().getUuid())","189","            .build(),","190","        null);","203","        NewComponent.newComponentBuilder()","204","            .setKey(existing.key())","205","            .setName(DEFAULT_PROJECT_NAME)","206","            .setOrganizationUuid(existing.getOrganizationUuid())","207","            .build(),","208","        null);","219","        NewComponent.newComponentBuilder()","220","            .setKey(existing.key())","221","            .setName(DEFAULT_PROJECT_NAME)","222","            .setOrganizationUuid(existing.getOrganizationUuid())","223","            .build(),","224","        null);","233","        NewComponent.newComponentBuilder()","234","            .setKey(\"1234\")","235","            .setName(DEFAULT_PROJECT_NAME)","236","            .setOrganizationUuid(db.getDefaultOrganization().getUuid())","237","            .build(),","238","        null);","247","        NewComponent.newComponentBuilder()","248","            .setKey(DEFAULT_PROJECT_KEY)","249","            .setName(DEFAULT_PROJECT_NAME)","250","            .setBranch(\"origin?branch\")","251","            .setOrganizationUuid(db.getDefaultOrganization().getUuid())","252","            .build(),","253","        null);","259","        .setKey(\"view-key\")","260","        .setName(\"view-name\")","261","        .setQualifier(VIEW)","262","        .setOrganizationUuid(db.getDefaultOrganization().getUuid())","263","        .build();"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/project\/ws\/CreateActionTest.java":[{"add":["32","import org.sonar.server.es.ProjectIndexer;","35","import org.sonar.server.favorite.FavoriteUpdater;","36","import org.sonar.server.i18n.I18nRule;","42","import org.sonar.server.permission.PermissionTemplateService;","47","import org.sonarqube.ws.WsProjects.CreateWsResponse.Project;","79","  @Rule","80","  public I18nRule i18n = new I18nRule().put(\"qualifier.TRK\", \"Project\");","89","      new ComponentUpdater(db.getDbClient(), i18n, system2, mock(PermissionTemplateService.class), new FavoriteUpdater(db.getDbClient()),","90","        mock(ProjectIndexer.class)),","102","    assertThat(response.getProject())","103","      .extracting(Project::getKey, Project::getName, Project::getQualifier, Project::getVisibility)","104","      .containsOnly(DEFAULT_PROJECT_KEY, DEFAULT_PROJECT_NAME, \"TRK\", \"public\");","105","    assertThat(db.getDbClient().componentDao().selectByKey(db.getSession(), DEFAULT_PROJECT_KEY).get())","106","      .extracting(ComponentDto::getKey, ComponentDto::name, ComponentDto::qualifier, ComponentDto::scope, ComponentDto::isPrivate)","107","      .containsOnly(DEFAULT_PROJECT_KEY, DEFAULT_PROJECT_NAME, \"TRK\", \"PRJ\", false);","114","    CreateWsResponse response = call(CreateRequest.builder()","120","    assertThat(response.getProject())","121","      .extracting(Project::getKey, Project::getName, Project::getQualifier, Project::getVisibility)","122","      .containsOnly(DEFAULT_PROJECT_KEY + \":origin\/master\", DEFAULT_PROJECT_NAME, \"TRK\", \"public\");","130","    CreateWsResponse response = ws.newRequest()","135","      .executeProtobuf(CreateWsResponse.class);","137","    assertThat(response.getProject())","138","      .extracting(Project::getKey, Project::getName, Project::getQualifier, Project::getVisibility)","139","      .containsOnly(DEFAULT_PROJECT_KEY, DEFAULT_PROJECT_NAME, \"TRK\", \"public\");","240","    db.components().insertPublicProject(project -> project.setKey(DEFAULT_PROJECT_KEY));","253","  public void properly_fail_when_project_key_contains_percent_character() {","254","    userSession.addPermission(PROVISION_PROJECTS, db.getDefaultOrganization());","255","","256","    expectedException.expect(BadRequestException.class);","257","    expectedException.expectMessage(\"Malformed key for Project: project%Key. Allowed characters are alphanumeric, '-', '_', '.' and ':', with at least one non-digit.\");","258","","259","    call(CreateRequest.builder()","260","      .setKey(\"project%Key\")","261","      .setName(DEFAULT_PROJECT_NAME)","262","      .build());","263","  }","264","","265","  @Test","314","      PARAM_BRANCH);"],"delete":["26","import org.mockito.ArgumentCaptor;","27","import org.mockito.Mockito;","30","import org.sonar.db.DbSession;","35","import org.sonar.server.component.NewComponent;","51","import static org.mockito.Matchers.anyInt;","55","import static org.mockito.Mockito.verify;","56","import static org.mockito.Mockito.when;","83","  private ComponentUpdater componentUpdater = mock(ComponentUpdater.class, Mockito.RETURNS_MOCKS);","90","      componentUpdater,","96","    expectSuccessfulCallToComponentUpdater();","103","    assertThat(response.getProject().getKey()).isEqualTo(DEFAULT_PROJECT_KEY);","104","    assertThat(response.getProject().getName()).isEqualTo(DEFAULT_PROJECT_NAME);","105","    assertThat(response.getProject().getQualifier()).isEqualTo(\"TRK\");","112","    call(CreateRequest.builder()","118","    NewComponent called = verifyCallToComponentUpdater();","119","    assertThat(called.key()).isEqualTo(DEFAULT_PROJECT_KEY);","120","    assertThat(called.branch()).isEqualTo(\"origin\/master\");","128","    ws.newRequest()","133","      .execute();","135","    NewComponent called = verifyCallToComponentUpdater();","136","    assertThat(called.key()).isEqualTo(DEFAULT_PROJECT_KEY);","137","    assertThat(called.branch()).isNull();","144","    expectSuccessfulCallToComponentUpdater();","160","    expectSuccessfulCallToComponentUpdater();","177","    expectSuccessfulCallToComponentUpdater();","193","    expectSuccessfulCallToComponentUpdater();","208","    expectSuccessfulCallToComponentUpdater();","226","    expectSuccessfulCallToComponentUpdater();","244","    when(componentUpdater.create(any(DbSession.class), any(NewComponent.class), anyInt())).thenThrow(BadRequestException.create(\"already exists\"));","282","    expectSuccessfulCallToComponentUpdater();","306","      PARAM_BRANCH","307","    );","333","  private NewComponent verifyCallToComponentUpdater() {","334","    ArgumentCaptor<NewComponent> argument = ArgumentCaptor.forClass(NewComponent.class);","335","    verify(componentUpdater).create(any(DbSession.class), argument.capture(), anyInt());","336","    return argument.getValue();","337","  }","338","","339","  private void expectSuccessfulCallToComponentUpdater() {","340","    when(componentUpdater.create(any(DbSession.class), any(NewComponent.class), anyInt())).thenAnswer(invocation -> {","341","      NewComponent newC = invocation.getArgumentAt(1, NewComponent.class);","342","      return new ComponentDto().setKey(newC.key()).setQualifier(newC.qualifier()).setName(newC.name()).setPrivate(newC.isPrivate());","343","    });","344","  }"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/component\/ComponentUpdater.java":[{"add":["84","      \"Could not create %s, key already exists: %s\", getQualifierToDisplay(newComponent.qualifier()), keyWithBranch);","128","  private void checkKeyFormat(String qualifier, String key) {","129","    checkRequest(isValidModuleKey(key),","130","      \"Malformed key for %s: %s. Allowed characters are alphanumeric, '-', '_', '.' and ':', with at least one non-digit.\", getQualifierToDisplay(qualifier), key);","135","      \"Malformed branch for %s: %s. Allowed characters are alphanumeric, '-', '_', '.' and '\/', with at least one non-digit.\", getQualifierToDisplay(qualifier), branch);","138","  private String getQualifierToDisplay(String qualifier) {","139","    return i18n.message(Locale.getDefault(), \"qualifier.\" + qualifier, \"Project\");"],"delete":["84","      formatMessage(\"Could not create %s, key already exists: %s\", newComponent.qualifier(), keyWithBranch));","128","  private void checkKeyFormat(String qualifier, String kee) {","129","    checkRequest(isValidModuleKey(kee), formatMessage(\"Malformed key for %s: %s. Allowed characters are alphanumeric, '-', '_', '.' and ':', with at least one non-digit.\",","130","      qualifier, kee));","135","      formatMessage(\"Malformed branch for %s: %s. Allowed characters are alphanumeric, '-', '_', '.' and '\/', with at least one non-digit.\", qualifier, branch));","138","  private String formatMessage(String message, String qualifier, String key) {","139","    return String.format(message, i18n.message(Locale.getDefault(), \"qualifier.\" + qualifier, \"Project\"), key);"]}]}},"ee6d1e906736f988dc399d3ea7e9562014027084":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/projects\/styles.css":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/projects\/styles.css":[{"add":[],"delete":["38",".projects-topbar-item.is-loading {","39","  padding-left: 0;","40","}","41",""]}]}},"1a90571a65a3042633ebf3d6412932ff79142d98":{"changes":{"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/purge\/PurgeMapper.xml":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/purge\/PurgeDaoTest.java":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/purge\/PurgeMapper.xml":[{"add":["53","    left join snapshots s","54","    on","55","        s.component_uuid = pb.uuid","56","        and s.islast=${_true}","60","        and (s.created_at is null or s.created_at &lt; #{toDate})","61",""],"delete":["56","        and pb.updated_at &lt; #{toDate}"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/purge\/PurgeDaoTest.java":[{"add":["143","    db.components().insertSnapshot(branch1);","144","    db.components().insertSnapshot(branch2);","146","    \/\/ branch with other components and issues, last analysed 31 days ago","148","    db.components().insertSnapshot(branch3, dto -> dto.setCreatedAt(DateUtils.addDays(new Date(), -31).getTime()));","149","","157","    \/\/ branch with no analysis","158","    ComponentDto branch4 = db.components().insertProjectBranch(project, b -> b.setBranchType(BranchType.BRANCH));","159","","172","    db.components().insertSnapshot(nonMainBranch);","174","    db.components().insertSnapshot(recentPullRequest);","178","    db.components().insertSnapshot(pullRequest, dto -> dto.setCreatedAt(DateUtils.addDays(new Date(), -31).getTime()));","198","    db.components().insertSnapshot(nonMainBranch);","202","    db.components().insertSnapshot(branch1, dto -> dto.setCreatedAt(DateUtils.addDays(new Date(), -31).getTime()));","206","    db.components().insertSnapshot(branch2, dto -> dto.setCreatedAt(DateUtils.addDays(new Date(), -31).getTime()));","211","    underTest.purge(dbSession, newConfigurationWith30Days(System2.INSTANCE, branch1.uuid(), branch1.getMainBranchProjectUuid()), PurgeListener.EMPTY, new PurgeProfiler());"],"delete":["144","    \/\/ branch with other components and issues, updated 31 days ago","145","    when(system2.now()).thenReturn(DateUtils.addDays(new Date(), -31).getTime());","163","    when(system2.now()).thenReturn(new Date().getTime());","170","    when(system2.now()).thenReturn(DateUtils.addDays(new Date(), -31).getTime());","188","    when(system2.now()).thenReturn(new Date().getTime());","192","","193","    when(system2.now()).thenReturn(DateUtils.addDays(new Date(), -31).getTime());","203","    \/\/ back to present","204","    when(system2.now()).thenReturn(new Date().getTime());","206","    underTest.purge(dbSession, newConfigurationWith30Days(system2, branch1.uuid(), branch1.getMainBranchProjectUuid()), PurgeListener.EMPTY, new PurgeProfiler());"]}]}},"c69b7b9b257125bc3b24431a7a93f32224c60d71":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/details\/__tests__\/__snapshots__\/ProfileInheritanceBox-test.tsx.snap":"ADD","server\/sonar-web\/src\/main\/js\/app\/types.d.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/details\/ProfileInheritance.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/details\/__tests__\/ProfileInheritanceBox-test.tsx":"ADD","server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/details\/ProfileInheritanceBox.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/helpers\/testMocks.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/api\/quality-profiles.ts":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/details\/__tests__\/__snapshots__\/ProfileInheritanceBox-test.tsx.snap":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/app\/types.d.ts":[{"add":["616","  export interface ProfileInheritanceDetails {","617","    activeRuleCount: number;","618","    isBuiltIn: boolean;","619","    key: string;","620","    name: string;","621","    overridingRuleCount?: number;","622","  }","623",""],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/details\/ProfileInheritance.tsx":[{"add":["36","  ancestors?: T.ProfileInheritanceDetails[];","37","  children?: T.ProfileInheritanceDetails[];","40","  profile?: T.ProfileInheritanceDetails;","71","          ancestors.reverse();","72","","75","            ancestors,"],"delete":["35","interface ProfileInheritanceDetails {","36","  activeRuleCount: number;","37","  isBuiltIn: boolean;","38","  key: string;","39","  language: string;","40","  name: string;","41","  overridingRuleCount?: number;","42","}","43","","45","  ancestors?: Array<ProfileInheritanceDetails>;","46","  children?: Array<ProfileInheritanceDetails>;","49","  profile?: ProfileInheritanceDetails;","82","            ancestors: ancestors.reverse(),","169","                    type=\"current\""]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/details\/__tests__\/ProfileInheritanceBox-test.tsx":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-profiles\/details\/ProfileInheritanceBox.tsx":[{"add":["32","  profile: T.ProfileInheritanceDetails;","33","  type?: string;","36","export default function ProfileInheritanceBox(props: Props) {","37","  const {","38","    className,","39","    depth,","40","    extendsBuiltIn,","41","    language,","42","    organization,","43","    profile,","44","    displayLink = true,","45","    type = 'current'","46","  } = props;","47","  const offset = 25 * depth;","56","              language={language}","58","              organization={organization}>"],"delete":["32","  profile: {","33","    activeRuleCount: number;","34","    isBuiltIn: boolean;","35","    key: string;","36","    language: string;","37","    name: string;","38","    overridingRuleCount?: number;","39","  };","40","  type: string;","43","export default function ProfileInheritanceBox({ type, displayLink = true, ...props }: Props) {","44","  const { profile, className, extendsBuiltIn } = props;","45","  const offset = 25 * props.depth;","54","              language={props.language}","56","              organization={props.organization}>"]}],"server\/sonar-web\/src\/main\/js\/helpers\/testMocks.ts":[{"add":["554","export function mockQualityProfileInheritance(","555","  overrides: Partial<T.ProfileInheritanceDetails> = {}","556","): T.ProfileInheritanceDetails {","557","  return {","558","    activeRuleCount: 4,","559","    isBuiltIn: false,","560","    key: 'foo',","561","    name: 'Foo',","562","    overridingRuleCount: 0,","563","    ...overrides","564","  };","565","}","566",""],"delete":[]}],"server\/sonar-web\/src\/main\/js\/api\/quality-profiles.ts":[{"add":["103","export function getProfileInheritance(","104","  profileKey: string","105","): Promise<{","106","  ancestors: T.ProfileInheritanceDetails[];","107","  children: T.ProfileInheritanceDetails[];","108","  profile: T.ProfileInheritanceDetails;","109","}> {"],"delete":["103","export function getProfileInheritance(profileKey: string): Promise<any> {"]}]}},"a5b62298cc4c67c0c7da81c97f874bf5d6be59d8":{"changes":{"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/__tests__\/HeaderMeta-test.tsx":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/user\/ws\/SetHomepageAction.java":"MODIFY","server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/user\/ws\/CurrentActionHomepageTest.java":"MODIFY","server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/user\/ws\/HomepageTypesImplTest.java":"MODIFY","server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/user\/ws\/SetHomepageActionTest.java":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/user\/ws\/HomepageTypes.java":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/HeaderMeta.tsx":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/user\/ws\/HomepageTypesImpl.java":"MODIFY","sonar-ws\/src\/main\/protobuf\/ws-users.proto":"MODIFY","server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/user\/ws\/CurrentActionTest.java":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/user\/ws\/CurrentAction.java":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/__tests__\/__snapshots__\/HeaderMeta-test.tsx.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/__tests__\/HeaderMeta-test.tsx":[{"add":["32","it('should render correctly for a portfolio', () => {","33","  const wrapper = shallowRender({","34","    component: mockComponent({ key: 'foo', qualifier: ComponentQualifier.Portfolio })","35","  });","36","  expect(wrapper).toMatchSnapshot();","37","});","38",""],"delete":[]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/user\/ws\/SetHomepageAction.java":[{"add":["70","      .setChangelog(","71","        new Change(\"8.3\", \"Types: MY_PROJECTS, MY_ISSUES, ORGANIZATION removed\"),","72","        new Change(\"8.3\", \"Parameter 'organization' removed\"),","73","        new Change(\"7.1\", \"Parameter 'parameter' is replaced by 'component' and 'organization'\"))","99","      String parameter = getHomepageParameter(dbSession, type, componentParameter, request.param(PARAM_BRANCH));","114","  private String getHomepageParameter(DbSession dbSession, HomepageTypes.Type type, @Nullable String componentParameter, @Nullable String branchParameter) {"],"delete":["32","import org.sonar.server.exceptions.NotFoundException;","38","import static org.apache.commons.lang.StringUtils.isBlank;","40","import static org.sonar.server.user.ws.HomepageTypes.Type.ORGANIZATION;","73","      .setChangelog(new Change(\"7.1\", \"Parameter 'parameter' is replaced by 'component' and 'organization'\"))","81","    action.createParam(PARAM_ORGANIZATION)","82","      .setDescription(\"Organization key. It should only be used when parameter '%s' is set to '%s'\", PARAM_TYPE, ORGANIZATION)","83","      .setSince(\"7.1\")","84","      .setExampleValue(\"my-org\");","85","","102","    String organizationParameter = request.param(PARAM_ORGANIZATION);","105","      String parameter = getHomepageParameter(dbSession, type, componentParameter, request.param(PARAM_BRANCH), organizationParameter);","120","  private String getHomepageParameter(DbSession dbSession, HomepageTypes.Type type, @Nullable String componentParameter, @Nullable String branchParameter,","121","    @Nullable String organizationParameter) {","135","      case ORGANIZATION:","136","        checkArgument(isNotBlank(organizationParameter), PARAMETER_REQUIRED, type.name(), PARAM_ORGANIZATION);","137","        return dbClient.organizationDao().selectByKey(dbSession, organizationParameter)","138","          .orElseThrow(() -> new NotFoundException(format(\"No organizationDto with key '%s'\", organizationParameter)))","139","          .getUuid();","143","      case MY_PROJECTS:","144","      case MY_ISSUES:","145","        checkArgument(isBlank(componentParameter), \"Parameter '%s' must not be provided when type is '%s'\", PARAM_COMPONENT, type.name());","146","        checkArgument(isBlank(organizationParameter), \"Parameter '%s' must not be provided when type is '%s'\", PARAM_ORGANIZATION, type.name());"]}],"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/user\/ws\/CurrentActionHomepageTest.java":[{"add":["21","import com.tngtech.java.junit.dataprovider.DataProvider;","22","import com.tngtech.java.junit.dataprovider.DataProviderRunner;","23","import com.tngtech.java.junit.dataprovider.UseDataProvider;","24","import java.util.Optional;","25","import javax.annotation.Nullable;","29","import org.junit.runner.RunWith;","35","import org.sonar.core.platform.EditionProvider;","36","import org.sonar.core.platform.PlatformEditionProvider;","54","import static org.sonarqube.ws.Users.CurrentWsResponse.HomepageType.PROJECTS;","56","@RunWith(DataProviderRunner.class)","68","  private PlatformEditionProvider platformEditionProvider = mock(PlatformEditionProvider.class);","69","  private HomepageTypesImpl homepageTypes = new HomepageTypesImpl();","74","    new CurrentAction(userSessionRule, dbClient, defaultOrganizationProvider, new AvatarResolverImpl(), homepageTypes, platformEditionProvider, permissionService));","89","  @UseDataProvider(\"enterpriseAndAbove\")","90","  public void return_homepage_when_set_to_a_portfolio(EditionProvider.Edition edition) {","91","    setPlatformEdition(edition);","104","  @UseDataProvider(\"enterpriseAndAbove\")","105","  public void return_default_when_set_to_a_portfolio_but_no_rights_on_this_portfolio(EditionProvider.Edition edition) {","106","    setPlatformEdition(edition);","115","      .isEqualTo(PROJECTS);","119","  @UseDataProvider(\"enterpriseAndAbove\")","120","  public void return_homepage_when_set_to_an_application(EditionProvider.Edition edition) {","121","    setPlatformEdition(edition);","134","  @UseDataProvider(\"enterpriseAndAbove\")","135","  public void return_default_homepage_when_set_to_an_application_but_no_rights_on_this_application(EditionProvider.Edition edition) {","136","    setPlatformEdition(edition);","145","      .isEqualTo(PROJECTS);","149","  @UseDataProvider(\"allEditions\")","150","  public void return_homepage_when_set_to_a_project(EditionProvider.Edition edition) {","151","    setPlatformEdition(edition);","164","  @UseDataProvider(\"allEditions\")","165","  public void return_default_homepage_when_set_to_a_project_but_no_rights_on_this_project(EditionProvider.Edition edition) {","166","    setPlatformEdition(edition);","175","      .isEqualTo(PROJECTS);","203","  @UseDataProvider(\"enterpriseAndAbove\")","204","  public void fallback_when_user_homepage_portfolio_does_not_exist_in_db(EditionProvider.Edition edition) {","205","    setPlatformEdition(edition);","215","  public void fallback_when_edition_is_null() {","216","    setPlatformEdition(null);","217","    ComponentDto application = db.components().insertPrivateApplication(db.getDefaultOrganization());","218","    UserDto user = db.users().insertUser(u -> u.setHomepageType(\"APPLICATION\").setHomepageParameter(application.uuid()));","219","    userSessionRule.logIn(user.getLogin());","220","","221","    CurrentWsResponse response = ws.newRequest().executeProtobuf(CurrentWsResponse.class);","222","","223","    assertThat(response.getHomepage()).isNotNull();","224","    assertThat(response.getHomepage().getType()).isEqualTo(PROJECTS);","225","  }","226","","227","  @Test","228","  @UseDataProvider(\"enterpriseAndAbove\")","229","  public void fallback_when_user_homepage_application_does_not_exist_in_db(EditionProvider.Edition edition) {","230","    setPlatformEdition(edition);","240","  @UseDataProvider(\"belowEnterprise\")","241","  public void fallback_when_user_homepage_application_and_edition_below_enterprise(EditionProvider.Edition edition) {","242","    setPlatformEdition(edition);","253","  public void fallback_to_PROJECTS() {","266","  private void setPlatformEdition(@Nullable EditionProvider.Edition edition) {","267","    when(platformEditionProvider.get()).thenReturn(Optional.ofNullable(edition));","270","  @DataProvider","271","  public static Object[][] enterpriseAndAbove() {","272","    return new Object[][] {","273","      {EditionProvider.Edition.ENTERPRISE},","274","      {EditionProvider.Edition.DATACENTER}","275","    };","278","  @DataProvider","279","  public static Object[][] belowEnterprise() {","280","    return new Object[][] {","281","      {EditionProvider.Edition.COMMUNITY},","282","      {EditionProvider.Edition.DEVELOPER}","283","    };","286","  @DataProvider","287","  public static Object[][] allEditions() {","288","    return new Object[][] {","289","      {EditionProvider.Edition.COMMUNITY},","290","      {EditionProvider.Edition.DEVELOPER},","291","      {EditionProvider.Edition.ENTERPRISE},","292","      {EditionProvider.Edition.DATACENTER}","293","    };","294","  }"],"delete":["24","import org.sonar.api.config.internal.MapSettings;","30","import org.sonar.core.platform.PluginRepository;","34","import org.sonar.db.organization.OrganizationDto;","39","import org.sonar.server.organization.TestOrganizationFlags;","62","  private PluginRepository pluginRepository = mock(PluginRepository.class);","63","  private MapSettings settings = new MapSettings();","64","  private TestOrganizationFlags organizationFlags = TestOrganizationFlags.standalone();","65","  private HomepageTypesImpl homepageTypes = new HomepageTypesImpl(settings.asConfig(), organizationFlags, db.getDbClient());","70","    new CurrentAction(userSessionRule, dbClient, defaultOrganizationProvider, new AvatarResolverImpl(), homepageTypes, pluginRepository, permissionService));","71","","72","  @Test","73","  public void return_homepage_when_set_to_MY_PROJECTS() {","74","    UserDto user = db.users().insertUser(u -> u.setHomepageType(\"MY_PROJECTS\"));","75","    userSessionRule.logIn(user);","76","","77","    CurrentWsResponse response = call();","78","","79","    assertThat(response.getHomepage())","80","      .extracting(CurrentWsResponse.Homepage::getType)","81","      .isEqualTo(CurrentWsResponse.HomepageType.MY_PROJECTS);","82","  }","97","  public void return_homepage_when_set_to_a_portfolio() {","98","    withGovernancePlugin();","111","  public void return_default_when_set_to_a_portfolio_but_no_rights_on_this_portfolio() {","112","    withGovernancePlugin();","121","      .isEqualTo(CurrentWsResponse.HomepageType.PROJECTS);","125","  public void return_homepage_when_set_to_an_application() {","126","    withGovernancePlugin();","139","  public void return_default_homepage_when_set_to_an_application_but_no_rights_on_this_application() {","140","    withGovernancePlugin();","149","      .isEqualTo(CurrentWsResponse.HomepageType.PROJECTS);","153","  public void return_homepage_when_set_to_a_project() {","166","  public void return_default_homepage_when_set_to_a_project_but_no_rights_on_this_project() {","175","      .isEqualTo(CurrentWsResponse.HomepageType.PROJECTS);","176","  }","177","","178","  @Test","179","  public void return_homepage_when_set_to_an_organization() {","180","    OrganizationDto organizationDto = db.organizations().insert();","181","    UserDto user = db.users().insertUser(u -> u.setHomepageType(\"ORGANIZATION\").setHomepageParameter(organizationDto.getUuid()));","182","    userSessionRule.logIn(user);","183","","184","    CurrentWsResponse response = call();","185","","186","    assertThat(response.getHomepage())","187","      .extracting(CurrentWsResponse.Homepage::getType, CurrentWsResponse.Homepage::getOrganization)","188","      .containsExactly(CurrentWsResponse.HomepageType.ORGANIZATION, organizationDto.getKey());","216","  public void fallback_when_user_homepage_organization_does_not_exist_in_db() {","217","    UserDto user = db.users().insertUser(u -> u.setHomepageType(\"ORGANIZATION\").setHomepageParameter(\"not-existing-organization-uuid\"));","218","    userSessionRule.logIn(user.getLogin());","219","","220","    CurrentWsResponse response = ws.newRequest().executeProtobuf(CurrentWsResponse.class);","221","","222","    assertThat(response.getHomepage()).isNotNull();","223","  }","224","","225","  @Test","226","  public void fallback_when_user_homepage_portfolio_does_not_exist_in_db() {","227","    withGovernancePlugin();","237","  public void fallback_when_user_homepage_application_does_not_exist_in_db() {","238","    withGovernancePlugin();","248","  public void fallback_when_user_homepage_application_and_governance_plugin_is_not_installed() {","249","    withoutGovernancePlugin();","260","  public void fallback_to_PROJECTS_when_on_SonarQube() {","269","  @Test","270","  public void fallback_to_MY_PROJECTS_when_on_SonarCloud() {","271","    onSonarCloud();","272","    UserDto user = db.users().insertUser(u -> u.setHomepageType(\"PROJECT\").setHomepageParameter(\"not-existing-project-uuid\"));","273","    userSessionRule.logIn(user.getLogin());","274","","275","    CurrentWsResponse response = ws.newRequest().executeProtobuf(CurrentWsResponse.class);","276","","277","    assertThat(response.getHomepage().getType().toString()).isEqualTo(\"MY_PROJECTS\");","278","  }","279","","284","  private void onSonarCloud() {","285","    settings.setProperty(\"sonar.sonarcloud.enabled\", true);","288","  private void withGovernancePlugin() {","289","    when(pluginRepository.hasPlugin(\"governance\")).thenReturn(true);","292","  private void withoutGovernancePlugin() {","293","    when(pluginRepository.hasPlugin(\"governance\")).thenReturn(false);"]}],"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/user\/ws\/HomepageTypesImplTest.java":[{"add":["23","import static org.assertj.core.api.Assertions.assertThat;","24","import static org.sonar.server.user.ws.HomepageTypes.Type.APPLICATION;","26","import static org.sonar.server.user.ws.HomepageTypes.Type.PORTFOLIO;","27","import static org.sonar.server.user.ws.HomepageTypes.Type.PORTFOLIOS;","33","  private HomepageTypesImpl underTest = new HomepageTypesImpl();","36","  public void types() {","37","    assertThat(underTest.getTypes()).containsExactlyInAnyOrder(PROJECT, PROJECTS, ISSUES, PORTFOLIOS, PORTFOLIO, APPLICATION);","41","  public void default_type() {"],"delete":["21","import org.junit.Rule;","23","import org.sonar.api.config.internal.MapSettings;","24","import org.sonar.db.DbTester;","25","import org.sonar.server.organization.TestOrganizationFlags;","27","import static org.assertj.core.api.Java6Assertions.assertThat;","29","import static org.sonar.server.user.ws.HomepageTypes.Type.MY_ISSUES;","30","import static org.sonar.server.user.ws.HomepageTypes.Type.MY_PROJECTS;","31","import static org.sonar.server.user.ws.HomepageTypes.Type.ORGANIZATION;","37","  @Rule","38","  public DbTester db = DbTester.create();","39","","40","  private MapSettings settings = new MapSettings();","41","  private TestOrganizationFlags organizationFlags = TestOrganizationFlags.standalone();","42","","43","  private HomepageTypesImpl underTest = new HomepageTypesImpl(settings.asConfig(), organizationFlags, db.getDbClient());","46","  public void types_on_sonarcloud_and_organization_disabled() {","47","    settings.setProperty(\"sonar.sonarcloud.enabled\", true);","48","    organizationFlags.setEnabled(false);","49","","50","    underTest.start();","51","","52","    assertThat(underTest.getTypes()).containsExactlyInAnyOrder(PROJECT, MY_PROJECTS, MY_ISSUES);","56","  public void types_on_sonarcloud_and_organization_enabled() {","57","    settings.setProperty(\"sonar.sonarcloud.enabled\", true);","58","    organizationFlags.setEnabled(true);","59","","60","    underTest.start();","61","","62","    assertThat(underTest.getTypes()).containsExactlyInAnyOrder(PROJECT, MY_PROJECTS, MY_ISSUES, ORGANIZATION);","63","  }","64","","65","  @Test","66","  public void types_on_sonarqube_and_organization_disabled() {","67","    settings.setProperty(\"sonar.sonarcloud.enabled\", false);","68","    organizationFlags.setEnabled(false);","69","","70","    underTest.start();","71","","72","    assertThat(underTest.getTypes()).containsExactlyInAnyOrder(PROJECT, PROJECTS, ISSUES);","73","  }","74","","75","  @Test","76","  public void types_on_sonarqube_and_organization_enabled() {","77","    settings.setProperty(\"sonar.sonarcloud.enabled\", false);","78","    organizationFlags.setEnabled(true);","79","","80","    underTest.start();","81","","82","    assertThat(underTest.getTypes()).containsExactlyInAnyOrder(PROJECT, PROJECTS, ISSUES, ORGANIZATION);","83","  }","84","","85","  @Test","86","  public void default_type_on_sonarcloud() {","87","    settings.setProperty(\"sonar.sonarcloud.enabled\", true);","88","","89","    underTest.start();","90","","91","    assertThat(underTest.getDefaultType()).isEqualTo(MY_PROJECTS);","92","  }","93","","94","  @Test","95","  public void default_type_on_sonarqube() {","96","    settings.setProperty(\"sonar.sonarcloud.enabled\", false);","97","","98","    underTest.start();","99",""]}],"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/user\/ws\/SetHomepageActionTest.java":[{"add":["65","    assertThat(action.params()).hasSize(3);","124","  public void set_issues_homepage() {","141","  public void set_projects_homepage() {","217","      .setParam(PARAM_TYPE, \"PROJECTS\")","246","      .expectMessage(\"Value of parameter 'type' (PIPO) must be one of: [PROJECT, PROJECTS, ISSUES, PORTFOLIOS, PORTFOLIO, APPLICATION]\");"],"delete":["65","    assertThat(action.params()).hasSize(4);","80","","81","    WebService.Param organizationParam = action.param(\"organization\");","82","    assertThat(organizationParam.isRequired()).isFalse();","83","    assertThat(organizationParam.description()).isEqualTo(\"Organization key. It should only be used when parameter 'type' is set to 'ORGANIZATION'\");","84","    assertThat(organizationParam.since()).isEqualTo(\"7.1\");","129","  public void set_organization_homepage() {","130","    OrganizationDto organization = db.organizations().insert();","131","","132","    UserDto user = db.users().insertUser();","133","    userSession.logIn(user);","134","","135","    ws.newRequest()","136","      .setMethod(\"POST\")","137","      .setParam(PARAM_TYPE, \"ORGANIZATION\")","138","      .setParam(\"organization\", organization.getKey())","139","      .execute();","140","","141","    UserDto actual = db.getDbClient().userDao().selectByLogin(db.getSession(), user.getLogin());","142","    assertThat(actual).isNotNull();","143","    assertThat(actual.getHomepageType()).isEqualTo(\"ORGANIZATION\");","144","    assertThat(actual.getHomepageParameter()).isEqualTo(organization.getUuid());","145","  }","146","","147","  @Test","148","  public void set_SonarCloud_my_issues_homepage() {","149","    UserDto user = db.users().insertUser();","150","    userSession.logIn(user);","151","","152","    ws.newRequest()","153","      .setMethod(\"POST\")","154","      .setParam(PARAM_TYPE, \"MY_ISSUES\")","155","      .execute();","156","","157","    UserDto actual = db.getDbClient().userDao().selectByLogin(db.getSession(), user.getLogin());","158","    assertThat(actual).isNotNull();","159","    assertThat(actual.getHomepageType()).isEqualTo(\"MY_ISSUES\");","160","    assertThat(actual.getHomepageParameter()).isNullOrEmpty();","161","  }","162","","163","  @Test","164","  public void set_SonarQube_issues_homepage() {","181","  public void set_SonarCloud_my_projects_homepage() {","182","    UserDto user = db.users().insertUser();","183","    userSession.logIn(user);","184","","185","    ws.newRequest()","186","      .setMethod(\"POST\")","187","      .setParam(PARAM_TYPE, \"MY_PROJECTS\")","188","      .execute();","189","","190","    UserDto actual = db.getDbClient().userDao().selectByLogin(db.getSession(), user.getLogin());","191","    assertThat(actual).isNotNull();","192","    assertThat(actual.getHomepageType()).isEqualTo(\"MY_PROJECTS\");","193","    assertThat(actual.getHomepageParameter()).isNullOrEmpty();","194","  }","195","","196","  @Test","197","  public void set_SonarQube_projects_homepage() {","273","      .setParam(PARAM_TYPE, \"MY_PROJECTS\")","296","  public void fail_when_missing_organization_id_when_requesting_organization_type() {","297","    UserDto user = db.users().insertUser();","298","    userSession.logIn(user);","299","","300","    expectedException.expect(IllegalArgumentException.class);","301","    expectedException.expectMessage(\"Type ORGANIZATION requires a parameter\");","302","","303","    ws.newRequest()","304","      .setMethod(\"POST\")","305","      .setParam(PARAM_TYPE, \"ORGANIZATION\")","306","      .execute();","307","  }","308","","309","  @Test","316","      .expectMessage(\"Value of parameter 'type' (PIPO) must be one of: [PROJECT, PROJECTS, ISSUES, PORTFOLIOS, PORTFOLIO, APPLICATION, MY_PROJECTS, MY_ISSUES, ORGANIZATION]\");"]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/user\/ws\/HomepageTypes.java":[{"add":["26","    PROJECT, PROJECTS, ISSUES, PORTFOLIOS, PORTFOLIO, APPLICATION"],"delete":["26","    PROJECT,","27","    \/**","28","     * These types are only available on SonarQube","29","     *\/","30","    PROJECTS, ISSUES, PORTFOLIOS, PORTFOLIO, APPLICATION,","31","    \/**","32","     * These types are only available on SonarCloud","33","     *\/","34","    MY_PROJECTS, MY_ISSUES,","35","    \/**","36","     * This type is only available when organizations are enabled","37","     *\/","38","    ORGANIZATION"]}],"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/HeaderMeta.tsx":[{"add":["66","        {isLoggedIn(currentUser) && currentPage !== undefined && !isPullRequest(branchLike) && ("],"delete":["66","        {isLoggedIn(currentUser) && isABranch && currentPage !== undefined && ("]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/user\/ws\/HomepageTypesImpl.java":[{"add":["22","import java.util.stream.Collectors;","23","import java.util.stream.Stream;","28","public class HomepageTypesImpl implements HomepageTypes {","32","  public HomepageTypesImpl() {","33","    types = Stream.of(HomepageTypes.Type.values()).collect(Collectors.toList());","44","    return PROJECTS;"],"delete":["21","import java.util.EnumSet;","23","import org.sonar.api.Startable;","24","import org.sonar.api.config.Configuration;","25","import org.sonar.db.DbClient;","26","import org.sonar.db.DbSession;","27","import org.sonar.process.ProcessProperties;","28","import org.sonar.server.organization.OrganizationFlags;","31","import static java.util.Arrays.stream;","32","import static java.util.stream.Collectors.toList;","33","import static org.sonar.server.user.ws.HomepageTypes.Type.ISSUES;","34","import static org.sonar.server.user.ws.HomepageTypes.Type.MY_ISSUES;","35","import static org.sonar.server.user.ws.HomepageTypes.Type.MY_PROJECTS;","36","import static org.sonar.server.user.ws.HomepageTypes.Type.ORGANIZATION;","37","import static org.sonar.server.user.ws.HomepageTypes.Type.PROJECT;","39","import static org.sonar.server.user.ws.HomepageTypes.Type.values;","41","public class HomepageTypesImpl implements HomepageTypes, Startable {","42","","43","  private static final EnumSet<Type> ON_SONARQUBE = EnumSet.of(PROJECTS, PROJECT, ISSUES, ORGANIZATION);","44","  private static final EnumSet<Type> ON_SONARCLOUD = EnumSet.of(PROJECT, MY_PROJECTS, MY_ISSUES, ORGANIZATION);","45","","46","  private final Configuration configuration;","47","  private final OrganizationFlags organizationFlags;","48","  private final DbClient dbClient;","52","  public HomepageTypesImpl(Configuration configuration, OrganizationFlags organizationFlags, DbClient dbClient) {","53","    this.configuration = configuration;","54","    this.organizationFlags = organizationFlags;","55","    this.dbClient = dbClient;","66","    return isOnSonarCloud() ? MY_PROJECTS : PROJECTS;","69","  @Override","70","  public void start() {","71","    try (DbSession dbSession = dbClient.openSession(false)) {","72","      boolean isOnSonarCloud = isOnSonarCloud();","73","      boolean isOrganizationEnabled = isOrganizationEnabled(dbSession);","74","      this.types = stream(values())","75","        .filter(type -> (isOnSonarCloud && ON_SONARCLOUD.contains(type)) || (!isOnSonarCloud && ON_SONARQUBE.contains(type)))","76","        .filter(type -> isOrganizationEnabled || !(type.equals(ORGANIZATION)))","77","        .collect(toList());","78","    }","79","  }","80","","81","  private boolean isOrganizationEnabled(DbSession dbSession) {","82","    return organizationFlags.isEnabled(dbSession);","83","  }","84","","85","  private Boolean isOnSonarCloud() {","86","    return configuration.getBoolean(ProcessProperties.Property.SONARCLOUD_ENABLED.getKey()).orElse(false);","87","  }","88","","89","  @Override","90","  public void stop() {","91","    \/\/ Nothing to do","92","  }"]}],"sonar-ws\/src\/main\/protobuf\/ws-users.proto":[{"add":["120","    PROJECTS = 2;","121","    ISSUES = 3;","122","    PORTFOLIO = 4;","123","    PORTFOLIOS = 5;","124","    APPLICATION = 6;","130","    optional string branch = 3;"],"delete":["120","    ORGANIZATION = 2;","121","    MY_PROJECTS = 3;","122","    MY_ISSUES = 4;","123","    PROJECTS = 5;","124","    ISSUES = 6;","125","    PORTFOLIO = 7;","126","    PORTFOLIOS = 8;","127","    APPLICATION = 9;","133","    optional string organization = 3;","134","    optional string branch = 4;"]}],"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/user\/ws\/CurrentActionTest.java":[{"add":["31","import org.sonar.core.platform.PlatformEditionProvider;","63","  private PlatformEditionProvider platformEditionProvider = mock(PlatformEditionProvider.class);","64","  private HomepageTypesImpl homepageTypes = new HomepageTypesImpl();","69","    new CurrentAction(userSession, db.getDbClient(), TestDefaultOrganizationProvider.from(db), new AvatarResolverImpl(), homepageTypes, platformEditionProvider,","70","      permissionService));"],"delete":["25","import org.sonar.api.config.internal.MapSettings;","32","import org.sonar.core.platform.PluginRepository;","38","import org.sonar.server.organization.TestOrganizationFlags;","65","  private PluginRepository pluginRepository = mock(PluginRepository.class);","66","  private MapSettings settings = new MapSettings();","67","  private TestOrganizationFlags organizationFlags = TestOrganizationFlags.standalone();","68","  private HomepageTypesImpl homepageTypes = new HomepageTypesImpl(settings.asConfig(), organizationFlags, db.getDbClient());","73","    new CurrentAction(userSession, db.getDbClient(), TestDefaultOrganizationProvider.from(db), new AvatarResolverImpl(), homepageTypes, pluginRepository, permissionService));"]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/user\/ws\/CurrentAction.java":[{"add":["28","import org.sonar.core.platform.EditionProvider;","29","import org.sonar.core.platform.PlatformEditionProvider;","56","import static org.sonarqube.ws.Users.CurrentWsResponse.HomepageType.APPLICATION;","57","import static org.sonarqube.ws.Users.CurrentWsResponse.HomepageType.PORTFOLIO;","58","import static org.sonarqube.ws.Users.CurrentWsResponse.HomepageType.PROJECT;","68","  private final PlatformEditionProvider editionProvider;","72","    AvatarResolver avatarResolver, HomepageTypes homepageTypes, PlatformEditionProvider editionProvider, PermissionService permissionService) {","78","    this.editionProvider = editionProvider;","103","        .setIsLoggedIn(false)","104","        .setPermissions(Permissions.newBuilder().addAllGlobal(getGlobalPermissions()).build())","105","        .build(),","200","    return !componentOptional.isPresent() || !hasValidEdition()","204","  private boolean hasValidEdition() {","205","    Optional<EditionProvider.Edition> edition = editionProvider.get();","206","    if (!edition.isPresent()) {","207","      return false;","209","    switch (edition.get()) {","210","      case ENTERPRISE:","211","      case DATACENTER:","212","        return true;","213","      default:","214","        return false;","215","    }"],"delete":["28","import org.sonar.core.platform.PluginRepository;","34","import org.sonar.db.organization.OrganizationDto;","54","import static org.sonarqube.ws.Users.CurrentWsResponse.HomepageType.APPLICATION;","55","import static org.sonarqube.ws.Users.CurrentWsResponse.HomepageType.ORGANIZATION;","56","import static org.sonarqube.ws.Users.CurrentWsResponse.HomepageType.PORTFOLIO;","57","import static org.sonarqube.ws.Users.CurrentWsResponse.HomepageType.PROJECT;","64","  private static final String GOVERNANCE_PLUGIN_KEY = \"governance\";","65","","71","  private final PluginRepository pluginRepository;","75","    AvatarResolver avatarResolver, HomepageTypes homepageTypes, PluginRepository pluginRepository, PermissionService permissionService) {","81","    this.pluginRepository = pluginRepository;","106","          .setIsLoggedIn(false)","107","          .setPermissions(Permissions.newBuilder().addAllGlobal(getGlobalPermissions()).build())","108","          .build(),","162","    if (ORGANIZATION.toString().equals(user.getHomepageType())) {","163","      return organizationHomepage(dbSession, user);","164","    }","165","","207","    return !componentOptional.isPresent() || !pluginRepository.hasPlugin(GOVERNANCE_PLUGIN_KEY)","211","  private Optional<CurrentWsResponse.Homepage> organizationHomepage(DbSession dbSession, UserDto user) {","212","    Optional<OrganizationDto> organizationOptional = dbClient.organizationDao().selectByUuid(dbSession, of(user.getHomepageParameter()).orElse(EMPTY));","213","    if (!organizationOptional.isPresent()) {","214","      cleanUserHomepageInDb(dbSession, user);","215","      return empty();","217","","218","    return of(CurrentWsResponse.Homepage.newBuilder()","219","      .setType(CurrentWsResponse.HomepageType.valueOf(user.getHomepageType()))","220","      .setOrganization(organizationOptional.get().getKey())","221","      .build());"]}],"server\/sonar-web\/src\/main\/js\/app\/components\/nav\/component\/__tests__\/__snapshots__\/HeaderMeta-test.tsx.snap":[{"add":["45","exports[`should render correctly for a portfolio 1`] = `","46","<Fragment>","47","  <div","48","    className=\"display-flex-center flex-0 small\"","49","  >","50","    <span","51","      className=\"header-meta-warnings\"","52","    >","53","      <ComponentNavWarnings","54","        warnings={","55","          Array [","56","            \"ERROR_1\",","57","            \"ERROR_2\",","58","          ]","59","        }","60","      \/>","61","    <\/span>","62","    <Connect(HomePageSelect)","63","      className=\"spacer-left\"","64","      currentPage={","65","        Object {","66","          \"component\": \"foo\",","67","          \"type\": \"PORTFOLIO\",","68","        }","69","      }","70","    \/>","71","  <\/div>","72","<\/Fragment>","73","`;","74",""],"delete":[]}]}},"856a11e8266edf43d70d3781d30ac017435685bb":{"changes":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/UserPermissionDaoTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/permission\/ws\/UsersAction.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/permission\/ws\/UsersActionTest.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/PermissionQueryTest.java":"MODIFY","server\/sonar-server\/src\/main\/resources\/org\/sonar\/server\/permission\/ws\/users-example.json":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/permission\/UserPermissionMapper.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/permission\/ws\/GroupsAction.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/permission\/UserPermissionDao.java":"MODIFY","server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/permission\/UserPermissionMapper.xml":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/permission\/PermissionQuery.java":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/UserPermissionDaoTest.java":[{"add":["263","  public void selectUserIdsByQueryAndScope_with_organization_scope() {","264","    OrganizationDto org1 = db.organizations().insert();","265","    OrganizationDto org2 = db.organizations().insert();","266","    UserDto user1 = insertUser(u -> u.setLogin(\"login1\").setName(\"Marius\").setEmail(\"email1@email.com\"), org1, org2);","267","    UserDto user2 = insertUser(u -> u.setLogin(\"login2\").setName(\"Marie\").setEmail(\"email2@email.com\"), org1, org2);","268","    ComponentDto project1 = db.components().insertPrivateProject(org1);","269","    ComponentDto project2 = db.components().insertPrivateProject(org2);","270","    addProjectPermission(org1, USER, user1, project1);","271","    addGlobalPermission(org1, PROVISIONING, user1);","272","    addProjectPermission(org2, ISSUE_ADMIN, user2, project2);","273","    PermissionQuery query = PermissionQuery.builder().setOrganizationUuid(org1.getUuid()).build();","274","","275","    List<Integer> result = underTest.selectUserIdsByQueryAndScope(dbSession, query);","276","","277","    \/\/ users with any kind of global permissions are first on the list and then sorted by name","278","    assertThat(result).containsExactly(user1.getId(), user2.getId());","279","  }","280","","281","  @Test","282","  public void selectUserIdsByQueryAndScope_with_project_scope() {","283","    OrganizationDto org1 = db.organizations().insert();","284","    OrganizationDto org2 = db.organizations().insert();","285","    UserDto user1 = insertUser(u -> u.setLogin(\"login1\").setName(\"Marius\").setEmail(\"email1@email.com\"), org1, org2);","286","    UserDto user2 = insertUser(u -> u.setLogin(\"login2\").setName(\"Marie\").setEmail(\"email2@email.com\"), org1, org2);","287","    ComponentDto project1 = db.components().insertPrivateProject(org1);","288","    ComponentDto project2 = db.components().insertPrivateProject(org2);","289","    addProjectPermission(org1, USER, user1, project1);","290","    addGlobalPermission(org1, PROVISIONING, user1);","291","    addProjectPermission(org2, ISSUE_ADMIN, user2, project2);","292","    PermissionQuery query = PermissionQuery.builder()","293","      .setOrganizationUuid(org1.getUuid())","294","      .setComponentUuid(project1.uuid())","295","      .setComponentId(project1.getId())","296","      .build();","297","","298","    List<Integer> result = underTest.selectUserIdsByQueryAndScope(dbSession, query);","299","","300","    \/\/ users with any this projects permissions are first on the list and then sorted by name","301","    assertThat(result).containsExactly(user1.getId(), user2.getId());","302","  }","303","","304","  @Test"],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/permission\/ws\/UsersAction.java":[{"add":["133","    project.ifPresent(projectId -> {","134","      permissionQuery.setComponentUuid(projectId.getUuid());","135","      permissionQuery.setComponentId(projectId.getId());","136","    });","172","    List<Integer> orderedIds = dbClient.userPermissionDao().selectUserIdsByQueryAndScope(dbSession, query);","181","    PermissionQuery.Builder queryBuilder = PermissionQuery.builder()","183","      .withAtLeastOnePermission();","184","    project.ifPresent(p -> queryBuilder.setComponentUuid(p.getUuid()));","185","    return dbClient.userPermissionDao().selectUserPermissionsByQuery(dbSession, queryBuilder.build(), userIds);"],"delete":["133","    project.ifPresent(projectId -> permissionQuery.setComponentUuid(projectId.getUuid()));","169","    List<Integer> orderedIds = dbClient.userPermissionDao().selectUserIdsByQuery(dbSession, query);","178","    PermissionQuery query = PermissionQuery.builder()","180","      .setComponentUuid(project.map(ProjectId::getUuid).orElse(null))","181","      .withAtLeastOnePermission()","182","      .build();","183","    return dbClient.userPermissionDao().selectUserPermissionsByQuery(dbSession, query, userIds);"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/permission\/ws\/UsersActionTest.java":[{"add":["78","    UserDto user2 = db.users().insertUser(newUserDto().setLogin(\"adam.west\").setName(\"Adam West\").setEmail(\"adamwest@adamwest.com\"));","80","    UserDto user3 = db.users().insertUser(newUserDto().setLogin(\"george.orwell\").setName(\"George Orwell\").setEmail(\"george.orwell@1984.net\"));","81","    db.organizations().addMember(db.getDefaultOrganization(), user3);","85","    db.users().insertPermissionOnUser(user3, SCAN);"],"delete":["78","    UserDto user2 = db.users().insertUser(newUserDto().setLogin(\"george.orwell\").setName(\"George Orwell\").setEmail(\"george.orwell@1984.net\"));","83","    db.users().insertPermissionOnUser(user2, SCAN);"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/permission\/PermissionQueryTest.java":[{"add":["36","      .setComponentId(1234L)","43","    assertThat(quey.getComponentId()).isEqualTo(1234L);"],"delete":[]}],"server\/sonar-server\/src\/main\/resources\/org\/sonar\/server\/permission\/ws\/users-example.json":[{"add":["4","    \"total\": 3","20","    },","21","    {","22","      \"login\": \"adam.west\",","23","      \"name\": \"Adam West\",","24","      \"email\": \"adamwest@adamwest.com\",","25","      \"avatar\": \"9b55aba24cc5ee533294334bd20abb34\",","26","      \"permissions\": []"],"delete":["4","    \"total\": 2"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/permission\/UserPermissionMapper.java":[{"add":["33","   * Fetch user ids based on permission query and only in a specific scope (global permissions only, organization permissions only or project permissions only)","34","   *\/","35","  List<Integer> selectUserIdsByQueryAndScope(@Param(\"query\") PermissionQuery query);","36","","37","  \/**"],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/permission\/ws\/GroupsAction.java":[{"add":["127","      permissionQuery.setComponentId(project.get().getId());"],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/permission\/UserPermissionDao.java":[{"add":["53","    return paginate(mapper(dbSession).selectUserIdsByQuery(query), query);","54","  }","55","","56","  public List<Integer> selectUserIdsByQueryAndScope(DbSession dbSession, PermissionQuery query) {","57","    return paginate(mapper(dbSession).selectUserIdsByQueryAndScope(query), query);","58","  }","59","","60","","61","  private static List<Integer> paginate(List<Integer> results, PermissionQuery query) {","62","    return results"],"delete":["53","    return mapper(dbSession).selectUserIdsByQuery(query)"]}],"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/permission\/UserPermissionMapper.xml":[{"add":["29","  <select id=\"selectUserIdsByQueryAndScope\" parameterType=\"map\" resultType=\"int\">","30","    select","31","    u.id, lower(u.name)","32","    from users u","33","    left join user_roles ur on ur.user_id = u.id and ur.organization_uuid=#{query.organizationUuid,jdbcType=VARCHAR}","34","    <choose>","35","      <when test=\"query.componentId == null\">","36","        and ur.resource_id is null","37","      <\/when>","38","      <otherwise>","39","        and ur.resource_id = #{query.componentId,jdbcType=BIGINT}","40","      <\/otherwise>","41","    <\/choose>","42","    left join projects p on ur.resource_id = p.id","43","    inner join organization_members om on u.id=om.user_id and om.organization_uuid=#{query.organizationUuid,jdbcType=VARCHAR}","44","    <where>","45","      <include refid=\"sqlQueryFilters\" \/>","46","    <\/where>","47","    group by u.id, lower(u.name)","48","    order by case when (count(distinct ur.role) > 0) then 1 else 2 end asc, lower(u.name) asc","49","  <\/select>","50",""],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/permission\/PermissionQuery.java":[{"add":["50","  private final Long componentId;","70","    this.componentId = builder.componentId;","104","  public Long getComponentId() {","105","    return componentId;","106","  }","107","","108","  @CheckForNull","139","    private Long componentId;","167","    public Builder setComponentId(Long componentId) {","168","      this.componentId = componentId;","169","      return this;","170","    }","171",""],"delete":[]}]}},"96f2fc0ce3ef6440fda4d34f46b2ebb3b6f0381f":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/__tests__\/__snapshots__\/ActivationFormModal-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/ActivationFormModal.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/__tests__\/__snapshots__\/ActivationFormModal-test.tsx.snap":[{"add":["19","      className=\"modal-body\""],"delete":["19","      className=\"modal-body modal-container\""]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/ActivationFormModal.tsx":[{"add":["19","import * as classNames from 'classnames';","162","          <div className={classNames('modal-body', { 'modal-container': params.length > 0 })}>"],"delete":["161","          <div className=\"modal-body modal-container\">"]}]}},"f86a1094588e4e47b3abf612891af0431653cd0e":{"changes":{"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/source\/DbLineHashVersion.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/source\/DbLineHashVersionTest.java":"MODIFY"},"diff":{"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/source\/DbLineHashVersion.java":[{"add":["23","import javax.annotation.CheckForNull;","24","import org.sonar.ce.task.projectanalysis.analysis.AnalysisMetadataHolder;","26","import org.sonar.ce.task.projectanalysis.component.ReferenceBranchComponentUuids;","34","  private final AnalysisMetadataHolder analysisMetadataHolder;","35","  private final ReferenceBranchComponentUuids referenceBranchComponentUuids;","37","  public DbLineHashVersion(DbClient dbClient, AnalysisMetadataHolder analysisMetadataHolder, ReferenceBranchComponentUuids referenceBranchComponentUuids) {","39","    this.analysisMetadataHolder = analysisMetadataHolder;","40","    this.referenceBranchComponentUuids = referenceBranchComponentUuids;","52","  @CheckForNull","55","      String referenceComponentUuid = getReferenceComponentUuid(component);","56","      if (referenceComponentUuid != null) {","57","        return dbClient.fileSourceDao().selectLineHashesVersion(session, referenceComponentUuid);","58","      } else {","59","        return null;","60","      }","61","    }","62","  }","63","","64","  @CheckForNull","65","  private String getReferenceComponentUuid(Component component) {","66","    if (analysisMetadataHolder.isPullRequest()) {","67","      return referenceBranchComponentUuids.getComponentUuid(component.getDbKey());","68","    } else {","69","      return component.getUuid();"],"delete":["32","  public DbLineHashVersion(DbClient dbClient) {","47","      return dbClient.fileSourceDao().selectLineHashesVersion(session, component.getUuid());"]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/source\/DbLineHashVersionTest.java":[{"add":["23","import org.sonar.ce.task.projectanalysis.analysis.AnalysisMetadataHolder;","24","import org.sonar.ce.task.projectanalysis.analysis.AnalysisMetadataHolderRule;","26","import org.sonar.ce.task.projectanalysis.component.ReferenceBranchComponentUuids;","34","import static org.mockito.Mockito.mock;","35","import static org.mockito.Mockito.verify;","36","import static org.mockito.Mockito.when;","42","  private AnalysisMetadataHolder analysisMetadataHolder = mock(AnalysisMetadataHolder.class);","43","  private ReferenceBranchComponentUuids referenceBranchComponentUuids = mock(ReferenceBranchComponentUuids.class);","44","  private DbLineHashVersion underTest = new DbLineHashVersion(db.getDbClient(), analysisMetadataHolder, referenceBranchComponentUuids);","63","  public void hasLineHashWithSignificantCode_should_return_false_if_pr_reference_doesnt_have_file() {","64","    when(analysisMetadataHolder.isPullRequest()).thenReturn(true);","65","    Component component = ReportComponent.builder(Component.Type.FILE, 1).setKey(\"key\").setUuid(\"123\").build();","66","    assertThat(underTest.hasLineHashesWithSignificantCode(component)).isFalse();","67","","68","    verify(analysisMetadataHolder).isPullRequest();","69","    verify(referenceBranchComponentUuids).getComponentUuid(component.getDbKey());","70","  }","71","","72","  @Test","73","  public void hasLineHashWithSignificantCode_should_return_false_if_pr_reference_has_file_but_it_is_not_in_db() {","74","    ComponentDto project = db.components().insertPublicProject();","75","    ComponentDto file = db.components().insertComponent(ComponentTesting.newFileDto(project));","76","","77","    when(analysisMetadataHolder.isPullRequest()).thenReturn(true);","78","    when(referenceBranchComponentUuids.getComponentUuid(\"key\")).thenReturn(file.uuid());","79","","80","    Component component = ReportComponent.builder(Component.Type.FILE, 1).setKey(\"key\").setUuid(\"123\").build();","81","    assertThat(underTest.hasLineHashesWithSignificantCode(component)).isFalse();","82","","83","    verify(analysisMetadataHolder).isPullRequest();","84","    verify(referenceBranchComponentUuids).getComponentUuid(component.getDbKey());","85","  }","86","","87","  @Test","88","  public void hasLineHashWithSignificantCode_should_return_true_if_pr_reference_has_file_and_it_is_in_db() {","89","    ComponentDto project = db.components().insertPublicProject();","90","    ComponentDto file = db.components().insertComponent(ComponentTesting.newFileDto(project));","91","    db.fileSources().insertFileSource(file, dto -> dto.setLineHashesVersion(LineHashVersion.WITH_SIGNIFICANT_CODE.getDbValue()));","92","","93","    when(analysisMetadataHolder.isPullRequest()).thenReturn(true);","94","    when(referenceBranchComponentUuids.getComponentUuid(\"key\")).thenReturn(file.uuid());","95","","96","    Component component = ReportComponent.builder(Component.Type.FILE, 1).setKey(\"key\").setUuid(\"123\").build();","97","    assertThat(underTest.hasLineHashesWithSignificantCode(component)).isTrue();","98","","99","    verify(analysisMetadataHolder).isPullRequest();","100","    verify(referenceBranchComponentUuids).getComponentUuid(component.getDbKey());","101","  }","102","","103","  @Test"],"delete":["36","  private DbLineHashVersion underTest = new DbLineHashVersion(db.getDbClient());"]}]}},"5d3c140d97e3716cd9e24281983fcaac15006986":{"changes":{"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/component\/ComponentKeyUpdaterDao.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/component\/ComponentKeyUpdaterDaoTest.java":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/component\/ComponentKeyUpdaterDao.java":[{"add":["112","    checkNewNameOfAllModules(modules, stringToReplace, replacementString, mapper);","114","    \/\/ add branches (no check should be done as branch keys cannot be changed by the user)"],"delete":["113","    \/\/ add branches","124","    checkNewNameOfAllModules(modules, stringToReplace, replacementString, mapper);"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/component\/ComponentKeyUpdaterDaoTest.java":[{"add":["164","  public void bulk_updateKey_on_branch_containing_slash() {","165","    ComponentDto project = db.components().insertMainBranch();","166","    ComponentDto branch = db.components().insertProjectBranch(project, b -> b.setKey(\"branch\/with\/slash\"));","167","    String newKey = \"newKey\";","168","","169","    underTest.bulkUpdateKey(dbSession, project.uuid(), project.getKey(), newKey);","170","","171","    assertThat(dbClient.componentDao().selectAllComponentsFromProjectKey(dbSession, newKey)).hasSize(1);","172","    assertThat(dbClient.componentDao().selectAllComponentsFromProjectKey(dbSession, ComponentDto.generateBranchKey(newKey, branch.getBranch()))).hasSize(1);","173","  }","174","","175","  @Test"],"delete":[]}]}},"1f600ed00be3f7c8dec2095ee89753d72ce5dc16":{"changes":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/AbstractProjectOrModule.java":"MODIFY"},"diff":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/fs\/internal\/AbstractProjectOrModule.java":[{"add":["97","        Files.createDirectories(workingDir);"],"delete":[]}]}},"83a1a2b70b11cd2ccee93216851fadc49f09111d":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/forms\/AddGraphMetric.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/projectActivity\/components\/forms\/AddGraphMetric.js":[{"add":["62","          ['DATA', 'DISTRIB'].includes(metric.type) ||"],"delete":[]}]}},"355b4aaa6a1d177f8c3209e95af203c0b46032fd":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/test\/ws\/ListActionTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/test\/ws\/ListAction.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/test\/ws\/ListActionTest.java":[{"add":["73","  public DbTester db = DbTester.create();","94","  public void list_tests() throws Exception {","116","  public void list_tests_by_test_uuid() throws Exception {","128","  public void list_tests_by_test_file_uuid() throws Exception {","143","  public void list_tests_by_test_file_key() throws Exception {","144","    userSessionRule.addProjectUuidPermissions(CODEVIEWER, project.uuid());","158","  public void list_tests_by_source_file_uuid_and_line_number() throws Exception {","173","  public void list_tests_by_source_file_key_and_line_number() throws Exception {","188","  public void tests_are_paginated() throws Exception {","255","    call(ws.newRequest().setParam(TEST_ID, \"unknown\"));","256","  }","257","","258","  @Test","259","  public void fail_when_test_file_id_is_unknown() throws Exception {","260","    expectedException.expect(NotFoundException.class);","261","    call(ws.newRequest().setParam(TEST_FILE_ID, \"unknown\"));","262","  }","263","","264","  @Test","265","  public void fail_when_test_file_key_is_unknown() throws Exception {","266","    expectedException.expect(NotFoundException.class);","267","    call(ws.newRequest().setParam(TEST_FILE_ID, \"unknown\"));","268","  }","269","","270","  @Test","271","  public void fail_when_source_file_id_is_unknown() throws Exception {","272","    expectedException.expect(NotFoundException.class);","273","    call(ws.newRequest().setParam(SOURCE_FILE_ID, \"unknown\").setParam(SOURCE_FILE_LINE_NUMBER, \"10\"));","274","  }","275","","276","  @Test","277","  public void fail_when_source_file_key_is_unknown() throws Exception {","278","    expectedException.expect(NotFoundException.class);","279","    call(ws.newRequest().setParam(SOURCE_FILE_KEY, \"unknown\").setParam(SOURCE_FILE_LINE_NUMBER, \"10\"));"],"delete":["29","import org.sonar.api.web.UserRole;","74","  public DbTester db = DbTester.create(System2.INSTANCE);","95","  public void return_test() throws Exception {","117","  public void return_tests_based_on_test_uuid() throws Exception {","129","  public void return_tests_based_on_test_file_uuid() throws Exception {","144","  public void return_tests_based_on_test_file_key() throws Exception {","145","    userSessionRule.addComponentPermission(UserRole.CODEVIEWER, project.key(), testFile.key());","159","  public void return_tests_based_on_source_file_uuid_and_line_number() throws Exception {","174","  public void return_tests_based_on_source_file_key_and_line_number() throws Exception {","189","  public void return_pagination() throws Exception {","255","    userSessionRule.addProjectUuidPermissions(USER, project.uuid());","256","    DbFileSources.Test test = newTest(mainFile, 10).build();","257","    insertTests(testFile, test);","258","","260","    expectedException.expectMessage(\"Test with id 'unknown-test-uuid' is not found\");","261","    call(ws.newRequest().setParam(TEST_ID, \"unknown-test-uuid\"));"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/test\/ws\/ListAction.java":[{"add":["230","    userSession.checkComponentUuidPermission(UserRole.CODEVIEWER, testFile.projectUuid());","246","    ComponentDto component = componentFinder.getByUuid(dbSession, componentUuid);"],"delete":["229","    userSession.checkComponentPermission(UserRole.CODEVIEWER, testFileKey);","231","","247","    ComponentDto component = dbClient.componentDao().selectOrFailByUuid(dbSession, componentUuid);"]}]}},"619214a968a6887d14da7f3eee66ecaba85145ee":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ce\/ws\/ActivityAction.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ce\/ws\/ActivityAction.java":[{"add":["75","  private static final String[] POSSIBLE_QUALIFIERS = new String[] {Qualifiers.PROJECT, Qualifiers.APP, Qualifiers.VIEW};"],"delete":["75","  private static final String[] POSSIBLE_QUALIFIERS = new String[] {Qualifiers.PROJECT, Qualifiers.APP, Qualifiers.VIEW, \"DEV\", Qualifiers.MODULE};"]}]}},"c22e7f7e57a85b5e11dd071ab681eca650bbe477":{"changes":{"it\/it-tests\/src\/test\/resources\/issue\/IssueFilterTest\/with-many-rules.xml":"ADD","it\/it-tests\/src\/test\/java\/util\/ItUtils.java":"MODIFY","it\/it-tests\/src\/test\/resources\/issue\/IssueFilterOnCommonRulesTest\/xoo-common-rules-profile.xml":"ADD","it\/it-tests\/src\/test\/java\/it\/issue\/IssueFilterTest.java":"ADD","it\/it-tests\/src\/test\/java\/it\/Category2Suite.java":"MODIFY","it\/it-tests\/src\/test\/java\/it\/issue\/IssueFilterOnCommonRulesTest.java":"ADD"},"diff":{"it\/it-tests\/src\/test\/resources\/issue\/IssueFilterTest\/with-many-rules.xml":[{"add":[],"delete":[]}],"it\/it-tests\/src\/test\/java\/util\/ItUtils.java":[{"add":["216","  public static void setServerProperties(Orchestrator orchestrator, @Nullable String componentKey, String... properties) {","217","    for (int i = 0; i < properties.length; i += 2) {","218","      setServerProperty(orchestrator, componentKey, properties[i], properties[i + 1]);","219","    }","220","  }","221",""],"delete":[]}],"it\/it-tests\/src\/test\/resources\/issue\/IssueFilterOnCommonRulesTest\/xoo-common-rules-profile.xml":[{"add":[],"delete":[]}],"it\/it-tests\/src\/test\/java\/it\/issue\/IssueFilterTest.java":[{"add":[],"delete":[]}],"it\/it-tests\/src\/test\/java\/it\/Category2Suite.java":[{"add":["30","import it.issue.IssueFilterOnCommonRulesTest;","31","import it.issue.IssueFilterTest;","77","  IssueFilterOnCommonRulesTest.class,","78","  IssueFilterTest.class,"],"delete":[]}],"it\/it-tests\/src\/test\/java\/it\/issue\/IssueFilterOnCommonRulesTest.java":[{"add":[],"delete":[]}]}},"ca6ddb253d4e7fc7cbdfac45fdfd2e7db461467c":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/components\/__tests__\/__snapshots__\/List-test.tsx.snap":"ADD","server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/components\/List.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/components\/__tests__\/List-test.tsx":"ADD","server\/sonar-web\/src\/main\/js\/app\/styles\/components\/badges.css":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/components\/__tests__\/__snapshots__\/List-test.tsx.snap":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/components\/List.tsx":[{"add":["36","          className=\"list-group-item display-flex-center\"","40","          <span className=\"flex-1\">{qualityGate.name}<\/span>","41","          {qualityGate.isDefault && (","42","            <span className=\"badge little-spacer-left\">{translate('default')}<\/span>","43","          )}","44","          {qualityGate.isBuiltIn && <BuiltInQualityGateBadge className=\"little-spacer-left\" \/>}"],"delete":["36","          className=\"list-group-item\"","40","          <table>","41","            <tbody>","42","              <tr>","43","                <td>{qualityGate.name}<\/td>","44","                <td className=\"thin nowrap spacer-left text-right\">","45","                  {qualityGate.isDefault && <span className=\"badge\">{translate('default')}<\/span>}","46","                  {qualityGate.isBuiltIn && (","47","                    <BuiltInQualityGateBadge className=\"little-spacer-left\" \/>","48","                  )}","49","                <\/td>","50","              <\/tr>","51","            <\/tbody>","52","          <\/table>"]}],"server\/sonar-web\/src\/main\/js\/apps\/quality-gates\/components\/__tests__\/List-test.tsx":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/app\/styles\/components\/badges.css":[{"add":[],"delete":["44",".list-group-item > .badge,","49",".list-group-item > .badge + .badge,"]}]}},"c86168a157877c3176c7b536e3b94b9d792f3def":{"changes":{"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/qualityprofile\/ws\/BackupActionTest.java":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/qualityprofile\/ws\/BackupAction.java":"MODIFY"},"diff":{"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/qualityprofile\/ws\/BackupActionTest.java":[{"add":["39","import org.sonar.server.ws.TestRequest;","45","import static org.assertj.core.api.Assertions.assertThatThrownBy;","133","    TestRequest request = tester.newRequest()","136","      .setParam(\"qualityProfile\", \"the-name\");","137","","138","    assertThatThrownBy(request::execute)","139","      .isInstanceOf(NotFoundException.class)","140","      .hasMessage(\"No organization with key 'the-missing-org'\");","150","    TestRequest request = tester.newRequest()","153","      .setParam(\"qualityProfile\", profileInOrg1.getName());","154","","155","    assertThatThrownBy(request::execute)","156","      .isInstanceOf(NotFoundException.class)","157","      .hasMessage(\"Quality Profile for language 'xoo' and name '\" + profileInOrg1.getName() + \"' does not exist in organization '\" + org2.getKey() + \"'\");","162","    TestRequest request = tester.newRequest();","164","    assertThatThrownBy(request::execute)","165","      .isInstanceOf(IllegalArgumentException.class);","174","    TestRequest request = tester.newRequest()","177","      .setParam(\"qualityProfile\", profile.getName());","178","","179","    assertThatThrownBy(request::execute)","180","      .isInstanceOf(ForbiddenException.class)","181","      .hasMessage(format(\"You're not member of organization '%s'\", organization.getKey()));"],"delete":["23","import org.junit.rules.ExpectedException;","53","  public ExpectedException expectedException = ExpectedException.none();","54","  @Rule","134","    expectedException.expect(NotFoundException.class);","135","    expectedException.expectMessage(\"No organization with key 'the-missing-org'\");","136","","137","    tester.newRequest()","140","      .setParam(\"qualityProfile\", \"the-name\")","141","      .execute();","151","    expectedException.expect(NotFoundException.class);","152","    expectedException.expectMessage(\"Quality Profile for language 'xoo' and name '\" + profileInOrg1.getName() + \"' does not exist in organization '\" + org2.getKey() + \"'\");","153","","154","    tester.newRequest()","157","      .setParam(\"qualityProfile\", profileInOrg1.getName())","158","      .execute();","163","    expectedException.expect(IllegalArgumentException.class);","165","    tester.newRequest().execute();","174","    expectedException.expect(ForbiddenException.class);","175","    expectedException.expectMessage(format(\"You're not member of organization '%s'\", organization.getKey()));","176","","177","    tester.newRequest()","180","      .setParam(\"qualityProfile\", profile.getName())","181","      .execute();"]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/qualityprofile\/ws\/BackupAction.java":[{"add":["68","    QProfileDto profile = loadQProfile(request);","75","","76","  private QProfileDto loadQProfile(Request request) {","77","    try (DbSession dbSession = dbClient.openSession(false)) {","78","      return wsSupport.getProfile(dbSession, QProfileReference.fromName(request));","79","    }","80","  }"],"delete":["70","","71","      QProfileDto profile = wsSupport.getProfile(dbSession, QProfileReference.fromName(request));"]}]}},"e4f8927d7f668f1deb5be2d058447a4b2b644f0b":{"changes":{"server\/sonar-webserver\/src\/main\/java\/org\/sonar\/server\/app\/TomcatErrorHandling.java":"ADD","server\/sonar-webserver\/src\/test\/java\/org\/sonar\/server\/app\/TomcatErrorHandlingTest.java":"ADD","server\/sonar-webserver\/src\/main\/java\/org\/sonar\/server\/app\/EmbeddedTomcat.java":"MODIFY"},"diff":{"server\/sonar-webserver\/src\/main\/java\/org\/sonar\/server\/app\/TomcatErrorHandling.java":[{"add":[],"delete":[]}],"server\/sonar-webserver\/src\/test\/java\/org\/sonar\/server\/app\/TomcatErrorHandlingTest.java":[{"add":[],"delete":[]}],"server\/sonar-webserver\/src\/main\/java\/org\/sonar\/server\/app\/EmbeddedTomcat.java":[{"add":["60","    new TomcatErrorHandling().configure(tomcat);"],"delete":[]}]}},"74b3942db7a450d8334a6e1420a02c007eaa6fdb":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/users\/form-view.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/users\/form-view.js":[{"add":["59","      .toArray()","60","      .filter(value => !!value);","61","    \/\/ return empty string to reset the field when updating","62","    return scmAccounts.length ? scmAccounts : '';"],"delete":["59","      .toArray();","60","    return scmAccounts.filter(value => !!value);"]}]}},"c449191069573ef348bdd5a0c43f2593bd84f198":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/qualityprofile\/QProfileBackuperImplTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualityprofile\/QProfileBackuperImpl.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualityprofile\/ws\/RestoreAction.java":"MODIFY","sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/qualityprofile\/QualityProfileWsParameters.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/qualityprofile\/QProfileBackuperImplTest.java":[{"add":["47","import static org.junit.rules.ExpectedException.none;","60","  public ExpectedException expectedException = none();","197","  public void fail_to_restore_if_not_xml_backup() {","198","    OrganizationDto organization = db.organizations().insert();","199","    try {","200","      underTest.restore(db.getSession(), new StringReader(\"foo\"), organization, null);","201","      fail();","202","    } catch (IllegalArgumentException e) {","203","      assertThat(reset.calledProfile).isNull();","204","    }","205","  }","206","","207","  @Test","208","  public void fail_to_restore_if_xml_is_not_well_formed() {","209","    expectedException.expect(IllegalArgumentException.class);","210","    expectedException.expectMessage(\"Fail to restore Quality profile backup, XML document is not well formed\");","211","    OrganizationDto organization = db.organizations().insert();","212","    String notWellFormedXml = \"<?xml version='1.0' encoding='UTF-8'?><profile><name>\\\"profil\\\"<\/name><language>\\\"language\\\"<\/language><rules\/><\/profile\";","213","","214","    underTest.restore(db.getSession(), new StringReader(notWellFormedXml), organization, null);","215","  }","216","","217","  @Test","231","  public void fail_to_restore_external_rule() {"],"delete":["28","import javax.xml.stream.XMLStreamException;","60","  public ExpectedException expectedException = ExpectedException.none();","185","  public void fail_to_restore_if_not_xml_backup() {","186","    OrganizationDto organization = db.organizations().insert();","187","    try {","188","      underTest.restore(db.getSession(), new StringReader(\"foo\"), organization, null);","189","      fail();","190","    } catch (IllegalStateException e) {","191","      assertThat(e).hasMessage(\"Fail to restore Quality profile backup\");","192","      assertThat(e.getCause()).isInstanceOf(XMLStreamException.class);","193","      assertThat(reset.calledProfile).isNull();","194","    }","195","  }","196","","197","  @Test","223","  public void fail_to_restore_external_rule() throws Exception {"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualityprofile\/QProfileBackuperImpl.java":[{"add":["174","      throw new IllegalArgumentException(\"Fail to restore Quality profile backup, XML document is not well formed\", e);"],"delete":["174","      throw new IllegalStateException(\"Fail to restore Quality profile backup\", e);"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualityprofile\/ws\/RestoreAction.java":[{"add":["63","    WebService.NewAction action = controller.createAction(\"restore\")"],"delete":["43","import static org.sonarqube.ws.client.qualityprofile.QualityProfileWsParameters.ACTION_RESTORE;","64","    WebService.NewAction action = controller.createAction(ACTION_RESTORE)"]}],"sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/qualityprofile\/QualityProfileWsParameters.java":[{"add":[],"delete":["43","  public static final String ACTION_RESTORE = \"restore\";"]}]}},"ce59355081e759025cd0426ac8e315c603c2272b":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/setting\/ws\/SettingsFinder.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/setting\/ws\/ValuesAction.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/setting\/ws\/Setting.java":"MODIFY","sonar-db\/src\/main\/resources\/org\/sonar\/db\/property\/PropertiesMapper.xml":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/setting\/ws\/SettingsFinder.java":[{"add":["57","      .map(property -> Setting.createFromDto(property, getPropertySets(property.getKey(), propertySets, null), definitions.get(property.getKey())))","78","        Setting.createFromDto(propertyDto, getPropertySets(propertyKey, propertySets, componentId), definitions.get(propertyKey)));"],"delete":["57","      .map(property -> Setting.createForDto(property, getPropertySets(property.getKey(), propertySets, null), definitions.get(property.getKey())))","78","        Setting.createForDto(propertyDto, getPropertySets(propertyKey, propertySets, componentId), definitions.get(propertyKey)));"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/setting\/ws\/ValuesAction.java":[{"add":["113","      List<Setting> settings = loadSettings(dbSession, component, keysToDisplayMap.keySet());","114","      return new ValuesResponseBuilder(settings, component, keysToDisplayMap).build();","160","      .map(Setting::createFromDefinition)"],"delete":["113","      return new ValuesResponseBuilder(loadSettings(dbSession, component, keysToDisplayMap.keySet()), component, keysToDisplayMap).build();","159","      .map(Setting::createForDefinition)"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/setting\/ws\/Setting.java":[{"add":["62","  public static Setting createFromDto(PropertyDto propertyDto, List<PropertyDto> propertyDtoSetValues, @Nullable PropertyDefinition definition){","66","  public static Setting createFromDefinition(PropertyDefinition definition){"],"delete":["62","  public static Setting createForDto(PropertyDto propertyDto, List<PropertyDto> propertyDtoSetValues, @Nullable PropertyDefinition definition){","66","  public static Setting createForDefinition(PropertyDefinition definition){"]}],"sonar-db\/src\/main\/resources\/org\/sonar\/db\/property\/PropertiesMapper.xml":[{"add":["132","    order by p.id"],"delete":[]}]}},"2904c7846d8233f71a6340c6f7f884537bdc7b6a":{"changes":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/server\/ws\/Request.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ws\/WebServiceEngine.java":"MODIFY","sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/server\/ws\/RequestTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/ws\/L10nWs.java":"MODIFY"},"diff":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/server\/ws\/Request.java":[{"add":["84","    return parseInt(key, s);","94","    return parseLong(key, s);","150","    return s == null ? defaultValue : parseInt(key, s);","160","    return s == null ? defaultValue : parseLong(key, s);","172","    return s == null ? null : parseInt(key, s);","178","    return s == null ? null : parseLong(key, s);","212","          throw new IllegalArgumentException(String.format(\"'%s' cannot be parsed as either a date or date+time\", s));","222","    if (s == null) {","223","      return null;","225","","226","    try {","227","      return DateUtils.parseDate(s);","228","    } catch (SonarException notDateException) {","229","      throw new IllegalArgumentException(notDateException);","230","    }","243","  private static int parseInt(String key, String value) {","244","    try {","245","      return Integer.parseInt(value);","246","    } catch (NumberFormatException expection) {","247","      throw new IllegalArgumentException(String.format(\"The '%s' parameter cannot be parsed as an integer value: %s\", key, value));","248","    }","249","  }","250","","251","  private static long parseLong(String key, String value) {","252","    try {","253","      return Long.parseLong(value);","254","    } catch (NumberFormatException expection) {","255","      throw new IllegalArgumentException(String.format(\"The '%s' parameter cannot be parsed as a long value: %s\", key, value));","256","    }","257","  }","258",""],"delete":["84","    return Integer.parseInt(s);","94","    return Long.parseLong(s);","150","    return s == null ? defaultValue : Integer.parseInt(s);","160","    return s == null ? defaultValue : Long.parseLong(s);","172","    return s == null ? null : Integer.parseInt(s);","178","    return s == null ? null : Long.parseLong(s);","212","          throw new SonarException(String.format(\"'%s' cannot be parsed as either a date or date+time\", s));","222","    if (s != null) {","223","      return DateUtils.parseDate(s);","225","    return null;"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ws\/WebServiceEngine.java":[{"add":[],"delete":["100","","102","      \/\/ TODO replace by BadRequestException in Request#mandatoryParam()"]}],"sonar-plugin-api\/src\/test\/java\/org\/sonar\/api\/server\/ws\/RequestTest.java":[{"add":["22","import java.io.InputStream;","23","import java.util.Map;","24","import javax.annotation.Nullable;","27","import org.junit.Rule;","29","import org.junit.rules.ExpectedException;","39","  @Rule","40","  public ExpectedException expectedException = ExpectedException.none();","41","","42","  FakeRequest underTest = new FakeRequest();","43","","44","  @Before","45","  public void before() {","46","    WebService.Context context = new WebService.Context();","47","    new FakeWs().define(context);","48","","49","    underTest.setAction(context.controller(\"my_controller\").action(\"my_action\"));","50","  }","51","","52","  @Test","53","  public void has_param() {","54","    underTest.setParam(\"a_required_string\", \"foo\");","55","","56","    assertThat(underTest.hasParam(\"a_required_string\")).isTrue();","57","    assertThat(underTest.hasParam(\"unknown\")).isFalse();","58","  }","59","","60","  @Test","61","  public void required_param_is_missing() {","62","    expectedException.expect(IllegalArgumentException.class);","63","    expectedException.expectMessage(\"The 'required_param' parameter is missing\");","64","","65","    underTest.mandatoryParam(\"required_param\");","66","  }","67","","68","  @Test","69","  public void required_param() {","70","    underTest.setParam(\"a_required_string\", \"foo\");","71","    underTest.setParam(\"a_required_number\", \"42\");","72","    underTest.setParam(\"a_required_boolean\", \"true\");","73","    underTest.setParam(\"a_required_enum\", \"BETA\");","74","","75","    assertThat(underTest.mandatoryParam(\"a_required_string\")).isEqualTo(\"foo\");","76","    assertThat(underTest.mandatoryParamAsBoolean(\"a_required_boolean\")).isTrue();","77","    assertThat(underTest.mandatoryParamAsInt(\"a_required_number\")).isEqualTo(42);","78","    assertThat(underTest.mandatoryParamAsLong(\"a_required_number\")).isEqualTo(42L);","79","    assertThat(underTest.mandatoryParamAsEnum(\"a_required_enum\", RuleStatus.class)).isEqualTo(RuleStatus.BETA);","80","  }","81","","82","  @Test","83","  public void required_param_as_strings() {","84","    underTest.setParam(\"a_required_string\", \"foo,bar\");","85","","86","    assertThat(underTest.mandatoryParamAsStrings(\"a_required_string\")).containsExactly(\"foo\", \"bar\");","87","  }","88","","89","  @Test","90","  public void fail_if_no_required_param_as_strings() {","91","    expectedException.expect(IllegalArgumentException.class);","92","    expectedException.expectMessage(\"The 'a_required_string' parameter is missing\");","93","","94","    underTest.mandatoryParamAsStrings(\"a_required_string\");","95","  }","96","","97","  @Test","98","  public void default_value_of_optional_param() {","99","    assertThat(underTest.param(\"has_default_string\")).isEqualTo(\"the_default_string\");","100","  }","101","","102","  @Test","103","  public void param_as_string() {","104","    assertThat(underTest.setParam(\"a_string\", \"foo\").param(\"a_string\")).isEqualTo(\"foo\");","105","    assertThat(underTest.setParam(\"a_string\", \" f o o \\r\\n \").param(\"a_string\")).isEqualTo(\"f o o\");","106","  }","107","","108","  @Test","109","  public void null_param() {","110","    assertThat(underTest.param(\"a_string\")).isNull();","111","    assertThat(underTest.paramAsBoolean(\"a_boolean\")).isNull();","112","    assertThat(underTest.paramAsInt(\"a_number\")).isNull();","113","    assertThat(underTest.paramAsLong(\"a_number\")).isNull();","114","  }","115","","116","  @Test","117","  public void param_as_int() {","118","    assertThat(underTest.setParam(\"a_number\", \"123\").paramAsInt(\"a_number\")).isEqualTo(123);","119","    assertThat(underTest.setParam(\"a_number\", \"123\").paramAsInt(\"a_number\", 42)).isEqualTo(123);","120","    assertThat(underTest.setParam(\"a_number\", null).paramAsInt(\"a_number\", 42)).isEqualTo(123);","121","  }","122","","123","  @Test","124","  public void fail_when_param_is_not_an_int() {","125","    expectedException.expect(IllegalArgumentException.class);","126","    expectedException.expectMessage(\"The 'a_number' parameter cannot be parsed as an integer value: not-an-int\");","127","","128","    assertThat(underTest.setParam(\"a_number\", \"not-an-int\").paramAsInt(\"a_number\")).isEqualTo(123);","129","  }","130","","131","  @Test","132","  public void fail_when_param_is_not_an_int_with_default_value() {","133","    expectedException.expect(IllegalArgumentException.class);","134","    expectedException.expectMessage(\"The 'a_number' parameter cannot be parsed as an integer value: not_an_int\");","135","","136","    underTest.setParam(\"a_number\", \"not_an_int\").paramAsInt(\"a_number\", 42);","137","  }","138","","139","  @Test","140","  public void param_as_long() {","141","    assertThat(underTest.setParam(\"a_number\", \"123\").paramAsLong(\"a_number\")).isEqualTo(123L);","142","    assertThat(underTest.setParam(\"a_number\", \"123\").paramAsLong(\"a_number\", 42L)).isEqualTo(123L);","143","    assertThat(underTest.setParam(\"a_number\", null).paramAsLong(\"a_number\", 42L)).isEqualTo(123L);","144","  }","145","","146","  @Test","147","  public void fail_when_param_is_not_a_long() {","148","    expectedException.expect(IllegalArgumentException.class);","149","    expectedException.expectMessage(\"The 'a_number' parameter cannot be parsed as a long value: not_a_long\");","150","","151","    underTest.setParam(\"a_number\", \"not_a_long\").paramAsLong(\"a_number\");","152","  }","153","","154","  @Test","155","  public void fail_when_param_is_not_a_long_with_default_value() {","156","    expectedException.expect(IllegalArgumentException.class);","157","    expectedException.expectMessage(\"The 'a_number' parameter cannot be parsed as a long value: not_a_long\");","158","","159","    underTest.setParam(\"a_number\", \"not_a_long\").paramAsLong(\"a_number\", 42L);","160","  }","161","","162","  @Test","163","  public void param_as_boolean() {","164","    assertThat(underTest.setParam(\"a_boolean\", \"true\").paramAsBoolean(\"a_boolean\")).isTrue();","165","    assertThat(underTest.setParam(\"a_boolean\", \"yes\").paramAsBoolean(\"a_boolean\")).isTrue();","166","    assertThat(underTest.setParam(\"a_boolean\", \"false\").paramAsBoolean(\"a_boolean\")).isFalse();","167","    assertThat(underTest.setParam(\"a_boolean\", \"no\").paramAsBoolean(\"a_boolean\")).isFalse();","168","  }","169","","170","  @Test","171","  public void fail_if_incorrect_param_as_boolean() {","172","    expectedException.expect(IllegalArgumentException.class);","173","    expectedException.expectMessage(\"Property a_boolean is not a boolean value: oui\");","174","","175","    underTest.setParam(\"a_boolean\", \"oui\").paramAsBoolean(\"a_boolean\");","176","  }","177","","178","  @Test","179","  public void param_as_enum() {","180","    assertThat(underTest.setParam(\"a_enum\", \"BETA\").paramAsEnum(\"a_enum\", RuleStatus.class)).isEqualTo(RuleStatus.BETA);","181","  }","182","","183","  @Test","184","  public void param_as_enums() {","185","    assertThat(underTest.setParam(\"a_enum\", \"BETA,READY\").paramAsEnums(\"a_enum\", RuleStatus.class)).containsOnly(","186","      RuleStatus.BETA, RuleStatus.READY);","187","  }","188","","189","  @Test","190","  public void param_as_date() {","191","    assertThat(underTest.setParam(\"a_date\", \"2014-05-27\").paramAsDate(\"a_date\")).isEqualTo(DateUtils.parseDate(\"2014-05-27\"));","192","  }","193","","194","  @Test","195","  public void fail_when_param_as_date_not_a_date() {","196","    expectedException.expect(IllegalArgumentException.class);","197","    expectedException.expectMessage(\"The date 'polop' does not respect format 'yyyy-MM-dd'\");","198","","199","    underTest.setParam(\"a_date\", \"polop\").paramAsDate(\"a_date\");","200","  }","201","","202","  @Test","203","  public void param_as_datetime() {","204","    assertThat(underTest.setParam(\"a_datetime\", \"2014-05-27T15:50:45+0100\").paramAsDateTime(\"a_datetime\")).isEqualTo(DateUtils.parseDateTime(\"2014-05-27T15:50:45+0100\"));","205","    assertThat(underTest.setParam(\"a_datetime\", \"2014-05-27\").paramAsDateTime(\"a_datetime\")).isEqualTo(DateUtils.parseDate(\"2014-05-27\"));","206","  }","207","","208","  @Test","209","  public void fail_when_param_as_datetime_not_a_datetime() {","210","    expectedException.expect(IllegalArgumentException.class);","211","    expectedException.expectMessage(\"'polop' cannot be parsed as either a date or date+time\");","212","","213","    underTest.setParam(\"a_datetime\", \"polop\").paramAsDateTime(\"a_datetime\");","214","  }","215","","216","  @Test","217","  public void param_as_strings() {","218","    assertThat(underTest.paramAsStrings(\"a_string\")).isNull();","219","    assertThat(underTest.setParam(\"a_string\", \"\").paramAsStrings(\"a_string\")).isEmpty();","220","    assertThat(underTest.setParam(\"a_string\", \"bar\").paramAsStrings(\"a_string\")).containsExactly(\"bar\");","221","    assertThat(underTest.setParam(\"a_string\", \"bar,baz\").paramAsStrings(\"a_string\")).containsExactly(\"bar\", \"baz\");","222","    assertThat(underTest.setParam(\"a_string\", \"bar , baz\").paramAsStrings(\"a_string\")).containsExactly(\"bar\", \"baz\");","223","  }","224","","225","  @Test","226","  public void deprecated_key() {","227","    assertThat(underTest.setParam(\"deprecated_param\", \"bar\").param(\"new_param\")).isEqualTo(\"bar\");","228","  }","229","","230","  @Test","231","  public void fail_if_param_is_not_defined() {","232","    expectedException.expect(IllegalArgumentException.class);","233","    expectedException.expectMessage(\"BUG - parameter 'unknown' is undefined for action 'my_action'\");","234","","235","    underTest.param(\"unknown\");","236","  }","237","","238","  @Test","239","  public void verify_possible_values() {","240","    underTest.setParam(\"has_possible_values\", \"foo\");","241","    assertThat(underTest.param(\"has_possible_values\")).isEqualTo(\"foo\");","242","  }","243","","244","  @Test","245","  public void fail_if_not_a_possible_value() {","246","    underTest.setParam(\"has_possible_values\", \"not_possible\");","247","","248","    expectedException.expect(IllegalArgumentException.class);","249","    expectedException.expectMessage(\"Value of parameter 'has_possible_values' (not_possible) must be one of: [foo, bar]\");","250","","251","    underTest.param(\"has_possible_values\");","252","  }","253","","254","  @Test","255","  public void param_as_input_stream() throws Exception {","256","    assertThat(underTest.paramAsInputStream(\"a_string\")).isNull();","257","    assertThat(IOUtils.toString(underTest.setParam(\"a_string\", \"\").paramAsInputStream(\"a_string\"))).isEmpty();","258","    assertThat(IOUtils.toString(underTest.setParam(\"a_string\", \"foo\").paramAsInputStream(\"a_string\"))).isEqualTo(\"foo\");","259","  }","260","","261","  private static class FakeRequest extends ValidatingRequest {","280","    public FakeRequest setParam(String key, @Nullable String value) {","300","  private static class FakeWs implements WebService {"],"delete":["28","import org.sonar.api.utils.SonarException;","29","","30","import javax.annotation.Nullable;","31","","32","import java.io.InputStream;","33","import java.util.Map;","36","import static org.junit.Assert.fail;","41","  private static class SimpleRequest extends ValidatingRequest {","60","    public SimpleRequest setParam(String key, @Nullable String value) {","80","  private static class SimpleWs implements WebService {","119","  SimpleRequest request = new SimpleRequest();","120","","121","  @Before","122","  public void before() {","123","    WebService.Context context = new WebService.Context();","124","    new SimpleWs().define(context);","125","    request.setAction(context.controller(\"my_controller\").action(\"my_action\"));","126","  }","127","","128","  @Test","129","  public void has_param() {","130","    request.setParam(\"a_required_string\", \"foo\");","131","","132","    assertThat(request.hasParam(\"a_required_string\")).isTrue();","133","    assertThat(request.hasParam(\"unknown\")).isFalse();","134","  }","135","","136","  @Test","137","  public void required_param_is_missing() {","138","    try {","139","      request.mandatoryParam(\"required_param\");","140","      fail();","141","    } catch (IllegalArgumentException e) {","142","      assertThat(e).hasMessage(\"The 'required_param' parameter is missing\");","143","    }","144","  }","145","","146","  @Test","147","  public void required_param() {","148","    request.setParam(\"a_required_string\", \"foo\");","149","    request.setParam(\"a_required_number\", \"42\");","150","    request.setParam(\"a_required_boolean\", \"true\");","151","    request.setParam(\"a_required_enum\", \"BETA\");","152","","153","    assertThat(request.mandatoryParam(\"a_required_string\")).isEqualTo(\"foo\");","154","    assertThat(request.mandatoryParamAsBoolean(\"a_required_boolean\")).isTrue();","155","    assertThat(request.mandatoryParamAsInt(\"a_required_number\")).isEqualTo(42);","156","    assertThat(request.mandatoryParamAsLong(\"a_required_number\")).isEqualTo(42L);","157","    assertThat(request.mandatoryParamAsEnum(\"a_required_enum\", RuleStatus.class)).isEqualTo(RuleStatus.BETA);","158","  }","159","","160","  @Test","161","  public void required_param_as_strings() {","162","    try {","163","      request.mandatoryParamAsStrings(\"a_required_string\");","164","    } catch (IllegalArgumentException e) {","165","      assertThat(e).hasMessage(\"The 'a_required_string' parameter is missing\");","166","    }","167","","168","    request.setParam(\"a_required_string\", \"foo,bar\");","169","    assertThat(request.mandatoryParamAsStrings(\"a_required_string\")).containsExactly(\"foo\", \"bar\");","170","  }","171","","172","  @Test","173","  public void default_value_of_optional_param() {","174","    assertThat(request.param(\"has_default_string\")).isEqualTo(\"the_default_string\");","175","  }","176","","177","  @Test","178","  public void param_as_string() {","179","    assertThat(request.setParam(\"a_string\", \"foo\").param(\"a_string\")).isEqualTo(\"foo\");","180","    assertThat(request.setParam(\"a_string\", \" f o o \\r\\n \").param(\"a_string\")).isEqualTo(\"f o o\");","181","  }","182","","183","  @Test","184","  public void null_param() {","185","    assertThat(request.param(\"a_string\")).isNull();","186","    assertThat(request.paramAsBoolean(\"a_boolean\")).isNull();","187","    assertThat(request.paramAsInt(\"a_number\")).isNull();","188","    assertThat(request.paramAsLong(\"a_number\")).isNull();","189","  }","190","","191","  @Test","192","  public void param_as_int() {","193","    assertThat(request.setParam(\"a_number\", \"123\").paramAsInt(\"a_number\")).isEqualTo(123);","194","  }","195","","196","  @Test","197","  public void param_as_long() {","198","    assertThat(request.setParam(\"a_number\", \"123\").paramAsLong(\"a_number\")).isEqualTo(123L);","199","    assertThat(request.setParam(\"a_number\", \"123\").paramAsLong(\"a_number\", 42L)).isEqualTo(123L);","200","    assertThat(request.setParam(\"a_number\", null).paramAsLong(\"a_number\", 42L)).isEqualTo(123L);","201","  }","202","","203","  @Test","204","  public void param_as_boolean() {","205","    assertThat(request.setParam(\"a_boolean\", \"true\").paramAsBoolean(\"a_boolean\")).isTrue();","206","    assertThat(request.setParam(\"a_boolean\", \"yes\").paramAsBoolean(\"a_boolean\")).isTrue();","207","    assertThat(request.setParam(\"a_boolean\", \"false\").paramAsBoolean(\"a_boolean\")).isFalse();","208","    assertThat(request.setParam(\"a_boolean\", \"no\").paramAsBoolean(\"a_boolean\")).isFalse();","209","    try {","210","      request.setParam(\"a_boolean\", \"oui\").paramAsBoolean(\"a_boolean\");","211","      fail();","212","    } catch (IllegalArgumentException e) {","213","      assertThat(e).hasMessage(\"Property a_boolean is not a boolean value: oui\");","214","    }","215","  }","216","","217","  @Test","218","  public void param_as_enum() {","219","    assertThat(request.setParam(\"a_enum\", \"BETA\").paramAsEnum(\"a_enum\", RuleStatus.class)).isEqualTo(RuleStatus.BETA);","220","  }","221","","222","  @Test","223","  public void param_as_enums() {","224","    assertThat(request.setParam(\"a_enum\", \"BETA,READY\").paramAsEnums(\"a_enum\", RuleStatus.class)).containsOnly(","225","      RuleStatus.BETA, RuleStatus.READY);","226","  }","227","","228","  @Test","229","  public void param_as_date() {","230","    assertThat(request.setParam(\"a_date\", \"2014-05-27\").paramAsDate(\"a_date\")).isEqualTo(DateUtils.parseDate(\"2014-05-27\"));","231","  }","232","","233","  @Test","234","  public void param_as_datetime() {","235","    assertThat(request.setParam(\"a_datetime\", \"2014-05-27T15:50:45+0100\").paramAsDateTime(\"a_datetime\")).isEqualTo(DateUtils.parseDateTime(\"2014-05-27T15:50:45+0100\"));","236","    assertThat(request.setParam(\"a_datetime\", \"2014-05-27\").paramAsDateTime(\"a_datetime\")).isEqualTo(DateUtils.parseDate(\"2014-05-27\"));","237","    try {","238","      request.setParam(\"a_datetime\", \"polop\").paramAsDateTime(\"a_datetime\");","239","    } catch (SonarException error) {","240","      assertThat(error.getMessage()).isEqualTo(\"'polop' cannot be parsed as either a date or date+time\");","241","    }","242","  }","243","","244","  @Test","245","  public void param_as_strings() {","246","    assertThat(request.paramAsStrings(\"a_string\")).isNull();","247","    assertThat(request.setParam(\"a_string\", \"\").paramAsStrings(\"a_string\")).isEmpty();","248","    assertThat(request.setParam(\"a_string\", \"bar\").paramAsStrings(\"a_string\")).containsExactly(\"bar\");","249","    assertThat(request.setParam(\"a_string\", \"bar,baz\").paramAsStrings(\"a_string\")).containsExactly(\"bar\", \"baz\");","250","    assertThat(request.setParam(\"a_string\", \"bar , baz\").paramAsStrings(\"a_string\")).containsExactly(\"bar\", \"baz\");","251","  }","252","","253","  @Test","254","  public void deprecated_key() {","255","    assertThat(request.setParam(\"deprecated_param\", \"bar\").param(\"new_param\")).isEqualTo(\"bar\");","256","  }","257","","258","  @Test","259","  public void fail_if_param_is_not_defined() {","260","    try {","261","      request.param(\"unknown\");","262","    } catch (IllegalArgumentException e) {","263","      assertThat(e).hasMessage(\"BUG - parameter 'unknown' is undefined for action 'my_action'\");","264","    }","265","  }","266","","267","  @Test","268","  public void verify_possible_values() {","269","    request.setParam(\"has_possible_values\", \"foo\");","270","    assertThat(request.param(\"has_possible_values\")).isEqualTo(\"foo\");","271","","272","    try {","273","      request.setParam(\"has_possible_values\", \"not_possible\");","274","      request.param(\"has_possible_values\");","275","    } catch (IllegalArgumentException e) {","276","      assertThat(e).hasMessage(\"Value of parameter 'has_possible_values' (not_possible) must be one of: [foo, bar]\");","277","    }","278","  }","279","","280","  @Test","281","  public void param_as_input_stream() throws Exception {","282","    assertThat(request.paramAsInputStream(\"a_string\")).isNull();","283","    assertThat(IOUtils.toString(request.setParam(\"a_string\", \"\").paramAsInputStream(\"a_string\"))).isEmpty();","284","    assertThat(IOUtils.toString(request.setParam(\"a_string\", \"foo\").paramAsInputStream(\"a_string\"))).isEqualTo(\"foo\");","285","  }"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/platform\/ws\/L10nWs.java":[{"add":[],"delete":["78",""]}]}},"7b3100c87c761e5e8a7ef32df12abae7649d158d":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/authentication\/OAuth2AuthenticationParametersImpl.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/authentication\/OAuth2AuthenticationParametersImplTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/authentication\/OAuth2AuthenticationParametersImpl.java":[{"add":["22","import com.google.common.base.Strings;","31","import javax.annotation.Nullable;","38","import static java.util.Optional.empty;","73","    Optional<String> sanitizeRedirectUrl = sanitizeRedirectUrl(returnTo);","74","    sanitizeRedirectUrl.ifPresent(s -> parameters.put(RETURN_TO_PARAMETER, s));","112","      return empty();","117","      return empty();","149","","150","  \/**","151","   * This sanitization has been inspired by 'IsUrlLocalToHost()' method in","152","   * https:\/\/docs.microsoft.com\/en-us\/aspnet\/mvc\/overview\/security\/preventing-open-redirection-attacks","153","   *\/","154","  private static Optional<String> sanitizeRedirectUrl(@Nullable String url) {","155","    if (Strings.isNullOrEmpty(url)) {","156","      return empty();","157","    }","158","    if (url.startsWith(\"\/\/\") || url.startsWith(\"\/\\\\\")) {","159","      return empty();","160","    }","161","    if (!url.startsWith(\"\/\")) {","162","      return empty();","163","    }","164","    return Optional.of(url);","165","  }","166",""],"delete":["70","    if (isNotBlank(returnTo)) {","71","      parameters.put(RETURN_TO_PARAMETER, returnTo);","72","    }","110","      return Optional.empty();","115","      return Optional.empty();"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/authentication\/OAuth2AuthenticationParametersImplTest.java":[{"add":["99","  public void return_to_is_not_set_when_not_local() {","100","    when(request.getParameter(\"return_to\")).thenReturn(\"http:\/\/external_url\");","101","    underTest.init(request, response);","102","    verify(response, never()).addCookie(any());","103","","104","    when(request.getParameter(\"return_to\")).thenReturn(\"\/\/local_file\");","105","    underTest.init(request, response);","106","    verify(response, never()).addCookie(any());","107","","108","    when(request.getParameter(\"return_to\")).thenReturn(\"\/\\\\local_file\");","109","    underTest.init(request, response);","110","    verify(response, never()).addCookie(any());","111","","112","    when(request.getParameter(\"return_to\")).thenReturn(\"something_else\");","113","    underTest.init(request, response);","114","    verify(response, never()).addCookie(any());","115","  }","116","","117","  @Test"],"delete":[]}]}},"17c555878368e96a2ccdf79f2921a01814adaf6f":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/settings\/styles.css":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/settings\/styles.css":[{"add":["28","  margin: 0 -20px;","29","  padding: 10px 20px;","30","  border-top: 1px solid rgba(0, 0, 0, 0);","31","  border-bottom: 1px solid rgba(0, 0, 0, 0);"],"delete":["33","  margin: -10px -20px;","34","  padding: 9px 20px;"]}]}},"65e616ffa93f0e0029f792780ff8f3db0b830c2d":{"changes":{"server\/sonar-web\/src\/main\/js\/app\/utils\/isValidUri.ts":"ADD","server\/sonar-web\/src\/main\/js\/apps\/projectLinks\/__tests__\/LinkRow-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/meta\/__tests__\/MetaLink-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/meta\/MetaLink.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/meta\/__tests__\/__snapshots__\/MetaLink-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectLinks\/LinkRow.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/styles.css":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectLinks\/__tests__\/__snapshots__\/LinkRow-test.tsx.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/app\/utils\/isValidUri.ts":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/projectLinks\/__tests__\/LinkRow-test.tsx":[{"add":["44","","45","it('should render dangerous code as plain text', () => {","46","  expect(","47","    shallow(","48","      <LinkRow","49","        link={{ id: '12', name: 'dangerous', type: 'dangerous', url: 'javascript:alert(\"Hello\")' }}","50","        onDelete={jest.fn()}","51","      \/>","52","    )","53","  ).toMatchSnapshot();","54","});"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/meta\/__tests__\/MetaLink-test.tsx":[{"add":["35","it('should render dangerous links as plaintext', () => {","36","  const link = {","37","    id: '1',","38","    name: 'Dangerous',","39","    url: 'javascript:alert(\"hi\")',","40","    type: 'dangerous'","41","  };","42","","43","  expect(shallow(<MetaLink link={link} \/>)).toMatchSnapshot();","44","});","45",""],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/meta\/MetaLink.tsx":[{"add":["22","import isValidUri from '..\/..\/..\/app\/utils\/isValidUri';","23","import ClearIcon from '..\/..\/..\/components\/icons-components\/ClearIcon';","29","interface State {","30","  expanded: boolean;","31","}","32","","33","export default class MetaLink extends React.PureComponent<Props, State> {","34","  state = {","35","    expanded: false","36","  };","37","","38","  handleClick = (event: React.MouseEvent<HTMLAnchorElement>) => {","39","    event.preventDefault();","40","    this.setState(s => ({ expanded: !s.expanded }));","41","  };","42","","43","  render() {","44","    const { link } = this.props;","45","    return (","46","      <li>","47","        <a","48","          className=\"link-with-icon\"","49","          href={link.url}","50","          onClick={!isValidUri(link.url) ? this.handleClick : undefined}","51","          rel=\"nofollow noreferrer noopener\"","52","          target=\"_blank\">","53","          <ProjectLinkIcon className=\"little-spacer-right\" type={link.type} \/>","54","          {getLinkName(link)}","55","        <\/a>","56","        {this.state.expanded && (","57","          <div className=\"little-spacer-top copy-paste-link\">","58","            <input","59","              className=\"overview-key\"","60","              onClick={(event: React.MouseEvent<HTMLInputElement>) => event.currentTarget.select()}","61","              readOnly={true}","62","              type=\"text\"","63","              value={link.url}","64","            \/>","65","            <a className=\"close\" href=\"#\" onClick={this.handleClick}>","66","              <ClearIcon \/>","67","            <\/a>","68","          <\/div>","69","        )}","70","      <\/li>","71","    );","72","  }"],"delete":["27","export default function MetaLink({ link }: Props) {","28","  return (","29","    <li>","30","      <a className=\"link-with-icon\" href={link.url} rel=\"nofollow\" target=\"_blank\">","31","        <ProjectLinkIcon className=\"little-spacer-right\" type={link.type} \/>","32","        {getLinkName(link)}","33","      <\/a>","34","    <\/li>","35","  );"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/meta\/__tests__\/__snapshots__\/MetaLink-test.tsx.snap":[{"add":["7","    rel=\"nofollow noreferrer noopener\"","24","    rel=\"nofollow noreferrer noopener\"","41","    rel=\"nofollow noreferrer noopener\"","58","    rel=\"nofollow noreferrer noopener\"","69","","70","exports[`should render dangerous links as plaintext 1`] = `","71","<li>","72","  <a","73","    className=\"link-with-icon\"","74","    href=\"javascript:alert(\\\\\"hi\\\\\")\"","75","    onClick={[Function]}","76","    rel=\"nofollow noreferrer noopener\"","77","    target=\"_blank\"","78","  >","79","    <ProjectLinkIcon","80","      className=\"little-spacer-right\"","81","      type=\"dangerous\"","82","    \/>","83","    Dangerous","84","  <\/a>","85","<\/li>","86","`;"],"delete":["7","    rel=\"nofollow\"","24","    rel=\"nofollow\"","41","    rel=\"nofollow\"","58","    rel=\"nofollow\""]}],"server\/sonar-web\/src\/main\/js\/apps\/projectLinks\/LinkRow.tsx":[{"add":["25","import isValidUri from '..\/..\/app\/utils\/isValidUri';","93","          {isValidUri(link.url) ? (","94","            <a href={link.url} rel=\"nofollow noreferrer noopener\" target=\"_blank\">","95","              {link.url}","96","            <\/a>","97","          ) : (","98","            link.url","99","          )}"],"delete":["92","          <a href={link.url} rel=\"nofollow\" target=\"_blank\">","93","            {link.url}","94","          <\/a>"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/styles.css":[{"add":["472",".copy-paste-link .overview-key {","473","  width: 90%;","474","}","475","","476",".copy-paste-link .close {","477","  color: black;","478","  border-bottom: 0;","479","  height: 100%;","480","  display: inline-block;","481","  margin-left: 5px;","482","  box-sizing: border-box;","483","}","484","","485",".copy-paste-link .close svg {","486","  vertical-align: sub;","487","}","488",""],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/projectLinks\/__tests__\/__snapshots__\/LinkRow-test.tsx.snap":[{"add":["30","      rel=\"nofollow noreferrer noopener\"","53","exports[`should render dangerous code as plain text 1`] = `","54","<tr","55","  data-name=\"dangerous\"","56",">","57","  <td","58","    className=\"nowrap\"","59","  >","60","    <div>","61","      <ProjectLinkIcon","62","        className=\"little-spacer-right\"","63","        type=\"dangerous\"","64","      \/>","65","      <div","66","        className=\"display-inline-block text-top\"","67","      >","68","        <span","69","          className=\"js-name\"","70","        >","71","          dangerous","72","        <\/span>","73","      <\/div>","74","    <\/div>","75","  <\/td>","76","  <td","77","    className=\"nowrap js-url\"","78","  >","79","    javascript:alert(\"Hello\")","80","  <\/td>","81","  <td","82","    className=\"thin nowrap\"","83","  >","84","    <ConfirmButton","85","      confirmButtonText=\"delete\"","86","      confirmData=\"12\"","87","      isDestructive={true}","88","      modalBody=\"project_links.are_you_sure_to_delete_x_link.dangerous\"","89","      modalHeader=\"project_links.delete_project_link\"","90","      onConfirm={[MockFunction]}","91","    >","92","      <Component \/>","93","    <\/ConfirmButton>","94","  <\/td>","95","<\/tr>","96","`;","97","","135","      rel=\"nofollow noreferrer noopener\""],"delete":["30","      rel=\"nofollow\"","90","      rel=\"nofollow\""]}]}},"d2fda37e43a815d44c7f1be47c1ba7a6705f9bcb":{"changes":{"server\/sonar-web\/src\/main\/js\/app\/components\/extensions\/Extension.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/extensions\/__tests__\/Extension-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/components\/extensions\/__tests__\/__snapshots__\/Extension-test.tsx.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/app\/components\/extensions\/Extension.tsx":[{"add":["98","    } else {","99","      this.setState({ extensionElement: undefined });"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/app\/components\/extensions\/__tests__\/Extension-test.tsx":[{"add":["19","import { mount } from 'enzyme';","27","  getExtensionStart: jest.fn().mockResolvedValue({})","34","it('should render React extensions correctly', async () => {","46","it('should handle Function extensions correctly', async () => {","47","  const stop = jest.fn();","48","  const start = jest.fn(() => {","49","    return stop;","50","  });","51","  (getExtensionStart as jest.Mock).mockResolvedValue(start);","52","","53","  const wrapper = shallowRender();","54","  await waitAndUpdate(wrapper);","55","  expect(start).toBeCalled();","56","","57","  wrapper.setProps({ extension: { key: 'bar', name: 'Bar' } });","58","  await waitAndUpdate(wrapper);","59","  expect(stop).toBeCalled();","60","});","61","","62","it('should unmount an extension before starting a new one', async done => {","63","  const reactExtension = jest.fn().mockReturnValue(<div className=\"extension\" \/>);","64","  (getExtensionStart as jest.Mock).mockResolvedValue(reactExtension);","65","","66","  const wrapper = shallowRender();","67","  await waitAndUpdate(wrapper);","68","  expect(wrapper.state('extensionElement')).not.toBeUndefined();","69","","70","  const start = jest.fn((options: any) => {","71","    expect(options.el).not.toBeUndefined();","72","    done();","73","  });","74","  (getExtensionStart as jest.Mock).mockResolvedValue(start);","75","","76","  wrapper.setProps({ extension: { key: 'bar', name: 'Bar' } });","77","  await waitAndUpdate(wrapper);","78","  expect(wrapper.state('extensionElement')).toBeUndefined();","79","  expect(start).toBeCalled();","80","});","81","","83","  \/\/ We need to mount, as we rely on refs.","84","  return mount<Extension>("],"delete":["19","import { shallow } from 'enzyme';","27","  getExtensionStart: jest.fn().mockResolvedValue(jest.fn())","34","it('should render extension correctly', async () => {","47","  return shallow("]}],"server\/sonar-web\/src\/main\/js\/app\/components\/extensions\/__tests__\/__snapshots__\/Extension-test.tsx.snap":[{"add":["2","exports[`should render React extensions correctly 1`] = `","3","<Extension","4","  currentUser={","5","    Object {","6","      \"isLoggedIn\": false,","7","    }","8","  }","9","  extension={","10","    Object {","11","      \"key\": \"foo\",","12","      \"name\": \"Foo\",","13","    }","14","  }","15","  intl={Object {}}","16","  location={","17","    Object {","18","      \"action\": \"PUSH\",","19","      \"hash\": \"\",","20","      \"key\": \"key\",","21","      \"pathname\": \"\/path\",","22","      \"query\": Object {},","23","      \"search\": \"\",","24","      \"state\": Object {},","25","    }","26","  }","27","  onFail={[MockFunction]}","28","  router={","29","    Object {","30","      \"createHref\": [MockFunction],","31","      \"createPath\": [MockFunction],","32","      \"go\": [MockFunction],","33","      \"goBack\": [MockFunction],","34","      \"goForward\": [MockFunction],","35","      \"isActive\": [MockFunction],","36","      \"push\": [MockFunction],","37","      \"replace\": [MockFunction],","38","      \"setRouteLeaveHook\": [MockFunction],","39","    }","40","  }","41",">","42","  <div>","43","    <HelmetWrapper","44","      defer={true}","45","      encodeSpecialCharacters={true}","46","      title=\"Foo\"","47","    >","48","      <SideEffect(NullComponent)","49","        defer={true}","50","        encodeSpecialCharacters={true}","51","        title=\"Foo\"","52","      >","53","        <NullComponent","54","          defer={true}","55","          encodeSpecialCharacters={true}","56","          title=\"Foo\"","57","        \/>","58","      <\/SideEffect(NullComponent)>","59","    <\/HelmetWrapper>","60","    <div \/>","61","  <\/div>","62","<\/Extension>","65","exports[`should render React extensions correctly 2`] = `","66","<Extension","67","  currentUser={","68","    Object {","69","      \"isLoggedIn\": false,","70","    }","71","  }","72","  extension={","73","    Object {","74","      \"key\": \"foo\",","75","      \"name\": \"Foo\",","76","    }","77","  }","78","  intl={Object {}}","79","  location={","80","    Object {","81","      \"action\": \"PUSH\",","82","      \"hash\": \"\",","83","      \"key\": \"key\",","84","      \"pathname\": \"\/path\",","85","      \"query\": Object {},","86","      \"search\": \"\",","87","      \"state\": Object {},","88","    }","89","  }","90","  onFail={[MockFunction]}","91","  router={","92","    Object {","93","      \"createHref\": [MockFunction],","94","      \"createPath\": [MockFunction],","95","      \"go\": [MockFunction],","96","      \"goBack\": [MockFunction],","97","      \"goForward\": [MockFunction],","98","      \"isActive\": [MockFunction],","99","      \"push\": [MockFunction],","100","      \"replace\": [MockFunction],","101","      \"setRouteLeaveHook\": [MockFunction],","102","    }","103","  }","104",">","105","  <div>","106","    <HelmetWrapper","107","      defer={true}","108","      encodeSpecialCharacters={true}","109","      title=\"Foo\"","110","    >","111","      <SideEffect(NullComponent)","112","        defer={true}","113","        encodeSpecialCharacters={true}","114","        title=\"Foo\"","115","      >","116","        <NullComponent","117","          defer={true}","118","          encodeSpecialCharacters={true}","119","          title=\"Foo\"","120","        \/>","121","      <\/SideEffect(NullComponent)>","122","    <\/HelmetWrapper>","123","    <div","124","      className=\"extension\"","125","    \/>","126","  <\/div>","127","<\/Extension>"],"delete":["2","exports[`should render extension correctly 1`] = `","3","<div>","4","  <HelmetWrapper","5","    defer={true}","6","    encodeSpecialCharacters={true}","7","    title=\"Foo\"","8","  \/>","9","  <div \/>","10","<\/div>","13","exports[`should render extension correctly 2`] = `","14","<div>","15","  <HelmetWrapper","16","    defer={true}","17","    encodeSpecialCharacters={true}","18","    title=\"Foo\"","19","  \/>","20","  <div","21","    className=\"extension\"","22","  \/>","23","<\/div>"]}]}},"8bbe57990ec82e2419925b13b90a1e0869d09512":{"changes":{"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v73\/DbVersion73.java":"MODIFY","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v73\/FixMissingQualityProfilesOnOrganizationsTest.java":"ADD","server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v73\/FixMissingQualityProfilesOnOrganizationsTest\/schema.sql":"ADD","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v73\/FixMissingQualityProfilesOnOrganizations.java":"ADD","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v73\/DbVersion73Test.java":"MODIFY"},"diff":{"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v73\/DbVersion73.java":[{"add":["38","      .add(2209, \"Fix missing quality profiles on organizations\", FixMissingQualityProfilesOnOrganizations.class)"],"delete":[]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v73\/FixMissingQualityProfilesOnOrganizationsTest.java":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/test\/resources\/org\/sonar\/server\/platform\/db\/migration\/version\/v73\/FixMissingQualityProfilesOnOrganizationsTest\/schema.sql":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v73\/FixMissingQualityProfilesOnOrganizations.java":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v73\/DbVersion73Test.java":[{"add":["23","import static org.sonar.server.platform.db.migration.version.DbVersionTestUtils.verifyMigrationCount;","35","  @Test","36","  public void verify_migration_count() {","37","    verifyMigrationCount(underTest, 10);","38","  }"],"delete":[]}]}},"01c3e23df232c1006344f4957bf35af92b17a985":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/BuildWrapper.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/__tests__\/__snapshots__\/BuildWrapper-test.js.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/BuildWrapper.js":[{"add":["31","  win: 'build-wrapper-win-x86.zip',","32","  linux: 'build-wrapper-linux-x86.zip',"],"delete":["31","  linux: 'build-wrapper-win-x86.zip',","32","  win: 'build-wrapper-linux-x86.zip',"]}],"server\/sonar-web\/src\/main\/js\/apps\/tutorials\/onboarding\/commands\/__tests__\/__snapshots__\/BuildWrapper-test.js.snap":[{"add":["20","      download=\"build-wrapper-win-x86.zip\"","21","      href=\"\/static\/cpp\/build-wrapper-win-x86.zip\"","48","      download=\"build-wrapper-linux-x86.zip\"","49","      href=\"\/static\/cpp\/build-wrapper-linux-x86.zip\""],"delete":["20","      download=\"build-wrapper-linux-x86.zip\"","21","      href=\"\/static\/cpp\/build-wrapper-linux-x86.zip\"","48","      download=\"build-wrapper-win-x86.zip\"","49","      href=\"\/static\/cpp\/build-wrapper-win-x86.zip\""]}]}},"d1fadbe08865e7bb38c7a278148053e793422818":{"changes":{"server\/sonar-process-monitor\/src\/main\/java\/org\/sonar\/process\/monitor\/Monitor.java":"MODIFY"},"diff":{"server\/sonar-process-monitor\/src\/main\/java\/org\/sonar\/process\/monitor\/Monitor.java":[{"add":["453","    if (t == null || Thread.currentThread() == t) {"],"delete":["453","    if (t == null) {"]}]}},"cfabfcbc0c4dc65000a2d1aca4212f7b1e720889":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/__tests__\/__snapshots__\/RuleDetailsIssues-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/RuleDetails.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/__tests__\/RuleDetailsIssues-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/RuleDetailsIssues.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/__tests__\/__snapshots__\/RuleDetailsIssues-test.tsx.snap":[{"add":[],"delete":["30","                \"types\": undefined,","73","                    \"types\": undefined,","103","                    \"types\": undefined,","104","                  },","105","                }","106","              }","107","            >","108","              5","109","            <\/Link>","110","          <\/td>","111","        <\/tr>","112","      <\/tbody>","113","    <\/table>","114","  <\/DeferredSpinner>","115","<\/div>","116","`;","117","","118","exports[`should handle hotspot rules 1`] = `","119","<div","120","  className=\"js-rule-issues coding-rule-section\"","121",">","122","  <div","123","    className=\"coding-rule-section-separator\"","124","  \/>","125","  <DeferredSpinner","126","    loading={false}","127","    timeout={100}","128","  >","129","    <h3","130","      className=\"coding-rules-detail-title\"","131","    >","132","      coding_rules.issues","133","      <span","134","        className=\"little-spacer-left\"","135","      >","136","        (","137","        <Link","138","          onlyActiveOnIndex={false}","139","          style={Object {}}","140","          to={","141","            Object {","142","              \"pathname\": \"\/organizations\/org\/issues\",","143","              \"query\": Object {","144","                \"resolved\": \"false\",","145","                \"rules\": \"foo\",","146","                \"types\": \"VULNERABILITY,SECURITY_HOTSPOT\",","147","              },","148","            }","149","          }","150","        >","151","          18","152","        <\/Link>","153","        )","154","      <\/span>","155","    <\/h3>","156","    <table","157","      className=\"coding-rules-detail-list coding-rules-most-violated-projects\"","158","    >","159","      <tbody>","160","        <tr>","161","          <td","162","            className=\"coding-rules-detail-list-name\"","163","            colSpan={2}","164","          >","165","            coding_rules.most_violating_projects","166","          <\/td>","167","        <\/tr>","168","        <tr","169","          key=\"sample-key\"","170","        >","171","          <td","172","            className=\"coding-rules-detail-list-name\"","173","          >","174","            Sample","175","          <\/td>","176","          <td","177","            className=\"coding-rules-detail-list-parameters\"","178","          >","179","            <Link","180","              onlyActiveOnIndex={false}","181","              style={Object {}}","182","              to={","183","                Object {","184","                  \"pathname\": \"\/organizations\/org\/issues\",","185","                  \"query\": Object {","186","                    \"projects\": \"sample-key\",","187","                    \"resolved\": \"false\",","188","                    \"rules\": \"foo\",","189","                    \"types\": \"VULNERABILITY,SECURITY_HOTSPOT\",","190","                  },","191","                }","192","              }","193","            >","194","              13","195","            <\/Link>","196","          <\/td>","197","        <\/tr>","198","        <tr","199","          key=\"example-key\"","200","        >","201","          <td","202","            className=\"coding-rules-detail-list-name\"","203","          >","204","            Example","205","          <\/td>","206","          <td","207","            className=\"coding-rules-detail-list-parameters\"","208","          >","209","            <Link","210","              onlyActiveOnIndex={false}","211","              style={Object {}}","212","              to={","213","                Object {","214","                  \"pathname\": \"\/organizations\/org\/issues\",","215","                  \"query\": Object {","216","                    \"projects\": \"example-key\",","217","                    \"resolved\": \"false\",","218","                    \"rules\": \"foo\",","219","                    \"types\": \"VULNERABILITY,SECURITY_HOTSPOT\","]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/RuleDetails.tsx":[{"add":["260","          {!ruleDetails.isTemplate && ruleDetails.type !== 'SECURITY_HOTSPOT' && ("],"delete":["260","          {!ruleDetails.isTemplate && ("]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/__tests__\/RuleDetailsIssues-test.tsx":[{"add":["46","  const wrapper = shallowRender();","53","      rules: 'foo'","57","});","58","","59","function shallowRender(props: Partial<RuleDetailsIssues['props']> = {}) {","60","  return shallow(","61","    <RuleDetailsIssues","62","      appState={{ branchesEnabled: false }}","63","      organization=\"org\"","64","      ruleDetails={{ key: 'foo', type: 'BUG' }}","65","      {...props}","66","    \/>","67","  );"],"delete":["46","  await check('BUG', undefined);","47","});","48","","49","it('should handle hotspot rules', async () => {","50","  await check('SECURITY_HOTSPOT', ['VULNERABILITY', 'SECURITY_HOTSPOT']);","51","});","52","","53","async function check(ruleType: T.RuleType, requestedTypes: T.RuleType[] | undefined) {","54","  const wrapper = shallow(","55","    <RuleDetailsIssues","56","      appState={{ branchesEnabled: false }}","57","      organization=\"org\"","58","      ruleDetails={{ key: 'foo', type: ruleType }}","59","    \/>","60","  );","67","      rules: 'foo',","68","      types: requestedTypes && requestedTypes.join()"]}],"server\/sonar-web\/src\/main\/js\/apps\/coding-rules\/components\/RuleDetailsIssues.tsx":[{"add":["49","  state: State = { loading: false };","67","    const {","68","      ruleDetails: { key },","69","      organization","70","    } = this.props;","71","","74","      {","75","        resolved: 'false',","76","        rules: key,","77","        organization","78","      },","103","    const {","104","      ruleDetails: { key },","105","      organization","106","    } = this.props;","107","","112","    const path = getIssuesUrl({ resolved: 'false', rules: key }, organization);","132","    const {","133","      ruleDetails: { key },","134","      organization","135","    } = this.props;","136","","138","      { resolved: 'false', rules: key, projects: project.key },","139","      organization"],"delete":["49","  state: State = { loading: true };","66","  getBaseIssuesQuery = () => ({","67","    resolved: 'false',","68","    rules: this.props.ruleDetails.key,","69","    types:","70","      this.props.ruleDetails.type === 'SECURITY_HOTSPOT'","71","        ? ['VULNERABILITY', 'SECURITY_HOTSPOT'].join()","72","        : undefined","73","  });","74","","78","      { ...this.getBaseIssuesQuery(), organization: this.props.organization },","107","    const path = getIssuesUrl(this.getBaseIssuesQuery(), this.props.organization);","128","      { ...this.getBaseIssuesQuery(), projects: project.key },","129","      this.props.organization"]}]}},"35f6a66273ba7ee5815b1c35446f17da9b1b6f0b":{"changes":{"sonar-batch\/src\/main\/java\/org\/sonar\/batch\/cpd\/CpdExecutor.java":"MODIFY"},"diff":{"sonar-batch\/src\/main\/java\/org\/sonar\/batch\/cpd\/CpdExecutor.java":[{"add":["112","    progressReport.message(String.format(\"%d\/%d - current file: %s\", count, total, inputFile.absolutePath()));","125","      LOG.warn(\"Timeout during detection of duplications for \" + inputFile.absolutePath());","131","      throw new IllegalStateException(\"Fail during detection of duplication for \" + inputFile.absolutePath(), e);"],"delete":["112","    progressReport.message(String.format(\"%d\/%d - current file: %s\", count, total, inputFile));","125","      LOG.warn(\"Timeout during detection of duplications for \" + inputFile, e);","131","      throw new IllegalStateException(\"Fail during detection of duplication for \" + inputFile, e);"]}]}},"489831d3073f67cb838fd607fa90a344125c33f2":{"changes":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/qualityprofile\/QProfileChangeDaoTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualityprofile\/ws\/ChangelogAction.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/qualityprofile\/ws\/ChangelogActionTest.java":"MODIFY","sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/qualityprofile\/ChangelogWsRequest.java":"ADD","sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/qualityprofile\/QualityProfilesService.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/qualityprofile\/QProfileChangeDao.java":"MODIFY","tests\/src\/test\/java\/org\/sonarqube\/tests\/qualityProfile\/QualityProfilesWsTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/qualityprofile\/QProfileChangeMapper.java":"MODIFY","server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/qualityprofile\/QProfileChangeMapper.xml":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/qualityprofile\/QProfileChangeDaoTest.java":[{"add":["190","  public void countByQuery() {","193","    long start = system2.now();","197","    long end = system2.now();","199","    assertThat(underTest.countByQuery(dbSession, new QProfileChangeQuery(profile1.getKee()))).isEqualTo(2);","200","    assertThat(underTest.countByQuery(dbSession, new QProfileChangeQuery(profile2.getKee()))).isEqualTo(1);","201","    assertThat(underTest.countByQuery(dbSession, new QProfileChangeQuery(\"does_not_exist\"))).isEqualTo(0);","202","","203","    QProfileChangeQuery query = new QProfileChangeQuery(profile1.getKee());","204","    query.setToExcluded(start);","205","    assertThat(underTest.countByQuery(dbSession, query)).isEqualTo(0);","206","","207","    QProfileChangeQuery query2 = new QProfileChangeQuery(profile1.getKee());","208","    query2.setToExcluded(end);","209","    assertThat(underTest.countByQuery(dbSession, query2)).isEqualTo(2);","222","    assertThat(underTest.countByQuery(dbSession, new QProfileChangeQuery(profile1.getKee()))).isEqualTo(0);","223","    assertThat(underTest.countByQuery(dbSession, new QProfileChangeQuery(profile2.getKee()))).isEqualTo(1);","233","    assertThat(underTest.countByQuery(dbSession, new QProfileChangeQuery(profile1.getKee()))).isEqualTo(1);"],"delete":["190","  public void countForQProfileUuid() {","197","    assertThat(underTest.countForQProfileUuid(dbSession, profile1.getKee())).isEqualTo(2);","198","    assertThat(underTest.countForQProfileUuid(dbSession, profile2.getKee())).isEqualTo(1);","199","    assertThat(underTest.countForQProfileUuid(dbSession, \"does_not_exist\")).isEqualTo(0);","212","    assertThat(underTest.countForQProfileUuid(dbSession, profile1.getKee())).isEqualTo(0);","213","    assertThat(underTest.countForQProfileUuid(dbSession, profile2.getKee())).isEqualTo(1);","223","    assertThat(underTest.countForQProfileUuid(dbSession, profile1.getKee())).isEqualTo(1);"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualityprofile\/ws\/ChangelogAction.java":[{"add":["110","      int total = dbClient.qProfileChangeDao().countByQuery(dbSession, query);"],"delete":["110","      int total = dbClient.qProfileChangeDao().countForQProfileUuid(dbSession, query.getProfileUuid());"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/qualityprofile\/ws\/ChangelogActionTest.java":[{"add":["59","import static org.sonarqube.ws.client.qualityprofile.QualityProfileWsParameters.PARAM_SINCE;","236","  public void changelog_filter_by_since() throws Exception {","237","    QProfileDto qualityProfile = dbTester.qualityProfiles().insert(organization);","238","    system2.setNow(DateUtils.parseDateTime(\"2011-04-25T01:15:42+0100\").getTime());","239","    QProfileChangeDto change = QualityProfileTesting.newQProfileChangeDto()","240","      .setUuid(null)","241","      .setCreatedAt(0)","242","      .setRulesProfileUuid(qualityProfile.getRulesProfileUuid());","243","    DbSession session = dbTester.getSession();","244","    dbTester.getDbClient().qProfileChangeDao().insert(session, change);","245","    session.commit();","246","","247","    String response = ws.newRequest()","248","      .setMethod(\"GET\")","249","      .setParam(PARAM_KEY, qualityProfile.getKee())","250","      .setParam(PARAM_SINCE, \"2011-04-25T01:15:42+0100\")","251","      .execute()","252","      .getInput();","253","","254","    assertThat(response).contains(\"\\\"total\\\":1\");","255","","256","    String response2 = ws.newRequest()","257","      .setMethod(\"GET\")","258","      .setParam(PARAM_KEY, qualityProfile.getKee())","259","      .setParam(PARAM_SINCE, \"2011-04-25T01:15:43+0100\")","260","      .execute()","261","      .getInput();","262","","263","    assertThat(response2).contains(\"\\\"total\\\":0\");","264","  }","265","","266","  @Test"],"delete":[]}],"sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/qualityprofile\/ChangelogWsRequest.java":[{"add":[],"delete":[]}],"sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/client\/qualityprofile\/QualityProfilesService.java":[{"add":["61","import static org.sonarqube.ws.client.qualityprofile.QualityProfileWsParameters.PARAM_KEY;","64","import static org.sonarqube.ws.client.qualityprofile.QualityProfileWsParameters.PARAM_NAME;","68","import static org.sonarqube.ws.client.qualityprofile.QualityProfileWsParameters.PARAM_PARENT_QUALITY_PROFILE;","244","","245","  public String changelog(ChangelogWsRequest request) {","246","    PostRequest postRequest = new PostRequest(path(\"changelog\"))","247","      .setParam(\"language\", request.getLanguage())","248","      .setParam(\"organization\", request.getOrganization())","249","      .setParam(\"qualityProfile\", request.getQualityProfile());","250","    if (request.getP() != null) {","251","      postRequest.setParam(\"p\", request.getP());","252","    }","253","    if (request.getPs() != null) {","254","      postRequest.setParam(\"ps\", request.getPs());","255","    }","256","    if (request.getSince() != null) {","257","      postRequest.setParam(\"since\", request.getSince());","258","    }","259","    if (request.getTo() != null) {","260","      postRequest.setParam(\"to\", request.getTo());","261","    }","262","    return call(postRequest).content();","263","  }"],"delete":["62","import static org.sonarqube.ws.client.qualityprofile.QualityProfileWsParameters.PARAM_NAME;","66","import static org.sonarqube.ws.client.qualityprofile.QualityProfileWsParameters.PARAM_PARENT_QUALITY_PROFILE;","68","import static org.sonarqube.ws.client.qualityprofile.QualityProfileWsParameters.PARAM_KEY;","69","import static org.sonarqube.ws.client.qualityprofile.QualityProfileWsParameters.PARAM_QUALITY_PROFILE;"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/qualityprofile\/QProfileChangeDao.java":[{"add":["52","  \/**","53","   * Note: offset and limit of the query object will be ignored","54","   *\/","55","  public int countByQuery(DbSession dbSession, QProfileChangeQuery query) {","56","    return mapper(dbSession).countByQuery(query);"],"delete":["52","  public int countForQProfileUuid(DbSession dbSession, String profileUuid) {","53","    return mapper(dbSession).countForQProfileUuid(profileUuid);"]}],"tests\/src\/test\/java\/org\/sonarqube\/tests\/qualityProfile\/QualityProfilesWsTest.java":[{"add":["23","import org.json.JSONException;","27","import org.skyscreamer.jsonassert.JSONAssert;","28","import org.skyscreamer.jsonassert.JSONCompareMode;","40","import org.sonarqube.ws.client.qualityprofile.ChangelogWsRequest;","50","  private static final String EXPECTED_CHANGELOG = \"{\\\"total\\\":2,\\\"p\\\":1,\\\"ps\\\":50,\\\"events\\\":[\" +","51","    \"{\\\"authorLogin\\\":\\\"admin\\\",\\\"authorName\\\":\\\"Administrator\\\",\\\"action\\\":\\\"ACTIVATED\\\",\\\"ruleKey\\\":\\\"xoo:OneIssuePerLine\\\",\\\"ruleName\\\":\\\"One Issue Per Line\\\",\\\"params\\\":{\\\"severity\\\":\\\"MAJOR\\\"}},\" +","52","    \"{\\\"authorLogin\\\":\\\"admin\\\",\\\"authorName\\\":\\\"Administrator\\\",\\\"action\\\":\\\"ACTIVATED\\\",\\\"ruleKey\\\":\\\"xoo:OneBugIssuePerLine\\\",\\\"ruleName\\\":\\\"One Bug Issue Per Line\\\",\\\"params\\\":{\\\"severity\\\":\\\"MAJOR\\\"}}\" +","53","    \"]}\";","54","  private static final String EXPECTED_CHANGELOG_EMPTY = \"{\\\"total\\\":0,\\\"p\\\":1,\\\"ps\\\":50,\\\"events\\\":[]}\";","55","","130","  @Test","131","  public void changelog() throws JSONException {","132","    Organization org = tester.organizations().generate();","133","    CreateWsResponse.QualityProfile profile = tester.qProfiles().createXooProfile(org);","134","","135","    String changelog = tester.wsClient().qualityProfiles().changelog(ChangelogWsRequest.builder()","136","      .setOrganization(org.getKey())","137","      .setLanguage(profile.getLanguage())","138","      .setQualityProfile(profile.getName())","139","      .build());","140","    JSONAssert.assertEquals(EXPECTED_CHANGELOG_EMPTY, changelog, JSONCompareMode.STRICT);","141","","142","    tester.qProfiles().activateRule(profile, RULE_ONE_BUG_PER_LINE);","143","    tester.qProfiles().activateRule(profile, RULE_ONE_ISSUE_PER_LINE);","144","","145","    String changelog2 = tester.wsClient().qualityProfiles().changelog(ChangelogWsRequest.builder()","146","      .setOrganization(org.getKey())","147","      .setLanguage(profile.getLanguage())","148","      .setQualityProfile(profile.getName())","149","      .build());","150","    JSONAssert.assertEquals(EXPECTED_CHANGELOG, changelog2, JSONCompareMode.LENIENT);","151","","152","    String changelog3 = tester.wsClient().qualityProfiles().changelog(ChangelogWsRequest.builder()","153","      .setOrganization(org.getKey())","154","      .setLanguage(profile.getLanguage())","155","      .setQualityProfile(profile.getName())","156","      .setSince(\"2999-12-31T23:59:59+0000\")","157","      .build());","158","    JSONAssert.assertEquals(EXPECTED_CHANGELOG_EMPTY, changelog3, JSONCompareMode.STRICT);","159","  }","160",""],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/qualityprofile\/QProfileChangeMapper.java":[{"add":["31","  int countByQuery(@Param(\"query\") QProfileChangeQuery query);"],"delete":["31","  int countForQProfileUuid(@Param(\"qProfileUuid\") String qProfileUuid);"]}],"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/qualityprofile\/QProfileChangeMapper.xml":[{"add":["33","  <select id=\"countByQuery\" resultType=\"int\">","35","    <include refid=\"sqlSelectByQuery\" \/>","39","    select <include refid=\"selectColumns\" \/>","41","    order by qpc.created_at desc","47","    select <include refid=\"selectColumns\" \/>","49","    order by qpc.created_at desc","57","    select <include refid=\"selectColumns\" \/>","59","    order by qpc.created_at desc"],"delete":["33","  <select id=\"countForQProfileUuid\" resultType=\"int\">","35","    from qprofile_changes qpc","36","    inner join rules_profiles rp on rp.kee = qpc.rules_profile_uuid","37","    inner join org_qprofiles oqp on oqp.rules_profile_uuid = rp.kee","38","    where","39","      oqp.uuid = #{qProfileUuid, jdbcType=VARCHAR}","65","    select <include refid=\"selectColumns\" \/>","77","    order by qpc.created_at desc"]}]}},"a815f59e579ff2eef9e31fb6ca981d436072b220":{"changes":{"server\/sonar-docs\/src\/templates\/page.tsx":"MODIFY"},"diff":{"server\/sonar-docs\/src\/templates\/page.tsx":[{"add":["159","        `<!-- sonarcloud -->[\\\\s\\\\S]*<h2>${heading.value!.replace(","160","          \/[.*+?^${}()|[\\]\\\\]\/g,","161","          '\\\\$&'","162","        )}<\\\\\/h2>[\\\\s\\\\S]*<!-- \/sonarcloud -->`,"],"delete":["159","        `<!-- sonarcloud -->[\\\\s\\\\S]*<h2>${heading.value}<\\\\\/h2>[\\\\s\\\\S]*<!-- \/sonarcloud -->`,"]}]}},"13f6e5ae548ebf531db529353bd29d4aeef9d2a8":{"changes":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY"},"diff":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["3225","onboarding.create_project.zero_alm_instances.gitlab=You must first configure a GitLab instance."],"delete":[]}]}},"b922a7648b5a6d4a26a659900ceb8644cbc5c10b":{"changes":{"server\/sonar-webserver-webapi\/src\/test\/resources\/org\/sonar\/server\/issue\/ws\/SearchActionTest\/filter_by_leak_period_has_no_effect_on_prs.json":"ADD","server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionComponentsTest.java":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/issue\/ws\/SearchAction.java":"MODIFY","server\/sonar-webserver-es\/src\/main\/java\/org\/sonar\/server\/issue\/index\/IssueQueryFactory.java":"MODIFY","server\/sonar-webserver-es\/src\/test\/java\/org\/sonar\/server\/issue\/index\/IssueQueryFactoryTest.java":"MODIFY","server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/hotspot\/ws\/SearchActionTest.java":"MODIFY","server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionTest.java":"MODIFY","server\/sonar-webserver-es\/src\/main\/java\/org\/sonar\/server\/issue\/index\/IssueIndex.java":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/hotspot\/ws\/SearchAction.java":"MODIFY","server\/sonar-webserver-webapi\/src\/test\/resources\/org\/sonar\/server\/issue\/ws\/SearchActionTest\/filter_by_leak_period.json":"ADD"},"diff":{"server\/sonar-webserver-webapi\/src\/test\/resources\/org\/sonar\/server\/issue\/ws\/SearchActionTest\/filter_by_leak_period_has_no_effect_on_prs.json":[{"add":[],"delete":[]}],"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionComponentsTest.java":[{"add":["170","      .containsExactlyInAnyOrder(issue1.getKey());","175","      .containsExactlyInAnyOrder(issue1.getKey());","486","      .extracting(Issue::getKey, Issue::getComponent, Issue::getProject, Issue::getBranch, Issue::hasBranch)","487","      .containsExactlyInAnyOrder(","488","        tuple(issueOnProject1Branch1.getKey(), project1Branch1.getKey(), project1Branch1.getKey(), project1Branch1.getBranch(), true),","489","        tuple(issueOnFileOnProject1Branch1.getKey(), fileOnProject1Branch1.getKey(), project1Branch1.getKey(), project1Branch1.getBranch(), true),","490","        tuple(issueOnProject2.getKey(), project2.getKey(), project2.getKey(), \"\", false));","498","      .extracting(Issue::getKey, Issue::getComponent, Issue::getBranch)","499","      .containsExactlyInAnyOrder(","500","        tuple(issueOnProject1Branch1.getKey(), project1Branch1.getKey(), project1Branch1.getBranch()),","501","        tuple(issueOnFileOnProject1Branch1.getKey(), fileOnProject1Branch1.getKey(), project1Branch1.getBranch()));","672","      .extracting(Issue::getKey, Issue::getComponent, Issue::getBranch)","673","      .containsExactlyInAnyOrder(tuple(branchIssue.getKey(), branchFile.getKey(), branchFile.getBranch()));","680","      .extracting(Issue::getKey, Issue::getComponent, Issue::getBranch)","681","      .containsExactlyInAnyOrder(tuple(branchIssue.getKey(), branchFile.getKey(), branchFile.getBranch()));","688","      .extracting(Issue::getKey, Issue::getComponent, Issue::getBranch)","689","      .containsExactlyInAnyOrder(tuple(branchIssue.getKey(), branchFile.getKey(), branchFile.getBranch()));"],"delete":["170","        .containsExactlyInAnyOrder(issue1.getKey());","175","        .containsExactlyInAnyOrder(issue1.getKey());","486","        .extracting(Issue::getKey, Issue::getComponent, Issue::getProject, Issue::getBranch, Issue::hasBranch)","487","        .containsExactlyInAnyOrder(","488","          tuple(issueOnProject1Branch1.getKey(), project1Branch1.getKey(), project1Branch1.getKey(), project1Branch1.getBranch(), true),","489","          tuple(issueOnFileOnProject1Branch1.getKey(), fileOnProject1Branch1.getKey(), project1Branch1.getKey(), project1Branch1.getBranch(), true),","490","          tuple(issueOnProject2.getKey(), project2.getKey(), project2.getKey(), \"\", false));","498","        .extracting(Issue::getKey, Issue::getComponent, Issue::getBranch)","499","        .containsExactlyInAnyOrder(","500","          tuple(issueOnProject1Branch1.getKey(), project1Branch1.getKey(), project1Branch1.getBranch()),","501","          tuple(issueOnFileOnProject1Branch1.getKey(), fileOnProject1Branch1.getKey(), project1Branch1.getBranch()));","672","        .extracting(Issue::getKey, Issue::getComponent, Issue::getBranch)","673","        .containsExactlyInAnyOrder(tuple(branchIssue.getKey(), branchFile.getKey(), branchFile.getBranch()));","680","        .extracting(Issue::getKey, Issue::getComponent, Issue::getBranch)","681","        .containsExactlyInAnyOrder(tuple(branchIssue.getKey(), branchFile.getKey(), branchFile.getBranch()));","688","        .extracting(Issue::getKey, Issue::getComponent, Issue::getBranch)","689","        .containsExactlyInAnyOrder(tuple(branchIssue.getKey(), branchFile.getKey(), branchFile.getBranch()));"]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/issue\/ws\/SearchAction.java":[{"add":["309","        \"If this parameter is set to a truthy value, createdAfter must not be set and one component uuid or key must be provided.\")"],"delete":["309","        \"If this parameter is set to a truthy value, createdAfter must not be set and one component id or key must be provided.\")"]}],"server\/sonar-webserver-es\/src\/main\/java\/org\/sonar\/server\/issue\/index\/IssueQueryFactory.java":[{"add":["97","  private static final Set<String> QUALIFIERS_WITHOUT_LEAK_PERIOD = new HashSet<>(Arrays.asList(Qualifiers.APP, Qualifiers.VIEW, Qualifiers.SUBVIEW));","171","      checkArgument(createdAfter == null || createdInLast == null, format(\"Parameters %s and %s cannot be set simultaneously\", PARAM_CREATED_AFTER, PARAM_CREATED_IN_LAST));","175","      checkArgument(createdInLast == null, format(\"Parameters %s and %s cannot be set simultaneously\", PARAM_CREATED_IN_LAST, PARAM_SINCE_LEAK_PERIOD));","176","","179","","180","      if (!QUALIFIERS_WITHOUT_LEAK_PERIOD.contains(component.qualifier()) && request.getPullRequest() == null) {","181","        Date createdAfterFromSnapshot = findCreatedAfterFromComponentUuid(dbSession, component);","182","        setCreatedAfterFromDates(builder, createdAfterFromSnapshot, null, false);","183","      }","189","    \/\/ if last analysis has no period date, then no issue should be considered new.","190","    return snapshot.map(s -> longToDate(s.getPeriodDate())).orElseGet(() -> new Date(clock.millis()));","325","    if (request.getSinceLeakPeriod() == null || !request.getSinceLeakPeriod() || request.getPullRequest() != null) {","337",""],"delete":["97","","147","    checkArgument(createdAfter == null || createdInLast == null, format(\"Parameters %s and %s cannot be set simultaneously\", PARAM_CREATED_AFTER, PARAM_CREATED_IN_LAST));","148","","178","      Date createdAfterFromSnapshot = findCreatedAfterFromComponentUuid(dbSession, component);","179","      setCreatedAfterFromDates(builder, createdAfterFromSnapshot, createdInLast, false);","183","  @CheckForNull","186","    return snapshot.map(s -> longToDate(s.getPeriodDate())).orElse(null);","321","    if (request.getSinceLeakPeriod() == null || !request.getSinceLeakPeriod()) {"]}],"server\/sonar-webserver-es\/src\/test\/java\/org\/sonar\/server\/issue\/index\/IssueQueryFactoryTest.java":[{"add":["26","import java.util.Map;","46","import static org.assertj.core.api.Assertions.tuple;","280","    when(clock.millis()).thenReturn(now.getTime());","297","    assertThat(result.createdAfterByProjectUuids().entrySet()).extracting(Map.Entry::getKey, e -> e.getValue().date(), e -> e.getValue().inclusive()).containsOnly(","298","      tuple(project1.uuid(), new Date(analysis1.getPeriodDate()), false));","397","      .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.projectUuids()), IssueQuery::isMainBranch)","398","      .containsOnly(branch.uuid(), singletonList(project.uuid()), false);","403","      .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.projectUuids()), IssueQuery::isMainBranch)","404","      .containsOnly(branch.uuid(), singletonList(project.uuid()), false);","416","      .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.fileUuids()), IssueQuery::isMainBranch)","417","      .containsOnly(branch.uuid(), singletonList(file.uuid()), false);","423","      .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.fileUuids()), IssueQuery::isMainBranch)","424","      .containsOnly(branch.uuid(), singletonList(file.uuid()), false);","430","      .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.fileUuids()), IssueQuery::isMainBranch)","431","      .containsOnly(branch.uuid(), singletonList(file.uuid()), false);","444","      .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.componentUuids()), IssueQuery::isMainBranch)","445","      .containsOnly(branch.uuid(), singletonList(file.uuid()), false);","456","      .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.projectUuids()), IssueQuery::isMainBranch)","457","      .containsOnly(project.uuid(), singletonList(project.uuid()), true);","461","      .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.projectUuids()), IssueQuery::isMainBranch)","462","      .containsOnly(project.uuid(), singletonList(project.uuid()), true);","497","      .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.projectUuids()), IssueQuery::isMainBranch)","498","      .containsOnly(applicationBranch1.uuid(), Collections.emptyList(), false);","505","      .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.projectUuids()), IssueQuery::isMainBranch)","506","      .containsOnly(applicationBranch1.uuid(), singletonList(project1.uuid()), false);"],"delete":["294","    assertThat(result.createdAfterByProjectUuids().get(project1.uuid()).date().getTime()).isEqualTo(analysis1.getPeriodDate());","295","    assertThat(result.createdAfterByProjectUuids().get(project1.uuid()).inclusive()).isFalse();","394","        .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.projectUuids()), IssueQuery::isMainBranch)","395","        .containsOnly(branch.uuid(), singletonList(project.uuid()), false);","400","        .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.projectUuids()), IssueQuery::isMainBranch)","401","        .containsOnly(branch.uuid(), singletonList(project.uuid()), false);","413","        .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.fileUuids()), IssueQuery::isMainBranch)","414","        .containsOnly(branch.uuid(), singletonList(file.uuid()), false);","420","        .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.fileUuids()), IssueQuery::isMainBranch)","421","        .containsOnly(branch.uuid(), singletonList(file.uuid()), false);","427","        .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.fileUuids()), IssueQuery::isMainBranch)","428","        .containsOnly(branch.uuid(), singletonList(file.uuid()), false);","441","        .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.componentUuids()), IssueQuery::isMainBranch)","442","        .containsOnly(branch.uuid(), singletonList(file.uuid()), false);","453","        .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.projectUuids()), IssueQuery::isMainBranch)","454","        .containsOnly(project.uuid(), singletonList(project.uuid()), true);","458","        .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.projectUuids()), IssueQuery::isMainBranch)","459","        .containsOnly(project.uuid(), singletonList(project.uuid()), true);","494","        .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.projectUuids()), IssueQuery::isMainBranch)","495","        .containsOnly(applicationBranch1.uuid(), Collections.emptyList(), false);","502","        .extracting(IssueQuery::branchUuid, query -> new ArrayList<>(query.projectUuids()), IssueQuery::isMainBranch)","503","        .containsOnly(applicationBranch1.uuid(), singletonList(project1.uuid()), false);"]}],"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/hotspot\/ws\/SearchActionTest.java":[{"add":["42","import org.sonar.api.impl.utils.TestSystem2;","106","  private TestSystem2 system2 = new TestSystem2();","116","  private SearchAction underTest = new SearchAction(dbClient, userSessionRule, issueIndex, responseFormatter, system2);","727","      .isInstanceOf(IllegalArgumentException.class)","728","      .hasMessage(\"Parameter 'onlyMine' can be used with parameter 'projectKey' only\");","741","      .isInstanceOf(IllegalArgumentException.class)","742","      .hasMessage(\"Parameter 'onlyMine' requires user to be logged in\");","1343","      .executeProtobuf(SearchWsResponse.class);","1354","  public void returns_nothing_when_sinceLeakPeriod_is_true_and_no_period_exists() {","1355","    long referenceDate = 800_996_999_332L;","1356","","1357","    system2.setNow(referenceDate + 10_000);","1358","    ComponentDto project = dbTester.components().insertPublicProject();","1359","    userSessionRule.registerComponents(project);","1360","    indexPermissions();","1361","    ComponentDto file = dbTester.components().insertComponent(newFileDto(project));","1362","    dbTester.components().insertSnapshot(project, t -> t.setPeriodDate(referenceDate).setLast(false));","1363","    dbTester.components().insertSnapshot(project, t -> t.setPeriodDate(null).setLast(true));","1364","    RuleDefinitionDto rule = newRule(SECURITY_HOTSPOT);","1365","    IssueDto afterRef = dbTester.issues().insertHotspot(rule, project, file, t -> t.setIssueCreationTime(referenceDate + 1000));","1366","    IssueDto atRef = dbTester.issues().insertHotspot(rule, project, file, t -> t.setType(SECURITY_HOTSPOT).setIssueCreationTime(referenceDate));","1367","    IssueDto beforeRef = dbTester.issues().insertHotspot(rule, project, file, t -> t.setIssueCreationTime(referenceDate - 1000));","1368","    indexIssues();","1369","","1370","    SearchWsResponse responseAll = newRequest(project)","1371","      .executeProtobuf(SearchWsResponse.class);","1372","    assertThat(responseAll.getHotspotsList())","1373","      .extracting(SearchWsResponse.Hotspot::getKey)","1374","      .containsExactlyInAnyOrder(Stream.of(afterRef, atRef, beforeRef)","1375","        .map(IssueDto::getKey)","1376","        .toArray(String[]::new));","1377","","1378","    SearchWsResponse responseOnLeak = newRequest(project,","1379","      t -> t.setParam(\"sinceLeakPeriod\", \"true\"))","1380","      .executeProtobuf(SearchWsResponse.class);","1381","    assertThat(responseOnLeak.getHotspotsList()).isEmpty();","1382","  }","1383","","1384","  @Test","1385","  public void returnsall_issues_when_sinceLeakPeriod_is_true_and_is_pr() {","1386","    long referenceDate = 800_996_999_332L;","1387","","1388","    system2.setNow(referenceDate + 10_000);","1389","    ComponentDto project = dbTester.components().insertPublicProject();","1390","    ComponentDto pr = dbTester.components().insertProjectBranch(project, b -> b.setBranchType(BranchType.PULL_REQUEST).setKey(\"pr\"));","1391","    userSessionRule.registerComponents(project);","1392","    indexPermissions();","1393","    ComponentDto file = dbTester.components().insertComponent(newFileDto(pr));","1394","    dbTester.components().insertSnapshot(project, t -> t.setPeriodDate(referenceDate).setLast(true));","1395","    dbTester.components().insertSnapshot(pr, t -> t.setPeriodDate(null).setLast(true));","1396","    RuleDefinitionDto rule = newRule(SECURITY_HOTSPOT);","1397","    IssueDto afterRef = dbTester.issues().insertHotspot(rule, pr, file, t -> t.setIssueCreationTime(referenceDate + 1000));","1398","    IssueDto atRef = dbTester.issues().insertHotspot(rule, pr, file, t -> t.setType(SECURITY_HOTSPOT).setIssueCreationTime(referenceDate));","1399","    IssueDto beforeRef = dbTester.issues().insertHotspot(rule, pr, file, t -> t.setIssueCreationTime(referenceDate - 1000));","1400","    indexIssues();","1401","","1402","    SearchWsResponse responseAll = newRequest(project).setParam(\"pullRequest\", \"pr\")","1403","      .executeProtobuf(SearchWsResponse.class);","1404","    assertThat(responseAll.getHotspotsList())","1405","      .extracting(SearchWsResponse.Hotspot::getKey)","1406","      .containsExactlyInAnyOrder(Stream.of(afterRef, atRef, beforeRef)","1407","        .map(IssueDto::getKey)","1408","        .toArray(String[]::new));","1409","","1410","    SearchWsResponse responseOnLeak = newRequest(project,","1411","      t -> t.setParam(\"sinceLeakPeriod\", \"true\").setParam(\"pullRequest\", \"pr\"))","1412","      .executeProtobuf(SearchWsResponse.class);","1413","    assertThat(responseOnLeak.getHotspotsList()).hasSize(3);","1414","  }","1415","","1416","  @Test","1441","          .setMessage(\"message-\" + i)"],"delete":["52","import org.sonar.db.organization.OrganizationDto;","115","  private SearchAction underTest = new SearchAction(dbClient, userSessionRule, issueIndex, responseFormatter);","726","        .isInstanceOf(IllegalArgumentException.class)","727","        .hasMessage(\"Parameter 'onlyMine' can be used with parameter 'projectKey' only\");","740","        .isInstanceOf(IllegalArgumentException.class)","741","        .hasMessage(\"Parameter 'onlyMine' requires user to be logged in\");","1342","        .executeProtobuf(SearchWsResponse.class);","1377","          .setMessage(\"message-\" +i)"]}],"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/issue\/ws\/SearchActionTest.java":[{"add":["46","import org.sonar.db.component.BranchType;","49","import org.sonar.db.component.SnapshotDto;","98","import static org.sonar.db.component.ComponentDto.PULL_REQUEST_SEPARATOR;","111","import static org.sonarqube.ws.client.issue.IssuesWsParameters.PARAM_PULL_REQUEST;","113","import static org.sonarqube.ws.client.issue.IssuesWsParameters.PARAM_SINCE_LEAK_PERIOD;","516","  public void filter_by_leak_period() {","517","    UserDto john = db.users().insertUser(u -> u.setLogin(\"john\").setName(\"John\").setEmail(\"john@email.com\"));","518","    UserDto alice = db.users().insertUser(u -> u.setLogin(\"alice\").setName(\"Alice\").setEmail(\"alice@email.com\"));","519","    OrganizationDto organization = db.organizations().insert();","520","    ComponentDto project = db.components().insertComponent(ComponentTesting.newPublicProjectDto(organization, \"PROJECT_ID\").setDbKey(\"PROJECT_KEY\"));","521","    SnapshotDto snapshotDto = db.components().insertSnapshot(project, s -> s.setLast(true).setPeriodDate(parseDateTime(\"2014-09-05T00:00:00+0100\").getTime()));","522","    indexPermissions();","523","","524","    ComponentDto file = db.components().insertComponent(newFileDto(project, null, \"FILE_ID\").setDbKey(\"FILE_KEY\"));","525","    RuleDto rule = newIssueRule();","526","    IssueDto issue1 = newDto(rule, file, project)","527","      .setIssueCreationDate(parseDateTime(\"2014-09-04T00:00:00+0100\"))","528","      .setIssueUpdateDate(parseDateTime(\"2017-12-04T00:00:00+0100\"))","529","      .setEffort(10L)","530","      .setStatus(\"OPEN\")","531","      .setKee(\"82fd47d4-b650-4037-80bc-7b112bd4eac2\")","532","      .setSeverity(\"MAJOR\")","533","      .setAssigneeUuid(john.getUuid());","534","    IssueDto issue2 = newDto(rule, file, project)","535","      .setIssueCreationDate(parseDateTime(\"2014-09-06T00:00:00+0100\"))","536","      .setIssueUpdateDate(parseDateTime(\"2017-12-04T00:00:00+0100\"))","537","      .setEffort(10L)","538","      .setStatus(\"OPEN\")","539","      .setKee(\"7b112bd4-b650-4037-80bc-82fd47d4eac2\")","540","      .setSeverity(\"MAJOR\")","541","      .setAssigneeUuid(alice.getUuid());","542","    dbClient.issueDao().insert(session, issue1, issue2);","543","    session.commit();","544","    indexIssues();","545","","546","    userSession.logIn(john);","547","","548","    ws.newRequest()","549","      .setParam(PARAM_SINCE_LEAK_PERIOD, \"true\")","550","      .setParam(PARAM_COMPONENT_KEYS, \"PROJECT_KEY\")","551","      .execute()","552","      .assertJson(this.getClass(), \"filter_by_leak_period.json\");","553","  }","554","","555","  @Test","556","  public void filter_by_leak_period_without_a_period() {","557","    UserDto john = db.users().insertUser(u -> u.setLogin(\"john\").setName(\"John\").setEmail(\"john@email.com\"));","558","    UserDto alice = db.users().insertUser(u -> u.setLogin(\"alice\").setName(\"Alice\").setEmail(\"alice@email.com\"));","559","    OrganizationDto organization = db.organizations().insert();","560","    ComponentDto project = db.components().insertComponent(ComponentTesting.newPublicProjectDto(organization, \"PROJECT_ID\").setDbKey(\"PROJECT_KEY\"));","561","    SnapshotDto snapshotDto = db.components().insertSnapshot(project);","562","    indexPermissions();","563","    ComponentDto file = db.components().insertComponent(newFileDto(project, null, \"FILE_ID\").setDbKey(\"FILE_KEY\"));","564","    RuleDto rule = newIssueRule();","565","    IssueDto issue1 = newDto(rule, file, project)","566","      .setIssueCreationDate(parseDateTime(\"2014-09-04T00:00:00+0100\"))","567","      .setIssueUpdateDate(parseDateTime(\"2017-12-04T00:00:00+0100\"))","568","      .setEffort(10L)","569","      .setStatus(\"OPEN\")","570","      .setKee(\"82fd47d4-b650-4037-80bc-7b112bd4eac2\")","571","      .setSeverity(\"MAJOR\")","572","      .setAssigneeUuid(john.getUuid());","573","    IssueDto issue2 = newDto(rule, file, project)","574","      .setIssueCreationDate(parseDateTime(\"2014-09-04T00:00:00+0100\"))","575","      .setIssueUpdateDate(parseDateTime(\"2017-12-04T00:00:00+0100\"))","576","      .setEffort(10L)","577","      .setStatus(\"OPEN\")","578","      .setKee(\"7b112bd4-b650-4037-80bc-82fd47d4eac2\")","579","      .setSeverity(\"MAJOR\")","580","      .setAssigneeUuid(alice.getUuid());","581","    dbClient.issueDao().insert(session, issue1, issue2);","582","    session.commit();","583","    indexIssues();","584","","585","    userSession.logIn(john);","586","","587","    ws.newRequest()","588","      .setParam(PARAM_COMPONENT_KEYS, \"PROJECT_KEY\")","589","      .setParam(PARAM_SINCE_LEAK_PERIOD, \"true\")","590","      .execute()","591","      .assertJson(this.getClass(), \"empty_result.json\");","592","  }","593","","594","  @Test","595","  public void filter_by_leak_period_has_no_effect_on_prs() {","596","    UserDto john = db.users().insertUser(u -> u.setLogin(\"john\").setName(\"John\").setEmail(\"john@email.com\"));","597","    UserDto alice = db.users().insertUser(u -> u.setLogin(\"alice\").setName(\"Alice\").setEmail(\"alice@email.com\"));","598","    OrganizationDto organization = db.organizations().insert();","599","    ComponentDto project = db.components().insertPublicProject(organization, c -> c.setUuid(\"PROJECT_ID\").setDbKey(\"PROJECT_KEY\"));","600","    ComponentDto pr = db.components().insertProjectBranch(project, b -> b.setBranchType(BranchType.PULL_REQUEST).setKey(\"pr\"));","601","    SnapshotDto snapshotDto = db.components().insertSnapshot(pr);","602","    indexPermissions();","603","    ComponentDto file = db.components().insertComponent(newFileDto(pr, null, \"FILE_ID\").setDbKey(\"FILE_KEY\" + PULL_REQUEST_SEPARATOR + \"pr\"));","604","    RuleDto rule = newIssueRule();","605","    IssueDto issue1 = newDto(rule, file, pr)","606","      .setIssueCreationDate(parseDateTime(\"2014-09-04T00:00:00+0100\"))","607","      .setIssueUpdateDate(parseDateTime(\"2017-12-04T00:00:00+0100\"))","608","      .setEffort(10L)","609","      .setStatus(\"OPEN\")","610","      .setKee(\"82fd47d4-b650-4037-80bc-7b112bd4eac2\")","611","      .setSeverity(\"MAJOR\")","612","      .setAssigneeUuid(john.getUuid());","613","    IssueDto issue2 = newDto(rule, file, pr)","614","      .setIssueCreationDate(parseDateTime(\"2014-09-04T00:00:00+0100\"))","615","      .setIssueUpdateDate(parseDateTime(\"2017-12-04T00:00:00+0100\"))","616","      .setEffort(10L)","617","      .setStatus(\"OPEN\")","618","      .setKee(\"7b112bd4-b650-4037-80bc-82fd47d4eac2\")","619","      .setSeverity(\"MAJOR\")","620","      .setAssigneeUuid(alice.getUuid());","621","    dbClient.issueDao().insert(session, issue1, issue2);","622","    session.commit();","623","    indexIssues();","624","","625","    userSession.logIn(john);","626","","627","    ws.newRequest()","628","      .setParam(PARAM_COMPONENT_KEYS, \"PROJECT_KEY\")","629","      .setParam(PARAM_PULL_REQUEST, \"pr\")","630","      .setParam(PARAM_SINCE_LEAK_PERIOD, \"true\")","631","      .execute()","632","      .assertJson(this.getClass(), \"filter_by_leak_period_has_no_effect_on_prs.json\");","633","  }","634","","635","  @Test","747","      .isEmpty();","779","      .extracting(Issue::getKey)","780","      .containsExactlyInAnyOrder(issue2.getKey());","956","      .isInstanceOf(IllegalArgumentException.class)","957","      .hasMessage(\"Value of parameter 'types' (SECURITY_HOTSPOT) must be one of: [CODE_SMELL, BUG, VULNERABILITY]\");"],"delete":["622","        .isEmpty();","654","        .extracting(Issue::getKey)","655","        .containsExactlyInAnyOrder(issue2.getKey());","831","        .isInstanceOf(IllegalArgumentException.class)","832","        .hasMessage(\"Value of parameter 'types' (SECURITY_HOTSPOT) must be one of: [CODE_SMELL, BUG, VULNERABILITY]\");"]}],"server\/sonar-webserver-es\/src\/main\/java\/org\/sonar\/server\/issue\/index\/IssueIndex.java":[{"add":["640","    Preconditions.checkArgument(createdAfter == null || createdAfter.compareTo(new Date(system.now())) <= 0,"],"delete":["640","    Preconditions.checkArgument(createdAfter == null || createdAfter.before(new Date(system.now())),"]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/hotspot\/ws\/SearchAction.java":[{"add":["26","import java.util.Date;","47","import org.sonar.api.utils.System2;","105","  private System2 system2;","107","  public SearchAction(DbClient dbClient, UserSession userSession, IssueIndex issueIndex, HotspotWsResponseFormatter responseFormatter, System2 system2) {","112","    this.system2 = system2;","297","      if (wsRequest.isSinceLeakPeriod() && !wsRequest.getPullRequest().isPresent()) {","298","        Date sinceDate = dbClient.snapshotDao().selectLastAnalysisByComponentUuid(dbSession, p.uuid())","300","          .orElseGet(() -> new Date(system2.now()));","301","        builder.createdAfter(sinceDate, false);"],"delete":["104","  public SearchAction(DbClient dbClient, UserSession userSession, IssueIndex issueIndex,","105","    HotspotWsResponseFormatter responseFormatter) {","294","      if (wsRequest.isSinceLeakPeriod()) {","295","        dbClient.snapshotDao().selectLastAnalysisByComponentUuid(dbSession, p.uuid())","297","          .ifPresent(d -> builder.createdAfter(d, false));"]}],"server\/sonar-webserver-webapi\/src\/test\/resources\/org\/sonar\/server\/issue\/ws\/SearchActionTest\/filter_by_leak_period.json":[{"add":[],"delete":[]}]}},"a8aa40bd9bd4fea44111def143fa792b07b6013d":{"changes":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY","sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/measures\/CoreMetrics.java":"MODIFY","sonar-core\/src\/test\/java\/org\/sonar\/core\/i18n\/DefaultI18nTest.java":"MODIFY"},"diff":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["1982","metric.sqale_index.description=Total effort (in hours) to fix all the issues on the component and therefore to comply to all the requirements."],"delete":["1982","metric.sqale_index.description=Total effort (in days) to fix all the issues on the component and therefore to comply to all the requirements."]}],"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/measures\/CoreMetrics.java":[{"add":["1937","    .setDescription(\"Total effort (in hours) to fix all the issues on the component and therefore to comply to all the requirements.\")"],"delete":["1937","    .setDescription(\"Total effort (in days) to fix all the issues on the component and therefore to comply to all the requirements.\")"]}],"sonar-core\/src\/test\/java\/org\/sonar\/core\/i18n\/DefaultI18nTest.java":[{"add":["43","  private DefaultI18n underTest;"],"delete":["43","  DefaultI18n underTest;"]}]}},"36b911c2beb62d63067f6c8a0d255ff42182ea9f":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/__tests__\/__snapshots__\/PageSidebar-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/PageSidebar.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/__tests__\/__snapshots__\/PageSidebar-test.tsx.snap":[{"add":["30","    property=\"new_security_review\"","94","    property=\"new_security_review\""],"delete":["30","    property=\"new_security_review_rating\"","94","    property=\"new_security_review_rating\""]}],"server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/PageSidebar.tsx":[{"add":["142","            property=\"new_security_review\""],"delete":["142","            property=\"new_security_review_rating\""]}]}},"e763c1f4f9403ef2a6f345545cdeec52fe3294e2":{"changes":{"server\/sonar-web\/src\/main\/js\/helpers\/l10n.js":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/helpers\/l10n.js":[{"add":["39","  return window.navigator.languages ? window.navigator.languages[0] : window.navigator.language;"],"delete":["39","  const locale = window.navigator.languages ? window.navigator.languages[0] : window.navigator.language;","40","  const tags = locale.split('-');","41","  const [region, ...other] = tags;","42","  return [region.toLowerCase(), ...other.map(t => t.toUpperCase())].join('_');"]}]}},"af241cb7560f391516e5b5039814fcd72766bf23":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/App.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/AllProjects.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/App.js":[{"add":["55","import handleRequiredAuthentication from '..\/..\/..\/app\/utils\/handleRequiredAuthentication';","142","    if (this.state.myIssues && !this.props.currentUser.isLoggedIn) {","143","      handleRequiredAuthentication();","144","      return;","145","    }","146",""],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/projects\/components\/AllProjects.tsx":[{"add":["26","import handleRequiredAuthentication from '..\/..\/..\/app\/utils\/handleRequiredAuthentication';","63","    if (this.props.isFavorite && !this.context.currentUser.isLoggedIn) {","64","      handleRequiredAuthentication();","65","      return;","66","    }"],"delete":[]}]}},"3383b0f376ddbfc348ecedc6fefc72adba929286":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/authentication\/BasicAuthenticatorTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/authentication\/BasicAuthenticator.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/authentication\/BasicAuthenticatorTest.java":[{"add":["38","import static com.google.common.base.Charsets.UTF_8;","39","import static org.assertj.core.api.Java6Assertions.assertThat;","40","import static org.junit.rules.ExpectedException.none;","41","import static org.mockito.Mockito.mock;","42","import static org.mockito.Mockito.verify;","43","import static org.mockito.Mockito.verifyZeroInteractions;","44","import static org.mockito.Mockito.when;","45","","120","  public void fail_to_authenticate_when_invalid_header() throws Exception {","121","    when(request.getHeader(\"Authorization\")).thenReturn(\"Basic Invàlid\");","122","","123","    expectedException.expect(UnauthorizedException.class);","124","    expectedException.expectMessage(\"Invalid basic header\");","125","    underTest.authenticate(request);","126","  }","127","","128","  @Test"],"delete":["22","import static com.google.common.base.Charsets.UTF_8;","23","import static org.assertj.core.api.Java6Assertions.assertThat;","24","import static org.junit.rules.ExpectedException.none;","25","import static org.mockito.Mockito.mock;","26","import static org.mockito.Mockito.verify;","27","import static org.mockito.Mockito.verifyZeroInteractions;","28","import static org.mockito.Mockito.when;","29",""]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/authentication\/BasicAuthenticator.java":[{"add":["67","    String basicAuthDecoded = getDecodedBasicAuth(basicAuthEncoded);","78","  private static String getDecodedBasicAuth(String basicAuthEncoded) {","79","    try {","80","      return new String(BASE64_DECODER.decode(basicAuthEncoded.getBytes(Charsets.UTF_8)), Charsets.UTF_8);","81","    } catch (Exception e) {","82","      throw new UnauthorizedException(\"Invalid basic header\");","83","    }","84","  }","85",""],"delete":["67","    String basicAuthDecoded = new String(BASE64_DECODER.decode(basicAuthEncoded.getBytes(Charsets.UTF_8)), Charsets.UTF_8);"]}]}},"8d8bafa84419df39eedeb8fe95af916c792219fb":{"changes":{"server\/sonar-docs\/src\/pages\/requirements\/requirements.md":"MODIFY"},"diff":{"server\/sonar-docs\/src\/pages\/requirements\/requirements.md":[{"add":["24","SonarQube scanners require version 8 or 11 of the JVM and the SonarQube server requires version 11. Versions beyond Java 11 are not officially supported. ","25","","26","The SonarQube Java analyzer is able to analyze any kind of Java source files regardless of the version of Java they comply to. ","30","| Java           | Server                    | Scanners                  |"],"delete":["24","The SonarQube Java analyzer is able to analyze any kind of Java source files regardless of the version of Java they comply to. However, SonarQube analysis requires version 8+ of the JVM and the SonarQube Server requires version 11+.","28","| Java           | Server                    | Analysis                  |"]}]}},"63a3a432ef8a6127aa690b2bda2abab3c0ff82a5":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/ComponentSourceSnippetViewer-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/ComponentSourceSnippetViewer.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/__tests__\/ComponentSourceSnippetViewer-test.tsx":[{"add":["29","  mockSourceLine,","30","  mockShortLivingBranch","104","it.only('should get the right branch when expanding', async () => {","105","  (getSources as jest.Mock).mockResolvedValueOnce(","106","    Object.values(","107","      mockSnippetsByComponent('a', [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]).sources","108","    )","109","  );","110","  const snippetGroup: T.SnippetGroup = {","111","    locations: [mockFlowLocation()],","112","    ...mockSnippetsByComponent('a', [1, 2, 3, 4])","113","  };","114","","115","  const wrapper = shallowRender({","116","    branchLike: mockShortLivingBranch({ name: 'asdf' }),","117","    snippetGroup","118","  });","119","","120","  wrapper.instance().expandBlock(0, 'down');","121","  await waitAndUpdate(wrapper);","122","","123","  expect(getSources).toHaveBeenCalledWith({ branch: 'asdf', from: 5, key: 'a', to: 17 });","124","});","125",""],"delete":["29","  mockSourceLine"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/ComponentSourceSnippetViewer.tsx":[{"add":["42","import { getBranchLikeQuery } from '..\/..\/..\/helpers\/branches';","106","    const { branchLike, snippetGroup } = this.props;","107","    const { key } = snippetGroup.component;","127","      key,","128","      ...range,","129","      ...getBranchLikeQuery(branchLike)","161","    const { branchLike, snippetGroup } = this.props;","162","    const { key } = snippetGroup.component;","166","    getSources({ key, ...getBranchLikeQuery(branchLike) }).then("],"delete":["124","      key: this.props.snippetGroup.component.key,","125","      ...range","157","    const { key } = this.props.snippetGroup.component;","161","    getSources({ key }).then("]}]}},"01f2c2e66d698a60ad1f303cf7aafaf64852e7a8":{"changes":{"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/purge\/ProjectCleaner.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/duplication\/DuplicationRepositoryImplTest.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/measure\/MeasureTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/purge\/PurgeMapper.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/purge\/PurgeDatastoresStepTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/purge\/PurgeDao.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/purge\/PurgeDatastoresStep.java":"MODIFY","server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/purge\/PurgeMapper.xml":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/util\/WrapInSingleElementArray.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/purge\/PurgeConfigurationTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/purge\/PurgeConfiguration.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/purge\/PurgeDaoTest.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/purge\/ProjectCleanerTest.java":"MODIFY"},"diff":{"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/purge\/ProjectCleaner.java":[{"add":["55","  public ProjectCleaner purge(DbSession session, String rootUuid, String projectUuid, Configuration projectConfig, Collection<String> disabledComponentUuids) {","59","    periodCleaner.clean(session, rootUuid, projectConfig);","61","    PurgeConfiguration configuration = newDefaultPurgeConfiguration(projectConfig, rootUuid, projectUuid, disabledComponentUuids);"],"delete":["30","import org.sonar.db.purge.IdUuidPair;","56","  public ProjectCleaner purge(DbSession session, IdUuidPair rootId, Configuration projectConfig, Collection<String> disabledComponentUuids) {","60","    PurgeConfiguration configuration = newDefaultPurgeConfiguration(projectConfig, rootId, disabledComponentUuids);","62","    periodCleaner.clean(session, configuration.rootProjectIdUuid().getUuid(), projectConfig);"]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/duplication\/DuplicationRepositoryImplTest.java":[{"add":["137","    return Arrays.stream(Component.Type.values())","138","      .filter(t -> t != Component.Type.FILE)","139","      .map(WrapInSingleElementArray.INSTANCE)","140","      .toArray(Object[][]::new);"],"delete":["34","import static com.google.common.base.Predicates.equalTo;","35","import static com.google.common.base.Predicates.not;","36","import static com.google.common.collect.FluentIterable.from;","140","    return from(Arrays.asList(Component.Type.values()))","141","      .filter(not(equalTo(Component.Type.FILE)))","142","      .transform(WrapInSingleElementArray.INSTANCE)","143","      .toArray(Object[].class);"]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/measure\/MeasureTest.java":[{"add":["89","    return MEASURES.stream().map(WrapInSingleElementArray.INSTANCE).toArray(Object[][]::new);","93","    return MEASURES.stream()","94","      .filter(input -> input.getValueType() != valueType)","95","      .map(WrapInSingleElementArray.INSTANCE)","96","      .toArray(Object[][]::new);"],"delete":["35","import static com.google.common.collect.FluentIterable.from;","90","    return from(MEASURES).transform(WrapInSingleElementArray.INSTANCE).toArray(Object[].class);","94","    return from(MEASURES)","95","      .filter(input -> input.getValueType() != valueType).transform(WrapInSingleElementArray.INSTANCE)","96","      .toArray(Object[].class);"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/purge\/PurgeMapper.java":[{"add":["86","  List<String> selectStaleShortLivingBranchesAndPullRequests(@Param(\"projectUuid\") String projectUuid, @Param(\"toDate\") Long toDate);"],"delete":["86","  List<String> selectStaleShortLivingBranchesAndPullRequests(@Param(\"mainBranchProjectUuid\") String mainBranchProjectUuid, @Param(\"toDate\") Long toDate);"]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/purge\/PurgeDatastoresStepTest.java":[{"add":["24","import java.util.Arrays;","25","import java.util.Collections;","26","import java.util.function.Predicate;","27","import org.junit.Before;","34","import org.sonar.ce.task.projectanalysis.analysis.AnalysisMetadataHolderRule;","45","import org.sonar.server.project.Project;","50","import static org.mockito.ArgumentMatchers.anyString;","66","  public AnalysisMetadataHolderRule analysisMetadataHolder = new AnalysisMetadataHolderRule();","72","  private PurgeDatastoresStep underTest = new PurgeDatastoresStep(mock(DbClient.class, Mockito.RETURNS_DEEP_STUBS), projectCleaner, treeRootHolder,","73","    settingsRepository, disabledComponentsHolder, analysisMetadataHolder);","74","","75","  @Before","76","  public void before() {","77","    analysisMetadataHolder.setProject(new Project(\"uuid\", \"key\", \"name\", null, Collections.emptyList()));","78","  }","96","    return dataproviderFromComponentTypeValues(input -> input.isReportType() && input != Component.Type.PROJECT);","109","    return dataproviderFromComponentTypeValues(input -> input.isViewsType() && input != Component.Type.VIEW);","134","    ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);","135","    verify(projectCleaner).purge(any(), argumentCaptor.capture(), anyString(), any(), any());","136","    assertThat(argumentCaptor.getValue()).isEqualTo(PROJECT_UUID);","140","    return Arrays.stream(Component.Type.values())","142","      .map(WrapInSingleElementArray.INSTANCE)","143","      .toArray(Object[][]::new);"],"delete":["21","import com.google.common.base.Predicate;","22","import com.google.common.collect.FluentIterable;","34","import org.sonar.ce.task.projectanalysis.component.MutableDbIdsRepositoryRule;","43","import org.sonar.db.purge.IdUuidPair;","46","import static java.util.Arrays.asList;","59","  private static final long PROJECT_ID = 123L;","65","  public MutableDbIdsRepositoryRule dbIdsRepository = MutableDbIdsRepositoryRule.standalone();","71","  private PurgeDatastoresStep underTest = new PurgeDatastoresStep(mock(DbClient.class, Mockito.RETURNS_DEEP_STUBS), projectCleaner, dbIdsRepository, treeRootHolder,","72","    settingsRepository, disabledComponentsHolder);","90","    return dataproviderFromComponentTypeValues(new Predicate<Component.Type>() {","91","      @Override","92","      public boolean apply(Component.Type input) {","93","        return input.isReportType() && input != Component.Type.PROJECT;","94","      }","95","    });","108","    return dataproviderFromComponentTypeValues(new Predicate<Component.Type>() {","109","      @Override","110","      public boolean apply(Component.Type input) {","111","        return input.isViewsType() && input != Component.Type.VIEW;","112","      }","113","    });","135","    dbIdsRepository.setComponentId(project, PROJECT_ID);","139","    ArgumentCaptor<IdUuidPair> argumentCaptor = ArgumentCaptor.forClass(IdUuidPair.class);","140","    verify(projectCleaner).purge(any(), argumentCaptor.capture(), any(), any());","141","    assertThat(argumentCaptor.getValue().getId()).isEqualTo(PROJECT_ID);","142","    assertThat(argumentCaptor.getValue().getUuid()).isEqualTo(PROJECT_UUID);","146","    return FluentIterable.from(asList(Component.Type.values()))","148","      .transform(WrapInSingleElementArray.INSTANCE)","149","      .toArray(Object[].class);"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/purge\/PurgeDao.java":[{"add":["63","    String rootUuid = conf.rootUuid();","80","    List<String> branchUuids = mapper.selectStaleShortLivingBranchesAndPullRequests(conf.projectUuid(), dateToLong(maxDate.get()));","83","      if (!rootUuid.equals(branchUuid)) {","84","        deleteRootComponent(branchUuid, mapper, commands);","85","      }","100","    String rootUuid = conf.rootUuid();","156","    listener.onComponentsDisabling(conf.rootUuid(), conf.getDisabledComponentUuids());","218","   * This method has no effect when passed an empty collection or only root components."],"delete":["63","    String rootUuid = conf.rootProjectIdUuid().getUuid();","80","    List<String> branchUuids = mapper.selectStaleShortLivingBranchesAndPullRequests(rootUuid, dateToLong(maxDate.get()));","83","      deleteRootComponent(branchUuid, mapper, commands);","98","    String rootUuid = conf.rootProjectIdUuid().getUuid();","154","    listener.onComponentsDisabling(conf.rootProjectIdUuid().getUuid(), conf.getDisabledComponentUuids());","216","   *   This method has no effect when passed an empty collection or only root components."]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/purge\/PurgeDatastoresStep.java":[{"add":["21","import org.sonar.ce.task.projectanalysis.analysis.AnalysisMetadataHolder;","44","  private final AnalysisMetadataHolder analysisMetadataHolder;","46","  public PurgeDatastoresStep(DbClient dbClient, ProjectCleaner projectCleaner, TreeRootHolder treeRootHolder,","47","    ConfigurationRepository configRepository, DisabledComponentsHolder disabledComponentsHolder, AnalysisMetadataHolder analysisMetadataHolder) {","53","    this.analysisMetadataHolder = analysisMetadataHolder;","74","      String projectUuid = analysisMetadataHolder.getProject().getUuid();","75","      projectCleaner.purge(dbSession, root.getUuid(), projectUuid, configRepository.getConfiguration(), disabledComponentsHolder.getUuids());"],"delete":["23","import org.sonar.ce.task.projectanalysis.component.DbIdsRepository;","31","import org.sonar.db.purge.IdUuidPair;","42","  private final DbIdsRepository dbIdsRepository;","47","  public PurgeDatastoresStep(DbClient dbClient, ProjectCleaner projectCleaner, DbIdsRepository dbIdsRepository, TreeRootHolder treeRootHolder,","48","    ConfigurationRepository configRepository, DisabledComponentsHolder disabledComponentsHolder) {","51","    this.dbIdsRepository = dbIdsRepository;","75","      IdUuidPair idUuidPair = new IdUuidPair(dbIdsRepository.getComponentId(root), root.getUuid());","76","      projectCleaner.purge(dbSession, idUuidPair, configRepository.getConfiguration(), disabledComponentsHolder.getUuids());"]}],"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/purge\/PurgeMapper.xml":[{"add":["54","        pb.project_uuid=#{projectUuid,jdbcType=VARCHAR}"],"delete":["54","        pb.project_uuid=#{mainBranchProjectUuid,jdbcType=VARCHAR}"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/util\/WrapInSingleElementArray.java":[{"add":["21","import java.util.function.Function;","30","    return new Object[] {input};"],"delete":["21","import com.google.common.base.Function;","30","    return new Object[]{input};"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/purge\/PurgeConfigurationTest.java":[{"add":["38","    PurgeConfiguration conf = new PurgeConfiguration(\"root\", \"project\", emptyList(), 0, Optional.empty(), System2.INSTANCE, emptyList());","41","    conf = new PurgeConfiguration(\"root\", \"project\", emptyList(), -1, Optional.empty(), System2.INSTANCE, emptyList());","49","    PurgeConfiguration conf = new PurgeConfiguration(\"root\", \"project\", emptyList(), 30, Optional.empty(), System2.INSTANCE, emptyList());","59","    PurgeConfiguration conf = new PurgeConfiguration(\"root\", \"project\", emptyList(), 30, Optional.of(10), System2.INSTANCE, emptyList());","67","    PurgeConfiguration conf = new PurgeConfiguration(\"root\", \"project\", emptyList(), 30, Optional.empty(), System2.INSTANCE, emptyList());","77","    PurgeConfiguration underTest = PurgeConfiguration.newDefaultPurgeConfiguration(settings.asConfig(), \"root\", \"project\", emptyList());"],"delete":["38","    PurgeConfiguration conf = new PurgeConfiguration(new IdUuidPair(1L, \"1\"), emptyList(), 0, Optional.empty(), System2.INSTANCE, emptyList());","41","    conf = new PurgeConfiguration(new IdUuidPair(1L, \"1\"), emptyList(), -1, Optional.empty(), System2.INSTANCE, emptyList());","49","    PurgeConfiguration conf = new PurgeConfiguration(new IdUuidPair(1L, \"1\"), emptyList(), 30, Optional.empty(), System2.INSTANCE, emptyList());","59","    PurgeConfiguration conf = new PurgeConfiguration(new IdUuidPair(1L, \"1\"), emptyList(), 30, Optional.of(10), System2.INSTANCE, emptyList());","67","    PurgeConfiguration conf = new PurgeConfiguration(new IdUuidPair(1L, \"1\"), emptyList(), 30, Optional.empty(), System2.INSTANCE, emptyList());","77","    PurgeConfiguration underTest = PurgeConfiguration.newDefaultPurgeConfiguration(settings.asConfig(), new IdUuidPair(42L, \"any-uuid\"), emptyList());"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/purge\/PurgeConfiguration.java":[{"add":["35","  private final String rootUuid;","36","  private final String projectUuid;","43","  public PurgeConfiguration(String rootUuid, String projectUuid, Collection<String> scopesWithoutHistoricalData, int maxAgeInDaysOfClosedIssues,","45","    this.rootUuid = rootUuid;","46","    this.projectUuid = projectUuid;","54","  public static PurgeConfiguration newDefaultPurgeConfiguration(Configuration config, String rootUuid, String projectUuid, Collection<String> disabledComponentUuids) {","55","    return new PurgeConfiguration(rootUuid, projectUuid, Arrays.asList(Scopes.DIRECTORY, Scopes.FILE), config.getInt(PurgeConstants.DAYS_BEFORE_DELETING_CLOSED_ISSUES).get(),","59","  \/**","60","   * UUID of the branch being analyzed (root of the component tree). Will be the same as {@link #projectUuid}","61","   * if it's the main branch.","62","   * Can also be a view.","63","   *\/","64","  public String rootUuid() {","65","    return rootUuid;","66","  }","67","","68","  \/**","69","   * @return UUID of the main branch of the project","70","   *\/","71","  public String projectUuid() {","72","    return projectUuid;"],"delete":["35","  private final IdUuidPair rootProjectIdUuid;","42","  public PurgeConfiguration(IdUuidPair rootProjectId, Collection<String> scopesWithoutHistoricalData, int maxAgeInDaysOfClosedIssues,","44","    this.rootProjectIdUuid = rootProjectId;","52","  public static PurgeConfiguration newDefaultPurgeConfiguration(Configuration config, IdUuidPair rootId, Collection<String> disabledComponentUuids) {","53","    return new PurgeConfiguration(rootId, Arrays.asList(Scopes.DIRECTORY, Scopes.FILE), config.getInt(PurgeConstants.DAYS_BEFORE_DELETING_CLOSED_ISSUES).get(),","57","  public IdUuidPair rootProjectIdUuid() {","58","    return rootProjectIdUuid;"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/purge\/PurgeDaoTest.java":[{"add":["92","  private static final String PROJECT_UUID = \"P1\";","143","    underTest.purge(dbSession, newConfigurationWith30Days(system2, project.uuid(), project.uuid()), PurgeListener.EMPTY, new PurgeProfiler());","169","    underTest.purge(dbSession, newConfigurationWith30Days(system2, project.uuid(), project.uuid()), PurgeListener.EMPTY, new PurgeProfiler());","176","  public void purge_inactive_SLB_when_analyzing_non_main_branch() {","177","    when(system2.now()).thenReturn(new Date().getTime());","178","    RuleDefinitionDto rule = db.rules().insert();","179","    ComponentDto project = db.components().insertMainBranch();","180","    ComponentDto longBranch = db.components().insertProjectBranch(project);","181","","182","    when(system2.now()).thenReturn(DateUtils.addDays(new Date(), -31).getTime());","183","","184","    \/\/ SLB updated 31 days ago","185","    ComponentDto slb1 = db.components().insertProjectBranch(project, b -> b.setBranchType(BranchType.SHORT));","186","","187","    \/\/ SLB with other components and issues, updated 31 days ago","188","    ComponentDto slb2 = db.components().insertProjectBranch(project, b -> b.setBranchType(BranchType.PULL_REQUEST));","189","    ComponentDto file = db.components().insertComponent(newFileDto(slb2));","190","    db.issues().insert(rule, slb2, file);","191","","192","    \/\/ back to present","193","    when(system2.now()).thenReturn(new Date().getTime());","194","    \/\/ analysing slb1","195","    underTest.purge(dbSession, newConfigurationWith30Days(system2, slb1.uuid(), slb1.getMainBranchProjectUuid()), PurgeListener.EMPTY, new PurgeProfiler());","196","    dbSession.commit();","197","","198","    \/\/ slb1 wasn't deleted since it was being analyzed!","199","    assertThat(uuidsIn(\"projects\")).containsOnly(project.uuid(), longBranch.uuid(), slb1.uuid());","200","  }","201","","202","  @Test","205","    PurgeConfiguration conf = new PurgeConfiguration(\"PROJECT_UUID\", \"PROJECT_UUID\", asList(Scopes.DIRECTORY, Scopes.FILE),","259","    underTest.purge(dbSession, newConfigurationWith30Days(system2, project.uuid(), project.uuid(), module.uuid(), dir.uuid(), srcFile.uuid(), testFile.uuid()), PurgeListener.EMPTY,","367","    List<PurgeableAnalysisDto> analyses = underTest.selectPurgeableAnalyses(PROJECT_UUID, dbSession);","897","    underTest.purge(dbSession, newConfigurationWith30Days(system2, project.uuid(), project.uuid()), PurgeListener.EMPTY, new PurgeProfiler());","1279","    return new PurgeConfiguration(PROJECT_UUID, PROJECT_UUID, emptyList(), 30, Optional.of(30), System2.INSTANCE, Collections.emptyList());","1282","  private static PurgeConfiguration newConfigurationWith30Days(System2 system2, String rootUuid, String projectUuid, String... disabledComponentUuids) {","1283","    return new PurgeConfiguration(rootUuid, projectUuid, emptyList(), 30, Optional.of(30), system2, asList(disabledComponentUuids));"],"delete":["92","  private static final String THE_PROJECT_UUID = \"P1\";","93","  private static final long THE_PROJECT_ID = 1L;","144","    underTest.purge(dbSession, newConfigurationWith30Days(system2, project.uuid()), PurgeListener.EMPTY, new PurgeProfiler());","170","    underTest.purge(dbSession, newConfigurationWith30Days(system2, project.uuid()), PurgeListener.EMPTY, new PurgeProfiler());","179","    PurgeConfiguration conf = new PurgeConfiguration(new IdUuidPair(THE_PROJECT_ID, \"PROJECT_UUID\"), asList(Scopes.DIRECTORY, Scopes.FILE),","233","    underTest.purge(dbSession, newConfigurationWith30Days(system2, project.uuid(), module.uuid(), dir.uuid(), srcFile.uuid(), testFile.uuid()), PurgeListener.EMPTY,","341","    List<PurgeableAnalysisDto> analyses = underTest.selectPurgeableAnalyses(THE_PROJECT_UUID, dbSession);","871","    underTest.purge(dbSession, newConfigurationWith30Days(system2, project.uuid()), PurgeListener.EMPTY, new PurgeProfiler());","1253","    return new PurgeConfiguration(new IdUuidPair(THE_PROJECT_ID, THE_PROJECT_UUID), emptyList(), 30, Optional.of(30), System2.INSTANCE, Collections.emptyList());","1256","  private static PurgeConfiguration newConfigurationWith30Days(System2 system2, String rootProjectUuid, String... disabledComponentUuids) {","1257","    return new PurgeConfiguration(new IdUuidPair(THE_PROJECT_ID, rootProjectUuid), emptyList(), 30, Optional.of(30), system2, asList(disabledComponentUuids));"]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/purge\/ProjectCleanerTest.java":[{"add":["59","    underTest.purge(mock(DbSession.class), \"root\", \"project\", settings.asConfig(), emptyList());","68","    underTest.purge(mock(DbSession.class), \"root\", \"project\", settings.asConfig(), emptyList());","77","    underTest.purge(mock(DbSession.class), \"root\", \"project\", settings.asConfig(), emptyList());"],"delete":["29","import org.sonar.db.purge.IdUuidPair;","60","    underTest.purge(mock(DbSession.class), mock(IdUuidPair.class), settings.asConfig(), emptyList());","69","    underTest.purge(mock(DbSession.class), mock(IdUuidPair.class), settings.asConfig(), emptyList());","78","    underTest.purge(mock(DbSession.class), mock(IdUuidPair.class), settings.asConfig(), emptyList());"]}]}},"f407bd791e4ccc09dd0b01d7e8f3776e2cdc8246":{"changes":{"sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/MediaTypes.java":"MODIFY"},"diff":{"sonar-ws\/src\/main\/java\/org\/sonarqube\/ws\/MediaTypes.java":[{"add":["38","  public static final String JAVASCRIPT = \"application\/javascript\";","42","    .put(\"js\", JAVASCRIPT)"],"delete":[]}]}},"4029e97abc4ee6b5abd2f6e04d9814a8fa31074b":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/qualityGate\/__tests__\/QualityGateCondition-test.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/qualityGate\/QualityGateCondition.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/styles.css":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/qualityGate\/QualityGateConditions.js":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/qualityGate\/__tests__\/__snapshots__\/QualityGateCondition-test.js.snap":"ADD"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/qualityGate\/__tests__\/QualityGateCondition-test.js":[{"add":["23","const mockRatingCondition = metric => ({","24","  actual: '3',","25","  error: '1',","26","  level: 'ERROR',","27","  measure: {","28","    metric: {","29","      key: metric,","30","      type: 'RATING',","31","      name: metric","32","    },","33","    value: '3'","34","  },","35","  op: 'GT',","36","  metric","37","});","38","","39","it('open_issues', () => {","48","        name: 'Open open_issues'","55","  expect(shallow(","56","      <QualityGateCondition component={{ key: 'abcd-key' }} periods={[]} condition={condition}\/>","57","  )).toMatchSnapshot();","58","});","60","it('new_open_issues', () => {","61","  const condition = {","62","    actual: '10',","63","    error: '0',","64","    level: 'ERROR',","65","    measure: {","66","      metric: {","67","        key: 'new_open_issues',","68","        type: 'INT',","69","        name: 'new_open_issues'","70","      },","71","      value: '10'","72","    },","73","    metric: 'new_open_issues',","74","    op: 'GT'","75","  };","76","  expect(shallow(","77","      <QualityGateCondition component={{ key: 'abcd-key' }} periods={[]} condition={condition}\/>","78","  )).toMatchSnapshot();","79","});","81","it('reliability_rating', () => {","82","  const condition = mockRatingCondition('reliability_rating');","83","  expect(shallow(","84","      <QualityGateCondition component={{ key: 'abcd-key' }} periods={[]} condition={condition}\/>","85","  )).toMatchSnapshot();","86","});","87","","88","it('security_rating', () => {","89","  const condition = mockRatingCondition('security_rating');","90","  expect(shallow(","91","      <QualityGateCondition component={{ key: 'abcd-key' }} periods={[]} condition={condition}\/>","92","  )).toMatchSnapshot();","93","});","94","","95","it('sqale_rating', () => {","96","  const condition = mockRatingCondition('sqale_rating');","97","  expect(shallow(","98","      <QualityGateCondition component={{ key: 'abcd-key' }} periods={[]} condition={condition}\/>","99","  )).toMatchSnapshot();","100","});","101","","102","it('new_reliability_rating', () => {","103","  const condition = mockRatingCondition('new_reliability_rating');","104","  expect(shallow(","105","      <QualityGateCondition component={{ key: 'abcd-key' }} periods={[]} condition={condition}\/>","106","  )).toMatchSnapshot();","107","});","108","","109","it('new_security_rating', () => {","110","  const condition = mockRatingCondition('new_security_rating');","111","  expect(shallow(","112","      <QualityGateCondition component={{ key: 'abcd-key' }} periods={[]} condition={condition}\/>","113","  )).toMatchSnapshot();","114","});","115","","116","it('new_sqale_rating', () => {","117","  const condition = mockRatingCondition('new_sqale_rating');","118","  expect(shallow(","119","      <QualityGateCondition component={{ key: 'abcd-key' }} periods={[]} condition={condition}\/>","120","  )).toMatchSnapshot();"],"delete":["22","import { DrilldownLink } from '..\/..\/..\/..\/components\/shared\/drilldown-link';","24","it('should render DrilldownLink', () => {","25","  const component = {","26","    id: 'abcd',","27","    key: 'abcd-key'","28","  };","29","  const periods = [];","38","        name: 'Open Issues'","46","  const output = shallow(","47","      <QualityGateCondition","48","          component={component}","49","          periods={periods}","50","          condition={condition}\/>","51","  );","53","  const link = output.find(DrilldownLink);","54","  expect(link.prop('component')).toBe('abcd-key');","55","  expect(link.prop('metric')).toBe('open_issues');"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/qualityGate\/QualityGateCondition.js":[{"add":["19","\/\/ @flow","22","import { Link } from 'react-router';","28","import { getComponentIssuesUrl } from '..\/..\/..\/helpers\/urls';","30","export default class QualityGateCondition extends React.Component {","31","  props: {","32","    component: { key: string },","33","    periods: Array<{","34","      index: number,","35","      date: string,","36","      mode: string,","37","      parameter?: string","38","    }>,","39","    condition: {","40","      level: string,","41","      measure: {","42","        metric: {","43","          key: string,","44","          name: string,","45","          type: string","46","        },","47","        value: string","48","      },","49","      op: string,","50","      period: number,","51","      error: string,","52","      warning: string","53","    }","54","  };","56","  getIssuesUrl (sinceLeakPeriod: boolean, customQuery: {}) {","57","    const query: Object = {","58","      resolved: 'false',","59","      ...customQuery","60","    };","61","    if (sinceLeakPeriod) {","62","      Object.assign(query, { sinceLeakPeriod: 'true' });","63","    }","64","    return getComponentIssuesUrl(this.props.component.key, query);","65","  }","67","  getUrlForCodeSmells (sinceLeakPeriod: boolean) {","68","    return this.getIssuesUrl(sinceLeakPeriod, { types: 'CODE_SMELL' });","69","  }","71","  getUrlForBugsOrVulnerabilities (type: string, sinceLeakPeriod: boolean) {","72","    const RATING_TO_SEVERITIES_MAPPING = {","73","      '1': 'BLOCKER,CRITICAL,MAJOR,MINOR',","74","      '2': 'BLOCKER,CRITICAL,MAJOR',","75","      '3': 'BLOCKER,CRITICAL',","76","      '4': 'BLOCKER'","77","    };","79","    const { condition } = this.props;","80","    const threshold = condition.level === 'ERROR' ? condition.error : condition.warning;","82","    return this.getIssuesUrl(sinceLeakPeriod, {","83","      types: type,","84","      severities: RATING_TO_SEVERITIES_MAPPING[threshold]","85","    });","86","  }","88","  getUrlForType (type: string, sinceLeakPeriod: boolean) {","89","    return type === 'CODE_SMELL' ?","90","        this.getUrlForCodeSmells(sinceLeakPeriod) :","91","        this.getUrlForBugsOrVulnerabilities(type, sinceLeakPeriod);","92","  }","93","","94","  wrapWithLink (children: Object) {","95","    const { component, periods, condition } = this.props;","96","","97","    const period = getPeriod(periods, condition.period);","98","    const periodDate = getPeriodDate(period);","99","","100","    const className = classNames(","101","        'overview-quality-gate-condition',","102","        'overview-quality-gate-condition-' + condition.level.toLowerCase(),","103","        { 'overview-quality-gate-condition-leak': period != null }","104","    );","105","","106","    const metricKey = condition.measure.metric.key;","107","","108","    const RATING_METRICS_MAPPING = {","109","      'reliability_rating': ['BUG', false],","110","      'new_reliability_rating': ['BUG', true],","111","      'security_rating': ['VULNERABILITY', false],","112","      'new_security_rating': ['VULNERABILITY', true],","113","      'sqale_rating': ['CODE_SMELL', false],","114","      'new_sqale_rating': ['CODE_SMELL', true]","115","    };","116","","117","    return RATING_METRICS_MAPPING[metricKey] ? (","118","            <Link to={this.getUrlForType(...RATING_METRICS_MAPPING[metricKey])} className={className}>","119","              {children}","120","            <\/Link>","121","        ) : (","123","                className={className}","125","                metric={condition.measure.metric.key}","128","              {children}","130","        );","131","  }","132","","133","  render () {","134","    const { periods, condition } = this.props;","135","","136","    const { measure } = condition;","137","    const { metric } = measure;","138","","139","    const isRating = metric.type === 'RATING';","140","    const isDiff = isDiffMetric(metric.key);","141","","142","    const threshold = condition.level === 'ERROR' ?","143","        condition.error :","144","        condition.warning;","145","","146","    const actual = condition.period ?","147","        getPeriodValue(measure, condition.period) :","148","        measure.value;","149","    const period = getPeriod(periods, condition.period);","150","","151","    const operator = isRating ?","152","        translate('quality_gates.operator', condition.op, 'rating') :","153","        translate('quality_gates.operator', condition.op);","154","","155","    return this.wrapWithLink(","156","        <div className=\"overview-quality-gate-condition-container\">","157","          <div className=\"overview-quality-gate-condition-value\">","158","            <Measure measure={{ value: actual, leak: actual }} metric={metric}\/>","175","    );","176","  }","177","}"],"delete":["21","import { ComponentType, PeriodsListType, EnhancedConditionType } from '..\/propTypes';","28","const QualityGateCondition = ({ component, periods, condition }) => {","29","  const { measure } = condition;","30","  const { metric } = measure;","32","  const isRating = metric.type === 'RATING';","33","  const isDiff = isDiffMetric(metric.key);","35","  const threshold = condition.level === 'ERROR' ?","36","      condition.error :","37","      condition.warning;","39","  const actual = condition.period ?","40","      getPeriodValue(measure, condition.period) :","41","      measure.value;","42","  const period = getPeriod(periods, condition.period);","44","  const periodDate = getPeriodDate(period);","45","  const operator = isRating ?","46","      translate('quality_gates.operator', condition.op, 'rating') :","47","      translate('quality_gates.operator', condition.op);","49","  const className = classNames(","50","      'overview-quality-gate-condition',","51","      'overview-quality-gate-condition-' + condition.level.toLowerCase(),","52","      { 'overview-quality-gate-condition-leak': period != null }","53","  );","55","  return (","56","      <li className={className}>","57","        <div className=\"overview-quality-gate-condition-container\">","58","          <div className=\"overview-quality-gate-condition-value\">","60","                className={isRating ? 'link-no-underline' : null}","62","                metric={metric.key}","65","              <Measure measure={{ value: actual, leak: actual }} metric={metric}\/>","83","      <\/li>","84","  );","85","};","86","","87","QualityGateCondition.propTypes = {","88","  component: ComponentType.isRequired,","89","  periods: PeriodsListType.isRequired,","90","  condition: EnhancedConditionType.isRequired","91","};","92","","93","export default QualityGateCondition;"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/styles.css":[{"add":["49","  display: block;","55","  color: #444;","56","  transition: none;","57","}","58","","59",".overview-quality-gate-condition:hover,","60",".overview-quality-gate-condition:focus {","61","  border-width: 2px;","62","  color: #444;","63","}","64","","65",".overview-quality-gate-condition:hover .overview-quality-gate-condition-container,","66",".overview-quality-gate-condition:focus .overview-quality-gate-condition-container {","67","  padding: 9px;"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/qualityGate\/QualityGateConditions.js":[{"add":["104","        <div id=\"overview-quality-gate-conditions-list\"","105","             className=\"overview-quality-gate-conditions-list clearfix\">","113","        <\/div>"],"delete":["104","        <ul","105","            className=\"overview-quality-gate-conditions-list clearfix\"","106","            id=\"overview-quality-gate-conditions-list\">","114","        <\/ul>"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/qualityGate\/__tests__\/__snapshots__\/QualityGateCondition-test.js.snap":[{"add":[],"delete":[]}]}},"21369995bc5443108b2521a3126bebd002ca6444":{"changes":{"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/UpdateConflictResolver.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/UpdateConflictResolverTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/issue\/IssueMapper.xml":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/PersistIssuesStep.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/issue\/IssueMapper.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/PersistIssuesStepTest.java":"MODIFY"},"diff":{"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/UpdateConflictResolver.java":[{"add":["36","  public void resolve(DefaultIssue issue, IssueDto dbIssue, IssueMapper mapper) {","38","    mergeFields(dbIssue, issue);","39","    mapper.update(IssueDto.toDtoForUpdate(issue, System.currentTimeMillis()));"],"delete":["36","  public void resolve(DefaultIssue issue, IssueMapper mapper) {","38","","39","    IssueDto dbIssue = mapper.selectByKey(issue.key());","40","    if (dbIssue != null) {","41","      mergeFields(dbIssue, issue);","42","      mapper.update(IssueDto.toDtoForUpdate(issue, System.currentTimeMillis()));","43","    }"]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/UpdateConflictResolverTest.java":[{"add":["52","    IssueDto issueDto = new IssueDto()","53","      .setKee(\"ABCDE\")","54","      .setType(CODE_SMELL)","55","      .setRuleId(10)","56","      .setRuleKey(\"squid\", \"AvoidCycles\")","57","      .setProjectUuid(\"U1\")","58","      .setComponentUuid(\"U2\")","59","      .setLine(10)","60","      .setStatus(STATUS_OPEN)","62","      \/\/ field changed by user","63","      .setAssigneeUuid(\"arthur-uuid\");","65","    new UpdateConflictResolver().resolve(issue, issueDto, mapper);"],"delete":["34","import static org.mockito.Mockito.when;","53","    when(mapper.selectByKey(\"ABCDE\")).thenReturn(","54","      new IssueDto()","55","        .setKee(\"ABCDE\")","56","        .setType(CODE_SMELL)","57","        .setRuleId(10)","58","        .setRuleKey(\"squid\", \"AvoidCycles\")","59","        .setProjectUuid(\"U1\")","60","        .setComponentUuid(\"U2\")","61","        .setLine(10)","62","        .setStatus(STATUS_OPEN)","64","        \/\/ field changed by user","65","        .setAssigneeUuid(\"arthur-uuid\"));","67","    new UpdateConflictResolver().resolve(issue, mapper);"]}],"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/issue\/IssueMapper.xml":[{"add":["263","  <select id=\"selectByKeysIfNotUpdatedAt\" parameterType=\"map\" resultType=\"Issue\">","264","    select","265","      <include refid=\"issueColumns\"\/>","266","    from issues i","267","    inner join rules r on r.id=i.rule_id","268","    inner join projects p on p.uuid=i.component_uuid","269","    inner join projects root on root.uuid=i.project_uuid","270","    where","271","      i.kee in","272","        <foreach collection=\"keys\" open=\"(\" close=\")\" item=\"key\" separator=\",\">","273","          #{key,jdbcType=VARCHAR}","274","        <\/foreach>","275","      and i.updated_at &lt;&gt; #{updatedAt,jdbcType=BIGINT}","276","  <\/select>","277",""],"delete":[]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/PersistIssuesStep.java":[{"add":["21","import java.util.ArrayList;","22","import java.util.List;","23","import java.util.Map;","31","import org.sonar.db.BatchSession;","39","import static org.sonar.core.util.stream.MoreCollectors.toList;","40","import static org.sonar.core.util.stream.MoreCollectors.uniqueIndex;","41","","43","  \/\/ holding up to 1000 DefaultIssue (max size of addedIssues and updatedIssues at any given time) in memory should not","44","  \/\/ be a problem while making sure we leverage extensively the batch feature to speed up persistence","45","  private static final int ISSUE_BATCHING_SIZE = BatchSession.MAX_BATCH_SIZE * 2;","69","      List<DefaultIssue> addedIssues = new ArrayList<>(ISSUE_BATCHING_SIZE);","70","      List<DefaultIssue> updatedIssues = new ArrayList<>(ISSUE_BATCHING_SIZE);","76","        if (issue.isNew() || issue.isCopied()) {","77","          addedIssues.add(issue);","78","          if (addedIssues.size() >= ISSUE_BATCHING_SIZE) {","79","            persistNewIssues(statistics, addedIssues, mapper, changeMapper);","80","            addedIssues.clear();","81","          }","82","        } else if (issue.isChanged()) {","83","          updatedIssues.add(issue);","84","          if (updatedIssues.size() >= ISSUE_BATCHING_SIZE) {","85","            persistUpdatedIssues(statistics, updatedIssues, mapper, changeMapper);","86","            updatedIssues.clear();","87","          }","88","        } else {","89","          statistics.untouched++;","92","      persistNewIssues(statistics, addedIssues, mapper, changeMapper);","93","      persistUpdatedIssues(statistics, updatedIssues, mapper, changeMapper);","94","      flushSession(dbSession);","100","  private void persistNewIssues(IssueStatistics statistics, List<DefaultIssue> addedIssues, IssueMapper mapper, IssueChangeMapper changeMapper) {","101","    if (addedIssues.isEmpty()) {","102","      return;","105","    long now = system2.now();","106","    addedIssues.forEach(i -> {","107","      int ruleId = ruleRepository.getByKey(i.ruleKey()).getId();","108","      IssueDto dto = IssueDto.toDtoForComputationInsert(i, ruleId, now);","109","      mapper.insert(dto);","110","      statistics.inserts++;","111","    });","113","    addedIssues.forEach(i -> issueStorage.insertChanges(changeMapper, i));","116","  private void persistUpdatedIssues(IssueStatistics statistics, List<DefaultIssue> updatedIssues, IssueMapper mapper, IssueChangeMapper changeMapper) {","117","    if (updatedIssues.isEmpty()) {","118","      return;","119","    }","120","","121","    long now = system2.now();","122","    updatedIssues.forEach(i -> {","123","      IssueDto dto = IssueDto.toDtoForUpdate(i, now);","124","      mapper.updateIfBeforeSelectedDate(dto);","125","      statistics.updates++;","126","    });","127","","128","    \/\/ retrieve those of the updatedIssues which have not been updated and apply conflictResolver on them","129","    List<String> updatedIssueKeys = updatedIssues.stream().map(DefaultIssue::key).collect(toList(updatedIssues.size()));","130","    List<IssueDto> conflictIssueKeys = mapper.selectByKeysIfNotUpdatedAt(updatedIssueKeys, now);","131","    if (!conflictIssueKeys.isEmpty()) {","132","      Map<String, DefaultIssue> issuesByKeys = updatedIssues.stream().collect(uniqueIndex(DefaultIssue::key, updatedIssues.size()));","133","      conflictIssueKeys","134","        .forEach(dbIssue -> {","135","          DefaultIssue updatedIssue = issuesByKeys.get(dbIssue.getKey());","136","          conflictResolver.resolve(updatedIssue, dbIssue, mapper);","137","          statistics.merged++;","138","        });","139","    }","140","","141","    updatedIssues.forEach(i -> issueStorage.insertChanges(changeMapper, i));","144","  private static void flushSession(DbSession dbSession) {","145","    dbSession.flushStatements();","146","    dbSession.commit();","157","    private int merged = 0;","164","        .add(\"merged\", String.valueOf(merged))"],"delete":["64","        boolean saved = persistIssueIfRequired(mapper, issue, statistics);","65","        if (saved) {","66","          issueStorage.insertChanges(changeMapper, issue);","69","      dbSession.flushStatements();","70","      dbSession.commit();","76","  private boolean persistIssueIfRequired(IssueMapper mapper, DefaultIssue issue, IssueStatistics issueStatistics) {","77","    if (issue.isNew() || issue.isCopied()) {","78","      persistNewIssue(mapper, issue);","79","      issueStatistics.inserts++;","80","      return true;","83","    if (issue.isChanged()) {","84","      persistChangedIssue(mapper, issue);","85","      issueStatistics.updates++;","86","      return true;","87","    }","89","    issueStatistics.untouched++;","90","    return false;","93","  private void persistNewIssue(IssueMapper mapper, DefaultIssue issue) {","94","    int ruleId = ruleRepository.getByKey(issue.ruleKey()).getId();","95","    IssueDto dto = IssueDto.toDtoForComputationInsert(issue, ruleId, system2.now());","96","    mapper.insert(dto);","99","  private void persistChangedIssue(IssueMapper mapper, DefaultIssue issue) {","100","    IssueDto dto = IssueDto.toDtoForUpdate(issue, system2.now());","101","    int updateCount = mapper.updateIfBeforeSelectedDate(dto);","102","    if (updateCount == 0) {","103","      \/\/ End-user and scan changed the issue at the same time.","104","      \/\/ See https:\/\/jira.sonarsource.com\/browse\/SONAR-4309","105","      conflictResolver.resolve(issue, mapper);","106","    }"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/issue\/IssueMapper.java":[{"add":["36","  List<IssueDto> selectByKeysIfNotUpdatedAt(@Param(\"keys\") List<String> keys, @Param(\"updatedAt\") long updatedAt);","37","","57",""],"delete":[]}],"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/PersistIssuesStepTest.java":[{"add":["29","import org.mockito.ArgumentCaptor;","51","import org.sonar.db.issue.IssueMapper;","61","import static org.mockito.ArgumentMatchers.any;","62","import static org.mockito.ArgumentMatchers.eq;","64","import static org.mockito.Mockito.verify;","86","  private System2 system2 = mock(System2.class);","89","  private UpdateConflictResolver conflictResolver = mock(UpdateConflictResolver.class);","105","    underTest = new PersistIssuesStep(dbClient, system2, conflictResolver, new RuleRepositoryImpl(adHocRuleCreator, dbClient, analysisMetadataHolder), issueCache,","119","    ComponentDto project = db.components().insertPrivateProject(organizationDto);","120","    ComponentDto file = db.components().insertComponent(newFileDto(project, null));","121","    when(system2.now()).thenReturn(NOW);","134","      .setSelectedAt(NOW)","165","      entry(\"inserts\", \"1\"), entry(\"updates\", \"0\"), entry(\"merged\", \"0\"), entry(\"untouched\", \"0\"));","173","    ComponentDto project = db.components().insertPrivateProject(organizationDto);","174","    ComponentDto file = db.components().insertComponent(newFileDto(project, null));","175","    when(system2.now()).thenReturn(NOW);","188","      .setSelectedAt(NOW)","218","      entry(\"inserts\", \"1\"), entry(\"updates\", \"0\"), entry(\"merged\", \"0\"), entry(\"untouched\", \"0\"));","219","  }","220","","221","  @Test","222","  public void update_conflicting_issue() {","223","    RuleDefinitionDto rule = RuleTesting.newRule(RuleKey.of(\"xoo\", \"S01\"));","224","    db.rules().insert(rule);","225","    OrganizationDto organizationDto = db.organizations().insert();","226","    ComponentDto project = db.components().insertPrivateProject(organizationDto);","227","    ComponentDto file = db.components().insertComponent(newFileDto(project, null));","228","    IssueDto issue = db.issues().insert(rule, project, file,","229","      i -> i.setStatus(STATUS_OPEN)","230","        .setResolution(null)","231","        .setCreatedAt(NOW - 1_000_000_000L)","232","        \/\/ simulate the issue has been updated after the analysis ran","233","        .setUpdatedAt(NOW + 1_000_000_000L));","234","    issue = dbClient.issueDao().selectByKey(db.getSession(), issue.getKey()).get();","235","    DiskCache<DefaultIssue>.DiskAppender issueCacheAppender = issueCache.newAppender();","236","    when(system2.now()).thenReturn(NOW);","237","","238","    DefaultIssue defaultIssue = issue.toDefaultIssue()","239","      .setStatus(STATUS_CLOSED)","240","      .setResolution(RESOLUTION_FIXED)","241","      .setSelectedAt(NOW)","242","      .setNew(false)","243","      .setChanged(true);","244","    issueCacheAppender.append(defaultIssue).close();","245","","246","    TestComputationStepContext context = new TestComputationStepContext();","247","    underTest.execute(context);","248","","249","    ArgumentCaptor<IssueDto> issueDtoCaptor = ArgumentCaptor.forClass(IssueDto.class);","250","    verify(conflictResolver).resolve(eq(defaultIssue), issueDtoCaptor.capture(), any(IssueMapper.class));","251","    assertThat(issueDtoCaptor.getValue().getId()).isEqualTo(issue.getId());","252","    assertThat(context.getStatistics().getAll()).containsOnly(","253","      entry(\"inserts\", \"0\"), entry(\"updates\", \"1\"), entry(\"merged\", \"1\"), entry(\"untouched\", \"0\"));","254","","262","    ComponentDto project = db.components().insertPrivateProject(organizationDto);","263","    ComponentDto file = db.components().insertComponent(newFileDto(project, null));","289","      entry(\"inserts\", \"1\"), entry(\"updates\", \"0\"), entry(\"merged\", \"0\"), entry(\"untouched\", \"0\"));","320","      entry(\"inserts\", \"0\"), entry(\"updates\", \"1\"), entry(\"merged\", \"0\"), entry(\"untouched\", \"0\"));","360","      entry(\"inserts\", \"0\"), entry(\"updates\", \"1\"), entry(\"merged\", \"0\"), entry(\"untouched\", \"0\"));","398","      entry(\"inserts\", \"0\"), entry(\"updates\", \"1\"), entry(\"merged\", \"0\"), entry(\"untouched\", \"0\"));"],"delete":["48","import org.sonar.db.component.ComponentTesting;","97","    System2 system2 = mock(System2.class);","98","    when(system2.now()).thenReturn(NOW);","101","    underTest = new PersistIssuesStep(dbClient, system2, new UpdateConflictResolver(), new RuleRepositoryImpl(adHocRuleCreator, dbClient, analysisMetadataHolder), issueCache,","115","    ComponentDto project = ComponentTesting.newPrivateProjectDto(organizationDto);","116","    dbClient.componentDao().insert(session, project);","117","    ComponentDto file = newFileDto(project, null);","118","    dbClient.componentDao().insert(session, file);","119","    session.commit();","162","      entry(\"inserts\", \"1\"), entry(\"updates\", \"0\"), entry(\"untouched\", \"0\"));","170","    ComponentDto project = ComponentTesting.newPrivateProjectDto(organizationDto);","171","    dbClient.componentDao().insert(session, project);","172","    ComponentDto file = newFileDto(project, null);","173","    dbClient.componentDao().insert(session, file);","174","    session.commit();","216","      entry(\"inserts\", \"1\"), entry(\"updates\", \"0\"), entry(\"untouched\", \"0\"));","224","    ComponentDto project = ComponentTesting.newPrivateProjectDto(organizationDto);","225","    dbClient.componentDao().insert(session, project);","226","    ComponentDto file = newFileDto(project, null);","227","    dbClient.componentDao().insert(session, file);","253","      entry(\"inserts\", \"1\"), entry(\"updates\", \"0\"), entry(\"untouched\", \"0\"));","284","      entry(\"inserts\", \"0\"), entry(\"updates\", \"1\"), entry(\"untouched\", \"0\"));","324","      entry(\"inserts\", \"0\"), entry(\"updates\", \"1\"), entry(\"untouched\", \"0\"));","362","      entry(\"inserts\", \"0\"), entry(\"updates\", \"1\"), entry(\"untouched\", \"0\"));"]}]}},"0000edfd89ee6084a0cde4a08424b3bad346e69e":{"changes":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/notification\/ws\/AddActionTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/notification\/ws\/AddAction.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/notification\/ws\/AddActionTest.java":[{"add":["27","import org.sonar.api.web.UserRole;","123","  public void add_notification_on_private_with_USER_permission() {","125","    userSession.addProjectPermission(UserRole.USER, project);","133","  public void add_notification_on_public_project() {","134","    ComponentDto project = db.components().insertPublicProject();","135","    userSession.registerComponents(project);","136","    call(request.setProject(project.getDbKey()));","137","","138","    db.notifications().assertExists(defaultChannel.getKey(), NOTIF_MY_NEW_ISSUES, userSession.getUserId(), project);","139","  }","140","","141","  @Test","144","    userSession.addProjectPermission(UserRole.USER, project);","154","  public void add_a_notification_on_private_project_when_a_global_one_exists() {","158","    userSession.addProjectPermission(UserRole.USER, project);","159","    call(request.setProject(project.getDbKey()));","160","","161","    db.notifications().assertExists(defaultChannel.getKey(), NOTIF_MY_NEW_ISSUES, userSession.getUserId(), project);","162","    db.notifications().assertExists(defaultChannel.getKey(), NOTIF_MY_NEW_ISSUES, userSession.getUserId(), null);","163","  }","164","","165","","166","  @Test","167","  public void add_a_notification_on_public_project_when_a_global_one_exists() {","168","    ComponentDto project = db.components().insertPublicProject();","169","    userSession.registerComponents(project);","170","    call(request);","171","","239","  public void fail_when_unknown_project_dispatcher_on_private_project() {","241","    userSession.addProjectPermission(UserRole.USER, project);","242","","243","    expectedException.expect(BadRequestException.class);","244","    expectedException.expectMessage(\"Value of parameter 'type' (Dispatcher42) must be one of: [Dispatcher1, Dispatcher3]\");","245","","246","    call(request.setType(\"Dispatcher42\").setProject(project.getDbKey()));","247","  }","248","","249","  @Test","250","  public void fail_when_unknown_project_dispatcher_on_public_project() {","251","    ComponentDto project = db.components().insertPublicProject();","303","  @Test","304","  public void fail_when_user_does_not_have_USER_permission_on_private_project() {","305","    ComponentDto project = db.components().insertPrivateProject();","306","    userSession.logIn().setNonRoot().setNonSystemAdministrator();","307","","308","    expectedException.expect(ForbiddenException.class);","309","","310","    call(request","311","      .setProject(project.getDbKey())","312","      .setLogin(userSession.getLogin()));","313","  }","314",""],"delete":["122","  public void add_a_project_notification() {","142","  public void add_a_project_notification_when_a_global_one_exists() {","213","  public void fail_when_unknown_project_dispatcher() {"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/notification\/ws\/AddAction.java":[{"add":["29","import org.sonar.api.web.UserRole;","126","      Optional<ComponentDto> project = searchProject(dbSession, request);","127","      notificationUpdater.add(dbSession, request.getChannel(), request.getType(), user, project.orElse(null));","137","  private Optional<ComponentDto> searchProject(DbSession dbSession, AddRequest request) {","141","    project.ifPresent(p -> userSession.checkComponentPermission(UserRole.USER, p));","142","    return project;"],"delete":["23","import javax.annotation.CheckForNull;","126","      ComponentDto project = searchProject(dbSession, request);","127","      notificationUpdater.add(dbSession, request.getChannel(), request.getType(), user, project);","137","  @CheckForNull","138","  private ComponentDto searchProject(DbSession dbSession, AddRequest request) {","142","    return project.orElse(null);"]}]}},"8efeb32ba9dbfe0ebb8d834180f4cc33b0ebbf6b":{"changes":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":"MODIFY"},"diff":{"sonar-core\/src\/main\/resources\/org\/sonar\/l10n\/core.properties":[{"add":["2382","overview.badges.quality_gate.description.APP=This badge dynamically displays the current quality gate status of your application.","2383","overview.badges.quality_gate.description.TRK=This badge dynamically displays the current quality gate status of your project.","2384","overview.badges.quality_gate.description.VW=This badge dynamically displays the current quality gate status of your portfolio."],"delete":[]}]}},"f181b82977897bd09c3cb9106c98ecd7369550ad":{"changes":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/TestExecutionAndCoveragePublisher.java":"MODIFY","sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/report\/TestExecutionAndCoveragePublisherTest.java":"ADD"},"diff":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/TestExecutionAndCoveragePublisher.java":[{"add":["38","import org.sonar.scanner.scan.branch.BranchConfiguration;","47","  private final BranchConfiguration branchConfiguration;","49","  public TestExecutionAndCoveragePublisher(InputComponentStore componentStore, TestPlanBuilder testPlanBuilder, BranchConfiguration branchConfiguration) {","52","    this.branchConfiguration = branchConfiguration;","57","    if (branchConfiguration.isShortLivingBranch()) {","58","      return;","59","    }"],"delete":["47","  public TestExecutionAndCoveragePublisher(InputComponentStore componentStore, TestPlanBuilder testPlanBuilder) {"]}],"sonar-scanner-engine\/src\/test\/java\/org\/sonar\/scanner\/report\/TestExecutionAndCoveragePublisherTest.java":[{"add":[],"delete":[]}]}},"2b47fe0ad27f117db8ff6736bab7ec0c37ede256":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/account\/templates\/account-tokens.hbs":"MODIFY","server\/sonar-web\/src\/main\/less\/init\/type.less":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/account\/templates\/account-tokens.hbs":[{"add":["73","          <div class=\"monospaced text-success\">{{newToken.token}}<\/div>"],"delete":["73","          <code class=\"text-success\">{{newToken.token}}<\/code>"]}],"server\/sonar-web\/src\/main\/less\/init\/type.less":[{"add":["140","","141","","142","\/\/ Font","143","","144",".monospaced {","145","  line-height: @monoLineHeight;","146","  font-family: @monoFontFamily;","147","  font-size: @monoFontSize;","148","}"],"delete":[]}]}},"88189313e33c91d3b9f890740cd9fc3f4cb644c2":{"changes":{"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/ce\/CeScannerContextMapper.xml":"MODIFY","server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/queue\/PurgeCeActivitiesTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/ce\/CeScannerContextMapper.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/ce\/CeScannerContextDaoTest.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/ce\/CeScannerContextDao.java":"MODIFY","server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/queue\/PurgeCeActivities.java":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/ce\/CeScannerContextMapper.xml":[{"add":["10","  <select id=\"selectOlderThan\" parameterType=\"long\" resultType=\"String\">","11","    select","12","      task_uuid","13","    from ce_scanner_context csc","14","    where","15","      csc.created_at &lt; #{beforeDate,jdbcType=BIGINT}","16","  <\/select>","17","","18",""],"delete":[]}],"server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/queue\/PurgeCeActivitiesTest.java":[{"add":["21","import java.time.LocalDateTime;","22","import java.time.ZoneOffset;","23","import java.util.Optional;","32","import static java.time.ZoneOffset.UTC;","34","import static org.mockito.Mockito.mock;","39","  private System2 system2 = mock(System2.class);","47","  public void delete_activity_older_than_180_days_and_their_scanner_context() {","48","    LocalDateTime now = LocalDateTime.now();","49","    insertWithDate(\"VERY_OLD\", now.minusDays(180).minusMonths(10));","50","    insertWithDate(\"JUST_OLD_ENOUGH\", now.minusDays(180).minusDays(1));","51","    insertWithDate(\"NOT_OLD_ENOUGH\", now.minusDays(180));","52","    insertWithDate(\"RECENT\", now.minusDays(1));","53","    when(system2.now()).thenReturn(now.toInstant(ZoneOffset.UTC).toEpochMilli());","57","    assertThat(selectActivity(\"VERY_OLD\").isPresent()).isFalse();","58","    assertThat(scannerContextExists(\"VERY_OLD\")).isFalse();","59","    assertThat(selectActivity(\"JUST_OLD_ENOUGH\").isPresent()).isFalse();","60","    assertThat(scannerContextExists(\"JUST_OLD_ENOUGH\")).isFalse();","61","    assertThat(selectActivity(\"NOT_OLD_ENOUGH\").isPresent()).isTrue();","62","    assertThat(scannerContextExists(\"NOT_OLD_ENOUGH\")).isFalse(); \/\/ because more than 4 weeks old","63","    assertThat(selectActivity(\"RECENT\").isPresent()).isTrue();","64","    assertThat(scannerContextExists(\"RECENT\")).isTrue();","67","  @Test","68","  public void delete_ce_scanner_context_older_than_28_days() {","69","    LocalDateTime now = LocalDateTime.now();","70","    insertWithDate(\"VERY_OLD\", now.minusDays(28).minusMonths(12));","71","    insertWithDate(\"JUST_OLD_ENOUGH\", now.minusDays(28).minusDays(1));","72","    insertWithDate(\"NOT_OLD_ENOUGH\", now.minusDays(28));","73","    insertWithDate(\"RECENT\", now.minusDays(1));","74","    when(system2.now()).thenReturn(now.toInstant(ZoneOffset.UTC).toEpochMilli());","75","","76","    underTest.start();","77","","78","    assertThat(scannerContextExists(\"VERY_OLD\")).isFalse();","79","    assertThat(scannerContextExists(\"JUST_OLD_ENOUGH\")).isFalse();","80","    assertThat(scannerContextExists(\"NOT_OLD_ENOUGH\")).isTrue();","81","    assertThat(scannerContextExists(\"RECENT\")).isTrue();","82","  }","83","","84","  private Optional<CeActivityDto> selectActivity(String very_old) {","85","    return dbTester.getDbClient().ceActivityDao().selectByUuid(dbTester.getSession(), very_old);","86","  }","87","","88","  private boolean scannerContextExists(String uuid) {","89","    return dbTester.countSql(\"select count(1) from ce_scanner_context where task_uuid = '\" + uuid + \"'\") == 1;","90","  }","91","","92","  private void insertWithDate(String uuid, LocalDateTime dateTime) {","93","    long date = dateTime.toInstant(UTC).toEpochMilli();","103","","104","    insertScannerContext(uuid, date);","105","  }","106","","107","  private void insertScannerContext(String uuid, long createdAt) {","108","    dbTester.executeInsert(","109","      \"CE_SCANNER_CONTEXT\",","110","      \"task_uuid\", uuid,","111","      \"created_at\", createdAt,","112","      \"updated_at\", 1,","113","      \"context_data\", \"YoloContent\".getBytes());","114","    dbTester.commit();"],"delete":["30","import static org.mockito.Mockito.spy;","35","  private System2 system2 = spy(System2.INSTANCE);","43","  public void delete_older_than_6_months() {","44","    insertWithDate(\"VERY_OLD\", 1_000_000_000_000L);","45","    insertWithDate(\"RECENT\", 1_500_000_000_000L);","46","    when(system2.now()).thenReturn(1_500_000_000_100L);","50","    assertThat(dbTester.getDbClient().ceActivityDao().selectByUuid(dbTester.getSession(), \"VERY_OLD\").isPresent()).isFalse();","51","    assertThat(dbTester.getDbClient().ceActivityDao().selectByUuid(dbTester.getSession(), \"RECENT\").isPresent()).isTrue();","54","  private void insertWithDate(String uuid, long date) {"]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/ce\/CeScannerContextMapper.java":[{"add":["22","import java.util.Set;","28","","29","  Set<String> selectOlderThan(@Param(\"beforeDate\") long beforeDate);"],"delete":[]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/ce\/CeScannerContextDaoTest.java":[{"add":["124","  @Test","125","  public void selectOlderThan() {","126","    insertWithCreationDate(\"TASK_1\", 1_450_000_000_000L);","127","    insertWithCreationDate(\"TASK_2\", 1_460_000_000_000L);","128","    insertWithCreationDate(\"TASK_3\", 1_470_000_000_000L);","129","","130","    assertThat(underTest.selectOlderThan(dbSession, 1_465_000_000_000L))","131","      .containsOnly(\"TASK_1\", \"TASK_2\");","132","    assertThat(underTest.selectOlderThan(dbSession, 1_450_000_000_000L))","133","      .isEmpty();","134","  }","135","","136","  private void insertWithCreationDate(String uuid, long createdAt) {","137","    dbTester.executeInsert(","138","      \"CE_SCANNER_CONTEXT\",","139","      \"task_uuid\", uuid,","140","      \"created_at\", createdAt,","141","      \"updated_at\", 1,","142","      \"context_data\", \"YoloContent\".getBytes());","143","    dbSession.commit();","144","  }","145",""],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/ce\/CeScannerContextDao.java":[{"add":["30","import java.util.Set;","89","  public Set<String> selectOlderThan(DbSession dbSession, long beforeDate) {","90","    return mapper(dbSession).selectOlderThan(beforeDate);","91","  }","92",""],"delete":[]}],"server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/queue\/PurgeCeActivities.java":[{"add":["32","import static java.util.stream.Stream.concat;","33","import static org.sonar.core.util.stream.MoreCollectors.toSet;","34","","52","      long now = system2.now();","53","      sixMonthsAgo.setTimeInMillis(now);","60","        .collect(toSet());","62","","63","      Calendar fourWeeksAgo = Calendar.getInstance();","64","      fourWeeksAgo.setTimeInMillis(system2.now());","65","      fourWeeksAgo.add(Calendar.DATE, -28);","66","","67","      LOGGER.info(\"Delete the Scanner contexts tasks created before {}\", fourWeeksAgo.getTime());","68","      Set<String> scannerContextUuids = dbClient.ceScannerContextDao().selectOlderThan(dbSession, fourWeeksAgo.getTimeInMillis());","69","      dbClient.ceScannerContextDao().deleteByUuids(","70","        dbSession,","71","        concat(ceActivityUuids.stream(), scannerContextUuids.stream()).collect(toSet()));"],"delete":["28","import org.sonar.core.util.stream.MoreCollectors;","50","      sixMonthsAgo.setTimeInMillis(system2.now());","57","        .collect(MoreCollectors.toSet());","59","      dbClient.ceScannerContextDao().deleteByUuids(dbSession, ceActivityUuids);"]}]}},"4546b5560c8786816eceb7ded11254a5518f49fa":{"changes":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/rule\/Checks.java":"MODIFY"},"diff":{"sonar-plugin-api\/src\/main\/java\/org\/sonar\/api\/batch\/rule\/Checks.java":[{"add":["112","    return addAnnotatedChecks((Iterable) Arrays.asList(checkClassesOrObjects));","115","  \/**","116","   * @deprecated since 5.2 use {@link #addAnnotatedChecks(Iterable)}","117","   *\/","118","  @Deprecated","120","    return addAnnotatedChecks((Iterable) checkClassesOrObjects);","121","  }","122","","123","  public Checks<C> addAnnotatedChecks(Iterable checkClassesOrObjects) {"],"delete":["112","    return addAnnotatedChecks(Arrays.asList(checkClassesOrObjects));"]}]}},"b2ca3f63d2a6ab89aba6041f133ed6067b8f81e5":{"changes":{"server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/queue\/InternalCeQueueImpl.java":"MODIFY","server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/queue\/InternalCeQueueImplTest.java":"MODIFY"},"diff":{"server\/sonar-ce\/src\/main\/java\/org\/sonar\/ce\/queue\/InternalCeQueueImpl.java":[{"add":["54","  private static final int MAX_EXECUTION_COUNT = 1;"],"delete":["54","  private static final int MAX_EXECUTION_COUNT = 2;"]}],"server\/sonar-ce\/src\/test\/java\/org\/sonar\/ce\/queue\/InternalCeQueueImplTest.java":[{"add":["21","import com.google.common.collect.ImmutableSet;","52","import static com.google.common.base.Preconditions.checkArgument;","53","import static java.util.Arrays.asList;","54","import static org.assertj.core.api.Assertions.assertThat;","55","import static org.mockito.Mockito.mock;","56","import static org.mockito.Mockito.when;","57","import static org.sonar.ce.container.ComputeEngineStatus.Status.STARTED;","58","import static org.sonar.ce.container.ComputeEngineStatus.Status.STOPPING;","354","  public void peek_ignores_pending_tasks_with_executionCount_equal_to_1() {","362","    assertThat(underTest.peek(WORKER_UUID_1).isPresent()).isFalse();","425","    insertInProgress(\"u3\", WORKER_UUID_1, 1); \/\/ will be reset but won't be picked because worn out","426","    insertPending(\"u4\", WORKER_UUID_1, 0); \/\/ will be picked","429","    assertThat(ceTask.get().getUuid()).isEqualTo(\"u4\");","436","    insertInProgress(\"u3\", WORKER_UUID_1, 1); \/\/ won't be picked because worn out","440","    assertThat(ceTask.get().getUuid()).isEqualTo(\"u4\");","545","  public void cancelWornOuts_cancels_pending_tasks_with_executionCount_greater_or_equal_to_1() {","558","    verifyCanceled(u2);"],"delete":["21","import static com.google.common.base.Preconditions.checkArgument;","22","import static java.util.Arrays.asList;","23","import static org.assertj.core.api.Assertions.assertThat;","24","import static org.mockito.Mockito.mock;","25","import static org.mockito.Mockito.when;","26","import static org.sonar.ce.container.ComputeEngineStatus.Status.STARTED;","27","import static org.sonar.ce.container.ComputeEngineStatus.Status.STOPPING;","28","","34","","36","","61","import com.google.common.collect.ImmutableSet;","357","  public void peek_peeks_pending_tasks_with_executionCount_equal_to_1_and_increases_it() {","365","    assertThat(underTest.peek(WORKER_UUID_1).get().getUuid()).isEqualTo(\"uuid\");","366","    assertThat(db.getDbClient().ceQueueDao().selectByUuid(session, \"uuid\").get().getExecutionCount()).isEqualTo(2);","429","    insertPending(\"u3\", WORKER_UUID_1, 0); \/\/ will be picked first","430","    insertInProgress(\"u4\", WORKER_UUID_1, 1); \/\/ will be reset and picked on second call only","433","    assertThat(ceTask.get().getUuid()).isEqualTo(\"u3\");","434","","435","    \/\/ remove first task and do another peek: will pick the reset task since it's now the oldest one","436","    underTest.remove(ceTask.get(), CeActivityDto.Status.SUCCESS, null, null);","437","    assertThat(underTest.peek(WORKER_UUID_1).get().getUuid()).isEqualTo(\"u4\");","444","    insertInProgress(\"u3\", WORKER_UUID_1, 1); \/\/ will be reset and picked","448","    assertThat(ceTask.get().getUuid()).isEqualTo(\"u3\");","449","","450","    \/\/ remove first task and do another peek: will pick the reset task since it's now the oldest one","451","    underTest.remove(ceTask.get(), CeActivityDto.Status.SUCCESS, null, null);","452","    assertThat(underTest.peek(WORKER_UUID_1).get().getUuid()).isEqualTo(\"u4\");","557","  public void cancelWornOuts_cancels_pending_tasks_with_executionCount_greater_or_equal_to_2() {","570","    verifyUnmodified(u2);"]}]}},"bd2717036288c9feea942fdfcefcd096363bc006":{"changes":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/profiling\/PhasesSumUpTimeProfiler.java":"MODIFY","sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/SourcePublisher.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/profiling\/PhasesSumUpTimeProfiler.java":[{"add":["21","import static org.sonar.scanner.profiling.AbstractTimeProfiling.sortByDescendingTotalTime;","22","import static org.sonar.scanner.profiling.AbstractTimeProfiling.truncate;","23","","24","import java.io.BufferedOutputStream;","27","import java.io.OutputStream;","31","","33","","52","import com.google.common.annotations.VisibleForTesting;","143","    try (OutputStream fos = new BufferedOutputStream(new FileOutputStream(file))) {"],"delete":["21","import com.google.common.annotations.VisibleForTesting;","46","import static org.sonar.scanner.profiling.AbstractTimeProfiling.sortByDescendingTotalTime;","47","import static org.sonar.scanner.profiling.AbstractTimeProfiling.truncate;","138","    try (FileOutputStream fos = new FileOutputStream(file)) {"]}],"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/report\/SourcePublisher.java":[{"add":["21","import java.io.BufferedOutputStream;","28","import java.io.OutputStream;","30","","49","      try (OutputStream output = new BufferedOutputStream(new FileOutputStream(iofile));","59","  private static void writeSource(BufferedReader reader, OutputStream output, int lines) throws IOException {"],"delete":["46","      try (FileOutputStream output = new FileOutputStream(iofile);","56","  private static void writeSource(BufferedReader reader, FileOutputStream output, int lines) throws IOException {"]}]}},"583e42c16797bf57162ebd502e12241d8765a8fc":{"changes":{"server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/ui\/ws\/ComponentActionTest\/return_component_info_when_file_on_branch.json":"ADD","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/ui\/ws\/ComponentActionTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ui\/ws\/ComponentAction.java":"MODIFY","server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/ui\/ws\/ComponentActionTest\/return_component_info_when_file_on_master.json":"ADD","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/ws\/SearchResponseFormat.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/ui\/ws\/ComponentActionTest\/return_component_info_when_file_on_branch.json":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/ui\/ws\/ComponentActionTest.java":[{"add":["221","  public void return_component_info_when_file_on_master() throws Exception {","222","    init();","223","    OrganizationDto organization = dbTester.organizations().insertForKey(\"my-org2\");","224","    ComponentDto main = componentDbTester.insertMainBranch(organization, p -> p.setName(\"Sample\"), p -> p.setDbKey(\"sample\"));","225","    userSession.addProjectPermission(UserRole.USER, main);","226","","227","    ComponentDto dirDto = componentDbTester.insertComponent(newDirectory(main, \"src\"));","228","","229","    ComponentDto fileDto = componentDbTester.insertComponent(newFileDto(main, dirDto)","230","      .setUuid(\"abcd\")","231","      .setName(\"Main.xoo\")","232","      .setDbKey(\"sample:src\/Main.xoo\"));","233","","234","    executeAndVerify(fileDto.getDbKey(), \"return_component_info_when_file_on_master.json\");","235","  }","236","","237","  @Test","238","  public void return_component_info_when_file_on_branch() throws Exception {","239","    init();","240","    OrganizationDto organization = dbTester.organizations().insertForKey(\"my-org2\");","241","    ComponentDto project = componentDbTester.insertMainBranch(organization, p -> p.setName(\"Sample\"), p -> p.setDbKey(\"sample\"));","242","    ComponentDto branch = componentDbTester.insertProjectBranch(project, b -> b.setKey(\"feature1\"));","243","    userSession.addProjectPermission(UserRole.USER, project);","244","","245","    ComponentDto dirDto = componentDbTester.insertComponent(newDirectory(branch, \"src\"));","246","","247","    ComponentDto fileDto = componentDbTester.insertComponent(newFileDto(branch, dirDto)","248","      .setUuid(\"abcd\")","249","      .setName(\"Main.xoo\")","250","      .setDbKey(\"sample:src\/Main.xoo\"));","251","","252","    String json = ws.newRequest()","253","      .setParam(\"componentKey\", fileDto.getDbKey())","254","      .setParam(\"branch\", branch.getBranch())","255","      .execute()","256","      .getInput();","257","    verify(json, \"return_component_info_when_file_on_branch.json\");","258","  }","259","","260","  @Test"],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/ui\/ws\/ComponentAction.java":[{"add":["71","import static org.sonar.server.ws.KeyExamples.KEY_BRANCH_EXAMPLE_001;","77","  static final String PARAM_BRANCH = \"branch\";","123","","124","    projectNavigation","125","      .createParam(PARAM_BRANCH)","126","      .setDescription(\"Branch key\")","127","      .setInternal(true)","128","      .setExampleValue(KEY_BRANCH_EXAMPLE_001);","135","      String branch = request.param(PARAM_BRANCH);","136","      ComponentDto component = componentFinder.getByKeyAndOptionalBranch(session, componentKey, branch);","292","        .prop(\"key\", c.getKey())"],"delete":["127","      ComponentDto component = componentFinder.getByKey(session, componentKey);","283","        .prop(\"key\", c.getDbKey())"]}],"server\/sonar-server\/src\/test\/resources\/org\/sonar\/server\/ui\/ws\/ComponentActionTest\/return_component_info_when_file_on_master.json":[{"add":[],"delete":[]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/issue\/ws\/SearchResponseFormat.java":[{"add":["166","      issueBuilder.setProject(project.getKey());","169","        issueBuilder.setSubProject(subProject.getKey());"],"delete":["166","      issueBuilder.setProject(project.getDbKey());","169","        issueBuilder.setSubProject(subProject.getDbKey());"]}]}},"36a2571ece01e51f104523ed98f43e6f27f03f75":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/App.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/__tests__\/__snapshots__\/App-test.tsx.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/App.tsx":[{"add":["120","      <div className=\"page page-limited\">","121","        <div className=\"empty-search\">","122","          <h3>","123","            {!this.state.measures || !this.state.measures['projects']","124","              ? translate('portfolio.empty')","125","              : translate('portfolio.no_lines_of_code')}","126","          <\/h3>","127","        <\/div>","134","      <div className=\"page page-limited\">","135","        <div className=\"empty-search\">","136","          <h3>{translate('portfolio.not_computed')}<\/h3>","137","        <\/div>"],"delete":["120","      <div className=\"empty-search\">","121","        <h3>","122","          {!this.state.measures || !this.state.measures['projects']","123","            ? translate('portfolio.empty')","124","            : translate('portfolio.no_lines_of_code')}","125","        <\/h3>","132","      <div className=\"empty-search\">","133","        <h3>{translate('portfolio.not_computed')}<\/h3>"]}],"server\/sonar-web\/src\/main\/js\/apps\/portfolio\/components\/__tests__\/__snapshots__\/App-test.tsx.snap":[{"add":["150","  className=\"page page-limited\"","152","  <div","153","    className=\"empty-search\"","154","  >","155","    <h3>","156","      portfolio.empty","157","    <\/h3>","158","  <\/div>","164","  className=\"page page-limited\"","166","  <div","167","    className=\"empty-search\"","168","  >","169","    <h3>","170","      portfolio.not_computed","171","    <\/h3>","172","  <\/div>"],"delete":["150","  className=\"empty-search\"","152","  <h3>","153","    portfolio.empty","154","  <\/h3>","160","  className=\"empty-search\"","162","  <h3>","163","    portfolio.not_computed","164","  <\/h3>"]}]}},"6b32b6acfc429c66d837b4176b97727340c5bdba":{"changes":{"server\/sonar-web\/src\/main\/js\/app\/components\/ComponentContainer.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/app\/components\/ComponentContainer.tsx":[{"add":["102","    const onError = (param?: any) => {","104","        let response: Response;","105","","106","        if (param && param.response) {","107","          response = param.response;","108","        } else {","109","          response = param;","110","        }","111",""],"delete":["102","    const onError = (response?: Response) => {"]}]}},"05f2a1332ceae679ae8c0e13cb95bb1eb4eccd29":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/organization\/OrganizationValidation.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/organization\/OrganizationValidationImplTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/organization\/ws\/UpdateActionTest.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/organization\/ws\/CreateActionTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/organization\/ws\/CreateAction.java":"MODIFY","tests\/src\/test\/java\/org\/sonarqube\/tests\/organization\/OrganizationTest.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/organization\/OrganizationValidationImpl.java":"MODIFY","tests\/src\/test\/java\/org\/sonarqube\/tests\/organization\/PersonalOrganizationTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/organization\/OrganizationValidation.java":[{"add":["25","  int KEY_MIN_LENGTH = 1;","27","  int NAME_MIN_LENGTH = 1;"],"delete":["25","  int KEY_MIN_LENGTH = 2;","27","  int NAME_MIN_LENGTH = 2;"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/organization\/OrganizationValidationImplTest.java":[{"add":["50","    expectedException.expectMessage(\"Key must not be empty\");","56","  public void checkValidKey_throws_IAE_if_key_is_empty() {","58","    expectedException.expectMessage(\"Key must not be empty\");","60","    underTest.checkKey(\"\");","111","  public void checkValidName_throws_IAE_if_empty() {","113","    expectedException.expectMessage(\"Name must not be empty\");"],"delete":["50","    expectedException.expectMessage(\"Key '' must be at least 2 chars long\");","56","  public void checkValidKey_throws_IAE_if_arg_is_1_char_long() {","58","    expectedException.expectMessage(\"Key 'a' must be at least 2 chars long\");","60","    underTest.checkKey(\"a\");","111","  public void checkValidName_throws_IAE_if_arg_is_empty() {","113","    expectedException.expectMessage(\"Name '' must be at least 2 chars long\");","119","  public void checkValidName_throws_IAE_if_arg_is_1_char_long() {","120","    expectedException.expect(IllegalArgumentException.class);","121","    expectedException.expectMessage(\"Name 'a' must be at least 2 chars long\");","122","","123","    underTest.checkName(\"a\");","124","  }","125","","126","  @Test"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/organization\/ws\/UpdateActionTest.java":[{"add":["175","  public void request_fails_if_name_is_empty() {","179","    expectedException.expectMessage(\"Name must not be empty\");","181","    executeKeyRequest(SOME_KEY, \"\");"],"delete":["175","  public void request_fails_if_name_is_one_char_long() {","179","    expectedException.expectMessage(\"Name 'a' must be at least 2 chars long\");","181","    executeKeyRequest(SOME_KEY, \"a\");"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/organization\/ws\/CreateActionTest.java":[{"add":["31","import org.sonar.api.utils.internal.TestSystem2;","34","import org.sonar.core.util.UuidFactoryFast;","69","import static org.sonar.server.organization.ws.OrganizationsWsSupport.PARAM_KEY;","70","import static org.sonar.server.organization.ws.OrganizationsWsSupport.PARAM_NAME;","77","  private static final long NOW = 1_200_000L;","78","","79","  private System2 system2 = new TestSystem2().setNow(NOW);","92","  private MapSettings settings = new MapSettings().setProperty(ORGANIZATIONS_ANYONE_CAN_CREATE, false);","96","  private OrganizationCreation organizationCreation = new OrganizationCreationImpl(dbClient, system2, UuidFactoryFast.getInstance(), organizationValidation, settings.asConfig(),","97","    userIndexer,","101","  private WsActionTester wsTester = new WsActionTester(","102","    new CreateAction(settings.asConfig(), userSession, dbClient, new OrganizationsWsSupport(organizationValidation),","103","      organizationValidation,","104","      organizationCreation, organizationFlags));","115","    assertThat(action.handler()).isNotNull();","142","    createUserAndLogInAsSystemAdministrator();","151","  public void request_succeeds_if_user_is_system_administrator_and_logged_in_users_cannot_create_organizations() {","152","    createUserAndLogInAsSystemAdministrator();","153","    dbTester.qualityGates().insertBuiltInQualityGate();","154","","155","    verifyResponseAndDb(executeRequest(\"foo\"), \"foo\", \"foo\", NOW);","156","  }","157","","158","  @Test","159","  public void request_succeeds_if_user_is_system_administrator_and_logged_in_users_can_create_organizations() {","160","    createUserAndLogInAsSystemAdministrator();","161","    settings.setProperty(ORGANIZATIONS_ANYONE_CAN_CREATE, true);","162","    dbTester.qualityGates().insertBuiltInQualityGate();","163","","164","    verifyResponseAndDb(executeRequest(\"foo\"), \"foo\", \"foo\", NOW);","165","  }","166","","167","  @Test","168","  public void request_succeeds_if_user_is_not_system_administrator_and_logged_in_users_can_create_organizations() {","169","    UserDto user = dbTester.users().insertUser();","170","    userSession.logIn(user);","171","    settings.setProperty(ORGANIZATIONS_ANYONE_CAN_CREATE, true);","172","    dbTester.qualityGates().insertBuiltInQualityGate();","173","","174","    verifyResponseAndDb(executeRequest(\"foo\"), \"foo\", \"foo\", NOW);","175","  }","176","","177","  @Test","178","  public void request_succeeds_if_name_is_two_chars_long() {","179","    createUserAndLogInAsSystemAdministrator();","180","    dbTester.qualityGates().insertBuiltInQualityGate();","181","","182","    verifyResponseAndDb(executeRequest(\"ab\"), \"ab\", \"ab\", NOW);","183","  }","184","","185","  @Test","186","  public void request_succeeds_if_name_is_64_char_long() {","187","    createUserAndLogInAsSystemAdministrator();","188","    dbTester.qualityGates().insertBuiltInQualityGate();","189","","190","    String name = STRING_65_CHARS_LONG.substring(0, 64);","191","","192","    verifyResponseAndDb(executeRequest(name), name, name.substring(0, 32), NOW);","193","  }","194","","195","  @Test","196","  public void request_succeeds_if_key_is_2_chars_long() {","197","    createUserAndLogInAsSystemAdministrator();","198","    dbTester.qualityGates().insertBuiltInQualityGate();","199","","200","    verifyResponseAndDb(executeRequest(\"foo\", \"ab\"), \"foo\", \"ab\", NOW);","201","  }","202","","203","  @Test","204","  public void requests_succeeds_if_key_is_32_chars_long() {","205","    createUserAndLogInAsSystemAdministrator();","206","    dbTester.qualityGates().insertBuiltInQualityGate();","207","","208","    String key = STRING_65_CHARS_LONG.substring(0, 32);","209","","210","    verifyResponseAndDb(executeRequest(\"foo\", key), \"foo\", key, NOW);","211","  }","212","","213","  @Test","214","  public void request_succeeds_if_description_url_and_avatar_are_not_specified() {","215","    createUserAndLogInAsSystemAdministrator();","216","    dbTester.qualityGates().insertBuiltInQualityGate();","217","","218","    CreateWsResponse response = executeRequest(\"foo\", \"bar\", null, null, null);","219","","220","    verifyResponseAndDb(response, \"foo\", \"bar\", null, null, null, NOW);","221","  }","222","","223","  @Test","224","  public void request_succeeds_if_description_url_and_avatar_are_specified() {","225","    createUserAndLogInAsSystemAdministrator();","226","    dbTester.qualityGates().insertBuiltInQualityGate();","227","","228","    CreateWsResponse response = executeRequest(\"foo\", \"bar\", \"moo\", \"doo\", \"boo\");","229","    verifyResponseAndDb(response, \"foo\", \"bar\", \"moo\", \"doo\", \"boo\", NOW);","230","  }","231","","232","  @Test","233","  public void request_succeeds_to_generate_key_from_name_more_then_32_chars_long() {","234","    createUserAndLogInAsSystemAdministrator();","235","    dbTester.qualityGates().insertBuiltInQualityGate();","236","","237","    String name = STRING_65_CHARS_LONG.substring(0, 33);","238","","239","    CreateWsResponse response = executeRequest(name);","240","    verifyResponseAndDb(response, name, name.substring(0, 32), NOW);","241","  }","242","","243","  @Test","244","  public void request_generates_key_ignoring_multiple_following_spaces() {","245","    createUserAndLogInAsSystemAdministrator();","246","    dbTester.qualityGates().insertBuiltInQualityGate();","247","","248","    String name = \"ab   cd\";","249","","250","    CreateWsResponse response = executeRequest(name);","251","    verifyResponseAndDb(response, name, \"ab-cd\", NOW);","252","  }","253","","254","  @Test","255","  public void request_succeeds_if_description_is_256_chars_long() {","256","    createUserAndLogInAsSystemAdministrator();","257","    String description = STRING_257_CHARS_LONG.substring(0, 256);","258","    dbTester.qualityGates().insertBuiltInQualityGate();","259","","260","    CreateWsResponse response = executeRequest(\"foo\", \"bar\", description, null, null);","261","    verifyResponseAndDb(response, \"foo\", \"bar\", description, null, null, NOW);","262","  }","263","","264","  @Test","265","  public void request_succeeds_if_url_is_256_chars_long() {","266","    createUserAndLogInAsSystemAdministrator();","267","    String url = STRING_257_CHARS_LONG.substring(0, 256);","268","    dbTester.qualityGates().insertBuiltInQualityGate();","269","","270","    CreateWsResponse response = executeRequest(\"foo\", \"bar\", null, url, null);","271","    verifyResponseAndDb(response, \"foo\", \"bar\", null, url, null, NOW);","272","  }","273","","274","  @Test","275","  public void request_succeeds_if_avatar_is_256_chars_long() {","276","    createUserAndLogInAsSystemAdministrator();","277","    String avatar = STRING_257_CHARS_LONG.substring(0, 256);","278","    dbTester.qualityGates().insertBuiltInQualityGate();","279","","280","    CreateWsResponse response = executeRequest(\"foo\", \"bar\", null, null, avatar);","281","    verifyResponseAndDb(response, \"foo\", \"bar\", null, null, avatar, NOW);","282","  }","283","","284","  @Test","285","  public void request_creates_owners_group_with_all_permissions_for_new_organization_and_add_current_user_to_it() {","286","    UserDto user = dbTester.users().insertUser();","287","    userSession.logIn(user).setSystemAdministrator();","288","    dbTester.qualityGates().insertBuiltInQualityGate();","289","","290","    executeRequest(\"orgFoo\");","291","","292","    DbSession dbSession = dbTester.getSession();","293","    OrganizationDto organization = dbClient.organizationDao().selectByKey(dbSession, \"orgfoo\").get();","294","    Optional<GroupDto> groupDtoOptional = dbClient.groupDao().selectByName(dbSession, organization.getUuid(), \"Owners\");","295","    assertThat(groupDtoOptional).isNotEmpty();","296","    GroupDto groupDto = groupDtoOptional.get();","297","    assertThat(groupDto.getDescription()).isEqualTo(\"Owners of organization orgFoo\");","298","    assertThat(dbClient.groupPermissionDao().selectGlobalPermissionsOfGroup(dbSession, groupDto.getOrganizationUuid(), groupDto.getId()))","299","      .containsOnly(GlobalPermissions.ALL.toArray(new String[GlobalPermissions.ALL.size()]));","300","    List<UserMembershipDto> members = dbClient.groupMembershipDao().selectMembers(","301","      dbSession,","302","      UserMembershipQuery.builder()","303","        .organizationUuid(organization.getUuid())","304","        .groupId(groupDto.getId())","305","        .membership(UserMembershipQuery.IN).build(),","306","      0, Integer.MAX_VALUE);","307","    assertThat(members)","308","      .extracting(UserMembershipDto::getLogin)","309","      .containsOnly(user.getLogin());","310","  }","311","","312","  @Test","313","  public void request_creates_members_group_and_add_current_user_to_it() {","314","    UserDto user = dbTester.users().insertUser();","315","    userSession.logIn(user).setSystemAdministrator();","316","    dbTester.qualityGates().insertBuiltInQualityGate();","317","","318","    executeRequest(\"orgFoo\");","319","","320","    DbSession dbSession = dbTester.getSession();","321","    OrganizationDto organization = dbClient.organizationDao().selectByKey(dbSession, \"orgfoo\").get();","322","    Optional<GroupDto> groupDtoOptional = dbClient.groupDao().selectByName(dbSession, organization.getUuid(), \"Members\");","323","    assertThat(groupDtoOptional).isNotEmpty();","324","    GroupDto groupDto = groupDtoOptional.get();","325","    assertThat(groupDto.getDescription()).isEqualTo(\"All members of the organization\");","326","    assertThat(dbClient.groupPermissionDao().selectGlobalPermissionsOfGroup(dbSession, groupDto.getOrganizationUuid(), groupDto.getId())).isEmpty();","327","    List<UserMembershipDto> members = dbClient.groupMembershipDao().selectMembers(","328","      dbSession,","329","      UserMembershipQuery.builder()","330","        .organizationUuid(organization.getUuid())","331","        .groupId(groupDto.getId())","332","        .membership(UserMembershipQuery.IN).build(),","333","      0, Integer.MAX_VALUE);","334","    assertThat(members)","335","      .extracting(UserMembershipDto::getLogin)","336","      .containsOnly(user.getLogin());","337","  }","338","","339","  @Test","340","  public void request_creates_default_template_for_owner_group() {","341","    UserDto user = dbTester.users().insertUser();","342","    userSession.logIn(user).setSystemAdministrator();","343","    dbTester.qualityGates().insertBuiltInQualityGate();","344","","345","    executeRequest(\"orgFoo\");","346","","347","    OrganizationDto organization = dbClient.organizationDao().selectByKey(dbSession, \"orgfoo\").get();","348","    GroupDto ownersGroup = dbClient.groupDao().selectByName(dbSession, organization.getUuid(), \"Owners\").get();","349","    GroupDto defaultGroup = dbClient.groupDao().selectByName(dbSession, organization.getUuid(), \"Members\").get();","350","    PermissionTemplateDto defaultTemplate = dbClient.permissionTemplateDao().selectByName(dbSession, organization.getUuid(), \"default template\");","351","    assertThat(defaultTemplate.getName()).isEqualTo(\"Default template\");","352","    assertThat(defaultTemplate.getDescription()).isEqualTo(\"Default permission template of organization orgFoo\");","353","    DefaultTemplates defaultTemplates = dbClient.organizationDao().getDefaultTemplates(dbSession, organization.getUuid()).get();","354","    assertThat(defaultTemplates.getProjectUuid()).isEqualTo(defaultTemplate.getUuid());","355","    assertThat(defaultTemplates.getViewUuid()).isNull();","356","    assertThat(dbClient.permissionTemplateDao().selectGroupPermissionsByTemplateId(dbSession, defaultTemplate.getId()))","357","      .extracting(PermissionTemplateGroupDto::getGroupId, PermissionTemplateGroupDto::getPermission)","358","      .containsOnly(","359","        tuple(ownersGroup.getId(), UserRole.ADMIN), tuple(ownersGroup.getId(), UserRole.ISSUE_ADMIN), tuple(ownersGroup.getId(), GlobalPermissions.SCAN_EXECUTION),","360","        tuple(defaultGroup.getId(), UserRole.USER), tuple(defaultGroup.getId(), UserRole.CODEVIEWER));","361","  }","362","","363","  @Test","364","  public void request_set_user_as_member_of_organization() {","365","    UserDto user = dbTester.users().insertUser();","366","    userSession.logIn(user).setSystemAdministrator();","367","    dbTester.qualityGates().insertBuiltInQualityGate();","368","","369","    executeRequest(\"foo\", \"bar\");","370","","371","    OrganizationDto organization = dbClient.organizationDao().selectByKey(dbSession, \"bar\").get();","372","    assertThat(dbClient.organizationMemberDao().select(dbSession, organization.getUuid(), user.getId())).isPresent();","373","    assertThat(userIndex.getNullableByLogin(user.getLogin()).organizationUuids()).contains(organization.getUuid());","374","  }","375","","376","  @Test","377","  public void create_organization_with_name_having_one_character() {","378","    createUserAndLogInAsSystemAdministrator();","379","    dbTester.qualityGates().insertBuiltInQualityGate();","380","","381","    wsTester.newRequest()","382","      .setParam(PARAM_NAME, \"a\")","383","      .execute();","384","","385","    OrganizationDto organization = dbClient.organizationDao().selectByKey(dbTester.getSession(), \"a\").get();","386","    assertThat(organization.getKey()).isEqualTo(\"a\");","387","    assertThat(organization.getName()).isEqualTo(\"a\");","388","  }","389","","390","  @Test","391","  public void request_fails_if_name_param_is_missing() {","392","    createUserAndLogInAsSystemAdministrator();","393","","394","    expectedException.expect(IllegalArgumentException.class);","395","    expectedException.expectMessage(\"The 'name' parameter is missing\");","396","","397","    executeRequest(null);","398","  }","399","","400","  @Test","401","  public void request_fails_if_name_is_empty() {","402","    createUserAndLogInAsSystemAdministrator();","403","","404","    expectedException.expect(IllegalArgumentException.class);","405","    expectedException.expectMessage(\"Name must not be empty\");","406","","407","    wsTester.newRequest()","408","      .setParam(PARAM_NAME, \"\")","409","      .execute();","410","  }","411","","412","  @Test","413","  public void request_fails_if_name_is_65_chars_long() {","414","    createUserAndLogInAsSystemAdministrator();","415","","416","    expectedException.expect(IllegalArgumentException.class);","417","    expectedException.expectMessage(\"'name' length (65) is longer than the maximum authorized (64)\");","418","","419","    executeRequest(STRING_65_CHARS_LONG);","420","  }","421","","422","  @Test","423","  public void request_fails_if_key_is_33_chars_long() {","424","    createUserAndLogInAsSystemAdministrator();","425","","426","    String key = STRING_65_CHARS_LONG.substring(0, 33);","427","","428","    expectedException.expect(IllegalArgumentException.class);","429","    expectedException.expectMessage(\"'key' length (33) is longer than the maximum authorized (32)\");","430","","431","    executeRequest(\"foo\", key);","432","  }","433","","434","  @Test","435","  public void requests_fails_if_key_contains_non_ascii_chars_but_dash() {","436","    createUserAndLogInAsSystemAdministrator();","437","","438","    expectedException.expect(IllegalArgumentException.class);","439","    expectedException.expectMessage(\"Key '\" + \"ab@\" + \"' contains at least one invalid char\");","440","","441","    executeRequest(\"foo\", \"ab@\");","442","  }","443","","444","  @Test","445","  public void request_fails_if_key_starts_with_a_dash() {","446","    createUserAndLogInAsSystemAdministrator();","447","","448","    expectedException.expect(IllegalArgumentException.class);","449","    expectedException.expectMessage(\"Key '\" + \"-ab\" + \"' contains at least one invalid char\");","450","","451","    executeRequest(\"foo\", \"-ab\");","452","  }","453","","454","  @Test","455","  public void request_fails_if_key_ends_with_a_dash() {","456","    createUserAndLogInAsSystemAdministrator();","457","","458","    expectedException.expect(IllegalArgumentException.class);","459","    expectedException.expectMessage(\"Key '\" + \"ab-\" + \"' contains at least one invalid char\");","460","","461","    executeRequest(\"foo\", \"ab-\");","462","  }","463","","464","  @Test","465","  public void request_fails_if_key_contains_space() {","466","    createUserAndLogInAsSystemAdministrator();","467","","468","    expectedException.expect(IllegalArgumentException.class);","469","    expectedException.expectMessage(\"Key '\" + \"a b\" + \"' contains at least one invalid char\");","470","","471","    executeRequest(\"foo\", \"a b\");","472","  }","473","","474","  @Test","475","  public void request_fails_if_key_is_empty() {","476","    createUserAndLogInAsSystemAdministrator();","477","","478","    expectedException.expect(IllegalArgumentException.class);","479","    expectedException.expectMessage(\"Key must not be empty\");","480","","481","    wsTester.newRequest()","482","      .setParam(PARAM_KEY, \"\")","483","      .setParam(PARAM_NAME, \"foo\")","484","      .execute();","485","  }","486","","487","  @Test","488","  public void request_fails_if_key_is_specified_and_already_exists_in_DB() {","489","    createUserAndLogInAsSystemAdministrator();","490","    OrganizationDto org = dbTester.organizations().insert(o -> o.setKey(\"the-key\"));","491","","492","    expectedException.expect(IllegalArgumentException.class);","493","    expectedException.expectMessage(\"Key '\" + org.getKey() + \"' is already used. Specify another one.\");","494","","495","    executeRequest(\"foo\", org.getKey());","496","  }","497","","498","  @Test","499","  public void request_fails_if_key_computed_from_name_already_exists_in_DB() {","500","    createUserAndLogInAsSystemAdministrator();","501","    String key = STRING_65_CHARS_LONG.substring(0, 32);","502","    dbTester.organizations().insert(o -> o.setKey(key));","503","    String name = STRING_65_CHARS_LONG.substring(0, 64);","504","","505","    expectedException.expect(IllegalArgumentException.class);","506","    expectedException.expectMessage(\"Key '\" + key + \"' generated from name '\" + name + \"' is already used. Specify one.\");","507","","508","    executeRequest(name);","509","  }","510","","511","  @Test","512","  public void request_fails_if_url_is_257_chars_long() {","513","    createUserAndLogInAsSystemAdministrator();","514","","515","    expectedException.expect(IllegalArgumentException.class);","516","    expectedException.expectMessage(\"'url' length (257) is longer than the maximum authorized (256)\");","517","","518","    executeRequest(\"foo\", \"bar\", null, STRING_257_CHARS_LONG, null);","519","  }","520","","521","  @Test","522","  public void request_fails_if_description_is_257_chars_long() {","523","    createUserAndLogInAsSystemAdministrator();","524","","525","    expectedException.expect(IllegalArgumentException.class);","526","    expectedException.expectMessage(\"'description' length (257) is longer than the maximum authorized (256)\");","527","","528","    executeRequest(\"foo\", \"bar\", STRING_257_CHARS_LONG, null, null);","529","  }","530","","531","  @Test","532","  public void request_fails_if_avatar_is_257_chars_long() {","533","    createUserAndLogInAsSystemAdministrator();","534","","535","    expectedException.expect(IllegalArgumentException.class);","536","    expectedException.expectMessage(\"'avatar' length (257) is longer than the maximum authorized (256)\");","537","","538","    executeRequest(\"foo\", \"bar\", null, null, STRING_257_CHARS_LONG);","539","  }","540","","541","  @Test","575","    createUserAndLogInAsSystemAdministrator();","613","  private void verifyResponseAndDb(CreateWsResponse response, String name, String key, long createdAt) {","614","    verifyResponseAndDb(response, name, key, null, null, null, createdAt);","617","  private void verifyResponseAndDb(CreateWsResponse response, String name, String key, @Nullable String description, @Nullable String url, @Nullable String avatar,","618","    long createdAt) {","638","    OrganizationDto dto = dbClient.organizationDao().selectByKey(dbTester.getSession(), key).get();","639","    assertThat(dto.getUuid()).isNotNull();","649","  private void createUserAndLogInAsSystemAdministrator() {","650","    UserDto user = dbTester.users().insertUser();","651","    userIndexer.indexOnStartup(new HashSet<>());"],"delete":["25","import org.junit.Before;","34","import org.sonar.core.util.UuidFactory;","35","import org.sonar.core.util.Uuids;","69","import static org.mockito.Mockito.when;","76","  private static final String SOME_UUID = \"uuid\";","77","  private static final long SOME_DATE = 1_200_000L;","79","  private System2 system2 = mock(System2.class);","92","  private MapSettings settings = new MapSettings()","93","    .setProperty(ORGANIZATIONS_ANYONE_CAN_CREATE, false);","94","  private UuidFactory uuidFactory = mock(UuidFactory.class);","98","  private OrganizationCreation organizationCreation = new OrganizationCreationImpl(dbClient, system2, uuidFactory, organizationValidation, settings.asConfig(), userIndexer,","102","  private UserDto user;","103","","104","  private CreateAction underTest = new CreateAction(settings.asConfig(), userSession, dbClient, new OrganizationsWsSupport(organizationValidation), organizationValidation,","105","    organizationCreation, organizationFlags);","106","","107","  private WsActionTester wsTester = new WsActionTester(underTest);","108","","109","  @Before","110","  public void setUp() {","111","    user = dbTester.users().insertUser();","112","    userIndexer.indexOnStartup(new HashSet<>());","113","    userSession.logIn(user);","114","  }","125","    assertThat(action.handler()).isEqualTo(underTest);","152","    logInAsSystemAdministrator();","153","    mockForSuccessfulInsert(Uuids.UUID_EXAMPLE_01, SOME_DATE);","193","  public void request_succeeds_if_user_is_system_administrator_and_logged_in_users_cannot_create_organizations() {","194","    logInAsSystemAdministrator();","195","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","196","    dbTester.qualityGates().insertBuiltInQualityGate();","197","","198","    verifyResponseAndDb(executeRequest(\"foo\"), SOME_UUID, \"foo\", \"foo\", SOME_DATE);","199","  }","200","","201","  @Test","202","  public void request_succeeds_if_user_is_system_administrator_and_logged_in_users_can_create_organizations() {","203","    logInAsSystemAdministrator();","204","    settings.setProperty(ORGANIZATIONS_ANYONE_CAN_CREATE, true);","205","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","206","    dbTester.qualityGates().insertBuiltInQualityGate();","207","","208","    verifyResponseAndDb(executeRequest(\"foo\"), SOME_UUID, \"foo\", \"foo\", SOME_DATE);","209","  }","210","","211","  @Test","212","  public void request_succeeds_if_user_is_not_system_administrator_and_logged_in_users_can_create_organizations() {","213","    userSession.logIn(user);","214","    settings.setProperty(ORGANIZATIONS_ANYONE_CAN_CREATE, true);","215","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","216","    dbTester.qualityGates().insertBuiltInQualityGate();","217","","218","    verifyResponseAndDb(executeRequest(\"foo\"), SOME_UUID, \"foo\", \"foo\", SOME_DATE);","219","  }","220","","221","  @Test","222","  public void request_fails_if_name_param_is_missing() {","223","    logInAsSystemAdministrator();","224","","225","    expectedException.expect(IllegalArgumentException.class);","226","    expectedException.expectMessage(\"The 'name' parameter is missing\");","227","","228","    executeRequest(null);","229","  }","230","","231","  @Test","232","  public void request_fails_if_name_is_one_char_long() {","233","    logInAsSystemAdministrator();","234","","235","    expectedException.expect(IllegalArgumentException.class);","236","    expectedException.expectMessage(\"Name 'a' must be at least 2 chars long\");","237","","238","    executeRequest(\"a\");","239","  }","240","","241","  @Test","242","  public void request_succeeds_if_name_is_two_chars_long() {","243","    logInAsSystemAdministrator();","244","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","245","    dbTester.qualityGates().insertBuiltInQualityGate();","246","","247","    verifyResponseAndDb(executeRequest(\"ab\"), SOME_UUID, \"ab\", \"ab\", SOME_DATE);","248","  }","249","","250","  @Test","251","  public void request_fails_if_name_is_65_chars_long() {","252","    logInAsSystemAdministrator();","253","","254","    expectedException.expect(IllegalArgumentException.class);","255","    expectedException.expectMessage(\"'name' length (65) is longer than the maximum authorized (64)\");","256","","257","    executeRequest(STRING_65_CHARS_LONG);","258","  }","259","","260","  @Test","261","  public void request_succeeds_if_name_is_64_char_long() {","262","    logInAsSystemAdministrator();","263","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","264","    dbTester.qualityGates().insertBuiltInQualityGate();","265","","266","    String name = STRING_65_CHARS_LONG.substring(0, 64);","267","","268","    verifyResponseAndDb(executeRequest(name), SOME_UUID, name, name.substring(0, 32), SOME_DATE);","269","  }","270","","271","  @Test","272","  public void request_fails_if_key_one_char_long() {","273","    logInAsSystemAdministrator();","274","","275","    expectedException.expect(IllegalArgumentException.class);","276","    expectedException.expectMessage(\"Key 'a' must be at least 2 chars long\");","277","","278","    executeRequest(\"foo\", \"a\");","279","  }","280","","281","  @Test","282","  public void request_fails_if_key_is_33_chars_long() {","283","    logInAsSystemAdministrator();","284","","285","    String key = STRING_65_CHARS_LONG.substring(0, 33);","286","","287","    expectedException.expect(IllegalArgumentException.class);","288","    expectedException.expectMessage(\"'key' length (33) is longer than the maximum authorized (32)\");","289","","290","    executeRequest(\"foo\", key);","291","  }","292","","293","  @Test","294","  public void request_succeeds_if_key_is_2_chars_long() {","295","    logInAsSystemAdministrator();","296","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","297","    dbTester.qualityGates().insertBuiltInQualityGate();","298","","299","    verifyResponseAndDb(executeRequest(\"foo\", \"ab\"), SOME_UUID, \"foo\", \"ab\", SOME_DATE);","300","  }","301","","302","  @Test","303","  public void requests_succeeds_if_key_is_32_chars_long() {","304","    logInAsSystemAdministrator();","305","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","306","    dbTester.qualityGates().insertBuiltInQualityGate();","307","","308","    String key = STRING_65_CHARS_LONG.substring(0, 32);","309","","310","    verifyResponseAndDb(executeRequest(\"foo\", key), SOME_UUID, \"foo\", key, SOME_DATE);","311","  }","312","","313","  @Test","314","  public void requests_fails_if_key_contains_non_ascii_chars_but_dash() {","315","    logInAsSystemAdministrator();","316","","317","    requestFailsWithInvalidCharInKey(\"ab@\");","318","  }","319","","320","  @Test","321","  public void request_fails_if_key_starts_with_a_dash() {","322","    logInAsSystemAdministrator();","323","","324","    requestFailsWithInvalidCharInKey(\"-ab\");","325","  }","326","","327","  @Test","328","  public void request_fails_if_key_ends_with_a_dash() {","329","    logInAsSystemAdministrator();","330","","331","    requestFailsWithInvalidCharInKey(\"ab-\");","332","  }","333","","334","  @Test","335","  public void request_fails_if_key_contains_space() {","336","    logInAsSystemAdministrator();","337","","338","    requestFailsWithInvalidCharInKey(\"a b\");","339","  }","340","","341","  private void requestFailsWithInvalidCharInKey(String key) {","342","    expectedException.expect(IllegalArgumentException.class);","343","    expectedException.expectMessage(\"Key '\" + key + \"' contains at least one invalid char\");","344","","345","    executeRequest(\"foo\", key);","346","  }","347","","348","  @Test","349","  public void request_fails_if_key_is_specified_and_already_exists_in_DB() {","350","    logInAsSystemAdministrator();","351","    OrganizationDto org = dbTester.organizations().insert(o -> o.setKey(\"the-key\"));","352","","353","    expectedException.expect(IllegalArgumentException.class);","354","    expectedException.expectMessage(\"Key '\" + org.getKey() + \"' is already used. Specify another one.\");","355","","356","    executeRequest(\"foo\", org.getKey());","357","  }","358","","359","  @Test","360","  public void request_fails_if_key_computed_from_name_already_exists_in_DB() {","361","    logInAsSystemAdministrator();","362","    String key = STRING_65_CHARS_LONG.substring(0, 32);","363","    dbTester.organizations().insert(o -> o.setKey(key));","364","","365","    String name = STRING_65_CHARS_LONG.substring(0, 64);","366","","367","    expectedException.expect(IllegalArgumentException.class);","368","    expectedException.expectMessage(\"Key '\" + key + \"' generated from name '\" + name + \"' is already used. Specify one.\");","369","","370","    executeRequest(name);","371","  }","372","","373","  @Test","374","  public void request_succeeds_if_description_url_and_avatar_are_not_specified() {","375","    logInAsSystemAdministrator();","376","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","377","    dbTester.qualityGates().insertBuiltInQualityGate();","378","","379","    CreateWsResponse response = executeRequest(\"foo\", \"bar\", null, null, null);","380","    verifyResponseAndDb(response, SOME_UUID, \"foo\", \"bar\", null, null, null, SOME_DATE);","381","  }","382","","383","  @Test","384","  public void request_succeeds_if_description_url_and_avatar_are_specified() {","385","    logInAsSystemAdministrator();","386","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","387","    dbTester.qualityGates().insertBuiltInQualityGate();","388","","389","    CreateWsResponse response = executeRequest(\"foo\", \"bar\", \"moo\", \"doo\", \"boo\");","390","    verifyResponseAndDb(response, SOME_UUID, \"foo\", \"bar\", \"moo\", \"doo\", \"boo\", SOME_DATE);","391","  }","392","","393","  @Test","394","  public void request_succeeds_to_generate_key_from_name_more_then_32_chars_long() {","395","    logInAsSystemAdministrator();","396","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","397","    dbTester.qualityGates().insertBuiltInQualityGate();","398","","399","    String name = STRING_65_CHARS_LONG.substring(0, 33);","400","","401","    CreateWsResponse response = executeRequest(name);","402","    verifyResponseAndDb(response, SOME_UUID, name, name.substring(0, 32), SOME_DATE);","403","  }","404","","405","  @Test","406","  public void request_generates_key_ignoring_multiple_following_spaces() {","407","    logInAsSystemAdministrator();","408","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","409","    dbTester.qualityGates().insertBuiltInQualityGate();","410","","411","    String name = \"ab   cd\";","412","","413","    CreateWsResponse response = executeRequest(name);","414","    verifyResponseAndDb(response, SOME_UUID, name, \"ab-cd\", SOME_DATE);","415","  }","416","","417","  @Test","418","  public void request_fails_if_description_is_257_chars_long() {","419","    logInAsSystemAdministrator();","420","","421","    expectedException.expect(IllegalArgumentException.class);","422","    expectedException.expectMessage(\"'description' length (257) is longer than the maximum authorized (256)\");","423","","424","    executeRequest(\"foo\", \"bar\", STRING_257_CHARS_LONG, null, null);","425","  }","426","","427","  @Test","428","  public void request_succeeds_if_description_is_256_chars_long() {","429","    logInAsSystemAdministrator();","430","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","431","    String description = STRING_257_CHARS_LONG.substring(0, 256);","432","    dbTester.qualityGates().insertBuiltInQualityGate();","433","","434","    CreateWsResponse response = executeRequest(\"foo\", \"bar\", description, null, null);","435","    verifyResponseAndDb(response, SOME_UUID, \"foo\", \"bar\", description, null, null, SOME_DATE);","436","  }","437","","438","  @Test","439","  public void request_fails_if_url_is_257_chars_long() {","440","    logInAsSystemAdministrator();","441","","442","    expectedException.expect(IllegalArgumentException.class);","443","    expectedException.expectMessage(\"'url' length (257) is longer than the maximum authorized (256)\");","444","","445","    executeRequest(\"foo\", \"bar\", null, STRING_257_CHARS_LONG, null);","446","  }","447","","448","  @Test","449","  public void request_succeeds_if_url_is_256_chars_long() {","450","    logInAsSystemAdministrator();","451","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","452","    String url = STRING_257_CHARS_LONG.substring(0, 256);","453","    dbTester.qualityGates().insertBuiltInQualityGate();","454","","455","    CreateWsResponse response = executeRequest(\"foo\", \"bar\", null, url, null);","456","    verifyResponseAndDb(response, SOME_UUID, \"foo\", \"bar\", null, url, null, SOME_DATE);","457","  }","458","","459","  @Test","460","  public void request_fails_if_avatar_is_257_chars_long() {","461","    logInAsSystemAdministrator();","462","","463","    expectedException.expect(IllegalArgumentException.class);","464","    expectedException.expectMessage(\"'avatar' length (257) is longer than the maximum authorized (256)\");","465","","466","    executeRequest(\"foo\", \"bar\", null, null, STRING_257_CHARS_LONG);","467","  }","468","","469","  @Test","470","  public void request_succeeds_if_avatar_is_256_chars_long() {","471","    logInAsSystemAdministrator();","472","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","473","    String avatar = STRING_257_CHARS_LONG.substring(0, 256);","474","    dbTester.qualityGates().insertBuiltInQualityGate();","475","","476","    CreateWsResponse response = executeRequest(\"foo\", \"bar\", null, null, avatar);","477","    verifyResponseAndDb(response, SOME_UUID, \"foo\", \"bar\", null, null, avatar, SOME_DATE);","478","  }","479","","480","  @Test","481","  public void request_creates_owners_group_with_all_permissions_for_new_organization_and_add_current_user_to_it() {","482","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","483","    UserDto user = dbTester.users().insertUser();","484","    userSession.logIn(user).setSystemAdministrator();","485","    dbTester.qualityGates().insertBuiltInQualityGate();","486","","487","    executeRequest(\"orgFoo\");","488","","489","    DbSession dbSession = dbTester.getSession();","490","    OrganizationDto organization = dbClient.organizationDao().selectByKey(dbSession, \"orgfoo\").get();","491","    Optional<GroupDto> groupDtoOptional = dbClient.groupDao().selectByName(dbSession, organization.getUuid(), \"Owners\");","492","    assertThat(groupDtoOptional).isNotEmpty();","493","    GroupDto groupDto = groupDtoOptional.get();","494","    assertThat(groupDto.getDescription()).isEqualTo(\"Owners of organization orgFoo\");","495","    assertThat(dbClient.groupPermissionDao().selectGlobalPermissionsOfGroup(dbSession, groupDto.getOrganizationUuid(), groupDto.getId()))","496","      .containsOnly(GlobalPermissions.ALL.toArray(new String[GlobalPermissions.ALL.size()]));","497","    List<UserMembershipDto> members = dbClient.groupMembershipDao().selectMembers(","498","      dbSession,","499","      UserMembershipQuery.builder()","500","        .organizationUuid(organization.getUuid())","501","        .groupId(groupDto.getId())","502","        .membership(UserMembershipQuery.IN).build(),","503","      0, Integer.MAX_VALUE);","504","    assertThat(members)","505","      .extracting(UserMembershipDto::getLogin)","506","      .containsOnly(user.getLogin());","507","  }","508","","509","  @Test","510","  public void request_creates_members_group_and_add_current_user_to_it() {","511","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","512","    UserDto user = dbTester.users().insertUser();","513","    userSession.logIn(user).setSystemAdministrator();","514","    dbTester.qualityGates().insertBuiltInQualityGate();","515","","516","    executeRequest(\"orgFoo\");","517","","518","    DbSession dbSession = dbTester.getSession();","519","    OrganizationDto organization = dbClient.organizationDao().selectByKey(dbSession, \"orgfoo\").get();","520","    Optional<GroupDto> groupDtoOptional = dbClient.groupDao().selectByName(dbSession, organization.getUuid(), \"Members\");","521","    assertThat(groupDtoOptional).isNotEmpty();","522","    GroupDto groupDto = groupDtoOptional.get();","523","    assertThat(groupDto.getDescription()).isEqualTo(\"All members of the organization\");","524","    assertThat(dbClient.groupPermissionDao().selectGlobalPermissionsOfGroup(dbSession, groupDto.getOrganizationUuid(), groupDto.getId())).isEmpty();","525","    List<UserMembershipDto> members = dbClient.groupMembershipDao().selectMembers(","526","      dbSession,","527","      UserMembershipQuery.builder()","528","        .organizationUuid(organization.getUuid())","529","        .groupId(groupDto.getId())","530","        .membership(UserMembershipQuery.IN).build(),","531","      0, Integer.MAX_VALUE);","532","    assertThat(members)","533","      .extracting(UserMembershipDto::getLogin)","534","      .containsOnly(user.getLogin());","535","  }","536","","537","  @Test","538","  public void request_creates_default_template_for_owner_group() {","539","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","540","    UserDto user = dbTester.users().insertUser();","541","    userSession.logIn(user).setSystemAdministrator();","542","    dbTester.qualityGates().insertBuiltInQualityGate();","543","","544","    executeRequest(\"orgFoo\");","545","","546","    OrganizationDto organization = dbClient.organizationDao().selectByKey(dbSession, \"orgfoo\").get();","547","    GroupDto ownersGroup = dbClient.groupDao().selectByName(dbSession, organization.getUuid(), \"Owners\").get();","548","    GroupDto defaultGroup = dbClient.groupDao().selectByName(dbSession, organization.getUuid(), \"Members\").get();","549","    PermissionTemplateDto defaultTemplate = dbClient.permissionTemplateDao().selectByName(dbSession, organization.getUuid(), \"default template\");","550","    assertThat(defaultTemplate.getName()).isEqualTo(\"Default template\");","551","    assertThat(defaultTemplate.getDescription()).isEqualTo(\"Default permission template of organization orgFoo\");","552","    DefaultTemplates defaultTemplates = dbClient.organizationDao().getDefaultTemplates(dbSession, organization.getUuid()).get();","553","    assertThat(defaultTemplates.getProjectUuid()).isEqualTo(defaultTemplate.getUuid());","554","    assertThat(defaultTemplates.getViewUuid()).isNull();","555","    assertThat(dbClient.permissionTemplateDao().selectGroupPermissionsByTemplateId(dbSession, defaultTemplate.getId()))","556","      .extracting(PermissionTemplateGroupDto::getGroupId, PermissionTemplateGroupDto::getPermission)","557","      .containsOnly(","558","        tuple(ownersGroup.getId(), UserRole.ADMIN), tuple(ownersGroup.getId(), UserRole.ISSUE_ADMIN), tuple(ownersGroup.getId(), GlobalPermissions.SCAN_EXECUTION),","559","        tuple(defaultGroup.getId(), UserRole.USER), tuple(defaultGroup.getId(), UserRole.CODEVIEWER));","560","  }","561","","562","  @Test","563","  public void request_set_user_as_member_of_organization() {","564","    mockForSuccessfulInsert(SOME_UUID, SOME_DATE);","565","    UserDto user = dbTester.users().insertUser();","566","    userSession.logIn(user).setSystemAdministrator();","567","    dbTester.qualityGates().insertBuiltInQualityGate();","568","","569","    executeRequest(\"orgFoo\");","570","","571","    assertThat(dbClient.organizationMemberDao().select(dbSession, SOME_UUID, user.getId())).isPresent();","572","    assertThat(userIndex.getNullableByLogin(user.getLogin()).organizationUuids()).contains(SOME_UUID);","573","  }","574","","575","  @Test","578","    logInAsSystemAdministrator();","586","  private void mockForSuccessfulInsert(String uuid, long now) {","587","    when(uuidFactory.create()).thenReturn(uuid);","588","    when(system2.now()).thenReturn(now);","589","  }","590","","621","  private void verifyResponseAndDb(CreateWsResponse response,","622","                                   String uuid, String name, String key,","623","                                   long createdAt) {","624","    verifyResponseAndDb(response, uuid, name, key, null, null, null, createdAt);","627","  private void verifyResponseAndDb(CreateWsResponse response,","628","                                   String id, String name, String key,","629","                                   @Nullable String description, @Nullable String url, @Nullable String avatar,","630","                                   long createdAt) {","650","    OrganizationDto dto = dbClient.organizationDao().selectByUuid(dbTester.getSession(), id).get();","651","    assertThat(dto.getUuid()).isEqualTo(id);","661","  private void logInAsSystemAdministrator() {"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/organization\/ws\/CreateAction.java":[{"add":["24","import org.sonar.api.server.ws.Change;","76","      .setChangelog(new Change(\"7.2\", \"Minimal number of character of name and key is one character\"))","85","        \"Otherwise, it must be between 1 and 32 chars long. All chars must be lower-case letters (a to z), digits or dash (but dash can neither be trailing nor heading)\")"],"delete":["83","        \"Otherwise, it must be between 2 and 32 chars long. All chars must be lower-case letters (a to z), digits or dash (but dash can neither be trailing nor heading)\")"]}],"tests\/src\/test\/java\/org\/sonarqube\/tests\/organization\/OrganizationTest.java":[{"add":["32","import org.sonarqube.ws.Organizations;","194","    User user = tester.users().generateMember(organization);","195","    tester.wsClient().permissions().addUser(new AddUserRequest().setLogin(user.getLogin()).setOrganization(organization.getKey()).setPermission(\"provisioning\"));","196","    tester.wsClient().permissions().addUser(new AddUserRequest().setLogin(user.getLogin()).setOrganization(organization.getKey()).setPermission(\"scan\"));","284","  @Test","285","  public void create_organization_having_name_of_one_character() {","286","    tester.organizations().generate(o -> o.setName(\"A\"));","287","","288","    Organizations.SearchWsResponse search = tester.organizations().service().search(new SearchRequest());","289","","290","    assertThat(search.getOrganizationsList())","291","      .extracting(Organization::getName).contains(\"A\");","292","  }","293",""],"delete":["45","import org.sonarqube.ws.client.permissions.PermissionsService;","194","    User user = tester.users().generate();","195","    Group group = tester.groups().generate(organization);","196","    \/\/ users.removeGroups(\"sonar-users\");","197","    tester.organizations().service().addMember(new AddMemberRequest().setOrganization(organization.getKey()).setLogin(user.getLogin()));","198","    addPermissionsToUser(organization.getKey(), user.getLogin(), \"provisioning\", \"scan\");","231","  private void addPermissionsToUser(String orgKeyAndName, String login, String permission, String... otherPermissions) {","232","    PermissionsService permissionsService = tester.wsClient().permissions();","233","    permissionsService.addUser(new AddUserRequest().setLogin(login).setOrganization(orgKeyAndName).setPermission(permission));","234","    for (String otherPermission : otherPermissions) {","235","      permissionsService.addUser(new AddUserRequest().setLogin(login).setOrganization(orgKeyAndName).setPermission(otherPermission));","236","    }","237","  }","238",""]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/organization\/OrganizationValidationImpl.java":[{"add":["34","    checkArgument(keyCandidate.length() >= KEY_MIN_LENGTH, \"Key must not be empty\");","45","    checkArgument(nameCandidate.length() >= NAME_MIN_LENGTH, \"Name must not be empty\");"],"delete":["34","    checkArgument(keyCandidate.length() >= KEY_MIN_LENGTH, \"Key '%s' must be at least %s chars long\", keyCandidate, KEY_MIN_LENGTH);","45","    checkArgument(nameCandidate.length() >= NAME_MIN_LENGTH, \"Name '%s' must be at least %s chars long\", nameCandidate, NAME_MIN_LENGTH);"]}],"tests\/src\/test\/java\/org\/sonarqube\/tests\/organization\/PersonalOrganizationTest.java":[{"add":["23","import org.assertj.core.api.Java6Assertions;","34","import static org.assertj.core.api.Java6Assertions.tuple;","46","    tester.settings().setGlobalSettings(\"sonar.organizations.createPersonalOrg\", \"true\");","62","","63","  @Test","64","  public void create_personal_for_user_having_one_character_size_name() {","65","    tester.users().generate(u -> u.setName(\"A\"));","66","","67","    List<Organizations.Organization> organizations = tester.organizations().service().search(new SearchRequest()).getOrganizationsList();","68","    Java6Assertions.assertThat(organizations)","69","      .extracting(Organizations.Organization::getName, Organizations.Organization::getGuarded)","70","      .contains(tuple(\"A\", true));","71","  }"],"delete":["36","  private static final String SETTING_CREATE_PERSONAL_ORG = \"sonar.organizations.createPersonalOrg\";","37","","46","    tester.settings().setGlobalSettings(SETTING_CREATE_PERSONAL_ORG, \"true\");"]}]}},"80b9bc017cda9ead3ca0e3ad5c4aeb3a2b1407c0":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/IssuesSourceViewer.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/components\/IssuesSourceViewer.tsx":[{"add":["92","    if (locations.length > 0) {"],"delete":["92","    if (locations.length > 1) {"]}]}},"3a99ed1448f43fd342c8bf8aae2b525ae2e39a8d":{"changes":{"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/webhook\/ws\/WebhookDeliveriesAction.java":"MODIFY","server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/webhook\/ws\/WebhookDeliveriesActionTest.java":"MODIFY"},"diff":{"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/webhook\/ws\/WebhookDeliveriesAction.java":[{"add":["21","import java.util.Collections;","22","import java.util.HashMap;","23","import java.util.HashSet;","25","import java.util.Map;","26","import java.util.function.Function;","27","import java.util.stream.Collectors;","39","import org.sonar.server.exceptions.ForbiddenException;","117","    Map<String, ProjectDto> projectUuidMap;","124","        projectUuidMap = getProjectsDto(dbSession, deliveries);","126","        ProjectDto project = componentFinder.getProjectByKey(dbSession, projectKey);","127","        projectUuidMap = new HashMap<>();","128","        projectUuidMap.put(project.getUuid(), project);","134","        projectUuidMap = getProjectsDto(dbSession, deliveries);","137","    return new Data(projectUuidMap, deliveries).withPagingInfo(page, pageSize, totalElements);","140","  private Map<String, ProjectDto> getProjectsDto(DbSession dbSession, List<WebhookDeliveryLiteDto> deliveries) {","141","    Map<String, String> deliveredComponentUuid = deliveries","143","      .collect(Collectors.toMap(WebhookDeliveryLiteDto::getUuid, WebhookDeliveryLiteDto::getComponentUuid));","145","    if (!deliveredComponentUuid.isEmpty()) {","146","      return dbClient.projectDao().selectByUuids(dbSession, new HashSet<>(deliveredComponentUuid.values()))","147","        .stream()","148","        .collect(Collectors.toMap(ProjectDto::getUuid, Function.identity()));","150","      return Collections.emptyMap();","155","    private final Map<String, ProjectDto> projectUuidMap;","162","    Data(Map<String, ProjectDto> projectUuidMap, List<WebhookDeliveryLiteDto> deliveries) {","165","        this.projectUuidMap = projectUuidMap;","167","        checkArgument(!projectUuidMap.isEmpty());","168","        this.projectUuidMap = projectUuidMap;","173","      if (!projectUuidMap.isEmpty()) {","174","        List<ProjectDto> projectsUserHasAccessTo = userSession.keepAuthorizedProjects(UserRole.ADMIN, projectUuidMap.values());","175","        if (projectsUserHasAccessTo.size() != projectUuidMap.size()) {","176","          throw new ForbiddenException(\"Insufficient privileges\");","177","        }","185","        ProjectDto project = projectUuidMap.get(dto.getComponentUuid());"],"delete":["22","import java.util.Optional;","39","import static java.util.Objects.requireNonNull;","112","    ProjectDto project;","119","        project = getProjectDto(dbSession, deliveries);","121","        project = componentFinder.getProjectByKey(dbSession, projectKey);","127","        project = getProjectDto(dbSession, deliveries);","130","    return new Data(project, deliveries).withPagingInfo(page, pageSize, totalElements);","133","  private ProjectDto getProjectDto(DbSession dbSession, List<WebhookDeliveryLiteDto> deliveries) {","134","    Optional<String> deliveredComponentUuid = deliveries","136","      .map(WebhookDeliveryLiteDto::getComponentUuid)","137","      .findFirst();","139","    if (deliveredComponentUuid.isPresent()) {","140","      return componentFinder.getProjectByUuid(dbSession, deliveredComponentUuid.get());","142","      return null;","147","    private final ProjectDto project;","154","    Data(@Nullable ProjectDto project, List<WebhookDeliveryLiteDto> deliveries) {","157","        this.project = null;","159","        this.project = requireNonNull(project);","164","      if (project != null) {","165","        userSession.checkProjectPermission(UserRole.ADMIN, project);"]}],"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/webhook\/ws\/WebhookDeliveriesActionTest.java":[{"add":["37","import org.sonar.server.ws.TestRequest;","42","import static org.assertj.core.api.Assertions.assertThatThrownBy;","43","import static org.assertj.core.api.Assertions.tuple;","60","  private ComponentDto otherProject;","68","    otherProject = db.components().insertPrivateProject(c -> c.setDbKey(\"other-project\"));","81","    TestRequest request = ws.newRequest();","82","    assertThatThrownBy(request::execute)","83","      .isInstanceOf(UnauthorizedException.class);","166","","167","    WebhookDeliveryDto dto4 = newDto().setComponentUuid(otherProject.uuid()).setCeTaskUuid(\"t4\").setWebhookUuid(\"wh-1-uuid\");","168","    WebhookDeliveryDto dto5 = newDto().setComponentUuid(otherProject.uuid()).setCeTaskUuid(\"t5\").setWebhookUuid(\"wh-1-uuid\");","169","","173","    dbClient.webhookDeliveryDao().insert(db.getSession(), dto4);","174","    dbClient.webhookDeliveryDao().insert(db.getSession(), dto5);","176","    userSession.logIn().addProjectPermission(UserRole.ADMIN, project, otherProject);","181","    assertThat(response.getDeliveriesCount()).isEqualTo(4);","182","    assertThat(response.getDeliveriesList()).extracting(Webhooks.Delivery::getId)","183","      .containsOnly(dto1.getUuid(), dto2.getUuid(), dto4.getUuid(), dto5.getUuid());","184","    assertThat(response.getDeliveriesList()).extracting(Webhooks.Delivery::getId, Webhooks.Delivery::getComponentKey)","185","      .containsOnly(","186","        tuple(dto1.getUuid(), project.getDbKey()),","187","        tuple(dto2.getUuid(), project.getDbKey()),","188","        tuple(dto4.getUuid(), otherProject.getDbKey()),","189","        tuple(dto5.getUuid(), otherProject.getDbKey()));","257","    TestRequest request = ws.newRequest()","258","      .setParam(\"componentKey\", project.getDbKey());","259","    assertThatThrownBy(request::execute)","260","      .isInstanceOf(ForbiddenException.class)","261","      .hasMessage(\"Insufficient privileges\");","272","    TestRequest request = ws.newRequest()","273","      .setParam(\"ceTaskId\", dto.getCeTaskUuid());","274","    assertThatThrownBy(request::execute)","275","      .isInstanceOf(ForbiddenException.class)","276","      .hasMessage(\"Insufficient privileges\");","283","    TestRequest request = ws.newRequest()","285","      .setParam(\"ceTaskId\", \"t1\");","286","    assertThatThrownBy(request::execute)","287","      .isInstanceOf(IllegalArgumentException.class)","288","      .hasMessage(\"Either 'ceTaskId' or 'componentKey' or 'webhook' must be provided\");","295","    TestRequest request = ws.newRequest()","297","      .setParam(\"webhook\", \"wh-uuid\");","298","    assertThatThrownBy(request::execute)","299","      .isInstanceOf(IllegalArgumentException.class)","300","      .hasMessage(\"Either 'ceTaskId' or 'componentKey' or 'webhook' must be provided\");"],"delete":["24","import org.junit.rules.ExpectedException;","42","import static org.sonar.db.component.ComponentTesting.newPrivateProjectDto;","49","  public ExpectedException expectedException = ExpectedException.none();","50","","51","  @Rule","81","    expectedException.expect(UnauthorizedException.class);","82","","83","    ws.newRequest().execute();","170","    userSession.logIn().addProjectPermission(UserRole.ADMIN, project);","175","    assertThat(response.getDeliveriesCount()).isEqualTo(2);","176","    assertThat(response.getDeliveriesList()).extracting(Webhooks.Delivery::getId).containsOnly(dto1.getUuid(), dto2.getUuid());","244","    expectedException.expect(ForbiddenException.class);","245","    expectedException.expectMessage(\"Insufficient privileges\");","246","","247","    ws.newRequest()","248","      .setParam(\"componentKey\", project.getDbKey())","249","      .execute();","260","    expectedException.expect(ForbiddenException.class);","261","    expectedException.expectMessage(\"Insufficient privileges\");","262","","263","    ws.newRequest()","264","      .setParam(\"ceTaskId\", dto.getCeTaskUuid())","265","      .execute();","272","    expectedException.expect(IllegalArgumentException.class);","273","    expectedException.expectMessage(\"Either 'ceTaskId' or 'componentKey' or 'webhook' must be provided\");","274","","275","    ws.newRequest()","277","      .setParam(\"ceTaskId\", \"t1\")","278","      .execute();","285","    expectedException.expect(IllegalArgumentException.class);","286","    expectedException.expectMessage(\"Either 'ceTaskId' or 'componentKey' or 'webhook' must be provided\");","287","","288","    ws.newRequest()","290","      .setParam(\"webhook\", \"wh-uuid\")","291","      .execute();"]}]}},"3ed705ce1fbd9cc1f1b2a07da0a8de21d677e54c":{"changes":{"server\/sonar-docs\/src\/pages\/extend\/developing-plugin.md":"MODIFY"},"diff":{"server\/sonar-docs\/src\/pages\/extend\/developing-plugin.md":[{"add":["416","   "],"delete":[]}]}},"6ffa50da1317f51b78aba845c0cddb7030987e72":{"changes":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/settings\/_settings.html.erb":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/webapp\/WEB-INF\/app\/views\/settings\/_settings.html.erb":[{"add":["17","            <% if !category.key.blank?-%>","18","              <tr id=\"select_<%= category.key -%>\" class=\"select <%= cycle('even', 'odd', :name => 'category') -%> <%= 'selected' if @category.key==category.key -%>\">","19","                <td class=\"category\">","20","                  <% if @resource %>","21","                    <a href=\"<%= url_for(:controller => 'project', :action => 'settings') -%>?id=<%= url_encode(@resource.key) -%>&category=<%= url_encode(category.key) -%>\"><%= h category_name(category) -%><\/a>","22","                  <% else %>","23","                    <%= link_to category_name(category), :category => category.key -%>","24","                  <% end %>","25","                <\/td>","26","              <\/tr>","27","            <% end -%>"],"delete":["17","            <tr id=\"select_<%= category.key -%>\" class=\"select <%= cycle('even', 'odd', :name => 'category') -%> <%= 'selected' if @category.key==category.key -%>\">","18","              <td class=\"category\">","19","                <% if @resource %>","20","                  <a href=\"<%= url_for(:controller => 'project', :action => 'settings') -%>?id=<%= url_encode(@resource.key) -%>&category=<%= url_encode(category.key) -%>\"><%= h category_name(category) -%><\/a>","21","                <% else %>","22","                  <%= link_to category_name(category), :category => category.key -%>","23","                <% end %>","24","              <\/td>","25","            <\/tr>"]}]}},"ba1f0d9998d30b5a22f969604625397fcb943f39":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/ComponentSourceSnippetViewer.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/CrossComponentSourceViewerWrapper.tsx":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/ComponentSourceSnippetViewer.tsx":[{"add":["237","        branchLike={this.props.branchLike}"],"delete":["237","        branchLike={undefined}"]}],"server\/sonar-web\/src\/main\/js\/apps\/issues\/crossComponentSourceViewer\/CrossComponentSourceViewerWrapper.tsx":[{"add":["24","import { SourceViewerContext } from '..\/..\/..\/components\/SourceViewer\/SourceViewerContext';","224","            <SourceViewerContext.Provider","226","              value={{ branchLike: this.props.branchLike, file: snippetGroup.component }}>","227","              <ComponentSourceSnippetViewer","228","                branchLike={this.props.branchLike}","229","                highlightedLocationMessage={this.props.highlightedLocationMessage}","230","                issue={this.props.issue}","231","                issuePopup={this.state.issuePopup}","232","                issuesByLine={issuesByComponent[snippetGroup.component.key] || {}}","233","                last={i === locationsByComponent.length - 1}","234","                loadDuplications={this.fetchDuplications}","235","                locations={snippetGroup.locations || []}","236","                onIssueChange={this.props.onIssueChange}","237","                onIssuePopupToggle={this.handleIssuePopupToggle}","238","                onLinePopupToggle={this.handleLinePopupToggle}","239","                onLocationSelect={this.props.onLocationSelect}","240","                renderDuplicationPopup={this.renderDuplicationPopup}","241","                scroll={this.props.scroll}","242","                snippetGroup={snippetGroup}","243","                {...componentProps}","244","              \/>","245","            <\/SourceViewerContext.Provider>"],"delete":["223","            <ComponentSourceSnippetViewer","224","              branchLike={this.props.branchLike}","225","              highlightedLocationMessage={this.props.highlightedLocationMessage}","226","              issue={this.props.issue}","227","              issuePopup={this.state.issuePopup}","228","              issuesByLine={issuesByComponent[snippetGroup.component.key] || {}}","230","              last={i === locationsByComponent.length - 1}","231","              loadDuplications={this.fetchDuplications}","232","              locations={snippetGroup.locations || []}","233","              onIssueChange={this.props.onIssueChange}","234","              onIssuePopupToggle={this.handleIssuePopupToggle}","235","              onLinePopupToggle={this.handleLinePopupToggle}","236","              onLocationSelect={this.props.onLocationSelect}","237","              renderDuplicationPopup={this.renderDuplicationPopup}","238","              scroll={this.props.scroll}","239","              snippetGroup={snippetGroup}","240","              {...componentProps}","241","            \/>"]}]}},"469c74ee12c06bf4094cda0822762d4bc3ed0d8d":{"changes":{"server\/sonar-web\/src\/main\/js\/components\/issue\/Issue.css":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/components\/issue\/Issue.css":[{"add":["150",".issue-comment-text.markdown pre {","151","  float: none;","152","  height: auto;","153","  margin: 0;","154","  padding: var(--gridSize);","155","  background-color: var(--codeBackground);","156","  border: none;","157","  border-radius: 3px;","158","}","159","","160",".issue-comment-text.markdown br ~ pre {","161","  margin-top: var(--gridSize);","162","}","163",""],"delete":[]}]}},"80063c314e8e77cd4426f195aa05e6d266573c13":{"changes":{"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/ce\/ws\/ActivityActionTest.java":"MODIFY","server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/ce\/ws\/ActivityAction.java":"MODIFY"},"diff":{"server\/sonar-webserver-webapi\/src\/test\/java\/org\/sonar\/server\/ce\/ws\/ActivityActionTest.java":[{"add":["31","import org.sonar.api.utils.log.LogTester;","32","import org.sonar.api.utils.log.LoggerLevel;","394","    assertThat(result.getTasksCount()).isEqualTo(1);","580","  @Test","581","  public void filter_out_duplicate_tasks_in_progress_and_success(){","582","    logInAsSystemAdministrator();","583","    ComponentDto project1 = db.components().insertPrivateProject();","584","    ComponentDto project2 = db.components().insertPrivateProject();","585","    ComponentDto project3 = db.components().insertPrivateProject();","586","    insertQueue(\"T2\", project2, IN_PROGRESS);","587","    insertQueue(\"T3\", project3, IN_PROGRESS);","588","    insertActivity(\"T1\", project1, SUCCESS);","589","    insertActivity(\"T2\", project2, SUCCESS);","590","","591","    ActivityResponse response = ws.newRequest().setParam(\"status\", \"FAILED,IN_PROGRESS,SUCCESS\").executeProtobuf(ActivityResponse.class);","592","","593","    assertThat(response.getTasksList())","594","      .extracting(Task::getId)","595","      .containsExactlyInAnyOrder(\"T1\",\"T2\",\"T3\");","596","  }","597",""],"delete":["392","    assertThat(result.getTasksCount()).isEqualTo(2);"]}],"server\/sonar-webserver-webapi\/src\/main\/java\/org\/sonar\/server\/ce\/ws\/ActivityAction.java":[{"add":["29","import java.util.stream.StreamSupport;","58","import static java.util.stream.Collectors.toSet;","279","    Set<String> pastIds = StreamSupport","280","      .stream(pastTasks.spliterator(), false)","281","      .map(Ce.Task::getId)","282","      .collect(toSet());","283","","286","      if (nbInsertedTasks < pageSize && !pastIds.contains(queuedTask.getId())) {"],"delete":["279","      if (nbInsertedTasks < pageSize) {"]}]}},"8af697d69441500c42dfc5d8954d44314d65a00b":{"changes":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/branch\/ProjectBranches.java":"MODIFY"},"diff":{"sonar-scanner-engine\/src\/main\/java\/org\/sonar\/scanner\/scan\/branch\/ProjectBranches.java":[{"add":["21","import java.util.HashMap;","25","import javax.annotation.Nullable;","36","  @Nullable","37","  private final String defaultBranchName;","38","","40","    this.branches = new HashMap<>();","41","    String mainBranchName = null;","42","    for (BranchInfo branch : branchInfos) {","43","      String branchName = branch.name();","44","      this.branches.put(branchName, branch);","45","      if (branch.isMain()) {","46","        mainBranchName = branchName;","47","      }","48","    }","49","    this.defaultBranchName = mainBranchName;","60","","61","  @CheckForNull","62","  public String defaultBranchName() {","63","    return defaultBranchName;","64","  }"],"delete":["23","import java.util.function.Function;","24","import java.util.stream.Collectors;","37","    branches = branchInfos.stream().collect(Collectors.toMap(BranchInfo::name, Function.identity()));"]}]}},"49fd8bb0901062db0ac8a2a4cdf7d550f732bf65":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/styles.css":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/styles\/components\/issues.css":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/issues\/styles.css":[{"add":["141","  border: 1px solid transparent;","146","  border: 1px dashed #dd4040;","147","  transition: all 0.3s ease;","148","}","149","","150",".issues .issue:focus {","151","  outline: none;"],"delete":["141","  outline: 1px dashed transparent;","146","  outline-color: #dd4040;"]}],"server\/sonar-web\/src\/main\/js\/app\/styles\/components\/issues.css":[{"add":["28","  box-shadow: inset 0px 0px 0px 1px #ffeaea;","29","  transition: all 0.3s ease, border 0 ease;","38","  box-shadow: none;","39","  border: 1px solid #dd4040 !important;"],"delete":["28","  box-shadow: 0px 0px 0px 1px #ffeaea;","29","  transition: all 0.3s ease;","38","  box-shadow: 0px 0px 0px 1px #dd4040;"]}]}},"2e24cfd57b9ffa406a95018f23bc5034567a761a":{"changes":{"\/dev\/null":"DELETE","sonar-batch\/src\/test\/java\/org\/sonar\/batch\/scan\/ProjectReactorBuilderTest.java":"MODIFY","it\/it-tests\/src\/test\/java\/batch\/suite\/ProjectBuilderTest.java":"MODIFY","sonar-batch\/src\/main\/java\/org\/sonar\/batch\/scan\/ProjectReactorBuilder.java":"MODIFY","sonar-batch\/src\/test\/resources\/org\/sonar\/batch\/scan\/ProjectReactorBuilderTest\/multi-module-repeated-id\/sonar-project.properties":"MODIFY","sonar-batch\/src\/test\/resources\/org\/sonar\/batch\/scan\/ProjectReactorBuilderTest\/multi-module-duplicate-id\/sonar-project.properties":"ADD"},"diff":{"\/dev\/null":[{"add":[],"delete":[]}],"sonar-batch\/src\/test\/java\/org\/sonar\/batch\/scan\/ProjectReactorBuilderTest.java":[{"add":["29","import org.apache.commons.lang.StringUtils;","30","import org.junit.Before;","31","import org.junit.Rule;","32","import org.junit.Test;","33","import org.junit.rules.ExpectedException;","34","import org.sonar.api.batch.AnalysisMode;","35","import org.sonar.api.batch.bootstrap.ProjectDefinition;","36","import org.sonar.api.batch.bootstrap.ProjectReactor;","37","import org.sonar.batch.analysis.AnalysisProperties;","38","import org.sonar.test.TestUtils;","41","import static org.mockito.Mockito.mock;","42","import static org.mockito.Mockito.when;","50","","55","","91","  public void modulesDuplicateIds() {","93","    thrown.expectMessage(\"Two modules have the same id: 'module1'. Each module must have a unique id.\");","94","","95","    loadProjectDefinition(\"multi-module-duplicate-id\");","96","  }","97","","98","  @Test","99","  public void modulesRepeatedIds() {","100","    ProjectDefinition rootProject = loadProjectDefinition(\"multi-module-repeated-id\");","101","","102","    List<ProjectDefinition> modules = rootProject.getSubProjects();","103","    assertThat(modules.size()).isEqualTo(1);","104","    \/\/ Module 1","105","    ProjectDefinition module1 = modules.get(0);","106","    assertThat(module1.getKey()).isEqualTo(\"com.foo.project:module1\");","107","    assertThat(module1.getName()).isEqualTo(\"Foo Module 1\");","108","","109","    \/\/ Module 1 -> Module 1","110","    ProjectDefinition module1_module1 = module1.getSubProjects().get(0);","111","    assertThat(module1_module1.getKey()).isEqualTo(\"com.foo.project:module1:module1\");","112","    assertThat(module1_module1.getName()).isEqualTo(\"Foo Sub Module 1\");","478","","483","","555","    ProjectReactor projectReactor = new ProjectReactorBuilder(bootstrapProps, mode).execute();","558",""],"delete":["21","import org.apache.commons.lang.StringUtils;","22","import org.junit.Before;","23","import org.sonar.api.batch.AnalysisMode;","24","import org.sonar.batch.analysis.AnalysisProperties;","26","import org.junit.Rule;","27","import org.junit.Test;","28","import org.junit.rules.ExpectedException;","29","import org.sonar.api.batch.bootstrap.ProjectDefinition;","30","import org.sonar.api.batch.bootstrap.ProjectReactor;","31","import org.sonar.test.TestUtils;","32","","41","import static org.mockito.Mockito.when;","42","","43","import static org.mockito.Mockito.mock;","52","  ","57","  ","93","  public void modulesRepeatedIds() {","95","    thrown.expectMessage(\"Two modules have the same id: module1\");","96","    loadProjectDefinition(\"multi-module-repeated-id\");","462","  ","467","    ","539","    ProjectReactor projectReactor = new ProjectReactorBuilder(bootstrapProps,mode).execute();","542","  "]}],"it\/it-tests\/src\/test\/java\/batch\/suite\/ProjectBuilderTest.java":[{"add":["13","import util.ItUtils;","14","","15","import static org.assertj.core.api.Assertions.assertThat;"],"delete":["7","import static org.assertj.core.api.Assertions.assertThat;","8","","9","import com.sonar.orchestrator.build.BuildFailureException;","10","","11","import com.sonar.orchestrator.build.SonarRunner;","12","import util.ItUtils;","49","  @Test","50","  \/\/ SONAR-6665","51","  public void errorSubModuleSameName() {","52","    SonarRunner build = SonarRunner.create(ItUtils.projectDir(\"batch\/multi-module-repeated-names\"));","53","","54","    try {","55","      orchestrator.executeBuild(build);","56","    } catch (BuildFailureException e) {","57","      assertThat(e.getResult().getLogs()).contains(\"Two modules have the same id: module1\");","58","    }","59","  }","60",""]}],"sonar-batch\/src\/main\/java\/org\/sonar\/batch\/scan\/ProjectReactorBuilder.java":[{"add":["119","    Map<String, Map<String, String>> propertiesByModuleIdPath = new HashMap<>();","120","    extractPropertiesByModule(propertiesByModuleIdPath, \"\", \"\", taskProps.properties());","121","    ProjectDefinition rootProject = defineRootProject(propertiesByModuleIdPath.get(\"\"), null);","123","    defineChildren(rootProject, propertiesByModuleIdPath, \"\");","126","    taskProps.properties().putAll(propertiesByModuleIdPath.get(\"\"));","131","  private static void extractPropertiesByModule(Map<String, Map<String, String>> propertiesByModuleIdPath, String currentModuleId, String currentModuleIdPath,","132","    Map<String, String> parentProperties) {","133","    if (propertiesByModuleIdPath.containsKey(currentModuleIdPath)) {","134","      throw new IllegalStateException(String.format(\"Two modules have the same id: '%s'. Each module must have a unique id.\", currentModuleId));","156","    propertiesByModuleIdPath.put(currentModuleIdPath, currentModuleProperties);","159","      String subModuleIdPath = currentModuleIdPath.isEmpty() ? moduleId : (currentModuleIdPath + \".\" + moduleId);","160","      extractPropertiesByModule(propertiesByModuleIdPath, moduleId, subModuleIdPath, currentModuleProperties);","236","  private void defineChildren(ProjectDefinition parentProject, Map<String, Map<String, String>> propertiesByModuleIdPath, String parentModuleIdPath) {","240","        String moduleIdPath = parentModuleIdPath.isEmpty() ? moduleId : (parentModuleIdPath + \".\" + moduleId);","241","        Map<String, String> moduleProps = propertiesByModuleIdPath.get(moduleIdPath);","246","        defineChildren(childProject, propertiesByModuleIdPath, moduleIdPath);"],"delete":["119","    Map<String, Map<String, String>> propertiesByModuleId = new HashMap<>();","120","    extractPropertiesByModule(propertiesByModuleId, \"\", taskProps.properties());","121","    ProjectDefinition rootProject = defineRootProject(propertiesByModuleId.get(\"\"), null);","123","    defineChildren(rootProject, propertiesByModuleId);","126","    taskProps.properties().putAll(propertiesByModuleId.get(\"\"));","131","  private static void extractPropertiesByModule(Map<String, Map<String, String>> propertiesByModuleId, String currentModuleId, Map<String, String> parentProperties) {","132","    if (propertiesByModuleId.containsKey(currentModuleId)) {","133","      throw new IllegalStateException(String.format(\"Two modules have the same id: %s. Each module must have a unique id.\", currentModuleId));","155","    propertiesByModuleId.put(currentModuleId, currentModuleProperties);","158","      extractPropertiesByModule(propertiesByModuleId, moduleId, currentModuleProperties);","234","  private void defineChildren(ProjectDefinition parentProject, Map<String, Map<String, String>> propertiesByModuleId) {","238","        Map<String, String> moduleProps = propertiesByModuleId.get(moduleId);","243","        defineChildren(childProject, propertiesByModuleId);"]}],"sonar-batch\/src\/test\/resources\/org\/sonar\/batch\/scan\/ProjectReactorBuilderTest\/multi-module-repeated-id\/sonar-project.properties":[{"add":[],"delete":["12","module1.sonar.projectKey=com.foo.project.module1","17","module1.module1.sonar.projectKey=com.foo.project.module1.module1"]}],"sonar-batch\/src\/test\/resources\/org\/sonar\/batch\/scan\/ProjectReactorBuilderTest\/multi-module-duplicate-id\/sonar-project.properties":[{"add":[],"delete":[]}]}},"8c7e9ded9ad3f8f9aca79558320f319d229c547c":{"changes":{"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/DbClient.java":"MODIFY","server\/sonar-auth-saml\/src\/test\/java\/org\/sonar\/auth\/saml\/SamlMessageIdCheckerTest.java":"ADD","server\/sonar-auth-saml\/src\/test\/java\/org\/sonar\/auth\/saml\/SamlIdentityProviderTest.java":"MODIFY","server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/user\/SamlMessageIdDaoTest.java":"ADD","server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/user\/SamlMessageIdMapper.xml":"ADD","server\/sonar-auth-saml\/src\/main\/java\/org\/sonar\/auth\/saml\/SamlMessageIdChecker.java":"ADD","server\/sonar-db-core\/src\/main\/java\/org\/sonar\/db\/version\/SqTables.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/user\/SamlMessageIdMapper.java":"ADD","server\/sonar-auth-saml\/src\/test\/java\/org\/sonar\/auth\/saml\/SamlModuleTest.java":"MODIFY","server\/sonar-auth-saml\/src\/main\/java\/org\/sonar\/auth\/saml\/SamlModule.java":"MODIFY","server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/purge\/ExpiredSessionsCleanerExecutorServiceImpl.java":"ADD","server\/sonar-auth-saml\/src\/main\/java\/org\/sonar\/auth\/saml\/SamlIdentityProvider.java":"MODIFY","server\/sonar-db-dao\/src\/schema\/schema-sq.ddl":"MODIFY","server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/CreateSamlMessageIdsTableTest.java":"ADD","server\/sonar-webserver-auth\/src\/test\/java\/org\/sonar\/server\/authentication\/purge\/ExpiredSessionsCleanerTest.java":"ADD","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/DaoModule.java":"MODIFY","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/user\/SamlMessageIdDao.java":"ADD","server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/AuthenticationModule.java":"MODIFY","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/DbVersion84.java":"MODIFY","server\/sonar-auth-saml\/build.gradle":"MODIFY","\/dev\/null":"DELETE","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/user\/SamlMessageIdDto.java":"ADD","server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/purge\/ExpiredSessionsCleanerExecutorService.java":"ADD","server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/CreateSamlMessageIdsTable.java":"ADD","server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/purge\/ExpiredSessionsCleaner.java":"ADD","server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/MyBatis.java":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/DbClient.java":[{"add":["84","import org.sonar.db.user.SamlMessageIdDao;","167","  private final SamlMessageIdDao samlMessageIdDao;","246","    samlMessageIdDao = getDao(map, SamlMessageIdDao.class);","539","  public SamlMessageIdDao samlMessageIdDao() {","540","    return samlMessageIdDao;","541","  }","542",""],"delete":[]}],"server\/sonar-auth-saml\/src\/test\/java\/org\/sonar\/auth\/saml\/SamlMessageIdCheckerTest.java":[{"add":[],"delete":[]}],"server\/sonar-auth-saml\/src\/test\/java\/org\/sonar\/auth\/saml\/SamlIdentityProviderTest.java":[{"add":["38","import org.sonar.db.DbTester;","41","import static org.assertj.core.api.Assertions.assertThatThrownBy;","50","  public DbTester db = DbTester.create();","54","  private SamlMessageIdChecker samlMessageIdChecker = mock(SamlMessageIdChecker.class);","55","","56","  private SamlIdentityProvider underTest = new SamlIdentityProvider(new SamlSettings(settings.asConfig()), new SamlMessageIdChecker(db.getDbClient()));","103","    assertThatThrownBy(() -> underTest.init(context))","104","      .isInstanceOf(IllegalStateException.class)","105","      .hasMessage(\"Fail to create Auth\");","163","    assertThatThrownBy(() -> underTest.callback(callbackContext))","164","      .isInstanceOf(NullPointerException.class)","165","      .hasMessage(\"login is missing\");","174","    assertThatThrownBy(() -> underTest.callback(callbackContext))","175","      .isInstanceOf(NullPointerException.class)","176","      .hasMessage(\"name is missing\");","185","    assertThatThrownBy(() -> underTest.callback(callbackContext))","186","      .isInstanceOf(IllegalStateException.class)","187","      .hasMessage(\"Fail to create Auth\");","220","    assertThatThrownBy(() -> underTest.callback(callbackContext))","221","      .isInstanceOf(UnauthorizedException.class)","222","      .hasMessage(\"Signature validation failed. SAML Response rejected\");","223","  }","224","","225","  @Test","226","  public void fail_callback_when_message_was_already_sent() {","227","    setSettings(true);","228","    DumbCallbackContext callbackContext = new DumbCallbackContext(\"encoded_minimal_response.txt\");","231","","232","    assertThatThrownBy(() -> underTest.callback(callbackContext))","233","      .isInstanceOf(IllegalArgumentException.class)","234","      .hasMessage(\"This message has already been processed\");"],"delete":["32","import org.junit.rules.ExpectedException;","49","  public ExpectedException expectedException = ExpectedException.none();","53","  private SamlIdentityProvider underTest = new SamlIdentityProvider(new SamlSettings(settings.asConfig()));","100","    expectedException.expect(IllegalStateException.class);","101","    expectedException.expectMessage(\"Fail to create Auth\");","102","","103","    underTest.init(context);","161","    expectedException.expect(NullPointerException.class);","162","    expectedException.expectMessage(\"login is missing\");","164","    underTest.callback(callbackContext);","172","    expectedException.expect(NullPointerException.class);","173","    expectedException.expectMessage(\"name is missing\");","174","","175","    underTest.callback(callbackContext);","184","    expectedException.expect(IllegalStateException.class);","185","    expectedException.expectMessage(\"Fail to create Auth\");","186","","187","    underTest.callback(callbackContext);","220","    expectedException.expect(UnauthorizedException.class);","221","    expectedException.expectMessage(\"Signature validation failed. SAML Response rejected\");"]}],"server\/sonar-db-dao\/src\/test\/java\/org\/sonar\/db\/user\/SamlMessageIdDaoTest.java":[{"add":[],"delete":[]}],"server\/sonar-db-dao\/src\/main\/resources\/org\/sonar\/db\/user\/SamlMessageIdMapper.xml":[{"add":[],"delete":[]}],"server\/sonar-auth-saml\/src\/main\/java\/org\/sonar\/auth\/saml\/SamlMessageIdChecker.java":[{"add":[],"delete":[]}],"server\/sonar-db-core\/src\/main\/java\/org\/sonar\/db\/version\/SqTables.java":[{"add":["108","    \"saml_message_ids\","],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/user\/SamlMessageIdMapper.java":[{"add":[],"delete":[]}],"server\/sonar-auth-saml\/src\/test\/java\/org\/sonar\/auth\/saml\/SamlModuleTest.java":[{"add":["33","    assertThat(container.size()).isGreaterThan(COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER);"],"delete":["33","    assertThat(container.size()).isEqualTo(COMPONENTS_IN_EMPTY_COMPONENT_CONTAINER + 12);"]}],"server\/sonar-auth-saml\/src\/main\/java\/org\/sonar\/auth\/saml\/SamlModule.java":[{"add":["31","      SamlMessageIdChecker.class,"],"delete":[]}],"server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/purge\/ExpiredSessionsCleanerExecutorServiceImpl.java":[{"add":[],"delete":[]}],"server\/sonar-auth-saml\/src\/main\/java\/org\/sonar\/auth\/saml\/SamlIdentityProvider.java":[{"add":["58","  private final SamlMessageIdChecker samlMessageIdChecker;","60","  public SamlIdentityProvider(SamlSettings samlSettings, SamlMessageIdChecker samlMessageIdChecker) {","62","    this.samlMessageIdChecker = samlMessageIdChecker;","111","    samlMessageIdChecker.check(auth);"],"delete":["59","  public SamlIdentityProvider(SamlSettings samlSettings) {"]}],"server\/sonar-db-dao\/src\/schema\/schema-sq.ddl":[{"add":["873","CREATE TABLE \"SAML_MESSAGE_IDS\"(","874","    \"UUID\" VARCHAR(40) NOT NULL,","875","    \"MESSAGE_ID\" VARCHAR(255) NOT NULL,","876","    \"EXPIRATION_DATE\" BIGINT NOT NULL,","877","    \"CREATED_AT\" BIGINT NOT NULL","878",");","879","ALTER TABLE \"SAML_MESSAGE_IDS\" ADD CONSTRAINT \"PK_SAML_MESSAGE_IDS\" PRIMARY KEY(\"UUID\");","880","CREATE UNIQUE INDEX \"SAML_MESSAGE_IDS_UNIQUE\" ON \"SAML_MESSAGE_IDS\"(\"MESSAGE_ID\");","881",""],"delete":[]}],"server\/sonar-db-migration\/src\/test\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/CreateSamlMessageIdsTableTest.java":[{"add":[],"delete":[]}],"server\/sonar-webserver-auth\/src\/test\/java\/org\/sonar\/server\/authentication\/purge\/ExpiredSessionsCleanerTest.java":[{"add":[],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/DaoModule.java":[{"add":["86","import org.sonar.db.user.SamlMessageIdDao;","158","    SamlMessageIdDao.class,"],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/user\/SamlMessageIdDao.java":[{"add":[],"delete":[]}],"server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/AuthenticationModule.java":[{"add":["23","import org.sonar.server.authentication.purge.ExpiredSessionsCleaner;","24","import org.sonar.server.authentication.purge.ExpiredSessionsCleanerExecutorServiceImpl;","47","      ExpiredSessionsCleaner.class,","48","      ExpiredSessionsCleanerExecutorServiceImpl.class,"],"delete":["23","import org.sonar.server.authentication.purge.SessionTokensCleaner;","24","import org.sonar.server.authentication.purge.SessionTokensCleanerExecutorServiceImpl;","47","      SessionTokensCleaner.class,","48","      SessionTokensCleanerExecutorServiceImpl.class,"]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/DbVersion84.java":[{"add":["784","      .add(3802, \"Create 'SAML_MESSAGE_IDS' table\", CreateSamlMessageIdsTable.class)"],"delete":[]}],"server\/sonar-auth-saml\/build.gradle":[{"add":["19","    compileOnly project(':server:sonar-db-dao')","26","    testCompile testFixtures(project(':server:sonar-db-dao'))"],"delete":[]}],"\/dev\/null":[{"add":[],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/user\/SamlMessageIdDto.java":[{"add":[],"delete":[]}],"server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/purge\/ExpiredSessionsCleanerExecutorService.java":[{"add":[],"delete":[]}],"server\/sonar-db-migration\/src\/main\/java\/org\/sonar\/server\/platform\/db\/migration\/version\/v84\/CreateSamlMessageIdsTable.java":[{"add":[],"delete":[]}],"server\/sonar-webserver-auth\/src\/main\/java\/org\/sonar\/server\/authentication\/purge\/ExpiredSessionsCleaner.java":[{"add":[],"delete":[]}],"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/MyBatis.java":[{"add":["142","import org.sonar.db.user.SamlMessageIdMapper;","289","      SamlMessageIdMapper.class,"],"delete":[]}]}},"75aa5f3882c913fe5e145640ebe9b2b18d2b7895":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/documentation\/components\/__tests__\/pages-test.ts":"ADD","server\/sonar-web\/src\/main\/js\/apps\/documentation\/pages.ts":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/documentation\/components\/__tests__\/pages-test.ts":[{"add":[],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/documentation\/pages.ts":[{"add":["42","  }).filter((page: DocumentationEntry) => {","43","    if (!page.scope) {","44","      return true;","45","    }","46","    return isSonarCloud() ? page.scope === 'sonarcloud' : page.scope === 'sonarqube';","47","  });"],"delete":["42","  }).filter(","43","    (page: DocumentationEntry) =>","44","      page.scope !== 'static' && (isSonarCloud() || page.scope !== 'sonarcloud')","45","  );"]}]}},"2fcad2e70a89b783aea8b81bd8eb59355be9285c":{"changes":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualitygate\/ws\/ProjectStatusAction.java":"MODIFY","server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/qualitygate\/ws\/ProjectStatusActionTest.java":"MODIFY"},"diff":{"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/qualitygate\/ws\/ProjectStatusAction.java":[{"add":[],"delete":["48","import static com.google.common.base.Preconditions.checkState;","144","    checkState(snapshotDto != null, \"Last analysis of project '%s' not found\", projectDto.getKey());"]}],"server\/sonar-server\/src\/test\/java\/org\/sonar\/server\/qualitygate\/ws\/ProjectStatusActionTest.java":[{"add":["33","import org.sonar.db.component.ComponentDbTester;","68","  ComponentDbTester componentDb = new ComponentDbTester(db);","86","    ComponentDto project = componentDb.insertComponent(newProjectDto(\"project-uuid\"));","115","    ComponentDto project = componentDb.insertComponent(newProjectDto(\"project-uuid\"));","144","    ComponentDto project = componentDb.insertComponent(newProjectDto(\"project-uuid\").setKey(\"project-key\"));","173","    ComponentDto project = componentDb.insertComponent(newProjectDto(\"project-uuid\"));","177","    ProjectStatusWsResponse result = call(snapshot.getId().toString());","178","","179","    assertThat(result.getProjectStatus().getStatus()).isEqualTo(Status.NONE);","180","    assertThat(result.getProjectStatus().getConditionsCount()).isEqualTo(0);","181","  }","182","","183","  @Test","184","  public void return_undefined_status_if_snapshot_is_not_found() {","185","    userSession.login(\"john\").setGlobalPermissions(SYSTEM_ADMIN);","186","    componentDb.insertComponent(newProjectDto(\"project-uuid\"));","187","","188","    ProjectStatusWsResponse result = callByProjectUuid(\"project-uuid\");","198","    ComponentDto project = componentDb.insertComponent(newProjectDto(\"project-uuid\"));","202","    call(snapshot.getId().toString());","209","    ComponentDto project = componentDb.insertComponent(newProjectDto(\"project-uuid\"));","213","    call(snapshot.getId().toString());","218","    ComponentDto project = componentDb.insertComponent(newProjectDto(\"project-uuid\"));","224","    call(snapshot.getId().toString());","234","    call(ANALYSIS_ID);","241","    ComponentDto project = componentDb.insertComponent(newProjectDto(\"project-uuid\"));","246","    call(snapshot.getId().toString());","268","  private ProjectStatusWsResponse call(String taskId) {","279","","280","  private ProjectStatusWsResponse callByProjectUuid(String projectUuid) {","281","    try {","282","      return ProjectStatusWsResponse.parseFrom(","283","        ws.newRequest()","284","          .setParam(PARAM_PROJECT_ID, projectUuid)","285","          .setMediaType(MediaTypes.PROTOBUF)","286","          .execute().getInputStream());","287","    } catch (IOException e) {","288","      throw Throwables.propagate(e);","289","    }","290","  }"],"delete":["59","","85","    ComponentDto project = newProjectDto(\"project-uuid\");","86","    dbClient.componentDao().insert(dbSession, project);","115","    ComponentDto project = newProjectDto(\"project-uuid\");","116","    dbClient.componentDao().insert(dbSession, project);","145","    ComponentDto project = newProjectDto(\"project-uuid\")","146","      .setKey(\"project-key\");","147","    dbClient.componentDao().insert(dbSession, project);","176","    ComponentDto project = newProjectDto(\"project-uuid\");","177","    dbClient.componentDao().insert(dbSession, project);","181","    ProjectStatusWsResponse result = newRequest(snapshot.getId().toString());","191","    ComponentDto project = newProjectDto(\"project-uuid\");","192","    dbClient.componentDao().insert(dbSession, project);","196","    newRequest(snapshot.getId().toString());","203","    ComponentDto project = newProjectDto(\"project-uuid\");","204","    dbClient.componentDao().insert(dbSession, project);","208","    newRequest(snapshot.getId().toString());","213","    ComponentDto project = newProjectDto(\"project-uuid\");","214","    dbClient.componentDao().insert(dbSession, project);","220","    newRequest(snapshot.getId().toString());","230","    newRequest(ANALYSIS_ID);","237","    ComponentDto project = newProjectDto(\"project-uuid\");","238","    dbClient.componentDao().insert(dbSession, project);","243","    newRequest(snapshot.getId().toString());","265","  private ProjectStatusWsResponse newRequest(String taskId) {"]}]}},"0616b2d9acf1a4f1512695d869db9363e4a9a704":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/ProjectRow.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/__tests__\/__snapshots__\/ProjectRow-test.tsx.snap":"MODIFY","server\/sonar-web\/src\/main\/js\/app\/styles\/init\/misc.css":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/ProjectRow.tsx":[{"add":["67","        <td className=\"nowrap hide-overflow\" style={{ maxWidth: 400 }}>"],"delete":["67","        <td className=\"nowrap\">"]}],"server\/sonar-web\/src\/main\/js\/apps\/projectsManagement\/__tests__\/__snapshots__\/ProjectRow-test.tsx.snap":[{"add":["52","    className=\"nowrap hide-overflow\"","53","    style={","54","      Object {","55","        \"maxWidth\": 400,","56","      }","57","    }","146","    className=\"nowrap hide-overflow\"","147","    style={","148","      Object {","149","        \"maxWidth\": 400,","150","      }","151","    }"],"delete":["52","    className=\"nowrap\"","141","    className=\"nowrap\""]}],"server\/sonar-web\/src\/main\/js\/app\/styles\/init\/misc.css":[{"add":["30","table.hide-overflow td,","31","td.hide-overflow,","32","th.hide-overflow {","33","  text-overflow: ellipsis;","34","  overflow: hidden;","35","}","36",""],"delete":[]}]}},"230d3af0d9c51679ca6dda09248e45d5060e0c65":{"changes":{"server\/sonar-docs\/src\/components\/__tests__\/navTreeUtils-test.ts":"MODIFY","server\/sonar-docs\/src\/components\/__tests__\/Sidebar-test.tsx":"MODIFY","server\/sonar-docs\/src\/components\/navTreeUtils.ts":"MODIFY","server\/sonar-docs\/src\/components\/__tests__\/__snapshots__\/Sidebar-test.tsx.snap":"MODIFY"},"diff":{"server\/sonar-docs\/src\/components\/__tests__\/navTreeUtils-test.ts":[{"add":["69","    expect(getOpenChainFromPath('latest\/path\/value\/', navTree)).toEqual([navTree[0]]);","86","    expect(testPathAgainstUrl('\/path\/foo', '\/1.0\/path\/foo\/')).toBe(true);","87","    expect(testPathAgainstUrl('\/path\/foo', '\/latest\/path\/foo\/')).toBe(true);"],"delete":[]}],"server\/sonar-docs\/src\/components\/__tests__\/Sidebar-test.tsx":[{"add":["74","      location={{ pathname: '\/2.0\/foo\/baz\/foo\/bar' } as Location}"],"delete":["74","      location={{ pathname: '\/foo\/baz\/foo\/bar' } as Location}"]}],"server\/sonar-docs\/src\/components\/navTreeUtils.ts":[{"add":["87","  return trimSlashes(url).replace(\/^(latest|\\d+\\.\\d+)\\\/\/, '') === trimSlashes(path);","88","}","89","","90","function trimSlashes(string: string) {","93","  return string.replace(leadingRegEx, '').replace(trailingRegEx, '');"],"delete":["89","  return (","90","    path.replace(leadingRegEx, '').replace(trailingRegEx, '') ===","91","    url.replace(leadingRegEx, '').replace(trailingRegEx, '')","92","  );"]}],"server\/sonar-docs\/src\/components\/__tests__\/__snapshots__\/Sidebar-test.tsx.snap":[{"add":["107","            \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","125","            \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","135","              \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","146","                \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","159","            \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\",","177","            \"pathname\": \"\/2.0\/foo\/baz\/foo\/bar\","],"delete":["107","            \"pathname\": \"\/foo\/baz\/foo\/bar\",","125","            \"pathname\": \"\/foo\/baz\/foo\/bar\",","135","              \"pathname\": \"\/foo\/baz\/foo\/bar\",","146","                \"pathname\": \"\/foo\/baz\/foo\/bar\",","159","            \"pathname\": \"\/foo\/baz\/foo\/bar\",","177","            \"pathname\": \"\/foo\/baz\/foo\/bar\","]}]}},"27249ed2abb99bc945cc8b0917f33b50ae96f786":{"changes":{"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/NewEffortAggregatorTest.java":"MODIFY","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/NewEffortAggregator.java":"MODIFY"},"diff":{"server\/sonar-ce-task-projectanalysis\/src\/test\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/NewEffortAggregatorTest.java":[{"add":["126","","267","  @Test","268","  public void should_have_empty_measures_if_no_issues() {","269","    periodsHolder.setPeriod(PERIOD);","270","","271","    underTest.beforeComponent(FILE);","272","    underTest.afterComponent(FILE);","273","","274","    assertVariation(FILE, NEW_TECHNICAL_DEBT_KEY, 0);","275","    assertVariation(FILE, NEW_RELIABILITY_REMEDIATION_EFFORT_KEY, 0);","276","    assertVariation(FILE, NEW_SECURITY_REMEDIATION_EFFORT_KEY, 0);","277","  }","278","","282","    assertThat(newMeasure.getValueType()).isEqualTo(Measure.ValueType.NO_VALUE);"],"delete":[]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/issue\/NewEffortAggregator.java":[{"add":["32","import org.sonar.core.issue.DefaultIssue;","87","    if (periodHolder.hasPeriod()) {","88","      computeMeasure(component, newMaintainabilityEffortMetric, counter.maintainabilitySum);","89","      computeMeasure(component, newReliabilityEffortMetric, counter.reliabilitySum);","90","      computeMeasure(component, newSecurityEffortMetric, counter.securitySum);","91","    }","96","    double variation = effortSum.isEmpty ? 0.0 : effortSum.newEffort;","97","    measureRepository.add(component, metric, Measure.newMeasureBuilder().setVariation(variation).createNoValue());"],"delete":["26","import org.sonar.core.issue.DefaultIssue;","87","    computeMeasure(component, newMaintainabilityEffortMetric, counter.maintainabilitySum);","88","    computeMeasure(component, newReliabilityEffortMetric, counter.reliabilitySum);","89","    computeMeasure(component, newSecurityEffortMetric, counter.securitySum);","94","    if (!effortSum.isEmpty) {","95","      measureRepository.add(component, metric, Measure.newMeasureBuilder().setVariation(effortSum.newEffort).createNoValue());","96","    }"]}]}},"839fff93961cd93c14fd2986825a8b778e846c4a":{"changes":{"server\/sonar-server-common\/src\/test\/java\/org\/sonar\/server\/rule\/index\/RuleIndexerTest.java":"MODIFY","server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/rule\/index\/RuleIndexer.java":"MODIFY"},"diff":{"server\/sonar-server-common\/src\/test\/java\/org\/sonar\/server\/rule\/index\/RuleIndexerTest.java":[{"add":["36","import org.sonar.db.rule.RuleMetadataDto;","41","import static java.util.Collections.emptyList;","42","import static java.util.Collections.emptySet;","76","    underTest.index(dbSession, emptyList());","108","    RuleMetadataDto metadata = RuleTesting.newRuleMetadata(rule, organization).setTags(ImmutableSet.of(\"bla\"));","109","    dbTester.getDbClient().ruleDao().insertOrUpdate(dbTester.getSession(), metadata);","126","  public void delete_rule_extension_from_index_when_setting_rule_tags_to_empty() {","127","    RuleDefinitionDto rule = dbTester.rules().insert(r -> r.setRuleKey(RuleTesting.randomRuleKeyOfMaximumLength()));","128","    underTest.commitAndIndex(dbTester.getSession(), rule.getId());","129","    OrganizationDto organization = dbTester.organizations().insert();","130","    RuleMetadataDto metadata = RuleTesting.newRuleMetadata(rule, organization).setTags(ImmutableSet.of(\"bla\"));","131","    dbTester.getDbClient().ruleDao().insertOrUpdate(dbTester.getSession(), metadata);","132","    underTest.commitAndIndex(dbTester.getSession(), rule.getId(), organization);","133","","134","    \/\/ index tags","135","    RuleExtensionDoc doc = new RuleExtensionDoc()","136","      .setRuleId(rule.getId())","137","      .setScope(RuleExtensionScope.organization(organization.getUuid()));","138","    assertThat(es.getIds(RuleIndexDefinition.INDEX_TYPE_RULE_EXTENSION)).contains(doc.getId());","139","","140","    \/\/ update db table \"rules_metadata\" with empty tags and delete tags from index","141","    metadata = RuleTesting.newRuleMetadata(rule, organization).setTags(emptySet());","142","    dbTester.getDbClient().ruleDao().insertOrUpdate(dbTester.getSession(), metadata);","143","    underTest.commitAndIndex(dbTester.getSession(), rule.getId(), organization);","144","    assertThat(es.getIds(RuleIndexDefinition.INDEX_TYPE_RULE_EXTENSION)).doesNotContain(doc.getId());","145","  }","146","","147","  @Test"],"delete":["22","import java.util.Collections;","74","    underTest.index(dbSession, Collections.emptyList());","106","    dbTester.rules().insertOrUpdateMetadata(rule, organization, m -> m.setTags(ImmutableSet.of(\"bla\")));"]}],"server\/sonar-server-common\/src\/main\/java\/org\/sonar\/server\/rule\/index\/RuleIndexer.java":[{"add":["178","    docIds.forEach(docId -> bulkIndexer.addDeletion(INDEX_TYPE_RULE_EXTENSION, docId.getId(), String.valueOf(docId.getRuleId())));"],"delete":["178","    docIds.forEach(docId -> bulkIndexer.addDeletion(INDEX_TYPE_RULE_EXTENSION, docId.getId(), docId.getId()));"]}]}},"fd01cdec71067de25ea572e0462ff710e8f8ef22":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/documentation\/pages.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/helpers\/__tests__\/markdown-test.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/documentation\/__tests__\/pages-test.ts":"MODIFY","server\/sonar-web\/src\/main\/js\/helpers\/markdown.js":"MODIFY","server\/sonar-web\/src\/main\/js\/helpers\/__tests__\/__snapshots__\/markdown-test.ts.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/documentation\/pages.ts":[{"add":["54","    let content = '';","55","    let text = '';","56","    try {","57","      content = filterContent(parsed.content);","58","      text = getText(content);","59","    } catch (e) {","60","      \/* eslint-disable-next-line no-console *\/","61","      console.error(","62","        `Documentation - an error occured while parsing page \"${parsed.frontmatter.url ||","63","          file.path}\":`,","64","        e","65","      );","66","    }"],"delete":["54","    const content = filterContent(parsed.content);","55","    const text = getText(content);"]}],"server\/sonar-web\/src\/main\/js\/helpers\/__tests__\/markdown-test.ts":[{"add":["19","\/* eslint-disable no-console *\/","164","","165","it.only('should not break when conditional tags are misused', () => {","166","  const originalConsoleError = console.error;","167","  console.error = jest.fn();","168","","169","  const content = `Random <!-- \/sonarqube -->SC <!-- sonarqube -->text","170","  Break","171","  Bad <!-- \/sonarcloud -->SQ conditional <!-- sonarcloud -->formatting","172","  Break","173","  <!-- sonarqube -->SC<!-- \/sonarqube --><!-- sonarcloud -->SQ<!-- \/sonarcloud --> text","174","  Break","175","  Bad <!-- \/sonarcloud -->SQ conditional <!-- sonarcloud -->formatting","176","  Break","177","  <!-- static -->Static <!-- \/sonarcloud -->stuff`;","178","  expect(filterContent(content)).toMatchSnapshot();","179","  expect(console.error).toBeCalledTimes(2);","180","","181","  console.error = originalConsoleError;","182","});"],"delete":[]}],"server\/sonar-web\/src\/main\/js\/apps\/documentation\/__tests__\/pages-test.ts":[{"add":["19","\/* eslint-disable no-console *\/","20","import { filterContent, ParsedContent } from '..\/..\/..\/helpers\/markdown';","35","jest.mock('..\/..\/..\/helpers\/markdown', () => {","36","  const markdown = jest.requireActual('..\/..\/..\/helpers\/markdown');","37","  return { ...markdown, filterContent: jest.fn().mockImplementation(markdown.filterContent) };","38","});","39","","107","it('should not break the whole doc when one page cannot be parsed', () => {","108","  const originalConsoleError = console.error;","109","  console.error = jest.fn();","110","","111","  (filterContent as jest.Mock).mockImplementationOnce(() => {","112","    throw Error('Parse page error');","113","  });","114","  const pages = getPages();","115","  expect(pages.length).toBe(2);","116","  expect(pages[0].content).toBe('');","117","  expect(console.error).toBeCalledTimes(1);","118","","119","  console.error = originalConsoleError;","120","});","121",""],"delete":["19","import { ParsedContent } from '..\/..\/..\/helpers\/markdown';"]}],"server\/sonar-web\/src\/main\/js\/helpers\/markdown.js":[{"add":["98","    if (start < end) {","99","      newContent = newContent.substring(0, start) + newContent.substring(end + ending.length);","100","    } else {","101","      \/\/ When conditional tags are incorrectly used we log an error, strip them out and pass to the next pair of tags","102","      \/\/ eslint-disable-next-line no-console","103","      console.error(","104","        new Error(","105","          `Documentation - incorrect usage of conditional formatting tags here: \"${newContent.substring(","106","            end,","107","            start + beginning.length","108","          )}\"`","109","        )","110","      );","111","      newContent =","112","        newContent.substring(0, end) +","113","        newContent.substring(end + ending.length, start) +","114","        newContent.substring(start + beginning.length);","115","    }"],"delete":["98","    newContent = newContent.substring(0, start) + newContent.substring(end + ending.length);"]}],"server\/sonar-web\/src\/main\/js\/helpers\/__tests__\/__snapshots__\/markdown-test.ts.snap":[{"add":["57","","58","exports[`should not break when conditional tags are misused 1`] = `","59","\"Random SC text","60","  Break","61","  Bad SQ conditional formatting","62","  Break","63","  SC text","64","  Break","65","  Bad SQ conditional formatting","66","  Break","67","  Static stuff\"","68","`;"],"delete":[]}]}},"1d2eb3b5ac8a23c5c4aa1b1ede5ce3f24840ce8a":{"changes":{"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/measure\/LiveMeasureComparator.java":"ADD","server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/PersistLiveMeasuresStep.java":"MODIFY","server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/measure\/live\/LiveMeasureComputerImpl.java":"MODIFY"},"diff":{"server\/sonar-db-dao\/src\/main\/java\/org\/sonar\/db\/measure\/LiveMeasureComparator.java":[{"add":[],"delete":[]}],"server\/sonar-ce-task-projectanalysis\/src\/main\/java\/org\/sonar\/ce\/task\/projectanalysis\/step\/PersistLiveMeasuresStep.java":[{"add":["43","import org.sonar.db.measure.LiveMeasureComparator;","120","        measuresByMetricKey.getValue().stream()","124","          \/\/ To prevent deadlock, live measures are ordered the same way as in LiveMeasureComputerImpl#refreshComponentsOnSameProject","125","          .sorted(LiveMeasureComparator.INSTANCE)","126","          .forEach(lm -> {","127","            dao.insertOrUpdate(dbSession, lm, marker);","128","            total++;","129","          });","143",""],"delete":["24","import java.util.Iterator;","45","import org.sonar.db.measure.LiveMeasureDto;","112","      int count = 0;","122","        Iterator<LiveMeasureDto> liveMeasures = measuresByMetricKey.getValue().stream()","126","          .iterator();","127","        while (liveMeasures.hasNext()) {","128","          dao.insertOrUpdate(dbSession, liveMeasures.next(), marker);","129","          count++;","130","          total++;","131","          if (count % 100 == 0) {","132","            \/\/ use short transactions to avoid potential deadlocks on MySQL","133","            \/\/ https:\/\/jira.sonarsource.com\/browse\/SONAR-10117?focusedCommentId=153555&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-153555","134","            dbSession.commit();","135","          }","136","        }"]}],"server\/sonar-server\/src\/main\/java\/org\/sonar\/server\/measure\/live\/LiveMeasureComputerImpl.java":[{"add":["38","import org.sonar.db.measure.LiveMeasureComparator;","44","import org.sonar.server.measure.DebtRatingGrid;","45","import org.sonar.server.measure.Rating;","138","    matrix.getChanged().sorted(LiveMeasureComparator.INSTANCE)","139","      .forEach(m -> dbClient.liveMeasureDao().insertOrUpdate(dbSession, m, null));"],"delete":["41","import org.sonar.server.measure.DebtRatingGrid;","42","import org.sonar.server.measure.Rating;","137","    matrix.getChanged().forEach(m -> dbClient.liveMeasureDao().insertOrUpdate(dbSession, m, null));"]}]}},"bf1a177bdd101ee445a502c969e125a1fe066e8d":{"changes":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/pullRequests\/__tests__\/ReviewApp-test.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/pullRequests\/ReviewApp.tsx":"MODIFY","server\/sonar-web\/src\/main\/js\/apps\/overview\/pullRequests\/__tests__\/__snapshots__\/ReviewApp-test.tsx.snap":"MODIFY"},"diff":{"server\/sonar-web\/src\/main\/js\/apps\/overview\/pullRequests\/__tests__\/ReviewApp-test.tsx":[{"add":["50","","53","  wrapper.setProps({ conditions: [] });","54","","65","  const wrapper = shallowRender({ conditions: [], ignoredConditions: true });"],"delete":["62","  const wrapper = shallowRender({ ignoredConditions: true });"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/pullRequests\/ReviewApp.tsx":[{"add":["120","    const { branchLike, component, conditions, ignoredConditions, status } = this.props;","122","","123","    if (loading || !conditions) {","124","      return (","125","        <div className=\"page page-limited\">","126","          <i className=\"spinner\" \/>","127","        <\/div>","128","      );","129","    }","130","","135","        <div","136","          className={classNames('pr-overview', {","137","            'has-conditions': erroredConditions.length > 0","138","          })}>","139","          {ignoredConditions && (","140","            <Alert className=\"big-spacer-bottom\" display=\"inline\" variant=\"info\">","141","              <span className=\"text-middle\">","142","                {translate('overview.quality_gate.ignored_conditions')}","143","              <\/span>","144","              <HelpTooltip","145","                className=\"spacer-left\"","146","                overlay={translate('overview.quality_gate.ignored_conditions.tooltip')}","147","              \/>","148","            <\/Alert>","149","          )}","150","          <div className=\"display-flex-row\">","151","            <div className=\"pr-overview-quality-gate big-spacer-right\">","152","              <h3 className=\"spacer-bottom small\">","153","                {translate('overview.quality_gate')}","154","                <DocTooltip","156","                  doc={import(\/* webpackMode: \"eager\" *\/ 'Docs\/tooltips\/quality-gates\/project-homepage-quality-gate.md')}","158","              <\/h3>","159","              <LargeQualityGateBadge component={component} level={status} \/>","160","            <\/div>","161","","162","            {erroredConditions.length > 0 && (","163","              <div className=\"pr-overview-failed-conditions big-spacer-right\">","164","                <h3 className=\"spacer-bottom small\">{translate('overview.failed_conditions')}<\/h3>","165","                <QualityGateConditions","166","                  branchLike={branchLike}","167","                  collapsible={true}","168","                  component={component}","169","                  conditions={erroredConditions}","170","                \/>","172","            )}","174","            <div className=\"pr-overview-measurements flex-1\">","175","              <h3 className=\"spacer-bottom small\">{translate('overview.metrics')}<\/h3>","177","              {['BUG', 'VULNERABILITY', 'CODE_SMELL'].map((type: IssueType) => (","178","                <div className=\"pr-overview-measurements-row display-flex-row\" key={type}>","179","                  <div className=\"pr-overview-measurements-value flex-1 small display-flex-center\">","180","                    <IssueLabel","181","                      branchLike={branchLike}","182","                      className=\"overview-domain-measure-value\"","183","                      component={component}","188","                  {type === 'VULNERABILITY' && (","189","                    <div className=\"pr-overview-measurements-value flex-1 small display-flex-center\">","190","                      <IssueLabel","191","                        branchLike={branchLike}","192","                        className=\"huge\"","193","                        component={component}","194","                        docTooltip={import(\/* webpackMode: \"eager\" *\/ 'Docs\/tooltips\/metrics\/security-hotspots.md')}","195","                        measures={measures}","196","                        type=\"SECURITY_HOTSPOT\"","197","                      \/>","198","                    <\/div>","199","                  )}","200","                  <div className=\"pr-overview-measurements-rating display-flex-center\">","201","                    <IssueRating","202","                      branchLike={branchLike}","203","                      component={component}","204","                      measures={measures}","205","                      type={type}","206","                    \/>","207","                  <\/div>","208","                <\/div>","209","              ))}","210","","211","              {['COVERAGE', 'DUPLICATION'].map((type: MeasurementType) => (","212","                <div className=\"pr-overview-measurements-row display-flex-row\" key={type}>","213","                  <div className=\"pr-overview-measurements-value flex-1 small display-flex-center\">","214","                    <MeasurementLabel","215","                      branchLike={branchLike}","216","                      className=\"overview-domain-measure-value\"","217","                      component={component}","218","                      measures={measures}","219","                      type={type}","220","                    \/>","221","                  <\/div>","222","","223","                  <AfterMergeEstimate","224","                    className=\"pr-overview-measurements-estimate\"","225","                    measures={measures}","226","                    type={type}","227","                  \/>","228","                <\/div>","229","              ))}","232","        <\/div>"],"delete":["28","import DeferredSpinner from '..\/..\/..\/components\/common\/DeferredSpinner';","121","    const { branchLike, component, conditions = [], ignoredConditions, status } = this.props;","127","        {loading ? (","128","          <DeferredSpinner \/>","129","        ) : (","130","          <div","131","            className={classNames('pr-overview', {","132","              'has-conditions': erroredConditions.length > 0","133","            })}>","134","            {ignoredConditions && (","135","              <Alert className=\"big-spacer-bottom\" display=\"inline\" variant=\"info\">","136","                <span className=\"text-middle\">","137","                  {translate('overview.quality_gate.ignored_conditions')}","138","                <\/span>","139","                <HelpTooltip","141","                  overlay={translate('overview.quality_gate.ignored_conditions.tooltip')}","143","              <\/Alert>","144","            )}","145","            <div className=\"display-flex-row\">","146","              <div className=\"pr-overview-quality-gate big-spacer-right\">","147","                <h3 className=\"spacer-bottom small\">","148","                  {translate('overview.quality_gate')}","149","                  <DocTooltip","150","                    className=\"spacer-left\"","151","                    doc={import(\/* webpackMode: \"eager\" *\/ 'Docs\/tooltips\/quality-gates\/project-homepage-quality-gate.md')}","152","                  \/>","153","                <\/h3>","154","                <LargeQualityGateBadge component={component} level={status} \/>","157","              {erroredConditions.length > 0 && (","158","                <div className=\"pr-overview-failed-conditions big-spacer-right\">","159","                  <h3 className=\"spacer-bottom small\">{translate('overview.failed_conditions')}<\/h3>","160","                  <QualityGateConditions","161","                    branchLike={branchLike}","162","                    collapsible={true}","163","                    component={component}","164","                    conditions={erroredConditions}","165","                  \/>","166","                <\/div>","167","              )}","169","              <div className=\"pr-overview-measurements flex-1\">","170","                <h3 className=\"spacer-bottom small\">{translate('overview.metrics')}<\/h3>","171","","172","                {['BUG', 'VULNERABILITY', 'CODE_SMELL'].map((type: IssueType) => (","173","                  <div className=\"pr-overview-measurements-row display-flex-row\" key={type}>","174","                    <div className=\"pr-overview-measurements-value flex-1 small display-flex-center\">","175","                      <IssueLabel","176","                        branchLike={branchLike}","177","                        className=\"overview-domain-measure-value\"","178","                        component={component}","179","                        measures={measures}","180","                        type={type}","181","                      \/>","182","                    <\/div>","183","                    {type === 'VULNERABILITY' && (","184","                      <div className=\"pr-overview-measurements-value flex-1 small display-flex-center\">","185","                        <IssueLabel","186","                          branchLike={branchLike}","187","                          className=\"huge\"","188","                          component={component}","189","                          docTooltip={import(\/* webpackMode: \"eager\" *\/ 'Docs\/tooltips\/metrics\/security-hotspots.md')}","190","                          measures={measures}","191","                          type=\"SECURITY_HOTSPOT\"","192","                        \/>","193","                      <\/div>","194","                    )}","195","                    <div className=\"pr-overview-measurements-rating display-flex-center\">","196","                      <IssueRating","197","                        branchLike={branchLike}","198","                        component={component}","199","                        measures={measures}","200","                        type={type}","201","                      \/>","202","                    <\/div>","203","                  <\/div>","204","                ))}","205","","206","                {['COVERAGE', 'DUPLICATION'].map((type: MeasurementType) => (","207","                  <div className=\"pr-overview-measurements-row display-flex-row\" key={type}>","208","                    <div className=\"pr-overview-measurements-value flex-1 small display-flex-center\">","209","                      <MeasurementLabel","210","                        branchLike={branchLike}","211","                        className=\"overview-domain-measure-value\"","212","                        component={component}","213","                        measures={measures}","214","                        type={type}","215","                      \/>","216","                    <\/div>","217","","218","                    <AfterMergeEstimate","219","                      className=\"pr-overview-measurements-estimate\"","224","                ))}","225","              <\/div>","228","        )}"]}],"server\/sonar-web\/src\/main\/js\/apps\/overview\/pullRequests\/__tests__\/__snapshots__\/ReviewApp-test.tsx.snap":[{"add":["6","  <i","7","    className=\"spinner\"","8","  \/>"],"delete":["6","  <div","7","    className=\"pr-overview\"","8","  >","9","    <div","10","      className=\"display-flex-row\"","11","    >","12","      <div","13","        className=\"pr-overview-quality-gate big-spacer-right\"","14","      >","15","        <h3","16","          className=\"spacer-bottom small\"","17","        >","18","          overview.quality_gate","19","          <DocTooltip","20","            className=\"spacer-left\"","21","            doc={Promise {}}","22","          \/>","23","        <\/h3>","24","        <LargeQualityGateBadge","25","          component={","26","            Object {","27","              \"breadcrumbs\": Array [],","28","              \"key\": \"my-project\",","29","              \"name\": \"MyProject\",","30","              \"organization\": \"foo\",","31","              \"qualifier\": \"TRK\",","32","              \"qualityGate\": Object {","33","                \"isDefault\": true,","34","                \"key\": \"30\",","35","                \"name\": \"Sonar way\",","36","              },","37","              \"qualityProfiles\": Array [","38","                Object {","39","                  \"deleted\": false,","40","                  \"key\": \"my-qp\",","41","                  \"language\": \"ts\",","42","                  \"name\": \"Sonar way\",","43","                },","44","              ],","45","              \"tags\": Array [],","46","            }","47","          }","48","        \/>","49","      <\/div>","50","      <div","51","        className=\"pr-overview-measurements flex-1\"","52","      >","53","        <h3","54","          className=\"spacer-bottom small\"","55","        >","56","          overview.metrics","57","        <\/h3>","58","        <div","59","          className=\"pr-overview-measurements-row display-flex-row\"","60","          key=\"BUG\"","61","        >","62","          <div","63","            className=\"pr-overview-measurements-value flex-1 small display-flex-center\"","64","          >","65","            <IssueLabel","66","              branchLike={","67","                Object {","68","                  \"analysisDate\": \"2018-01-01\",","69","                  \"base\": \"master\",","70","                  \"branch\": \"feature\/foo\/bar\",","71","                  \"key\": \"1001\",","72","                  \"target\": \"master\",","73","                  \"title\": \"Foo Bar feature\",","74","                }","75","              }","76","              className=\"overview-domain-measure-value\"","77","              component={","78","                Object {","79","                  \"breadcrumbs\": Array [],","80","                  \"key\": \"my-project\",","81","                  \"name\": \"MyProject\",","82","                  \"organization\": \"foo\",","83","                  \"qualifier\": \"TRK\",","84","                  \"qualityGate\": Object {","85","                    \"isDefault\": true,","86","                    \"key\": \"30\",","87","                    \"name\": \"Sonar way\",","88","                  },","89","                  \"qualityProfiles\": Array [","90","                    Object {","91","                      \"deleted\": false,","92","                      \"key\": \"my-qp\",","93","                      \"language\": \"ts\",","94","                      \"name\": \"Sonar way\",","95","                    },","96","                  ],","97","                  \"tags\": Array [],","98","                }","99","              }","100","              measures={Array []}","101","              type=\"BUG\"","102","            \/>","103","          <\/div>","104","          <div","105","            className=\"pr-overview-measurements-rating display-flex-center\"","106","          >","107","            <IssueRating","108","              branchLike={","109","                Object {","110","                  \"analysisDate\": \"2018-01-01\",","111","                  \"base\": \"master\",","112","                  \"branch\": \"feature\/foo\/bar\",","113","                  \"key\": \"1001\",","114","                  \"target\": \"master\",","115","                  \"title\": \"Foo Bar feature\",","116","                }","117","              }","118","              component={","119","                Object {","120","                  \"breadcrumbs\": Array [],","121","                  \"key\": \"my-project\",","122","                  \"name\": \"MyProject\",","123","                  \"organization\": \"foo\",","124","                  \"qualifier\": \"TRK\",","125","                  \"qualityGate\": Object {","126","                    \"isDefault\": true,","127","                    \"key\": \"30\",","128","                    \"name\": \"Sonar way\",","129","                  },","130","                  \"qualityProfiles\": Array [","131","                    Object {","132","                      \"deleted\": false,","133","                      \"key\": \"my-qp\",","134","                      \"language\": \"ts\",","135","                      \"name\": \"Sonar way\",","136","                    },","137","                  ],","138","                  \"tags\": Array [],","139","                }","140","              }","141","              measures={Array []}","142","              type=\"BUG\"","143","            \/>","144","          <\/div>","145","        <\/div>","146","        <div","147","          className=\"pr-overview-measurements-row display-flex-row\"","148","          key=\"VULNERABILITY\"","149","        >","150","          <div","151","            className=\"pr-overview-measurements-value flex-1 small display-flex-center\"","152","          >","153","            <IssueLabel","154","              branchLike={","155","                Object {","156","                  \"analysisDate\": \"2018-01-01\",","157","                  \"base\": \"master\",","158","                  \"branch\": \"feature\/foo\/bar\",","159","                  \"key\": \"1001\",","160","                  \"target\": \"master\",","161","                  \"title\": \"Foo Bar feature\",","162","                }","163","              }","164","              className=\"overview-domain-measure-value\"","165","              component={","166","                Object {","167","                  \"breadcrumbs\": Array [],","168","                  \"key\": \"my-project\",","169","                  \"name\": \"MyProject\",","170","                  \"organization\": \"foo\",","171","                  \"qualifier\": \"TRK\",","172","                  \"qualityGate\": Object {","173","                    \"isDefault\": true,","174","                    \"key\": \"30\",","175","                    \"name\": \"Sonar way\",","176","                  },","177","                  \"qualityProfiles\": Array [","178","                    Object {","179","                      \"deleted\": false,","180","                      \"key\": \"my-qp\",","181","                      \"language\": \"ts\",","182","                      \"name\": \"Sonar way\",","183","                    },","184","                  ],","185","                  \"tags\": Array [],","186","                }","187","              }","188","              measures={Array []}","189","              type=\"VULNERABILITY\"","190","            \/>","191","          <\/div>","192","          <div","193","            className=\"pr-overview-measurements-value flex-1 small display-flex-center\"","194","          >","195","            <IssueLabel","196","              branchLike={","197","                Object {","198","                  \"analysisDate\": \"2018-01-01\",","199","                  \"base\": \"master\",","200","                  \"branch\": \"feature\/foo\/bar\",","201","                  \"key\": \"1001\",","202","                  \"target\": \"master\",","203","                  \"title\": \"Foo Bar feature\",","204","                }","205","              }","206","              className=\"huge\"","207","              component={","208","                Object {","209","                  \"breadcrumbs\": Array [],","210","                  \"key\": \"my-project\",","211","                  \"name\": \"MyProject\",","212","                  \"organization\": \"foo\",","213","                  \"qualifier\": \"TRK\",","214","                  \"qualityGate\": Object {","215","                    \"isDefault\": true,","216","                    \"key\": \"30\",","217","                    \"name\": \"Sonar way\",","218","                  },","219","                  \"qualityProfiles\": Array [","220","                    Object {","221","                      \"deleted\": false,","222","                      \"key\": \"my-qp\",","223","                      \"language\": \"ts\",","224","                      \"name\": \"Sonar way\",","225","                    },","226","                  ],","227","                  \"tags\": Array [],","228","                }","229","              }","230","              docTooltip={Promise {}}","231","              measures={Array []}","232","              type=\"SECURITY_HOTSPOT\"","233","            \/>","234","          <\/div>","235","          <div","236","            className=\"pr-overview-measurements-rating display-flex-center\"","237","          >","238","            <IssueRating","239","              branchLike={","240","                Object {","241","                  \"analysisDate\": \"2018-01-01\",","242","                  \"base\": \"master\",","243","                  \"branch\": \"feature\/foo\/bar\",","244","                  \"key\": \"1001\",","245","                  \"target\": \"master\",","246","                  \"title\": \"Foo Bar feature\",","247","                }","248","              }","249","              component={","250","                Object {","251","                  \"breadcrumbs\": Array [],","252","                  \"key\": \"my-project\",","253","                  \"name\": \"MyProject\",","254","                  \"organization\": \"foo\",","255","                  \"qualifier\": \"TRK\",","256","                  \"qualityGate\": Object {","257","                    \"isDefault\": true,","258","                    \"key\": \"30\",","259","                    \"name\": \"Sonar way\",","260","                  },","261","                  \"qualityProfiles\": Array [","262","                    Object {","263","                      \"deleted\": false,","264","                      \"key\": \"my-qp\",","265","                      \"language\": \"ts\",","266","                      \"name\": \"Sonar way\",","267","                    },","268","                  ],","269","                  \"tags\": Array [],","270","                }","271","              }","272","              measures={Array []}","273","              type=\"VULNERABILITY\"","274","            \/>","275","          <\/div>","276","        <\/div>","277","        <div","278","          className=\"pr-overview-measurements-row display-flex-row\"","279","          key=\"CODE_SMELL\"","280","        >","281","          <div","282","            className=\"pr-overview-measurements-value flex-1 small display-flex-center\"","283","          >","284","            <IssueLabel","285","              branchLike={","286","                Object {","287","                  \"analysisDate\": \"2018-01-01\",","288","                  \"base\": \"master\",","289","                  \"branch\": \"feature\/foo\/bar\",","290","                  \"key\": \"1001\",","291","                  \"target\": \"master\",","292","                  \"title\": \"Foo Bar feature\",","293","                }","294","              }","295","              className=\"overview-domain-measure-value\"","296","              component={","297","                Object {","298","                  \"breadcrumbs\": Array [],","299","                  \"key\": \"my-project\",","300","                  \"name\": \"MyProject\",","301","                  \"organization\": \"foo\",","302","                  \"qualifier\": \"TRK\",","303","                  \"qualityGate\": Object {","304","                    \"isDefault\": true,","305","                    \"key\": \"30\",","306","                    \"name\": \"Sonar way\",","307","                  },","308","                  \"qualityProfiles\": Array [","309","                    Object {","310","                      \"deleted\": false,","311","                      \"key\": \"my-qp\",","312","                      \"language\": \"ts\",","313","                      \"name\": \"Sonar way\",","314","                    },","315","                  ],","316","                  \"tags\": Array [],","317","                }","318","              }","319","              measures={Array []}","320","              type=\"CODE_SMELL\"","321","            \/>","322","          <\/div>","323","          <div","324","            className=\"pr-overview-measurements-rating display-flex-center\"","325","          >","326","            <IssueRating","327","              branchLike={","328","                Object {","329","                  \"analysisDate\": \"2018-01-01\",","330","                  \"base\": \"master\",","331","                  \"branch\": \"feature\/foo\/bar\",","332","                  \"key\": \"1001\",","333","                  \"target\": \"master\",","334","                  \"title\": \"Foo Bar feature\",","335","                }","336","              }","337","              component={","338","                Object {","339","                  \"breadcrumbs\": Array [],","340","                  \"key\": \"my-project\",","341","                  \"name\": \"MyProject\",","342","                  \"organization\": \"foo\",","343","                  \"qualifier\": \"TRK\",","344","                  \"qualityGate\": Object {","345","                    \"isDefault\": true,","346","                    \"key\": \"30\",","347","                    \"name\": \"Sonar way\",","348","                  },","349","                  \"qualityProfiles\": Array [","350","                    Object {","351","                      \"deleted\": false,","352","                      \"key\": \"my-qp\",","353","                      \"language\": \"ts\",","354","                      \"name\": \"Sonar way\",","355","                    },","356","                  ],","357","                  \"tags\": Array [],","358","                }","359","              }","360","              measures={Array []}","361","              type=\"CODE_SMELL\"","362","            \/>","363","          <\/div>","364","        <\/div>","365","        <div","366","          className=\"pr-overview-measurements-row display-flex-row\"","367","          key=\"COVERAGE\"","368","        >","369","          <div","370","            className=\"pr-overview-measurements-value flex-1 small display-flex-center\"","371","          >","372","            <MeasurementLabel","373","              branchLike={","374","                Object {","375","                  \"analysisDate\": \"2018-01-01\",","376","                  \"base\": \"master\",","377","                  \"branch\": \"feature\/foo\/bar\",","378","                  \"key\": \"1001\",","379","                  \"target\": \"master\",","380","                  \"title\": \"Foo Bar feature\",","381","                }","382","              }","383","              className=\"overview-domain-measure-value\"","384","              component={","385","                Object {","386","                  \"breadcrumbs\": Array [],","387","                  \"key\": \"my-project\",","388","                  \"name\": \"MyProject\",","389","                  \"organization\": \"foo\",","390","                  \"qualifier\": \"TRK\",","391","                  \"qualityGate\": Object {","392","                    \"isDefault\": true,","393","                    \"key\": \"30\",","394","                    \"name\": \"Sonar way\",","395","                  },","396","                  \"qualityProfiles\": Array [","397","                    Object {","398","                      \"deleted\": false,","399","                      \"key\": \"my-qp\",","400","                      \"language\": \"ts\",","401","                      \"name\": \"Sonar way\",","402","                    },","403","                  ],","404","                  \"tags\": Array [],","405","                }","406","              }","407","              measures={Array []}","408","              type=\"COVERAGE\"","409","            \/>","410","          <\/div>","411","          <AfterMergeEstimate","412","            className=\"pr-overview-measurements-estimate\"","413","            measures={Array []}","414","            type=\"COVERAGE\"","415","          \/>","416","        <\/div>","417","        <div","418","          className=\"pr-overview-measurements-row display-flex-row\"","419","          key=\"DUPLICATION\"","420","        >","421","          <div","422","            className=\"pr-overview-measurements-value flex-1 small display-flex-center\"","423","          >","424","            <MeasurementLabel","425","              branchLike={","426","                Object {","427","                  \"analysisDate\": \"2018-01-01\",","428","                  \"base\": \"master\",","429","                  \"branch\": \"feature\/foo\/bar\",","430","                  \"key\": \"1001\",","431","                  \"target\": \"master\",","432","                  \"title\": \"Foo Bar feature\",","433","                }","434","              }","435","              className=\"overview-domain-measure-value\"","436","              component={","437","                Object {","438","                  \"breadcrumbs\": Array [],","439","                  \"key\": \"my-project\",","440","                  \"name\": \"MyProject\",","441","                  \"organization\": \"foo\",","442","                  \"qualifier\": \"TRK\",","443","                  \"qualityGate\": Object {","444","                    \"isDefault\": true,","445","                    \"key\": \"30\",","446","                    \"name\": \"Sonar way\",","447","                  },","448","                  \"qualityProfiles\": Array [","449","                    Object {","450","                      \"deleted\": false,","451","                      \"key\": \"my-qp\",","452","                      \"language\": \"ts\",","453","                      \"name\": \"Sonar way\",","454","                    },","455","                  ],","456","                  \"tags\": Array [],","457","                }","458","              }","459","              measures={Array []}","460","              type=\"DUPLICATION\"","461","            \/>","462","          <\/div>","463","          <AfterMergeEstimate","464","            className=\"pr-overview-measurements-estimate\"","465","            measures={Array []}","466","            type=\"DUPLICATION\"","467","          \/>","468","        <\/div>","469","      <\/div>","470","    <\/div>","471","  <\/div>"]}]}}}